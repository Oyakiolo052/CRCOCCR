pullNumber,commenter,comment,state,html_url,submitted_at,commented_commitID
153,joshelser,"PasswordToken is only one way that we support authentication. Not all of them have a ""traditional"" password. I would just state that the token is missing or similar.
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/153#pullrequestreview-241784,2016-09-15T19:57:25Z,0dc335b25933e35115cb4adf4fec7ec29753da47
154,joshelser,"Nit-picky things about throwing exceptions instead of returning null in expected situations.
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/154#pullrequestreview-645178,2016-09-19T21:50:46Z,8d65fb5219cff62ce328eef99693c0bdc4c5c977
159,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/159#pullrequestreview-4560262,2016-10-17T22:00:31Z,e701ab62058fc731b3edd40118a0a9d79efbdfc3
163,joshelser,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/163#pullrequestreview-3801636,2016-10-12T02:59:31Z,ca3b8f1414fc4536e9c42921e8b8271025874912
175,mikewalch,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/175#pullrequestreview-6472898,2016-10-31T16:36:35Z,f7a5c15767ccf62f5b6fdc9cfa2f5d8ba3081e26
176,ctubbsii,"Some small punctuation and grammar issues, but nothing worth noting in particular. Content looks good, with only some minor suggestions.
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/176#pullrequestreview-6340410,2016-10-29T03:00:10Z,6b98fd4e7ecb76075bd0c713867401f614d8fd04
176,joshelser,"Very nice! Some minor fixes but this is a great writeup.
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/176#pullrequestreview-6370884,2016-10-30T20:35:21Z,6b98fd4e7ecb76075bd0c713867401f614d8fd04
187,drewfarris,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/187#pullrequestreview-9745813,2016-11-22T20:13:07Z,d95118fa1dd91d242e870b53c61893b97cbf3184
194,ctubbsii,"You should run `mvn clean verify -DskipITs`, and make any changes necessary for things to succeed. This will also format the code. You should commit any changes from formatting the code and fixing checkstyle errors and update the PR with those changes (pushing to the branch will update the PR).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/194#pullrequestreview-14234075,2016-12-22T21:35:11Z,38f9912167262bad5d1b023eb2cd913999832247
194,joshelser,"I think I ended up commenting more on the hacks that I had put in originally (which you've now inherited), but this is some nice progress! Good work, @lstav.

I think it would be prudent to make progress on the ""packaging"" and ""jackson-or-sparkjava"" questions that are outstanding. Once we get to a place where this new server is more ""standard"" with the rest of the Accumulo service startup/configuration, it will be easier to continue to test.

After we get that working standalone, then we can start writing some simple unit tests against these new pojos. That was one of the major goals that I had originally.

One final comment, I think we should re-target the merge into a feature branch instead of landing it into master. I think getting code into the Apache repository is a good forcing-factor on us all to think about and work on this; however, I do not believe this is stable enough to go into the master branch yet.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/194#pullrequestreview-14355959,2016-12-24T18:23:26Z,d84f3ccc4ebb842769195c1f0e029b0644a1e0f9
196,joshelser,"Thanks for putting this one together, Luis! Just the one minor suggestion.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/196#pullrequestreview-14707678,2016-12-29T20:23:49Z,9a88d9dc01cb85842e3b25b959e8feeda03c00a5
210,keith-turner,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/210#pullrequestreview-19851298,2017-02-02T18:14:59Z,41db183ee9bef6fd3d8b688710d0f9c5996d8740
220,joshelser,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/220#pullrequestreview-23545811,2017-02-23T18:12:45Z,579762aa3e71d2a0513b4d122a9d68e62fa094e0
221,joshelser,"Nice change with docs.

One open-ended question: how can we make sure that log-forwarding works with the removal of MonitorLoggingIT? Do we need to extend MAC to allow us to configure log4j better and test this?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/221#pullrequestreview-23772658,2017-02-24T18:03:17Z,20ed875a515829d6d9e6d060cc909c2a3a51b786
228,joshelser,I am -1 on these changes as it breaks functionality of the StandaloneCluster in the case where configuration files are rw-only by the Accumulo user only.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/228#pullrequestreview-25368921,2017-03-06T21:35:36Z,310323a306fe3adcb353e559f2bec635ebcfb106
242,joshelser,"Nice work here, Luis! Good on you to stick with this.

A couple of general comments:

* I see some pojo classes have `@XmlAttribute` on the member variables, and others don't? Why the inconsistency (when the name isn't being overridden)?
* Might just be me, but I'd prefer to see consistency on the variable declaration (one per line) and only set an initial value when it doesn't involve instantiating a new object. I don't remember what Accumulo's ""style"" actually says.
* All of those pojos also leave the member variables public. Can we not encapsulate them and expose them with getters? I am pretty sure that Jackson supports this.
* Some minor whitespace things. Extra newlines at the start of a method body which are just bloat.
* Any cross-browser testing? e.g. FF, Chrome, IE?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/242#pullrequestreview-31218934,2017-04-06T04:35:47Z,719033eb92c71df0cba206ca5966d8fb271337bc
244,joshelser,"Overall, I think you should provide some context as to why you've made these changes. Someone else looking back would have no reason as to why you made these changes.

I'm quite astounded that the benchmarks showed these changes are faster than previous (notably, the SynchronizedFilter).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/244#pullrequestreview-33814304,2017-04-20T16:18:43Z,6b1712af5d65d8d811c240ed0092696b09bcf700
250,phrocker,"How about an alternative: Store this information into an Accumulo table, and avoid storing anything into Accumulo. Provides us the benefit of security. it could then be a contrib. 

In a multi-tenant system how would you protect the ZK entries?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/250#pullrequestreview-33592840,2017-04-19T19:10:11Z,c22031a9c67769bb0a90cbeeb9e935dd8accafbc
256,joshelser,A test that verifies that other block cache implementations can be loaded would be great (since we have implicit testing that the default can be loaded).,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/256#pullrequestreview-36811530,2017-05-08T16:05:12Z,03a8f2acfb4f95b545c47a4e681dd5b8fa585c94
256,mjwall,"'mvn clean install' fails with checkstyle errors, findbug errors and animal sniffer errors
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/256#pullrequestreview-37612211,2017-05-11T17:57:29Z,d98fba14b226b7c47a7700876e16c832c3100806
270,phrocker,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/270#pullrequestreview-45214638,2017-06-20T17:45:02Z,84e815786f78c9391962ffd788265946abe546d2
270,phrocker,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/270#pullrequestreview-45243468,2017-06-20T19:39:27Z,01654c0a94c29a99fd1c6abed44d04fffd17b2f8
279,joshelser,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/279#pullrequestreview-49252399,2017-07-11T16:35:35Z,7b6d7cd70f4427475abb1014e74e5a692ee3c470
283,madrob,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/283#pullrequestreview-52410339,2017-07-26T16:05:03Z,2e66712008d185e23ac5bc1363afe4245ff3b2a8
289,ctubbsii,"A few minor quality issues in my remaining comments, which need to be addressed, but otherwise, this PR looks just about ready to merge.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/289#pullrequestreview-79276559,2017-11-27T19:37:51Z,d15ddb7c11dad85f05c7fdd137d445f7101ab0aa
292,ctubbsii,I learned a lot reviewing this change. I think it's almost done. Just two more tiny suggestions for the test.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/292#pullrequestreview-56781190,2017-08-16T22:28:04Z,0ea001529b51c83233f8bba61b32bc371a23ddb2
305,joshelser,"Looks fine at a high level to me. A couple of things to improve on (In general, it's nice if metrics descriptions have ""good english"" instead of short-hand). A test case would be excellent too (mocking out the data -- don't need to do something end-to-end).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/305#pullrequestreview-68660942,2017-10-11T16:07:34Z,18edf1abc8dd1bdc06486bda6ac9abe1b402be09
305,joshelser,"(uhh, either I didn't click the button or GH freaked out, sorry if this goes twice..)",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/305#pullrequestreview-68664798,2017-10-11T16:15:37Z,18edf1abc8dd1bdc06486bda6ac9abe1b402be09
326,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/326#pullrequestreview-79299436,2017-11-27T20:23:02Z,fa3e0bfa6c35164d46b45dae0b6d049f6ed5f8e1
331,ctubbsii,"The Jenkins build failed in ShellServerIT. I haven't investigated, but changing this regex might affect some other code.

https://builds.apache.org/job/Accumulo-Pull-Requests/org.apache.accumulo$accumulo-test/879/testReport/junit/org.apache.accumulo.test/ShellServerIT/testSummarySelection/",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/331#pullrequestreview-81629493,2017-12-06T18:57:19Z,5bf4e55748bf390ac06852f5b5c2de23dbbb7a4f
336,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/336#pullrequestreview-82948653,2017-12-12T19:20:33Z,3f2439f6f7084ae5254b8d5b16207f944968786c
337,ctubbsii,"Checkstyle is failing due to unused imports. Please remove unused imports, so Travis build can report on test results. Thanks :)

Also, strongly recommend shorter first line of commit messages. The body of the commit log can be bigger, but the first line should be brief. See https://chris.beams.io/posts/git-commit/ for a good coverage of the topic. :smile:",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/337#pullrequestreview-83389217,2017-12-14T03:28:20Z,c59b80281e1565f80bfe07ef80daa2cb76a74271
339,joshelser,"Looks good enough to me; just a couple of minor change requests. Nice little test.

Have you run this through the replication-related ITs?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/339#pullrequestreview-85350439,2017-12-22T16:36:00Z,6a7e152f2ae22e4045af0cc8ec61d865fbeeb3af
351,ctubbsii,"The one in Property.java is actually the good one. A lot changed in this code since the original JIRA issue was created. Specifically, the ConfigurationTypeHelper class was created to assist converting String configuration values to specific types, and it was designed to properly fail if it a user-specified value was not able to be parsed. The one in AccumuloConfiguration.java suppresses exceptions silently, and could cause problems.

Instead of changing the existing code which calls Property.createInstanceFromPropertyName, the code which calls AccumuloConfiguration.instantiateClassProperty should be reviewed and modified to call the Property.createInstanceFromPropertyName, Property.createTableInstanceFromPropertyName, or another customized call to ConfigurationTypeHelper directly.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/351#pullrequestreview-85866800,2017-12-28T18:51:15Z,f859f018d4b79892e42e48d5e428645825bc2e20
373,ctubbsii,"Please remove the changes to the generated code from this pull request, so it can be reviewed without evaluating generated code changes.

Changes to thrift classes can be made in the corresponding `*.thrift` file, and we can regenerate the generated thrift files from that by building with the `-Pthrift` flag. Don't worry that this may cause Travis to fail to build. We can always check that manually.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/373#pullrequestreview-93608092,2018-02-02T12:54:24Z,a7775a8106cab3ded47b0e3b8a03ec37f7e25c41
403,ctubbsii,"+1 for the additional metrics, but would prefer grafana dashboard configuration not be included, since we don't need to ship configuration for external components outside the scope of Accumulo.

Based on the conversation in apache/accumulo-website#62, I think it would be best to link to Uno's grafana configuration in a dashboard, as an example of how to present Accumulo's metrics.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/403#pullrequestreview-104730111,2018-03-16T22:02:26Z,3fb6ab3e7252d64e66abe9872a02e00a439d1dcf
410,ctubbsii,"Except for isEmpty() use, looks good to me.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/410#pullrequestreview-107857385,2018-03-28T21:28:12Z,87ecd53b0ce675470a24bc694f60f8247307ed83
424,milleruntime,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/424#pullrequestreview-111733487,2018-04-12T18:08:05Z,989b448f145152d16476f5a7349077fc18d41b09
444,ctubbsii,GarbageCollectWriteAheadLogsTest is failing,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/444#pullrequestreview-115724896,2018-04-26T19:53:58Z,a8dcb20a575c76336663ae46a0e60bebed4b4e16
446,ctubbsii,"Implementation looks good, but I would suggest a different letter (or no short opt at all) for the negate option, because `-v` typically means ""verbose"".",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/446#pullrequestreview-115726499,2018-04-26T19:59:43Z,3ea656efd8b81f61bade02eb1e7a1646c7cc1a6b
505,ctubbsii,"Oops. MonitorUtilTest should not be in `src/main/java`, but rather in `src/test/java`.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/505#pullrequestreview-124658263,2018-05-31T03:04:10Z,e4f9961e15d92a23280930f86db9c3aa22ad61db
528,ctubbsii,"This PR is hard to review, given the conflicts with the master branch. Can you rebase it?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/528#pullrequestreview-128174317,2018-06-12T23:05:30Z,b5023c32c2c3d29d7cda3dbacce7bd62be1f788d
546,ctubbsii,Reminder: the deprecated configuration property description should reflect which version it was deprecated since.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/546#pullrequestreview-134005465,2018-07-03T13:49:34Z,8e29faad67459925ae873b7133134e3e69e12a18
615,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/615#pullrequestreview-149821446,2018-08-27T18:25:20Z,ed021997c8b1226c048c6cdfad7be6a5b135d2c7
615,ctubbsii,"Might want to do another pass to see if there's any other occurrences of ""findbugs"" which should be converted to ""spotbugs"". I know ""findbugs.skip"" for example has been changed to ""spotbugs.skip"". Could also rename the exclude filter files, and corresponding profile stuff in the POM, for consistency, although the file and profile names don't actually matter.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/615#pullrequestreview-149893680,2018-08-27T21:33:45Z,3151de8d3e75cd9929fe10d424d2bc3d56c7aff6
620,milleruntime,Thanks for the contribution @cjmctague.  Here is some feedback for a few minor corrections to your changes.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/620#pullrequestreview-150272014,2018-08-28T19:18:25Z,192b873292f967fb532de4f9899364f1db6c18e7
623,ctubbsii,"Some tests are failing:

```
org.apache.accumulo.test.RewriteTabletDirectoriesIT.test
org.apache.accumulo.test.VolumeIT.testNonConfiguredVolumes
org.apache.accumulo.test.VolumeIT.testRemoveVolumes
org.apache.accumulo.test.VolumeIT.testCleanReplaceVolumes
org.apache.accumulo.test.VolumeIT.testDirtyReplaceVolumes
org.apache.accumulo.test.VolumeIT.testAddVolumes
org.apache.accumulo.test.start.KeywordStartIT.testExpectedClasses
```",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/623#pullrequestreview-151076137,2018-08-30T16:21:48Z,bbbc28749d36f7f55a2321100097a559ebb8d345
641,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/641#pullrequestreview-154004738,2018-09-10T23:39:18Z,fda15b322860063c01bd75f88e71051e44275832
653,ctubbsii,"I'm fine with moving away from DistributedCache, if there's no suitably maintained replacement API for the deprecated version, but serializing to the job configuration is not an acceptable replacement. This feature was initially provided as a way of avoiding serializing credentials into the highly visible and insecure job configuration, which is shared with all parts of the infrastructure.

Instead of serializing, this method should be changed, so that instead of using the distributed cache, we just serialize the path of the properties file into the job configuration, and the mappers/reducers can read the file directly from HDFS, rather than from the distributed cache.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/653#pullrequestreview-157494447,2018-09-20T22:48:17Z,707ab197cb35e1c07e8a7d5f86804fbb41343e91
664,ctubbsii,"Mostly LGTM, but need to keep deprecated API.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/664#pullrequestreview-159201201,2018-09-26T21:13:39Z,426a225679815a658a1b89ac11b19f942f2f45e6
667,ctubbsii,"Everything looks good to me, with one suggestion: remove the `outputFileNameMapping` line entirely, since it is just expressing the default value now anyway.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/667#pullrequestreview-160870442,2018-10-02T18:50:07Z,7399d4ad25830c9c62e29c204d49bd53671f6510
685,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/685#pullrequestreview-163024802,2018-10-09T18:07:39Z,85e9fa497c8e6c5ed7676d113573ee06f5625cf7
728,ctubbsii,"If we're going to revert this, it's probably going to get inadvertently bumped again later, so it's best to include an xml comment above the version indicating why we're staying with the current version vs. bumping to 2.2",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/728#pullrequestreview-169017462,2018-10-26T22:16:35Z,faf5adbcc29adaa8a0c4d453b2a6ee652d6062d3
792,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/792#pullrequestreview-180478754,2018-11-30T23:09:35Z,bb7ff5e1c2e98d5632fe7b987342a031a3a63195
796,mikewalch,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/796#pullrequestreview-181497326,2018-12-04T21:58:43Z,c19b2e74cad9ab985f2d33f561c79a4b4a234ce7
862,ctubbsii,"This isn't the right fix for this. I'm okay with removing the use of the distributed cache, if we use serialize the location of the token file instead and use that to read the file directly in the job. However, we cannot simply read the file and store the credentials in the job configuration. That defeats the whole point of having the feature to use a token file. The token file was a feature added specifically to avoid having credentials exposed in the job tracker UI and other exposed surfaces where job configuration can be seen by unauthenticated users.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/862#pullrequestreview-188518132,2018-12-31T17:10:38Z,77134a8aec98fd26b56bb582f91d320d0152b421
868,joshelser,"A couple of minor requests for changes, but this looks really close, Mike. Thanks for the ping for another review.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/868#pullrequestreview-189469230,2019-01-04T18:13:16Z,01f89e275db6b4fdb13171c9012e5ec4e080ac68
906,milleruntime,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/906#pullrequestreview-193744637,2019-01-17T17:20:40Z,de77e660f18cc994fc3785b63334da8f1f2fee90
943,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/943#pullrequestreview-201390654,2019-02-08T00:39:17Z,70c96be35c573ea204e0018a90b8f83566d97bbc
1018,keith-turner,Was looking over this again before merging and changed my review.  I am uncertain about merging this now because of the comment I made about changing behavior of handling runtime exceptions.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1018#pullrequestreview-221890991,2019-04-02T20:41:14Z,dca887121efa883951e4a68ccdc1d514b32df932
1022,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1022#pullrequestreview-212530185,2019-03-09T00:14:20Z,d6eee93b2c5fb8a75d8bdf8c2dcb614f30947cd3
1040,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1040#pullrequestreview-215284914,2019-03-15T23:37:44Z,542cb20d362a0c9bfa7730417cfd21d8ac37757a
1042,ctubbsii,"Minor change requested. Otherwise, LGTM.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1042#pullrequestreview-215767577,2019-03-18T18:12:05Z,7e8f3ea4bba54323dda15e7553dbe8b6d01a83ac
1068,busbey,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1068#pullrequestreview-221661391,2019-04-02T13:36:52Z,f27e42307df69b3f3ad8e0c70f412555b3251714
1072,ctubbsii,9.4 is incompatible with Java 7. We can't upgrade to this. Is there an earlier version which address the bug?,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1072#pullrequestreview-221961724,2019-04-03T00:31:12Z,819d0c40e3b3adc7a813553db95d29aced1fd2ba
1075,ctubbsii,We should set the default server type in a single location.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1075#pullrequestreview-222354420,2019-04-03T17:42:38Z,08274b858e9e149756738b433ae6bdda0a29a37d
1082,ivakegg,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1082#pullrequestreview-224644341,2019-04-09T20:46:29Z,b94b08d2621d67bd495e194b95018010c91ffe73
1088,ctubbsii,"This Admin utility isn't really on any path where performance matters (it operates at human-interactive time scales), but the change is a slight improvement. I'm surprised these weren't already in try-with-resources blocks, though. With the use of the buffered writer, they should definitely be in a try-with-resources block to ensure the buffer is written to disk on error.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1088#pullrequestreview-226671429,2019-04-15T14:19:33Z,f8b8763626d854e94b9f20f3a5315cc5cd71ca65
1096,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1096#pullrequestreview-227423067,2019-04-16T20:20:36Z,aa2d33052886a956b0236b721d620e54ddec2fb2
1112,ctubbsii,"Much of my comments on the clientImpl ConfiguratorBase also apply to the hadoopImpl one as well.

Were you able to investigate the other uses of the distributed cache in these two files?

* `core/src/main/java/org/apache/accumulo/core/client/mapreduce/lib/partition/RangePartitioner.java`
* `hadoop-mapreduce/src/main/java/org/apache/accumulo/hadoop/mapreduce/partition/RangePartitioner.java`",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1112#pullrequestreview-241439002,2019-05-23T21:10:21Z,bde9654b64528a28c329f816ae53b0cac20e17c3
1135,ctubbsii,https://chris.beams.io/posts/git-commit/,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1135#pullrequestreview-231976959,2019-04-30T02:29:27Z,8565bcb7f50a5e4f50ccd41a9b12cd640924fc24
1144,ctubbsii,"This fixes what I was talking about in #1110 
However, for ease of updating later, please keep the list sorted.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1144#pullrequestreview-232449974,2019-04-30T23:18:26Z,6cdbf217e0658806b6a4786dcee4ddad15fcdf2d
1144,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1144#pullrequestreview-232450261,2019-04-30T23:19:53Z,6cdbf217e0658806b6a4786dcee4ddad15fcdf2d
1150,ivakegg,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1150#pullrequestreview-248193596,2019-06-11T14:10:54Z,2b7cf1cc32ecf9497b59c352e093a6e35838cf29
1165,keith-turner,Wasn't only the `testWriteSpeed()` method moved to accumulo-test?  So why remove all test?,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1165#pullrequestreview-240243475,2019-05-21T19:06:28Z,64e096db8865744698e03bca243075ba80d9a2cb
1173,ctubbsii,"Actually, on second pass, it looks like the xsd at https://maven.apache.org/maven-v4_0_0.xsd specifies: `targetNamespace=""http://maven.apache.org/POM/4.0.0""`, so we shouldn't change that either.

The only one that is safe to change is the schemaLocation URL to the xsd. The others are fixed, well-known names that shouldn't be changed.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1173#pullrequestreview-241817860,2019-05-24T15:48:57Z,2d2a25fa559dd2e15fceee96e14f93ab248e77bf
1178,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1178#pullrequestreview-245762119,2019-06-05T00:21:27Z,d1420bb6d748804ebfe14bc7cfda0f3a15977893
1261,ctubbsii,"This breaks some tests, but otherwise looks good. I just have the one comment about the wording of the exception message.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1261#pullrequestreview-260257719,2019-07-10T17:52:16Z,82300c59dc33956fcda84a6ad4b5bdf3e0a6de82
1302,ctubbsii,"Comments based on failed Travis build.

`TabletMetadataTest` is failing due to an attempt to parse an empty String as a number. Spotbugs is also failing.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1302#pullrequestreview-269302780,2019-07-31T21:58:40Z,b6f667c19583e2723022615d22f470a3a83ba244
1339,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1339#pullrequestreview-283889748,2019-09-04T21:17:24Z,fbc82c1f4b0d99aa3c226986ab691c0b209dc385
1381,ctubbsii,"Looks good. Only gave the test code a cursory look; I'm happy if it passes consistently. I made a few other suggestions for simple refactorings, mostly for consistency with the other metrics code, which I think are worth doing (since metrics are somewhat hard to grok, so having consistency with our various impls helps), but otherwise, I think this is fine.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1381#pullrequestreview-297152958,2019-10-03T23:56:50Z,a1850332924b7f57502ed398ed6833c2ef3b6b02
1409,ctubbsii,This looks like a good change. A few minor suggestions.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1409#pullrequestreview-311164093,2019-11-04T15:52:45Z,a881f3dc597fdde3c6378acfb82f4612cb2d9cba
1412,ctubbsii,"There is only one problem I found with this. Otherwise, it looks good and is a nice change.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1412#pullrequestreview-313704033,2019-11-07T23:28:22Z,d5cb219c1c02f9485f80733af559787264bf470e
1432,ctubbsii,"Thanks for this PR. Were you able to test this manually, @mandarinamdar ?

For the most part, this looks okay, but it needs an additional change to fix the build failure, and a few other changes to conform to our `pom.xml` conventions.

To fix the failure, you will likely need to add an entry to the `maven-dependency-plugin`'s configuration for `ignoredUnusedDeclaredDependencies` in the root pom, though fixing the scope on the dependency may fix the build on its own.

Once the build is fixed, I can manually test and merge this.

Some additional suggestions:

In future, please add a bit more detail than ""fixes issue #"" in the subject line of your log messages and pull request titles. It is not always convenient to go back and find the referenced issue, and it shouldn't be necessary in order to understand what the change is doing. The log message itself should contain that information.

A good log message pattern that I've found is something like:

```
Fix #XXXX make specific change

* More detail here
* Additional detail here
```

When merged via GitHub, GitHub will also inject the issue number for the pull request itself as a parenthetical suffix, so the subject line becomes `Fix #XXXX make specific change (#YYYY)`

In this case, one possible message (after merging) might look something like:

```
Fix #1429 add missing runtime monitor dependency (#1432)

* Add runtime dependency (jaxb-core) to monitor
* Update binary assembly to include the dependency
```

or, it you could put the reference to the issue in the body:

```
Add missing runtime monitor dependency (#1432)

* Add runtime dependency (jaxb-core) to monitor
* Update binary assembly to include the dependency

This fixes #1429 - a server-side error in the monitor that prevented the REST XML from working
```

One resource for writing good log messages can be found here: https://chris.beams.io/posts/git-commit/ ; one of his rules is to keep the subject line short. Using `Fix #xxxx` instead of `Fixes #xxxx` helps that by cutting 2 characters. He also explains what kind of grammar to us, as in the subject line should be the end of the sentence that begins, ""If applied, this commit will ...""",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1432#pullrequestreview-317422319,2019-11-15T06:11:08Z,c361ab8997cef67140586eeba9842a9e5e3cf684
1487,ivakegg,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1487#pullrequestreview-384978646,2020-03-31T18:14:10Z,789356daf406dff5b4d82284c1c0f47393fb8f8e
1487,ivakegg,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1487#pullrequestreview-386727380,2020-04-02T19:24:49Z,803a7d27cac2ed2a31d31c3dbe798e02e6e07c8e
1487,ivakegg,We need some more inline comments to describe what is going on here please.  Thanks.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1487#pullrequestreview-435794343,2020-06-23T13:42:02Z,3958e4f3d1722c5d6c88be1796f8dbd5fcda23e0
1489,ctubbsii,"This change is a good idea. However, the code should be changed so the conversion to millis only happens on the difference between the start and stop times, and not on the start/stop times themselves.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1489#pullrequestreview-350917738,2020-01-30T15:45:22Z,45584952e066da7f9bbd73c88c650474b2142392
1541,ctubbsii,Minor note.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1541#pullrequestreview-368813826,2020-03-04T14:20:58Z,6db154a88535ef0a75db052c9f218d1aa33202b5
1552,ctubbsii,"The restructuring definitely makes this easier to read, and I think the more strict limit to the single server helps strengthen the test.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1552#pullrequestreview-371373173,2020-03-09T17:15:20Z,188c60ee4cd0478992b39a7ccf4b15bd3152cf16
1556,ctubbsii,Looks okay. My comments pertain mostly to the log messages.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1556#pullrequestreview-372372293,2020-03-10T22:52:50Z,f21c9102bfb5ead79107e6505e0649fba204f7d3
1568,ctubbsii,"-1 as-is.

The purpose of the `bin/accumulo-service` script is to provide a mechanism to manage a single process, in order to provide a simple mechanism to build other tools around. It is *not* intended to manage multiple processes. If these kinds of features are baked in to this script, the script becomes harder to bake other tools around it, such as the `bin/accumulo-cluster` script which I think would be a more appropriate place for this kind of feature.

For this script, if multiple processes are desired, the script should be called multiple times, with the ACCUMULO_SERVICE_INSTANCE variable set to different values. For its output file names, it may be useful to to utilize the ACCUMULO_SERVICE_INSTANCE variable from the environment, but it should not be looping and setting this itself. Otherwise, you create a confusing circular dependency between `accumulo-env.sh` and this script.

Furthermore, this script isn't really intended to be used by anything other than the `accumulo-cluster` script. Most of its functionality is tightly coupled with the needs of that script. I think the looping to start multiple tservers might be a nice feature to add to `accumulo-cluster` instead of trying to add it to this script.

Also, please double check your commit messages. If I do `git log -n5 --oneline` on your pull request, your commit clearly stands out as abnormal. I recommend looking at https://chris.beams.io/posts/git-commit/ for tips on how to format a good git commit message with a brief subject line and a body, separated by a blank line.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1568#pullrequestreview-378892502,2020-03-21T04:55:27Z,dc35ce0c2e8d54747603af0e76b4fc831122eb10
1579,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1579#pullrequestreview-388739286,2020-04-07T02:12:39Z,87601f2f93dbd8d1fe510f5c5aa7528ea4e7e58d
1651,milleruntime,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1651#pullrequestreview-523757719,2020-11-04T22:08:31Z,01cd2b0e801bdca235b1b65377af977c1635d594
1653,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1653#pullrequestreview-488693789,2020-09-15T13:47:49Z,59d1155d151bc6c784e8b89ebad708a194a60f63
1667,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1667#pullrequestreview-459510888,2020-07-31T22:39:06Z,7de2d4b04bd4b81393a37979704799f5c62bf90b
1677,ctubbsii,"I think a well-named static factory method would be better than passing in the RetryFactory everywhere. With the RetryFactory parameter, it's very hard to trace through the code to figure out what was used. But, a well-named static method instead of calling a different constructor, can make it much more readable and easier to understand the intent.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1677#pullrequestreview-465334915,2020-08-11T18:55:47Z,8f93f0358da11d5d231adcc926e8c5d784d1e2fe
1701,ctubbsii,"Overall, this looks good to me. I made some suggestions for improvements, and I think this could use a unit test, but otherwise, looks okay.

Are you able to include a unit test for this?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1701#pullrequestreview-483176154,2020-09-06T22:15:22Z,f4e3c51efed22f9c17185bf023883ecb1962e6e9
1703,ctubbsii,"Looks great overall.

Please add `@SuppressWarnings(""removal"")` on the methods causing compiler warnings because of the use of the `MASTER` enum.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1703#pullrequestreview-486334378,2020-09-10T21:48:47Z,7076a59616af93f7aaa1afc08403bdcc6003c921
1715,ctubbsii,Thanks @dlmarion . I finally got a chance to look this over. Sorry it took so long to respond to the review request.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1715#pullrequestreview-523609961,2020-11-04T21:06:36Z,1088247aebd207abbe4fb8d92c6cf6a6430fe0b6
1716,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1716#pullrequestreview-497814337,2020-09-28T19:08:28Z,7b755611f3afc9b706dae3147af9c40b1b3dbad5
1721,ctubbsii,"@milleruntime These interfaces were added in ACCUMULO-259 (I still have the JIRA issue memorized, because it was quite an ordeal at the time) to be pluggable. It was not merely added to support Kerberos/SASL authentication as an alternative. Rather, it was intended to be completely pluggable... so you could swap in an LDAP implementation, for example.

I don't think these changes you've made in this PR are aligned with the original intention.

Rather, what I think we need is a complete overhaul of these interfaces, to bring them up to speed, so they are public API, still pluggable, and more convenient to swap in implementations.

Until that comprehensive work is done, I think these should remain non-public API, and left as an advanced / marginally supported feature through the ""internal"" APIs. If it's ""easy"" to make the existing interfaces themselves public API / SPI, without exposing additional internal types, I'd be okay with that change also.

But, I don't think it's adequate to simply limit things to the two available implementations, as users may have implemented their own in their internal forked versions of Accumulo.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1721#pullrequestreview-502393675,2020-10-05T20:24:52Z,1a170aa6e9b50df68fc2116031feb496fc1bc03e
1726,ctubbsii,"This looks okay, but I added my feedback for additional improvements in a PR against your branch at https://github.com/milleruntime/accumulo/pull/14",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1726#pullrequestreview-504300377,2020-10-07T22:04:57Z,1fce99cffa332a4dcf7b0d9eddd26fcdc0db8d04
1735,ctubbsii,Thanks @Manno15 ! I have only minor wording suggestions only.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1735#pullrequestreview-508619720,2020-10-14T18:35:51Z,7e46b5e0346e20785606eed93794d34b4ffc78b6
1752,ctubbsii,"It looks like the only action of this PR is to replace an enum type with a String type. I don't see the advantage of that. Concrete types gives us safety and prevent bugs. It is normal for us to have Thrift-type and a non-Thrift-type that we have to convert between, in order to avoid leaking Thrift types into our code. I'm not sure it's better to replace concrete types with String to avoid that redundancy.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1752#pullrequestreview-516029907,2020-10-23T21:57:17Z,14c215c91dd9a4fd879fef805a4d9431ca1c3bec
1759,ctubbsii,"This is good, but there's a similar issue in the ChooseDir undo method, where it doesn't first check that the `tableInfo.getInitialSplitSize() > 0`, which means it can get an NPE. It might be good to make that change as part of this PR also, if you're okay with that, @Manno15 .

There's also a similar issue in `FinishCreateTable.cleanupSplitFiles`, which can cause the table creation to fail, even if the table was, in fact, created. Perhaps it'd be better to just log that error, instead of failing and rolling back the entire table creation? I'm not sure. What do you think, @keith-turner ?
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1759#pullrequestreview-521085990,2020-10-30T23:35:13Z,1626844419488b47ae57623286bfee473b112a77
1759,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1759#pullrequestreview-522787792,2020-11-03T19:51:51Z,59da0bf7171e1c2210acf81da25b105547cf9d64
1765,ctubbsii,"I think this is good, but rather than a heavyweight test in ScannerIT that uses miniaccumulocluster, I think it would be better to have ScannerBaseTest unit test that mocks the call to `ScannerBase.iterator()` and verifies that this `forEach` method results in the same iteration. Such a test would take milliseconds to execute rather than (up to) 60 seconds, and would use far fewer resources. I don't think we need anything more than that for the test case for this.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1765#pullrequestreview-522129715,2020-11-03T00:43:56Z,5b60b8cb384c3cae7d3b5af9c5ecf9c1411d3225
1765,ctubbsii,"The code looks good to me, but the test case seems a bit verbose and overly complex. I made some suggestions for simplification. There may be more.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1765#pullrequestreview-527388679,2020-11-10T16:40:28Z,5f7d7007e483fe6ff528b55271fbdb566bca22c3
1765,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1765#pullrequestreview-527600864,2020-11-10T21:06:52Z,126c53fb1168faa72a1587bf2682663a3b10b12c
1765,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1765#pullrequestreview-532707895,2020-11-17T19:18:40Z,dc1755fdec7b0366f738f6b0e2db73f16b21d776
1771,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1771#pullrequestreview-525473685,2020-11-06T20:33:48Z,9eaf446003a743bc1ebf99b95025a25e219dcb0a
1771,ctubbsii,"Sorry, very minor grammatical nit, but otherwise looks good to me.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1771#pullrequestreview-527377318,2020-11-10T16:24:23Z,52d2254f0e0d181bb0fd7f1d2714718d793a83b9
1786,ctubbsii,Were you able to determine if we can roll back the changes from 1ed12fa585a37caf36cfd674bd7ad6903c1d4e79  without reintroducing the type conversion spam from commons-configuration2?,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1786#pullrequestreview-532548942,2020-11-17T16:32:24Z,098f8989078f5ab84ebc0b71f81fa1fc58a566b7
1786,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1786#pullrequestreview-532813588,2020-11-17T21:52:05Z,bf6c1f0a5ec2a777fbff4abcb5cb06252b24afb2
1797,ctubbsii,"This PR adds the table option to the delete command. However, the changes in the test seem to be testing the table option with the insert command. I don't see a corresponding change to the test to test the delete command's ability to use a table option.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1797#pullrequestreview-535456747,2020-11-20T14:08:12Z,101871a62c4647e580fa4fd2bcbb193450335a96
1798,busbey,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1798#pullrequestreview-536463414,2020-11-23T13:39:57Z,4c8fedce90487c40ec4b740bc98dc181177cc71f
1803,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1803#pullrequestreview-537776969,2020-11-24T18:15:52Z,b2c263b90ebf1be63dd1186b883fe0cad26127c2
1803,ctubbsii,Looks good to me. I only have a minor wording suggestion for the log message.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1803#pullrequestreview-542253749,2020-12-01T20:06:33Z,9ff22ca7958f3b2a1c11b5591aac2c6e19ed05fc
1803,ctubbsii,"t seems there's a problem with recovery as a result of these changes. I didn't spend a lot of time trying to track it down, but was able to confirm that running `RestartIT` can reproduce the problem, and found the stack trace in the TServer log like:

```java
2020-12-03T00:40:54,842 [log.LogSorter] ERROR: Error during cleanup sort/copy 487f525e-2520-4706-9e15-8109f3d484af
java.io.IOException: Stream is closed!
  at org.apache.hadoop.fs.BufferedFSInputStream.getPos(BufferedFSInputStream.java:56) ~[hadoop-client-api-3.3.0.jar:?]
  at org.apache.hadoop.fs.FSDataInputStream.getPos(FSDataInputStream.java:77) ~[hadoop-client-api-3.3.0.jar:?]
  at org.apache.accumulo.tserver.log.LogSorter$LogProcessor.close(LogSorter.java:197) ~[accumulo-tserver-2.1.0-SNAPSHOT.jar:2.1.0-SNAPSHOT]
  at org.apache.accumulo.tserver.log.LogSorter$LogProcessor.sort(LogSorter.java:168) [accumulo-tserver-2.1.0-SNAPSHOT.jar:2.1.0-SNAPSHOT]
  at org.apache.accumulo.tserver.log.LogSorter$LogProcessor.process(LogSorter.java:93) [accumulo-tserver-2.1.0-SNAPSHOT.jar:2.1.0-SNAPSHOT]
  at org.apache.accumulo.server.zookeeper.DistributedWorkQueue$1.run(DistributedWorkQueue.java:113) [accumulo-server-base-2.1.0-SNAPSHOT.jar:2.1.0-SNAPSHOT]
  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
  at org.apache.accumulo.fate.util.LoggingRunnable.run(LoggingRunnable.java:37) [accumulo-core-2.1.0-SNAPSHOT.jar:2.1.0-SNAPSHOT]
  at java.lang.Thread.run(Thread.java:834) [?:?]
```

It's probably just something minor where another part of our code isn't reading the correct path, but it would need to be fixed in order to merged these changes.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1803#pullrequestreview-544018011,2020-12-03T14:38:11Z,37a9e3024cd0c9ab45b21dbd0d4ff6139e7c3b94
1816,ctubbsii,"Hi @DomGarguilo . Thanks for the PR! You have the correct strategy in place. However, the test case that you modified was probably the only test case for this class that isn't prone to the type of failure that was reported. It should pass every time. If you look at the other 3 tests, you can see that they all employ a ""sleep"" already, in order to try to catch the test in the correct state. However, since that's flaky (it may take slightly longer for the task to start), those other 3 tests are the ones that should employ the method you applied here (instead of this one).

EDIT: also, please make sure the changed files are formatted to our coding standards by running `mvn package -DskipTests` at the root of the project, and including any changes made by our formatting plugins to your commits / PR.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1816#pullrequestreview-541204296,2020-11-30T19:04:54Z,fd42721be45078e280da69275b8e6e391af0c301
1816,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1816#pullrequestreview-541313308,2020-11-30T21:35:56Z,3460b860c0917138733b58748efd783a05bb6f7b
1824,ctubbsii,"Most of this looks great. I am concerned about the getsplits behavior and corresponding tests, though.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1824#pullrequestreview-576754706,2021-01-26T21:24:49Z,61a1755547fc0f9fd6290eb4abe704b775657618
1832,ctubbsii,"This is a good start to check the flush command. However, checking the audit message doesn't guarantee the permission is denied (the auditing could be working, but we still allow the action). So, I think we will need checks to ensure the action is denied. The best place to do that is probably PermissionsIT. Can you make those changes in this PR, or would you prefer to open another PR for PermissionsIT?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1832#pullrequestreview-548434115,2020-12-09T17:41:54Z,f4f420656d130f72bd5a3791374b5031ada98537
1833,ctubbsii,"This is a good fix. I have only a minor suggestion for the wording. I mentioned the possibility of including a stack trace in the DEBUG log in the discussion on #1760. If that were to be included, I think it could be a simple `log.debug(""some message"", e)` above the line that does `compactions.add(tserver + "" ERROR "" + e.getMessage());` in `ActiveCompactionHelper.java`",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1833#pullrequestreview-548440725,2020-12-09T17:51:37Z,e8ae5e50646101624ddf31a0c550d6e296618541
1847,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1847#pullrequestreview-558175542,2020-12-23T18:56:01Z,7175f99fb4ba5097a29a025ede0d12201cf23a66
1851,ctubbsii,Build checks fail due to undeclared maven dependency. I recommend using Guava's SHA512 hashing instead of commons-codec's SHA1 anyway.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1851#pullrequestreview-561620056,2021-01-05T09:17:43Z,a4736fb0f06cee39e00b041de2100f1267182f85
1851,ctubbsii,"I'm having a hard time following what the test is actually doing. Can you add more explanation inline about how it's supposed to work? It would help others if they need to edit it later, so they don't have to read the entire class to understand how it's supposed to work (particularly important if it's not actually working as intended and needs to be fixed).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1851#pullrequestreview-562119481,2021-01-05T20:52:32Z,74c1ccf75dd3c01a015e3631396942096142f8e8
1862,ctubbsii,"All files added to `monitor/resources/external/` should be added without modification. From where were these obtained? And were they added without modification?

The following LICENSE files have been modified to reflect our redistribution of flot code. They must be updated to properly reflect the updated version of flot.

* assemble/src/main/resources/LICENSE
* LICENSE
* server/monitor/src/main/appended-resources/META-INF/LICENSE

Aside from the license issues, these changes look fine to me.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1862#pullrequestreview-564628860,2021-01-08T22:36:11Z,2fc425c6d706168a76e45bd657b75ba873b0587a
1871,ctubbsii,Just a few suggestions. Looks great overall!,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1871#pullrequestreview-572290217,2021-01-20T14:55:14Z,b32152d8c387534084ffb5b1d060c1ddefda8a0f
1873,ctubbsii,"I have some suggested changes incoming, but I will submit my suggestions as a PR against your branch, because I think it will be easier.

EDIT: my first pass code review suggestions are at brianloss/accumulo#1 ; I might have other suggestions afterwards, but it's getting late today, so I will take another look tomorrow.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1873#pullrequestreview-572669110,2021-01-20T21:34:45Z,3f2f05db195a5d3a1126d9957114b460ed4571f3
1873,ctubbsii,@brianloss I made a second pass at a code review and provided my suggestions as another PR to your branch at https://github.com/brianloss/accumulo/pull/2,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1873#pullrequestreview-573990986,2021-01-22T06:52:57Z,7e2cf88cf030d187bfec7a4878e6d18682a69bf9
1891,ctubbsii,"My only request for a change in this PR before it is merged is to rename the newly introduced SPI ""DefaultLoadBalancer"" to something like ""BasicLoadBalancer"" or ""SimpleLoadBalancer"" (unless there's a better, more descriptive name based on how it actually works), and with a brief class-level javadoc to describe the basic strategy.

While the rename and addition of a javadoc could occur in a subsequent task, I think it makes more sense to have the better name (and basic description) in its initial introduction, since it is a wholly new class.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1891#pullrequestreview-582821680,2021-02-03T21:32:07Z,7599c5846607e9fdcdce47769651f6d54a86c92a
1899,ctubbsii,"Looks okay to me, after the enum comparisons are fixed. However, there appears to be a broken test:

```java
[ERROR] Tests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 1.59 s <<< FAILURE! - in org.apache.accumulo.tserver.memory.LargestFirstMemoryManagerTest
[ERROR] test(org.apache.accumulo.tserver.memory.LargestFirstMemoryManagerTest)  Time elapsed: 1.491 s  <<< FAILURE!
java.lang.AssertionError: 

  Unexpected method call ServerContext.getTableManager():
	at org.apache.accumulo.tserver.memory.LargestFirstMemoryManagerTest.test(LargestFirstMemoryManagerTest.java:67)

[ERROR] testDeletedTable(org.apache.accumulo.tserver.memory.LargestFirstMemoryManagerTest)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: 

  Unexpected method call ServerContext.getTableManager():
	at org.apache.accumulo.tserver.memory.LargestFirstMemoryManagerTest.testDeletedTable(LargestFirstMemoryManagerTest.java:184)
```",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1899#pullrequestreview-588849884,2021-02-11T18:24:14Z,497cb10ae1ed5064d63804632c189b927b1eda34
1905,ctubbsii,"Build is failing due to missing license headers in the new classes. These should be automatically added if you build locally and commit before pushing.

PR mostly looks fine to me. I had a few questions that might turn into possible suggestions.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1905#pullrequestreview-583479059,2021-02-04T15:01:23Z,838f9a759874fc2c580a384ecdf00aa2eb8c2362
1910,ctubbsii,Nice work. See my suggestions below.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1910#pullrequestreview-598680885,2021-02-25T15:45:39Z,6a534b29950b6175ad35f573d9585dad82db3919
1910,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1910#pullrequestreview-599632163,2021-02-26T15:25:53Z,8dbce091f469438dafb2e45043fcd1337bb8fae4
1910,ctubbsii,"@slackwinner I tested this end-to-end, and everything works great, functionally speaking. I did have lots of minor suggestions for polish/improving the scripts.

The one other thing that I didn't mention elsewhere is that it might be useful to have a `System.out.println(""Preparing JShell for Apache Accumulo"")` or similar in the startup file also. That way, people know that it was started with the custom startup script.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1910#pullrequestreview-599872498,2021-02-26T20:06:28Z,ee0a914e8710eb5b79f93de01c15bcd2fb067264
1943,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1943#pullrequestreview-595472122,2021-02-22T15:30:30Z,e0613c664a390e5c130557170c90c2124dfa567d
1944,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1944#pullrequestreview-597643139,2021-02-24T16:01:26Z,bf885fbf539ca9c8c122810f285ac008bd8fd038
1944,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1944#pullrequestreview-598739883,2021-02-25T16:19:10Z,89c820a3bf75ef735c244d64e0e04c57f6c2ef50
1950,keith-turner,"> What's a compaction directive, vs. a compaction service, vs. a compaction dispatcher? (these appear to be the different categories of things touched by this change)

A compaction dispatcher dispatches compactions per table to compaction services.  A compactions service runs compactions and there are one or more in a tablet servers.  Compaction directive exists as a return type for [CompactionDispatcher.dispatch()](https://github.com/apache/accumulo/blob/7e3c67d0c0b831d7d29c69e24d07dd700f24c5e0/core/src/main/java/org/apache/accumulo/core/spi/compaction/CompactionDispatcher.java#L90).  The reason CompactionDirective exist is to make CompactionDispatcher easier to evolve.

> Why was CompactionDirectiveImpl a package-private class stored in the SPI package instead of a separate implementation package?

It could have been placed in another package outside of the SPI packages instead of being made package private.  One slight advantage of package private is that it can not be accessed from any other package.   It existed solely to implement the builder.  One disadvantage of making it package private is that someone may inadvertently make it public.

> Does the retention of CompactionDirectiveImpl.setService in your PR imply that CompactionsDirectiveImpl is mutable? Should it be mutable? Is it okay to be mutable?

I think its much cleaner to make it immutable, as that makes code easier to reason about.  The builder that was removed would build an immutable object.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1950#pullrequestreview-599683048,2021-02-26T15:43:22Z,0f33deac05d4bc0917e849e0914cec8a94ac98a7
1952,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1952#pullrequestreview-602297318,2021-03-02T21:46:25Z,b1ad3b7a3222337d71f059c4fad51867846ea0c4
1952,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1952#pullrequestreview-604479796,2021-03-04T19:45:47Z,c8d97a8be282cdf74732939afaeb33acd3c0003c
1958,EdColeman,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1958#pullrequestreview-605397423,2021-03-05T17:05:14Z,7de1bf42658afdfef4d9f0ec313646cc094457dc
1959,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1959#pullrequestreview-606552973,2021-03-08T17:51:54Z,c5386932a00949db6314519fa0bb26237af16391
1965,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1965#pullrequestreview-611609128,2021-03-13T16:38:46Z,d84be6ace0a52bc2c4542cf860e0209fbb21a44c
1965,ctubbsii,"I provided my code review in a PR against your PR in DomGarguilo/accumulo#1

I also had the question below about the extra synchronized keyword.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/1965#pullrequestreview-612610275,2021-03-16T03:13:50Z,5c274bf69c2952e5c0234b61ac54087ae5cfd562
2005,ctubbsii,"This doesn't achieve what you are probably expecting it to achieve. The last location field is *not* the ""last assigned"" location. It is the ""last location data was written locally"" location. It should *not* be updated on assignment, but when files are written. The ""location"" field is already updated to reflect the last location assigned. If you need assignments based on last location assigned, I suggest using the normal ""location"" field in a custom balancer, rather than the ""last location"" field.

This misunderstanding actually resulted in ultimately reverting the issues you are referencing. It should not be backported, since it is not the correct fix.

Also, since most people do not have ticket numbers memorized, please ensure the subject line of your git commit messages and subject line of the pull request or issue has a brief description of the issue, rather than merely references to ticket numbers. I will update the github PR description for this, but ultimately, I think this issue should be closed, since it doesn't achieve what it appears to, and the issue it is based on was actually reverted.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2005#pullrequestreview-630184942,2021-04-07T15:56:09Z,7774e6a0b06a6b6d7723c5b4a2112e13af259496
2020,ctubbsii,"The removal of the `refreshZKTable` function from `overview.js` and the place where that function is called can also be included in this PR, and any other related javascript code that kept this table up-to-date can also be removed (if any), as well as any related CSS stylesheet information that was specific to this table.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2020#pullrequestreview-635867877,2021-04-14T17:18:15Z,e9983128fba2c4cd4d024138460cc44aa4186236
2037,EdColeman,"You need to also change the places in the code that had ""constrains"" to the correct ""constraints"" - it occurs 3 places in the file.

You can run the following maven command to perform the same QA checks performed on submission:
`mvn verify javadoc:jar -Psec-bugs -DskipTests`

if you can get that to pass the QA checks will likely succeed.  
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2037#pullrequestreview-645997762,2021-04-27T15:19:07Z,00d546ac1934222e75243d1c246f59e4d39c9564
2043,EdColeman,"You need to include the import - `import static org.junit.Assert.assertArrayEquals;`

imports should be in sorted order and avoid using wild cards (*).

You can use the following command to run the full set of QA checks:
`mvn clean verify javadoc:jar -Psec-bugs -DskipITs=true -DskipTests=true`

When that compiles cleanly you should consider running at least the tests (IT tests can take some time)
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2043#pullrequestreview-647351033,2021-04-28T17:43:04Z,fce5bb3dc5702e11119308b5983e578cb159d484
2043,EdColeman,"You cannot use wildcards  `import static org.junit.Assert.*;.`  This would fail the QA build. 

Please expand to use individual imports.  

Please try to get a clean run using `mvn clean verify -DskipITs` or some variation that will run the QA tests locally before submitting an update.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2043#pullrequestreview-647412334,2021-04-28T18:54:11Z,50dc0e1ad9f7e33b981d56f7183835d6720c6c85
2050,EdColeman,"You will also need to change the places where that method is called - (line 547: CompactableImpl.java). You can run 
`mvn clean verify -DskipITs` 
to verify that your changes are correct locally before updating the pull request.  (see: https://accumulo.apache.org/how-to-contribute/)",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2050#pullrequestreview-648453161,2021-04-29T17:07:16Z,a307fc28428b2e000febd98e4db678107d766f81
2051,EdColeman,"You need to also change the place where that method was called.  Run
`mvn clean verify -DskipITs`
to verify your changes before updating your pull request.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2051#pullrequestreview-648468110,2021-04-29T17:24:13Z,099f395b468829bc99483d43f3b3c2afd32814fc
2055,EdColeman,QA test failed - additional references need to be updated.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2055#pullrequestreview-648554647,2021-04-29T19:05:03Z,3999666a3c2cec8426510804d7b18cdcc8fdcb78
2055,EdColeman,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2055#pullrequestreview-649933051,2021-05-02T16:38:09Z,ec00d4f9e8151962da7eaa31a2986395855438d6
2065,EdColeman,@hguercan is going to see if there are other candidates for replacement.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2065#pullrequestreview-649708147,2021-05-01T02:27:49Z,00159fd079be40deeefa614c48bc3f774d26ff49
2067,EdColeman,"The PR should not contain the .class files - if you build with maven, those files would go to ./target directory, which is excluded.  Please delete those two .class files from the PR.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2067#pullrequestreview-649803211,2021-05-01T17:13:43Z,9d74fccd1a74f4d13bb3aa1527b08e3a53ac75a1
2068,ctubbsii,"I think adding the CODE_OF_CONDUCT file so it shows up in GitHub's UI for developers contributing to the project there is a good thing. However, rather than every community creating their own file, it would be better to work with ASF INFRA to create a repository at https://github.com/apache/.github to host default versions of these files that projects can override. See https://github.blog/changelog/2019-02-21-organization-wide-community-health-files/ for more information on that.

While I think there are some improvements that could be made to the README, I'm opposed to the changes here, especially the dramatic expansion of the README to redundantly show information already on the website. I think the README should stay minimal, so we can more easily maintain the canonical information on the website. The README should only contain the bare minimum to get user's who are reading the README file in the tarball or on the GitHub repository page started, and direct them to the website for further information. We should not copy mailing list, social media links, and all our contributing information from the website to the README, as that makes it significantly harder to maintain in two places and harder for users to know where to go to get up-to-date information.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2068#pullrequestreview-649796282,2021-05-01T15:49:35Z,94ad79782922c82017e855fcda6784f87baf8e63
2073,milleruntime,It looks like a big chunk of these changes are just moving code around? Is it possible to put the chunks of code back (if nothing changed) to the spot they were so they don't show up as a difference. It is hard to tell what changed.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2073#pullrequestreview-651713335,2021-05-04T22:09:07Z,059c112578c692aef83a4e6ed28419bca9d5ee47
2075,ctubbsii,"Overall, this looks great to me, but it seems there's a spotbugs check that needs to be fixed first:

```
[ERROR] Medium: This web server request could be used by an attacker to expose internal services and filesystem.
  [org.apache.accumulo.core.clientImpl.ClientInfoImpl, org.apache.accumulo.core.clientImpl.ClientContext$ClientBuilderImpl, org.apache.accumulo.core.clientImpl.ClientInfo, org.apache.accumulo.core.clientImpl.ClientInfoImpl]
  At ClientInfoImpl.java:[line 127]
  At ClientContext.java:[line 803]
  At ClientInfo.java:[line 87]
  At ClientInfoImpl.java:[line 47] URLCONNECTION_SSRF_FD
```",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2075#pullrequestreview-652704721,2021-05-05T20:11:14Z,32b813fc320b4b16845f206722d63e9a89b8b180
2086,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2086#pullrequestreview-654741161,2021-05-07T18:21:07Z,51127ba915cb9d9f317d06b0dffef6e23f3d7e46
2098,ctubbsii,"Good test, but readability could be improved. I proposed some such improvements below.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2098#pullrequestreview-658170499,2021-05-12T17:53:53Z,75b6b1efc161dfc61af9077dcbe1b8bc7cc7a109
2122,milleruntime,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2122#pullrequestreview-671205999,2021-05-28T11:33:30Z,fb0462147b53ba84670b3ecec71db176c7c41865
2133,ctubbsii,"I like the direction this is headed, but there's a few fixes necessary and some optional. My comments below apply to several places, but I only made the comment once.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2133#pullrequestreview-675282535,2021-06-03T13:43:43Z,aa0fe5d34f6c47f1df2422ba6465b4e25a5e1438
2150,ctubbsii,"Looks good, but the TableOperationsHelperTest change isn't necessary, and it's best to avoid Guava when possible (fewer uses of Guava means fewer potential conflicts later).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2150#pullrequestreview-678689854,2021-06-08T15:42:34Z,7ae4ea60a7aa600077d1418feb84962b182877db
2160,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2160#pullrequestreview-682988752,2021-06-14T14:33:19Z,91c047fe9a90da3c829d100a95210f78a218202d
2171,ctubbsii,"Aside from the comments I've already made, these changes look good. I have not checked the code to see if any references to the old properties were missed.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2171#pullrequestreview-690074351,2021-06-22T23:50:31Z,1c6e72506e16d255f1ed8d26e57e5f593efa0670
2180,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2180#pullrequestreview-691997798,2021-06-24T16:51:14Z,6a397781e0883309f88e6706962a105ca3378bda
2181,milleruntime,The changes for RecoveryLogIterator look good to replace the RecoveryLogReader section but we still want the first part to read the regular WALs.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2181#pullrequestreview-700355659,2021-07-06T20:30:14Z,d2f7fd3b77c51710a8204e25a670ebbea15f82a0
2181,ctubbsii,"The code logic looks okay. I just have minor phrasing suggestions for the comments and error message.

I also have one suggestion to support reading a single sorted WAL file, but that can be done as a separate PR if you don't want to include it here.

My only other area of concern is that the RecoveryLogReader seemed to have a unit test, whereas RecoveryLogsIterator doesn't have any unit testing. Presumably, there is adequate testing of the code that uses RecoveryLogsIterator. Still, if it's worth a separate class to hold its logic, it's probably worth adding a unit test to test that logic independently of the calling recovery code. Since that's an existing deficiency in RecoveryLogsIterator, it could also be done in a separate PR if it's not included here.

If you decide not to include these proposed changes in this PR, please create follow on issues to track them. (specifically, for the unit testing of RecoveryLogsIterator, and for supporting reading a single sorted WAL file in the utility).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2181#pullrequestreview-701481225,2021-07-07T22:06:23Z,86e802db5ea1fa09bd9a209b3d3f18a435b44d1c
2215,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2215#pullrequestreview-720728729,2021-08-03T02:40:39Z,a2f0b59a3dafafd6bfe0bb8ab93033468fac9add
2215,milleruntime,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2215#pullrequestreview-900565672,2022-03-04T18:26:25Z,72731512988d2b2b212072dbe85f33e22a46e3f3
2215,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2215#pullrequestreview-979979866,2022-05-20T11:51:58Z,10de13e7386f8aeba70d596e8075a78ec34b32f7
2215,ctubbsii,"Consider using Set instead of List when the items are expected to be unique.

We need a way to get the list of transaction IDs to be able to use these methods in the API.

Avoid using ""print"" for the API/RPC operations. ""Printing"" is a feature of the shell/console, and is something that is done with the results retrieved from the API. ""listing"" or ""getting"" are more appropriate verbs for the API/RPC operations.

I believe FateAdmin currently allows offline manipulation of the fate transactions. If so, we need to be careful to preserve that behavior when we add this public API to do it via the shell. We need to not remove functionality that could help perform ""surgery"" on an offline system in a bad state.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2215#pullrequestreview-992539327,2022-06-01T19:09:40Z,b340dd11d2d7f5674e9a8998f7d719b1586fd3aa
2220,Manno15,`.DS_Store` binary file should be removed from this pull request before this can be approved. ,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2220#pullrequestreview-721619405,2021-08-03T20:32:36Z,840844030f4e0344d14ae41967e44eab3f2349c9
2221,ctubbsii,I like where this is headed overall. Hopefully these suggestions will help polish it off.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2221#pullrequestreview-722531033,2021-08-04T17:47:19Z,c7f14cfc02959ff4e972aaa0ba571a01d8d2667f
2228,Manno15,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2228#pullrequestreview-726739206,2021-08-10T18:58:45Z,b6e656d56242840b0445c3122b4ffe51db5b35c8
2228,Manno15,"These changes look good, just a few small things left. There are various IOExceptions that can be removed now.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2228#pullrequestreview-727604473,2021-08-11T15:12:02Z,abc3db4e5ebfdc55e0270aaf18e69c93c25c4baa
2235,milleruntime,@DomGarguilo it might make the test tricker but I think what @keith-turner suggested for the finishMarkingChop() method would be better.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2235#pullrequestreview-771590879,2021-10-05T15:15:01Z,d67be34c250104f6f9d22772cd63d5304404e237
2238,ctubbsii,"The biggest thing that should be done is using `.yaml` filename extension instead of `.yml`. Everything else is trivial. If the script is working, feel free to ignore the comments I made about bash and I can do a more comprehensive check myself with ShellCheck after this is merged.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2238#pullrequestreview-764939537,2021-09-28T04:10:08Z,8aa21ac5f9dd614b9da2214aaa4a6f53d650d838
2255,Manno15,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2255#pullrequestreview-749393378,2021-09-08T17:05:16Z,afff60690da01e74b42e2df1d7ef587c2b571c84
2279,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2279#pullrequestreview-759267672,2021-09-21T03:16:35Z,a4dfd25b33a00e81bd61c332a2442a7f7d7252c3
2293,ivakegg,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2293#pullrequestreview-784434307,2021-10-20T12:52:50Z,408ec7fc552ecdf961cc3cfca5ebd62ceaba17ed
2303,ctubbsii,"I don't think it's likely to matter, because multiple concurrent AccumuloClient objects aren't a recommended pattern in client code, but this change does make it so there's a pool per client, rather than a shared pool for all currently active clients. I'm okay with that. However, if the user does want to share resources across multiple clients in the future, this pool would be a great candidate to put in an opaque resource object that we allow to be constructed and passed directly into the AccumuloClient builder, so it can be shared across multiple clients. I don't think it's necessary to include that in this PR, though. It might not even be needed at all.

I marked this as ""Request changes"" to address synchronization with the lazy-loading pattern in ClientContext to instantiate the pool object.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2303#pullrequestreview-773487831,2021-10-07T06:37:17Z,e45201db2e0672e050771e9262a13c3e14cf4588
2321,ctubbsii,"I think this change can be simplified. All the files can be reverted except the `Manager.java`. In that file, the implementation of `isActiveService()` can be modified as I propose below. I don't think you should modify the HighlyAvailableService interface or the invocation handler. You can merely change the Manager's implementation.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2321#pullrequestreview-788640036,2021-10-25T21:43:45Z,ee2f4882a03b9b497a18d5a6e496a5edf50119d8
2325,ctubbsii,"Were we able to confirm that this actually breaks compatibility? I believe it only would affect things if the user actually assigned it to a variable of the type of the superclass. That'd be okay to break, since the superclass wasn't public API. I would like to see that tested and confirmed before we even consider any reverting.

Also, I don't know where the decision was made that binary incompatibility is unacceptable in a minor release. I see that on the website at https://accumulo.apache.org/api , but I don't recall a discussion to decide that. I think it'd be good to question whether we really want to offer this as a guarantee.

And finally, even if there is a binary breakage here, and we think it is a violation, it does not necessarily mean we have to rename the release to 3.0.0. We can still keep the 2.1 name. SemVer rules are guidelines only. There's no reason we can't document the occasional exception.

I think it is extremely important to stop exposing internal APIs in our public APIs. We've worked really hard to complete this transition. This would be a step backwards, and I do not want to see this reverted, to re-entangle an internal API with our public APIs. So, I'm *strongly* against this change. If we can confirm this is definitely breaking binary compatibility, I would prefer we 1) question whether we should even be guaranteeing that across minor versions in the first place, and 2) question whether that's more important than leaving it in the API later only to have more users affected later. If we have to leave a break and don't want to bump to the major version, I'd rather just document it thoroughly as a breakage that was necessary to accomplish the goal of keeping the internals unexposed in the public API.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2325#pullrequestreview-787141306,2021-10-22T18:09:59Z,e975f92139c547533458c826421efc623b8e7b41
2333,ctubbsii,"LGTM, but should use try-with-resources for clients instead of explicitly calling close.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2333#pullrequestreview-793174826,2021-10-29T15:29:18Z,0bb828cd89b5781a07341737050f42c74710dd3a
2340,ctubbsii,"When we were first creating AccumuloClient, I had the idea to create an opaque resources object that was AutoCloseable and could be provided to the client's builder. If one was not set, one would be created internally for the lifetime of that client. If one was set by the user, however, it would not be closed when the client is closed. That would allow a user to reuse resources across multiple clients. It seems you are implementing something like that idea, motivated by different reasons, and not at all opaque.

I think there's something to this concept, but I think the way it's implemented here is very granular. I don't think we need to have an API that has a configurable executor service for each individual public API operation that uses one, as that's a bit overkill.

I think we can start with a relatively opaque resources object that allows users to set an uncaught exception handler. That will satisfy the immediate issue that motivated this, and that will lay the groundwork for exposing additional API (perhaps an ExecutorService factory?) later, as it is needed.

Mainly, we need to be cautious about exposing too much stuff in the API too quickly, because everything we expose in the API, we're stuck with for awhile, even if we realize it could be done  better later. Currently, this exposes too much (ClientContext is an internal type only, for one). I think we need to put some more thought into how granular we want this resources object to be, and I think we need to consider its lifecycle as well, for use across client instances.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2340#pullrequestreview-795692330,2021-11-02T17:26:19Z,09627adca4850a7f9c89c801cc1924e64658765b
2354,ctubbsii,"This looks good to me, but there's a few other places in this class that does the same thing. Would you be willing to update the others as well?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2354#pullrequestreview-802786594,2021-11-10T15:48:50Z,9b122b6b41c258309eec8088a1502481e371baed
2374,ctubbsii,"I'm not opposed to initializing a credentials variable in ServerInfo, but I think it should be done at construction time with a `final` variable, rather than have a non-final variable lazily loaded. There's no advantage to lazy loading here, since we have all the information up front to create the credentials and are going to be using them right away every time.

However, I think it is unlikely that this would have had anything to do with ConcurrentDeleteTableIT runtimes. I've seen that test pass very quickly without this change, and think its heavily varied runtime is probably related to how tablets are assigned/balanced rather than the performance of this getCredentials method.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2374#pullrequestreview-821663259,2021-12-02T15:32:09Z,a036efa69bdc5e2a1ef309f8bc1d1619408d9ad1
2380,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2380#pullrequestreview-829338021,2021-12-10T21:27:48Z,c22b81cf5f68e307f297041d4301b45d53e60f0f
2384,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2384#pullrequestreview-832882219,2021-12-15T14:28:13Z,35b693d61e586d084d26f9c3d1f72a067ba0684d
2399,milleruntime,"Looks good except needs to be added to `KeywordStartIT`:
<pre>
[ERROR] Failures: 
[ERROR]   KeywordStartIT.testExpectedClasses:139 expected:<[tserver]> but was:<[split-large]>
</pre>",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2399#pullrequestreview-838435379,2021-12-22T13:04:30Z,b2ae3effa32ca2a51cd8d2bb0e296af94febc3ca
2400,DomGarguilo,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2400#pullrequestreview-840528962,2021-12-27T19:19:23Z,55e58c817f469677cabca0d0d2530ce45bab54b5
2414,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2414#pullrequestreview-857149004,2022-01-19T17:50:48Z,779a9f62e64042359968caf950ecb728b9a88f21
2414,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2414#pullrequestreview-858762046,2022-01-20T20:21:00Z,3f7968f219ae4d6d2f8625fcd54cd093d2932527
2417,ctubbsii,I think the logic can be further simplified,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2417#pullrequestreview-855707047,2022-01-18T17:16:32Z,0cfe4a5149e0756af93ad952fa84f9b48d7658bf
2426,ctubbsii,"The class level documentation for these upgraders are probably best written as a list of expected changes that the class performs as part of its upgrade tasks. The specific methods added or implementation details or pull request references that resulted in the current code aren't useful for helping the reader of this javadoc understand what they can expect this class to do to their cluster when it upgrades it, and can either be removed, or relocated to their specific implementation methods.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2426#pullrequestreview-860024820,2022-01-21T21:13:50Z,06e96cb18e5b05d245bb555b01cc471ea79e2a78
2427,ctubbsii,"Looks good overall. Just a few tweaks.

I saw that for the other modules, you changed them to use the vintage engine instead of the old JUnit4 dependency directly. That's fine if it works. I'm running the full ITs to see if all modules build. So far, it looks like it's working.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2427#pullrequestreview-887930517,2022-02-19T15:50:23Z,ac77f9e48998d1b06d8faa5042e9d0b6f3e894d8
2445,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2445#pullrequestreview-869293776,2022-02-01T15:26:38Z,8b96720a8ac0dad498567fb7a9b19c5d75f95ef4
2447,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2447#pullrequestreview-869608823,2022-02-01T18:18:39Z,cd1beb60c6642ce370b31f3b0f613838fbff6fab
2462,ctubbsii,I'm not really sure I understand the difference between the `NEW` state that already exists and your new `SUBMITTED` state.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2462#pullrequestreview-872307134,2022-02-03T19:37:44Z,7a55a705c922eb8da1adc1854327c5937f7c45ed
2467,ctubbsii,"The shell should endeavor to use the public API wherever possible. Thrift types shouldn't leak into the shell. The GitHub Actions build failed because of a new use of Thrift types in this change.

Also, this implementation does not appear to do anything on the server side in the Manager to authenticate the user before cancelling the operation.

Also, because this is probably riskier than canceling while it is offline, should there be some sort of ""are you sure?"" prompt?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2467#pullrequestreview-873654300,2022-02-04T22:48:06Z,bd32987e94706352c2b6c40d840fb34994416705
2476,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2476#pullrequestreview-878063019,2022-02-09T21:17:12Z,2f43d0704fd4b1498cbfddf5dc5719d53c90bde2
2486,ctubbsii,"I don't think this is the right solution. The difference between ZooReader and ZooReaderWriter is that one is available on the client, and the other is only available on the server-side, because it has the instance secret used to grant access to the restricted nodes in ZK.

As such, it does not make sense to put the ZooReaderWriter in the client context, any client context that is not a server should not have access to the credentials necessary to do any of the write operations.

I am not sure what is motivating this change, so it is difficult to provide a suggested alternative.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2486#pullrequestreview-879324309,2022-02-10T19:10:48Z,8004415b64fef61b561a9ec0b1a978c7b0f8fd98
2496,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2496#pullrequestreview-882318261,2022-02-14T23:54:48Z,7dac170e26c409f9da88853a275894761d341927
2512,ctubbsii,"Overall, looks good, but one file shouldn't be changed.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2512#pullrequestreview-888091250,2022-02-20T22:15:19Z,824f713fb76f5ffe30ef6ef6c06b0816c9b93e78
2513,ctubbsii,"Overall, this looks good. I saw you had a comment about adding a checkstyle rule not working on #2511 ;  I will reply there.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2513#pullrequestreview-888093474,2022-02-20T22:31:07Z,51440b8e9b96b788cbfa09af01b0a36a16abd2dd
2515,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2515#pullrequestreview-890414370,2022-02-22T22:12:53Z,60ab9592a7222d5af6bc6142759c1c06f96f4dd3
2515,ctubbsii,"There remain some missing import statements, preventing this from compiling. And, there are some divergences from our established formatting conventions as well.

Once the import statements are fixed, you might be able to run `mvn package -DskipTests -Dexec.skip` to get all the modules built and formatted.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2515#pullrequestreview-890600324,2022-02-23T04:07:18Z,434429c2d116c2f0ac30514f6cb37839d6045544
2518,ctubbsii,"I like the idea of making this pluggable, but I think this should be done in the SPI instead of in-place inside the bcfile package.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2518#pullrequestreview-891413287,2022-02-23T17:17:42Z,8af809ea4232a4d3202a9691ae17d931b6925575
2531,ctubbsii,"I'm still testing these changes, but the proposed change below will at least get rid of the unnecessary `orElse`.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2531#pullrequestreview-894422005,2022-02-26T16:36:41Z,84a12d07a4817ad1de295331c13db0a8c88d24ef
2532,EdColeman,This should not be changed at this time.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2532#pullrequestreview-895282685,2022-02-28T16:04:50Z,0eb5778f8f6326ba0960b2fd12792406f1ba6844
2532,ctubbsii,"I agree that this shouldn't be moved. The name ""fate"" in all the ZooKeeper-related package names is misleading. Some of the tests are FaTE-related, but not all of them. This is a ZooKeeper test utility, not exclusive to FaTE.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2532#pullrequestreview-895525651,2022-02-28T19:48:11Z,0eb5778f8f6326ba0960b2fd12792406f1ba6844
2535,ctubbsii,"Some inline comments would probably help explain the encoding scheme, but also see my other review comments. I'm especially confused by the expected ordering that this would produce, because it doesn't seem to be following any `greater-than` or `less-than` ordering that would be useful for users.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2535#pullrequestreview-895670234,2022-02-28T23:03:20Z,1493eb987937f7aa44899e07ffefea9b39a399a7
2545,ctubbsii,"Looks good overall. Please don't rebase / force-push this, because I don't want to re-review 274 files :smiley_cat:

I had a few suggestions below.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2545#pullrequestreview-909302134,2022-03-14T21:09:30Z,d1fa1f31dbbf5e8728ceaa9359f2e92b67cd4d75
2549,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2549#pullrequestreview-903088088,2022-03-08T14:36:49Z,b8f100765676e0a88b5cfed99ec080d290378370
2549,DomGarguilo,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2549#pullrequestreview-903080376,2022-03-08T14:38:25Z,b8f100765676e0a88b5cfed99ec080d290378370
2554,ctubbsii,"I like the approach overall, but I think some tweaks are need to ensure it only applies to that client only, and not all clients in the JVM. Also, I mention a few other possible tweaks below.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2554#pullrequestreview-903837021,2022-03-09T04:16:19Z,a79013998f81614f645bc1010056311bfd7f1882
2554,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2554#pullrequestreview-904983741,2022-03-09T21:07:42Z,ec0e7cf14fd5730e99c8fa0b73bd4f11dcaa401c
2557,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2557#pullrequestreview-904845096,2022-03-09T19:06:18Z,66390f0e49d33584955621bf8760e235c2c36481
2562,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2562#pullrequestreview-906162553,2022-03-10T17:12:38Z,74ebd6f1d5a23e076355ec959c5e417faf234320
2569,dlmarion,"That's it for now, for more in-depth I'm going to have to load it up into an IDE to trace through some code.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2569#pullrequestreview-912085584,2022-03-16T19:11:38Z,61459d1f4c0f71d7ca3a6871c65d14fd51488c24
2569,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2569#pullrequestreview-912220634,2022-03-16T20:51:22Z,64191f7b1d204a94cf7ec84b5c5f674041b519f9
2574,ctubbsii,"LGTM, except these lambdas.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2574#pullrequestreview-913726104,2022-03-17T21:33:51Z,c6534cd328230e0d2c8d2c6763b9c43e24d4497d
2580,ctubbsii,"Overall, looks fine to me. Just some minor tweaks.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2580#pullrequestreview-914879857,2022-03-18T21:37:35Z,4c77a0b1dba6679bf5d920cd1f7cd3eef6cd8424
2584,ctubbsii,I merged main onto this to update it. I'm going to follow up with some improvements that I think would make this better.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2584#pullrequestreview-940284422,2022-04-13T01:21:07Z,20e21ab37fa4e2a48bab5dcb66d92f3c45272118
2593,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2593#pullrequestreview-924935435,2022-03-29T16:48:18Z,5b5ba2db9ac4a75ee43cf4da0e8cb9535711dfe1
2603,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2603#pullrequestreview-928434470,2022-04-01T05:18:17Z,a9fa1cf5b6c3e4b0cc0753dc65ad07d8316c4973
2608,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2608#pullrequestreview-938559299,2022-04-11T20:35:19Z,20bc418fadb47c20375fa16c7085efad4fe8579a
2608,DomGarguilo,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2608#pullrequestreview-940104114,2022-04-12T20:24:28Z,67fd927ff13b62a78f220d1ac6e8306ac7a09c30
2612,dlmarion,"Looks great, just one comment about making the client RPC timeout configurable to close an old issue.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2612#pullrequestreview-934880499,2022-04-07T11:10:07Z,4d6802dc3e842fe15e77e838eae04d82c83567b6
2622,ctubbsii,"This is a strange patch. Why would we need to explicitly check the thread state if it has been interrupted? Wouldn't we see an InterruptedException get thrown if the thread had been interrupted? If we're swallowing that somewhere we shouldn't be, then it probably makes sense to re-throw it there, not to check the thread state in the loop.

Do you see any stack traces with an InterruptedException being logged and ignored somewhere?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2622#pullrequestreview-938498297,2022-04-11T19:36:16Z,fc6febf3edc89d5a67130cd502d5a16d3b14d02a
2622,milleruntime,"I think you should move the exception down into the try/catch. Otherwise, the `close` method won't be called.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2622#pullrequestreview-943356790,2022-04-15T11:32:37Z,fc6febf3edc89d5a67130cd502d5a16d3b14d02a
2622,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2622#pullrequestreview-943392536,2022-04-15T12:46:25Z,fc6febf3edc89d5a67130cd502d5a16d3b14d02a
2622,ctubbsii,"Marked this review as ""Request changes"" because of the wildcard import. The other changes are suggestions, but I'm not 100% sure that's the solution we want to go with. I'm not super confident with handling this situation. @dlmarion WDYT?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2622#pullrequestreview-952254484,2022-04-25T18:15:11Z,94e7d75f10becae322ad911849159cb3e6b6f535
2627,ctubbsii,"There's an errorprone error due to a missing `@Override` annotation somewhere in this PR.

#2626 is now fixed, so it is no longer necessary to make these changes to get it to pass, and this PR can be closed if you want to.

However, if you feel like there's still value in breaking these up, then I can review it further. I know one point of confusion for me is why the two new tests are extending the client auth one, and why that one isn't also broken up, because it has a nearly identical execution profile as SslIT.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2627#pullrequestreview-941718985,2022-04-14T02:10:59Z,63fc991cb6d2c1fec1741aeba141cf93c97c12c7
2646,ctubbsii,Looks good overall. I like how streams really simplify a lot of these things. I had a few minor suggestions.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2646#pullrequestreview-951356440,2022-04-25T05:31:48Z,77489294887d0376dcbd352214e4f3b9fcb74eaf
2647,ctubbsii,"Consolidation like this seems to be necessary, but not sufficient, to get us all the way towards abstracting the RPC layer entirely, from the rest of the code. However, rather than fully isolate the RPC stuff, there are bits in here that still leak things out... like not fully handling all the exception conversions internally... and may leak some new things out... like Thrift-specific types into the shell. I think we probably need to do things like this... but I'm not sure if these specific changes are ready. I'd like to take a closer look this week, to see if there are more improvements beyond what I've suggested so far.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2647#pullrequestreview-951332212,2022-04-25T05:13:13Z,1a1b359e6b8036151913b3bf2446535ab61fcbed
2647,ctubbsii,"This looks okay overall. I pushed a few commits that did some cleanup to large chunks of it.

I think some of the class names might be possible to be shortened.

The main concern as-is, is that it seems to be incomplete. The client objects are nice, but there's a lot of places where we're still accessing the generated client type directly. Those could be done in a future change.

However, the most significant piece of it being incomplete are the parts that are using the new client objects, but calling the methods that aren't implemented. I did make the base class abstract, so it should be very easy to see who is failing to implement those methods by marking those specific methods as abstract. These implementations will need to be fixed before this can be merged.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2647#pullrequestreview-971740779,2022-05-13T08:00:50Z,32e69d860db638f390cda006b0ea4e993bc41761
2648,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2648#pullrequestreview-951325885,2022-04-25T04:12:22Z,ec97f0c32f13d0e17892d0238c272e7dfa223d12
2651,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2651#pullrequestreview-953631384,2022-04-26T15:48:14Z,11833ed7ced69d617dda7432e0f6058e0cc8d003
2651,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2651#pullrequestreview-953825181,2022-04-26T18:22:47Z,94e1087631eb10a7c367db59e663cda440b801fc
2661,ctubbsii,"The spotbugs checks are failing, but once that is fixed, this is fine.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2661#pullrequestreview-956923056,2022-04-28T19:06:10Z,58b0e73a37937d74cd4c06c531be3a9e7813bef7
2662,ctubbsii,"So long as everything works right in the monitor, these changes seem fine to me. They are just copied directly, right? No changes?

Also, please include updates in the LICENSE file for this.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2662#pullrequestreview-956911404,2022-04-28T18:55:00Z,f5a542a4462e2c4d20ad83dcfb35ba295e6b5c93
2666,ctubbsii,"Thanks for the PR @tchaie . I made a few comments on the change.

I haven't run this, but it looks like it should work. I do wonder what the user experience is, though... what will the user see on the page? This PR looks like it will get rid of the stack trace/error, but it might be nice to make sure the page shows ""Replication is currently disabled"" or a similar message when the user does navigate to the page.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2666#pullrequestreview-958335843,2022-04-29T22:22:15Z,2cbd4235acf9e226d776ee36ab9d63d25bab6e1f
2672,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2672#pullrequestreview-961735879,2022-05-04T13:20:45Z,d798621575444ecd84daba617d0573f572c53653
2679,ctubbsii,Looks good so far. I think there's a few improvements that could be made. See my suggestions below.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2679#pullrequestreview-964919466,2022-05-06T16:59:52Z,2d377e726ccbf4d6bd2850826192cbaec69f39c4
2691,EdColeman,I'd like more time to look at the one test - if that is removed from this PR then I have no issues and merging it to improve the stability of the other tests if a good change.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2691#pullrequestreview-969533660,2022-05-11T14:57:37Z,e92539802bb963e3d200cd21ed5c4e546e41b000
2695,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2695#pullrequestreview-972196973,2022-05-13T13:10:20Z,aebe4c857e7c92b41c27cc79a23b89ccffb81331
2701,ctubbsii,"-1

I don't think this change should be made. It removes a guard against accidental renaming changes or incorrect naming, and effectively tests a tautology.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2701#pullrequestreview-972903380,2022-05-13T22:07:15Z,861fa17d6c0a4f6de2061eeee4aba9d1fcfc0c75
2707,ctubbsii,"If this is going to be done, I'd rather it be done without the redundant extra configuration (see my reasoning below).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2707#pullrequestreview-985631572,2022-05-26T01:33:07Z,7542dfe0e9553ee7db02c52a9466dc5375ee49a0
2709,ctubbsii,"I'm not opposed to using a better cache API, but I think there's a misunderstanding of what this is being used for.

It should not be an LRU cache. We are using this ""cache"" to track all the instances that have been created, so we can explicitly close them when the last legacy client has gone away. This is part of the ""SingletonManager"" code, and I anticipate removing ZooCacheFactory as soon as we can remove ZooKeeperInstance, hopefully in 3.0.

So, it might not be worth doing anything here other than removing the obsolete TODO. But, it definitely shouldn't be an LRU Cache... we need to track all created instances... not just the most recent ones.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2709#pullrequestreview-974598466,2022-05-16T21:40:30Z,ecdddb63239a935413d8ff26ed4060b0afe17490
2711,ctubbsii,Can this be configured to use 2 space indent? 4 spaces is just excessive.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2711#pullrequestreview-974572672,2022-05-16T21:11:57Z,d95b47f2e74c7ecf53be9b92f44091b731060179
2712,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2712#pullrequestreview-975367189,2022-05-17T12:21:51Z,f3a36850070b17f07d30be1342ba4bbd5058a4f8
2716,ctubbsii,"Overall, this looks good, but that helper method can be ""stream""-lined :smiley_cat: ",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2716#pullrequestreview-976236137,2022-05-18T00:49:38Z,2e852eeeeb21c11bbf3a530eb6eabdeac8428ca5
2724,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2724#pullrequestreview-982322531,2022-05-23T20:51:32Z,a8505ddfe9eb927470b1d9bd01f199e7dcb040c0
2724,DomGarguilo,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2724#pullrequestreview-983272564,2022-05-24T13:57:47Z,1708f26c0ac78810549f156456983671917a4942
2751,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2751#pullrequestreview-992725405,2022-06-01T22:12:35Z,930b653d10dec5404499b06db1ba387620b9828f
2767,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2767#pullrequestreview-1017354573,2022-06-23T16:57:15Z,243b8651fb21c04478310752ab02ef490764c3e4
2769,ctubbsii,"I like the approach for keeping ServerConfigurationFactory up-to-date after tables/namespaces are deleted, but I'm not sure about moving the snapshot refresh stuff into it, or the other changes. Can we just handle the table/namespace deletions and update ServerConfigurationFactory first, and then evaluate the other changes in a subsequent PR?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2769#pullrequestreview-1003427229,2022-06-11T06:05:00Z,bb3fc2c99548a15dad303dcf8cefcb6f0cfbfaaa
2790,ivakegg,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2790#pullrequestreview-1025321547,2022-06-30T18:35:11Z,db1d9cd6fc392f81b8e7c93b1c12d453a1e00f7c
2798,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2798#pullrequestreview-1028491379,2022-07-05T11:41:14Z,12242708e7ed3897a80169ce46a9d988573199bb
2801,dlmarion,"LGTM, one minor comment. Would you be able to include some output with content from your test in a comment on the PR so that we can see what it looks like?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2801#pullrequestreview-1031786419,2022-07-07T15:39:34Z,b0b5816f006f3bb4483598ae2933bbdb5f2073c5
2801,milleruntime,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2801#pullrequestreview-1043290666,2022-07-19T12:15:08Z,36bfe1cd9c66d9f00d68881491f833a502218fd9
2811,milleruntime,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2811#pullrequestreview-1060834722,2022-08-03T18:40:03Z,5047867a217e16b9756dedaf3f8edac97628c414
2817,milleruntime,Looks good so far but I think the command could be improved a little bit. The default behavior (if the user doesn't provide a parameter) should just be to list the locks. And the command `tServerLocks` is a bit awkward to type. It could be shortened to something like `locks`.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2817#pullrequestreview-1048306209,2022-07-22T19:24:51Z,df081dc361a4a9f632a3913e7771ed0280c8d55c
2817,milleruntime,I made a PR to your branch with some ideas. I still couldn't get the usage to print though so we might just want to drop that method as well.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2817#pullrequestreview-1066802778,2022-08-09T14:12:51Z,138aad0c36dcf31f3326f02f73e9bda14303ef7e
2824,milleruntime,I think you can just make `lastMemoryCheckTime` a private member of the class.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2824#pullrequestreview-1049505458,2022-07-25T13:51:18Z,62d660ddc5f3a4cff2770f447bafdfec9588e8c0
2831,milleruntime,I think the methods for `StoredStabletFile` should have separate implementations. See my comment https://github.com/apache/accumulo/issues/2830#issuecomment-1198057276,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2831#pullrequestreview-1054175964,2022-07-28T14:16:36Z,9b428dc4585caebcab80f68bd8d80950b90b93a9
2847,DomGarguilo,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2847#pullrequestreview-1087489888,2022-08-26T20:30:50Z,2ce1953f470169cad5023376359c3556bff5d5b4
2858,dlmarion,I think you may have misunderstood the task here. It was to remove the `throws Exception` from the method declaration and replace it with the actual exceptions being thrown in the method body. ,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2858#pullrequestreview-1065455409,2022-08-08T16:21:14Z,eaa30460cbadc72f1e4da7f9fa27e4a3a948fc68
2870,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2870#pullrequestreview-1069578267,2022-08-11T11:43:05Z,06a42b9d44ce821aa50de182f2b2a5ce698dc187
2880,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2880#pullrequestreview-1081969836,2022-08-23T11:29:45Z,3bf0b901c631915128e5a26e6e8a165a552316d3
2881,DomGarguilo,I think you may need to revise `KeywordStartIT.checkHasMain`. I ran it on this branch and it fails since some of the main methods were removed and that test expects them to be there. ,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2881#pullrequestreview-1072724460,2022-08-15T13:58:58Z,0b2a06daad9af0ba92b359b07762bf8f33cab0e2
2882,ctubbsii,"I cannot find any documentation that says that setting this flag automatically enables some diagnostic options. Everything I can find seems to suggest that you need to set this flag in order to *manipulate* these diagnostic options (to diverge from their default, which may already be on). So, unless we are using a diagnostic option by default (if we are, which one?), there's no point in us setting this by default on its own, because a user can always do that when they want to use one. The same goes for experimental flags.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2882#pullrequestreview-1095044958,2022-09-02T15:29:09Z,9a2509277bfb6471ea39e3e086ef3e80dc7a2a16
2895,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2895#pullrequestreview-1085965388,2022-08-25T19:05:25Z,d3bf1aa0b37e063e6a7534563cac5080fd9e0c75
2900,milleruntime,I like the new `getDiskUsageFromMetadata()` API method but I don't think we need a separate shell command.  You should just use the `DuCommand` but have a `-meta` option that will call the new API method instead of the legacy one. This will allow you to reuse some code in the Shell.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2900#pullrequestreview-1088713104,2022-08-29T13:36:59Z,e807c98771b87c5fc3942694c37cbd2f5e1f767a
2900,ctubbsii,"I do not think we need a separate command to get the size information from the metadata instead of HDFS. I also don't think we need a separate flag to determine where to get the size information (unless we are willing to tolerate ""exact"" vs. ""approximate"").

The existing DU command works by computing the storage used exclusively by each table provided, as well as computing the storage used by any combination of tables.

For example, in the following output, it shows:

```
root@uno> du -p t1
                     620 [t1]
root@uno> du -p t.*
                     207 [t1]
                     207 [t1, t2, t4]
                     206 [t1, t4]
                     244 [t3]
```

Table t1 uses 620 bytes for all of its files. 207 of those bytes are used exclusively by itself only. An additional 207 bytes are used by t1 but shared with t2 and t4. An additional 206 bytes are used by only t1 and t4.

This behavior is important because `du(table A) + du(table B) != du(table A, table B)`, and this tool helps show that difference. This is very different from what we can get from HDFS, which is `sizeof(directory)` or `sizeof(file1, file2, ...)`.

Where it gets the size information for each individual file, though... that could certainly be changed to use the metadata table instead of going to HDFS. However, the sizes in the metadata table may be approximate or absent. The logic could determine if the size is exact, approximate, or missing, and then get the size from HDFS to fill in any gaps.

I would be in favor of making a change to get the information from the metadata table instead of HDFS, if 1) we can be sure the information is there, and 2) it actually is more performant. But, I would not be in favor of adding new commands or flags to decide where to get the size information... the sizes of the files have only one correct value, regardless of where we got the information... it'd be confusing to have two options.
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2900#pullrequestreview-1094162469,2022-09-01T23:28:35Z,e807c98771b87c5fc3942694c37cbd2f5e1f767a
2900,milleruntime,"Since you made TableDiskUsage abstract, I think the static modifiers on the methods should be dropped in favor of the use of POJOs. I started making some code suggestions to fix the accesses on the methods but these changes require moving some logic around since the constructor of MetadataTableDiskUsage takes a set of tableIds. One of the methods could also be private.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2900#pullrequestreview-1107337830,2022-09-14T12:37:26Z,125452b692f2a6af293c5403d7773d98f3a05c99
2900,ctubbsii,"I've been sick the last week, so I am not sure where we're at with this, but it seems to me that there's a lot going on in this PR, more than just getting the sizes from the metadata. There are API changes, shell changes, subclasses to preserve old and new code paths, etc. I think a lot of that is overkill, and this PR could be made much more simple by just focusing on changing how the sizes for the files are obtained, rather than doing all the other changes.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2900#pullrequestreview-1109555981,2022-09-15T17:09:14Z,20e50d829b842464a05cc8da3abbb7d592d99fe0
2900,dlmarion,Looks good,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2900#pullrequestreview-1117316677,2022-09-22T16:17:41Z,5d83466c87cf5aa69ff5d7c0a4f973d7af7b86ef
2902,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2902#pullrequestreview-1090670440,2022-08-30T16:55:05Z,abd3e70d5162b14004584d5d89d1e0d8104afadc
2906,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2906#pullrequestreview-1091794369,2022-08-31T12:28:09Z,afa1c36c2b1e88ddc0e86b35976e59b3c5709ad1
2910,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2910#pullrequestreview-1093583530,2022-09-01T15:16:04Z,860c5a65505b7f69e198e67989f852b8c1f50ca7
2910,ctubbsii,"I think I would prefer deferring the shell changes to the future, so we can have a dedicated ""tableinfo"" command. This PR can be updated to only include the API changes, and remove the shell changes, and then we could merge just the API changes (and corresponding tests, of course), without the shell changes.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2910#pullrequestreview-1095088421,2022-09-02T16:11:20Z,4c51e8b7d16cc309f93536c19e1d2d11c6f89480
2917,EdColeman,"Can you provide context for this?

Recently I helped troubleshoot an issue where the ZooKeeper ACLs were incorrect (see https://github.com/apache/accumulo/issues/2890). If this is intended to help with that situation, it may not work.

In that case, the permissions on the nodes were such that an authenticated Accumulo ZooKeeper session did not have sufficient permissions to change the ACLs on the nodes. It required using the ZooKeeper ""super-user"" technique to modify the node's ACLs.  Unless shown otherwise, I'd assume that during the upgrade, the code would be running with Accumulo auths and also would be denied permissions to modify the ACLs.  If the ACLs cannot be modified by any authenticated Accumulo user, the best we may be able to do is fail the upgrade.  Which was effectively what was happening because the upgrade code could not write new configuration property nodes. However - an explicit fail, early in the upgrade may make troubleshooting the root problem easier for users

The other issue is that this seems to set everything to PUBLIC - which is only valid if it it knows that nothing has PRIVATE permissions.

It may be be safer to walk the ZooKeeper tree and modify the permissions only if they do not match expected permissions, accepting PUBLIC or PRIVATE as valid ACLs and leaving them untouched.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2917#pullrequestreview-1099892042,2022-09-07T22:31:01Z,5a15ed77728c8c33be8dd4f8569ce0cce634f1f6
2942,EdColeman,Looking at the build failures there appears to be class not found issues against some versions - retracting approval until resolved.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2942#pullrequestreview-1112196688,2022-09-19T12:50:55Z,d682331e1f1e6dfbd1f62a2744d7d0547a147181
2965,cshannon,"Overall this seems good to me with a couple small changes suggested.

The only other thing I noticed, which is unrelated to the changes here, is that inside `TableOperationsHelper` we are getting the root prefix several times and then appending "".opt."" several times. 
```
String root = String.format(""%s%s.%s"", Property.TABLE_ITERATOR_PREFIX,
          scope.name().toLowerCase(), setting.getName());
```
and then you see `root + "".opt.""` etc

This might be better as a follow on PR for general code improvement but I was thinking it probably makes sense to move all of those calls into helper methods, for example:

```
  private static String getRootPrefix(IteratorScope scope, String name) {
    return String.format(""%s%s.%s"", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase(),
        name);
  }

  private static String getRootOpt(String rootPrefix) {
    return rootPrefix + "".opt."";
  }
```



",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2965#pullrequestreview-1143180596,2022-10-15T12:40:49Z,5f5a5f89eca0303047dc0270f657ac5dd3c820d3
2967,ctubbsii,"I would prefer we not automatically retry. I would rather throw the ConcurrentModificationException. This should happen rarely, but when it does, it should be made known to the user, in case they want to do something different... like check with other groups who made the other change to see what the actually configuration *should* be. And, we shouldn't be hiding potential errors in user's automation, if they unintentionally have multiple processes changing the configuration without being aware of that.

I think for maximum flexibility, and minimal code maintenance burden on our part, it would be better to let users decide how to handle retries if they wish.

So, I don't think we should do this.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2967#pullrequestreview-1124106457,2022-09-28T17:32:58Z,3873e94a351a8077601ccb437d0e4e08f6fc25c0
2992,dlmarion,Looks good. Agree with @Manno15 that the prompt should be changed to match others.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2992#pullrequestreview-1128251687,2022-10-03T12:02:05Z,eae9ffc045fa8a26f8c9eef63d96b9afd6a7f880
2994,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2994#pullrequestreview-1129040538,2022-10-03T21:33:07Z,307d4640b7c4cf0fe0ff27fe407a0decbc47981a
2994,cshannon,"Overall this looks good but I created a PR to this branch as I think we can reduce the redundancy of the code and make it cleaner by having the permission check methods throw an exception instead of checking the boolean value and then throwing if it fails for each check. See: https://github.com/dlmarion/accumulo/pull/36

",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/2994#pullrequestreview-1134747816,2022-10-07T15:44:31Z,41e3b4d7b688d4155c42dd8297f3b7aa27c9c7f6
3001,cshannon,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3001#pullrequestreview-1134553086,2022-10-07T14:10:28Z,8a4585cc89a1d4073fe677c0bdaea0feabb40ac9
3003,cshannon,"I think this mostly looks good but I think a couple things could be changed which I left comments for. 

I also think some of the testing should be improved a bit specifically for `ConfigTransformer` and `ConfigProperyUpgrader`. Since this is upgrading properties I think it should be well tested as it wouldn't be great if the upgrade logic failed and broke an existing install when a user upgraded.

1. `ConfigProperyUpgraderTest` was created but just uses a mock `ConfigTransformer`. It also doesn't test much other than the normal path. There's some edge cases that could be tested I think to make sure it handles errors. For example test what happens if the legacy path is bad, etc.
2.For `ConfigTransformer`, there are a couple integration tests (only `ConfigTransformerIT`) but not many. I think it might be useful to create a test specifically for `ConfigTransformer` (just like you did for `ConfigPropertyUpgrader`) to test the new behavior (using mocks, etc) and run through the different edge cases and scenarios to verify it works.
3.Lastly, I think both `ConfigPropertyUpgraderIT` and `ConfigTransformerIT` could use some extra tests to exercise the new behavior in more scenarios.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3003#pullrequestreview-1143300828,2022-10-16T15:17:11Z,1840593585d661a9172cdd7b38d6a00a4acf6545
3011,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3011#pullrequestreview-1137299371,2022-10-11T11:25:57Z,afefe0fa489040ef6318f862e15bebf0e5c38d85
3011,ctubbsii,"I don't think this is needed. The root user does not need to be granted these permissions. If it wants to write to the metadata table, or alter its configuration, or any other table in the Accumulo namespace, it can grant itself the required permissions. They should not be applied by default.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3011#pullrequestreview-1138109334,2022-10-11T20:23:49Z,afefe0fa489040ef6318f862e15bebf0e5c38d85
3014,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3014#pullrequestreview-1138102129,2022-10-11T20:17:36Z,8b58d16425028fa3a0119c634898c27c19e34fb8
3015,cshannon,"I just tested this this looks good to me, nice work @dlmarion . I really like the recent changes here as the messages are very informative/helpful for the user so they know exactly what they are allowed to see. I also think the addition of using the SYSTEM permission check is a good solution as now the root user can see configs so solves that problem.

The only small nit I had is I noticed that when the error message prints for the default namespace it just shows up as an empty space since there's no name:

`2022-10-13T05:36:56,430 [shell.Shell] WARN : User unable to retrieve  namespace configuration (requires Namespace.ALTER_NAMESPACE permission), error: Error PERMISSION_DENIED for user user1 - User does not have permission to perform this action`

I was thinking maybe we should do something like print it's default if it's the default namespace (empty name), something like this maybe:

`2022-10-13T05:36:56,430 [shell.Shell] WARN : User unable to retrieve default namespace configuration (requires Namespace.ALTER_NAMESPACE permission), error: Error PERMISSION_DENIED for user user1 - User does not have permission to perform this action`",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3015#pullrequestreview-1140458591,2022-10-13T09:46:30Z,34fe538a617b7c3fda3edfd6b2ea7ff9f69745b6
3025,cshannon,"LGTM with the same suggested change in the command that I suggested in #2965 as well.

The helper class here also has the same code to get the root prefix and root opt that I mentioned in my comment here https://github.com/apache/accumulo/pull/2965#pullrequestreview-1143180596 so moving that logic into helper methods (if we want to do that) is probably better as a separate PR since it would touch multiple files and don't want to mix unrelated changes. ",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3025#pullrequestreview-1143185163,2022-10-15T13:00:04Z,409c4c6a5f52548c662977d32430a88cb81bf634
3036,cshannon,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3036#pullrequestreview-1151000321,2022-10-21T13:53:42Z,d2f7953539d01a8f25e8fd28a10fc299a8cd4ec2
3056,ctubbsii,"I would strongly prefer not having MM/dd/YYYY format. It is very confusing to me, having a military background, and living overseas for a bit. YYYYMMdd is better, because it's sortable, and europeans use dd/MM/YYYY, which is often indistinguishable from MM/dd/YYYY, enough to cause confusion.

The human-readable long format is better in that regard... no ambiguity or confusion. Something like dd-MMM-YYYY might also be okay (e.g. 04-JUL-1776), but please avoid anything that results in MM/dd/YYYY.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3056#pullrequestreview-1160386205,2022-10-28T17:13:45Z,e5ba050d9686504b39c21d99d93d7e41f2a882a4
3056,ctubbsii,"The current changes have issues. In testing the latest variant, it seems that while the logs use ISO8601 local time, this JavaScript forces the monitor to be in Zulu time, and removes the ""T"" from the ISO8601 format. I'm not a fan of the ISO8601 format here, because it's not human-friendly, and it has had so many variants, each slightly different, you never know what you're going to get anyway, if you're going for consistent output. It seems like these recent changes in this PR were intended to try to satisfy making the monitor show things similar to the logs. However, it has not achieved this goal, because, at least in my testing, the logs are shown in ISO8601 local time, and these are shown in a slight variant of ISO8601, non-standard, and in Zulu time.

Furthermore, I think this goal is not a great goal in the first place. The monitor is supposed to be very human friendly, and the locale string that we were using before is the best way to get that. The logs are often computer-parsed, and the user can customize them heavily, based on whatever log configuration they provide. These serve different functions.

Yes, I agree that the default locale string is a bit long (I don't think it needs the name of the time zone... just the UTC offset, for example), but it's not necessarily long for everybody... just your local browser and operating system's locale settings, which is machine dependent.

And yes, I do think it would be convenient to be able to easily look up something seen on the monitor with what's in the logs, but if you're relying on the logs anyway, you should probably use a proper log collection for your cluster, and not care what the monitor is showing you. The monitor is not intended for advanced log analysis.

I don't think the original reported problem is actually a problem. On my screen, it's not even very wide because the table cell wraps anyway. I think the solutions to attempt to address this are making the problem more complicated and resulting in more problems than it fixes.

![Screenshot from 2022-10-28 18-22-33](https://user-images.githubusercontent.com/1280725/198746284-61714068-3f1e-4ea3-b1cc-e308a48c8721.png)
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3056#pullrequestreview-1160816235,2022-10-28T22:38:42Z,8c63391b6b7b394843e395d73d1e112f4db5cff9
3067,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3067#pullrequestreview-1169418222,2022-11-05T14:42:18Z,29b8963871a761c35285bcd06913bf31c6ddd940
3067,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3067#pullrequestreview-1169418797,2022-11-05T14:44:30Z,29b8963871a761c35285bcd06913bf31c6ddd940
3067,ctubbsii,"To simplify the code, please remove the negation on the condition, and change the order of the if/else. Also, I think the comment above it needs improved.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3067#pullrequestreview-1174780970,2022-11-09T21:36:57Z,94f5162c5e56efb4ca1d0e86c0cc01c6ae458694
3083,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3083#pullrequestreview-1191048521,2022-11-23T05:24:16Z,f48a88b24fab1de70ef9a8127866cb2a12963157
3083,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3083#pullrequestreview-1192549205,2022-11-24T05:41:42Z,dba224e83a5efc2037d5a3f7a881ae9eb4d3b1e2
3106,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3106#pullrequestreview-1203571234,2022-12-03T20:47:26Z,be00054008d03acf99fd42b22827415a127625f7
3106,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3106#pullrequestreview-1204681908,2022-12-05T14:54:26Z,bdd4d1897c96f3f40d3b7acd9751127d6ececa75
3109,EdColeman,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3109#pullrequestreview-1219517213,2022-12-15T16:07:38Z,def13d1466686d49f2d6175cf82e5dbe6bedd2a7
3118,ctubbsii,"I like the idea of this utility, but I think the output can be improved.

Instead of  `CAN_ACCESS`, we should say `ACCUMULO_HAS_ALL` or something to clarify who can access and what they can access.

For the other items on the left, I think it would be enough to highlight `PRIVATE` or `NOT_PRIVATE`, with `PRIVATE` meaning only Accumulo can access, and `NOT_PRIVATE` means anything other than Accumulo can access it. `NOT_PRIVATE` implies that the user would have to look at the ACLs on the right side to see what that actually means.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3118#pullrequestreview-1218039013,2022-12-14T18:40:48Z,3dea27d1a5f0c064a85d5213fdb502206f256c15
3118,ctubbsii,"Output looks fine, but I think the classes are probably in the wrong package, and there's some confusion over method names that I think could be improved.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3118#pullrequestreview-1254053447,2023-01-18T18:17:11Z,d8ace68633c15f8d47d5685c21497fda42e77cce
3124,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3124#pullrequestreview-1223350530,2022-12-19T19:13:58Z,5432564c9dc206b84baf7a2940f647cf27b27f6b
3124,ctubbsii,"Conceptually, I am in favor of this feature. However, I am not sold on the naming, and I have concerns about the implementation of the CorrelationIdLogger to log the scan lifecycle events (I'm having serious reservations about the creation of duplicate logs, confusing args interpolation, and new use of Level API).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3124#pullrequestreview-1292202229,2023-02-10T00:14:49Z,d5bbae6ee759b2d1a92e1cea63eb502d06a89ee0
3129,cshannon,I saw you removed the HostAndPort test but I would think we should keep it and update it because one of the main things that was tested was the comparator functionality which doesn't exist in the Guava version so that still needs to be tested.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3129#pullrequestreview-1220723986,2022-12-16T11:42:11Z,932a1a9d7e2fb177bccd45a6e89c94fce347c52c
3134,ctubbsii,"I'm wondering if this is a bug in 1.10, or if it only affected us after the upgrade to Thrift 0.17. If it affects 1.10, it would be good to backport, along with the integration test. However, we're not using JUnit5 in 1.10, so we'd have to write the IT a bit differently.
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3134#pullrequestreview-1221903531,2022-12-17T22:28:07Z,fdc6db12227e2507faaf2f30b12e4875726c3fa6
3136,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3136#pullrequestreview-1223327124,2022-12-19T18:26:55Z,508b7d0a00087c91106b9e9116c79253b4adb9e7
3136,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3136#pullrequestreview-1293864204,2023-02-10T19:52:10Z,22c8ce4bbb060d4e4e1adbae085af16db92ab614
3137,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3137#pullrequestreview-1237320392,2023-01-05T12:53:07Z,c903608107b01fe268927c7deb812a7b46187e2f
3139,ctubbsii,"Because there are differences between this branch and main that will affect merging this forward into the main branch, I'd like to pause this PR until we have one ready to merge against the main branch first. Then we can resume this PR as the backport of that one, after it is merged.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3139#pullrequestreview-1229521604,2022-12-24T05:22:22Z,9609b688305f12a100c1e7ad1947d5cae9b872f8
3142,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3142#pullrequestreview-1233174530,2022-12-30T16:53:21Z,5455550fe21ffb01f60acb3ba7171ddaeb587d65
3142,ctubbsii,"I rushed through the test cases you added, but gave more attention to the main code. Overall the main code changes look good. I am curious about a few things:

1. What behavior do you expect if there was a crash on assignment, or a crash/kill that circumvented an unassignment? I was wondering if the behavior in these edge cases for the 'assignment' mode made sense as you've implemented them here.
1. I'm also curious what you thought about how it should work if the value were to be changed in the ZooKeeper system config while a system was running.
1. Also, the property name is a tserver property... but since the locations are updated via Ample, it's not clear that the tserver is the only one that exclusively updates them. I wonder if the manager might update the current/last location, and if the property is still appropriately named in that case.
1. I'm also curious if you had thought about backporting this to 2.1.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3142#pullrequestreview-1253088336,2023-01-18T09:44:25Z,6d788025a39c60f231fa86c6bd568d5f0f5e4494
3151,cshannon,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3151#pullrequestreview-1239682810,2023-01-07T15:56:15Z,0177dbd115e1687be7029b73bf582d4f467fe3fb
3152,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3152#pullrequestreview-1238978398,2023-01-06T15:42:37Z,b529a787b47e7e16569b9d489ed22d19d8134bc2
3160,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3160#pullrequestreview-1269918848,2023-01-25T18:51:01Z,79b0372777d0cfe46fdcf6fb9b104bf491101f20
3160,ctubbsii,I have only minor suggestions remaining for this... some of which might be an existing bug in 1.10 or 2.1's upgrade code.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3160#pullrequestreview-1286084033,2023-02-06T22:17:00Z,ecf517fe82c97840f8a79442428e097d0c11f9a3
3160,ctubbsii,Requesting changes. See last comment about the more informative version check message.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3160#pullrequestreview-1287767974,2023-02-07T18:45:34Z,7c8ec3ad63f144649ed3eeb82c9e21935fd8eba6
3167,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3167#pullrequestreview-1271468293,2023-01-26T17:23:23Z,967df31299ee0f560a3cd29831bc67eefa8b16d2
3168,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3168#pullrequestreview-1267410636,2023-01-24T12:33:57Z,c3d4ad3626d9fbfa3cb4b2c8b2124582a6e42742
3177,EdColeman,"Noticed that the check failed with a junit package issue:

```
Expected 0, but found 1 classes using the wrong JUnit APIs:
core/src/test/java/org/apache/accumulo/core/clientImpl/TabletLocatorImplTest.java
Error: Process completed with exit code 1.
```

Not sure where that is coming from, but it should be corrected before merging",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3177#pullrequestreview-1279240167,2023-02-01T14:35:13Z,dbb004921083741f4bfb69710935463d44f1be6c
3180,ctubbsii,"There's a few bugs in here that could arise with similarly named volumes where one volume is a prefix of another, so you need to check for the terminal dot at the end of the volume before the Hadoop config key name for that volume. Overall, though, I think this is a nice change.

There's some inconsistency in the naming that needs to be polished up also.

Aside from those, I made some suggestions regarding naming, since tags, and streamlined use of streams / forEach.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3180#pullrequestreview-1286115665,2023-02-06T23:55:56Z,2ea0a77ac3a40a012d990a8da9023e7de7ae682a
3187,ctubbsii,"I don't understand the use case for this or the expected behavior. Also, this seems very unnecessary to add to the legacy 1.10 branch, and the code changes would likely be very different from the code in the latest branch. Is there an issue this is trying to solve? Is there a reason to target 1.x?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3187#pullrequestreview-1285906655,2023-02-06T19:50:12Z,e7404530f101db2c433bb3bf6cfc0df267eae423
3189,ctubbsii,"I like the changes to the ServiceLockData abstraction. I think that's a useful change on its own. After that change is done, I think the changes to add the service group are probably relatively minimal, so it's probably okay (meaning, I think I'd be in favor), but I'd like to see what this PR looks like after the ServiceLockData abstraction is done first, without the addition of the group. Would you be willing to do that?",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3189#pullrequestreview-1287820592,2023-02-07T19:59:31Z,118f1019c4189a7e37bca1b7af92d036fbe355a0
3192,ctubbsii,I think passing configuration consistently this way is going to be better for users in the long-run.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3192#pullrequestreview-1293731543,2023-02-10T18:14:23Z,86ab753c90b3c4884d393dbab139eaf63db61031
3195,ctubbsii,"Making the ACLs immutable looks fine, but I would recommend cleaning up the comments in the test. They don't need to be javadoc.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3195#pullrequestreview-1313658873,2023-02-24T15:10:13Z,2116c357f0f92752cfcda0c6ac426e0a7549994d
3202,dlmarion,I didn't do a full review as I think my initial comments will either cause a discussion or significant changes to the PR. ,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3202#pullrequestreview-1313343262,2023-02-24T12:48:18Z,5f2c1cb00aed8d835560b4d173d8cc60ea4af4bd
3203,ctubbsii,"I'm not sure what's wrong with the current mechanism. I don't know why we would exclude the main branch. If the intent is to no longer support Hadoop 3.0.x and ZK 3.5.x for Accumulo 3.0 and later, that's fine, but a much simpler solution is to simply delete that line from the matrix, so we don't do any more compatibility testing for these for Accumulo 3.0 and later (other branches wouldn't be affected, because the change would only occur to the workflow definitions in the main branch). That would effectively make whatever we have in our POM the minimum supported versions for 3.0 and later (because that's all we'd be testing).

However, I don't see a compelling reason to do this. People upgrade Hadoop and ZooKeeper independently of Accumulo, as these are the only two dependencies that we don't actually bundle with our binary distribution tarball. This workflow matrix line merely checks that some earlier versions users may be using aren't obviously broken.

I think it's fine if we leave Hadoop 3.0 and ZK 3.5 the minimum, and continue checking it for the main branch. Unless there's some reason we want to drop them... perhaps because of some newer feature we want to leverage that isn't available in these older versions? If so, a known incompatibility like that would be a good reason to bump the minimum that we're testing with.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3203#pullrequestreview-1313477967,2023-02-24T14:09:17Z,d7329dea9ede9bb79319c8372be9497df235155d
3215,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3215#pullrequestreview-1323888390,2023-03-03T14:23:42Z,36715b4638686d6818c6d171a0793c7da5bfc100
3219,ctubbsii,"It's not clear to me why the byte array needs to be volatile in the first place. The comments make no sense. The reference is never changed after initial construction, so there's no risk of a different thread seeing a different value for this variable. It should just be final, not volatile.

Now, it does appear that there's some thread-safety issues with the `cur` pointer, and perhaps that should be volatile or an AtomicInteger. However, it looks as though the problems with thread-safety are bigger than that... because multiple threads could be advancing the pointer at the same time. It seems to me that we should probably synchronizing around the code that uses or modifies the `cur` pointer,  to fix that, which is a whole different thing than merely making it volatile.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3219#pullrequestreview-1322734167,2023-03-02T22:37:23Z,1ca9c607015b1533de9ecc69fcb651bb3ac97b06
3219,ctubbsii,"Any method that does more than one read/write access to the current pointer value should be changed to be atomic, if we're trying to avoid synchronization of the class or its methods. This would at least make each method have a consistent view of the pointer, even if there's no synchronization between threads for a consistent global view of the state of the stream.

I'm still not sure what the volatile on the byte array buffer is doing, though... that doesn't seem to have any impact, as far as I can tell.
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3219#pullrequestreview-1324250036,2023-03-03T16:39:33Z,e20bc70616e09a12006467c759fb7d3881fa71a9
3219,ctubbsii,"The next review round of mine includes some comments, and some attempts to simplify the lambdas because I think it's going to be really hard for some future person to understand what these are doing. However, it seems necessary to make each method in this class thread-safe without synchronization blocks.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3219#pullrequestreview-1326656317,2023-03-06T16:41:02Z,aa0f2c9a75ff81ec26251cbee6d8bb6b940e44d5
3244,ctubbsii,"I was going to say that these are equivalent, but that this change makes it cleaner. However, they aren't equivalent. This change compares the duration with a max time to wait. The previous version compares the duration with the max time to wait plus the start time... which is a completely arbitrary value. So, this actually fixes that bug *and* makes it easier to read.

My only suggestion is trivial improvements to the assignment of timeToWaitNanos. I added a simple comment also because Math.max and Math.min always make me do a double-take, because Math.max enforces a minimum result, and Math.min enforces a maximum result. As such, they can be easily misread in code, and a comment explaining what is intended is helpful, I think.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3244#pullrequestreview-1346555881,2023-03-17T19:26:37Z,0d508c1f94788689cd606e260a8ff432c0e8fae3
3288,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3288#pullrequestreview-1389916277,2023-04-18T11:54:56Z,674a9da956a7e74b02568680b52fa572b746a26c
3321,ctubbsii,"One more minor change to eliminate a `new Text`, but after that, this change looks ready to merge.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3321#pullrequestreview-1398998699,2023-04-25T01:32:15Z,c98404f8d7c41960529a3f97ae763dbdba40593b
3364,dlmarion,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3364#pullrequestreview-1407694311,2023-05-01T15:06:43Z,7ab1d55f6bbda3db51facce8edda0bbc32efb680
3375,ctubbsii,"I think this is a **very** bad idea. By definition, Errors are those severe problems thrown by the JVM when there is likely no chance of recovery. We have already put a lot of effort in to 2.1 to ensure that we're not mishandling Errors, as that can lead to very bad outcomes (half-dead services, services which are running but critical threads are dead and non-functional, and plenty of other problems), as we've already seen plenty of those before. The best solution here is to crash, and crash hard. We do not, and cannot, know if recovery is possible or safe in the face of Errors.

The fact that VFS (which is the cause of the problems reported in the issue this PR is trying to resolve), is known to be very unreliable, is why I personally **strongly** advise avoiding it, and one of the motivations for us taking specific efforts in 2.1 to phase it out and make it optional by adding more pluggable ways for users to deploy it, or alternatives, at their own discretion. However, whether it is reliable or not, we cannot know what is happening inside a third party component's threads, and cannot be responsible for knowing whether it is safe to recover from it or not. This is not something for us to fix, and attempting to do so requires making compromises which I don't think is acceptable, due to the increased risk of other kinds of problems.

If the user does not wish to crash hard on class loading errors, whether it is due to an unreliable component, misconfiguration, or something else, they should try to take advantage of the pluggable features that allow them to customize a solution that meets their particular requirements.

I do not think this change should be applied... Accumulo is behaving as expected due to the badly behaving configured component. We cannot know if the third party component is safe to recover from in the general case, and cannot be responsible for errors in optional third-party components. There are already options available for users to customize their class loading according to their own requirements, without Accumulo needing to solve it. Accumulo is behaving correctly here.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3375#pullrequestreview-1414393608,2023-05-05T08:44:12Z,8cf26137050c327ca21d542b10c107ef79d3c66d
3384,cshannon,"As commented inline you switched to using Wait.waitFor() but still have 3 second sleeps before hand so those sleeps can/shoved be removed. 

Also I think you should update the other tests in this file as well. There are other tests like [testScanReturnsEarlyDueToLowMemory](https://github.com/apache/accumulo/blob/976081dae5409037a85ff19f08013feabd55d239/test/src/main/java/org/apache/accumulo/test/functional/MemoryStarvedScanIT.java#L193) that are sleeping as well so I think all places in the test class should be changed so it's consistent.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3384#pullrequestreview-1415787822,2023-05-06T15:20:12Z,976081dae5409037a85ff19f08013feabd55d239
3384,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3384#pullrequestreview-1420432480,2023-05-10T11:39:05Z,976081dae5409037a85ff19f08013feabd55d239
3389,ctubbsii,"Overall, looks good. Mostly some questions about edge cases, and two minor suggestions regarding boolean negation for readability and for jQuery selector.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3389#pullrequestreview-1420341354,2023-05-10T11:13:57Z,605ede422187ccb970957bc08c24c067507892b2
3389,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3389#pullrequestreview-1421663146,2023-05-11T02:47:08Z,08c3a77a43664bc23a0bf91323e7ab4fc14fc79d
3398,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3398#pullrequestreview-1425310638,2023-05-13T02:42:05Z,8dfc2c579f2c76872beb7daeada2159ff9bc30e2
3400,ctubbsii,I think this PR can be much more minimal. I have provided my code review suggestions to minimize the changes for this in ivakegg/accumulo#5,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3400#pullrequestreview-1425319804,2023-05-13T04:35:12Z,de074bd4e5975d3a66aa16a774fdb2dcf3d0a5b4
3428,ctubbsii,"I made a lot of narrowly-scoped comments on this implementation, but overall my thoughts are:

1. I like the idea of separating out the decision of whether the file goes to trash or not into a class, but I think that should be an SPI class
2. I think we should reserve the ""janitor"" name for the future and use something like ""TrashPolicy"" for the SPI
3. I don't think we need to provide a custom implementation for bulk imports, as that seems very user-specific. I think we should provide an ""always"" and a ""never"" reference implementations for the SPI.

I realize that what I'm suggesting is basically a rewrite of what you've done already. If you agree that it's a good direction to go, but don't want to do the rewrite, I would be happy to take it on.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3428#pullrequestreview-1444597425,2023-05-25T20:58:48Z,58a52724d4ffb0f7f67640eb8053be8f4c953463
3436,ctubbsii,"Minor changes suggested to add comments and expand the log messages with some helpful details. I was in a rush and didn't really proofread them, so they can probably be worded better than my attempt. Mainly, I just think it's helpful to have a brief description, rather than rely on the name alone to try to figure out the differences between the test cases in the separate classes.

It does strike me that most of the ITs are basically just testing Hadoop's own behavior, rather than our own. Once our prop is removed, these tests can be simplified. I'm not sure we need to test Hadoop behavior so comprehensively in Accumulo, but for now it makes sense, because of the testing of the interaction with our config prop.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3436#pullrequestreview-1453813464,2023-05-31T18:36:51Z,ef414e150c8071a0517275a98a202921ee056447
3444,ctubbsii,"I think it's fine to drop this. It looks like we already marked ""hidden"" to avoid it being used by users. This was moved here to consolidate the various Opts classes that we didn't need anymore, but was never a general option available to users... it was originally only part of GCOpts before it was moved here as a hidden option to just catch spurious uses of it for the accumulo-gc after the consolidation was done.

I think the entire parameter can be removed (not just the `-s`)... we don't need the hidden legacy GCOpts option at all, especially hidden in a class used by all server-side services. If we really want to catch those legacy uses, then the right thing to do is to move it back to a GCOpts subclass to catch legacy uses for the accumulo-gc specifically.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3444#pullrequestreview-1456487102,2023-06-02T00:30:56Z,6d1c6c9a64d6d7ab57c3e5a2a26a46b4fe8a8e03
3445,ctubbsii,"Overall, I think this is a good approach. But I think we can go a bit more minimalistic and keep things much simpler for both us and users, without losing any essential functionality.

I also think it'd be nice if there was an emphasis on ensuring the print option provides computer-readable output, so it's maximally easy to grep or parse the output. Maybe a `--porcelain` option, if needed (but maybe just make all output easily parseable, and we won't even need that additional option)",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3445#pullrequestreview-1470658056,2023-06-08T20:16:25Z,3fb03c5970d849951abfd62935ada8229f808552
3452,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3452#pullrequestreview-1464244142,2023-06-06T04:52:31Z,347d6c3767474d84fe02bfd9a89d8ce731a1737f
3481,ctubbsii,Changes to utils are good. My suggestions pertain to the test changes.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3481#pullrequestreview-1475446271,2023-06-12T17:25:02Z,ffa9648fe8eddfc2dc6d8e7a44eca7fc6ea7667f
3508,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3508#pullrequestreview-1491997711,2023-06-21T23:00:06Z,e58cfec34c795ba1f1a9e81c0c8f73bcb2f6b8e1
3508,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3508#pullrequestreview-1494401632,2023-06-23T05:40:59Z,3ed08fc601a3869e429460daa9df4dfd143b6971
3510,ctubbsii,"Changes are fine, but marking ""request changes"" instead of ""approve"" to get your attention on the following:

Please be very careful when merging this into main.

This contains merge commits as well as new commits. If this is merged from the GitHub UI using the squash method, it will drop the merge commit, and only keep the total changes. A subsequent merge commit (`-s ours`) will need to be done to include the commit history from 2.1. If it is merged  without that, then it will create an additional merge commit on top of the existing merge commit, and it won't squash the subsequent additional intermediate changes from the code review.

This is why we don't typically do merges as PRs, because GitHub's UI is inadequate for doing it correctly. I recommend merging this from the command-line instead, and just closing this PR after the review. Leave a comment in this PR with the merge commit hash.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3510#pullrequestreview-1491727688,2023-06-21T19:57:08Z,96a8141c7da53b70a1a6c4c5b6d6c3fdc257f0a7
3542,ctubbsii,Should be added to fixedProperties or made to support updating the value at runtime.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3542#pullrequestreview-1499463109,2023-06-26T21:38:34Z,cd58a0b4bccd47ec90d9fb1872d0f324b71dc17e
3542,ctubbsii,"This is good. I just have two very trivial suggestions before this is merged.
1. Relocate the new recovery property to keep it grouped with other recovery properties,
2. Inline the trivial getter that's used only once
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3542#pullrequestreview-1504063875,2023-06-28T21:06:02Z,ff6923e48f04d7904628f4492b5c52f0a4179c26
3561,ctubbsii,"> * moves the 'manager server', 'tablet servers' and 'garbage collector' links out of the 'servers' dropdown in the navbar and into their own separate links

-1 to that part, as per my comments on https://github.com/apache/accumulo/issues/3548#issuecomment-1613916979 and https://github.com/apache/accumulo/issues/3548#issuecomment-1615135466


> * makes it so that when the manager state or goal state is `SAFE_MODE` the manager notification circle is yellow and when the manager state or goal state is `CLEAN_STOP` it is red

+1 to that part of the change.

I wouldn't mind so much expanding the menu if it didn't take up so much space and add so much clutter to the top bar. But, even if we could find a way to make them take up less space, it's not scalable... we're adding a bunch of different server types (scan servers, compactors, etc.) and there just isn't enough space up there to separate them out. And it doesn't make sense to separate out some server types and leave others collapsed. So, I think it just needs to stay collapsed, and we need to use some other distinct visual element that propagates up to indicate this special circumstance. (Alternatively, users can just monitor the REST endpoint in any monitoring or alerting tool they wish, rather than rely on our monitor's look and feel to present that information.)",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3561#pullrequestreview-1507829332,2023-06-30T20:04:25Z,9460938643e884f4b6e5cc4025d2d28a9fbf74e5
3562,ctubbsii,"Overall, these changes are good (though I only looked at CreateNamespaceCommand in detail... I am assuming CreateTableCommand has nearly identical changes).

A few things:

* I think the random `getOptions()` call is a bit weird, and probably should go away
* I think there are other names for the flag that could be considered, as well as making the flags mutually exclusive, to reduce confusion
* I'm concerned about the silent success if the config source doesn't exist

Other comments:

When reviewing this, I thought it was weird that clonetable had some options (like set and exclude) that were not on the createtable command. But adding those is out of scope of this, even if we wanted to do that.

Conversely, I noticed that clonetable does not have a `--copy-config` option at all. That got me thinking, and resulted in my comment about a related potential bug with clonetable at https://github.com/apache/accumulo/issues/3233#issuecomment-1615276055 that this PR would not address.

Also, I was thinking that createtable and createnamespace could also have an option to copy the config from either a table or a namespace (so you can create a table using a namespace's config as a template, or a namespace, using a table's config as a template). In general, it really shouldn't matter if you're copying the config from either, because namespaces are specifically *table* namespaces, and hold *table* configurations... just for a group of tables instead of only one. But, I think doing some of that is a bit overkill here. Those more complex use cases can be supported by users using the Java API directly, in JShell or in their own application, if they wish. IN truth, nobody's asking for this, so it's probably not worth doing at all.
",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3562#pullrequestreview-1507960870,2023-06-30T23:51:03Z,18af99e3822bdf7b2583568f84d0177e714cb728
3568,cshannon,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3568#pullrequestreview-1515497518,2023-07-05T23:11:00Z,10b12927b7e61b40d078cb84930eb114bf595096
3612,DomGarguilo,"I ran some tests with these changes and generated random values similar to how you outlined in the comment above. It looks like everything works as intended and these columns are indeed sorted by their numeric value.

The review comments I made are general and should apply to all of the files so make sure to try to apply my suggestions to not just the file in which I commented.

Overall things are looking good and seem to work as intended :+1: ",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3612#pullrequestreview-1530491853,2023-07-14T17:10:58Z,dda979dadaaccac0f1bdfbf23cf841244010e654
3671,ctubbsii,"Wouldn't these get logged elsewhere as well? I suppose in this case, redundant logging isn't important.

My only suggestion for changes is my usual suggestion to narrow the catch block with multi-catch. Something like:

```java
  } catch (CheckedEx1 | CheckedEx2 | RuntimeException e) {
```

This works the same as what you have, but alerts us during development when some new checked exception is thrown that we might not know to look for, and may want to handle differently.

Multi-catch blocks make it easy to narrow our exception handling so we can avoid overlooking things that get caught up in the wide net that we don't expect or didn't think about.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3671#pullrequestreview-1558133246,2023-08-02T03:39:14Z,1a336ce1361df5be90c4da4e81373dc2d18f90eb
3676,ctubbsii,"Found one issue. Didn't have time to finish looking, but the overall approach seems fine. But, please make sure you call EasyMock.verify on the mock objects.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3676#pullrequestreview-1559921167,2023-08-02T22:25:25Z,39f0f85f2ac8df779a1315e12223eaa033d045ba
3678,ctubbsii,"I think there's a risk of some unintended consequences here. Classloaders are not free to create, and depending on the implementation of the system classloader factory, creating one unnecessarily may be highly undesirable for a particular implementation. Instead of this, how about we add a default method to the factory SPI to validate a context, and use that in the class loader util? So, instead of forcing the classloader to be constructed, we get a boolean response back here about its validity.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3678#pullrequestreview-1563829134,2023-08-05T09:21:36Z,bd83936ebe8daf199e30839271dfead0d77a307f
3680,ctubbsii,"Implementation looks good as a stand-alone fix, but I'm concerned about consistency of behavior with other similar prompts in the shell, and suggest converging on a single implementation put in the Shell class, and called as needed.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3680#pullrequestreview-1571108796,2023-08-10T06:29:54Z,01f3e5670693f0a0485b7efb3b7be8d28acc9474
3684,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3684#pullrequestreview-1574089928,2023-08-11T17:19:25Z,5ac8ac443afadc2466406012ad998db0bfcb091b
3684,ctubbsii,"I think it's worth considering restoring the slight change in behavior that existed previously that used the `more` flag to discontinue processing the rest of the items in the loop, before this is merged. Perhaps my suggestion to use `Optional` for this will work, or perhaps there's something cleaner. But, I don't think it's a good idea to force users to continue to be prompted for the remaining items in a loop if the previous code aborted the loop.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3684#pullrequestreview-1575991593,2023-08-14T03:12:54Z,d6e0539f396b36041f2f8bd163353c9a1bd8fc3b
3706,cshannon,"This should work but I was going over it and think it would just be simpler/easier if instead of the key being the URI we just made the key the volumeHdfsConfigOverrides map. We wouldn't need to worry about having the extra object as the key or having to use the boolean to detect new entries.

The issue with that change of course is if the properties change you end up with a stale entry in the Cache that won't ever be used anymore. However, I think this is probably fine. You still have a 6 hour time out which would evict stale entries if the properties changed. Also, as a precaution we could set a max number of entries on the cache just to prevent blowing heap incase some weird edge case or bug happened where properties kept changing so if too many entires went into the cache it would evict based on least recently used with the tinyLRU algorithm it uses.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3706#pullrequestreview-1584842195,2023-08-18T16:14:57Z,e5a8b7e1cf367bfd4695f80242fa7a51d7d2f512
3712,ctubbsii,"Thank you for your suggested changes, @Taher-Ghaleb . The changes to use the more specific assertions rather than `assertTrue` are useful.

However, the changes to add verbose messages to the assertion lines are not useful. The messages themselves are trivial enough that they don't actually add any value for the developer doing the troubleshooting. It's clear from the assertion code alone what failed. Over time the messages themselves could diverge from the actual code, as well, making it more content to keep up to date.

We do occasionally add messages to assertions, but when we do, it would be nice to have a message that gifts more useful. These trivial messages that are basically equivalent to what JUnit has already told us, are not useful. They just add content to maintain and are noisy and make the test code less readable.

If you still want to contribute changes to help improve our tests, I would suggest removing the changes that add the trivial messages, and only keep the changes to use the more specific assertion method (like using assertEquals or assertNotEquals instead of using assertTrue or assertFalse and `==` or `!=`). Those specific assertion method changes are enough to add a more detailed message from JUnit on failure.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3712#pullrequestreview-1587710640,2023-08-21T19:20:43Z,955e7185a70c84c0d001aa8d04b0e3eef474fb9e
3725,ctubbsii,This can be a much more trivial PR than this. I think the only file that needs changing is Property.java. The other files can stay unchanged.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3725#pullrequestreview-1600751786,2023-08-29T16:00:08Z,3a1c79b4a2589b0fcaf72c27d05e459ca8487c15
3728,ctubbsii,"This code is a nightmare to look at and work with. Not your code specifically... just the totality of what's there, due to the complexity of all the edge cases and the overlaps checks, and the deep call stacks that are difficult to follow; I'm not even sure what can be done to clean any of it up. Your code thankfully is not making it worse... but I do wonder if there's more we can do to make some of these internals more maintainable in general.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3728#pullrequestreview-1599587689,2023-08-29T08:53:40Z,8dca8a55d3945078afbd58c04305bc7724d9b706
3733,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3733#pullrequestreview-1599874985,2023-08-29T09:49:15Z,34eb1faed5374e9eb6c9f4848e184ac13d0a17ce
3737,ctubbsii,"So, I think the changes to the IT aren't good, for the reasons I say below. I'm going to spend a little time trying to polish it up, but I do think the non-test stuff is pretty much good.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3737#pullrequestreview-1606159016,2023-09-01T05:59:52Z,5f8148d69c5683a7854c960b0e5fb089fed3bb41
3754,ctubbsii,"A few things:

1. Can use bootstrap.bundle.js instead of bootstrap.js to include popper
2. I'm not sure we need to redistribute the .map files for bootstrap; as far as I can tell, they are only used by browsers for debugging bootstrap itself; if users want to add them, they can, but we don't need to distribute them by default and they can be removed from our source, so long as that doesn't cause any errors, which I'm pretty sure it won't.
3. DataTables now uses unicode characters for its up/down arrows for sorting. It is no longer necessary to ship the datatables/images; those can be deleted
4. DataTables does not need the css/jquery.dataTables.css file, since it has the css/dataTables.bootstrap5.css for styling, so that can be deleted too.
5. Bootstrap is now at 5.3.2 as of this review; this PR is for 5.3.1.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3754#pullrequestreview-1629908859,2023-09-16T05:47:19Z,b0f44f16bd55f313b5505cd1954d29ce2ec24be0
3770,ctubbsii,"Looks good overall. Just a comment on updating the LICENSE files.

I would also like to see if we can tweak the content of the alert window, so the icon is to the left of the list of alerts, instead of above it in a separate section. I didn't investigate too deeply to see how we could do that. The examples on the bootstrap site show it like that for one item, but I think it could work nicely for more than one. I was thinking something like:


```
 ICON  Item 1
 ICON  Item 2
       Item 3
       Item 4
```

In this example, I show ""ICON"" on two lines, because it'll be a bigger font, so it may span multiple lines. I'm a bit worried about bike-shedding this, so if it's too much trouble, then don't worry about the icon placement that much.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3770#pullrequestreview-1658203976,2023-10-04T18:07:35Z,8163f59f73dd76b3aa367ed43691f6f32c2b4522
3776,ctubbsii,"If the number doesn't go back down, then this seems to be a good way to improve the reliability of the test.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3776#pullrequestreview-1642830305,2023-09-25T19:14:37Z,87d0e9814948fcdfa47312d149e1da9be97c6ce5
3779,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3779#pullrequestreview-1645030577,2023-09-26T19:26:58Z,40c2059982dc696401eaf7844f1d91cc796d8533
3779,ctubbsii,"Minor suggestions. Should be okay to merge after those, if you're okay with them.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3779#pullrequestreview-1647343557,2023-09-27T18:44:19Z,82de7738d861b93e428d499c88dded3db767936e
3792,ctubbsii,"To the earlier comment, I don't see any reason to change this in a patch release. It's enough to know that it works. Users can change the configuration themselves, if they want to use something other than the default. We don't want to be creating a situation where a partially upgraded cluster (where we support less coordination for upgrades, as patch releases are typically drop-in substitutes) can't properly talk between services because servers are using different default configs. This isn't really an issue across major/minor version bumps, where coordination for upgrades is required, and support for mixing versions is limited or non-existent. So, it'd be better to just make this change in the main branch for the next version, and not make it for 2.1.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3792#pullrequestreview-1658876591,2023-10-05T05:03:25Z,9c34320392280c1bdc4b174d41d2ea4f620d1a91
3813,ctubbsii,"Looks good, but the UTF-8 issue should be fixed. I looked around and found other issues, and created #3815 as a follow-on to this to address those.

The suggested refactoring to leverage Optional to make the code more concise is merely a suggestion, but I recently made similar changes in #3788 for the main branch, so it's possible that similar changes here may make merging forward a little easier (I'm not sure, I didn't try).",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3813#pullrequestreview-1658990278,2023-10-05T06:55:07Z,ea6f3878f92ca01a8f35156227ea14cf4e153a45
3817,ctubbsii,src/build/ci/find-unapproved-junit.sh was also involved in checking the use of JUnit during a build.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3817#pullrequestreview-1660646554,2023-10-05T20:23:00Z,afc35e117007f3376964bfd7802cb25c8218b635
3876,cshannon,"@EdColeman - I tested this out with Uno and it worked well, so overall looking pretty good. I saw it clean up the chopped references and upgrade all the metadata succesfully. I added some in line comments for a few things to tweak.

The only other main thing I think this is missing is testing. There's no tests right now for any of the upgrade code in `Upgrader11to12` so I think that is important to add to make sure it works before merging this. 

Ideally we would also add an integration test or 2 as well to test the upgrade. It would be a little tricky as it would probably require having to take tables offline and manually modifying the metadata to the old format and stopping the mini accumulo cluster and then changing metadata so it would upgrade on a restart. So I'm not sure about doing an IT but the Upgrader11to12 class itself at least should have tests.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3876#pullrequestreview-1691248855,2023-10-21T13:42:05Z,0f35f114a7565dac5b361bf461838fbfcbae95f4
3895,ctubbsii,"Looks like you beat me to it. I had a local branch ready to bump to 3.23.1 as soon as they released a fix, but they skipped right past that version and released it as 3.24.0. I wonder what else they changed. In any case, you can delete the comment about holding the version back.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3895#pullrequestreview-1700849752,2023-10-27T01:03:39Z,6b9265b9a784432a248641ae6412e94391e74510
3905,ctubbsii,"Thanks for the PR. I think this is close to being done. In addition to the comments I've already made, I think you can wrap line 489 where `o.addOption(showFewOpt)` with an `if` statement to make sure it only gets added to the options for the ScanCommand and the two Grep commands, but not for the DeleteManyCommand.

Line 489 with your changes.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3905#pullrequestreview-1727908042,2023-11-13T18:10:25Z,f8fb6c883b9cab62880a5ad3889f5cd0003ff7b3
3927,ctubbsii,,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3927#pullrequestreview-1728333921,2023-11-13T21:41:52Z,37112e7e0ee8e39ecc285089ad83d0f8decea3e2
3934,cshannon,I talked with @keith-turner in detail about this and we realized this would cause problems as this is currently written as using an async writer will flush periodically and when the last tablet is processed it could see disjoint files from the previous copying since it is no longer done in one buffering in memory. This is also a problem during failure and resume.I can let @keith-turner comment too but this will likely be reworked to add extra verification and to limit the merge operation so a number of files that can be done in one operation to prevent a bad state and to keep the copy/fencing as being buffered to it happens at once. Currently in 2.1/main it's not an issue since everything is buffered into one mutation before being written so it's atomic. We likely should add a file limit check there for merge as well to prevent blowing memory if too many files.,CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3934#pullrequestreview-1718389067,2023-11-07T18:12:39Z,68a215731e731c4decc18cc3e56b788be0705879
3960,ddanielr,"Added a suggestion to CompactionJobQueues so we can avoid throwing an exception, but overall I think this is in a good state.",CHANGES_REQUESTED,https://github.com/apache/accumulo/pull/3960#pullrequestreview-1740849158,2023-11-20T23:06:19Z,48c64a8f0d4cb775ced4c29ec803b0827c412ec8
