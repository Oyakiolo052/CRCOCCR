Pull,Path,Diff_hunk,Comment
121,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/CASAuthenticationProvider.java,"@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.cas;
+
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.net.auth.AuthenticatedUser;
+import org.apache.guacamole.net.auth.AuthenticationProvider;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.UserContext;
+
+/**
+ * Guacamole authentication backend which authenticates users using an
+ * arbitrary external system implementing CAS. No storage for connections is
+ * provided - only authentication. Storage must be provided by some other
+ * extension.
+ *
+ * @author Michael Jumper","[{'comment': 'I\'m guessing you meant this to say ""Nick Couchman""? Same for CASAuthenticationProviderModule and AuthenticatedUser.', 'commenter': 'jmuehlner'}, {'comment': ""Well, since I had basically copied and pasted files that Mike wrote with almost no changes, I was trying to avoid plagiarizing someone else's work.  I've updated them to have my name..."", 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/src/main/resources/cas.css,"@@ -0,0 +1,23 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/* Hide login dialog */
+.login-ui div.login-dialog {
+    display: none;","[{'comment': ""Why is the login dialog being hidden? Won't this break things for all other auth methods?"", 'commenter': 'mike-jumper'}, {'comment': ""Probably so, and, come to think of it, it really shouldn't be necessary since loading the form should redirect to the SSO page, then back to Guacamole after authentication.  I'll remove it, build it and make sure it still works, and commit after verifying."", 'commenter': 'necouchman'}, {'comment': 'Removed this and the CSS file altogether, and added a translation file just to blank out the LOGIN.FIELD_HEADER_TICKET text in the login box.  A login box is now displayed very briefly while the page redirects.', 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -0,0 +1,111 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.cas;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Arrays;
+import java.util.Enumeration;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.auth.cas.conf.ConfigurationService;
+import org.apache.guacamole.auth.cas.form.CASTicketField;
+import org.apache.guacamole.auth.cas.ticket.TicketValidationService;
+import org.apache.guacamole.auth.cas.user.AuthenticatedUser;
+
+/**
+ * Service providing convenience functions for the CAS AuthenticationProvider
+ * implementation.
+ *
+ * @author Nick Couchman
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Service for retrieving CAS configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Service for validating received ID tickets.
+     */
+    @Inject
+    private TicketValidationService ticketService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<AuthenticatedUser> authenticatedUserProvider;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+
+        String ticket = null;","[{'comment': ""This `null` value will never be used (unnecessary initialization). As this variable isn't used outside the body of the `if` below anyway, perhaps it would make more sense to inline the declaration there?"", 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/src/main/resources/casConfig.js,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Config block which registers CAS-specific field types.
+ */
+angular.module('guacCAS').config(['formServiceProvider',
+        function guacCASConfig(formServiceProvider) {
+
+    // Define field for ticket from CAS service
+    formServiceProvider.registerFieldType(""GUAC_CAS_TICKET"", {
+        templateUrl   : '',
+        controller    : 'guacCASController',
+        module        : 'guacCAS'
+    });
+
+}]);
+
+/**
+ * Config block which augments the existing routing, providing special handling
+ * for the ""ticket="" fragments provided by OpenID Connect.
+ */
+angular.module('index').config(['$routeProvider',
+        function indexRouteConfig($routeProvider) {
+
+    var curPath = window.location.href;
+    var ticketPos = curPath.indexOf(""?ticket="") + 8;
+    var hashPos = curPath.indexOf(""#/"");
+    if(ticketPos > 0 && ticketPos < hashPos) {","[{'comment': '`if(` 😭 ', 'commenter': 'mike-jumper'}, {'comment': '-Sigh- I had even gone through and checked specifically for that.  Fixed.', 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/src/main/resources/casConfig.js,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Config block which registers CAS-specific field types.
+ */
+angular.module('guacCAS').config(['formServiceProvider',
+        function guacCASConfig(formServiceProvider) {
+
+    // Define field for ticket from CAS service
+    formServiceProvider.registerFieldType(""GUAC_CAS_TICKET"", {
+        templateUrl   : '',
+        controller    : 'guacCASController',
+        module        : 'guacCAS'
+    });
+
+}]);
+
+/**
+ * Config block which augments the existing routing, providing special handling
+ * for the ""ticket="" fragments provided by OpenID Connect.
+ */
+angular.module('index').config(['$routeProvider',
+        function indexRouteConfig($routeProvider) {
+
+    var curPath = window.location.href;
+    var ticketPos = curPath.indexOf(""?ticket="") + 8;
+    var hashPos = curPath.indexOf(""#/"");
+    if(ticketPos > 0 && ticketPos < hashPos) {
+        var ticket = curPath.substring(ticketPos, hashPos);
+        var newPath = curPath.substring(0,ticketPos - 8) + '#/?ticket=' + ticket;
+        window.location=newPath;","[{'comment': 'Is CAS OK with this sort of thing? I recall having difficulty with redirect URLs and OpenID as endpoints prohibited the presence of `#`.\r\n\r\nStylewise, should have spaces around the `=` like everywhere else.', 'commenter': 'mike-jumper'}, {'comment': ""CAS doesn't seem to mind this, no - the redirect and authentication seems to work fine.\r\n\r\nStyle issue fixed."", 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/src/main/resources/casConfig.js,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Config block which registers CAS-specific field types.
+ */
+angular.module('guacCAS').config(['formServiceProvider',
+        function guacCASConfig(formServiceProvider) {
+
+    // Define field for ticket from CAS service
+    formServiceProvider.registerFieldType(""GUAC_CAS_TICKET"", {
+        templateUrl   : '',
+        controller    : 'guacCASController',
+        module        : 'guacCAS'
+    });
+
+}]);
+
+/**
+ * Config block which augments the existing routing, providing special handling
+ * for the ""ticket="" fragments provided by OpenID Connect.
+ */
+angular.module('index').config(['$routeProvider',
+        function indexRouteConfig($routeProvider) {
+
+    var curPath = window.location.href;
+    var ticketPos = curPath.indexOf(""?ticket="") + 8;
+    var hashPos = curPath.indexOf(""#/"");","[{'comment': ""I recommend looking a bit further into AngularJS and its built-in parsing of route URLs (as well as JavaScript's built-in parsing of URLs). In plain JS, you can grab the various things after and including the `?` using [`window.location.search`](https://developer.mozilla.org/en-US/docs/Web/API/Location), and AngularJS provides the [`$routeParams`](https://code.angularjs.org/1.3.16/docs/api/ngRoute/service/$routeParams)."", 'commenter': 'mike-jumper'}, {'comment': ""I'll take a look - I actually meant to ask for help with this specifically.  This is pretty hacked together, but I fought with Angular for quite a while trying to pull the ticket= parameter out of the return URL and put it in the right place, and literally cutting it out and putting it at the right position ended up being the way I had to go.  I'll go back and review, but it seemed like I stumbled across a couple of limitations in Angular that prevented me from doing it in a more elegant way."", 'commenter': 'necouchman'}, {'comment': ""This was several weeks ago, but, IIRC, the reason I had to hack this together is that $routeParams only looks at everything past the #/ part of the URL.  When CAS redirects back to Guacamole, the URL comes in looking like this:\r\nhttps://my.server.local/guacamole/?ticket=blahblahblah/#\r\n\r\n$routeParams then pulls in nothing, because it sees nothing after the #.  I can't remember how much I played with window.location.search, but I'm looking into that now to see if I can pull this without having to use nasty code like strlen :-)."", 'commenter': 'necouchman'}, {'comment': ""So, I can definitely use $window.location.search to extract the ticket parameter from the current URL.  I'm still not entirely sure the most elegant way to then take that, strip it off of the current path, and add it on the end past the route parameters?"", 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/src/main/resources/casConfig.js,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Config block which registers CAS-specific field types.
+ */
+angular.module('guacCAS').config(['formServiceProvider',
+        function guacCASConfig(formServiceProvider) {
+
+    // Define field for ticket from CAS service
+    formServiceProvider.registerFieldType(""GUAC_CAS_TICKET"", {
+        templateUrl   : '',
+        controller    : 'guacCASController',
+        module        : 'guacCAS'
+    });
+
+}]);
+
+/**
+ * Config block which augments the existing routing, providing special handling
+ * for the ""ticket="" fragments provided by OpenID Connect.
+ */
+angular.module('index').config(['$routeProvider',
+        function indexRouteConfig($routeProvider) {
+
+    var curPath = window.location.href;","[{'comment': '@jmuehlner would probably also point out that AngularJS wraps `window` and provides [`$window`](https://code.angularjs.org/1.3.16/docs/api/ng/service/$window) to help facilitate unit testing (whenever we get around to having such things at the JS level).', 'commenter': 'mike-jumper'}, {'comment': 'I believe I have this implemented in the more proper AngularJS way.', 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/pom.xml,"@@ -0,0 +1,172 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-cas</artifactId>
+    <packaging>jar</packaging>
+    <version>0.9.11-incubating</version>
+    <name>guacamole-auth-cas</name>
+    <url>http://guacamole.incubator.apache.org/</url>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+
+            <!-- Written for 1.6 -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.3</version>
+                <configuration>
+                    <source>1.6</source>
+                    <target>1.6</target>
+                    <compilerArgs>
+                        <arg>-Xlint:all</arg>
+                        <arg>-Werror</arg>
+                    </compilerArgs>
+                    <fork>true</fork>
+                </configuration>
+            </plugin>
+
+            <!-- Copy dependencies prior to packaging -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.10</version>
+                <executions>
+                    <execution>
+                        <id>unpack-dependencies</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>unpack-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <includeScope>runtime</includeScope>
+                            <outputDirectory>${project.build.directory}/classes</outputDirectory>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Assembly plugin - for easy distribution -->
+            <plugin>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>2.5.3</version>
+                <configuration>
+                    <finalName>${project.artifactId}-${project.version}</finalName>
+                    <appendAssemblyId>false</appendAssemblyId>
+                    <descriptors>
+                        <descriptor>src/main/assembly/dist.xml</descriptor>
+                    </descriptors>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>make-dist-archive</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Verify format using Apache RAT -->
+            <plugin>
+                <groupId>org.apache.rat</groupId>
+                <artifactId>apache-rat-plugin</artifactId>
+                <version>0.12</version>
+
+                <configuration>
+                    <excludes>
+                        <exclude>**/*.json</exclude>
+                        <exclude>src/licenses/**/*</exclude>
+                    </excludes>
+                </configuration>
+
+                <!-- Bind RAT to validate phase -->
+                <executions>
+                    <execution>
+                        <id>validate</id>
+                        <phase>validate</phase>
+                        <goals>
+                            <goal>check</goal>
+                        </goals>
+                    </execution>
+                </executions>
+
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <dependencies>
+
+        <!-- Guacamole Java API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-common</artifactId>
+            <version>0.9.10-incubating</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Guacamole Extension API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-ext</artifactId>
+            <version>0.9.11-incubating</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+          <groupId>org.jasig.cas.client</groupId>","[{'comment': 'Indentation here is wonky (should be four spaces, not two).\r\n\r\nThis is also crammed into the section labelled ""Guacamole Extension API"", which is incorrect. Should separate this section from the others with blank lines and add a human-readable comment noting what the dependency is, like the other deps.', 'commenter': 'mike-jumper'}, {'comment': 'Should be fixed.', 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/pom.xml,"@@ -0,0 +1,172 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-cas</artifactId>
+    <packaging>jar</packaging>
+    <version>0.9.11-incubating</version>
+    <name>guacamole-auth-cas</name>
+    <url>http://guacamole.incubator.apache.org/</url>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+
+            <!-- Written for 1.6 -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.3</version>
+                <configuration>
+                    <source>1.6</source>
+                    <target>1.6</target>
+                    <compilerArgs>
+                        <arg>-Xlint:all</arg>
+                        <arg>-Werror</arg>
+                    </compilerArgs>
+                    <fork>true</fork>
+                </configuration>
+            </plugin>
+
+            <!-- Copy dependencies prior to packaging -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.10</version>
+                <executions>
+                    <execution>
+                        <id>unpack-dependencies</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>unpack-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <includeScope>runtime</includeScope>
+                            <outputDirectory>${project.build.directory}/classes</outputDirectory>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Assembly plugin - for easy distribution -->
+            <plugin>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>2.5.3</version>
+                <configuration>
+                    <finalName>${project.artifactId}-${project.version}</finalName>
+                    <appendAssemblyId>false</appendAssemblyId>
+                    <descriptors>
+                        <descriptor>src/main/assembly/dist.xml</descriptor>
+                    </descriptors>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>make-dist-archive</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Verify format using Apache RAT -->
+            <plugin>
+                <groupId>org.apache.rat</groupId>
+                <artifactId>apache-rat-plugin</artifactId>
+                <version>0.12</version>
+
+                <configuration>
+                    <excludes>
+                        <exclude>**/*.json</exclude>
+                        <exclude>src/licenses/**/*</exclude>
+                    </excludes>
+                </configuration>
+
+                <!-- Bind RAT to validate phase -->
+                <executions>
+                    <execution>
+                        <id>validate</id>
+                        <phase>validate</phase>
+                        <goals>
+                            <goal>check</goal>
+                        </goals>
+                    </execution>
+                </executions>
+
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <dependencies>
+
+        <!-- Guacamole Java API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-common</artifactId>
+            <version>0.9.10-incubating</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Guacamole Extension API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-ext</artifactId>
+            <version>0.9.11-incubating</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+          <groupId>org.jasig.cas.client</groupId>
+          <artifactId>cas-client-core</artifactId>","[{'comment': ""What license is `cas-client-core` under?\r\n\r\nJust as with `guacamole-auth-header`, we'll need to include the licenses of all bundled dependencies, and ensure that the licensing is compliant with ASF policy (see https://www.apache.org/legal/resolved.html).\r\n\r\nSome of these dependencies are the same as other extensions, so things like Guice should be easy to copy into place, but you'll have to track down the licensing of the CAS client, include it within `src/licenses/...` like the others, and so on.\r\n\r\nNote also that the CAS client may itself pull in transitive dependencies which end up bundled, too, and we'll need to track down *those* licenses and do the same there."", 'commenter': 'mike-jumper'}, {'comment': 'Good question...will have to check on this.', 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.cas.conf;
+
+import com.google.inject.Inject;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+
+/**
+ * Service for retrieving configuration information regarding the CAS service.
+ */
+public class ConfigurationService {
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * Returns the authorization endpoint (URI) of the CAS service as
+     * configured with guacamole.properties.
+     *
+     * @return
+     *     The authorization endpoint of the CAS service, as configured with
+     *     guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the authorization
+     *     endpoint property is missing.
+     */
+    public String getAuthorizationEndpoint() throws GuacamoleException {
+        return environment.getRequiredProperty(CASGuacamoleProperties.CAS_AUTHORIZATION_ENDPOINT);
+    }
+
+    /**
+     * Returns the URI that the CAS service should redirect to after
+     * the authentication process is complete, as configured with
+     * guacamole.properties. This must be the full URL that a user would enter
+     * into their browser to access Guacamole.
+     *
+     * @return
+     *     The client secret to use when communicating with the CAS service,","[{'comment': 'Looks like some copy pasta here. You mean the redirect URI?', 'commenter': 'mike-jumper'}]"
121,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.cas.ticket;
+
+import com.google.inject.Inject;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleSecurityException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.auth.cas.conf.ConfigurationService;
+import org.jasig.cas.client.authentication.AttributePrincipal;
+import org.jasig.cas.client.validation.Assertion;
+import org.jasig.cas.client.validation.Cas20ProxyTicketValidator;
+import org.jasig.cas.client.validation.TicketValidationException;
+
+/**
+ * Service for validating ID tickets forwarded to us by the client, verifying
+ * that they did indeed come from the CAS service.
+ */
+public class TicketValidationService {
+
+    /**
+     * Service for retrieving CAS configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Validates and parses the given ID ticket, returning the username contained
+     * therein, as defined by the username claim type given in
+     * guacamole.properties. If the username claim type is missing or the ID
+     * ticket is invalid, an exception is thrown instead.
+     *
+     * @param ticket
+     *     The ID ticket to validate and parse.
+     *
+     * @return
+     *     The username contained within the given ID ticket.
+     *
+     * @throws GuacamoleException
+     *     If the ID ticket is not valid, the username claim type is missing, or
+     *     guacamole.properties could not be parsed.
+     */
+    public String processUsername(String ticket) throws GuacamoleException {
+        AttributePrincipal principal = null;
+
+        // Retrieve the configured CAS URL and establish a ticket validator
+        String casServerUrl = confService.getAuthorizationEndpoint();
+        Cas20ProxyTicketValidator sv = new Cas20ProxyTicketValidator(casServerUrl);
+        sv.setAcceptAnyProxy(true);
+        try {
+            String confRedirectURI = confService.getRedirectURI();
+            Assertion a = sv.validate(ticket, confRedirectURI);","[{'comment': 'Can you clean up and comment the logic here? I see you say:\r\n\r\n    // Retrieve the configured CAS URL and establish a ticket validator\r\n\r\nbut there seems to be more going on here than that. What is `sv`? The ticket validator? What are we doing with that ticket validator which results in us ultimately returning the username?', 'commenter': 'mike-jumper'}, {'comment': 'Beefed up those comments a bit.', 'commenter': 'necouchman'}]"
121,extensions/guacamole-auth-cas/src/main/resources/casConfig.js,"@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Config block which registers CAS-specific field types.
+ */
+angular.module('guacCAS').config(['formServiceProvider',
+        function guacCASConfig(formServiceProvider) {
+
+    // Define field for ticket from CAS service
+    formServiceProvider.registerFieldType(""GUAC_CAS_TICKET"", {
+        templateUrl   : '',
+        controller    : 'guacCASController',
+        module        : 'guacCAS'
+    });
+
+}]);
+
+/**
+ * Config block which augments the existing routing, providing special handling
+ * for the ""ticket="" fragments provided by OpenID Connect.","[{'comment': 'You mean CAS?', 'commenter': 'mike-jumper'}]"
121,extensions/guacamole-auth-cas/src/main/resources/casConfig.js,"@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Config block which registers CAS-specific field types.
+ */
+angular.module('guacCAS').config(['formServiceProvider',
+        function guacCASConfig(formServiceProvider) {
+
+    // Define field for ticket from CAS service
+    formServiceProvider.registerFieldType(""GUAC_CAS_TICKET"", {
+        templateUrl   : '',
+        controller    : 'guacCASController',
+        module        : 'guacCAS'
+    });
+
+}]);
+
+/**
+ * Config block which augments the existing routing, providing special handling
+ * for the ""ticket="" fragments provided by OpenID Connect.
+ */
+angular.module('index').config(['$routeProvider','$windowProvider',
+        function indexRouteConfig($routeProvider,$windowProvider) {
+
+    var $window = $windowProvider.$get();
+    var curPath = $window.location.href;
+    var ticketPos = curPath.indexOf(""?ticket="") + 8;
+    var hashPos = curPath.indexOf(""#/"");
+    if (ticketPos > 0 && ticketPos < hashPos) {","[{'comment': 'The test `ticketPos > 0` will always be true, as you\'re adding `8` to the result of `indexOf()`, masking the potential `-1` return value indicating the absence of the string `""?ticket=""`.', 'commenter': 'mike-jumper'}]"
121,extensions/guacamole-auth-cas/src/main/resources/casConfig.js,"@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Config block which registers CAS-specific field types.
+ */
+angular.module('guacCAS').config(['formServiceProvider',
+        function guacCASConfig(formServiceProvider) {
+
+    // Define field for ticket from CAS service
+    formServiceProvider.registerFieldType(""GUAC_CAS_TICKET"", {
+        templateUrl   : '',
+        controller    : 'guacCASController',
+        module        : 'guacCAS'
+    });
+
+}]);
+
+/**
+ * Config block which augments the existing routing, providing special handling
+ * for the ""ticket="" fragments provided by OpenID Connect.
+ */
+angular.module('index').config(['$routeProvider','$windowProvider',
+        function indexRouteConfig($routeProvider,$windowProvider) {
+
+    var $window = $windowProvider.$get();
+    var curPath = $window.location.href;
+    var ticketPos = curPath.indexOf(""?ticket="") + 8;","[{'comment': 'Beware that, by convention, strings in JavaScript should be `\'single quoted\'`, not `""double quoted""`. They\'re both legal ... so all the more reason to pick one and only one for consistency\'s sake. We happen to have gone with the prevailing convention in JavaScript programming land of single quotes.\r\n\r\nFrom http://guacamole.incubator.apache.org/guac-style/#naming:\r\n\r\n> Prefer `\'single quotes\'` over `""double quotes""` for strings in JavaScript.\r\n\r\nI had to get used to that one, too. You\'ll find much of the older guac JavaScript code using double quotes as I used to resist that convention. New code uses single quotes, though.', 'commenter': 'mike-jumper'}]"
121,extensions/guacamole-auth-cas/src/main/resources/casConfig.js,"@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Config block which registers CAS-specific field types.
+ */
+angular.module('guacCAS').config(['formServiceProvider',
+        function guacCASConfig(formServiceProvider) {
+
+    // Define field for ticket from CAS service
+    formServiceProvider.registerFieldType(""GUAC_CAS_TICKET"", {
+        templateUrl   : '',
+        controller    : 'guacCASController',
+        module        : 'guacCAS'
+    });
+
+}]);
+
+/**
+ * Config block which augments the existing routing, providing special handling
+ * for the ""ticket="" fragments provided by OpenID Connect.
+ */
+angular.module('index').config(['$routeProvider','$windowProvider',
+        function indexRouteConfig($routeProvider,$windowProvider) {
+
+    var $window = $windowProvider.$get();
+    var curPath = $window.location.href;
+    var ticketPos = curPath.indexOf(""?ticket="") + 8;
+    var hashPos = curPath.indexOf(""#/"");
+    if (ticketPos > 0 && ticketPos < hashPos) {
+        var ticket = curPath.substring(ticketPos, hashPos);
+        var newPath = curPath.substring(0,ticketPos - 8) + '#/?ticket=' + ticket;
+        $window.location.href = newPath;","[{'comment': ""There is a more Angular-y way to accomplish this, rather than manually parsing everything, since Angular already has to do this when parsing the URL to handle its own routing.\r\n\r\nI'm actually not 100% positive this block of code will work as expected - it's a config block which doesn't actually do any configging. If you want an example of an approach which embraces Angular's own routing, take a peek at the WIP OpenID support:\r\n\r\nhttps://github.com/mike-jumper/incubator-guacamole-client/blob/9deaac26df8220efeca90a0c9f8e9bdde39c86ff/extensions/guacamole-auth-openid/src/main/resources/openidConfig.js#L34-L52\r\n\r\nI suspect that's what you were already looking at when you first started. ;)"", 'commenter': 'mike-jumper'}]"
121,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/form/CASTicketField.java,"@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.cas.form;
+
+import java.io.UnsupportedEncodingException;
+import java.math.BigInteger;
+import java.net.URLEncoder;
+import java.security.SecureRandom;
+import org.apache.guacamole.form.Field;
+
+
+/**
+ * Field definition which represents the ticket returned by an CAS service.
+ * Within the user interface, this will be rendered as an appropriate ""Log in
+ * with ..."" button which links to the CAS service.","[{'comment': '> Within the user interface, this will be rendered as an appropriate ""Log in with ..."" button which links to the CAS service.\r\n\r\nIs this the case? The code looks like it takes the user to the CAS service immediately. If it does take the user to the CAS service immediately ... should there be a button? What would be the ideal user experience?', 'commenter': 'mike-jumper'}]"
121,extensions/guacamole-auth-cas/src/main/resources/translations/en.json,"@@ -0,0 +1,7 @@
+{
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_TICKET"" : """"","[{'comment': ""What's the purpose of defining an empty translation string for the field header?"", 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/pom.xml,"@@ -0,0 +1,311 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-radius</artifactId>
+    <packaging>jar</packaging>
+    <version>0.9.11-incubating</version>
+    <name>guacamole-auth-radius</name>
+    <url>http://guacamole.incubator.apache.org/</url>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+
+            <!-- Written for 1.6 -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.3</version>
+                <configuration>
+                    <source>1.6</source>
+                    <target>1.6</target>
+                    <compilerArgs>
+                        <arg>-Xlint:all</arg>
+                        <arg>-Werror</arg>
+                    </compilerArgs>
+                    <fork>true</fork>
+                </configuration>
+            </plugin>
+
+            <!-- Pre-cache Angular templates with maven-angular-plugin -->
+            <plugin>
+                <groupId>com.keithbranton.mojo</groupId>
+                <artifactId>angular-maven-plugin</artifactId>
+                <version>0.3.2</version>
+                <executions>
+                    <execution>
+                        <phase>generate-resources</phase>
+                        <goals>
+                            <goal>html2js</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <configuration>
+                    <sourceDir>${basedir}/src/main/resources</sourceDir>
+                    <include>**/*.html</include>
+                    <target>${basedir}/src/main/resources/generated/templates-main/templates.js</target>
+                    <prefix>app/ext/radius</prefix>
+                </configuration>
+            </plugin>
+
+            <!-- JS/CSS Minification Plugin -->
+            <plugin>
+                <groupId>com.samaxes.maven</groupId>
+                <artifactId>minify-maven-plugin</artifactId>
+                <version>1.7.5</version>
+                <executions>
+                    <execution>
+                        <id>default-cli</id>
+                        <configuration>
+                            <charset>UTF-8</charset>
+
+                            <webappSourceDir>${basedir}/src/main/resources</webappSourceDir>
+                            <webappTargetDir>${project.build.directory}/classes</webappTargetDir>
+
+                            <cssSourceDir>/</cssSourceDir>
+                            <cssTargetDir>/</cssTargetDir>
+                            <cssFinalFile>radius.css</cssFinalFile>
+
+                            <cssSourceFiles>
+                                <cssSourceFile>license.txt</cssSourceFile>
+                            </cssSourceFiles>
+
+                            <cssSourceIncludes>
+                                <cssSourceInclude>**/*.css</cssSourceInclude>
+                            </cssSourceIncludes>
+
+                            <jsSourceDir>/</jsSourceDir>
+                            <jsTargetDir>/</jsTargetDir>
+                            <jsFinalFile>radius.js</jsFinalFile>
+
+                            <jsSourceFiles>
+                                <jsSourceFile>license.txt</jsSourceFile>
+                            </jsSourceFiles>
+
+                            <jsSourceIncludes>
+                                <jsSourceInclude>**/*.js</jsSourceInclude>
+                            </jsSourceIncludes>
+
+                            <!-- Do not minify and include tests -->
+                            <jsSourceExcludes>
+                                <jsSourceExclude>**/*.test.js</jsSourceExclude>
+                            </jsSourceExcludes>
+                            <jsEngine>CLOSURE</jsEngine>
+
+                            <!-- Disable warnings for JSDoc annotations -->
+                            <closureWarningLevels>
+                                <misplacedTypeAnnotation>OFF</misplacedTypeAnnotation>
+                                <nonStandardJsDocs>OFF</nonStandardJsDocs>
+                            </closureWarningLevels>
+
+                        </configuration>
+                        <goals>
+                            <goal>minify</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+
+            <!-- Assembly plugin - for easy distribution -->
+            <plugin>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>2.5.3</version>
+                <configuration>
+                    <finalName>${project.artifactId}-${project.version}</finalName>
+                    <appendAssemblyId>false</appendAssemblyId>
+                    <descriptors>
+                        <descriptor>src/main/assembly/dist.xml</descriptor>
+                    </descriptors>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>make-dist-archive</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Copy dependencies prior to packaging -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.10</version>
+                <executions>
+                    <execution>
+                        <id>unpack-dependencies</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>unpack-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <includeScope>runtime</includeScope>
+                            <outputDirectory>${project.build.directory}/classes</outputDirectory>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!--<plugin>","[{'comment': ""What's this commented-out `<plugin>` section about?"", 'commenter': 'mike-jumper'}, {'comment': ""One of the Maven items that gets pulled in is a signed JAR from org.bouncycastle.  The signature info gets pulled from that JAR into the radius authentication JAR, and then Tomcat balks at loading it because the signature does not match the new JAR file.  I was trying to figure out how to exclude the signature from the resulting JAR, and this was one of my attempts, but I can't quite figure out the best way to do it.  Any ideas?  Basically there are two files in the source JAR that need to be excluded from the JAR that gets built - BCKEY.SF and BCKEY.DSA."", 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/pom.xml,"@@ -0,0 +1,311 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-radius</artifactId>
+    <packaging>jar</packaging>
+    <version>0.9.11-incubating</version>
+    <name>guacamole-auth-radius</name>
+    <url>http://guacamole.incubator.apache.org/</url>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+
+            <!-- Written for 1.6 -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.3</version>
+                <configuration>
+                    <source>1.6</source>
+                    <target>1.6</target>
+                    <compilerArgs>
+                        <arg>-Xlint:all</arg>
+                        <arg>-Werror</arg>
+                    </compilerArgs>
+                    <fork>true</fork>
+                </configuration>
+            </plugin>
+
+            <!-- Pre-cache Angular templates with maven-angular-plugin -->
+            <plugin>
+                <groupId>com.keithbranton.mojo</groupId>
+                <artifactId>angular-maven-plugin</artifactId>
+                <version>0.3.2</version>
+                <executions>
+                    <execution>
+                        <phase>generate-resources</phase>
+                        <goals>
+                            <goal>html2js</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <configuration>
+                    <sourceDir>${basedir}/src/main/resources</sourceDir>
+                    <include>**/*.html</include>
+                    <target>${basedir}/src/main/resources/generated/templates-main/templates.js</target>
+                    <prefix>app/ext/radius</prefix>
+                </configuration>
+            </plugin>
+
+            <!-- JS/CSS Minification Plugin -->
+            <plugin>
+                <groupId>com.samaxes.maven</groupId>
+                <artifactId>minify-maven-plugin</artifactId>
+                <version>1.7.5</version>
+                <executions>
+                    <execution>
+                        <id>default-cli</id>
+                        <configuration>
+                            <charset>UTF-8</charset>
+
+                            <webappSourceDir>${basedir}/src/main/resources</webappSourceDir>
+                            <webappTargetDir>${project.build.directory}/classes</webappTargetDir>
+
+                            <cssSourceDir>/</cssSourceDir>
+                            <cssTargetDir>/</cssTargetDir>
+                            <cssFinalFile>radius.css</cssFinalFile>
+
+                            <cssSourceFiles>
+                                <cssSourceFile>license.txt</cssSourceFile>
+                            </cssSourceFiles>
+
+                            <cssSourceIncludes>
+                                <cssSourceInclude>**/*.css</cssSourceInclude>
+                            </cssSourceIncludes>
+
+                            <jsSourceDir>/</jsSourceDir>
+                            <jsTargetDir>/</jsTargetDir>
+                            <jsFinalFile>radius.js</jsFinalFile>
+
+                            <jsSourceFiles>
+                                <jsSourceFile>license.txt</jsSourceFile>
+                            </jsSourceFiles>
+
+                            <jsSourceIncludes>
+                                <jsSourceInclude>**/*.js</jsSourceInclude>
+                            </jsSourceIncludes>
+
+                            <!-- Do not minify and include tests -->
+                            <jsSourceExcludes>
+                                <jsSourceExclude>**/*.test.js</jsSourceExclude>
+                            </jsSourceExcludes>
+                            <jsEngine>CLOSURE</jsEngine>
+
+                            <!-- Disable warnings for JSDoc annotations -->
+                            <closureWarningLevels>
+                                <misplacedTypeAnnotation>OFF</misplacedTypeAnnotation>
+                                <nonStandardJsDocs>OFF</nonStandardJsDocs>
+                            </closureWarningLevels>
+
+                        </configuration>
+                        <goals>
+                            <goal>minify</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+
+            <!-- Assembly plugin - for easy distribution -->
+            <plugin>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>2.5.3</version>
+                <configuration>
+                    <finalName>${project.artifactId}-${project.version}</finalName>
+                    <appendAssemblyId>false</appendAssemblyId>
+                    <descriptors>
+                        <descriptor>src/main/assembly/dist.xml</descriptor>
+                    </descriptors>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>make-dist-archive</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Copy dependencies prior to packaging -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.10</version>
+                <executions>
+                    <execution>
+                        <id>unpack-dependencies</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>unpack-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <includeScope>runtime</includeScope>
+                            <outputDirectory>${project.build.directory}/classes</outputDirectory>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!--<plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.0.0</version>
+                <configuration>
+                    <createDependencyReducedPom>true</createDependencyReducedPom>
+                    <filters>
+                        <filter>
+                            <artifact>*:*</artifact>
+                            <excludes>
+                                <exclude>META-INF/*.SF</exclude>
+                                <exclude>META-INF/*.DSA</exclude>
+                                <exclude>META-INF/*.RSA</exclude>
+                            </excludes>
+                        </filter>
+                    </filters>
+                </configuration>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <transformers>
+                                <transformer implementation=""org.apache.maven.plugins.shade.resource.ServicesResourceTransformer""/>
+                                <transformer implementation=""org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"">
+                                    <mainClass>org.apache.guacamole.auth.radius.RadiusAuthenticationProvider</mainClass>
+                                </transformer>
+                            </transformers>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>-->
+
+            <!-- Verify format using Apache RAT -->
+            <plugin>
+                <groupId>org.apache.rat</groupId>
+                <artifactId>apache-rat-plugin</artifactId>
+                <version>0.12</version>
+
+                <configuration>
+                    <excludes>
+                        <exclude>**/*.json</exclude>
+                        <exclude>src/licenses/**/*</exclude>
+                        <exclude>src/main/resources/templates/*.html</exclude>
+                    </excludes>
+                </configuration>
+
+                <!-- Bind RAT to validate phase -->
+                <executions>
+                    <execution>
+                        <id>validate</id>
+                        <phase>validate</phase>
+                        <goals>
+                            <goal>check</goal>
+                        </goals>
+                    </execution>
+                </executions>
+
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <dependencies>
+
+        <!-- Guacamole Java API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-common</artifactId>
+            <version>0.9.10-incubating</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Guacamole Extension API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-ext</artifactId>
+            <version>0.9.11-incubating</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Guice -->
+        <dependency>
+            <groupId>com.google.inject</groupId>
+            <artifactId>guice</artifactId>
+            <version>3.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.google.inject.extensions</groupId>
+            <artifactId>guice-multibindings</artifactId>
+            <version>3.0</version>
+        </dependency>
+
+        <!-- Java servlet API -->
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>servlet-api</artifactId>
+            <version>2.5</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- JRadius Library -->
+        <!-- https://mvnrepository.com/artifact/net.jradius/jradius-core -->
+        <!--<dependency>","[{'comment': 'Here, too - is/was this needed? Why commented out?', 'commenter': 'mike-jumper'}, {'comment': 'It should be in there - I think I commented it out trying to figure out which dependency was causing my signature issues.  Should be fixed.  Also removed an explicit declaration of the BouncyCastle dependency, as JRadius handles that.', 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/pom.xml,"@@ -0,0 +1,311 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-radius</artifactId>
+    <packaging>jar</packaging>
+    <version>0.9.11-incubating</version>
+    <name>guacamole-auth-radius</name>
+    <url>http://guacamole.incubator.apache.org/</url>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+
+            <!-- Written for 1.6 -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.3</version>
+                <configuration>
+                    <source>1.6</source>
+                    <target>1.6</target>
+                    <compilerArgs>
+                        <arg>-Xlint:all</arg>
+                        <arg>-Werror</arg>
+                    </compilerArgs>
+                    <fork>true</fork>
+                </configuration>
+            </plugin>
+
+            <!-- Pre-cache Angular templates with maven-angular-plugin -->
+            <plugin>
+                <groupId>com.keithbranton.mojo</groupId>
+                <artifactId>angular-maven-plugin</artifactId>
+                <version>0.3.2</version>
+                <executions>
+                    <execution>
+                        <phase>generate-resources</phase>
+                        <goals>
+                            <goal>html2js</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <configuration>
+                    <sourceDir>${basedir}/src/main/resources</sourceDir>
+                    <include>**/*.html</include>
+                    <target>${basedir}/src/main/resources/generated/templates-main/templates.js</target>
+                    <prefix>app/ext/radius</prefix>
+                </configuration>
+            </plugin>
+
+            <!-- JS/CSS Minification Plugin -->
+            <plugin>
+                <groupId>com.samaxes.maven</groupId>
+                <artifactId>minify-maven-plugin</artifactId>
+                <version>1.7.5</version>
+                <executions>
+                    <execution>
+                        <id>default-cli</id>
+                        <configuration>
+                            <charset>UTF-8</charset>
+
+                            <webappSourceDir>${basedir}/src/main/resources</webappSourceDir>
+                            <webappTargetDir>${project.build.directory}/classes</webappTargetDir>
+
+                            <cssSourceDir>/</cssSourceDir>
+                            <cssTargetDir>/</cssTargetDir>
+                            <cssFinalFile>radius.css</cssFinalFile>
+
+                            <cssSourceFiles>
+                                <cssSourceFile>license.txt</cssSourceFile>
+                            </cssSourceFiles>
+
+                            <cssSourceIncludes>
+                                <cssSourceInclude>**/*.css</cssSourceInclude>
+                            </cssSourceIncludes>
+
+                            <jsSourceDir>/</jsSourceDir>
+                            <jsTargetDir>/</jsTargetDir>
+                            <jsFinalFile>radius.js</jsFinalFile>
+
+                            <jsSourceFiles>
+                                <jsSourceFile>license.txt</jsSourceFile>
+                            </jsSourceFiles>
+
+                            <jsSourceIncludes>
+                                <jsSourceInclude>**/*.js</jsSourceInclude>
+                            </jsSourceIncludes>
+
+                            <!-- Do not minify and include tests -->
+                            <jsSourceExcludes>
+                                <jsSourceExclude>**/*.test.js</jsSourceExclude>
+                            </jsSourceExcludes>
+                            <jsEngine>CLOSURE</jsEngine>
+
+                            <!-- Disable warnings for JSDoc annotations -->
+                            <closureWarningLevels>
+                                <misplacedTypeAnnotation>OFF</misplacedTypeAnnotation>
+                                <nonStandardJsDocs>OFF</nonStandardJsDocs>
+                            </closureWarningLevels>
+
+                        </configuration>
+                        <goals>
+                            <goal>minify</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+
+            <!-- Assembly plugin - for easy distribution -->
+            <plugin>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>2.5.3</version>
+                <configuration>
+                    <finalName>${project.artifactId}-${project.version}</finalName>
+                    <appendAssemblyId>false</appendAssemblyId>
+                    <descriptors>
+                        <descriptor>src/main/assembly/dist.xml</descriptor>
+                    </descriptors>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>make-dist-archive</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Copy dependencies prior to packaging -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.10</version>
+                <executions>
+                    <execution>
+                        <id>unpack-dependencies</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>unpack-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <includeScope>runtime</includeScope>
+                            <outputDirectory>${project.build.directory}/classes</outputDirectory>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!--<plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.0.0</version>
+                <configuration>
+                    <createDependencyReducedPom>true</createDependencyReducedPom>
+                    <filters>
+                        <filter>
+                            <artifact>*:*</artifact>
+                            <excludes>
+                                <exclude>META-INF/*.SF</exclude>
+                                <exclude>META-INF/*.DSA</exclude>
+                                <exclude>META-INF/*.RSA</exclude>
+                            </excludes>
+                        </filter>
+                    </filters>
+                </configuration>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <transformers>
+                                <transformer implementation=""org.apache.maven.plugins.shade.resource.ServicesResourceTransformer""/>
+                                <transformer implementation=""org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"">
+                                    <mainClass>org.apache.guacamole.auth.radius.RadiusAuthenticationProvider</mainClass>
+                                </transformer>
+                            </transformers>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>-->
+
+            <!-- Verify format using Apache RAT -->
+            <plugin>
+                <groupId>org.apache.rat</groupId>
+                <artifactId>apache-rat-plugin</artifactId>
+                <version>0.12</version>
+
+                <configuration>
+                    <excludes>
+                        <exclude>**/*.json</exclude>
+                        <exclude>src/licenses/**/*</exclude>
+                        <exclude>src/main/resources/templates/*.html</exclude>
+                    </excludes>
+                </configuration>
+
+                <!-- Bind RAT to validate phase -->
+                <executions>
+                    <execution>
+                        <id>validate</id>
+                        <phase>validate</phase>
+                        <goals>
+                            <goal>check</goal>
+                        </goals>
+                    </execution>
+                </executions>
+
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <dependencies>
+
+        <!-- Guacamole Java API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-common</artifactId>
+            <version>0.9.10-incubating</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Guacamole Extension API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-ext</artifactId>
+            <version>0.9.11-incubating</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Guice -->
+        <dependency>
+            <groupId>com.google.inject</groupId>
+            <artifactId>guice</artifactId>
+            <version>3.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.google.inject.extensions</groupId>
+            <artifactId>guice-multibindings</artifactId>
+            <version>3.0</version>
+        </dependency>
+
+        <!-- Java servlet API -->
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>servlet-api</artifactId>
+            <version>2.5</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- JRadius Library -->
+        <!-- https://mvnrepository.com/artifact/net.jradius/jradius-core -->
+        <!--<dependency>
+            <groupId>net.jradius</groupId>
+            <artifactId>jradius-core</artifactId>
+            <version>1.1.5</version>
+        </dependency>-->
+
+        <!-- https://mvnrepository.com/artifact/net.jradius/jradius-dictionary -->","[{'comment': ""Providing a link to `mvnrepository.com` doesn't really provide any information beyond the Maven coordinates already within the `<dependency>` block. Your previous commented-out dependency used the human-readable title of the dependency being pulled in, as do most of the other `<dependency>` blocks in the Guacamole codebase. Why not do the same here (and below)?"", 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/src/licenses/LICENSE,"@@ -0,0 +1,274 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      ""License"" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      ""Licensor"" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      ""Legal Entity"" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      ""control"" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      ""You"" (or ""Your"") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      ""Source"" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      ""Object"" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      ""Work"" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      ""Derivative Works"" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      ""Contribution"" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, ""submitted""
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as ""Not a Contribution.""
+
+      ""Contributor"" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a ""NOTICE"" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an ""AS IS"" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets ""[]""
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same ""printed page"" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the ""License"");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an ""AS IS"" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+
+==============================================================================
+
+APACHE GUACAMOLE SUBCOMPONENTS
+
+Apache Guacamole includes a number of subcomponents with separate copyright
+notices and license terms. Your use of these subcomponents is subject to the
+terms and conditions of the following licenses.
+
+
+AOP Alliance (http://aopalliance.sourceforge.net/)
+--------------------------------------------------
+
+    Version: 1.0
+    From: 'AOP Alliance' (http://aopalliance.sourceforge.net/members.html)
+    License(s):
+        Public Domain (bundled/aopalliance-1.0/LICENSE)
+
+
+DuoWeb Java SDK (https://github.com/duosecurity/duo_java)","[{'comment': ""This is presumably not part of the bundled contents of this extension. JRadius and Bouncy Castle are, though, and will need to be included here in the same way. I'll take a look through the bundled contents of the extension to be sure ... there are likely transitive dependencies of both of those that get bundled, as well. We'll ultimately need to list all that here, and include copies of the licenses themselves for reference.\r\n\r\nHave you confirmed the licenses of those dependencies?\r\n\r\nLet me know if you need clarification on this. It took us quite a while to walk through the entirety of guac when doing this for the first time."", 'commenter': 'mike-jumper'}, {'comment': ""I believe I've got all of these added."", 'commenter': 'necouchman'}, {'comment': ""...and removed the ones that don't need to be there..."", 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -0,0 +1,223 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Arrays;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.guacamole.auth.radius.user.AuthenticatedUser;
+import org.apache.guacamole.auth.radius.form.RadiusChallengeResponseField;
+import org.apache.guacamole.auth.radius.form.RadiusStateField;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.dictionary.Attr_State;
+import net.jradius.exception.UnknownAttributeException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessAccept;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.AccessReject;
+import net.jradius.packet.AccessRequest;
+import net.jradius.packet.AccessResponse;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+
+/**
+ * Service providing convenience functions for the RADIUS AuthenticationProvider
+ * implementation.
+ *
+ * @author Michael Jumper
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+
+    /**
+     * Service for creating and managing connections to RADIUS servers.
+     */
+    @Inject
+    private RadiusConnectionService radiusService;
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<AuthenticatedUser> authenticatedUserProvider;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+
+        // Grab the HTTP Request from the credentials object
+        HttpServletRequest request = credentials.getRequest();
+
+        // Set up RadiusPacket object
+        RadiusPacket radPack;
+
+        // Ignore anonymous users
+        if (credentials.getUsername() == null || credentials.getUsername().isEmpty())
+            return null;
+
+        // Password is required
+        if (credentials.getPassword() == null || credentials.getPassword().isEmpty())
+            return null;
+
+        String challengeResponse = request.getParameter(RadiusChallengeResponseField.PARAMETER_NAME);
+        String radiusState = request.getParameter(RadiusStateField.PARAMETER_NAME);
+
+        // We do not have a challenge response, so we proceed normally
+        if (challengeResponse == null || challengeResponse.isEmpty()) {
+
+            // Initialize Radius Packet and try to authenticate
+            try {
+                radPack = radiusService.authenticate(credentials.getUsername(),
+                                                credentials.getPassword());
+            }
+            catch (GuacamoleException e) {
+                logger.error(""Cannot configure RADIUS server: {}"", e.getMessage());
+                logger.debug(""Error configuring RADIUS server."", e);
+                radPack = null;
+            }
+
+            // If configure fails, permission to login is denied
+            if (radPack == null) {
+                logger.debug(""Nothing in the RADIUS packet."");
+                throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
+            }
+
+            // If we get back an AccessReject packet, login is denied.
+            else if (radPack instanceof AccessReject) {
+                logger.debug(""Login has been rejected by RADIUS server."");
+                throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
+            }
+
+            /**
+             * If we receive an AccessChallenge package, the server needs more information -
+             * We create a new form/field with the challenge message.
+             */
+            else if (radPack instanceof AccessChallenge) {","[{'comment': ""I'm having a hard time wading through this chunk of code. There's an awful lot going on here, and not much explanation of the why.\r\n\r\nCould this be organized and commented in a way that makes the logic reasonably verifiable?\r\n\r\nPerhaps the core logic could be divided into sensible functions? Or separated into a RADIUS-specific service class?"", 'commenter': 'mike-jumper'}, {'comment': ""I took a stab and cleaning this up - let me know if it's better, now, or if you still think I should split stuff out into multiple functions.  I'm did move some of the logic over to the RadiusConnection class prior to this, so it's better than it was, but I can look at ways to clean it up more, if needed."", 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/ConfigurationService.java,"@@ -0,0 +1,223 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import java.util.Collections;
+import java.util.List;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+
+/**
+ * Service for retrieving configuration information regarding the RADIUS server.
+ *
+ * @author Michael Jumper
+ */
+public class ConfigurationService {
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * Returns the hostname of the RADIUS server as configured with
+     * guacamole.properties. By default, this will be ""localhost"".
+     *
+     * @return
+     *     The hostname of the RADIUS server, as configured with
+     *     guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getRadiusServer() throws GuacamoleException {
+        return environment.getProperty(
+            RadiusGuacamoleProperties.RADIUS_SERVER,
+            ""localhost""
+        );
+    }
+
+    /**
+     * Returns the authentication port of the RADIUS server configured with
+     * guacamole.properties.
+     *
+     * @return
+     *     The authentication port of the RADIUS server, as configured with
+     *     guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public int getRadiusAuthPort() throws GuacamoleException {
+        return environment.getProperty(
+            RadiusGuacamoleProperties.RADIUS_AUTH_PORT,
+            1812
+        );
+    }
+
+    /**
+     * Returns the accounting port of the RADIUS server configured with
+     * guacamole.properties. 
+     *
+     * @return
+     *     The accouting port of the RADIUS server, as configured with
+     *     guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public int getRadiusAcctPort() throws GuacamoleException {
+        return environment.getProperty(
+            RadiusGuacamoleProperties.RADIUS_ACCT_PORT,
+            1813
+        );
+    }
+
+    /**
+     * Returns the shared secret of the RADIUS server configured with
+     * guacamole.properties. 
+     *
+     * @return
+     *     The shared secret of the RADIUS server, as configured with
+     *     guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getRadiusSharedSecret() throws GuacamoleException {
+        return environment.getProperty(
+            RadiusGuacamoleProperties.RADIUS_SHARED_SECRET,
+            null
+        );
+    }
+
+    /**
+     * Returns the authentication protocol of the RADIUS server
+     * from guacamole.properties.
+     *
+     * @return
+     *     The authentication protocol of the RADIUS server, 
+     *     from guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getRadiusAuthProtocol() throws GuacamoleException {
+        return environment.getProperty(
+            RadiusGuacamoleProperties.RADIUS_AUTH_PROTOCOL,
+            null
+        );
+    }
+
+    /**
+     * Returns the number of retries for connecting to the RADIUS server
+     * from guacamole.properties.
+     *
+     * @return
+     *     The number of retries for connection to the RADIUS server,
+     *     from guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public int getRadiusRetries() throws GuacamoleException {
+        return environment.getProperty(
+            RadiusGuacamoleProperties.RADIUS_RETRIES,
+            5
+        );
+    }
+
+    /**
+     * Returns the timeout for connecting to the RADIUS server
+     * from guacamole.properties.
+     *
+     * @return
+     *     The timeout for connection to the RADIUS server,
+     *     from guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public int getRadiusTimeout() throws GuacamoleException {
+        return environment.getProperty(
+            RadiusGuacamoleProperties.RADIUS_TIMEOUT,
+            60
+        );
+    }
+
+    public String getRadiusCAFile() throws GuacamoleException {","[{'comment': 'This and other functions here: missing JavaDoc comment.', 'commenter': 'mike-jumper'}, {'comment': 'Added.', 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusGuacamoleProperties.java,"@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import org.apache.guacamole.properties.BooleanGuacamoleProperty;
+import org.apache.guacamole.properties.IntegerGuacamoleProperty;
+import org.apache.guacamole.properties.StringGuacamoleProperty;
+
+
+/**
+ * Provides properties required for use of the RADIUS authentication provider.
+ * These properties will be read from guacamole.properties when the RADIUS
+ * authentication provider is used.
+ *
+ * @author Michael Jumper
+ */
+public class RadiusGuacamoleProperties {
+
+    /**
+     * This class should not be instantiated.
+     */
+    private RadiusGuacamoleProperties() {}
+
+    /**
+     * The port on the RADIUS server to connect to when authenticating users.
+     */
+    public static final IntegerGuacamoleProperty RADIUS_AUTH_PORT = new IntegerGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""radius-auth-port""; }
+
+    };
+
+    /**
+     * The port on the RADIUS server to connect to when accounting users.
+     */
+    public static final IntegerGuacamoleProperty RADIUS_ACCT_PORT = new IntegerGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""radius-acct-port""; }
+
+    };
+
+
+    /**
+     * The hostname or ip of the RADIUS server to connect to when authenticating users.
+     */
+    public static final StringGuacamoleProperty RADIUS_SERVER = new StringGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""radius-server""; }
+
+    };
+
+    /**
+     * The shared secret of the RADIUS server to connect to when authenticating users.
+     */
+    public static final StringGuacamoleProperty RADIUS_SHARED_SECRET = new StringGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""radius-shared-secret""; }
+
+    };
+
+    /**
+     * The authentication protocol of the RADIUS server to connect to when authenticating users.
+     */
+    public static final StringGuacamoleProperty RADIUS_AUTH_PROTOCOL = new StringGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""radius-auth-protocol""; }
+
+    };
+
+    /**
+     * The number of retries when attempting a radius packet transaction.
+     */
+    public static final IntegerGuacamoleProperty RADIUS_RETRIES = new IntegerGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""radius-retries""; }
+
+    };
+
+    /**
+     * The network timeout when attempting a radius packet transaction.
+     */
+    public static final IntegerGuacamoleProperty RADIUS_TIMEOUT = new IntegerGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""radius-timeout""; }
+
+    };
+
+    public static final StringGuacamoleProperty RADIUS_CA_FILE = new StringGuacamoleProperty() {","[{'comment': 'Missing JavaDoc.', 'commenter': 'mike-jumper'}, {'comment': 'Added.', 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/form/RadiusChallengeResponseField.java,"@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius.form;
+
+import org.apache.guacamole.form.Field;
+import org.codehaus.jackson.annotate.JsonProperty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class RadiusChallengeResponseField extends Field {","[{'comment': 'Missing JavaDoc.', 'commenter': 'mike-jumper'}, {'comment': 'Added.', 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -0,0 +1,223 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Arrays;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.guacamole.auth.radius.user.AuthenticatedUser;
+import org.apache.guacamole.auth.radius.form.RadiusChallengeResponseField;
+import org.apache.guacamole.auth.radius.form.RadiusStateField;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.dictionary.Attr_State;
+import net.jradius.exception.UnknownAttributeException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessAccept;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.AccessReject;
+import net.jradius.packet.AccessRequest;
+import net.jradius.packet.AccessResponse;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+
+/**
+ * Service providing convenience functions for the RADIUS AuthenticationProvider
+ * implementation.
+ *
+ * @author Michael Jumper
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+
+    /**
+     * Service for creating and managing connections to RADIUS servers.
+     */
+    @Inject
+    private RadiusConnectionService radiusService;
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<AuthenticatedUser> authenticatedUserProvider;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+
+        // Grab the HTTP Request from the credentials object
+        HttpServletRequest request = credentials.getRequest();
+
+        // Set up RadiusPacket object
+        RadiusPacket radPack;
+
+        // Ignore anonymous users
+        if (credentials.getUsername() == null || credentials.getUsername().isEmpty())
+            return null;
+
+        // Password is required
+        if (credentials.getPassword() == null || credentials.getPassword().isEmpty())
+            return null;
+
+        String challengeResponse = request.getParameter(RadiusChallengeResponseField.PARAMETER_NAME);
+        String radiusState = request.getParameter(RadiusStateField.PARAMETER_NAME);
+
+        // We do not have a challenge response, so we proceed normally
+        if (challengeResponse == null || challengeResponse.isEmpty()) {
+
+            // Initialize Radius Packet and try to authenticate
+            try {
+                radPack = radiusService.authenticate(credentials.getUsername(),
+                                                credentials.getPassword());
+            }
+            catch (GuacamoleException e) {
+                logger.error(""Cannot configure RADIUS server: {}"", e.getMessage());
+                logger.debug(""Error configuring RADIUS server."", e);
+                radPack = null;
+            }
+
+            // If configure fails, permission to login is denied
+            if (radPack == null) {
+                logger.debug(""Nothing in the RADIUS packet."");
+                throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
+            }
+
+            // If we get back an AccessReject packet, login is denied.
+            else if (radPack instanceof AccessReject) {
+                logger.debug(""Login has been rejected by RADIUS server."");
+                throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
+            }
+
+            /**
+             * If we receive an AccessChallenge package, the server needs more information -","[{'comment': ""This is a JavaDoc-style block comment, and shouldn't be used except when actually meant as JavaDoc (ie: for a function, property, class, etc.). In any case, the defacto-style of Java and JavaScript in this codebase is to not use block comments at all; you'll want to just use normal `//` for each line."", 'commenter': 'mike-jumper'}, {'comment': 'Cleaned this up, made it a standard comment.', 'commenter': 'necouchman'}]"
122,extensions/guacamole-auth-radius/src/licenses/LICENSE,"@@ -0,0 +1,255 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      ""License"" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      ""Licensor"" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      ""Legal Entity"" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      ""control"" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      ""You"" (or ""Your"") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      ""Source"" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      ""Object"" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      ""Work"" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      ""Derivative Works"" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      ""Contribution"" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, ""submitted""
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as ""Not a Contribution.""
+
+      ""Contributor"" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a ""NOTICE"" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an ""AS IS"" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets ""[]""
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same ""printed page"" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the ""License"");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an ""AS IS"" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+
+==============================================================================
+
+APACHE GUACAMOLE SUBCOMPONENTS
+
+Apache Guacamole includes a number of subcomponents with separate copyright
+notices and license terms. Your use of these subcomponents is subject to the
+terms and conditions of the following licenses.
+
+
+AOP Alliance (http://aopalliance.sourceforge.net/)
+--------------------------------------------------
+
+    Version: 1.0
+    From: 'AOP Alliance' (http://aopalliance.sourceforge.net/members.html)
+    License(s):
+        Public Domain (bundled/aopalliance-1.0/LICENSE)
+
+
+JRadius (https://github.com/coova/jradius)","[{'comment': 'Licenses of dependencies should be listed in alphabetical order.\r\n\r\nBUT ... we may want to open of a thread to clarify everything (see other comment below).', 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/licenses/bundled/README,"@@ -0,0 +1,4 @@
+Apache Guacamole includes a number of subcomponents with separate copyright
+notices and license terms. Your use of these subcomponents is subject to the","[{'comment': '> ... Your use of these subcomponents is subject to the terms and conditions of their respective licenses\r\n\r\nThis may actually not be correct here because of the LGPL dependency. My understanding is that the LGPL is ""Category X"" primarily because it imposes restrictions on larger works, thus this extension would be under additional restrictions imposed by the LGPL once built in binary form (hence why we can\'t distribute those binaries as a project).\r\n\r\nPerhaps this is worth opening a thread in the Incubator general list for guidance - someone likely has dealt with this before, but I think I\'m officially out of my element. My best guess would be:\r\n\r\n1. We can\'t distribute binaries of this (as we already expect)\r\n2. We shouldn\'t include the `src/licenses/...` stuff which we normally include, since that\'s not technically correct in this case\r\n3. Rather than building a `.tar.gz` which contains all the licenses of all bundled dependencies alongside the `.jar`, unless other things will be in that `.tar.gz`, we may just want to restrict the build to the `.jar`.', 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -0,0 +1,224 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Arrays;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.guacamole.auth.radius.user.AuthenticatedUser;
+import org.apache.guacamole.auth.radius.form.RadiusChallengeResponseField;
+import org.apache.guacamole.auth.radius.form.RadiusStateField;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.dictionary.Attr_State;
+import net.jradius.dictionary.Attr_ReplyMessage;
+import net.jradius.exception.UnknownAttributeException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessAccept;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.AccessReject;
+import net.jradius.packet.AccessRequest;
+import net.jradius.packet.AccessResponse;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+
+/**
+ * Service providing convenience functions for the RADIUS AuthenticationProvider
+ * implementation.
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+
+    /**
+     * Service for creating and managing connections to RADIUS servers.
+     */
+    @Inject
+    private RadiusConnectionService radiusService;
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<AuthenticatedUser> authenticatedUserProvider;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+
+        // Grab the HTTP Request from the credentials object
+        HttpServletRequest request = credentials.getRequest();
+
+        // Set up RadiusPacket object
+        RadiusPacket radPack;
+
+        // Ignore anonymous users
+        if (credentials.getUsername() == null || credentials.getUsername().isEmpty())
+            return null;
+
+        // Password is required
+        if (credentials.getPassword() == null || credentials.getPassword().isEmpty())
+            return null;
+
+        // Try to get parameters to see if this is a post-challenge attempt
+        String challengeResponse = request.getParameter(RadiusChallengeResponseField.PARAMETER_NAME);
+        String radiusState = request.getParameter(RadiusStateField.PARAMETER_NAME);
+
+        // We do not have a challenge response, so we proceed normally
+        if (challengeResponse == null || challengeResponse.isEmpty()) {","[{'comment': 'So the empty string is not a legitimate value?', 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -0,0 +1,224 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Arrays;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.guacamole.auth.radius.user.AuthenticatedUser;
+import org.apache.guacamole.auth.radius.form.RadiusChallengeResponseField;
+import org.apache.guacamole.auth.radius.form.RadiusStateField;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.dictionary.Attr_State;
+import net.jradius.dictionary.Attr_ReplyMessage;
+import net.jradius.exception.UnknownAttributeException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessAccept;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.AccessReject;
+import net.jradius.packet.AccessRequest;
+import net.jradius.packet.AccessResponse;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+
+/**
+ * Service providing convenience functions for the RADIUS AuthenticationProvider
+ * implementation.
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+
+    /**
+     * Service for creating and managing connections to RADIUS servers.
+     */
+    @Inject
+    private RadiusConnectionService radiusService;
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<AuthenticatedUser> authenticatedUserProvider;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+
+        // Grab the HTTP Request from the credentials object
+        HttpServletRequest request = credentials.getRequest();
+
+        // Set up RadiusPacket object
+        RadiusPacket radPack;
+
+        // Ignore anonymous users
+        if (credentials.getUsername() == null || credentials.getUsername().isEmpty())
+            return null;
+
+        // Password is required
+        if (credentials.getPassword() == null || credentials.getPassword().isEmpty())
+            return null;
+
+        // Try to get parameters to see if this is a post-challenge attempt
+        String challengeResponse = request.getParameter(RadiusChallengeResponseField.PARAMETER_NAME);
+        String radiusState = request.getParameter(RadiusStateField.PARAMETER_NAME);","[{'comment': 'This value is overwritten later dependent on the type of `radPack`, which is somewhat twisted logic. Perhaps things can be ordered such that the proper value is always pulled, regardless of source, rather than from both and discarding one?', 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -0,0 +1,224 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Arrays;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.guacamole.auth.radius.user.AuthenticatedUser;
+import org.apache.guacamole.auth.radius.form.RadiusChallengeResponseField;
+import org.apache.guacamole.auth.radius.form.RadiusStateField;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.dictionary.Attr_State;
+import net.jradius.dictionary.Attr_ReplyMessage;
+import net.jradius.exception.UnknownAttributeException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessAccept;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.AccessReject;
+import net.jradius.packet.AccessRequest;
+import net.jradius.packet.AccessResponse;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+
+/**
+ * Service providing convenience functions for the RADIUS AuthenticationProvider
+ * implementation.
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+
+    /**
+     * Service for creating and managing connections to RADIUS servers.
+     */
+    @Inject
+    private RadiusConnectionService radiusService;
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<AuthenticatedUser> authenticatedUserProvider;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+
+        // Grab the HTTP Request from the credentials object
+        HttpServletRequest request = credentials.getRequest();
+
+        // Set up RadiusPacket object
+        RadiusPacket radPack;
+
+        // Ignore anonymous users
+        if (credentials.getUsername() == null || credentials.getUsername().isEmpty())
+            return null;
+
+        // Password is required
+        if (credentials.getPassword() == null || credentials.getPassword().isEmpty())
+            return null;
+
+        // Try to get parameters to see if this is a post-challenge attempt
+        String challengeResponse = request.getParameter(RadiusChallengeResponseField.PARAMETER_NAME);
+        String radiusState = request.getParameter(RadiusStateField.PARAMETER_NAME);
+
+        // We do not have a challenge response, so we proceed normally
+        if (challengeResponse == null || challengeResponse.isEmpty()) {
+
+            // Initialize Radius Packet and try to authenticate
+            try {
+                radPack = radiusService.authenticate(credentials.getUsername(),
+                                                credentials.getPassword());
+            }
+            catch (GuacamoleException e) {
+                logger.error(""Cannot configure RADIUS server: {}"", e.getMessage());
+                logger.debug(""Error configuring RADIUS server."", e);
+                radPack = null;","[{'comment': 'This will result in ""Nothing in RADIUS packet."" being erroneously logged.', 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -0,0 +1,394 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.security.NoSuchAlgorithmException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.client.RadiusClient;
+import net.jradius.exception.RadiusException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessRequest;
+import net.jradius.dictionary.*;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+import net.jradius.client.auth.EAPTLSAuthenticator;
+import net.jradius.client.auth.EAPTTLSAuthenticator;
+import net.jradius.client.auth.RadiusAuthenticator;
+import net.jradius.client.auth.PEAPAuthenticator;
+import net.jradius.packet.attribute.AttributeFactory;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.RadiusResponse;
+
+/**
+ * Service for creating and managing connections to RADIUS servers.
+ */
+public class RadiusConnectionService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RadiusConnectionService.class);
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    /**
+     * The RADIUS client;
+     */
+    private RadiusClient radiusClient;
+
+    /**
+     * Creates a new instance of RadiusConnection, configured with parameters
+     * from guacamole.properties.
+     *
+     * @return
+     *     A new RadiusConnection instance which has already been configured 
+     *     with parameters from guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while parsing guacamole.properties, or if the
+     *     requested encryption method is actually not implemented (a bug).
+     */
+    private void createRadiusConnection() {
+
+        // Create the RADIUS client with the configuration parameters
+        try {
+            radiusClient = new RadiusClient(InetAddress.getByName(confService.getRadiusServer()),
+                                            confService.getRadiusSharedSecret(),
+                                            confService.getRadiusAuthPort(),
+                                            confService.getRadiusAcctPort(),
+                                            confService.getRadiusTimeout());
+        }
+        catch (GuacamoleException e) {
+            logger.error(""Unable to initialize RADIUS client: {}"", e.getMessage());
+            logger.debug(""Failed to init RADIUS client."", e);
+            return;
+        }
+        catch (UnknownHostException e) {
+            logger.error(""Unable to resolve host: {}"", e.getMessage());
+            logger.debug(""Failed to resolve host."", e);
+            return;
+        }
+        catch (IOException e) {
+            logger.error(""Unable to communicate with host: {}"", e.getMessage());
+            logger.debug(""Failed to communicate with host."", e);
+            return;
+        }
+
+    }
+
+    /**
+     * Creates a new instance of RadiusAuthentictor, configured with
+     * parameters specified within guacamole.properties.
+     *
+     * @return
+     *     A new RadiusAuthenticator instance which has been configured
+     *     with parameters from guacamole.properties, or null if
+     *     configuration fails.
+     *
+     */
+    private RadiusAuthenticator setupRadiusAuthenticator() {
+
+        // If we don't have a radiusClient object, yet, don't go any further.
+        if (radiusClient == null) {
+            logger.error(""RADIUS client hasn't been set up, yet."");
+            logger.debug(""We can't run this method until the RADIUS client has been set up."");
+            return null;
+        }
+
+        String radAuthName;
+        String caFile;
+        String caPassword;
+        String caType;
+        String keyFile;
+        String keyPassword;
+        String keyType;
+        Boolean trustAll;
+        String innerProtocol;
+        LocalEnvironment guacEnv;
+        String basePath;
+
+        // Pull configuration parameters from guacamole.properties
+        try {
+            guacEnv = new LocalEnvironment();
+            basePath = guacEnv.getGuacamoleHome().getAbsolutePath() + '/';
+            radAuthName = confService.getRadiusAuthProtocol();
+            caFile = confService.getRadiusCAFile();
+            caPassword = confService.getRadiusCAPassword();
+            caType = confService.getRadiusCAType();
+            keyFile = confService.getRadiusKeyFile();
+            keyPassword = confService.getRadiusKeyPassword();
+            keyType = confService.getRadiusKeyType();
+            trustAll = confService.getRadiusTrustAll();
+            innerProtocol = confService.getRadiusEAPTTLSInnerProtocol();
+            
+        }
+        catch (GuacamoleException e) {
+            logger.error(""Error retrieving configuration."");
+            logger.debug(""Error getting config parameters from file."");
+            return null;
+        }
+
+        RadiusAuthenticator radAuth = radiusClient.getAuthProtocol(radAuthName);
+        if (radAuth == null)
+            return null;
+
+        // If we're using any of the TLS protocols, we need to configure them
+        if (radAuth instanceof PEAPAuthenticator || 
+            radAuth instanceof EAPTLSAuthenticator || 
+            radAuth instanceof EAPTTLSAuthenticator) {
+
+            if (caFile != null && !caFile.isEmpty())
+                ((EAPTLSAuthenticator)radAuth).setCaFile(basePath + caFile);
+
+            if (caType != null && !caType.isEmpty())
+                ((EAPTLSAuthenticator)radAuth).setCaFileType(caType);
+
+            if (caPassword != null && !caPassword.isEmpty())
+                ((EAPTLSAuthenticator)radAuth).setCaPassword(caPassword);
+
+            if (keyFile != null && !keyFile.isEmpty())
+                ((EAPTLSAuthenticator)radAuth).setKeyFile(basePath + keyFile);
+
+            if (keyType != null && !keyType.isEmpty())
+                ((EAPTLSAuthenticator)radAuth).setKeyFileType(keyType);
+
+            if (keyPassword != null && !keyPassword.isEmpty())
+                ((EAPTLSAuthenticator)radAuth).setKeyPassword(keyPassword);
+
+            ((EAPTLSAuthenticator)radAuth).setTrustAll(trustAll);
+
+        }
+
+        // If we're using EAP-TTLS, we need to define tunneled protocol
+        if (radAuth instanceof EAPTTLSAuthenticator) {
+
+            if (innerProtocol == null || innerProtocol.isEmpty())
+                return null;
+
+            ((EAPTTLSAuthenticator)radAuth).setInnerProtocol(innerProtocol);
+
+        }
+
+        return radAuth;
+
+    }
+
+    /**
+     * Authenticate to the RADIUS server and return the response from the
+     * server.
+     *
+     * @param username
+     *     The username for authentication.
+     * @param password
+     *     The password for authentication.
+     *
+     * @return
+     *     A RadiusPacket with the response of the server.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while talking to the server. 
+     */
+    public RadiusPacket authenticate(String username, String password) 
+            throws GuacamoleException {
+
+        // Create the connection and load the attribute dictionary
+	createRadiusConnection();","[{'comment': 'Wonky indentation.', 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -0,0 +1,394 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.security.NoSuchAlgorithmException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.client.RadiusClient;
+import net.jradius.exception.RadiusException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessRequest;
+import net.jradius.dictionary.*;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+import net.jradius.client.auth.EAPTLSAuthenticator;
+import net.jradius.client.auth.EAPTTLSAuthenticator;
+import net.jradius.client.auth.RadiusAuthenticator;
+import net.jradius.client.auth.PEAPAuthenticator;
+import net.jradius.packet.attribute.AttributeFactory;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.RadiusResponse;
+
+/**
+ * Service for creating and managing connections to RADIUS servers.
+ */
+public class RadiusConnectionService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RadiusConnectionService.class);
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    /**
+     * The RADIUS client;
+     */
+    private RadiusClient radiusClient;
+
+    /**
+     * Creates a new instance of RadiusConnection, configured with parameters
+     * from guacamole.properties.
+     *
+     * @return
+     *     A new RadiusConnection instance which has already been configured 
+     *     with parameters from guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while parsing guacamole.properties, or if the
+     *     requested encryption method is actually not implemented (a bug).
+     */
+    private void createRadiusConnection() {
+
+        // Create the RADIUS client with the configuration parameters
+        try {
+            radiusClient = new RadiusClient(InetAddress.getByName(confService.getRadiusServer()),
+                                            confService.getRadiusSharedSecret(),
+                                            confService.getRadiusAuthPort(),
+                                            confService.getRadiusAcctPort(),
+                                            confService.getRadiusTimeout());
+        }
+        catch (GuacamoleException e) {
+            logger.error(""Unable to initialize RADIUS client: {}"", e.getMessage());
+            logger.debug(""Failed to init RADIUS client."", e);
+            return;","[{'comment': 'Each of these is an unnecessary `return`.', 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -0,0 +1,394 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.security.NoSuchAlgorithmException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.client.RadiusClient;
+import net.jradius.exception.RadiusException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessRequest;
+import net.jradius.dictionary.*;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+import net.jradius.client.auth.EAPTLSAuthenticator;
+import net.jradius.client.auth.EAPTTLSAuthenticator;
+import net.jradius.client.auth.RadiusAuthenticator;
+import net.jradius.client.auth.PEAPAuthenticator;
+import net.jradius.packet.attribute.AttributeFactory;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.RadiusResponse;
+
+/**
+ * Service for creating and managing connections to RADIUS servers.
+ */
+public class RadiusConnectionService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RadiusConnectionService.class);
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    /**
+     * The RADIUS client;
+     */
+    private RadiusClient radiusClient;
+
+    /**
+     * Creates a new instance of RadiusConnection, configured with parameters","[{'comment': ""But it doesn't though, right? It creates a new `RadiusClient`, storing it internally."", 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -0,0 +1,394 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.security.NoSuchAlgorithmException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.client.RadiusClient;
+import net.jradius.exception.RadiusException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessRequest;
+import net.jradius.dictionary.*;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+import net.jradius.client.auth.EAPTLSAuthenticator;
+import net.jradius.client.auth.EAPTTLSAuthenticator;
+import net.jradius.client.auth.RadiusAuthenticator;
+import net.jradius.client.auth.PEAPAuthenticator;
+import net.jradius.packet.attribute.AttributeFactory;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.RadiusResponse;
+
+/**
+ * Service for creating and managing connections to RADIUS servers.
+ */
+public class RadiusConnectionService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RadiusConnectionService.class);
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    /**
+     * The RADIUS client;
+     */
+    private RadiusClient radiusClient;
+
+    /**
+     * Creates a new instance of RadiusConnection, configured with parameters
+     * from guacamole.properties.
+     *
+     * @return","[{'comment': ""But it's `void`."", 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -0,0 +1,394 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.security.NoSuchAlgorithmException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.client.RadiusClient;
+import net.jradius.exception.RadiusException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessRequest;
+import net.jradius.dictionary.*;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+import net.jradius.client.auth.EAPTLSAuthenticator;
+import net.jradius.client.auth.EAPTTLSAuthenticator;
+import net.jradius.client.auth.RadiusAuthenticator;
+import net.jradius.client.auth.PEAPAuthenticator;
+import net.jradius.packet.attribute.AttributeFactory;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.RadiusResponse;
+
+/**
+ * Service for creating and managing connections to RADIUS servers.
+ */
+public class RadiusConnectionService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RadiusConnectionService.class);
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    /**
+     * The RADIUS client;
+     */
+    private RadiusClient radiusClient;
+
+    /**
+     * Creates a new instance of RadiusConnection, configured with parameters
+     * from guacamole.properties.
+     *
+     * @return
+     *     A new RadiusConnection instance which has already been configured 
+     *     with parameters from guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while parsing guacamole.properties, or if the
+     *     requested encryption method is actually not implemented (a bug).","[{'comment': ""Presumably copy pasta from LDAP auth? There's no encryption method involved here."", 'commenter': 'mike-jumper'}]"
122,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -0,0 +1,394 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius;
+
+import com.google.inject.Inject;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.security.NoSuchAlgorithmException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import net.jradius.client.RadiusClient;
+import net.jradius.exception.RadiusException;
+import net.jradius.packet.RadiusPacket;
+import net.jradius.packet.AccessRequest;
+import net.jradius.dictionary.*;
+import net.jradius.packet.attribute.AttributeList;
+import net.jradius.packet.attribute.RadiusAttribute;
+import net.jradius.client.auth.EAPTLSAuthenticator;
+import net.jradius.client.auth.EAPTTLSAuthenticator;
+import net.jradius.client.auth.RadiusAuthenticator;
+import net.jradius.client.auth.PEAPAuthenticator;
+import net.jradius.packet.attribute.AttributeFactory;
+import net.jradius.packet.AccessChallenge;
+import net.jradius.packet.RadiusResponse;
+
+/**
+ * Service for creating and managing connections to RADIUS servers.
+ */
+public class RadiusConnectionService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RadiusConnectionService.class);
+
+    /**
+     * Service for retrieving RADIUS server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    /**
+     * The RADIUS client;
+     */
+    private RadiusClient radiusClient;
+
+    /**
+     * Creates a new instance of RadiusConnection, configured with parameters
+     * from guacamole.properties.
+     *
+     * @return
+     *     A new RadiusConnection instance which has already been configured 
+     *     with parameters from guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while parsing guacamole.properties, or if the
+     *     requested encryption method is actually not implemented (a bug).
+     */
+    private void createRadiusConnection() {
+
+        // Create the RADIUS client with the configuration parameters
+        try {
+            radiusClient = new RadiusClient(InetAddress.getByName(confService.getRadiusServer()),
+                                            confService.getRadiusSharedSecret(),
+                                            confService.getRadiusAuthPort(),
+                                            confService.getRadiusAcctPort(),
+                                            confService.getRadiusTimeout());
+        }
+        catch (GuacamoleException e) {
+            logger.error(""Unable to initialize RADIUS client: {}"", e.getMessage());
+            logger.debug(""Failed to init RADIUS client."", e);
+            return;
+        }
+        catch (UnknownHostException e) {
+            logger.error(""Unable to resolve host: {}"", e.getMessage());
+            logger.debug(""Failed to resolve host."", e);
+            return;
+        }
+        catch (IOException e) {
+            logger.error(""Unable to communicate with host: {}"", e.getMessage());
+            logger.debug(""Failed to communicate with host."", e);
+            return;
+        }
+
+    }
+
+    /**
+     * Creates a new instance of RadiusAuthentictor, configured with
+     * parameters specified within guacamole.properties.
+     *
+     * @return
+     *     A new RadiusAuthenticator instance which has been configured
+     *     with parameters from guacamole.properties, or null if
+     *     configuration fails.
+     *
+     */
+    private RadiusAuthenticator setupRadiusAuthenticator() {
+
+        // If we don't have a radiusClient object, yet, don't go any further.
+        if (radiusClient == null) {
+            logger.error(""RADIUS client hasn't been set up, yet."");
+            logger.debug(""We can't run this method until the RADIUS client has been set up."");
+            return null;
+        }
+
+        String radAuthName;
+        String caFile;
+        String caPassword;
+        String caType;
+        String keyFile;
+        String keyPassword;
+        String keyType;
+        Boolean trustAll;
+        String innerProtocol;
+        LocalEnvironment guacEnv;
+        String basePath;
+
+        // Pull configuration parameters from guacamole.properties
+        try {
+            guacEnv = new LocalEnvironment();
+            basePath = guacEnv.getGuacamoleHome().getAbsolutePath() + '/';","[{'comment': 'It\'s generally bad practice to rely on string concatenation to produce file paths in Java, let alone to assume that the path separator will be ""/"". The `File` object has a nice pconstructor which takes a parent `File` (a directory)](https://docs.oracle.com/javase/7/docs/api/java/io/File.html#File(java.io.File,%20java.lang.String)), thus you can reference any file within `GUACAMOLE_HOME` with simply:\r\n\r\n    new File(guacEnv.getGuacamoleHome(), ""nameOfTheFile"")\r\n\r\nYou\'ll find that pattern used elsewhere in the codebase, as well. For example: https://github.com/apache/incubator-guacamole-client/blob/f8877304e0950653ca2b5e5abf4b475fce809796/guacamole/src/main/java/org/apache/guacamole/auth/file/FileAuthenticationProvider.java#L132\r\n\r\nIf JRadius provides functions which accept `File` objects, then so much the better, but otherwise you could just maintain things as `File` internally, converting to `String` only when JRadius needs the path.', 'commenter': 'mike-jumper'}]"
129,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -101,21 +102,24 @@ private void putAllUsers(Map<String, User> users, LDAPConnection ldapConnection,
 
             // Read all visible users
             while (results.hasMore()) {
-
-                LDAPEntry entry = results.next();
-
-                // Get username from record
-                LDAPAttribute username = entry.getAttribute(usernameAttribute);
-                if (username == null) {
-                    logger.warn(""Queried user is missing the username attribute \""{}\""."", usernameAttribute);
-                    continue;
+                try {
+                    LDAPEntry entry = results.next();
+
+                    // Get username from record
+                    LDAPAttribute username = entry.getAttribute(usernameAttribute);
+                    if (username == null) {
+                        logger.warn(""Queried user is missing the username attribute \""{}\""."", usernameAttribute);
+                        continue;
+                    }
+
+                    // Store user using their username as the identifier
+                    String identifier = username.getStringValue();
+                    if (users.put(identifier, new SimpleUser(identifier)) != null)
+                        logger.warn(""Possibly ambiguous user account: \""{}\""."", identifier);
+
+                } catch (LDAPReferralException e) {","[{'comment': 'Please do not cuddle the `catch`. For more information, see the general style of other code in the codebase, or the overview of the style we use at http://guacamole.incubator.apache.org/guac-style/.\r\n\r\nThe most important thing here style-wise is consistency.', 'commenter': 'mike-jumper'}, {'comment': ""Thanks for the feedback - I honestly thought I was following what I'd seen elsewhere in the code, but evidently I wasn't paying close enough attention! I'll read the style guide more carefully next time :)"", 'commenter': 'alt36'}]"
129,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -259,8 +263,13 @@ private String generateLDAPQuery(String username)
 
             // Add all DNs for found users
             while (results.hasMore()) {
-                LDAPEntry entry = results.next();
-                userDNs.add(entry.getDN());
+                try {
+                    LDAPEntry entry = results.next();
+                    userDNs.add(entry.getDN());
+                } catch (LDAPReferralException e) {","[{'comment': 'Same thing here - please do not cuddle the `catch`. See other code in the codebase for examples of style.', 'commenter': 'mike-jumper'}]"
129,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -101,21 +102,24 @@ private void putAllUsers(Map<String, User> users, LDAPConnection ldapConnection,
 
             // Read all visible users
             while (results.hasMore()) {
-
-                LDAPEntry entry = results.next();
-
-                // Get username from record
-                LDAPAttribute username = entry.getAttribute(usernameAttribute);
-                if (username == null) {
-                    logger.warn(""Queried user is missing the username attribute \""{}\""."", usernameAttribute);
-                    continue;
+                try {
+                    LDAPEntry entry = results.next();
+
+                    // Get username from record
+                    LDAPAttribute username = entry.getAttribute(usernameAttribute);
+                    if (username == null) {
+                        logger.warn(""Queried user is missing the username attribute \""{}\""."", usernameAttribute);
+                        continue;
+                    }
+
+                    // Store user using their username as the identifier
+                    String identifier = username.getStringValue();
+                    if (users.put(identifier, new SimpleUser(identifier)) != null)
+                        logger.warn(""Possibly ambiguous user account: \""{}\""."", identifier);
+
+                } catch (LDAPReferralException e) {
+                    logger.debug(""Ignoring LDAP Referral: \""{}\""."", e.toString());","[{'comment': 'As mentioned in the comments on [GUACAMOLE-243](https://issues.apache.org/jira/browse/GUACAMOLE-243), ignoring all LDAP referrals is not really a solution unless there is an option to follow them.\r\n\r\nWarning that an LDAP referral has occurred and isn\'t being followed is good, but:\r\n\r\n1. Such a warning would naturally need to be at the ""warning"" log level.\r\n2. The details of the exception should be logged at the ""debug"" level (ie: `logger.debug(""Some contextual message about what just happened."", e)`, *not* `e.toString()` or there won\'t be any stacktraces at the debug level).\r\n\r\nNormally, non-debug log messages use `e.getMessage()` to pull some additional human-readable context while excluding the stacktrace, but if the `LDAPReferralException` will only ever occur for non-followed referrals, that may be just noise here.', 'commenter': 'mike-jumper'}]"
129,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -259,8 +263,13 @@ private String generateLDAPQuery(String username)
 
             // Add all DNs for found users
             while (results.hasMore()) {
-                LDAPEntry entry = results.next();
-                userDNs.add(entry.getDN());
+                try {
+                    LDAPEntry entry = results.next();
+                    userDNs.add(entry.getDN());
+                } catch (LDAPReferralException e) {
+                    logger.debug(""Ignoring LDAP Referral: \""{}\""."", e.toString());","[{'comment': 'As above, probably not a good idea to just ignore all referrals.', 'commenter': 'mike-jumper'}, {'comment': ""Fair enough - my thought process was that at present, it is simply not possible to log in via LDAP if a referral is returned. This makes it impossible to use LDAP auth against an AD where the search base dn is the root of the AD, because at present the LDAPReferralException will be rethrown and not dealt with in any way. This was a v0.1 attempt to at least improve the situation a little. I don't disagree that including the capability to (probably optionally) follow the referral is a better solution, but I'm afraid I'll have to leave that to someone more familiar with the code, then."", 'commenter': 'alt36'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -223,4 +223,36 @@ public int getMaxResults() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns whether or not LDAP aliases will be dereferenced,
+     * as configured with guacamole.properties.
+     * By default they will never be dereferenced.
+     *
+     * @return
+     *     An integer representing the status of of alias
+     *     dereferencing, as configured in guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public int getDereferenceAliases() throws GuacamoleException {
+        String derefAliases = environment.getProperty(
+            LDAPGuacamoleProperties.LDAP_DEREFERENCE_ALIASES,
+            ""never""
+        );
+
+        if (derefAliases == ""always"")","[{'comment': 'Java does not do string comparisons in this way. You need to use `.equals()`.', 'commenter': 'mike-jumper'}, {'comment': 'Doh.', 'commenter': 'necouchman'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -223,4 +223,36 @@ public int getMaxResults() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns whether or not LDAP aliases will be dereferenced,
+     * as configured with guacamole.properties.
+     * By default they will never be dereferenced.
+     *
+     * @return
+     *     An integer representing the status of of alias
+     *     dereferencing, as configured in guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public int getDereferenceAliases() throws GuacamoleException {
+        String derefAliases = environment.getProperty(
+            LDAPGuacamoleProperties.LDAP_DEREFERENCE_ALIASES,
+            ""never""","[{'comment': 'Perhaps it would be better to implement a `GuacamoleProperty` subclass which actually (and strictly) parses these values? The list of possible values here is begging for an `enum`.\r\n\r\nI see `never` is never explicitly handled below, and any mistake in the spelling of the other values will result in the property silently assuming you meant `never`, rather than throwing an explicit exception.\r\n\r\nIt would be better if incorrect values result in an exception (which will ultimately be logged).', 'commenter': 'mike-jumper'}, {'comment': ""Yes, probably a good idea...will work on that.\r\n\r\nI did fix the checking of the string value, in the meantime, such that it expects one of the four values and throws an error if it doesn't get what it expects.  Still would be more elegant and proper with an enum."", 'commenter': 'necouchman'}, {'comment': '~The `derefAliases.equals()` comparisons will also throw a `NullPointerException` when `derefAliases` is `null`, which will be the case if that property is not specified.~\r\n\r\nIn any case, this and more can be resolved once things are cleaned up and migrated to an `enum`. There\'s an example of this being done elsewhere in the LDAP auth, actually. Take a peek at [`EncryptionMethodProperty`](https://github.com/apache/incubator-guacamole-client/blob/1a621886c65d5e99ec44841da41d137000a1c9f4/extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/EncryptionMethodProperty.java).\r\n\r\nEDIT: Never mind on the NPE, since it defaults to `""never""` as written, but still - `EncryptionMethodProperty` may be helpful.', 'commenter': 'mike-jumper'}, {'comment': ""Okay, the latest commit takes a stab at an implementation of the new enum property.  I referenced the EncryptionMethod and EncryptionMethodProperty classes in doing the implementation.  It's slightly different since I'm mapping actual values for the JLDAP library instead of using encryption method to determine default port, but I think it'll do the trick.\r\n\r\nAlso, I looked up the OpenLDAP values for the DEREF setting in ldap.conf, and it matches JLDAP exactly, so I'm going to stick with the never/searching/finding/always values at this point in time, unless someone would like to suggest other options.  Looks like it's more standard than I have experienced - I usually just toggle between never and always."", 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPGuacamoleProperties.java,"@@ -153,4 +153,14 @@ private LDAPGuacamoleProperties() {}
 
     };
 
+    /**
+     * The behavior of alias dereferncing for the LDAP connections.","[{'comment': 'dereferencing*', 'commenter': 'mike-jumper'}, {'comment': ""Trusty VIM spell checker failed me...oh, wait, nevermind.  Even if it was there, it wouldn't like dereferencing, anyway.  Fixed."", 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -223,4 +223,36 @@ public int getMaxResults() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns whether or not LDAP aliases will be dereferenced,
+     * as configured with guacamole.properties.
+     * By default they will never be dereferenced.
+     *
+     * @return
+     *     An integer representing the status of of alias
+     *     dereferencing, as configured in guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public int getDereferenceAliases() throws GuacamoleException {
+        String derefAliases = environment.getProperty(
+            LDAPGuacamoleProperties.LDAP_DEREFERENCE_ALIASES,
+            ""never""
+        );
+
+        if (derefAliases == ""always"")
+            return 3;","[{'comment': '[`LDAPSearchConstraints`](https://www.novell.com/documentation/developer/jldap/jldapenu/api/com/novell/ldap/LDAPSearchConstraints.html) defines constants for these values (`DEREF_ALWAYS`, `DEREF_FINDING`, ...). We should be using those, rather than hard-coding their low-level integer values.\r\n\r\nThat said, I\'m not sure this is really a good way to achieve this. We\'re essentially marrying Guacamole\'s configuration to the internals of JLDAP, which definitely violates separation of concerns. If the internals of JLDAP happened to just make that much sense, then OK, but ""always"", ""finding"", ""searching"", and ""never"" don\'t really make intuitive sense.\r\n\r\nIf `ConfigurationService` will ultimately return the integer that `LDAPSearchConstraints` requires, that\'s OK - it\'s internal to the extension, and `ConfigurationService` itself separates that concern from that of the configuration, but you don\'t want to violate that separation by essentially mapping internals directly to `guacamole.properties`. Ideally, you\'d determine a sensible set of values based on the behaviors that the LDAP auth should support, and then translate those into the values required by JLDAP.', 'commenter': 'mike-jumper'}, {'comment': 'I\'ll look at a couple of other implementations of LDAP clients and see what they do for this type of behavior.  The ""finding"" and ""searching"" terms are a little strange to me - I think in the past I\'ve usually run across either two or three objects - usually on, off, and maybe something in between.  Four is a little odd...I\'ll have to see what the more general consensus is among LDAP clients.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -88,6 +88,7 @@ private void putAllUsers(Map<String, User> users, LDAPConnection ldapConnection,
             // Set search limits
             LDAPSearchConstraints constraints = new LDAPSearchConstraints();
             constraints.setMaxResults(confService.getMaxResults());
+            constraints.setDereference(confService.getDereferenceAliases());","[{'comment': ""If we keep building a new `LDAPSearchConstraints` object, would it make more sense to provide a function which does so within `ConfigurationService`, rather than repeatedly calling the same setters on a new `LDAPSearchConstraints` prior to each LDAP query?\r\n\r\nI'm also not clear on why `setMaxResults()` is only applied here. If it should apply universally, then I would lean even more strongly in the direction described above. We can abstract away the configuration properties which apply to LDAP constraints within the internals of `ConfigurationService` and just rely on the service to return an appropriate constraints object."", 'commenter': 'mike-jumper'}, {'comment': ""I think that approach probably makes sense.  I think this setMaxResults was a recent-ish change to the code to allow searching on large LDAP trees and avoid whatever built-in default existed in the JLDAP code, but I could be wrong about that.  Anyway, probably makes sense to move the constraints to a more global area and apply them universally.  I'll see what kind of progress I can make on that...though any specific help/suggestions would be welcome."", 'commenter': 'necouchman'}, {'comment': 'Create getLDAPSearchConstraints in the ConfigurationService class which pulls in getMaxResults() and getDereferenceAliases() and sets up the constraints.  Changed code in UserService and ConnectionService to use this function from confService instead of setting up their own each time.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -223,4 +223,36 @@ public int getMaxResults() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns whether or not LDAP aliases will be dereferenced,
+     * as configured with guacamole.properties.
+     * By default they will never be dereferenced.
+     *
+     * @return
+     *     An integer representing the status of of alias","[{'comment': '""An integer representing the status of alias dereferencing"" is not clear in itself. The possible values of that integer, and the semantics of each, are not documented. Just documenting the values is insufficient, though. More on this below, but this would be a perfect spot to use an `enum`, that way all values are very strictly defined and documented.', 'commenter': 'mike-jumper'}, {'comment': ""Beefed up the commentary some, hopefully it's clearer this way, though will probably end up changing with implementation of an enum type."", 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/DereferenceAliases.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+/**
+ * Acceptable values for configuring the dereferencing of aliases in
+ * talking to LDAP servers.
+ */
+public enum DereferenceAliases {
+
+    /**
+     * Never dereference aliases.  This is the default.
+     */
+    NEVER(0),","[{'comment': 'Since this is defined based on the integer values required by JLDAP, we should reference the constants provided by JLDAP for this purpose, rather than hard-coding their integer values. See:\r\n\r\nhttps://www.novell.com/documentation/developer/jldap/jldapenu/api/com/novell/ldap/LDAPSearchConstraints.html#DEREF_NEVER\r\n\r\nie: `NEVER(LDAPSearchConstraints.DEREF_NEVER)`.\r\n\r\nSame thing for the other values.', 'commenter': 'mike-jumper'}, {'comment': 'Replaced with the LDAPSearchConstraints constants.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -223,4 +231,51 @@ public int getMaxResults() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns whether or not LDAP aliases will be dereferenced,
+     * as configured with guacamole.properties.  The default
+     * behavior if not explicityly defined is to never ","[{'comment': 'explicitly*', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/DereferenceAliases.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+/**
+ * Acceptable values for configuring the dereferencing of aliases in
+ * talking to LDAP servers.","[{'comment': 'You mean ""... configuring alias dereferencing behavior for queries against LDAP servers."" ? Or ... something else more specific? ""talking to LDAP servers"" is rather broad.', 'commenter': 'mike-jumper'}, {'comment': 'Hopefully that looks better.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/DereferenceAliases.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+/**
+ * Acceptable values for configuring the dereferencing of aliases in
+ * talking to LDAP servers.
+ */
+public enum DereferenceAliases {
+
+    /**
+     * Never dereference aliases.  This is the default.
+     */
+    NEVER(0),
+
+    /**
+     * Aliases are dereferenced below the base object, but not to locate
+     * the base object itself.  So, if the base object is itself an alias
+     * the search will not complete.
+     */
+    SEARCHING(1),
+
+    /**
+     * Aliases are only dereferenced to locate the base object, but not
+     * after that.  So, a search against a base object that is an alias will
+     * find any subordinates of the real object the aliase references, but
+     * further aliases in the search will not be dereferenced.
+     */
+    FINDING(2),
+
+    /**
+     * Aliases will always be dereferenced, both to locate the base object
+     * and when handling results returned by the search.
+     */
+    ALWAYS(3);
+
+    /**
+     * The integer value that the enum represents, which is used in","[{'comment': '""The integer value that the enum represents"" is vague, even with the added context that it\'s used in configuring JLDAP. Ultimately all this says is that it\'s a number that will be given to JLDAP; it doesn\'t describe the semantics behind that number.\r\n\r\nShould probably reference that this is the integer constant required by `LDAPSearchConstraints` to define alias dereferencing behavior.', 'commenter': 'mike-jumper'}, {'comment': 'Reworded.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/DereferenceAliases.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+/**
+ * Acceptable values for configuring the dereferencing of aliases in
+ * talking to LDAP servers.
+ */
+public enum DereferenceAliases {","[{'comment': ""The name of this class kind of throws me at first glance. It sounds like it represents a collection of aliases or all possible legal aliases. The convention that type names are nouns leads to an incorrect interpretation of what this actually is.\r\n\r\nPerhaps something like `DereferenceAliasesMode` or `AliasDereferencingMode` or anything-else-that's-a-noun would be more clear?"", 'commenter': 'mike-jumper'}, {'comment': 'Chose DereferenceAliasesMode.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/DereferenceAliases.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+/**
+ * Acceptable values for configuring the dereferencing of aliases in
+ * talking to LDAP servers.
+ */
+public enum DereferenceAliases {
+
+    /**
+     * Never dereference aliases.  This is the default.
+     */
+    NEVER(0),
+
+    /**
+     * Aliases are dereferenced below the base object, but not to locate
+     * the base object itself.  So, if the base object is itself an alias
+     * the search will not complete.
+     */
+    SEARCHING(1),
+
+    /**
+     * Aliases are only dereferenced to locate the base object, but not
+     * after that.  So, a search against a base object that is an alias will
+     * find any subordinates of the real object the aliase references, but","[{'comment': 'alias*', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPGuacamoleProperties.java,"@@ -153,4 +153,14 @@ private LDAPGuacamoleProperties() {}
 
     };
 
+    /**
+     * The behavior of alias dereferencing for the LDAP connections.","[{'comment': 'But what does this mean?\r\n\r\nIt\'s clear to me since I\'ve read what you\'ve written in JIRA, etc., but the comment doesn\'t tell me what changing this setting does. I would have to dig through other parts of the code to find out that ""alias dereferencing"" is actually a consideration for queries against LDAP, but the comment as written implies this aliases have something to do with the LDAP connection itself.\r\n\r\nIn your other PR for the documentation covering this new property (apache/incubator-guacamole-manual#38), you say:\r\n\r\n> Controls whether or not the LDAP connection follows (dereferences) aliases as it searches the tree.\r\n\r\nSomething like that would be perfect. Descriptive, accurate, yet not overly verbose.', 'commenter': 'mike-jumper'}]"
131,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -223,4 +231,51 @@ public int getMaxResults() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns whether or not LDAP aliases will be dereferenced,
+     * as configured with guacamole.properties.  The default
+     * behavior if not explicityly defined is to never 
+     * dereference them.
+     *
+     * @return
+     *     The behavior for handling dereferencing of aliases
+     *     as configured in guacamole.properties.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public DereferenceAliases getDereferenceAliases() throws GuacamoleException {
+        return environment.getProperty(
+            LDAPGuacamoleProperties.LDAP_DEREFERENCE_ALIASES,
+            DereferenceAliases.NEVER
+        );
+
+    }
+
+    /**
+     * Returns a set of LDAPSearchConstraints to apply globally
+     * to all LDAP searches rather than having various instances
+     * dispersed throughout the code.  Currently contains the","[{'comment': 'I would recommend, simply:\r\n\r\n""Returns a set of LDAPSearchConstraints which should be applied to all LDAP searches.""\r\n\r\nThat a function should be used ""rather than [copying the internals of the function everywhere]"" applies to all functions by definition, and goes without saying. There\'s no need to enumerate the bad practices we avoid by having functions.\r\n\r\nThat said ... if this function effectively replaces the `getDereferenceAliases()` and `getMaxResults()` functions, and it no longer makes sense to call those functions externally, perhaps those functions should be removed (or declared `private`)?', 'commenter': 'mike-jumper'}]"
132,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -270,7 +270,46 @@ public LDAPSearchConstraints getLDAPSearchConstraints() throws GuacamoleExceptio
         constraints.setDereference(getDereferenceAliases().DEREF_VALUE);
 
         return constraints;
+    }
+
+    /**
+     * Returns the search filter that should be used when querying the
+     * LDAP server for Guacamole users.  If no filter is specified,
+     * a default of objectClass=* is returned.
+     *
+     * @return
+     *     The search filter that should be used when querying the
+     *     LDAP server for users that are valid in Guacamole, or
+     *     objectClass=* if not specified.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getUserSearchFilter() throws GuacamoleException {
+        return environment.getProperty(
+            LDAPGuacamoleProperties.LDAP_USER_SEARCH_FILTER,
+            ""(objectClass=*)""
+        );
+    }
 
+    /**
+     * Returns the search filter that should be used when querying the 
+     * LDAP server for Guacamole connections.  If no filter is specified,
+     * the default of objectClass=guacConfigGroup is returned.
+     * 
+     * @return
+     *     The search filter that should be used when querying the 
+     *     LDAP server for connections for Guacamole, or 
+     *     objectClass=guacConfigGroup if no filter is specified. 
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getConnectionSearchFilter() throws GuacamoleException {
+        return environment.getProperty(
+            LDAPGuacamoleProperties.LDAP_CONNECTION_SEARCH_FILTER,
+            ""(objectClass=guacConfigGroup)""","[{'comment': 'If we\'re going to allow connection filters to be defined, `(objectClass=guacConfigGroup)` should probably be of the filter in all cases. Unlike the objects returned by the user search, the connection search really must be strictly `guacConfigGroup` objects as defined by the schema modifications included with the LDAP extension.\r\n\r\nSince connections returned by the search using this filter will already be limited by membership (users must be explicit members of the group to see the connection), this probably simply isn\'t necessary and can be simply removed.\r\n\r\nGiven that the summary of [GUACAMOLE-101](https://issues.apache.org/jira/browse/GUACAMOLE-101) is ""Allow arbitrary filtering of LDAP users"", it is probably also out of scope.', 'commenter': 'mike-jumper'}, {'comment': 'Removed.', 'commenter': 'necouchman'}]"
132,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -270,7 +270,46 @@ public LDAPSearchConstraints getLDAPSearchConstraints() throws GuacamoleExceptio
         constraints.setDereference(getDereferenceAliases().DEREF_VALUE);
 
         return constraints;
+    }
+
+    /**
+     * Returns the search filter that should be used when querying the
+     * LDAP server for Guacamole users.  If no filter is specified,
+     * a default of objectClass=* is returned.","[{'comment': 'a default of ""(objectClass=*)"" is returned.\r\n\r\nThe parenthesis are a critical part of LDAP filter syntax.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
132,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -270,7 +270,46 @@ public LDAPSearchConstraints getLDAPSearchConstraints() throws GuacamoleExceptio
         constraints.setDereference(getDereferenceAliases().DEREF_VALUE);
 
         return constraints;
+    }
+
+    /**
+     * Returns the search filter that should be used when querying the
+     * LDAP server for Guacamole users.  If no filter is specified,
+     * a default of objectClass=* is returned.
+     *
+     * @return
+     *     The search filter that should be used when querying the
+     *     LDAP server for users that are valid in Guacamole, or
+     *     objectClass=* if not specified.","[{'comment': 'Same here - should be ""(objectClass=*)"".', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
132,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -85,11 +85,20 @@ private void putAllUsers(Map<String, User> users, LDAPConnection ldapConnection,
 
         try {
 
+            // Build a filter using the configured or default user search filter
+            // to find all user objects in the LDAP tree
+            StringBuilder userSearchFilter = new StringBuilder();
+            userSearchFilter.append(""(&"");
+            userSearchFilter.append(confService.getUserSearchFilter());
+            userSearchFilter.append(""("" + escapingService.escapeLDAPSearchFilter(usernameAttribute) + ""=*)"");","[{'comment': 'If using a `StringBuilder` (good), you shouldn\'t be doing string concatenation with `+`. The inline concatenation here will actually result in Java creating a temporary `StringBuilder` for the concatenation operation.\r\n\r\nYou should either do the whole thing with a single line of chained `+`:\r\n\r\n    ""(&"" + confService.getUserSearchFilter() + ""("" + escapingService.escapeLDAPSearchFilter(usernameAttribute) + ""=*))""\r\n\r\nor use only the `StringBuilder` you\'ve created:\r\n\r\n    StringBuilder userSearchFilter = new StringBuilder();\r\n    userSearchFilter.append(""(&"");\r\n    userSearchFilter.append(confService.getUserSearchFilter());\r\n    userSearchFilter.append(""("");\r\n    userSearchFilter.append(escapingService.escapeLDAPSearchFilter(usernameAttribute));\r\n    userSearchFilter.append(""=*))"");\r\n\r\nFYI: In the case of the construction of the other query below (```StringBuilder ldapQuery = ...```), the use of a `StringBuilder` is absolutely necessary, since parts of the concatenation operation are conditional, and using Java\'s `+` operator would result in unnecessary creation of temporary `String` and `StringBuilder` objects for intermediate results.\r\n\r\nIn this case, you\'re safe either way, but using both is wasteful.', 'commenter': 'mike-jumper'}, {'comment': 'Switched it all to StringBuilder, as you suggested.', 'commenter': 'necouchman'}]"
132,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -85,11 +85,22 @@ private void putAllUsers(Map<String, User> users, LDAPConnection ldapConnection,
 
         try {
 
+            // Build a filter using the configured or default user search filter
+            // to find all user objects in the LDAP tree
+            StringBuilder userSearchFilter = new StringBuilder();
+            userSearchFilter.append(""(&"");
+            userSearchFilter.append(confService.getUserSearchFilter());
+            userSearchFilter.append(""("");
+            userSearchFilter.append(escapingService.escapeLDAPSearchFilter(usernameAttribute));
+            userSearchFilter.append(""=*)"");
+            userSearchFilter.append("")"");","[{'comment': '>     userSearchFilter.append(""=*)"");\r\n>     userSearchFilter.append("")"");\r\n\r\nReally should be ```userSearchFilter.append(""=*))"")``` - no need for splitting across multiple `append()` calls what is otherwise a single string constant.\r\n', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
132,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -85,11 +85,22 @@ private void putAllUsers(Map<String, User> users, LDAPConnection ldapConnection,
 
         try {
 
+            // Build a filter using the configured or default user search filter
+            // to find all user objects in the LDAP tree
+            StringBuilder userSearchFilter = new StringBuilder();
+            userSearchFilter.append(""(&"");
+            userSearchFilter.append(confService.getUserSearchFilter());
+            userSearchFilter.append(""("");
+            userSearchFilter.append(escapingService.escapeLDAPSearchFilter(usernameAttribute));
+            userSearchFilter.append(""=*)"");
+            userSearchFilter.append("")"");
+         
+","[{'comment': 'Please kill one of these blank lines - separating things by two blanks is somewhat unusual compared to the surrounding code.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
160,guacamole/src/main/webapp/translations/en.json,"@@ -355,6 +355,7 @@
         ""FIELD_HEADER_SERVER_LAYOUT""   : ""Keyboard layout:"",
         ""FIELD_HEADER_SFTP_DIRECTORY""   : ""Default upload directory:"",
         ""FIELD_HEADER_SFTP_HOSTNAME""    : ""Hostname:"",
+        ""FIELD_HEADER_SFTP_KEEPALIVE""   : ""SFTP Keepalive Interval:"",","[{'comment': ""For consistency's sake, the field headers should be sentence case, not title case."", 'commenter': 'mike-jumper'}, {'comment': 'Corrected.', 'commenter': 'necouchman'}]"
160,guacamole/src/main/webapp/translations/en.json,"@@ -531,6 +533,7 @@
         ""FIELD_HEADER_RECORDING_PATH"" : ""Recording path:"",
         ""FIELD_HEADER_SFTP_DIRECTORY""   : ""Default upload directory:"",
         ""FIELD_HEADER_SFTP_HOSTNAME""    : ""Hostname:"",
+        ""FIELD_HEADER_SFTP_KEEPALIVE""   : ""SFTP Keepalive Interval:"",","[{'comment': '`FIELD_HEADER_SFTP_KEEPALIVE` will not work, as the parameter has been renamed to `sftp-server-alive-interval`. This will need to be changed to `FIELD_HEADER_SFTP_SERVER_ALIVE_INTERVAL`.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed, x2.', 'commenter': 'necouchman'}]"
174,extensions/guacamole-auth-header/src/main/java/org/apache/guacamole/auth/header/AuthenticationProviderService.java,"@@ -71,6 +71,9 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
             // Get the username from the header configured in guacamole.properties
             String username = request.getHeader(confService.getHttpAuthHeader());
+            
+            //write username to the credentials object to make tokenfilter work","[{'comment': 'Please follow the existing code style. Compare:\r\n\r\n>     //write username to the credentials object to make tokenfilter work\r\n\r\nvs. other comments in incubator-guacamole-client:\r\n\r\n>     // Get the username from the header configured in guacamole.properties\r\n\r\nRelative to the established style, this comment is missing the space following `//`, and should be in sentence case (first letter capitalized).', 'commenter': 'mike-jumper'}, {'comment': '@mike-jumper changed the comment style to the coding style guide.', 'commenter': 'dotmaster'}]"
174,extensions/guacamole-auth-header/src/main/java/org/apache/guacamole/auth/header/AuthenticationProviderService.java,"@@ -73,6 +73,8 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
             String username = request.getHeader(confService.getHttpAuthHeader());
 
             if (username != null) {
+                //  Write username to the credentials object to make tokenfilter work","[{'comment': '""to make tokenfilter work"" sounds like this is a stopgap measure / hack just to get things working for a very specific case, which isn\'t really the kind of change that should ever be made to any part of the Guacamole codebase.\r\n\r\nIf `TokenFilter` is not working as expected because this value isn\'t populated, and the fact that it isn\'t populated is a bug, then that\'s a legitimate reason to make this change, and there\'s no need to call out the specific things that break because it\'s absent. If it\'s necessary, it\'s necessary.\r\n\r\nIf this truly is a hack, however, it might be worth instead looking into ways that `TokenFilter` could be modified to not depend in the username in the `Credentials` object. Grabbing the identifier of the `AuthenticatedUser` might be an alternative, though I haven\'t thought through whether that would go against the defined semantics of the `GUAC_USERNAME` token.', 'commenter': 'mike-jumper'}, {'comment': ""@mike-jumper Any thoughts here on whether it's preferable to set the username inside this module, or modify code elsewhere to use the AuthenticatedUser identifier?  Going the AuthenticatedUser route looks like it would require one of the following approaches:\r\n- Another method in StandardTokens to be able to pass in the username token, specifically, with its own identifier, and then changes to the various places that StandardTokens is used to add both the credentials and then, alternatively the AuthenticatedUser code.\r\n- Checks around the existing StandardTokens uses that make sure the Credentials object has a valid username, and then code to create a new object or modify the existing one around there using the AuthenticatedUser object.\r\n\r\nIt seems to me that setting it up inside the authentication module is the right way to go - it results in the fewest places that have to be reworked, and makes it available across the various places where those Credentials objects are used.  This module (auth-header) needs the fix, as will the CAS module.  I think those are the only two at the moment - any additional SSO-type modules would also have to keep it in mind (SAML, OAuth).\r\n"", 'commenter': 'necouchman'}]"
181,extensions/guacamole-auth-quickconnect/src/main/resources/controllers/quickconnectController.js,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The controller for making ad-hoc (quick) connections
+ */
+angular.module('guacQuickConnect').controller('quickconnectController', ['$scope', '$injector', '$log',
+        function manageConnectionController($scope, $injector, $log) {
+
+    // Required types
+    var ClientIdentifier    = $injector.get('ClientIdentifier');
+    var Connection          = $injector.get('Connection');
+
+    // Required services
+    var $location                = $injector.get('$location');
+    var $routeParams             = $injector.get('$routeParams');
+    var guacNotification         = $injector.get('guacNotification');
+    var connectionService        = $injector.get('connectionService');
+    var schemaService            = $injector.get('schemaService');
+
+    /**
+     * An action to be provided along with the object sent to showStatus which
+     * closes the currently-shown status dialog.
+     */
+    var ACKNOWLEDGE_ACTION = {
+        name        : ""MANAGE_CONNECTION.ACTION_ACKNOWLEDGE"",
+        // Handle action
+        callback    : function acknowledgeCallback() {
+            guacNotification.showStatus(false);
+        }
+    };
+
+    $scope.uri = null;
+
+    $scope.selectedDataSource = 'quickconnect';
+
+    /**
+     * Saves the connection, creating a new connection or updating the existing
+     * connection.
+     */
+    $scope.quickConnect = function quickConnect() {
+
+        // Construct parameters from URI...
+        /**
+         * Parse URL into the following components:
+         * [0] - Full URL
+         * [3] - Protocol
+         * [5] - Username
+         * [7] - Password
+         * [8] - Hostname
+         * [10] - Port
+         * [11] - Path
+         * [13] - Document
+         * [15] - Parameters
+         * [17] - JS Route
+         */
+        var regexURL = /^(((rdp|ssh|telnet|vnc)?):\/)?\/?((.*?)(:(.*?)|)@)?([^:\/\s]+)(:([^\/]*))?((\/\w+\/)*)([-\w.\/]+[^#?\s]*)?(\?([^#]*))?(#(.*))?$/g;","[{'comment': 'Whoa.', 'commenter': 'mike-jumper'}, {'comment': ""Ha.  Yeah.  If you have suggestions for better ways to parse out a URI, I'm open.  That regex right there is the result of a combo of Google searches and working with the regex on regex101.com."", 'commenter': 'necouchman'}, {'comment': 'Obviously it would be better if the available protocols there were parsed from a REST API check of supported protocols instead of hard-coded.', 'commenter': 'necouchman'}, {'comment': ""On a similar note, any reason why you chose to handle this client-side vs. server-side? I'm not sure whether one is better than the other at the moment, but I am curious. Might be worth considering."", 'commenter': 'mike-jumper'}, {'comment': ""I think the reason I did it that way was because I was trying to leverage as much as possible of the existing REST endpoints for creating/saving the connections, which seems to be easier if the connection attributes and parameters are parsed out on the client-side and then fed to the existing API.\r\n\r\nI suppose I could leverage the extension-specific REST API and feed the entire connection string to a REST endpoint and then parse it out there.  Or is there some other way I'm not thinking about that already exists to get the data to the server-side for parsing by the extension?"", 'commenter': 'necouchman'}, {'comment': ""> I'm not sure whether one is better than the other at the moment, but I am curious.\r\n\r\nWell, since Java already has a URI class and is capable of parsing out the URI without the...colorful...regex, I think I might be leaning toward redoing it server-side.  JavaScript does have some basic parsing available through the DOM, and some external libraries available for it, but it doesn't seem nearly as robust as the Java library."", 'commenter': 'necouchman'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/QuickConnectDirectory.java,"@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect;
+
+import java.util.Collection;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.quickconnect.utility.QCParser;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.simple.SimpleConnectionDirectory;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+/**
+ * Implementation of the Connection Directory, stored
+ * completely in-memory.
+ */
+public class QuickConnectDirectory extends SimpleConnectionDirectory {
+
+    /**
+     * The unique identifier of the root connection group.
+     */
+    private static final String ROOT_IDENTIFIER = ""ROOT"";
+
+    /**
+     * The root connection group for this directory.
+     */
+    private final QuickConnectConnectionGroup rootGroup;
+
+    /**
+     * The internal counter for connection IDs.
+     */
+    private int CONNECTION_ID = 0;
+
+    /**
+     * Creates a new QuickConnectDirectory which provides access to the
+     * connections contained within the given Map.
+     *
+     * @param connections
+     *     A Collection of all connections that should be present in this
+     *     connection directory.
+     * @param rootGroup
+     *     A group that should be at the base of this directory.
+     */
+    public QuickConnectDirectory(Collection<Connection> connections, ConnectionGroup rootGroup) {
+        super(connections);
+        this.rootGroup = (QuickConnectConnectionGroup)rootGroup;
+    }
+
+    /**
+     * Returns the current counter and then increments it.
+     *
+     * @return
+     *     An Integer representing the next available connection
+     *     ID to get used when adding connections.
+     */
+    private Integer getNextConnectionID() {
+        return CONNECTION_ID++;
+    }
+
+    @Override
+    public void add(Connection object) throws GuacamoleException {
+
+        put(new QuickConnection(object));
+
+    }
+
+    /**
+     * Create a connection object on the tree using an existing
+     * QuickConnection connection, after setting the identifier
+     * and parent object.
+     *
+     * @param object
+     *     The QuickConnection object to add to the tree.
+     *
+     * @return
+     *     The connectionId of the object added to the directory.
+     *
+     * @throws GuacamoleException
+     *     If an error is encountered adding the object to the
+     *     directory.
+     */
+    public String put(QuickConnection object) throws GuacamoleException {","[{'comment': 'Replace `object` with `connection`?', 'commenter': 'ceharris'}, {'comment': 'Yep, you/re right - this should be fixed, now.', 'commenter': 'necouchman'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/QuickConnection.java,"@@ -0,0 +1,181 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect;
+
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.apache.guacamole.net.GuacamoleSocket;
+import org.apache.guacamole.net.GuacamoleTunnel;
+import org.apache.guacamole.net.InetGuacamoleSocket;
+import org.apache.guacamole.net.SSLGuacamoleSocket;
+import org.apache.guacamole.net.SimpleGuacamoleTunnel;
+import org.apache.guacamole.net.auth.AbstractConnection;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.ConnectionRecord;
+import org.apache.guacamole.net.auth.GuacamoleProxyConfiguration;
+import org.apache.guacamole.protocol.ConfiguredGuacamoleSocket;
+import org.apache.guacamole.protocol.GuacamoleClientInformation;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+/**
+ * A type of Connection specific to this authentication extension.
+ */
+public class QuickConnection extends AbstractConnection {
+
+    /**
+     * Backing configuration, containing all sensitive information.
+     */
+    private GuacamoleConfiguration config;
+
+    /**
+     * Number of active connections.
+     */
+    private int activeConnections;
+
+    /**
+     * Empty connection constructor.
+     */
+    public QuickConnection() {
+
+    }
+
+    /**
+     * Constructor that takes a name, identifier, and GuacamoleConfiguration
+     * and builds a QuickConnection from it.
+     *
+     * @param name
+     *     The name of the connection.
+     *
+     * @param identifier
+     *     The unique identifier of this connection within this
+     *     authentication module.
+     *
+     * @param config
+     *     The GuacamoleConfiguration object to store in this
+     *     QuickConnection.
+     */
+    public QuickConnection(String name, String identifier,
+            GuacamoleConfiguration config) {
+
+        setName(name);
+
+        setIdentifier(identifier);
+
+        setConfiguration(config);
+        this.config = config;
+
+        this.activeConnections = 0;
+
+    }
+
+    /**
+     * Constructs a QuickConnection from a generic Connection
+     * object, copying over the relevant data and initializing
+     * the rest.
+     *
+     * @param object
+     *     The generic Connection object to be copied.
+     */
+    public QuickConnection(Connection object) {
+
+        setName(object.getName());
+        setIdentifier(object.getIdentifier());
+        setParentIdentifier(object.getParentIdentifier());
+        setConfiguration(object.getConfiguration());
+        this.config = object.getConfiguration();
+        this.activeConnections = 0;
+
+    }
+
+    @Override
+    public int getActiveConnections() {
+        return activeConnections;
+    }
+
+    @Override
+    public Map<String, String> getAttributes() {
+        return Collections.<String, String>emptyMap();
+    }
+
+    @Override
+    public void setAttributes(Map<String, String> attributes) {
+        // Do nothing - there are no attributes
+    }
+
+    @Override
+    public GuacamoleTunnel connect(GuacamoleClientInformation info)
+            throws GuacamoleException {
+","[{'comment': ""This is not a comment about the quick connect extension so much as a comment about whether there is a generalization here that should be abstracted. There's a body of about 40 lines of code here that has nothing to do with quick connect. Isn't this behavior (using the environment to get the proxy config and figure out what's needed to create an appropriate Guacamole socket) something that should be either pulled up into the abstract base type or otherwise moved into a reusable component?"", 'commenter': 'ceharris'}, {'comment': ""Yes, you're probably right, and it's probably already implemented in some other connection.  Let me see if there's some other class that I should be `extend`ing or `implement`ing that already has this rather than having it in here."", 'commenter': 'necouchman'}, {'comment': ""So, I think when I originally wrote this I copied the `org.apache.guacamole.net.auth.simple.SimpleConnection` class over to this QuickConnection class, instead of just extending it.  I've refactored it to just extend the SimpleConnection object and override where I need to instead of duplicaitng the code.  Thanks for pointing that out!"", 'commenter': 'necouchman'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/QuickConnectDirectory.java,"@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect;
+
+import java.util.Collection;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.quickconnect.utility.QCParser;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.simple.SimpleConnectionDirectory;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+/**
+ * Implementation of the Connection Directory, stored
+ * completely in-memory.
+ */
+public class QuickConnectDirectory extends SimpleConnectionDirectory {
+
+    /**
+     * The unique identifier of the root connection group.
+     */
+    private static final String ROOT_IDENTIFIER = ""ROOT"";
+
+    /**
+     * The root connection group for this directory.
+     */
+    private final QuickConnectConnectionGroup rootGroup;
+
+    /**
+     * The internal counter for connection IDs.
+     */
+    private int CONNECTION_ID = 0;
+
+    /**
+     * Creates a new QuickConnectDirectory which provides access to the
+     * connections contained within the given Map.
+     *
+     * @param connections
+     *     A Collection of all connections that should be present in this
+     *     connection directory.
+     * @param rootGroup
+     *     A group that should be at the base of this directory.
+     */
+    public QuickConnectDirectory(Collection<Connection> connections, ConnectionGroup rootGroup) {
+        super(connections);
+        this.rootGroup = (QuickConnectConnectionGroup)rootGroup;
+    }
+
+    /**
+     * Returns the current counter and then increments it.
+     *
+     * @return
+     *     An Integer representing the next available connection
+     *     ID to get used when adding connections.
+     */
+    private Integer getNextConnectionID() {
+        return CONNECTION_ID++;","[{'comment': 'This is not threadsafe. If multiple calls to `add()` overlap, this value will not be updated as expected. You will need to generate these IDs in a threadsafe manner, or switch to a mechanism that guarantees uniqueness without depending on synchronous updates ([`UUID.randomUUID()`](https://docs.oracle.com/javase/7/docs/api/java/util/UUID.html#randomUUID()) for example).', 'commenter': 'mike-jumper'}, {'comment': 'You want to be careful with `UUID.randomUUID()`. The underlying implementation uses `SecureRandom` which can block indefinitely waiting for sufficient entropy (e.g. in the kernel implementation of `/dev/random`). On a system with low activity this can be a significant concern. \r\n\r\n`AtomicInteger.getAndIncrement` will give the same semantics as your use of the post-increment operator with thread safety. Performance is generally better than what you can do with your own `ReentrantLock` or (not recommended) an approach using `synchronized`.', 'commenter': 'ceharris'}, {'comment': 'Not persisting connections at all, and instead dynamically generating the returned `Connection` within `get()` (using the URL as the identifier) would be another option, assuming that persisting the connections in memory is not an intended feature.', 'commenter': 'mike-jumper'}, {'comment': 'Went the AtomicInteger route - having the connections persist in-memory is (to me) a desired functionality, so that accomplishes thread-safeness without losing that.  Also cleaned up the code (like my oddly-named all-caps CONNECTION_ID) a little.', 'commenter': 'necouchman'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/QuickConnectDirectory.java,"@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect;
+
+import java.util.Collection;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.quickconnect.utility.QCParser;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.simple.SimpleConnectionDirectory;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+/**
+ * Implementation of the Connection Directory, stored
+ * completely in-memory.
+ */
+public class QuickConnectDirectory extends SimpleConnectionDirectory {
+
+    /**
+     * The unique identifier of the root connection group.
+     */
+    private static final String ROOT_IDENTIFIER = ""ROOT"";
+
+    /**
+     * The root connection group for this directory.
+     */
+    private final QuickConnectConnectionGroup rootGroup;
+
+    /**
+     * The internal counter for connection IDs.
+     */
+    private int CONNECTION_ID = 0;
+
+    /**
+     * Creates a new QuickConnectDirectory which provides access to the
+     * connections contained within the given Map.
+     *
+     * @param connections
+     *     A Collection of all connections that should be present in this
+     *     connection directory.
+     * @param rootGroup
+     *     A group that should be at the base of this directory.
+     */
+    public QuickConnectDirectory(Collection<Connection> connections, ConnectionGroup rootGroup) {
+        super(connections);
+        this.rootGroup = (QuickConnectConnectionGroup)rootGroup;
+    }
+
+    /**
+     * Returns the current counter and then increments it.
+     *
+     * @return
+     *     An Integer representing the next available connection
+     *     ID to get used when adding connections.
+     */
+    private Integer getNextConnectionID() {
+        return CONNECTION_ID++;
+    }
+
+    @Override
+    public void add(Connection object) throws GuacamoleException {
+
+        put(new QuickConnection(object));","[{'comment': 'Out of curiosity, is it an intended feature that these connections persist in memory until the end of the session? Or is that a side effect of the implementation, with the only goal being to provide some way to connect in an ad hoc manner?', 'commenter': 'mike-jumper'}, {'comment': ""It was probably initially a side-effect, but one that I liked so I made it intentional.  How's that?! :-)\r\n\r\nObviously the main goal is to connect in an ad-hoc manner; however, I think it's also useful to be able to quickly retrieve those connections in the same session - i.e., I get kicked out of my session due to a network issue and want to quickly reconnect without typing the entire connection string, again.\r\n\r\nAlso, in one iteration of the implementation I had a little box where it looked for other available connection directories, and, if you had permission, allowed you to use the ad-hoc box to create a connection within the directory.  I don't think I kept it, here - needs a little more work - but it might be something that gets tacked (back) on in the future."", 'commenter': 'necouchman'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/QuickConnectDirectory.java,"@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect;
+
+import java.util.Collection;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.quickconnect.utility.QCParser;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.simple.SimpleConnectionDirectory;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+/**
+ * Implementation of the Connection Directory, stored
+ * completely in-memory.
+ */
+public class QuickConnectDirectory extends SimpleConnectionDirectory {
+
+    /**
+     * The unique identifier of the root connection group.
+     */
+    private static final String ROOT_IDENTIFIER = ""ROOT"";
+
+    /**
+     * The root connection group for this directory.
+     */
+    private final QuickConnectConnectionGroup rootGroup;
+
+    /**
+     * The internal counter for connection IDs.
+     */
+    private int CONNECTION_ID = 0;
+
+    /**
+     * Creates a new QuickConnectDirectory which provides access to the
+     * connections contained within the given Map.
+     *
+     * @param connections
+     *     A Collection of all connections that should be present in this
+     *     connection directory.
+     * @param rootGroup
+     *     A group that should be at the base of this directory.
+     */
+    public QuickConnectDirectory(Collection<Connection> connections, ConnectionGroup rootGroup) {
+        super(connections);
+        this.rootGroup = (QuickConnectConnectionGroup)rootGroup;
+    }
+
+    /**
+     * Returns the current counter and then increments it.
+     *
+     * @return
+     *     An Integer representing the next available connection
+     *     ID to get used when adding connections.
+     */
+    private Integer getNextConnectionID() {","[{'comment': 'Really should use `int` unless there is a reason a wrapper class like `Integer` is necessary.', 'commenter': 'mike-jumper'}, {'comment': ""Switched to `int`.  I think the reason I went `Integer` is because there were a couple of places where it gets converted to a `String`.  I've replaced those with `Integer.toString()` calls with the primitive, so accomplishes the same thing."", 'commenter': 'necouchman'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,"@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.utility;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+public class QCParser {
+
+    /**
+     * The default protocol to parse to if one is undefined.","[{'comment': 'What do you mean by ""if one is undefined""?', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,"@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.utility;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+public class QCParser {","[{'comment': 'This class needs to be documented.', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,"@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.utility;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+public class QCParser {
+
+    /**
+     * The default protocol to parse to if one is undefined.
+     */
+    public static final String DEFAULT_URI_PROTOCOL = ""ssh"";
+
+    /**
+     * The default host to use if one is not defined.
+     */
+    public static final String DEFAULT_URI_HOST = ""localhost"";
+
+    /**
+     * The default port to use if one is not defined.
+     */
+    public static final Integer DEFAULT_URI_PORT = 22;","[{'comment': 'With the exception of VNC, the various protocol implementations already have defined default ports which are used if the `port` parameter is unset. Forcing this to 22 for all protocols will result in confusion if SSH is not used.', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,"@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.utility;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+public class QCParser {
+
+    /**
+     * The default protocol to parse to if one is undefined.
+     */
+    public static final String DEFAULT_URI_PROTOCOL = ""ssh"";
+
+    /**
+     * The default host to use if one is not defined.
+     */
+    public static final String DEFAULT_URI_HOST = ""localhost"";
+
+    /**
+     * The default port to use if one is not defined.
+     */
+    public static final Integer DEFAULT_URI_PORT = 22;
+
+    /**
+     * Parse out a URI string and get a connection from that string,
+     * or an exception if the parsing fails.
+     *
+     * @param uri
+     *     The string form of the URI to be parsed.
+     *
+     * @return
+     *     A GuacamoleConfiguration using a combination of the parsed
+     *     URI values and default values when not specified in the
+     *     URI.
+     *
+     * @throws GuacamoleException
+     *     When an error occurs parsing the URI.
+     */
+    public static GuacamoleConfiguration getConfiguration(String uri)
+            throws GuacamoleException {
+
+        URI qcUri;
+        try {
+            qcUri = new URI(uri);
+        }
+        catch (URISyntaxException e) {
+            throw new GuacamoleClientException(""Invalid URI Syntax"", e);
+        }
+        String protocol = qcUri.getScheme();
+        String host = qcUri.getHost();
+        Integer port = qcUri.getPort();
+        String userInfo = qcUri.getUserInfo();
+        String query = qcUri.getQuery();
+        String username = null;
+        String password = null;
+        List<String> paramList = null;
+
+        if (protocol == null || protocol.equals(""""))
+            protocol = DEFAULT_URI_PROTOCOL;
+
+        if (host == null || host.equals(""""))
+            host = DEFAULT_URI_HOST;
+
+        if (port == -1 || port < 1)
+            port = DEFAULT_URI_PORT;
+
+        if (query != null && !query.equals(""""))
+            paramList = Arrays.asList(query.split(""&""));
+
+        if (userInfo != null && !userInfo.equals("""")) {
+            String[] authenticators = userInfo.split("":"");
+            if (authenticators.length > 0 && authenticators[0] != null)","[{'comment': 'Under what circumstances would a `String` within the `String[]` returned by `split()` be `null`?', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,"@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.utility;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+public class QCParser {
+
+    /**
+     * The default protocol to parse to if one is undefined.
+     */
+    public static final String DEFAULT_URI_PROTOCOL = ""ssh"";
+
+    /**
+     * The default host to use if one is not defined.
+     */
+    public static final String DEFAULT_URI_HOST = ""localhost"";
+
+    /**
+     * The default port to use if one is not defined.
+     */
+    public static final Integer DEFAULT_URI_PORT = 22;
+
+    /**
+     * Parse out a URI string and get a connection from that string,
+     * or an exception if the parsing fails.
+     *
+     * @param uri
+     *     The string form of the URI to be parsed.
+     *
+     * @return
+     *     A GuacamoleConfiguration using a combination of the parsed
+     *     URI values and default values when not specified in the
+     *     URI.
+     *
+     * @throws GuacamoleException
+     *     When an error occurs parsing the URI.
+     */
+    public static GuacamoleConfiguration getConfiguration(String uri)
+            throws GuacamoleException {
+
+        URI qcUri;
+        try {
+            qcUri = new URI(uri);
+        }
+        catch (URISyntaxException e) {
+            throw new GuacamoleClientException(""Invalid URI Syntax"", e);
+        }
+        String protocol = qcUri.getScheme();
+        String host = qcUri.getHost();
+        Integer port = qcUri.getPort();
+        String userInfo = qcUri.getUserInfo();
+        String query = qcUri.getQuery();
+        String username = null;
+        String password = null;
+        List<String> paramList = null;
+
+        if (protocol == null || protocol.equals(""""))
+            protocol = DEFAULT_URI_PROTOCOL;
+
+        if (host == null || host.equals(""""))
+            host = DEFAULT_URI_HOST;
+
+        if (port == -1 || port < 1)
+            port = DEFAULT_URI_PORT;
+
+        if (query != null && !query.equals(""""))
+            paramList = Arrays.asList(query.split(""&""));
+
+        if (userInfo != null && !userInfo.equals("""")) {
+            String[] authenticators = userInfo.split("":"");","[{'comment': 'Using `split("":"")` will actually compile `"":""` as a regular expression each time this is called.', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,"@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.utility;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+public class QCParser {
+
+    /**
+     * The default protocol to parse to if one is undefined.
+     */
+    public static final String DEFAULT_URI_PROTOCOL = ""ssh"";
+
+    /**
+     * The default host to use if one is not defined.
+     */
+    public static final String DEFAULT_URI_HOST = ""localhost"";
+
+    /**
+     * The default port to use if one is not defined.
+     */
+    public static final Integer DEFAULT_URI_PORT = 22;
+
+    /**
+     * Parse out a URI string and get a connection from that string,
+     * or an exception if the parsing fails.
+     *
+     * @param uri
+     *     The string form of the URI to be parsed.
+     *
+     * @return
+     *     A GuacamoleConfiguration using a combination of the parsed
+     *     URI values and default values when not specified in the
+     *     URI.
+     *
+     * @throws GuacamoleException
+     *     When an error occurs parsing the URI.
+     */
+    public static GuacamoleConfiguration getConfiguration(String uri)
+            throws GuacamoleException {
+
+        URI qcUri;
+        try {
+            qcUri = new URI(uri);
+        }
+        catch (URISyntaxException e) {
+            throw new GuacamoleClientException(""Invalid URI Syntax"", e);
+        }
+        String protocol = qcUri.getScheme();
+        String host = qcUri.getHost();
+        Integer port = qcUri.getPort();
+        String userInfo = qcUri.getUserInfo();
+        String query = qcUri.getQuery();
+        String username = null;
+        String password = null;
+        List<String> paramList = null;
+
+        if (protocol == null || protocol.equals(""""))
+            protocol = DEFAULT_URI_PROTOCOL;
+
+        if (host == null || host.equals(""""))
+            host = DEFAULT_URI_HOST;
+
+        if (port == -1 || port < 1)
+            port = DEFAULT_URI_PORT;
+
+        if (query != null && !query.equals(""""))
+            paramList = Arrays.asList(query.split(""&""));
+
+        if (userInfo != null && !userInfo.equals("""")) {
+            String[] authenticators = userInfo.split("":"");
+            if (authenticators.length > 0 && authenticators[0] != null)
+                username = authenticators[0];
+            if (authenticators.length > 1 && authenticators[1] != null)","[{'comment': 'What if `userInfo` is something like ""myusername:myPassword:That:Has:Colons""? Rather than manually parse everything with `split()`, I suggest defining (and pre-compiling) regular expressions. It would avoid recompiling the pattern each time `split()` is invoked, and may be more robust.\r\n\r\nAlternatively, though I haven\'t looked into this, there may be a better class for parsing URIs which handles all of this. It doesn\'t look like anything we\'re doing here is non-standard with respect to URI format.', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,"@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.utility;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+
+public class QCParser {
+
+    /**
+     * The default protocol to parse to if one is undefined.
+     */
+    public static final String DEFAULT_URI_PROTOCOL = ""ssh"";
+
+    /**
+     * The default host to use if one is not defined.
+     */
+    public static final String DEFAULT_URI_HOST = ""localhost"";
+
+    /**
+     * The default port to use if one is not defined.
+     */
+    public static final Integer DEFAULT_URI_PORT = 22;
+
+    /**
+     * Parse out a URI string and get a connection from that string,
+     * or an exception if the parsing fails.
+     *
+     * @param uri
+     *     The string form of the URI to be parsed.
+     *
+     * @return
+     *     A GuacamoleConfiguration using a combination of the parsed
+     *     URI values and default values when not specified in the
+     *     URI.
+     *
+     * @throws GuacamoleException
+     *     When an error occurs parsing the URI.
+     */
+    public static GuacamoleConfiguration getConfiguration(String uri)
+            throws GuacamoleException {
+
+        URI qcUri;
+        try {
+            qcUri = new URI(uri);
+        }
+        catch (URISyntaxException e) {
+            throw new GuacamoleClientException(""Invalid URI Syntax"", e);
+        }
+        String protocol = qcUri.getScheme();
+        String host = qcUri.getHost();
+        Integer port = qcUri.getPort();","[{'comment': 'You should avoid using wrapper classes like this unnecessarily.', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/resources/templates/quickconnectField.html,"@@ -0,0 +1,9 @@
+<meta name=""before"" content="".recent-connections"" />
+<div class=""header"" ng-controller=""quickconnectController"">
+    <div class=""quickconnect-container"">
+        <form ng-submit=""quickConnect()"">
+            <input type=text class=""quickconnect-field"" placeholder=""Enter Connection URI"" ng-model=""uri"" />","[{'comment': 'Strings which will be displayed to the user need to be defined as translation strings, rather than hard-coded in the HTML.', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/resources/styles/quickconnect.css,"@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+.quickconnect-container {
+    margin: 0.5em 0;
+    width: 100%;
+}
+
+.quickconnect-container .quickconnect-field {
+    background-image: url('images/protocol-icons/guac-text.png');
+    background-repeat: no-repeat;
+    background-size: 1.75em;
+    background-position: 0.25em center;
+    background-color: transparent;
+    padding: 0.5em;
+    padding-left: 2.25em;
+    width: 100%;
+    max-width: none;
+    border: 0;
+    border-left: 1px solid rgba(0,0,0,0.125);
+    box-sizing: border-box;
+}
+
+.quickconnect-field input[type=""submit""] {","[{'comment': 'Is there an `<input type=""submit"" ...>`? I don\'t see one in the HTML.', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/rest/QuickConnectREST.java,"@@ -0,0 +1,102 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.rest;
+
+import com.google.inject.Inject;
+import java.util.List;
+import javax.ws.rs.Consumes;
+import javax.ws.rs.FormParam;
+import javax.ws.rs.GET;
+import javax.ws.rs.Path;
+import javax.ws.rs.POST;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+import org.apache.guacamole.auth.quickconnect.QuickConnection;
+import org.apache.guacamole.auth.quickconnect.QuickConnectDirectory;
+import org.apache.guacamole.auth.quickconnect.QuickConnectUserContext;
+import org.apache.guacamole.auth.quickconnect.utility.QCParser;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.Directory;
+
+/**
+ * A class to create and manage REST endpoints for the
+ * QuickConnect extension.
+ */
+@Produces(MediaType.APPLICATION_JSON)
+public class QuickConnectREST {
+
+    /**
+     * The connection directory for this REST endpoint.
+     */
+    private QuickConnectDirectory directory;
+
+    /**
+     * The UserContext object for this REST endpoint.
+     */
+    private QuickConnectUserContext userContext;
+
+    /**
+     * Construct a new QuickConnectREST class, taking in the UserContext
+     * object that calls this constructor.
+     *
+     * @param userContext
+     *     The UserContext object associated with this REST endpoint
+     *
+     * @throws GuacamoleException
+     *     If the UserContext is unavailable or the directory object
+     *     cannot be retrieved.
+     */
+    public QuickConnectREST(QuickConnectUserContext userContext)
+            throws GuacamoleException {
+        this.userContext = userContext;
+        this.directory = (QuickConnectDirectory)this.userContext.getConnectionDirectory();","[{'comment': 'If usages of `QuickConnectUserContext` must rely on `getConnectionDirectory()` returning a `QuickConnectDirectory`, it would be better to avoid requiring typecasting and explicitly declare that as the return type.', 'commenter': 'mike-jumper'}]"
181,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/rest/QuickConnectREST.java,"@@ -0,0 +1,102 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.rest;
+
+import com.google.inject.Inject;
+import java.util.List;
+import javax.ws.rs.Consumes;
+import javax.ws.rs.FormParam;
+import javax.ws.rs.GET;
+import javax.ws.rs.Path;
+import javax.ws.rs.POST;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+import org.apache.guacamole.auth.quickconnect.QuickConnection;
+import org.apache.guacamole.auth.quickconnect.QuickConnectDirectory;
+import org.apache.guacamole.auth.quickconnect.QuickConnectUserContext;
+import org.apache.guacamole.auth.quickconnect.utility.QCParser;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.Directory;
+
+/**
+ * A class to create and manage REST endpoints for the
+ * QuickConnect extension.
+ */
+@Produces(MediaType.APPLICATION_JSON)
+public class QuickConnectREST {
+
+    /**
+     * The connection directory for this REST endpoint.
+     */
+    private QuickConnectDirectory directory;
+
+    /**
+     * The UserContext object for this REST endpoint.
+     */
+    private QuickConnectUserContext userContext;
+
+    /**
+     * Construct a new QuickConnectREST class, taking in the UserContext
+     * object that calls this constructor.
+     *
+     * @param userContext
+     *     The UserContext object associated with this REST endpoint
+     *
+     * @throws GuacamoleException
+     *     If the UserContext is unavailable or the directory object
+     *     cannot be retrieved.
+     */
+    public QuickConnectREST(QuickConnectUserContext userContext)
+            throws GuacamoleException {
+        this.userContext = userContext;
+        this.directory = (QuickConnectDirectory)this.userContext.getConnectionDirectory();
+    }
+
+    /**
+     * Parse the URI read from the POST input, add the connection
+     * to the directory, and return the ID of the newly-created
+     * connection.
+     *
+     * @param uri
+     *     The URI to parse into a connection.
+     *
+     * @return
+     *     The ID of the connection in the directory.
+     *
+     * @throws GuacamoleException
+     *     If an error is encountered parsing the URI.
+     */
+    @POST
+    @Path(""create"")
+    public String create(@FormParam(""uri"") String uri) 
+            throws GuacamoleException {
+
+        if (directory == null)","[{'comment': 'Will this ever be the case?', 'commenter': 'mike-jumper'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -57,9 +57,7 @@
      *     If the ID ticket is not valid, the username claim type is missing, or
      *     guacamole.properties could not be parsed.
      */
-    public String processUsername(String ticket) throws GuacamoleException {
-
-        AttributePrincipal principal = null;","[{'comment': 'Glad to see this line go. ;) Never a fan of unnecessary initialization.', 'commenter': 'mike-jumper'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -68,4 +69,20 @@ public String getRedirectURI() throws GuacamoleException {
         return environment.getRequiredProperty(CASGuacamoleProperties.CAS_REDIRECT_URI);
     }
 
+    /**
+     * Returns the path to the file that contains the private key
+     * used to decrypt the credential that is sent encrypted by CAS,
+     * or null if no key is defined.
+     *
+     * @return
+     *     The path to the private key to decrypt the ClearPass
+     *     credential returned by CAS.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public File getClearpassKey() throws GuacamoleException {","[{'comment': 'Thoughts on implementing a `GuacamoleProperty` subclass which handles the parsing of the key value, thus abstracting away the reading of its contents as `KeySpec` or `PrivateKey` or similar?', 'commenter': 'mike-jumper'}, {'comment': ""That's probably reasonable - I'll work on moving this over to some sort of EncryptedGuacamoleProperty or something like that.  Preferences on naming??"", 'commenter': 'necouchman'}, {'comment': ""Oops...I was thinking the wrong way, here.  So, it wouldn't be EncryptedGuacamoleProperty, it would be something like SSLGuacamoleProperty or PrivateKeyGuacamoleProperty or something like that..."", 'commenter': 'necouchman'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -105,4 +137,76 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
     }
 
+    /**
+     * Takes an encrypted string representing a password provided by
+     * the CAS ClearPass service and decrypts it using the private
+     * key configured for this extension.  Returns null if it is
+     * unable to decrypt the password.
+     *
+     * @param encryptedPassword
+     *     A string with the encrypted password provided by the
+     *     CAS service.
+     *
+     * @return
+     *     The decrypted password, or null if it is unable to
+     *     decrypt the password.
+     * @throws GuacamoleException
+     *     If unable to get Guacamole configuration data
+     */
+    private final String decryptPassword(String encryptedPassword)
+            throws GuacamoleException {
+
+        // If we get nothing, we return nothing.
+        if (encryptedPassword == null || encryptedPassword.isEmpty())
+            return null;
+
+        try {
+
+            // Open and read the file specified in the configuration.
+            File keyFile = new File(new LocalEnvironment().getGuacamoleHome(), confService.getClearpassKey().toString());
+            InputStream keyInput = new BufferedInputStream(new FileInputStream(keyFile));
+            final byte[] keyBytes = new byte[(int) keyFile.length()];
+            keyInput.read(keyBytes);
+            keyInput.close();
+      
+            // Set up decryption infrastructure
+            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
+            KeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes); 
+            final PrivateKey privateKey = keyFactory.generatePrivate(keySpec);
+            final Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());
+            final byte[] pass64 = DatatypeConverter.parseBase64Binary(encryptedPassword);","[{'comment': 'Beware that this will throw an `IllegalArgumentException` provided data is not valid base64. That case will need to be handled for this function to behave in a robust manner.', 'commenter': 'mike-jumper'}, {'comment': 'Added this exception to the list.', 'commenter': 'necouchman'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -105,4 +137,76 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
     }
 
+    /**
+     * Takes an encrypted string representing a password provided by
+     * the CAS ClearPass service and decrypts it using the private
+     * key configured for this extension.  Returns null if it is
+     * unable to decrypt the password.
+     *
+     * @param encryptedPassword
+     *     A string with the encrypted password provided by the
+     *     CAS service.
+     *
+     * @return
+     *     The decrypted password, or null if it is unable to
+     *     decrypt the password.
+     * @throws GuacamoleException
+     *     If unable to get Guacamole configuration data","[{'comment': 'All exceptions are actually caught and masked by that function, with any failures whatsoever resulting in return of `null`. Why not rethrow those failures as `GuacamoleServerException` or similar?', 'commenter': 'mike-jumper'}, {'comment': ""My rationale here was that it's actually okay, and should not halt the login process, if either the credential object is not available, or it can't be decrypted.  Failure to retrieve or decrypt this property, IMHO, should not stop the login process from working or connections from being made - the token simply won't be available.  Is there an exception that should be thrown that would not cause the login process to stop?"", 'commenter': 'necouchman'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -105,4 +137,76 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
     }
 
+    /**
+     * Takes an encrypted string representing a password provided by
+     * the CAS ClearPass service and decrypts it using the private
+     * key configured for this extension.  Returns null if it is
+     * unable to decrypt the password.
+     *
+     * @param encryptedPassword
+     *     A string with the encrypted password provided by the
+     *     CAS service.
+     *
+     * @return
+     *     The decrypted password, or null if it is unable to
+     *     decrypt the password.
+     * @throws GuacamoleException
+     *     If unable to get Guacamole configuration data
+     */
+    private final String decryptPassword(String encryptedPassword)
+            throws GuacamoleException {
+
+        // If we get nothing, we return nothing.
+        if (encryptedPassword == null || encryptedPassword.isEmpty())
+            return null;
+
+        try {
+
+            // Open and read the file specified in the configuration.
+            File keyFile = new File(new LocalEnvironment().getGuacamoleHome(), confService.getClearpassKey().toString());
+            InputStream keyInput = new BufferedInputStream(new FileInputStream(keyFile));
+            final byte[] keyBytes = new byte[(int) keyFile.length()];
+            keyInput.read(keyBytes);
+            keyInput.close();
+      
+            // Set up decryption infrastructure
+            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
+            KeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes); 
+            final PrivateKey privateKey = keyFactory.generatePrivate(keySpec);
+            final Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());
+            final byte[] pass64 = DatatypeConverter.parseBase64Binary(encryptedPassword);
+            cipher.init(Cipher.DECRYPT_MODE, privateKey);
+
+            // Decrypt and return a new string.
+            final byte[] cipherData = cipher.doFinal(pass64);
+            return new String(cipherData);
+        }
+        catch (FileNotFoundException e) {
+            logger.error(""ClearPass key file not found, password will not be decrypted."");
+            logger.debug(""Error locating the ClearPass key file: {}"", e.getMessage());","[{'comment': ""`logger.debug()` calls should receive the exception itself, not just the message. That way, when debug logging is enabled, full stacktraces are logged. Assuming the exception message is meaningful, it's the higher-level log statement which would receive `e.getMessage()` rather than `e` (in this case, the call to `logger.error()`)."", 'commenter': 'mike-jumper'}, {'comment': ""This should be fixed - I don't know that any of the error messages are worth passing to logger.error(), so I just those as-is, and changed logger.debug() to include the full exception."", 'commenter': 'necouchman'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -105,4 +137,76 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
     }
 
+    /**
+     * Takes an encrypted string representing a password provided by
+     * the CAS ClearPass service and decrypts it using the private
+     * key configured for this extension.  Returns null if it is
+     * unable to decrypt the password.
+     *
+     * @param encryptedPassword
+     *     A string with the encrypted password provided by the
+     *     CAS service.
+     *
+     * @return
+     *     The decrypted password, or null if it is unable to
+     *     decrypt the password.
+     * @throws GuacamoleException","[{'comment': 'Missing blank line separating the `@return` block from the `@throws`.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -105,4 +137,76 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
     }
 
+    /**
+     * Takes an encrypted string representing a password provided by
+     * the CAS ClearPass service and decrypts it using the private
+     * key configured for this extension.  Returns null if it is
+     * unable to decrypt the password.
+     *
+     * @param encryptedPassword
+     *     A string with the encrypted password provided by the
+     *     CAS service.
+     *
+     * @return
+     *     The decrypted password, or null if it is unable to
+     *     decrypt the password.
+     * @throws GuacamoleException
+     *     If unable to get Guacamole configuration data
+     */
+    private final String decryptPassword(String encryptedPassword)
+            throws GuacamoleException {
+
+        // If we get nothing, we return nothing.
+        if (encryptedPassword == null || encryptedPassword.isEmpty())
+            return null;
+
+        try {
+
+            // Open and read the file specified in the configuration.
+            File keyFile = new File(new LocalEnvironment().getGuacamoleHome(), confService.getClearpassKey().toString());","[{'comment': 'Is an `Environment` instance already created and available? Rather than creating a new `LocalEnvironment` each time an attempt to decrypt the password is made, it would be better to share the existing `Environment` used by the rest of the extension.', 'commenter': 'mike-jumper'}, {'comment': ""Should be fixed, though it won't matter if this gets pulled out into its own property type."", 'commenter': 'necouchman'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -83,7 +106,16 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
             String ticket = request.getParameter(CASTicketField.PARAMETER_NAME);
             if (ticket != null) {
                 AuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
-                authenticatedUser.init(ticketService.processUsername(ticket), credentials);
+                AttributePrincipal principal = ticketService.validateTicket(ticket);
+                String username = principal.getName();
+                credentials.setUsername(username);
+                Object credObj = principal.getAttributes().get(""credential"");
+                if (credObj != null) {
+                    String clearPass = decryptPassword(credObj.toString());","[{'comment': 'Is there a defined object type for what `get(""credential"")` returns? Or is conversion to a string and back again the only way?', 'commenter': 'mike-jumper'}, {'comment': 'The getAttributes call returns a Map<String, Object>, so I think this conversion is the only (safe) way to get this object into the string format needed for the decryption process.', 'commenter': 'necouchman'}]"
183,guacamole-ext/src/main/java/org/apache/guacamole/properties/CipherGuacamoleProperty.java,"@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+import java.io.IOException;
+import java.lang.IllegalArgumentException;
+import java.security.InvalidKeyException;
+import java.security.KeyFactory;
+import java.security.NoSuchAlgorithmException;
+import java.security.PrivateKey;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.KeySpec;
+import java.security.spec.PKCS8EncodedKeySpec;
+import javax.crypto.Cipher;
+import javax.crypto.NoSuchPaddingException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.environment.LocalEnvironment;
+
+/**
+ * A GuacamoleProperty whose value is derived from a private key file.
+ */
+public abstract class CipherGuacamoleProperty implements GuacamoleProperty<Cipher>  {
+
+    @Override
+    public Cipher parseValue(String value) throws GuacamoleException {
+
+        try {
+
+            final Environment environment = new LocalEnvironment();
+
+            // Open and read the file specified in the configuration.
+            File keyFile = new File(environment.getGuacamoleHome(), value);
+            InputStream keyInput = new BufferedInputStream(new FileInputStream(keyFile));
+            final byte[] keyBytes = new byte[(int) keyFile.length()];
+            keyInput.read(keyBytes);
+            keyInput.close();
+
+            // Set up decryption infrastructure
+            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
+            KeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
+            final PrivateKey privateKey = keyFactory.generatePrivate(keySpec);
+            final Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());
+            cipher.init(Cipher.DECRYPT_MODE, privateKey);
+","[{'comment': ""So, I'm not completely sure that this is the cleanest way to do this, or what the boundary of this property should be.  I implemented it as a Cipher property, which takes in the filename of a private key relative to the guacamole home directory and generates the Cipher object out of it necessary to decrypt some string text.  Thoughts on whether this is the correct level to go to, or if I should go higher-level or lower-level?"", 'commenter': 'necouchman'}]"
183,guacamole-ext/src/main/java/org/apache/guacamole/properties/CipherGuacamoleProperty.java,"@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+import java.io.IOException;
+import java.lang.IllegalArgumentException;
+import java.security.InvalidKeyException;
+import java.security.KeyFactory;
+import java.security.NoSuchAlgorithmException;
+import java.security.PrivateKey;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.KeySpec;
+import java.security.spec.PKCS8EncodedKeySpec;
+import javax.crypto.Cipher;
+import javax.crypto.NoSuchPaddingException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.environment.LocalEnvironment;
+
+/**
+ * A GuacamoleProperty whose value is derived from a private key file.
+ */
+public abstract class CipherGuacamoleProperty implements GuacamoleProperty<Cipher>  {
+
+    @Override
+    public Cipher parseValue(String value) throws GuacamoleException {
+
+        try {
+
+            final Environment environment = new LocalEnvironment();
+","[{'comment': ""This feels like reverting back to behavior advised against before, but I'm not sure the best way to get the Guacamole Home directory into this property to open up the file without doing this.  Suggestions?"", 'commenter': 'necouchman'}, {'comment': ""Hm ... I see what you mean.\r\n\r\nIt would be possible to get Guice to inject the `Environment` by using a `Provider<CipherGuacamoleProperty>`, thus avoiding recreating things, but perhaps there is a different way.\r\n\r\nThis may end up reverting things back to how you had them, but what about relying on the value of this property to be the absolute path to the key? If the property itself ends up needing to be simply a `File` or `String`, with the actual reading into `PrivateKey` and finally `Cipher` being abstracted only within the configuration service, that's fine, I'm sure."", 'commenter': 'mike-jumper'}, {'comment': ""Absolute path is fine - I think there are a few other similar properties (basic user mapping, even) that do that, so it isn't without precedent.  I guess it just seems like assuming it'll be in GUACAMOLE_HOME feels a little cleaner from a configuration perspective - admins don't have to keep guessing which properties assume absolutely paths and which are relative to GUACAMOLE_HOME - but as long as it's properly documented it should be okay."", 'commenter': 'necouchman'}]"
183,guacamole-ext/src/main/java/org/apache/guacamole/properties/CipherGuacamoleProperty.java,"@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+import java.io.IOException;
+import java.lang.IllegalArgumentException;
+import java.security.InvalidKeyException;
+import java.security.KeyFactory;
+import java.security.NoSuchAlgorithmException;
+import java.security.PrivateKey;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.KeySpec;
+import java.security.spec.PKCS8EncodedKeySpec;
+import javax.crypto.Cipher;
+import javax.crypto.NoSuchPaddingException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.environment.LocalEnvironment;
+
+/**
+ * A GuacamoleProperty whose value is derived from a private key file.
+ */
+public abstract class CipherGuacamoleProperty implements GuacamoleProperty<Cipher>  {
+
+    @Override
+    public Cipher parseValue(String value) throws GuacamoleException {
+
+        try {
+
+            final Environment environment = new LocalEnvironment();
+
+            // Open and read the file specified in the configuration.
+            File keyFile = new File(environment.getGuacamoleHome(), value);
+            InputStream keyInput = new BufferedInputStream(new FileInputStream(keyFile));
+            final byte[] keyBytes = new byte[(int) keyFile.length()];
+            keyInput.read(keyBytes);
+            keyInput.close();
+
+            // Set up decryption infrastructure
+            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
+            KeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
+            final PrivateKey privateKey = keyFactory.generatePrivate(keySpec);
+            final Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());
+            cipher.init(Cipher.DECRYPT_MODE, privateKey);
+
+            return cipher;
+
+        }
+        catch (FileNotFoundException e) {
+            throw new GuacamoleException(""Could not find the specified key file."", e);
+        }
+        catch (IOException e) {
+            throw new GuacamoleException(""Could not read in the specified key file."", e);
+        }
+        catch (NoSuchAlgorithmException e) {
+            throw new GuacamoleException(""Specified algorithm does not exist."", e);
+        }
+        catch (InvalidKeyException e) {
+            throw new GuacamoleException(""Specified key is invalid."", e);
+        }
+        catch (InvalidKeySpecException e) {
+            throw new GuacamoleException(""Invalid KeySpec initialization."", e);
+        }
+        catch (NoSuchPaddingException e) {
+            throw new GuacamoleException(""No such padding exception."", e);
+        }
+","[{'comment': ""And, you know how I said that the exceptions shouldn't kill the entire client, it should just result in the password not being available...well...I think all of this here killed that off..."", 'commenter': 'necouchman'}, {'comment': 'What do you mean by ""killed that off""?', 'commenter': 'mike-jumper'}, {'comment': ""When all of those exceptions were caught and dealt with directly in the AuthenticationProviderService class, the mehtod just returned null rather than throwing a GuacamoleException.  Returning null just means that the password is not added to the credential object, so it isn't available as a token later on inside the client.\r\n\r\nSince creating a more generic type, here, I figured, while the behavior of just returning a null value and not killing authentication entirely is fine for the CAS extension, it may not be desirable across the board for whatever stuff may come later that might use this property, so instead of returning null, here, I'm throwing GuacamoleException.  This means that, if those exceptions are thrown while CAS is using this property, it'll kill CAS authentication if this Cipher property fails to parse for one of these reasons.  I consider that behavior less desirable than just not having the password available to the user, as authentication has technically still succeeded.\r\n\r\nI suppose I could capture the GuacamoleException inside the CAS module when pulling this property and just return null instead of allowing the GuacamoleException to pass through..."", 'commenter': 'necouchman'}, {'comment': ""> ... so instead of returning null, here, I'm throwing GuacamoleException.\r\n\r\nSounds good. I'm always in favor of strict error handling, though [`GuacamoleServerException`](http://guacamole.incubator.apache.org/doc/guacamole-common/org/apache/guacamole/GuacamoleServerException.html) may be a better choice.\r\n\r\n> This means that, if those exceptions are thrown while CAS is using this property, it'll kill CAS authentication if this Cipher property fails to parse for one of these reasons. I consider that behavior less desirable than just not having the password available to the user, as authentication has technically still succeeded.\r\n\r\nIs it expected that this will occasionally fail under normal (not misconfigured) conditions? If not, I'd think the administrator would rather be able to rely on all-or-nothing, predictable behavior, particularly if relying on this feature.\r\n\r\n> I suppose I could capture the GuacamoleException inside the CAS module when pulling this property and just return null instead of allowing the GuacamoleException to pass through...\r\n\r\nThat would depend on which is worse: having a partially-functional system, where explicitly-enabled functionality is mysteriously non-functional, or having a disabled system, where authentication fails entirely until everything which has been explicitly enabled is actually functional."", 'commenter': 'mike-jumper'}, {'comment': ""> Is it expected that this will occasionally fail under normal (not misconfigured) conditions?\r\n\r\nThe more I think about it, the more I think this probably would not fail under anything but a misconfiguration.  In order to get ClearPass to work in CAS you have to generate public and private keys, and configure a service in CAS specifically to support the encryption of the stored password, so anyone who is setting this up also has to be setting up the CAS side of things, and if they get it wrong, well, it probably shouldn't work at all.  I'll change the exception to GuacamoleServerException and stick with failing authentication if this fails."", 'commenter': 'necouchman'}, {'comment': ""So, I've redone most of this such that it throws the GuacamoleServerException.  There are two scenarios I can think of where having authentication succeed despite some error in the ClearPass decryption process would be desirable:\r\n- If the credentials object is provided by the CAS server, but the Guacamole admin has not configured a private key, I think authentication should still succeed.  Since, in many organizations, SSO is run by someone different than a VDI/Desktop/RemoteAccess person, it's conceivable that the CAS server may provide something we choose not to consume, and that should not cause an error.\r\n- Where the Guacamole admin has configured a PrivateKey, but CAS is not providing a value for the credential parameter.  Again, with the potential for CAS and Guacamole to be run by different admins/groups, or for different users within CAS to have different policies applied, it's conceivable that the GuacamoleAdmin configures a PrivateKey file for this purpose, but the attribute is blank/null.\r\n\r\nIs my logic sound there?"", 'commenter': 'necouchman'}]"
183,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -68,4 +70,20 @@ public String getRedirectURI() throws GuacamoleException {
         return environment.getRequiredProperty(CASGuacamoleProperties.CAS_REDIRECT_URI);
     }
 
+    /**
+     * Returns the path to the file that contains the private key
+     * used to decrypt the credential that is sent encrypted by CAS,
+     * or null if no key is defined.
+     *
+     * @return
+     *     The path to the private key to decrypt the ClearPass
+     *     credential returned by CAS.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public Cipher getClearpassCipher() throws GuacamoleException {
+        return environment.getProperty(CASGuacamoleProperties.CAS_CLEARPASS_KEY);
+    }
+","[{'comment': ""Taking a key argument and calling this a cipher property feels a little kludgy.  Kind of goes along with the question about how far the Cipher property should go or if that's even really a good name/function for it."", 'commenter': 'necouchman'}, {'comment': 'I would tend to agree there. Why not `PrivateKey`?', 'commenter': 'mike-jumper'}, {'comment': ""Yeah, PrivateKey is probably a better route to go, and just keep the Cipher pieces of it in the CAS extension code.  I'll try to rework this a little bit."", 'commenter': 'necouchman'}, {'comment': 'Refactored as PrivateKey.', 'commenter': 'necouchman'}]"
184,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleAuthenticationRejectedException.java,"@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ *
+ */
+
+package org.apache.guacamole;
+
+/**
+ * An exception thrown when a successful authentication is rejected by a
+ * AuthenticationSuccessListener in an extension.
+ */
+public class GuacamoleAuthenticationRejectedException","[{'comment': ""Any particular reason you're implementing a new exception instead of using one of the existing ones, like GuacamoleInvalidCredentialsException?  You can set custom messages for the existing exceptions, so if all you're doing is calling the exception and putting in a custom message, would probably be best to just call the existing exceptions.  I glanced at the existing exceptions, and most of them have at least custom status codes that get passed over to the web application."", 'commenter': 'necouchman'}, {'comment': ""It was a judgement call. I subtyped existing exceptions to get status codes that should be appropriate for these cases, but was uncomfortable making assumptions about how the existing exception types might be interpreted in `catch` clauses. \r\n\r\nI'd argue that there is something fundamentally different about an API user providing an incorrect credential vs. an extension deciding that a successful authentication should be rejected. For that reason, I think a different exception type is appropriate. But I'm happy to change the code to reuse existing exceptions if that's preferred."", 'commenter': 'ceharris'}, {'comment': ""For the authentication case, there is no need for any sort of listener. This sort of veto/monitoring functionality is already present in the auth system, and is the mechanism by which things like multi-factor authentication have been implemented.\r\n\r\nTake the Duo extension, for example:\r\n\r\nhttps://github.com/apache/incubator-guacamole-client/blob/a5ebc07349bcf43c80f404836d9964ac894bed26/extensions/guacamole-auth-duo/src/main/java/org/apache/guacamole/auth/duo/DuoAuthenticationProvider.java#L82-L96\r\n\r\nhttps://github.com/apache/incubator-guacamole-client/blob/a5ebc07349bcf43c80f404836d9964ac894bed26/extensions/guacamole-auth-duo/src/main/java/org/apache/guacamole/auth/duo/UserVerificationService.java#L53-L107\r\n\r\nIn the above, when the extension determines that the user needs to be verified via Duo's service, it throws an exception requesting additional credentials, implicitly halting the authentication process. This result trickles out in the response from the token REST endpoint, and the client renders a prompt requesting that they enter their code."", 'commenter': 'mike-jumper'}]"
184,guacamole/src/main/java/org/apache/guacamole/rest/auth/AuthenticationService.java,"@@ -232,11 +286,17 @@ private AuthenticatedUser getAuthenticatedUser(GuacamoleSession existingSession,
         try {
 
             // Re-authenticate user if session exists
-            if (existingSession != null)
-                return updateAuthenticatedUser(existingSession.getAuthenticatedUser(), credentials);
+            if (existingSession != null) {
+                AuthenticatedUser updatedUser = updateAuthenticatedUser(
+                        existingSession.getAuthenticatedUser(), credentials);
+                notifyAuthenticationSuccessListeners(updatedUser, existingSession);
+                return updatedUser;
+            }
 
             // Otherwise, attempt authentication as a new user
-            AuthenticatedUser authenticatedUser = AuthenticationService.this.authenticateUser(credentials);
+            AuthenticatedUser authenticatedUser = authenticateUser(credentials);","[{'comment': ""What's the reason for this change?  The original line shouldn't impact your addition of the notifyAuthenticationSuccessListeners() call, right?"", 'commenter': 'necouchman'}, {'comment': ""I suspect that my IDE noticed that the explicit `this` wasn't needed and removed it. I haven't looked at the history of this piece of code, but I suspect that it was previously refactored from a state in which defererencing `authenticateUser` in this way was necessary. I'm happy to revert this change if desired."", 'commenter': 'ceharris'}]"
184,guacamole/src/main/java/org/apache/guacamole/tunnel/TunnelRequestService.java,"@@ -58,6 +64,74 @@
     private AuthenticationService authenticationService;
 
     /**
+     * A service for notifying listeners about tunnel connect/closed events.
+     */
+    @Inject
+    private ListenerService listenerService;
+
+    /**
+     * Notifies bound TunnelConnectListeners that a new tunnel has been connected.
+     * Listeners are allowed to veto a connected tunnel by returning false from the
+     * listener method. If the ListenerService indicates that any listener rejected
+     * the tunnel, the tunnel is closed an GuacamoleTunnelRejectedException is thrown.
+     *
+     * @param userContext
+     *      The UserContext associated with the user for whom the tunnel is
+     *      being created.
+     *
+     * @param credentials
+     *      Credentials that authenticate the user
+     *
+     * @param tunnel
+     *      The tunnel that was connected
+     *
+     * @throws GuacamoleException
+     *     If thrown by a listener or if any listener vetoes the connected tunnel
+     */
+    private void notifyTunnelConnectListeners(UserContext userContext,
+            Credentials credentials, GuacamoleTunnel tunnel) throws GuacamoleException {
+        TunnelConnectEvent event = new TunnelConnectEvent(userContext, credentials, tunnel);
+        boolean ok = listenerService.tunnelConnected(event);
+        if (!ok) {","[{'comment': 'Why not just:\r\n`if (!listenerService.tunnelConnected(event)) {`\r\n??\r\n\r\nIn fact, you did this in the next method down...', 'commenter': 'necouchman'}]"
184,guacamole/src/main/java/org/apache/guacamole/tunnel/TunnelRequestService.java,"@@ -226,7 +300,7 @@ protected GuacamoleTunnel createConnectedTunnel(UserContext context,
      * @throws GuacamoleException
      *     If an error occurs while obtaining the tunnel.
      */
-    protected GuacamoleTunnel createAssociatedTunnel(GuacamoleTunnel tunnel,
+    protected GuacamoleTunnel createAssociatedTunnel(final GuacamoleTunnel tunnel,","[{'comment': 'Any particular reason for changing this to final, here?  Might be a good reason, just asking...', 'commenter': 'necouchman'}, {'comment': ""It gets referenced in the anonymous inner `UserTunnel` type. Previously, it wasn't referenced, so this didn't need to be final."", 'commenter': 'ceharris'}, {'comment': 'Ah, okay, got it!', 'commenter': 'necouchman'}]"
184,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleAuthenticationRejectedException.java,"@@ -0,0 +1,34 @@
+/*","[{'comment': 'Style issue here - should start with\r\n`/**`\r\n(two asterisks).', 'commenter': 'necouchman'}, {'comment': 'This is not a javadoc comment and should not start with two asterisks. Checking the other license headers in the project, I found none that were written with two leading asterisks.', 'commenter': 'ceharris'}, {'comment': 'Yes, you are correct.  Sorry about that...', 'commenter': 'necouchman'}]"
184,guacamole/src/main/java/org/apache/guacamole/extension/AuthenticationProviderFacade.java,"@@ -66,58 +65,8 @@
      *     The AuthenticationProvider subclass to instantiate.
      */
     public AuthenticationProviderFacade(Class<? extends AuthenticationProvider> authProviderClass) {
-
-        AuthenticationProvider instance = null;
-        
-        try {
-            // Attempt to instantiate the authentication provider
-            instance = authProviderClass.getConstructor().newInstance();
-        }
-        catch (NoSuchMethodException e) {
-            logger.error(""The authentication extension in use is not properly defined. ""
-                       + ""Please contact the developers of the extension or, if you ""
-                       + ""are the developer, turn on debug-level logging."");
-            logger.debug(""AuthenticationProvider is missing a default constructor."", e);
-        }
-        catch (SecurityException e) {
-            logger.error(""The Java security mananager is preventing authentication extensions ""
-                       + ""from being loaded. Please check the configuration of Java or your ""
-                       + ""servlet container."");
-            logger.debug(""Creation of AuthenticationProvider disallowed by security manager."", e);
-        }
-        catch (InstantiationException e) {
-            logger.error(""The authentication extension in use is not properly defined. ""
-                       + ""Please contact the developers of the extension or, if you ""
-                       + ""are the developer, turn on debug-level logging."");
-            logger.debug(""AuthenticationProvider cannot be instantiated."", e);
-        }
-        catch (IllegalAccessException e) {
-            logger.error(""The authentication extension in use is not properly defined. ""
-                       + ""Please contact the developers of the extension or, if you ""
-                       + ""are the developer, turn on debug-level logging."");
-            logger.debug(""Default constructor of AuthenticationProvider is not public."", e);
-        }
-        catch (IllegalArgumentException e) {
-            logger.error(""The authentication extension in use is not properly defined. ""
-                       + ""Please contact the developers of the extension or, if you ""
-                       + ""are the developer, turn on debug-level logging."");
-            logger.debug(""Default constructor of AuthenticationProvider cannot accept zero arguments."", e);
-        } 
-        catch (InvocationTargetException e) {
-
-            // Obtain causing error - create relatively-informative stub error if cause is unknown
-            Throwable cause = e.getCause();
-            if (cause == null)
-                cause = new GuacamoleException(""Error encountered during initialization."");
-            
-            logger.error(""Authentication extension failed to start: {}"", cause.getMessage());
-            logger.debug(""AuthenticationProvider instantiation failed."", e);
-
-        }
-       
-        // Associate instance, if any
-        authProvider = instance;
-
+        authProvider = ProviderFactory.newInstance(""authentication provider"",
+            authProviderClass);","[{'comment': ""Not sure I understand the reason for getting rid of all of this stuff and replacing it with the single line?  I believe I see the commit log associated with this, but not sure why I understand that it's important that the debug logging be done in there vs. in here.\r\n\r\nI'm relatively new to Java programming, so there may be a good reason for it...just asking :-)."", 'commenter': 'necouchman'}, {'comment': 'Pulled it out so that the same logic could be reused by `ListenerFacade` rather than duplicating it.', 'commenter': 'ceharris'}]"
184,guacamole/src/main/java/org/apache/guacamole/rest/event/ListenerService.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ *
+ */
+
+package org.apache.guacamole.rest.event;
+
+import com.google.inject.Inject;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.extension.ListenerProvider;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationSuccessEvent;
+import org.apache.guacamole.net.event.TunnelCloseEvent;
+import org.apache.guacamole.net.event.TunnelConnectEvent;
+import org.apache.guacamole.net.event.listener.AuthenticationFailureListener;
+import org.apache.guacamole.net.event.listener.AuthenticationSuccessListener;
+import org.apache.guacamole.net.event.listener.TunnelCloseListener;
+import org.apache.guacamole.net.event.listener.TunnelConnectListener;
+
+import java.util.List;
+
+/**
+ * A service used to notify listeners registered by extensions when events of
+ * interest occur.
+ *
+ * @author Carl Harris","[{'comment': ""We don't do @author tags, anymore."", 'commenter': 'necouchman'}]"
184,guacamole/src/main/java/org/apache/guacamole/rest/event/ListenerService.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ *
+ */
+
+package org.apache.guacamole.rest.event;
+
+import com.google.inject.Inject;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.extension.ListenerProvider;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationSuccessEvent;
+import org.apache.guacamole.net.event.TunnelCloseEvent;
+import org.apache.guacamole.net.event.TunnelConnectEvent;
+import org.apache.guacamole.net.event.listener.AuthenticationFailureListener;
+import org.apache.guacamole.net.event.listener.AuthenticationSuccessListener;
+import org.apache.guacamole.net.event.listener.TunnelCloseListener;
+import org.apache.guacamole.net.event.listener.TunnelConnectListener;
+
+import java.util.List;
+
+/**
+ * A service used to notify listeners registered by extensions when events of
+ * interest occur.
+ *
+ * @author Carl Harris
+ */
+public class ListenerService implements ListenerProvider {
+
+    @Inject
+    private List<ListenerProvider> listeners;
+
+    /**
+     * Notifies all bound listeners of an authentication success event. Listeners
+     * are allowed to veto a successful authentication by returning false from the
+     * listener method. Regardless of whether a particular listener rejects the
+     * successful authentication, all listeners are notified.
+     * @param e
+     *      The AuthenticationSuccessEvent describing the successful authentication
+     *      that just occurred.
+     *
+     * @return
+     *      false if any bound listener returns false, else true
+     *
+     * @throws GuacamoleException
+     *      If any bound listener throws this exception. If a listener throws an exception
+     *      some listeners may not receive the authentication success event notification.
+     */
+    @Override
+    public boolean authenticationSucceeded(AuthenticationSuccessEvent e)
+            throws GuacamoleException {
+        boolean result = true;
+        for (AuthenticationSuccessListener listener : listeners) {
+            result = result && listener.authenticationSucceeded(e);
+        }
+        return result;
+    }
+
+    /**
+     * Notifies all bound listeners of an authentication failure event.
+     *
+     * @param e
+     *      The AuthenticationSuccessEvent describing the authentication failure
+     *      that just occurred.
+     *
+     * @throws GuacamoleException
+     *      If any bound listener throws this exception. If a listener throws an exception
+     *      some listeners may not receive the authentication failure event notification.
+     */
+    @Override
+    public void authenticationFailed(AuthenticationFailureEvent e)
+            throws GuacamoleException {
+        for (AuthenticationFailureListener listener : listeners) {
+            listener.authenticationFailed(e);
+        }
+    }
+
+    /**
+     * Notifies all bound listeners of an tunnel connected event. Listeners
+     * are allowed to veto a tunnel connection by returning false from the
+     * listener method. Regardless of whether a particular listener rejects the
+     * tunnel connection, all listeners are notified.
+     * @param e","[{'comment': 'Style: add line spacing here.', 'commenter': 'necouchman'}]"
184,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleAuthenticationRejectedException.java,"@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ *
+ */","[{'comment': 'Extra line...', 'commenter': 'necouchman'}]"
184,guacamole-ext/src/main/java/org/apache/guacamole/net/event/listener/AuthenticationFailureListener.java,"@@ -27,8 +27,7 @@
  * after a user's authentication attempt fails. Note that this hook cannot
  * be used to cancel the authentication failure.
  */
-public interface AuthenticationFailureListener  {
-
+public interface AuthenticationFailureListener extends Listener {
     /**","[{'comment': 'Style: probably should leave the line spacing here.', 'commenter': 'necouchman'}]"
184,guacamole-ext/src/main/java/org/apache/guacamole/net/event/listener/Listener.java,"@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ *
+ */
+
+package org.apache.guacamole.net.event.listener;
+
+/**
+ * A marker interface extended by all listener types. This interface is used
+ * simply to validate that a listener class identified in an extension
+ * actually implements some listener interface.
+ */
+public interface Listener {
+}","[{'comment': 'Style: probably should have a blank line here.', 'commenter': 'necouchman'}]"
184,guacamole/src/main/java/org/apache/guacamole/extension/Extension.java,"@@ -35,6 +35,8 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipException;
 import java.util.zip.ZipFile;
+","[{'comment': 'Style: remove extra line.', 'commenter': 'necouchman'}]"
184,guacamole/src/main/java/org/apache/guacamole/extension/ListenerProvider.java,"@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ *
+ */
+
+package org.apache.guacamole.extension;
+
+import org.apache.guacamole.net.event.listener.AuthenticationFailureListener;
+import org.apache.guacamole.net.event.listener.AuthenticationSuccessListener;
+import org.apache.guacamole.net.event.listener.TunnelCloseListener;
+import org.apache.guacamole.net.event.listener.TunnelConnectListener;
+
+/**
+ * A provider of an event listener. While an implementation of this interface
+ * must implement all of the specified listener interfaces, an implementation
+ * may selectively deliver event notifications to an underlying delegate based
+ * on the specific listener interfaces implemented by the delegate.
+ */
+public interface ListenerProvider extends AuthenticationSuccessListener,
+        AuthenticationFailureListener, TunnelConnectListener,
+        TunnelCloseListener {
+}","[{'comment': 'Style: add a space here, I think....', 'commenter': 'necouchman'}]"
184,guacamole/src/main/java/org/apache/guacamole/rest/auth/AuthenticationService.java,"@@ -208,6 +218,50 @@ private AuthenticatedUser updateAuthenticatedUser(AuthenticatedUser authenticate
     }
 
     /**
+     * Notify all bound AuthenticationSuccessListeners that a successful authentication
+     * has occurred. If any of the bound listeners returns false (indicating that the
+     * authentication should be rejected) a GuacamoleRejectedAuthenticationException is
+     * thrown.
+     *
+     * @param authenticatedUser
+     *      The user that was successfully authenticated
+     * @param session
+     *      Existing session for the user (if any)
+     * @throws GuacamoleException
+     *      If a filter throws an exception or if any filter rejects the authentication
+     */
+    private void notifyAuthenticationSuccessListeners(
+            AuthenticatedUser authenticatedUser, GuacamoleSession session)
+            throws GuacamoleException {
+        UserContext userContext = null;","[{'comment': 'Style nit-pick: Probably good to add a space above this line between the header and body of the method.', 'commenter': 'necouchman'}]"
184,guacamole/src/main/java/org/apache/guacamole/rest/event/ListenerService.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ *
+ */
+
+package org.apache.guacamole.rest.event;
+
+import com.google.inject.Inject;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.extension.ListenerProvider;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationSuccessEvent;
+import org.apache.guacamole.net.event.TunnelCloseEvent;
+import org.apache.guacamole.net.event.TunnelConnectEvent;
+import org.apache.guacamole.net.event.listener.AuthenticationFailureListener;
+import org.apache.guacamole.net.event.listener.AuthenticationSuccessListener;
+import org.apache.guacamole.net.event.listener.TunnelCloseListener;
+import org.apache.guacamole.net.event.listener.TunnelConnectListener;
+
+import java.util.List;","[{'comment': 'This should go in alphabetical order, like the rest of them.', 'commenter': 'necouchman'}]"
184,guacamole/src/main/java/org/apache/guacamole/rest/event/ListenerService.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ *
+ */
+
+package org.apache.guacamole.rest.event;
+
+import com.google.inject.Inject;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.extension.ListenerProvider;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationSuccessEvent;
+import org.apache.guacamole.net.event.TunnelCloseEvent;
+import org.apache.guacamole.net.event.TunnelConnectEvent;
+import org.apache.guacamole.net.event.listener.AuthenticationFailureListener;
+import org.apache.guacamole.net.event.listener.AuthenticationSuccessListener;
+import org.apache.guacamole.net.event.listener.TunnelCloseListener;
+import org.apache.guacamole.net.event.listener.TunnelConnectListener;
+
+import java.util.List;
+
+/**
+ * A service used to notify listeners registered by extensions when events of
+ * interest occur.
+ *
+ * @author Carl Harris
+ */
+public class ListenerService implements ListenerProvider {
+
+    @Inject
+    private List<ListenerProvider> listeners;
+
+    /**
+     * Notifies all bound listeners of an authentication success event. Listeners
+     * are allowed to veto a successful authentication by returning false from the
+     * listener method. Regardless of whether a particular listener rejects the
+     * successful authentication, all listeners are notified.
+     * @param e
+     *      The AuthenticationSuccessEvent describing the successful authentication
+     *      that just occurred.
+     *
+     * @return
+     *      false if any bound listener returns false, else true
+     *
+     * @throws GuacamoleException
+     *      If any bound listener throws this exception. If a listener throws an exception
+     *      some listeners may not receive the authentication success event notification.
+     */
+    @Override
+    public boolean authenticationSucceeded(AuthenticationSuccessEvent e)
+            throws GuacamoleException {
+        boolean result = true;
+        for (AuthenticationSuccessListener listener : listeners) {
+            result = result && listener.authenticationSucceeded(e);
+        }
+        return result;","[{'comment': 'Any reason not to do something like:\r\n```    \r\nfor (AuthenticationSuccessListener listener : listeners)\r\n    if (!listener.authenticationSucceeded(e))\r\n        return false;\r\nreturn true;\r\n```\r\nhere, and get rid of the extra boolean variable?  Same below in the tunnelConnected() and tunnelClosed() methods.', 'commenter': 'necouchman'}, {'comment': ""Doing so would result in other listeners not being notified when some listener determines that an authentication should be rejected. That seems inconsistent with the the concept of `listener`. For example, you might have listeners that are passing messages to external systems when an authentication success occurs and want/need to get that notification even if a some filter decides to reject the successful authentication. I documented the behavior in the preceding doc comment, and noted in the PR that the listener API doesn't really discuss the expected behavior."", 'commenter': 'ceharris'}]"
184,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleAuthenticationRejectedException.java,"@@ -0,0 +1,33 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.guacamole;
+
+/**
+ * An exception thrown when a successful authentication is rejected by a
+ * AuthenticationSuccessListener in an extension.
+ */
+public class GuacamoleAuthenticationRejectedException
+    extends GuacamoleSecurityException {
+
+    public GuacamoleAuthenticationRejectedException() {","[{'comment': ""I haven't yet checked whether these exceptions make sense as API changes overall, but beware that the constructors of all classes need to be documented with javadoc, including exceptions.\r\n\r\nIt is also standard convention to provide the message, message/cause, and cause constructors. It would be odd if these exceptions are the only exceptions in the Guacamole API which deviate from that convention, instead providing their own default message.\r\n\r\nSee:\r\n\r\nhttps://github.com/apache/incubator-guacamole-client/blob/a5ebc07349bcf43c80f404836d9964ac894bed26/guacamole-common/src/main/java/org/apache/guacamole/GuacamoleResourceClosedException.java#L30-L62"", 'commenter': 'mike-jumper'}]"
184,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleTunnelConnectedException.java,"@@ -0,0 +1,32 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.guacamole;
+
+/**
+ * An exception thrown when a request to close a tunnel is vetoed by a
+ * TunnelCloseListener in an extension.
+ */
+public class GuacamoleTunnelConnectedException extends GuacamoleClientException {
+
+    public GuacamoleTunnelConnectedException() {","[{'comment': 'I would similarly question the utility of the tunnel-specific exceptions. In my view, simply specifying that throwing any `GuacamoleException` will veto the in-progress operation (as is currently done with auth) would be cleaner, as well as in-line with established patterns.', 'commenter': 'mike-jumper'}]"
184,guacamole-ext/src/main/java/org/apache/guacamole/net/event/listener/Listener.java,"@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.guacamole.net.event.listener;
+
+/**
+ * A marker interface extended by all listener types. This interface is used","[{'comment': 'I would fall on the ""marker interface is an anti-pattern"" side of the fence. If there is no shared functional interface between these listeners, then we shouldn\'t be defining a contract which states that there is.\r\n\r\nThat said, if it feels wrong to not have some common ancestor, then perhaps there *should* be a shared functional interface? At the moment, the only barrier I see preventing a common function for handling events is the variation on whether a handler is `void` or `boolean`, but there may be a better approach than the way things were done in the early guac days. Doing so would simplify the way these events get fired, and would avoid all the `instanceof` checks and casting.', 'commenter': 'mike-jumper'}, {'comment': 'In fact ... if things move toward the style of veto used by the rest of the auth system (throw a `GuacamoleException` to abort the operation), then there definitely could be a common event handler, as there would be no need to rely on a `boolean` return value.', 'commenter': 'mike-jumper'}]"
184,guacamole-ext/src/main/java/org/apache/guacamole/net/event/listener/AuthenticationFailureListener.java,"@@ -26,8 +26,12 @@
  * A listener whose authenticationFailed() hook will fire immediately
  * after a user's authentication attempt fails. Note that this hook cannot
  * be used to cancel the authentication failure.
+ *
+ * @deprecated
+ *      Listeners should instead implement the {@link Listener} interface","[{'comment': 'Missing period.', 'commenter': 'mike-jumper'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -111,6 +113,29 @@ public LDAPConnection bindAs(String userDN, String password)
         // Obtain appropriately-configured LDAPConnection instance
         LDAPConnection ldapConnection = createLDAPConnection();
 
+        // Configure LDAP connection constraints
+        LDAPConstraints ldapConstraints = ldapConnection.getConstraints();
+        if (ldapConstraints == null)
+          ldapConstraints = new LDAPConstraints();
+
+        // Set whether or not we follow referrals
+        ldapConstraints.setReferralFollowing(confService.getFollowReferrals());
+
+        // If the referral auth method is set to bind, we set it using the existing
+        // username and password.
+        String refAuthMethod = confService.getReferralAuthentication();
+        if (refAuthMethod != null && refAuthMethod.equals(""bind""))
+            ldapConstraints.setReferralHandler(new ReferralAuthHandler(userDN, password));","[{'comment': ""So, what's the idea behind configuring whether referrals auth with the same credentials?"", 'commenter': 'mike-jumper'}, {'comment': ""I believe it's the difference between using the credentials that the user logged in with vs. using the credentials specified in the guacamole.properties file, if any.  So, in some cases it'll be the difference between an anonymous bind and an authenticated bind, in other cases it'll be the difference between binding with the configured search user vs. the logged in user.\r\n\r\nThere are cases where the user who logged in may not have access to the entire tree, or even the base of the tree, so you'd want the search & referral following to happen under that user account instead of the logged in account.\r\n\r\nAt least, that's the theory, I think...whether or not I've actually implemented it that way, I probably should go back and take another look and make sure.\r\n\r\nEDIT:\r\nOn further review, looks like it's just the difference between an anonymous search and using the configured search credentials.  So, I should probably just get rid of this property, and, if search credentials are configured, use that, otherwise use anonymous."", 'commenter': 'necouchman'}, {'comment': ""Okay, I configured it to just use the search credentials.\r\n\r\nThe one situation that I thought about here that you might want the ability to configure separate referral credentials is where you know you have a situation where your base LDAP tree points to another system, and the credentials are different on the referred to system than they are on the base system.  This is somewhat of a corner case, and I think it unlikely there are just huge numbers of people running that, but it's worth keeping in mind for future discussions.  In that case, however, just having this parameter - ldap-referral-auth - wouldn't be enough - you'd also want to ability to configure a separate username and password for the referrals, so you'd end up adding a couple more parameters."", 'commenter': 'necouchman'}, {'comment': ""Well, to clarify a bit, there are two types of searches which may occur in the LDAP auth:\r\n\r\n* The search performed to resolve the user's DN. This is the only case where the search DN and password are used.\r\n* The search to retrieve the users and/or connections defined within LDAP and accessible to the user that authenticated. These searches naturally **must** use the user's own DN and password, since part of the point of the LDAP auth is to allow the LDAP directory's own access control to take effect.\r\n\r\nIf users or connections cannot be retrieved via LDAP because the authenticated user cannot access them, then they shouldn't have access, referral or not."", 'commenter': 'mike-jumper'}, {'comment': ""Yeah, I see what you're saying.  The changes here should be consistent with that - the referral authentication just uses what is passed in to the bindAs method for userDN and password, which, for the initial user search will be the search credentials, and subsequently will be the retrieved userDN and the password used for authentication."", 'commenter': 'necouchman'}, {'comment': 'Ah, OK then.', 'commenter': 'mike-jumper'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -111,6 +113,28 @@ public LDAPConnection bindAs(String userDN, String password)
         // Obtain appropriately-configured LDAPConnection instance
         LDAPConnection ldapConnection = createLDAPConnection();
 
+        // Configure LDAP connection constraints
+        LDAPConstraints ldapConstraints = ldapConnection.getConstraints();
+        if (ldapConstraints == null)
+          ldapConstraints = new LDAPConstraints();
+
+        // Set whether or not we follow referrals
+        ldapConstraints.setReferralFollowing(confService.getFollowReferrals());
+
+        // If the referral auth method is set to bind, we set it using the existing","[{'comment': 'With the removal of the auth method property, this comment is no longer correct.', 'commenter': 'mike-jumper'}, {'comment': 'Corrected.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ReferralAuthHandler.java,"@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import com.google.inject.Inject;
+import com.novell.ldap.LDAPAuthHandler;
+import com.novell.ldap.LDAPAuthProvider;
+import com.novell.ldap.LDAPConnection;
+import java.io.UnsupportedEncodingException;
+import org.apache.guacamole.GuacamoleException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ReferralAuthHandler implements LDAPAuthHandler {","[{'comment': 'JavaDoc missing for this class.', 'commenter': 'mike-jumper'}, {'comment': 'Added.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ReferralAuthHandler.java,"@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import com.google.inject.Inject;
+import com.novell.ldap.LDAPAuthHandler;
+import com.novell.ldap.LDAPAuthProvider;
+import com.novell.ldap.LDAPConnection;
+import java.io.UnsupportedEncodingException;
+import org.apache.guacamole.GuacamoleException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ReferralAuthHandler implements LDAPAuthHandler {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(ReferralAuthHandler.class);
+
+    /**
+     * The LDAPAuthProvider object that will be set and returned to the referral handler.
+     */
+    private final LDAPAuthProvider ldapAuth;
+
+    /**
+     * Service for retrieving LDAP server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    public ReferralAuthHandler() throws GuacamoleException {
+        String binddn = confService.getSearchBindDN();
+        String password = confService.getSearchBindPassword();
+        byte[] passwordBytes;
+        try {
+
+            // Convert password into corresponding byte array
+            if (password != null)
+                passwordBytes = password.getBytes(""UTF-8"");
+            else
+                passwordBytes = null;
+
+        }
+        catch (UnsupportedEncodingException e) {
+            logger.error(""Unexpected lack of support for UTF-8: {}"", e.getMessage());
+            logger.debug(""Support for UTF-8 (as required by Java spec) not found."", e);
+            throw new GuacamoleException(""Could not set password due to missing support for UTF-8 encoding."");
+        }
+
+        ldapAuth = new LDAPAuthProvider(binddn, passwordBytes);
+
+    }
+
+    public ReferralAuthHandler(String dn, String password) throws GuacamoleException {","[{'comment': 'Missing JavaDoc.', 'commenter': 'mike-jumper'}, {'comment': 'Added.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ReferralAuthHandler.java,"@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import com.google.inject.Inject;
+import com.novell.ldap.LDAPAuthHandler;
+import com.novell.ldap.LDAPAuthProvider;
+import com.novell.ldap.LDAPConnection;
+import java.io.UnsupportedEncodingException;
+import org.apache.guacamole.GuacamoleException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ReferralAuthHandler implements LDAPAuthHandler {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(ReferralAuthHandler.class);
+
+    /**
+     * The LDAPAuthProvider object that will be set and returned to the referral handler.
+     */
+    private final LDAPAuthProvider ldapAuth;
+
+    /**
+     * Service for retrieving LDAP server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    public ReferralAuthHandler() throws GuacamoleException {
+        String binddn = confService.getSearchBindDN();
+        String password = confService.getSearchBindPassword();
+        byte[] passwordBytes;","[{'comment': 'Rather than copy the entire body of the other constructor, you can invoke it here. You would do:\r\n\r\n    this(confService.getSearchBindDN(), confService.getSearchBindPassword());', 'commenter': 'mike-jumper'}, {'comment': 'Removed this constructor.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ReferralAuthHandler.java,"@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import com.google.inject.Inject;
+import com.novell.ldap.LDAPAuthHandler;
+import com.novell.ldap.LDAPAuthProvider;
+import com.novell.ldap.LDAPConnection;
+import java.io.UnsupportedEncodingException;
+import org.apache.guacamole.GuacamoleException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ReferralAuthHandler implements LDAPAuthHandler {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(ReferralAuthHandler.class);
+
+    /**
+     * The LDAPAuthProvider object that will be set and returned to the referral handler.
+     */
+    private final LDAPAuthProvider ldapAuth;
+
+    /**
+     * Service for retrieving LDAP server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+
+    public ReferralAuthHandler() throws GuacamoleException {","[{'comment': ""I don't see this constructor used anywhere. Perhaps it's no longer needed?"", 'commenter': 'mike-jumper'}, {'comment': 'Removed.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ReferralAuthHandler.java,"@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import com.google.inject.Inject;
+import com.novell.ldap.LDAPAuthHandler;
+import com.novell.ldap.LDAPAuthProvider;
+import com.novell.ldap.LDAPConnection;
+import java.io.UnsupportedEncodingException;
+import org.apache.guacamole.GuacamoleException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ReferralAuthHandler implements LDAPAuthHandler {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(ReferralAuthHandler.class);
+
+    /**
+     * The LDAPAuthProvider object that will be set and returned to the referral handler.
+     */
+    private final LDAPAuthProvider ldapAuth;
+
+    /**
+     * Service for retrieving LDAP server configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;","[{'comment': ""Beware that, despite the `@Inject` annotation, this will not happen automatically upon construction. Guice will only perform the injection via a `Provider`, or if the various constructors are properly annotated for assisted injection, which is complex.\r\n\r\nIf the default constructor is the only place this is used, and that constructor is not called anyway, I'd suggest simply getting rid of both."", 'commenter': 'mike-jumper'}, {'comment': 'Removed.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -251,8 +270,23 @@ private String getConnectionSearchFilter(String userDN,
             // The guacConfig group uses the seeAlso attribute to refer
             // to these other groups
             while (userRoleGroupResults.hasMore()) {
-                LDAPEntry entry = userRoleGroupResults.next();
-                connectionSearchFilter.append(""(seeAlso="").append(escapingService.escapeLDAPSearchFilter(entry.getDN())).append("")"");
+                try {
+                    LDAPEntry entry = userRoleGroupResults.next();
+                    connectionSearchFilter.append(""(seeAlso="").append(escapingService.escapeLDAPSearchFilter(entry.getDN())).append("")"");
+                }
+
+                catch (LDAPReferralException e) {
+                    if (confService.getFollowReferrals()) {
+                        logger.error(""Could not follow referral."", e.getMessage());","[{'comment': 'If you want this message to be logged, you\'ll need to include `{}` within the string to define the location for the value to be inserted. For example:\r\n\r\n    logger.error(""Could not follow referral: {}"", e.getMessage());\r\n\r\nSame thing for the other new logging statements within these changes.', 'commenter': 'mike-jumper'}, {'comment': 'Corrected.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -251,8 +270,23 @@ private String getConnectionSearchFilter(String userDN,
             // The guacConfig group uses the seeAlso attribute to refer
             // to these other groups
             while (userRoleGroupResults.hasMore()) {
-                LDAPEntry entry = userRoleGroupResults.next();
-                connectionSearchFilter.append(""(seeAlso="").append(escapingService.escapeLDAPSearchFilter(entry.getDN())).append("")"");
+                try {
+                    LDAPEntry entry = userRoleGroupResults.next();
+                    connectionSearchFilter.append(""(seeAlso="").append(escapingService.escapeLDAPSearchFilter(entry.getDN())).append("")"");
+                }
+
+                catch (LDAPReferralException e) {
+                    if (confService.getFollowReferrals()) {
+                        logger.error(""Could not follow referral."", e.getMessage());
+                        logger.debug(""Error encountered trying to follow referral."", e);
+                        throw new GuacamoleServerException(""Could not follow LDAP referral."", e);
+                    }
+                    else {
+                        logger.warn(""Given a referral, but referrals are disabled."", e.getMessage());
+                        logger.debug(""Got a referral, but configured to not follow them."", e);
+                        continue;","[{'comment': 'Being the last statement in the loop, this `continue` has no effect.', 'commenter': 'mike-jumper'}, {'comment': 'Removed.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/UserService.java,"@@ -107,19 +108,37 @@ private void putAllUsers(Map<String, User> users, LDAPConnection ldapConnection,
             // Read all visible users
             while (results.hasMore()) {
 
-                LDAPEntry entry = results.next();
+                try {
+
+                    LDAPEntry entry = results.next();
+
+                    // Get username from record
+                    LDAPAttribute username = entry.getAttribute(usernameAttribute);
+                    if (username == null) {
+                        logger.warn(""Queried user is missing the username attribute \""{}\""."", usernameAttribute);
+                        continue;
+                    }
+
+                    // Store user using their username as the identifier
+                    String identifier = username.getStringValue();
+                    if (users.put(identifier, new SimpleUser(identifier)) != null)
+                        logger.warn(""Possibly ambiguous user account: \""{}\""."", identifier);
 
-                // Get username from record
-                LDAPAttribute username = entry.getAttribute(usernameAttribute);
-                if (username == null) {
-                    logger.warn(""Queried user is missing the username attribute \""{}\""."", usernameAttribute);
-                    continue;
                 }
 
-                // Store user using their username as the identifier
-                String identifier = username.getStringValue();
-                if (users.put(identifier, new SimpleUser(identifier)) != null)
-                    logger.warn(""Possibly ambiguous user account: \""{}\""."", identifier);
+                // Deal with errors trying to follow referrals
+                catch (LDAPReferralException e) {
+                    if (confService.getFollowReferrals()) {
+                        logger.error(""Could not follow referral."", e.getFailedReferral());
+                        logger.debug(""Error encountered trying to follow referral."", e);
+                        throw new GuacamoleServerException(""Could not follow LDAP referral."", e);
+                    }
+                    else {
+                        logger.warn(""Given a referral, but referrals are disabled."", e.getMessage());
+                        logger.debug(""Got a referral, but configured to not follow them."", e);
+                        continue;","[{'comment': 'Being the last statement in the loop, this `continue` has no effect.', 'commenter': 'mike-jumper'}, {'comment': 'Removed.', 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -251,8 +270,23 @@ private String getConnectionSearchFilter(String userDN,
             // The guacConfig group uses the seeAlso attribute to refer
             // to these other groups
             while (userRoleGroupResults.hasMore()) {
-                LDAPEntry entry = userRoleGroupResults.next();
-                connectionSearchFilter.append(""(seeAlso="").append(escapingService.escapeLDAPSearchFilter(entry.getDN())).append("")"");
+                try {
+                    LDAPEntry entry = userRoleGroupResults.next();
+                    connectionSearchFilter.append(""(seeAlso="").append(escapingService.escapeLDAPSearchFilter(entry.getDN())).append("")"");
+                }
+
+                catch (LDAPReferralException e) {
+                    if (confService.getFollowReferrals()) {
+                        logger.error(""Could not follow referral."", e.getMessage());
+                        logger.debug(""Error encountered trying to follow referral."", e);
+                        throw new GuacamoleServerException(""Could not follow LDAP referral."", e);","[{'comment': 'Recalling the changes proposed via #129, is it desirable that the entire search will abort with a failure if a referral error occurs? Or should the error be non-fatal and simply logged?', 'commenter': 'mike-jumper'}, {'comment': ""My thinking is that if you explicitly enable referral following, an error following the referrals should cause an abort, and if you disable it, you can log it and ignore it.  I'm not opposed to a non-fatal logging, here, though, if that makes more sense.  I don't know off the top of my head what the generally accepted behavior is for other implementations.\r\n\r\nIn the case of the issue with Active Directory, disabling referral following completely allows you to query it via LDAP correctly - having it disabled doesn't cut off expected results or anything like that."", 'commenter': 'necouchman'}, {'comment': ""@mike-jumper Any further thoughts on this, or opinions on which way it should go?  I'm not sure one way or the other - I do tend toward not wanting to break things if a single operation fails; however, I also think that if you're explicitly enabling it and it fails, you want a very clear indication that something is not working.  I see both sides, so I'm good going either way - it's easy enough to change down the road, and will get tweaked, anyway, when we switch LDAP APIs."", 'commenter': 'necouchman'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ReferralAuthHandler.java,"@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import com.google.inject.Inject;
+import com.novell.ldap.LDAPAuthHandler;
+import com.novell.ldap.LDAPAuthProvider;
+import com.novell.ldap.LDAPConnection;
+import java.io.UnsupportedEncodingException;
+import org.apache.guacamole.GuacamoleException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Class that implements the necessary authentication handling
+ * for following referrals in LDAP connections.
+ */
+public class ReferralAuthHandler implements LDAPAuthHandler {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(ReferralAuthHandler.class);
+
+    /**
+     * The LDAPAuthProvider object that will be set and returned to the referral handler.
+     */
+    private final LDAPAuthProvider ldapAuth;
+
+    /**
+     * Creates a ReferralAuthHandler object to handle authentication when
+     * following referrals in a LDAP connection, using the provided dn and
+     * password.
+     *
+     * @throws GuacamoleException
+     *     If exceptions are caught while converting the password from a string
+     *     into a byte array.
+     */
+    public ReferralAuthHandler(String dn, String password) throws GuacamoleException {
+        byte[] passwordBytes;
+        try {
+
+            // Convert password into corresponding byte array
+            if (password != null)
+                passwordBytes = password.getBytes(""UTF-8"");
+            else
+                passwordBytes = null;
+
+        }   
+        catch (UnsupportedEncodingException e) {
+            logger.error(""Unexpected lack of support for UTF-8: {}"", e.getMessage());
+            logger.debug(""Support for UTF-8 (as required by Java spec) not found."", e); 
+            throw new GuacamoleException(""Could not set password due to missing UTF-8 support."");","[{'comment': 'In general:\r\n\r\n1. Rather than throw the base `GuacamoleException`, we should be throwing an appropriate subclass. `GuacamoleServerException` would be a reasonable choice in this case.\r\n2. For any exception caused by another, [the constructor which includes the causing exception](http://guacamole.incubator.apache.org/doc/guacamole-common/org/apache/guacamole/GuacamoleServerException.html#GuacamoleServerException-java.lang.String-java.lang.Throwable-) should be used (rather than `new GuacamoleServerException(""message"")`, use `new GuacamoleServerException(""message"", e)`).\r\n\r\nThat said, since UTF-8 support is guaranteed by Java, there\'s no need for checked exceptions here. Something like `UnsupportedOperationException` might be more appropriate. For example:\r\n\r\nhttps://github.com/apache/incubator-guacamole-client/blob/0611fe8fff694dff7e3cb6a62918f6c90668728c/extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/form/CASTicketField.java#L80-L83', 'commenter': 'mike-jumper'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ReferralAuthHandler.java,"@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import com.google.inject.Inject;
+import com.novell.ldap.LDAPAuthHandler;
+import com.novell.ldap.LDAPAuthProvider;
+import com.novell.ldap.LDAPConnection;
+import java.io.UnsupportedEncodingException;
+import org.apache.guacamole.GuacamoleException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Class that implements the necessary authentication handling
+ * for following referrals in LDAP connections.
+ */
+public class ReferralAuthHandler implements LDAPAuthHandler {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(ReferralAuthHandler.class);
+
+    /**
+     * The LDAPAuthProvider object that will be set and returned to the referral handler.
+     */
+    private final LDAPAuthProvider ldapAuth;
+
+    /**
+     * Creates a ReferralAuthHandler object to handle authentication when
+     * following referrals in a LDAP connection, using the provided dn and
+     * password.
+     *
+     * @throws GuacamoleException
+     *     If exceptions are caught while converting the password from a string","[{'comment': '""If exceptions are caught"" doesn\'t really provide much information, and ""converting into a byte array"" is an internal concern. This may be a moot point if switching over to `UnsupportedOperationException` (see below), as the exception need not be declared in that case, but otherwise perhaps there is a way to describe the cases where exceptions will be thrown which does not reference internal implementation details?', 'commenter': 'mike-jumper'}]"
202,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -129,62 +130,79 @@
             Map<String, Connection> connections = new HashMap<String, Connection>();
             while (results.hasMore()) {
 
-                LDAPEntry entry = results.next();
+                try {
 
-                // Get common name (CN)
-                LDAPAttribute cn = entry.getAttribute(""cn"");
-                if (cn == null) {
-                    logger.warn(""guacConfigGroup is missing a cn."");
-                    continue;
-                }
+                    LDAPEntry entry = results.next();
 
-                // Get associated protocol
-                LDAPAttribute protocol = entry.getAttribute(""guacConfigProtocol"");
-                if (protocol == null) {
-                    logger.warn(""guacConfigGroup \""{}\"" is missing the ""
-                              + ""required \""guacConfigProtocol\"" attribute."",
-                            cn.getStringValue());
-                    continue;
-                }
+                    // Get common name (CN)
+                    LDAPAttribute cn = entry.getAttribute(""cn"");
+                    if (cn == null) {
+                        logger.warn(""guacConfigGroup is missing a cn."");
+                        continue;
+                    }
+
+                    // Get associated protocol
+                    LDAPAttribute protocol = entry.getAttribute(""guacConfigProtocol"");
+                    if (protocol == null) {
+                        logger.warn(""guacConfigGroup \""{}\"" is missing the ""
+                                  + ""required \""guacConfigProtocol\"" attribute."",
+                                cn.getStringValue());
+                        continue;
+                    }
 
-                // Set protocol
-                GuacamoleConfiguration config = new GuacamoleConfiguration();
-                config.setProtocol(protocol.getStringValue());
+                    // Set protocol
+                    GuacamoleConfiguration config = new GuacamoleConfiguration();
+                    config.setProtocol(protocol.getStringValue());
 
-                // Get parameters, if any
-                LDAPAttribute parameterAttribute = entry.getAttribute(""guacConfigParameter"");
-                if (parameterAttribute != null) {
+                    // Get parameters, if any
+                    LDAPAttribute parameterAttribute = entry.getAttribute(""guacConfigParameter"");
+                    if (parameterAttribute != null) {
 
-                    // For each parameter
-                    Enumeration<?> parameters = parameterAttribute.getStringValues();
-                    while (parameters.hasMoreElements()) {
+                        // For each parameter
+                        Enumeration<?> parameters = parameterAttribute.getStringValues();
+                        while (parameters.hasMoreElements()) {
 
-                        String parameter = (String) parameters.nextElement();
+                            String parameter = (String) parameters.nextElement();
 
-                        // Parse parameter
-                        int equals = parameter.indexOf('=');
-                        if (equals != -1) {
+                            // Parse parameter
+                            int equals = parameter.indexOf('=');
+                            if (equals != -1) {
 
-                            // Parse name
-                            String name = parameter.substring(0, equals);
-                            String value = parameter.substring(equals+1);
+                                // Parse name
+                                String name = parameter.substring(0, equals);
+                                String value = parameter.substring(equals+1);
 
-                            config.setParameter(name, value);
+                                config.setParameter(name, value);
+
+                            }
 
                         }
 
                     }
 
-                }
+                    // Filter the configuration, substituting all defined tokens
+                    tokenFilter.filterValues(config.getParameters());
 
-                // Filter the configuration, substituting all defined tokens
-                tokenFilter.filterValues(config.getParameters());
+                    // Store connection using cn for both identifier and name
+                    String name = cn.getStringValue();
+                    Connection connection = new SimpleConnection(name, name, config);
+                    connection.setParentIdentifier(LDAPAuthenticationProvider.ROOT_CONNECTION_GROUP);
+                    connections.put(name, connection);
 
-                // Store connection using cn for both identifier and name
-                String name = cn.getStringValue();
-                Connection connection = new SimpleConnection(name, name, config);
-                connection.setParentIdentifier(LDAPAuthenticationProvider.ROOT_CONNECTION_GROUP);
-                connections.put(name, connection);
+                }
+
+                // Deal with issues following LDAP referrals
+                catch (LDAPReferralException e) {
+                    if (confService.getFollowReferrals()) {
+                        logger.error(""Could not follow referral."", e.getFailedReferral());","[{'comment': 'If the intent is to include `e.getFailedReferral()` within the logged message, then the `{}` string must be present in the message at the location the value should be inserted.', 'commenter': 'mike-jumper'}]"
206,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/PrivateKeyGuacamoleProperty.java,"@@ -60,6 +60,7 @@ public PrivateKey parseValue(String value) throws GuacamoleServerException {
             for (int readBytes; (readBytes = keyStreamIn.read(keyBuffer)) != -1;)
                 keyStreamOut.write(keyBuffer, 0, readBytes);
 
+            keyStreamIn.close();","[{'comment': ""If `write()` or `read()` throws an exception, then this line will never be reached. You'll need something like:\r\n\r\n```\r\ntry {\r\n    // write() loop here\r\n}\r\nfinally {\r\n    keyStreamIn.close();\r\n}"", 'commenter': 'mike-jumper'}, {'comment': ""Well, that was fun.  Nested `try{}` blocks to correctly capture all of the possible exceptions.  I *think* this works out correctly...though it seems like you could still run into issues if you hit the IOException during the file close, but I can't really see any way to get around that."", 'commenter': 'necouchman'}]"
206,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/PrivateKeyGuacamoleProperty.java,"@@ -49,38 +49,44 @@ public PrivateKey parseValue(String value) throws GuacamoleServerException {
         if (value == null || value.isEmpty())
             return null;
 
+        FileInputStream keyStreamIn = null;
+
         try {
+            try {
 
-            // Open and read the file specified in the configuration.
-            File keyFile = new File(value);
-            FileInputStream keyStreamIn = new FileInputStream(keyFile);
-            ByteArrayOutputStream keyStreamOut = new ByteArrayOutputStream();
-            byte[] keyBuffer = new byte[1024];
+                // Open and read the file specified in the configuration.
+                File keyFile = new File(value);
+                keyStreamIn = new FileInputStream(keyFile);
+                ByteArrayOutputStream keyStreamOut = new ByteArrayOutputStream();
+                byte[] keyBuffer = new byte[1024];
 
-            for (int readBytes; (readBytes = keyStreamIn.read(keyBuffer)) != -1;)
-                keyStreamOut.write(keyBuffer, 0, readBytes);
+                for (int readBytes; (readBytes = keyStreamIn.read(keyBuffer)) != -1;)
+                    keyStreamOut.write(keyBuffer, 0, readBytes);
 
-            final byte[] keyBytes = keyStreamOut.toByteArray();
+                final byte[] keyBytes = keyStreamOut.toByteArray();
 
-            // Set up decryption infrastructure
-            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
-            KeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
-            return keyFactory.generatePrivate(keySpec);
+                // Set up decryption infrastructure
+                KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
+                KeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
+                return keyFactory.generatePrivate(keySpec);
 
-        }
-        catch (FileNotFoundException e) {
-            throw new GuacamoleServerException(""Could not find the specified key file."", e);
+            }
+            catch (FileNotFoundException e) {
+                throw new GuacamoleServerException(""Could not find the specified key file."", e);
+            }
+            catch (NoSuchAlgorithmException e) {
+                throw new GuacamoleServerException(""RSA algorithm is not available."", e);
+            }
+            catch (InvalidKeySpecException e) {
+                throw new GuacamoleServerException(""Key is not in expected PKCS8 encoding."", e);
+            }
+            finally {
+                keyStreamIn.close();","[{'comment': 'This will throw a `NullPointerException` if an exception occurs during the creation of `keyStreamIn`', 'commenter': 'mike-jumper'}, {'comment': 'Oops...had it in there, originally, and it got removed somewhere along the way.', 'commenter': 'necouchman'}]"
206,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/PrivateKeyGuacamoleProperty.java,"@@ -49,38 +49,45 @@ public PrivateKey parseValue(String value) throws GuacamoleServerException {
         if (value == null || value.isEmpty())
             return null;
 
+        FileInputStream keyStreamIn = null;
+
         try {
+            try {","[{'comment': 'Rather than nest `try` blocks and initialize with `null`, you could always just move the handling for `FileNotFoundException` up:\r\n\r\n    FileInputStream keyStreamIn;\r\n    try {\r\n        keyStreamIn = new FileInputStream(value);\r\n    }\r\n    catch (FileNotFoundException e) {\r\n        throw new GuacamoleServerException(""Could not find the specified key file."", e);\r\n    }\r\n\r\nSince `keyStreamIn` would then be guaranteed to be non-null, complexity of the rest would be reduced, and all you would need is a simple `close()` within a `finally` at the end, like you had before.', 'commenter': 'mike-jumper'}, {'comment': ""So, the problem I'm running into is that the `close()` operation can actually throw an `IOException`, which is why I have to nest the `try{}` statements.  Apparently with Java 7+ it gets a little easier, but 6 is a little onerous:\r\n\r\nhttps://stackoverflow.com/questions/156508/closing-a-java-fileinputstream"", 'commenter': 'necouchman'}, {'comment': 'Ah, indeed.', 'commenter': 'mike-jumper'}]"
210,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -215,6 +215,24 @@ Guacamole.HTTPTunnel = function(tunnelURL, crossDomain) {
     var receive_timeout = null;
 
     /**
+     * Additional headers to be sent in tunnel requests. This dictionary can be
+     * populated with key/value header pairs to pass information such as authentication
+     * tokens, etc.
+     */
+    var extraHeaders = {};","[{'comment': ""1. Declaring this via `var` produces a private variable, accessible only within the scope of this constructor. The `add_extra_headers()` function you've written will still work, but it's not accessing the `extraHeaders` declared here. If using this approach, `extraHeaders` will need to be defined as:\r\n\r\n       this.extraHeaders = {};\r\n\r\n2. Why not an optional parameter to the constructor, similar to `crossDomain`, rather than a public property?"", 'commenter': 'mike-jumper'}, {'comment': ""I just saw you mentioned:\r\n\r\n> I've also preferred not to add the extra headers to the tunnel constructor to keep backward compatibility.\r\n\r\nJavaScript will assign the value `undefined` to any parameter omitted from function calls, including constructors. As long as you ensure the behavior of the HTTP tunnel is identical to past releases in the case the parameter is omitted, this can be done without breaking compatibility."", 'commenter': 'mike-jumper'}]"
210,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -215,6 +215,24 @@ Guacamole.HTTPTunnel = function(tunnelURL, crossDomain) {
     var receive_timeout = null;
 
     /**
+     * Additional headers to be sent in tunnel requests. This dictionary can be
+     * populated with key/value header pairs to pass information such as authentication
+     * tokens, etc.
+     */
+    var extraHeaders = {};
+
+    /**
+     * Adds the configured additional headerss to the given request.
+     *
+     * @private
+     */
+    function add_extra_headers(request) {","[{'comment': ""Though you'll find much old JavaScript code here which uses the lowercase_and_underscores style for functions, variables, etc., new code should use headlessCamelCase:\r\n\r\nhttp://guacamole.apache.org/guac-style/#naming\r\n\r\nPlease also be sure to document the parameters of the function, even for functions which are private."", 'commenter': 'mike-jumper'}]"
210,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -215,6 +215,24 @@ Guacamole.HTTPTunnel = function(tunnelURL, crossDomain) {
     var receive_timeout = null;
 
     /**
+     * Additional headers to be sent in tunnel requests. This dictionary can be
+     * populated with key/value header pairs to pass information such as authentication
+     * tokens, etc.
+     */
+    var extraHeaders = {};
+
+    /**
+     * Adds the configured additional headerss to the given request.
+     *
+     * @private
+     */
+    function add_extra_headers(request) {
+        for (name in tunnel.extraHeaders) {","[{'comment': ""`name` here is implicitly declared, and thus [will actually be on the global scope](http://blog.niftysnippets.org/2008/03/horror-of-implicit-globals.html). Variables need to be explicitly declared to avoid such scary defaults. You'll need something like:\r\n\r\n    for (var name in tunnel.extraHeaders)\r\n\r\nto properly restrict `name` to the scope of its function."", 'commenter': 'mike-jumper'}]"
210,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -214,6 +219,29 @@ Guacamole.HTTPTunnel = function(tunnelURL, crossDomain) {
      */
     var receive_timeout = null;
 
+    /**
+     * Additional headers to be sent in tunnel requests. This dictionary can be
+     * populated with key/value header pairs to pass information such as authentication
+     * tokens, etc.
+     *
+     * @private
+     */
+    var extraHeaders = extraTunnelHeaders || {}
+
+    /**
+     * Adds the configured additional headerss to the given request.
+     *","[{'comment': '`request` is not an optional parameter of this function, and thus must not be within brackets here.', 'commenter': 'mike-jumper'}]"
210,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -214,6 +219,29 @@ Guacamole.HTTPTunnel = function(tunnelURL, crossDomain) {
      */
     var receive_timeout = null;
 
+    /**
+     * Additional headers to be sent in tunnel requests. This dictionary can be
+     * populated with key/value header pairs to pass information such as authentication
+     * tokens, etc.
+     *
+     * @private
+     */
+    var extraHeaders = extraTunnelHeaders || {}
+
+    /**","[{'comment': '""headerss""', 'commenter': 'mike-jumper'}]"
211,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -226,19 +226,21 @@ Guacamole.HTTPTunnel = function(tunnelURL, crossDomain, extraTunnelHeaders) {
      *
      * @private
      */
-    var extraHeaders = extraTunnelHeaders || {}
+    var extraHeaders = extraTunnelHeaders || {};
 
     /**
      * Adds the configured additional headers to the given request.
      *
-     * @params {XMLHttpRequest} request
+     * @param {XMLHttpRequest} request
      *     The request where the configured extra headers will be added.
+     * @param {Object} headers","[{'comment': ""Please leave a blank line separating different `@param` (see other recent JSDoc'd or JavaDoc'd functions)."", 'commenter': 'mike-jumper'}]"
211,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -1088,8 +1090,12 @@ Guacamole.ChainedTunnel.prototype = new Guacamole.Tunnel();
  *     Whether tunnel requests will be cross-domain, and thus must use CORS
  *     mechanisms and headers. By default, it is assumed that tunnel requests
  *     will be made to the same domain.
+ * @param {Object} [extraTunnelHeaders={}]","[{'comment': 'As above, please leave a blank line between different `@param`.', 'commenter': 'mike-jumper'}]"
211,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -1107,6 +1113,31 @@ Guacamole.StaticHTTPTunnel = function StaticHTTPTunnel(url, crossDomain) {
      */
     var xhr = null;
 
+    /**
+     * Additional headers to be sent in tunnel requests. This dictionary can be
+     * populated with key/value header pairs to pass information such as authentication
+     * tokens, etc.
+     *
+     * @private
+     */
+    var extraHeaders = extraTunnelHeaders || {};
+
+    /**
+     * Adds the configured additional headers to the given request.
+     *
+     * @param {XMLHttpRequest} request
+     *     The request where the configured extra headers will be added.
+     * @param {Object} headers","[{'comment': 'Same here - blank line, plase.', 'commenter': 'mike-jumper'}]"
216,guacamole-ext/src/main/resources/org/apache/guacamole/protocols/rdp.json,"@@ -98,6 +98,7 @@
                         ""it-it-qwerty"",
                         ""ja-jp-qwerty"",
                         ""sv-se-qwerty"",
+			""es-es-qwerty"",","[{'comment': ""Indentation is off vs. the rest of the file - looks like there are three tabs on this line instead of spaces.  I think most of the other files you added are correct, but make sure you're following Guacamole style guidelines as documented here:\r\nhttp://guacamole.apache.org/guac-style/"", 'commenter': 'necouchman'}, {'comment': 'Please maintain alphabetical order of the values listed (with the exception of ""failsafe"" and ""de-de-qwertz"", where we slipped up).', 'commenter': 'mike-jumper'}]"
216,guacamole/src/main/webapp/translations/en.json,"@@ -393,6 +393,7 @@
         ""FIELD_OPTION_SERVER_LAYOUT_IT_IT_QWERTY"" : ""Italian (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_JA_JP_QWERTY"" : ""Japanese (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_SV_SE_QWERTY"" : ""Swedish (Qwerty)"",
+	""FIELD_OPTION_SERVER_LAYOUT_ES_ES_QWERTY"" : ""Spanish (Qwerty)"",","[{'comment': 'Indentation off, here, too - looks like a tab instead of spaces.', 'commenter': 'necouchman'}, {'comment': 'Please maintain alphabetical order by translation string name.', 'commenter': 'mike-jumper'}]"
216,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/es.json,"@@ -0,0 +1,105 @@
+{
+
+    ""LOGIN"" : {
+
+        ""ERROR_PASSWORD_BLANK""    : ""@:APP.ERROR_PASSWORD_BLANK"",
+        ""ERROR_PASSWORD_SAME""     : ""La nueva contraseña debe ser diferente a la expirada."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
+        ""ERROR_NOT_VALID""         : ""Esta cuenta de usuario no es válida actualmente."",
+        ""ERROR_NOT_ACCESSIBLE""    : ""Actualmente no se permite el acceso a esta cuenta. Por favor intente de nuevo mas tarde."",
+
+        ""INFO_PASSWORD_EXPIRED"" : ""Su contraseña ha expirado y debe renovarla. Por favor introduzca una nueva contraseña para continuar."",
+
+        ""FIELD_HEADER_NEW_PASSWORD""         : ""Nueva contraseña"",
+        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""Confirmar nueva contraseña""
+
+    },
+
+    ""CONNECTION_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Número máximo de conexiones:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Número máximo de conexiones por usuario:"",
+
+        ""FIELD_HEADER_FAILOVER_ONLY""            : ""Usar solo para failover:"",
+        ""FIELD_HEADER_WEIGHT""                   : ""Peso de la conexión:"",
+
+        ""FIELD_HEADER_GUACD_HOSTNAME""   : ""Nombre de Host:"",
+        ""FIELD_HEADER_GUACD_ENCRYPTION"" : ""Encriptación:"",
+        ""FIELD_HEADER_GUACD_PORT""       : ""Puerto:"",
+
+        ""FIELD_OPTION_GUACD_ENCRYPTION_EMPTY"" : """",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_NONE""  : ""Ninguna (sin encriptar)"",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_SSL""   : ""SSL / TLS"",
+
+        ""SECTION_HEADER_CONCURRENCY""    : ""Límites de concurrencia"",
+        ""SECTION_HEADER_LOAD_BALANCING"" : ""Balanceo de carga"",
+        ""SECTION_HEADER_GUACD""          : ""Parámetros de Proxy Guacamole (guacd)""
+
+    },
+
+    ""CONNECTION_GROUP_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_ENABLE_SESSION_AFFINITY""  : ""Enable session affinity:"",","[{'comment': 'Not to be greedy, but what about the other remaining English? Or are these not readily translatable?', 'commenter': 'mike-jumper'}]"
216,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/resources/guac-manifest.json,"@@ -21,7 +21,8 @@
     ""translations"" : [
         ""translations/en.json"",
         ""translations/fr.json"",
-        ""translations/ru.json""
+        ""translations/ru.json"",
+        ""translations/es.json""","[{'comment': 'Please maintain alphabetical order of the files listed (same in the other pair of `guac-manifest.json`).', 'commenter': 'mike-jumper'}]"
216,guacamole/src/main/webapp/translations/es.json,"@@ -0,0 +1,735 @@
+{
+    
+    ""NAME"" : ""Spanish"",
+    
+    ""APP"" : {
+
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""0.9.13-incubating"",
+
+        ""ACTION_ACKNOWLEDGE""        : ""OK"",
+        ""ACTION_CANCEL""             : ""Cancelar"",
+        ""ACTION_CLONE""              : ""Clonar"",
+        ""ACTION_CONTINUE""           : ""Continuar"",
+        ""ACTION_DELETE""             : ""Borrar"",
+        ""ACTION_DELETE_SESSIONS""    : ""Finalizar Sesiones"",
+        ""ACTION_DOWNLOAD""           : ""Descargar"",
+        ""ACTION_LOGIN""              : ""Iniciar Sesión"",
+        ""ACTION_LOGOUT""             : ""Cerrar Sesión"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""Conexiones"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""Preferencias"",
+        ""ACTION_MANAGE_SETTINGS""    : ""Configuración"",
+        ""ACTION_MANAGE_SESSIONS""    : ""Sesiones Activas"",
+        ""ACTION_MANAGE_USERS""       : ""Usuarios"",
+        ""ACTION_NAVIGATE_BACK""      : ""Atrás"",
+        ""ACTION_NAVIGATE_HOME""      : ""Inicio"",
+        ""ACTION_SAVE""               : ""Guardar"",
+        ""ACTION_SEARCH""             : ""Buscar"",
+        ""ACTION_SHARE""              : ""Compartir"",
+        ""ACTION_UPDATE_PASSWORD""    : ""Actualizar Contraseña"",
+        ""ACTION_VIEW_HISTORY""       : ""Historial"",
+
+        ""DIALOG_HEADER_ERROR"" : ""Error"",
+
+        ""ERROR_PASSWORD_BLANK""    : ""La contraseña no puede estar en blanco."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""Las cotraseñas no coinciden."",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""Contraseña:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""Validar Contraseña:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""Filtros"",
+
+        ""FORMAT_DATE_TIME_PRECISE"" : ""dd-MM-yyyy HH:mm:ss"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""Actualmente en uso por {USERS} {USERS, plural, one{user} other{users}}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""Anónimo"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{{VALUE, plural, one{second} other{seconds}}} minute{{VALUE, plural, one{minute} other{minutes}}} hour{{VALUE, plural, one{hour} other{hours}}} day{{VALUE, plural, one{day} other{days}}} other{}}""
+
+    },
+
+    ""CLIENT"" : {
+
+        ""ACTION_ACKNOWLEDGE""               : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""Limpiar"",
+        ""ACTION_DISCONNECT""                : ""Disconnect"",
+        ""ACTION_LOGOUT""                    : ""@:APP.ACTION_LOGOUT"",
+        ""ACTION_NAVIGATE_BACK""             : ""@:APP.ACTION_NAVIGATE_BACK"",
+        ""ACTION_NAVIGATE_HOME""             : ""@:APP.ACTION_NAVIGATE_HOME"",
+        ""ACTION_RECONNECT""                 : ""Reconectar"",
+        ""ACTION_SAVE_FILE""                 : ""@:APP.ACTION_SAVE"",
+        ""ACTION_SHARE""                     : ""@:APP.ACTION_SHARE"",
+        ""ACTION_UPLOAD_FILES""              : ""Subir ficheros"",
+
+        ""DIALOG_HEADER_CONNECTING""       : ""Conectando"",
+        ""DIALOG_HEADER_CONNECTION_ERROR"" : ""Error de conexión"",
+        ""DIALOG_HEADER_DISCONNECTED""     : ""Desconectado"",
+
+        ""ERROR_CLIENT_201""     : ""Esta conexión se ha cerrado porque el servidor esta ocupado. Por favor espera unos minutos e intenta de nuevo."",
+        ""ERROR_CLIENT_202""     : ""El servidor Guacamole ha cerrado la conexión porque el escritorio remoto está tardando mucho en responder. Por favor intente de nuevo o contacte al administrador del sistema."",
+        ""ERROR_CLIENT_203""     : ""El servidor de escritorio remoto encontró un error y ha cerrado la conexión. Por favor, intente de nuevo o contacte al administrador del sistema."",
+        ""ERROR_CLIENT_207""     : ""El servidor de escritorio remoto no está disponible actualmente. Si el problema persiste, por favor notifique al administrador o compruebe los registros del sistema."",
+        ""ERROR_CLIENT_208""     : ""El servidor de escritorio remoto no está disponible actualmente. Si el problema persiste, por favor notifique al administrador o compruebe los registros del sistema."",
+        ""ERROR_CLIENT_209""     : ""El servidor de escritorio remoto ha cerrado la conexión porque hay conflicto con otra conexión. Por favor intenta de nuevo mas tarde."",
+        ""ERROR_CLIENT_20A""     : ""El servidor de escritorio remoto ha cerrado la conexión porque parece estar inactivo. Si esto fué inesperado, notifíquelo al administrador o verifique la configuración del sistema."",
+        ""ERROR_CLIENT_20B""     : ""El servidor de escritorio remoto ha forzado el cierre de la conexión. Si esto fué inesperado, notifíquelo al administrador o verifique la configuración del sistema."",
+        ""ERROR_CLIENT_301""     : ""Inicio fallido. Por favor vuelva a conectar e intente de nuevo."",
+        ""ERROR_CLIENT_303""     : ""El servidor de escritorio remoto ha denegado el acceso a esta conexión. Si necesita acceso, por favor solicítelo a un administrador para que permita el acceso de su cuenta, o compruebe la configuración del sistema."",
+        ""ERROR_CLIENT_308""     : ""El servidor Guacamole ha cerrado la conexión porque no ha habido respuesta del navegador por tiempo suficiente como para asumir que está desconectado. Normalmente esto es debido a problemas de red, como señal inalámbrica irregular, o simplemente velocidades de red muy lentas. Por favor revisa tu red e intente de nuevo."",
+        ""ERROR_CLIENT_31D""     : ""El servidor Guacamole está denegando el acceso a esta conexión porque ha agotado el límite de conexiones simultaneas por usuario. Por favor cierre una o mas conexiones e intente de nuevo."",
+        ""ERROR_CLIENT_DEFAULT"" : ""Ha ocurrido un error interno en el servidor Guacamole y la conexión ha finalizado. Si el problema persiste, por favor notifíquelo al administrador o compruebe los registros del sistema."",
+
+        ""ERROR_TUNNEL_201""     : ""El servidor Guacamole ha rechazado este intento de conexión porque hay muchas conexiones activas. Por favor espere unos minutos e intente de nuevo."",
+        ""ERROR_TUNNEL_202""     : ""Se ha cerrado la conexión porque el servidor está tardando mucho en responder. Normalmente esto es debido a problemas de red, como señal inalámbrica irregular, o simplemente velocidades de red muy lentas. Por favor revisa tu red e intenta de nuevo."",
+        ""ERROR_TUNNEL_203""     : ""El servidor encontró un error y ha cerrado la conexión. Por favor intente de nuevo o contacte al administrador del sistema."",
+        ""ERROR_TUNNEL_204""     : ""La conexión solicitada no existe. Por favor compruebe el nombre de conexión e intente de nuevo."",
+        ""ERROR_TUNNEL_205""     : ""Esta conexión esta actualmente en uso y el acceso concurrente a la misma no está permitido. Por favor intente de nuevo mas tarde."",
+        ""ERROR_TUNNEL_207""     : ""El servidor Guacamole no esta disponible actualmente. Por favor compruebe la configuración de red e intente de nuevo."",
+        ""ERROR_TUNNEL_208""     : ""El servidor Guacamole no está aceptando conexiones. Por favor compruebe la conexión a red e intente de nuevo."",
+        ""ERROR_TUNNEL_301""     : ""No tiene permiso para acceder a esta conexión porque no ha iniciado sesión. Por favor incie sesión e intente de nuevo."",
+        ""ERROR_TUNNEL_303""     : ""No tiene permiso para acceder a esta conexión. Si requiere acceso, por favor solicite al administrador que le agregue a la lista de usuarios permitidos o compruebe la configuración del sistema."",
+        ""ERROR_TUNNEL_308""     : ""El servidor Guacamole ha cerrado la conexión porque ho ha habido respuesta desde el navegador por tiempo suficiente como para asumir que está desconectado. Normalmente esto es debido a problemas de red, como señal inalámbrica irregular, o simplemente velocidades de red muy lentas. Por favor revisa tu red e intente de nuevo."",
+        ""ERROR_TUNNEL_31D""     : ""El servidor Guacamole esta denegando el acceso a esta conexión porque ha agotado el límite de conexiones simultaneas por usuario. Por favor cierre una o mas conexiones e intente de nuevo."",
+        ""ERROR_TUNNEL_DEFAULT"" : ""Ha ocurrido un error interno en el servidor Guacamole y la conexión ha finalizado. Si el problema persiste, por favor notifíquelo al administrador o compruebe los registros del sistema."",
+
+        ""ERROR_UPLOAD_100""     : ""La transferencia de ficheros no está habilitada o soportada. Por favor contacte al administrador o compruebe los registros del sistema."",
+        ""ERROR_UPLOAD_201""     : ""Se estan transfiriendo muchos ficheros actualmente. Por favor espere a que se completen las transferencias existentes e intente de nuevo."",
+        ""ERROR_UPLOAD_202""     : ""El fichero no se puede transferir porque el servidor de escritorio remoto está tardando demasiado en responder. Por favor intente de nuevo o contacte con el administrador del sistema."",
+        ""ERROR_UPLOAD_203""     : ""El servidor de escritorio remoto encontró un error durante la transferencia. Por favor intente denuevo o contacte con el administrador del sistema."",
+        ""ERROR_UPLOAD_204""     : ""El destino para la transferencia de fichero no existe. Por favor compruebe que exista el destino e intente de nuevo."",
+        ""ERROR_UPLOAD_205""     : ""El destino para la transferencia de fichero está bloqueado. Por favor espere a que finalicen las tareas en progreso e intente de nuevo."",
+        ""ERROR_UPLOAD_301""     : ""No tiene permiso para subir este fichero porque no ha iniciado sesión. Por favor inicie sesión e intente de nuevo."",
+        ""ERROR_UPLOAD_303""     : ""No tiene permiso para subir este fichero. Si necesita acceso, por favor compruebe la configuración del sistema o contacte con el administrador del sistema."",
+        ""ERROR_UPLOAD_308""     : ""La transferencia de ficheros se ha parado. Normalmente esto es debido a problemas de red, como señal inalámbrica irregular, o simplemente velocidades de red muy lentas. Por favor revisa tu red e intente de nuevo."",
+        ""ERROR_UPLOAD_31D""     : ""Se estan transfiriendo muchos ficheros actualmente. Por favor espere a que finalicen las transferencias de fichero existentes e intente de nuevo."",
+        ""ERROR_UPLOAD_DEFAULT"" : ""Ha ocurrido un error interno en el servidor Guacamole y la conexión ha finalizado. Si el problema persiste, por favor notifíquelo al administrador o compruebe los registros del sistema."",
+
+        ""HELP_CLIPBOARD""           : ""Aquí aparecerá el texto copiado/cortado en Guacamole. Los cambios en el texto de abajo afectaran al portapapeles remoto."",
+        ""HELP_INPUT_METHOD_NONE""   : ""No se está usando un método de entrada. La entrada de teclado se acepta desde un teclado físico conectado."",
+        ""HELP_INPUT_METHOD_OSK""    : ""Muestra y acepta entrada desde el teclado en pantalla incorporado de Guacamole. El teclado en pantalla permite escribir combinaciones que serían imposible de otro modo (como Ctrl-Alt-Sup)."",
+        ""HELP_INPUT_METHOD_TEXT""   : ""Permite escribir texto y emular eventos de teclado basados en el texto escrito. Este modo es necesario para dispositivos como teléfonos móviles que no tienen teclado físico."",
+        ""HELP_MOUSE_MODE""          : ""Determina el comportamiento del ratón remoto respecto a los toques."",
+        ""HELP_MOUSE_MODE_ABSOLUTE"" : ""Toque para clic. El clic ocurre en la ubicación del toque."",
+        ""HELP_MOUSE_MODE_RELATIVE"" : ""Arrastre para mover el puntero del ratón y toque para hacer clic. El clic ocurre en la ubicación del puntero."",
+        ""HELP_SHARE_LINK""          : ""Se está compartiendo la conexión actual y puede acceder a la misma cualquiera con el siguiente {LINKS, plural, one{link} other{links}}:"",
+
+        ""INFO_CONNECTION_SHARED"" : ""Esta conexión está compartida."",
+        ""INFO_NO_FILE_TRANSFERS"" : ""No hay transferencia de ficheros."",
+
+        ""NAME_INPUT_METHOD_NONE""   : ""Ninguno"",
+        ""NAME_INPUT_METHOD_OSK""    : ""Teclado en pantalla"",
+        ""NAME_INPUT_METHOD_TEXT""   : ""Entrada de Texto"",
+        ""NAME_KEY_CTRL""            : ""Ctrl"",
+        ""NAME_KEY_ALT""             : ""Alt"",
+        ""NAME_KEY_ESC""             : ""Esc"",
+        ""NAME_KEY_TAB""             : ""Tab"",
+        ""NAME_MOUSE_MODE_ABSOLUTE"" : ""Pantalla táctil"",
+        ""NAME_MOUSE_MODE_RELATIVE"" : ""Touchpad"",
+
+        ""SECTION_HEADER_CLIPBOARD""      : ""Portapapeles"",
+        ""SECTION_HEADER_DEVICES""        : ""Dispositivos"",
+        ""SECTION_HEADER_DISPLAY""        : ""Monitor"",
+        ""SECTION_HEADER_FILE_TRANSFERS"" : ""Transferencia de ficheros"",
+        ""SECTION_HEADER_INPUT_METHOD""   : ""Método de entrada"",
+        ""SECTION_HEADER_MOUSE_MODE""     : ""Modo de emulación de ratón"",
+
+        ""TEXT_ZOOM_AUTO_FIT""              : ""Ajustar automáticamente a la ventana del navegador"",
+        ""TEXT_CLIENT_STATUS_IDLE""         : ""Inactivo."",
+        ""TEXT_CLIENT_STATUS_CONNECTING""   : ""Conectando a Guacamole..."",
+        ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""Ha sido desconectado."",
+        ""TEXT_CLIENT_STATUS_WAITING""      : ""Conectado a Guacamole. Esperando respuesta..."",
+        ""TEXT_RECONNECT_COUNTDOWN""        : ""Reconectando en {REMAINING} {REMAINING, plural, one{second} other{seconds}}..."",
+        ""TEXT_FILE_TRANSFER_PROGRESS""     : ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}"",
+
+        ""URL_OSK_LAYOUT"" : ""layouts/en-us-qwerty.json""
+
+    },
+
+    ""DATA_SOURCE_DEFAULT"" : {
+        ""NAME"" : ""Default (XML)""
+    },
+
+    ""FORM"" : {
+
+        ""FIELD_PLACEHOLDER_DATE"" : ""DD--MM-YYYY"",
+        ""FIELD_PLACEHOLDER_TIME"" : ""HH:MM:SS"",
+
+        ""HELP_SHOW_PASSWORD"" : ""Clic para mostrar contraseña"",
+        ""HELP_HIDE_PASSWORD"" : ""Clic para esconder contraseña""
+
+    },
+
+    ""HOME"" : {
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""@:APP.INFO_ACTIVE_USER_COUNT"",
+
+        ""INFO_NO_RECENT_CONNECTIONS"" : ""Sin conexiones recientes."",
+        
+        ""PASSWORD_CHANGED"" : ""Contraseña cambiada."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""    : ""Todas las conexiones"",
+        ""SECTION_HEADER_RECENT_CONNECTIONS"" : ""Conexiones Recientes""
+
+    },
+
+    ""LIST"" : {
+
+        ""TEXT_ANONYMOUS_USER"" : ""Anónimo""
+
+    },
+
+    ""LOGIN"": {
+
+        ""ACTION_ACKNOWLEDGE"" : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CONTINUE""    : ""@:APP.ACTION_CONTINUE"",
+        ""ACTION_LOGIN""       : ""@:APP.ACTION_LOGIN"",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""ERROR_INVALID_LOGIN"" : ""Inicio de sesión inválido"",
+
+        ""FIELD_HEADER_USERNAME"" : ""Usuario"",
+        ""FIELD_HEADER_PASSWORD"" : ""Contraseña""
+
+    },
+
+    ""MANAGE_CONNECTION"" : {
+
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CANCEL""               : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLONE""                : ""@:APP.ACTION_CLONE"",
+        ""ACTION_DELETE""               : ""@:APP.ACTION_DELETE"",
+        ""ACTION_SAVE""                 : ""@:APP.ACTION_SAVE"",
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Borrar conexión"",
+        ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""FIELD_HEADER_LOCATION"" : ""Ubicación:"",
+        ""FIELD_HEADER_NAME""     : ""Nombre:"",
+        ""FIELD_HEADER_PROTOCOL"" : ""Protocolo:"",
+
+        ""FORMAT_HISTORY_START"" : ""@:APP.FORMAT_DATE_TIME_PRECISE"",
+
+        ""INFO_CONNECTION_DURATION_UNKNOWN"" : ""--"",
+        ""INFO_CONNECTION_ACTIVE_NOW""       : ""Activo Ahora"",
+        ""INFO_CONNECTION_NOT_USED""         : ""Esta conexión no se ha usado todavía."",
+
+        ""SECTION_HEADER_EDIT_CONNECTION"" : ""Editar Conexión"",
+		""SECTION_HEADER_HISTORY""         : ""Historial de uso"",","[{'comment': 'Please indent with spaces, not tabs.', 'commenter': 'mike-jumper'}, {'comment': 'oh, this should be also in the en.json file as this line was not added by me, I just changed the Spanish string... let me check both', 'commenter': 'djrm05'}, {'comment': 'it is strange but tab is only in the es.json file... Will fix it now', 'commenter': 'djrm05'}]"
222,guacamole-common-js/src/main/webapp/modules/AudioRecorder.js,"@@ -183,11 +183,12 @@ Guacamole.RawAudioRecorder = function RawAudioRecorder(stream, mimetype) {
 
     /**
      * A function which directly invokes the browser's implementation of
-     * navigator.getUserMedia() with all provided parameters.
+     * navigator.mediaDevices.getUserMedia() with all provided parameters.
      *
      * @type Function
      */
-    var getUserMedia = (navigator.getUserMedia
+    var getUserMedia = (navigator.mediaDevices.getUserMedia","[{'comment': ""I'm not sure this will work:\r\n\r\n1. If `navigator.mediaDevices` is not defined (older browsers), then the fallback to `navigator.getUserMedia`, etc. will not take effect as the attempt to access `navigator.mediaDevices.getUserMedia` will fail. The example at https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia gets around this by ensuring `navigator.mediaDevices` is set to `{}` if not otherwise defined, but I'm sure there are other and/or better approaches.\r\n2. The call to `(...).bind(navigator)` creates a function which automatically uses `navigator` for `this`. This is correct for functions like `navigator.getUserMedia()`, but not for `navigator.mediaDevices.getUserMedia()`. I have not checked, but I expect that `navigator.mediaDevices.getUserMedia()` would need `this` to be `navigator.mediaDevices`.\r\n\r\nRather than point directly to `getUserMedia()`, we could instead point to `mediaDevices`, invoking the function later on as `mediaDevices.getUserMedia()`, defining a `mediaDevices` object with a `getUserMedia` property if not already provided on `navigator`. That might solve things cleanly, and the `bind()` would only be necessary in the `navigator` fallback case."", 'commenter': 'mike-jumper'}, {'comment': 'In fact ... it might be even better to simply:\r\n\r\n1. Test whether `mediaDevices` is defined on `navigator`.\r\n2. If not, define a shim `mediaDevices` object on `navigator` having a single `getUserMedia` property pointing to the function we used to reference here.\r\n3. Use `navigator.mediaDevices.getUserMedia()` directly where we previously used the locally-defined `getUserMedia()`.', 'commenter': 'mike-jumper'}, {'comment': ""Okay...I'll take a stab at that..."", 'commenter': 'necouchman'}]"
222,guacamole-common-js/src/main/webapp/modules/AudioRecorder.js,"@@ -183,14 +183,19 @@ Guacamole.RawAudioRecorder = function RawAudioRecorder(stream, mimetype) {
 
     /**
      * A function which directly invokes the browser's implementation of
-     * navigator.getUserMedia() with all provided parameters.
+     * navigator.mediaDevices.getUserMedia() with all provided parameters.
      *
      * @type Function
      */
-    var getUserMedia = (navigator.getUserMedia
-            || navigator.webkitGetUserMedia
-            || navigator.mozGetUserMedia
-            || navigator.msGetUserMedia).bind(navigator);
+
+    if (navigator.mediaDevices === undefined)","[{'comment': 'Probably just want to simply:\r\n\r\n```\r\nif (!navigator.mediaDevices)\r\n```', 'commenter': 'mike-jumper'}]"
222,guacamole-common-js/src/main/webapp/modules/AudioRecorder.js,"@@ -183,14 +183,19 @@ Guacamole.RawAudioRecorder = function RawAudioRecorder(stream, mimetype) {
 
     /**
      * A function which directly invokes the browser's implementation of
-     * navigator.getUserMedia() with all provided parameters.
+     * navigator.mediaDevices.getUserMedia() with all provided parameters.
      *
      * @type Function
      */
-    var getUserMedia = (navigator.getUserMedia
-            || navigator.webkitGetUserMedia
-            || navigator.mozGetUserMedia
-            || navigator.msGetUserMedia).bind(navigator);
+
+    if (navigator.mediaDevices === undefined)
+        navigator.mediaDevices = {};
+
+    if (navigator.mediaDevices.getUserMedia === undefined)","[{'comment': ""Since this will only be valid if `navigator.mediaDevices` was not defined in the first place (we'd need to `bind()` to `navigator` otherwise). I'd suggest:\r\n\r\n```javascript\r\nnavigator.mediaDevices = {\r\n\r\n    /**\r\n     * That comment from before.\r\n     */\r\n    getUserMedia: (...all those tests...).bind(navigator)\r\n\r\n};\r\n```"", 'commenter': 'mike-jumper'}, {'comment': ""So, the reason I went this route is based on one of the examples on that MDN page ([1]).  The comment in the code at the bottom of the page says:\r\n\r\n    // Some browsers partially implement mediaDevices. We can't just assign an object\r\n    // with getUserMedia as it would overwrite existing properties.\r\n    // Here, we will just add the getUserMedia property if it's missing.\r\n\r\nThus, I was going for the same level of compatibility as defined in that code sample.\r\n\r\n[1] - https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia"", 'commenter': 'necouchman'}, {'comment': 'Ah, OK. That makes good sense.', 'commenter': 'mike-jumper'}]"
222,guacamole-common-js/src/main/webapp/modules/AudioRecorder.js,"@@ -183,14 +183,19 @@ Guacamole.RawAudioRecorder = function RawAudioRecorder(stream, mimetype) {
 
     /**
      * A function which directly invokes the browser's implementation of","[{'comment': 'This JSDoc comment is no longer valid now that `var getUserMedia` is gone.', 'commenter': 'mike-jumper'}, {'comment': 'Removed.', 'commenter': 'necouchman'}]"
222,guacamole-common-js/src/main/webapp/modules/AudioRecorder.js,"@@ -183,14 +183,19 @@ Guacamole.RawAudioRecorder = function RawAudioRecorder(stream, mimetype) {
 
     /**
      * A function which directly invokes the browser's implementation of
-     * navigator.getUserMedia() with all provided parameters.
+     * navigator.mediaDevices.getUserMedia() with all provided parameters.
      *
      * @type Function
      */
-    var getUserMedia = (navigator.getUserMedia
-            || navigator.webkitGetUserMedia
-            || navigator.mozGetUserMedia
-            || navigator.msGetUserMedia).bind(navigator);
+
+    if (!navigator.mediaDevices)","[{'comment': ""There should be some comments in this new body of code documenting what's going on at a high level. (That the browser may not define `navigator.mediaDevices`, and that `navigator.mediaDevices.getUserMedia` may not be defined even if `navigator.mediaDevices` is defined.)"", 'commenter': 'mike-jumper'}, {'comment': 'Added comments.', 'commenter': 'necouchman'}, {'comment': 'Looks much better, however these new comments are JSDoc comments. JSDoc comments are used for declarations only, and then to document a function, class, variable, etc.:\r\n\r\n```javascript\r\n/**\r\n * This is correct.\r\n *\r\n * @private\r\n */\r\nvar foo;\r\n```\r\n\r\nThey cannot / should not be used for general code which is not a declaration:\r\n\r\n```javascript\r\n/**\r\n * This is not correct.\r\n */\r\nif (foo) {\r\n    bar();\r\n}\r\n```\r\n\r\nNormal `//` comments are the correct thing to use here:\r\n\r\n```javascript\r\n// This is correct\r\nif (foo) {\r\n    bar();\r\n}\r\n```', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
224,guacamole/src/main/webapp/app/client/controllers/clientController.js,"@@ -64,16 +65,23 @@ angular.module('client').controller('clientController', ['$scope', '$routeParams
      */
     var MENU_DRAG_VERTICAL_TOLERANCE = 10;
 
-    /*
+    /**
      * In order to open the guacamole menu, we need to hit ctrl-alt-shift. There are
      * several possible keysysms for each key.
      */
     var SHIFT_KEYS  = {0xFFE1 : true, 0xFFE2 : true},
         ALT_KEYS    = {0xFFE9 : true, 0xFFEA : true, 0xFE03 : true,
                        0xFFE7 : true, 0xFFE8 : true},
         CTRL_KEYS   = {0xFFE3 : true, 0xFFE4 : true},
+        END_KEYS    = {0xFF57 : true, 0xFFB1 : true},","[{'comment': 'As the comment for this set of declarations deals specifically with Ctrl+Alt+Shift, I suggest not including this declaration here, but rather separating it like you did with `DEL_KEY`.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
224,guacamole/src/main/webapp/app/client/controllers/clientController.js,"@@ -522,21 +539,44 @@ angular.module('client').controller('clientController', ['$scope', '$routeParams
             }
         }
 
+        // If only Ctrl-Alt-End is pressed, and we have a one keysym from each
+        // group, and one key is being released, send Ctrl-Alt-Delete.
+        if (END_KEYS[keysym] &&
+            !_.isEmpty(_.pick(ALT_KEYS, currentKeysPressedKeys)) &&
+            !_.isEmpty(_.pick(CTRL_KEYS, currentKeysPressedKeys))
+        ) {
+                event.preventDefault();
+                delete keysCurrentlyPressed[keysym];
+                substituteKeysPressed[keysym] = DEL_KEY;
+                $rootScope.$broadcast('guacSyntheticKeydown', DEL_KEY);
+        }
+
     });
 
     // Update pressed keys as they are released, synchronizing the clipboard
     // with any data that appears to have come from those key presses
     $scope.$on('guacKeyup', function keyupListener(event, keysym, keyboard) {
 
+        var currentKeysPressedKeys = Object.keys(keysCurrentlyPressed);","[{'comment': ""This variable doesn't seem to be used here."", 'commenter': 'mike-jumper'}, {'comment': 'Oops, removed.', 'commenter': 'necouchman'}]"
224,guacamole/src/main/webapp/app/client/controllers/clientController.js,"@@ -522,21 +539,44 @@ angular.module('client').controller('clientController', ['$scope', '$routeParams
             }
         }
 
+        // If only Ctrl-Alt-End is pressed, and we have a one keysym from each
+        // group, and one key is being released, send Ctrl-Alt-Delete.","[{'comment': 'Is that ""... and one key is being released ..."" aspect correct?', 'commenter': 'mike-jumper'}, {'comment': 'Yeah, this comment needed a little cleaning.', 'commenter': 'necouchman'}]"
224,guacamole/src/main/webapp/app/client/controllers/clientController.js,"@@ -64,16 +65,23 @@ angular.module('client').controller('clientController', ['$scope', '$routeParams
      */
     var MENU_DRAG_VERTICAL_TOLERANCE = 10;
 
-    /*
+    /**
      * In order to open the guacamole menu, we need to hit ctrl-alt-shift. There are
      * several possible keysysms for each key.
      */
     var SHIFT_KEYS  = {0xFFE1 : true, 0xFFE2 : true},
         ALT_KEYS    = {0xFFE9 : true, 0xFFEA : true, 0xFE03 : true,
                        0xFFE7 : true, 0xFFE8 : true},
         CTRL_KEYS   = {0xFFE3 : true, 0xFFE4 : true},
+        END_KEYS    = {0xFF57 : true, 0xFFB1 : true},
         MENU_KEYS   = angular.extend({}, SHIFT_KEYS, ALT_KEYS, CTRL_KEYS);
 
+    /**
+     * Keysym for sending the DELETE key when the Ctrl-Alt-End hotkey
+     * combo is pressed.
+     */
+    var DEL_KEY     = 0xFFFF;","[{'comment': ""Need an `@type` tag. I also suggest just separating `DEL_KEY` and `=` with a single space, seeing as it's not being aligned with anything any more."", 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
224,guacamole/src/main/webapp/app/client/controllers/clientController.js,"@@ -522,21 +539,44 @@ angular.module('client').controller('clientController', ['$scope', '$routeParams
             }
         }
 
+        // If only Ctrl-Alt-End is pressed, and we have a one keysym from each
+        // group, and one key is being released, send Ctrl-Alt-Delete.
+        if (END_KEYS[keysym] &&
+            !_.isEmpty(_.pick(ALT_KEYS, currentKeysPressedKeys)) &&
+            !_.isEmpty(_.pick(CTRL_KEYS, currentKeysPressedKeys))
+        ) {
+                event.preventDefault();
+                delete keysCurrentlyPressed[keysym];
+                substituteKeysPressed[keysym] = DEL_KEY;
+                $rootScope.$broadcast('guacSyntheticKeydown', DEL_KEY);","[{'comment': 'Out of curiosity, have you tried just using `$scope.$broadcast()`? There may not be a need to use `$rootScope`.', 'commenter': 'mike-jumper'}, {'comment': 'Have not - will check and see what happens.', 'commenter': 'necouchman'}, {'comment': 'Seems fine, change committed.', 'commenter': 'necouchman'}]"
224,guacamole/src/main/webapp/app/client/controllers/clientController.js,"@@ -522,6 +545,18 @@ angular.module('client').controller('clientController', ['$scope', '$routeParams
             }
         }
 
+        // If one of the End keys is pressed, and we have a one keysym from each
+        // of Ctrl and Alt groups, send Ctrl-Alt-Delete.
+        if (END_KEYS[keysym] &&
+            !_.isEmpty(_.pick(ALT_KEYS, currentKeysPressedKeys)) &&
+            !_.isEmpty(_.pick(CTRL_KEYS, currentKeysPressedKeys))
+        ) {
+                event.preventDefault();","[{'comment': 'Why is the body of this `if` indented by two levels?', 'commenter': 'mike-jumper'}, {'comment': 'Ummm....variety is the spice of code?\r\n\r\nLet me fix that real quick...', 'commenter': 'necouchman'}]"
231,guacamole-ext/src/main/resources/org/apache/guacamole/protocols/rdp.json,"@@ -92,6 +92,7 @@
                     ""options"" : [
                         """",
                         ""de-de-qwertz"",
+                        ""en-uk-qwerty"",","[{'comment': 'Just noticed - the manual documentation you added had this as ""en-gb-qwerty"", but here it is en-uk-qwerty.  Should it be different?  Or should they be the same?', 'commenter': 'necouchman'}, {'comment': 'Whoops - good catch. The correct value is ""en-gb-qwerty"":\r\n\r\nhttps://github.com/apache/guacamole-server/blob/493fa4df165b99357184f31db735aa701b50f7e4/src/protocols/rdp/keymaps/en_gb_qwerty.keymap#L21\r\n\r\nWill fix.', 'commenter': 'mike-jumper'}, {'comment': 'There. That should do it.', 'commenter': 'mike-jumper'}]"
233,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/resources/org/apache/guacamole/auth/jdbc/user/UserMapper.xml,"@@ -123,12 +148,29 @@
             </foreach>
             AND guacamole_user_permission.user_id = #{user.objectID,jdbcType=INTEGER}
             AND permission = 'READ'
-        GROUP BY guacamole_user.user_id
+        GROUP BY guacamole_user.user_id;
+
+        SELECT
+            guacamole_user_attribute.user_id,
+            guacamole_user_attribute.attribute_name,
+            guacamole_user_attribute.attribute_value
+        FROM guacamole_user_attribute
+        JOIN guacamole_user ON guacamole_user.user_id = guacamole_user_attribute.user_id
+        JOIN guacamole_user_permission ON affected_user_id = guacamole_user.user_id
+        WHERE username IN
+            <foreach collection=""identifiers"" item=""identifier""
+                     open=""("" separator="","" close="")"">
+                #{identifier,jdbcType=VARCHAR}
+            </foreach>
+            AND guacamole_user_permission.user_id = #{user.objectID,jdbcType=INTEGER}
+            AND permission = 'READ';
+>>>>>>> bdd43ee08... STORE-ATTRIBUTES: Map base JDBC support for arbitrary attributes to MySQL tables.","[{'comment': ""Don't think this line belongs here..."", 'commenter': 'necouchman'}, {'comment': 'Whoa whoops. Clearly I botched a rebase.', 'commenter': 'mike-jumper'}]"
233,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ArbitraryAttributeMap.java,"@@ -0,0 +1,162 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.base;
+
+import java.util.AbstractCollection;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+
+/**
+ * Map of arbitrary attribute name/value pairs which can alternatively be
+ * exposed as a collection of model objects.
+ */
+public class ArbitraryAttributeMap extends HashMap<String, String> {
+
+    /**
+     * Creates a new ArbitraryAttributeMap containing the name/value pairs
+     * within the given collection of model objects.
+     *
+     * @param models
+     *     The model objects of all attributes which should be stored in the
+     *     new map as name/value pairs.
+     *
+     * @return
+     *     A new ArbitraryAttributeMap containing the name/value pairs within
+     *     the given collection of model objects.
+     */
+    public static ArbitraryAttributeMap fromModelCollection(Collection<ArbitraryAttributeModel> models) {
+
+        // Add all name/value pairs from the given collection to the map
+        ArbitraryAttributeMap map = new ArbitraryAttributeMap();
+        for (ArbitraryAttributeModel model : models)
+            map.put(model.getName(), model.getValue());
+
+        return map;
+
+    }
+
+    /**
+     * Returns a collection of model objects which mirrors the contents of this
+     * ArbitraryAttributeMap. Each name/value pair within the map is reflected
+     * by a corresponding model object within the returned collection. Removing
+     * a model object from the collection removes the corresponding name/value
+     * pair from the map. Adding a new model object to the collection adds a
+     * corresponding name/value pair to the map. Changes to a model object
+     * within the collection are NOT reflected on the map, however.
+     *
+     * @return
+     *     A collection of model objects which mirrors the contents of this
+     *     ArbitraryAttributeMap.
+     */
+    public Collection<ArbitraryAttributeModel> toModelCollection() {
+        return new AbstractCollection<ArbitraryAttributeModel>() {
+
+            @Override
+            public void clear() {
+                ArbitraryAttributeMap.this.clear();
+            }
+
+            @Override
+            public boolean remove(Object o) {
+
+                // The Collection view of an ArbitraryAttributeMap can contain
+                // only ArbitraryAttributeModel objects
+                if (!(o instanceof ArbitraryAttributeModel))
+                    return false;
+
+                // The only if the value matches","[{'comment': 'I think this comment may have lost some content.', 'commenter': 'necouchman'}]"
242,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -97,7 +99,7 @@ private CredentialsInfo getRadiusChallenge(RadiusPacket challengePacket) {
 
         // We have the required attributes - convert to strings and then generate the additional login box/field
         String replyMsg = replyAttr.toString();
-        String radiusState = new String(stateAttr.getValue().getBytes());
+        String radiusState = javax.xml.bind.DatatypeConverter.printHexBinary(stateAttr.getValue().getBytes());","[{'comment': ""Yowza. My knee-jerk reaction was to suggest that you import `javax.xml.bind.DatatypeConverter`, but I see you've actually already done that. ;)\r\n\r\nThis should be switched over to just `DatatypeConverter.printHexBinary(...)`."", 'commenter': 'mike-jumper'}, {'comment': 'Haha.  Well, that was silly.  Removed.', 'commenter': 'necouchman'}]"
242,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -155,9 +157,10 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
         // This is a response to a previous challenge, authenticate with that.
         else {
             try {
+                byte[] stateBytes = javax.xml.bind.DatatypeConverter.parseHexBinary(request.getParameter(RadiusStateField.PARAMETER_NAME));","[{'comment': ""Same here - this is imported (and if it weren't, definitely should be). No need to fully qualify the class name."", 'commenter': 'mike-jumper'}, {'comment': ""I'd like to also mention that this will likely throw a `NullPointerException` if the state field is not present in the request. At best, the behavior of [`parseHexBinary()`](https://docs.oracle.com/javase/7/docs/api/javax/xml/bind/DatatypeConverter.html#parseHexBinary(java.lang.String)) is not defined for the case where its sole parameter is `null`. The potential lack of the parameter in the request should probably be dealt with."", 'commenter': 'mike-jumper'}, {'comment': ""Might not be a bad idea to handle the `IllegalArgumentException` case for `parseHexBinary()` either, so that the backend generally behaves in a robust manner regardless of what's thrown at it (safely catches and handles data which does not match our assumptions rather than exploding)."", 'commenter': 'mike-jumper'}, {'comment': 'At least I was consistent.', 'commenter': 'necouchman'}, {'comment': 'Very true.', 'commenter': 'mike-jumper'}, {'comment': 'Okay, removed the extra verbosity, handled the case where state field is null, and the `IllegalArgumentException`.', 'commenter': 'necouchman'}]"
242,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -282,15 +282,15 @@ public RadiusPacket authenticate(String username, String secret, String state)
      * @throws GuacamoleException
      *     If an error is encountered trying to talk to the RADIUS server.
      */
-    public RadiusPacket sendChallengeResponse(String username, String response, String state)
+    public RadiusPacket sendChallengeResponse(String username, String response, byte[] state)
             throws GuacamoleException {
 
         if (username == null || username.isEmpty()) {
             logger.error(""Challenge/response to RADIUS requires a username."");
             return null;
         }
 
-        if (state == null || state.isEmpty()) {
+        if (state == null || state.length < 1) {","[{'comment': ""Testing whether the array length is less than one is an odd way to check whether the array is empty. There is exactly one length value which represents an empty array, and while that value is indeed less than one, it'd make more sense to test against that value directly."", 'commenter': 'mike-jumper'}, {'comment': 'Okay, should be done in a slightly more acceptable fashion, now.', 'commenter': 'necouchman'}]"
242,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -155,9 +158,21 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
         // This is a response to a previous challenge, authenticate with that.
         else {
             try {
+                String stateString = request.getParameter(RadiusStateField.PARAMETER_NAME);
+                if (stateString == null) {
+                    logger.warn(""Expected state parameter was not present in challenge/response."");
+                    throw new GuacamoleInvalidCredentialsException(""Authentication error."", CredentialsInfo.USERNAME_PASSWORD);
+                }
+
+                byte[] stateBytes = DatatypeConverter.parseHexBinary(stateString);
                 radPack = radiusService.sendChallengeResponse(credentials.getUsername(),
-                                                     challengeResponse,
-                                                     request.getParameter(RadiusStateField.PARAMETER_NAME));
+                                                              challengeResponse,
+                                                              stateBytes);
+            }
+            catch (IllegalArgumentException e) {
+                logger.warn(""Illegal hexadecimal value while parsing RADIUS state string."", e.getMessage());
+                logger.debug(""Encountered exception while attepmting to perse the hexidecimanl state value."", e);","[{'comment': '""attepmting to perse the hexidecimanl""', 'commenter': 'mike-jumper'}, {'comment': 'Whoa, not my best job of speling.', 'commenter': 'necouchman'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
242,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -155,9 +158,21 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
         // This is a response to a previous challenge, authenticate with that.
         else {
             try {
+                String stateString = request.getParameter(RadiusStateField.PARAMETER_NAME);
+                if (stateString == null) {
+                    logger.warn(""Expected state parameter was not present in challenge/response."");
+                    throw new GuacamoleInvalidCredentialsException(""Authentication error."", CredentialsInfo.USERNAME_PASSWORD);
+                }
+
+                byte[] stateBytes = DatatypeConverter.parseHexBinary(stateString);
                 radPack = radiusService.sendChallengeResponse(credentials.getUsername(),
-                                                     challengeResponse,
-                                                     request.getParameter(RadiusStateField.PARAMETER_NAME));
+                                                              challengeResponse,
+                                                              stateBytes);
+            }
+            catch (IllegalArgumentException e) {
+                logger.warn(""Illegal hexadecimal value while parsing RADIUS state string."", e.getMessage());","[{'comment': 'If you are going to include `e.getMessage()` within the log message, you will need to use the `{}` placeholder (analogous to `%s` of `printf`). See:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/9b5483edc24d88a05075343c76377057de09f9e8/extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java#L127', 'commenter': 'mike-jumper'}, {'comment': 'Apparently I should not try to choose first thing on Sunday morning.', 'commenter': 'necouchman'}, {'comment': 'Or perhaps code...', 'commenter': 'necouchman'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
245,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -237,7 +237,7 @@
      * @throws GuacamoleException","[{'comment': 'New parameter needs to be added to the documentation.', 'commenter': 'necouchman'}]"
245,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -257,7 +257,7 @@ private String getConnectionSearchFilter(String userDN,
             LDAPSearchResults userRoleGroupResults = ldapConnection.search(
                 groupBaseDN,
                 LDAPConnection.SCOPE_SUB,
-                ""(&(!(objectClass=guacConfigGroup))(member="" + escapingService.escapeLDAPSearchFilter(userDN) + ""))"",
+                ""(&(!(objectClass=guacConfigGroup))(|(member="" + escapingService.escapeLDAPSearchFilter(userDN) + "")(memberUid="" + user.getCredentials().getUsername() + "")))"",","[{'comment': 'The username value here will need to be escaped for inclusion in a filter.', 'commenter': 'mike-jumper'}]"
252,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleException.java,"@@ -68,5 +68,15 @@ public GuacamoleException(Throwable cause) {
     public GuacamoleStatus getStatus() {
         return GuacamoleStatus.SERVER_ERROR;
     }
+
+    /**
+     * Returns the numeric HTTP status code associated with this exception.","[{'comment': 'I think the semantics of the value returned here need to be more clearly defined. With `GuacamoleStatus`, for example, `getHttpStatusCode()` is defined as returning ""the most applicable HTTP error code"". In this case, we should be clear that the HTTP status code should be the nearest equivalent to the status represented by this exception.', 'commenter': 'mike-jumper'}, {'comment': 'Reworded it a bit.', 'commenter': 'necouchman'}]"
252,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleException.java,"@@ -68,5 +68,15 @@ public GuacamoleException(Throwable cause) {
     public GuacamoleStatus getStatus() {
         return GuacamoleStatus.SERVER_ERROR;
     }
+
+    /**
+     * Returns the numeric HTTP status code associated with this exception.
+     *
+     * @return
+     *     The numeric HTTP status code associated with this exception.
+     */
+    public Integer getHttpStatusCode() {","[{'comment': 'This should a primitive `int`, not `Integer`.', 'commenter': 'mike-jumper'}, {'comment': 'Changed.', 'commenter': 'necouchman'}]"
252,guacamole-common/src/main/java/org/apache/guacamole/servlet/GuacamoleHTTPTunnelServlet.java,"@@ -149,26 +149,23 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)
      * @param response
      *     The HTTP response to use to send the error.
      *
-     * @param guacStatus
-     *     The status to send
-     *
-     * @param message
-     *     A human-readable message that can be presented to the user.
+     * @param guacamoleException
+     *     The exception that caused this error.
      *
      * @throws ServletException
      *     If an error prevents sending of the error code.
      */
     protected void sendError(HttpServletResponse response,
-            GuacamoleStatus guacStatus, String message)
+            GuacamoleException guacamoleException)
             throws ServletException {
 
         try {
 
             // If response not committed, send error code and message
             if (!response.isCommitted()) {
-                response.addHeader(""Guacamole-Status-Code"", Integer.toString(guacStatus.getGuacamoleStatusCode()));
-                response.addHeader(""Guacamole-Error-Message"", message);
-                response.sendError(guacStatus.getHttpStatusCode());
+                response.addHeader(""Guacamole-Status-Code"", Integer.toString(guacamoleException.getStatus().getGuacamoleStatusCode()));
+                response.addHeader(""Guacamole-Error-Message"", guacamoleException.getMessage());","[{'comment': 'The exception message should only be exposed via the `Guacamole-Error-Message` header when the exception itself deals with a client-side issue (any subclass of `GuacamoleClientException`). For other exceptions, the message should be assumed to contain internal information, and should not be forwarded along to the client.\r\n\r\nThis is the reason for the difference in handling below, where ""Internal server error"" is explicitly substituted for the exception message if the exception is not a `GuacamoleClientException`.', 'commenter': 'mike-jumper'}, {'comment': ""Okay, I think I've reworked this in a way that avoids duplicating too much code but successfully hides internals we don't want to reveal."", 'commenter': 'necouchman'}]"
252,guacamole-common/src/main/java/org/apache/guacamole/servlet/GuacamoleHTTPTunnelServlet.java,"@@ -256,14 +259,18 @@ else if(query.startsWith(WRITE_PREFIX))
 
         // Catch any thrown guacamole exception and attempt to pass within the
         // HTTP response, logging each error appropriately.
-        catch (GuacamoleClientException e) {
-            logger.warn(""HTTP tunnel request rejected: {}"", e.getMessage());
-            sendError(response, e.getStatus(), e.getMessage());
-        }
         catch (GuacamoleException e) {
-            logger.error(""HTTP tunnel request failed: {}"", e.getMessage());
-            logger.debug(""Internal error in HTTP tunnel."", e);
-            sendError(response, e.getStatus(), ""Internal server error."");
+            if (e instanceof GuacamoleClientException) {","[{'comment': ""There's no need to manually check `instanceof` - this is exactly what `catch` is for."", 'commenter': 'mike-jumper'}, {'comment': ""Okay - I wasn't sure what the more accepted/elegant approach was.  Will rework it that way."", 'commenter': 'necouchman'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
252,guacamole-common/src/main/java/org/apache/guacamole/websocket/GuacamoleWebSocketTunnelEndpoint.java,"@@ -71,11 +71,15 @@
      *
      * @param session The outbound WebSocket connection to close.
      * @param guac_status The status to send.
+     * @param webSocketCode The numeric WebSocket status to send.
      */
-    private void closeConnection(Session session, GuacamoleStatus guac_status) {
+    private void closeConnection(Session session, GuacamoleStatus guac_status,
+            Integer webSocketCode) {
 
         try {
-            CloseCode code = CloseReason.CloseCodes.getCloseCode(guac_status.getWebSocketCode());
+            if (webSocketCode == null)","[{'comment': ""Why not the same approach that you used with the HTTP status code handling? (Separate parameters for each type of status code rather than passing `GuacamoleStatus`)\r\n\r\nIt's generally bad practice to rely on wrapper classes like `Integer` when not necessary, and I think this is one of those cases where we really should be looking for a way to use a primitive `int`."", 'commenter': 'mike-jumper'}, {'comment': 'Ok.', 'commenter': 'necouchman'}, {'comment': 'Switched to `int` and the same approach - passing both parameters as an `int` and not passing `GuacamoleStatus` at all.', 'commenter': 'necouchman'}]"
252,guacamole-common/src/main/java/org/apache/guacamole/websocket/GuacamoleWebSocketTunnelEndpoint.java,"@@ -109,15 +113,15 @@ public void onOpen(final Session session, EndpointConfig config) {
             // Get tunnel
             tunnel = createTunnel(session, config);
             if (tunnel == null) {
-                closeConnection(session, GuacamoleStatus.RESOURCE_NOT_FOUND);
+                closeConnection(session, GuacamoleStatus.RESOURCE_NOT_FOUND, null);","[{'comment': 'Assuming that we do go the status code / WebSocket code route (ie: same as the HTTP case), the DRY approach here would be to overload `closeConnection()` with a variant which accepts only `GuacamoleStatus`, pulling the codes it needs from there.', 'commenter': 'mike-jumper'}, {'comment': 'Sounds good.', 'commenter': 'necouchman'}, {'comment': ""I re-implemented this with just `int` and no overloading, since the only reason to pass the `GuacamoleStatus` parameter is to access the `getGuacamoleStatusCode()` method.  Let me know how this looks - it doesn't feel very elegant, but maybe better than `Integer` and `null` route."", 'commenter': 'necouchman'}, {'comment': 'Okay, dense moment is passed - I know what to do, now...hang on, another change coming.', 'commenter': 'necouchman'}]"
252,guacamole-common/src/main/java/org/apache/guacamole/websocket/GuacamoleWebSocketTunnelEndpoint.java,"@@ -85,6 +92,21 @@ private void closeConnection(Session session, GuacamoleStatus guac_status) {
 
     }
 
+    /**
+     * Sends the given Guacaomle Status and closes the given
+     * connection.
+     *
+     * @param session
+     *     The outbound WebSocket connection to close.
+     *
+     * @param guac_status","[{'comment': 'Being new/touched code, this should be updated to match current code style (`guacStatus` not `guac_status`). The old `guac_status` parameter is a holdover from the days where I used C style for everything.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/AuthenticationProviderService.java,"@@ -0,0 +1,202 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import com.onelogin.saml2.authn.AuthnRequest;
+import com.onelogin.saml2.authn.SamlResponse;
+import com.onelogin.saml2.exception.SettingsException;
+import com.onelogin.saml2.exception.ValidationError;
+import com.onelogin.saml2.http.HttpRequest;
+import com.onelogin.saml2.servlet.ServletUtils;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.util.Util;
+import java.io.IOException;
+import java.util.Arrays;
+import javax.servlet.http.HttpServletRequest;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.xpath.XPathExpressionException;
+import org.apache.guacamole.auth.saml.conf.ConfigurationService;
+import org.apache.guacamole.auth.saml.form.SAMLRedirectField;
+import org.apache.guacamole.auth.saml.user.AuthenticatedUser;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.SAXException;
+
+/**
+ * Class that provides services for use by the SAML Authentication Provider class.
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+
+    /**
+     * Service for retrieving SAML configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<AuthenticatedUser> authenticatedUserProvider;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+
+        HttpServletRequest request = credentials.getRequest();
+
+        // Initialize and configure SAML client.
+        Saml2Settings samlSettings = confService.getSamlSettings();
+
+        if (request != null) {
+            
+            // Look for the SAML Response parameter.
+            String samlResponseParam = request.getParameter(""SAMLResponse"");
+
+            if (samlResponseParam != null) {
+
+                // Convert the SAML response into the version needed for the client.
+                HttpRequest httpRequest = ServletUtils.makeHttpRequest(request);
+                try {
+
+                    // Generate the response object
+                    SamlResponse samlResponse = new SamlResponse(samlSettings, httpRequest);
+
+                    if (!samlResponse.validateNumAssertions()) {
+                        logger.warn(""SAML response contained other than single assertion."");
+                        logger.debug(""validateNumAssertions returned false."");
+                        throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                    }
+                    if (!samlResponse.validateTimestamps()) {
+                        logger.warn(""SAML response timestamps were invalid."");
+                        logger.debug(""validateTimestamps returned false."");
+                        throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                    }
+
+                    // Grab the username, and, if present, finish authentication.
+                    String username = samlResponse.getNameId().toLowerCase();
+                    if (username != null) {
+                        credentials.setUsername(username);
+                        AuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
+                        authenticatedUser.init(username, credentials);
+                        return authenticatedUser;
+                    }
+                }
+
+                // Errors are logged and result in a normal username/password login box.
+                catch (IOException e) {
+                    logger.warn(""Error during I/O while parsing SAML response: {}"", e.getMessage());
+                    logger.debug(""Received IOException when trying to parse SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (ParserConfigurationException e) {
+                    logger.warn(""Error configuring XML parser: {}"", e.getMessage());
+                    logger.debug(""Received ParserConfigurationException when trying to parse SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (SAXException e) {
+                    logger.warn(""Bad XML when parsing SAML response: {}"", e.getMessage());
+                    logger.debug(""Received SAXException while parsing SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (SettingsException e) {
+                    logger.warn(""Error with SAML settings while parsing response: {}"", e.getMessage());
+                    logger.debug(""Received SettingsException while parsing SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (ValidationError e) {
+                    logger.warn(""Error validating SAML response: {}"", e.getMessage());
+                    logger.debug(""Received ValidationError while parsing SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (XPathExpressionException e) {
+                    logger.warn(""Problem with XML parsing response: {}"", e.getMessage());
+                    logger.debug(""Received XPathExpressionException while processing SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (Exception e) {
+                    logger.warn(""Exception while getting name from SAML response: {}"", e.getMessage());
+                    logger.debug(""Received Exception while retrieving name from SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }","[{'comment': ""Wow, this is nasty.  Unfortunately the SAML client doesn't currently capture exceptions it generates, so we have to do it, here.\r\n\r\nSince one of the methods just throws `Exception`, which I have to capture here at the end, I could remove all of the other `catch()` statements and just capture it at the `Exception` level.  Is that acceptable, since it's actually specifically thrown by one of those methods, or should I stick with `catch`ing each one individually?"", 'commenter': 'necouchman'}, {'comment': 'Will just keep this as-is for now - better at this point to capture the exceptions with specific error messages than to lump them all together.', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/SAMLAuthenticationProviderResource.java,"@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.util.Util;
+import java.net.URI;
+import java.net.URISyntaxException;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.FormParam;
+import javax.ws.rs.Path;
+import javax.ws.rs.POST;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.auth.saml.conf.ConfigurationService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A class that implements the REST API necessary for the
+ * SAML Idp to POST back its response to Guacamole.
+ */
+public class SAMLAuthenticationProviderResource {
+
+    /**
+     * The Logger for the class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(SAMLAuthenticationProviderResource.class); 
+
+    /**
+     * The configuration service for this module.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * A REST endpoint that is POSTed to by the SAML Idp
+     * with the results of the SAML SSO Authentication.
+     */
+    @POST
+    @Path(""callback"")
+    public Response processSamlResponse(@FormParam(""SAMLResponse"") String samlResponse)
+            throws GuacamoleException {
+
+        String guacBase = confService.getCallbackUrl().toString();
+        try {
+            Response redirectHome = Response.seeOther(
+                new URI(guacBase + ""?SAMLResponse="" + Util.urlEncoder(samlResponse))).build();
+            return redirectHome;","[{'comment': ""This works okay; however, this redirect tends to cause issues with header size in my testing - I'm using the CAS SAML IdP, and I had to bump up the maxHttpHeaderSize on Tomcat and then the proxy_buffer_size and proxy_busy_buffers_size parameter in Nginx to get this to work.  It does work reliably, but not sure if this is the best way to go, or if I should try to process the SAML response directly in here?"", 'commenter': 'necouchman'}, {'comment': ""Okay - I changed this around and tried another approach.  I haven't tested, yet, to make sure it works, but it should at least take care of the need to bump up header sizes."", 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -0,0 +1,223 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml.conf;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.settings.SettingsBuilder;
+import java.io.File;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.apache.guacamole.properties.StringGuacamoleProperty;
+import org.apache.guacamole.properties.UrlGuacamoleProperty;
+
+/**
+ * Service for retrieving configuration information regarding the SAML
+ * authentication module.
+ */
+public class ConfigurationService {
+
+    /**
+     * The file containing the XML Metadata associated with the SAML IdP.
+     */
+    private static final FileGuacamoleProperty SAML_IDP_METADATA =
+            new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-metadata""; }","[{'comment': ""Unfortunately this option has no effect right now, because the OneLogin SAML client has not released the version that implements pulling settings from the IdP Metadata (it's implemented in the latest git master repo, just not released into Maven).  Hopefully it'll be out, soon, but the lead developer hasn't been very responsive."", 'commenter': 'necouchman'}, {'comment': 'This is now implemented - OneLogin released version 2.3.0 of their Java SAML client, which includes this capability.', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -0,0 +1,223 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml.conf;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.settings.SettingsBuilder;
+import java.io.File;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.apache.guacamole.properties.StringGuacamoleProperty;
+import org.apache.guacamole.properties.UrlGuacamoleProperty;
+
+/**
+ * Service for retrieving configuration information regarding the SAML
+ * authentication module.
+ */
+public class ConfigurationService {
+
+    /**
+     * The file containing the XML Metadata associated with the SAML IdP.
+     */
+    private static final FileGuacamoleProperty SAML_IDP_METADATA =
+            new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-metadata""; }
+
+    };
+
+    /**
+     * The URL of the SAML IdP.
+     */
+    private static final UrlGuacamoleProperty SAML_IDP_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-url""; }
+
+    };
+
+    /**
+     * The identifier for this SAML client.  The default is
+     * ""Apache Guacamole""
+     */
+    private static final StringGuacamoleProperty SAML_ENTITY_ID =
+            new StringGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-entity-id""; }
+
+    };
+
+    /**
+     * The callback URL to use for SAML IdP, normally the base
+     * of the Guacamole install.
+     */
+    private static final UrlGuacamoleProperty SAML_CALLBACK_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-callback-url""; }
+
+    };
+
+    /**
+     * The single logout redirect URL.
+     */
+    private static final UrlGuacamoleProperty SAML_LOGOUT_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-logout-url""; }
+
+    };
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * Returns the client ID which should be submitted to the SAML IdP,
+     * as configured with guacamole.properties.  The default value is
+     * ""Apache Guacamole"".
+     *
+     * @return
+     *     The client ID to use when communicating with the SAML IdP,
+     *     as configured with guacamole.properties, or the default
+     *     of ""Apache Guacamole"" if not specified.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the client ID
+     *     property is missing.
+     */
+    private String getEntityId() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_ENTITY_ID,
+            ""Apache Guacamole""","[{'comment': 'This needs to be changed - it looks like the Entity ID should actually be a URL of some sort.', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -0,0 +1,223 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml.conf;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.settings.SettingsBuilder;
+import java.io.File;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.apache.guacamole.properties.StringGuacamoleProperty;
+import org.apache.guacamole.properties.UrlGuacamoleProperty;
+
+/**
+ * Service for retrieving configuration information regarding the SAML
+ * authentication module.
+ */
+public class ConfigurationService {
+
+    /**
+     * The file containing the XML Metadata associated with the SAML IdP.
+     */
+    private static final FileGuacamoleProperty SAML_IDP_METADATA =
+            new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-metadata""; }
+
+    };
+
+    /**
+     * The URL of the SAML IdP.
+     */
+    private static final UrlGuacamoleProperty SAML_IDP_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-url""; }
+
+    };
+
+    /**
+     * The identifier for this SAML client.  The default is
+     * ""Apache Guacamole""
+     */
+    private static final StringGuacamoleProperty SAML_ENTITY_ID =
+            new StringGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-entity-id""; }
+
+    };
+
+    /**
+     * The callback URL to use for SAML IdP, normally the base
+     * of the Guacamole install.
+     */
+    private static final UrlGuacamoleProperty SAML_CALLBACK_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-callback-url""; }
+
+    };
+
+    /**
+     * The single logout redirect URL.
+     */
+    private static final UrlGuacamoleProperty SAML_LOGOUT_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-logout-url""; }
+
+    };
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * Returns the client ID which should be submitted to the SAML IdP,
+     * as configured with guacamole.properties.  The default value is
+     * ""Apache Guacamole"".
+     *
+     * @return
+     *     The client ID to use when communicating with the SAML IdP,
+     *     as configured with guacamole.properties, or the default
+     *     of ""Apache Guacamole"" if not specified.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the client ID
+     *     property is missing.
+     */
+    private String getEntityId() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_ENTITY_ID,
+            ""Apache Guacamole""
+        );
+    }
+
+    /**
+     * The file that contains the metadata that the SAML client should
+     * use to communicate with the SAML IdP.  This is generated by the
+     * SAML IdP and should be uploaded to the system where the Guacamole
+     * client is running.
+     *
+     * @return
+     *     The file containinging the metadata used by the SAML client
+     *     when it communicates with the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacmaole.propeties cannot be parsed, or if the client
+     *     metadata is missing.
+     */
+    private File getIdpMetadata() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_IDP_METADATA);
+    }
+
+    /**
+     * Retrieve the URL used to log in to the SAML IdP.
+     *
+     * @return
+     *     The URL used to log in to the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URL getIdpUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_IDP_URL,
+            null
+        );
+    }
+
+    /**
+     * The callback URL used for the SAML IdP to POST a response
+     * to upon completion of authentication, normally the base
+     * of the Guacamole install.
+     *
+     * @return
+     *     The callback URL to be sent to the SAML IdP that will
+     *     be POSTed to upon completion of SAML authentication.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the
+     *     callback parameter is missing.
+     */
+    public URL getCallbackUrl() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_CALLBACK_URL);
+    }
+
+    /**
+     * Return the URL used to log out from the SAML IdP.
+     *
+     * @return
+     *     The URL used to log out from the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URL getLogoutUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_LOGOUT_URL,
+            null
+        );
+    }
+
+    /**
+     * Returns the collection of SAML settings used to
+     * initialize the client.
+     *
+     * @return
+     *     The collection of SAML settings used to 
+     *     initalize the SAML client.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed or
+     *     if parameters are missing.
+     */
+    public Saml2Settings getSamlSettings() throws GuacamoleException {
+
+        // Initialize and configure SAML client.
+        Map<String, Object> samlMap = new HashMap<String, Object>();
+        samlMap.put(""onelogin.saml2.sp.entityid"", getEntityId());
+        samlMap.put(""onelogin.saml2.sp.assertion_consumer_service.url"", getCallbackUrl() + ""/api/ext/saml/callback"");
+        samlMap.put(""onelogin.saml2.idp.entityid"", getIdpUrl());
+        samlMap.put(""onelogin.saml2.idp.single_sign_on_service.url"", getIdpUrl());
+        samlMap.put(""onelogin.saml2.idp.single_sign_on_sevice.binding"", ""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"");","[{'comment': 'Not sure if I should use constants here??', 'commenter': 'necouchman'}]"
254,guacamole-ext/src/main/java/org/apache/guacamole/properties/UrlGuacamoleProperty.java,"@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+
+/**
+ * A GuacamoleProperty whose value is a URL.
+ */
+public abstract class UrlGuacamoleProperty implements GuacamoleProperty<URL> {","[{'comment': 'I went ahead and put this as a `guacamole-ext` property, as it seems like this might be useful outside of just this extension.', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/licenses/LICENSE,"@@ -0,0 +1,257 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      ""License"" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      ""Licensor"" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      ""Legal Entity"" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      ""control"" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      ""You"" (or ""Your"") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      ""Source"" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      ""Object"" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      ""Work"" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      ""Derivative Works"" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      ""Contribution"" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, ""submitted""
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as ""Not a Contribution.""
+
+      ""Contributor"" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a ""NOTICE"" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an ""AS IS"" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets ""[]""
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same ""printed page"" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the ""License"");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an ""AS IS"" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+
+==============================================================================
+
+APACHE GUACAMOLE SUBCOMPONENTS
+
+Apache Guacamole includes a number of subcomponents with separate copyright
+notices and license terms. Your use of these subcomponents is subject to the
+terms and conditions of the following licenses.
+
+
+AOP Alliance (http://aopalliance.sourceforge.net/)
+--------------------------------------------------
+
+    Version: 1.0
+    From: 'AOP Alliance' (http://aopalliance.sourceforge.net/members.html)
+    License(s):
+        Public Domain (bundled/aopalliance-1.0/LICENSE)
+
+
+Google Guice (https://github.com/google/guice)
+----------------------------------------------
+
+    Version: 3.0
+    From: 'Google Inc.' (http://www.google.com/)
+    License(s):
+        Apache v2.0 (bundled/guice-3.0/COPYING)
+
+
+jose.4.j (https://bitbucket.org/b_c/jose4j/)
+--------------------------------------------
+
+    Version: 0.5.5
+    From: 'Brian Campbell' (https://bitbucket.org/b_c/)
+    License(s):
+        Apache v2.0 (bundled/jose4j-0.5.5/LICENSE)
+
+
+JSR-330 / Dependency Injection for Java (http://code.google.com/p/atinject/)
+----------------------------------------------------------------------------
+
+    Version: 1
+    From: 'JSR-330 Expert Group' (https://jcp.org/en/jsr/detail?id=330)
+    License(s):
+        Apache v2.0 (bundled/javax.inject-1/LICENSE-2.0.txt)
+
+
+Coveo Dead Simple SAML 2.0 Client (https://github.com/coveo/saml-client)","[{'comment': 'Oops, wrong client...', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/licenses/bundled/saml-client-1.2.0/LICENSE,"@@ -0,0 +1,20 @@
+The MIT License (MIT)
+Copyright (c) 2016 Coveo
+
+Permission is hereby granted, free of charge, to any person obtaining a
+copy of this software and associated documentation files (the ""Software""),
+to deal in the Software without restriction, including without limitation
+the rights to use, copy, modify, merge, publish, distribute, sublicense,
+and/or sell copies of the Software, and to permit persons to whom the
+Software is furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice shall be
+    included in all copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
+    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
+    IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","[{'comment': 'Wrong SAML client.', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/pom.xml,"@@ -0,0 +1,260 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-saml</artifactId>
+    <packaging>jar</packaging>
+    <version>1.0.0</version>","[{'comment': '1.2.0*', 'commenter': 'mike-jumper'}, {'comment': 'Whoops - looks like this has already been updated.', 'commenter': 'mike-jumper'}]"
254,extensions/guacamole-auth-saml/pom.xml,"@@ -0,0 +1,260 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-saml</artifactId>
+    <packaging>jar</packaging>
+    <version>1.0.0</version>
+    <name>guacamole-auth-saml</name>
+    <url>http://guacamole.apache.org/</url>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+
+            <!-- Written for 1.8 -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.3</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                    <compilerArgs>
+                        <arg>-Xlint:all</arg>
+                        <arg>-Werror</arg>
+                    </compilerArgs>
+                    <fork>true</fork>
+                </configuration>
+            </plugin>
+
+            <!-- Pre-cache Angular templates with maven-angular-plugin -->
+            <plugin>
+                <groupId>com.keithbranton.mojo</groupId>
+                <artifactId>angular-maven-plugin</artifactId>
+                <version>0.3.2</version>
+                <executions>
+                    <execution>
+                        <phase>generate-resources</phase>
+                        <goals>
+                            <goal>html2js</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <configuration>
+                    <sourceDir>${basedir}/src/main/resources</sourceDir>
+                    <include>**/*.html</include>
+                    <target>${basedir}/src/main/resources/generated/templates-main/templates.js</target>
+                    <prefix>app/ext/guac-saml</prefix>
+                </configuration>
+            </plugin>
+
+            <!-- JS/CSS Minification Plugin -->
+            <plugin>
+                <groupId>com.samaxes.maven</groupId>
+                <artifactId>minify-maven-plugin</artifactId>
+                <version>1.7.5</version>
+                <executions>
+                    <execution>
+                        <id>default-cli</id>
+                        <configuration>
+                            <charset>UTF-8</charset>
+
+                            <webappSourceDir>${basedir}/src/main/resources</webappSourceDir>
+                            <webappTargetDir>${project.build.directory}/classes</webappTargetDir>
+
+                            <cssSourceDir>/</cssSourceDir>
+                            <cssTargetDir>/</cssTargetDir>
+                            <cssFinalFile>saml.css</cssFinalFile>
+
+                            <cssSourceFiles>
+                                <cssSourceFile>license.txt</cssSourceFile>
+                            </cssSourceFiles>
+
+                            <cssSourceIncludes>
+                                <cssSourceInclude>**/*.css</cssSourceInclude>
+                            </cssSourceIncludes>
+
+                            <jsSourceDir>/</jsSourceDir>
+                            <jsTargetDir>/</jsTargetDir>
+                            <jsFinalFile>saml.js</jsFinalFile>
+
+                            <jsSourceFiles>
+                                <jsSourceFile>license.txt</jsSourceFile>
+                            </jsSourceFiles>
+
+                            <jsSourceIncludes>
+                                <jsSourceInclude>**/*.js</jsSourceInclude>
+                            </jsSourceIncludes>
+
+                            <!-- Do not minify and include tests -->
+                            <jsSourceExcludes>
+                                <jsSourceExclude>**/*.test.js</jsSourceExclude>
+                            </jsSourceExcludes>
+                            <jsEngine>CLOSURE</jsEngine>
+
+                            <!-- Disable warnings for JSDoc annotations -->
+                            <closureWarningLevels>
+                                <misplacedTypeAnnotation>OFF</misplacedTypeAnnotation>
+                                <nonStandardJsDocs>OFF</nonStandardJsDocs>
+                            </closureWarningLevels>
+
+                        </configuration>
+                        <goals>
+                            <goal>minify</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Copy dependencies prior to packaging -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.10</version>
+                <executions>
+                    <execution>
+                        <id>unpack-dependencies</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>unpack-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <includeScope>runtime</includeScope>
+                            <outputDirectory>${project.build.directory}/classes</outputDirectory>
+                            <excludes>META-INF/*.SF,META-INF/*.DSA</excludes>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Assembly plugin - for easy distribution -->
+            <plugin>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>2.5.3</version>
+                <configuration>
+                    <finalName>${project.artifactId}-${project.version}</finalName>
+                    <appendAssemblyId>false</appendAssemblyId>
+                    <descriptors>
+                        <descriptor>src/main/assembly/dist.xml</descriptor>
+                    </descriptors>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>make-dist-archive</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Verify format using Apache RAT -->
+            <plugin>
+                <groupId>org.apache.rat</groupId>
+                <artifactId>apache-rat-plugin</artifactId>
+                <version>0.12</version>
+
+                <configuration>
+                    <excludes>
+                        <exclude>**/*.json</exclude>
+                        <exclude>src/licenses/**/*</exclude>
+                        <exclude>src/main/resources/templates/*.html</exclude>
+                    </excludes>
+                </configuration>
+
+                <!-- Bind RAT to validate phase -->
+                <executions>
+                    <execution>
+                        <id>validate</id>
+                        <phase>validate</phase>
+                        <goals>
+                            <goal>check</goal>
+                        </goals>
+                    </execution>
+                </executions>
+
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <dependencies>
+
+        <!-- Guacamole Extension API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-ext</artifactId>
+            <version>1.0.0</version>","[{'comment': '1.2.0*', 'commenter': 'mike-jumper'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -0,0 +1,236 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml.conf;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.settings.IdPMetadataParser;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.settings.SettingsBuilder;
+import java.io.File;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.apache.guacamole.properties.UrlGuacamoleProperty;
+
+/**
+ * Service for retrieving configuration information regarding the SAML
+ * authentication module.
+ */
+public class ConfigurationService {
+
+    /**
+     * The file containing the XML Metadata associated with the SAML IdP.
+     */
+    private static final FileGuacamoleProperty SAML_IDP_METADATA =
+            new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-metadata""; }
+
+    };
+
+    /**
+     * The URL of the SAML IdP.
+     */
+    private static final UrlGuacamoleProperty SAML_IDP_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-url""; }
+
+    };
+
+    /**
+     * The URL identifier for this SAML client.
+     */
+    private static final UrlGuacamoleProperty SAML_ENTITY_ID =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-entity-id""; }
+
+    };
+
+    /**
+     * The callback URL to use for SAML IdP, normally the base
+     * of the Guacamole install.
+     */
+    private static final UrlGuacamoleProperty SAML_CALLBACK_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-callback-url""; }
+
+    };
+
+    /**
+     * The single logout redirect URL.
+     */
+    private static final UrlGuacamoleProperty SAML_LOGOUT_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-logout-url""; }
+
+    };
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * Returns the URL to be used as the client ID which will be
+     * submitted to the SAML IdP as configured in
+     * guacamole.properties.
+     *
+     * @return
+     *     The URL to be used as the client ID sent to the
+     *     SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the
+     *     property is missing.
+     */
+    private URL getEntityId() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_ENTITY_ID);
+    }
+
+    /**
+     * The file that contains the metadata that the SAML client should
+     * use to communicate with the SAML IdP.  This is generated by the
+     * SAML IdP and should be uploaded to the system where the Guacamole
+     * client is running.
+     *
+     * @return
+     *     The file containing the metadata used by the SAML client
+     *     when it communicates with the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the client
+     *     metadata is missing.
+     */
+    private File getIdpMetadata() throws GuacamoleException {
+        return environment.getProperty(SAML_IDP_METADATA);
+    }
+
+    /**
+     * Retrieve the URL used to log in to the SAML IdP.
+     *
+     * @return
+     *     The URL used to log in to the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URL getIdpUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_IDP_URL,
+            null
+        );","[{'comment': 'This is the behavior of `environment.getProperty(SAML_IDP_URL)`.', 'commenter': 'mike-jumper'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -0,0 +1,236 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml.conf;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.settings.IdPMetadataParser;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.settings.SettingsBuilder;
+import java.io.File;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.apache.guacamole.properties.UrlGuacamoleProperty;
+
+/**
+ * Service for retrieving configuration information regarding the SAML
+ * authentication module.
+ */
+public class ConfigurationService {
+
+    /**
+     * The file containing the XML Metadata associated with the SAML IdP.
+     */
+    private static final FileGuacamoleProperty SAML_IDP_METADATA =
+            new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-metadata""; }
+
+    };
+
+    /**
+     * The URL of the SAML IdP.
+     */
+    private static final UrlGuacamoleProperty SAML_IDP_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-url""; }
+
+    };
+
+    /**
+     * The URL identifier for this SAML client.
+     */
+    private static final UrlGuacamoleProperty SAML_ENTITY_ID =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-entity-id""; }
+
+    };
+
+    /**
+     * The callback URL to use for SAML IdP, normally the base
+     * of the Guacamole install.
+     */
+    private static final UrlGuacamoleProperty SAML_CALLBACK_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-callback-url""; }
+
+    };
+
+    /**
+     * The single logout redirect URL.
+     */
+    private static final UrlGuacamoleProperty SAML_LOGOUT_URL =
+            new UrlGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-logout-url""; }
+
+    };
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * Returns the URL to be used as the client ID which will be
+     * submitted to the SAML IdP as configured in
+     * guacamole.properties.
+     *
+     * @return
+     *     The URL to be used as the client ID sent to the
+     *     SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the
+     *     property is missing.
+     */
+    private URL getEntityId() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_ENTITY_ID);
+    }
+
+    /**
+     * The file that contains the metadata that the SAML client should
+     * use to communicate with the SAML IdP.  This is generated by the
+     * SAML IdP and should be uploaded to the system where the Guacamole
+     * client is running.
+     *
+     * @return
+     *     The file containing the metadata used by the SAML client
+     *     when it communicates with the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the client
+     *     metadata is missing.
+     */
+    private File getIdpMetadata() throws GuacamoleException {
+        return environment.getProperty(SAML_IDP_METADATA);
+    }
+
+    /**
+     * Retrieve the URL used to log in to the SAML IdP.
+     *
+     * @return
+     *     The URL used to log in to the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URL getIdpUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_IDP_URL,
+            null
+        );
+    }
+
+    /**
+     * The callback URL used for the SAML IdP to POST a response
+     * to upon completion of authentication, normally the base
+     * of the Guacamole install.
+     *
+     * @return
+     *     The callback URL to be sent to the SAML IdP that will
+     *     be POSTed to upon completion of SAML authentication.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the
+     *     callback parameter is missing.
+     */
+    public URL getCallbackUrl() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_CALLBACK_URL);
+    }
+
+    /**
+     * Return the URL used to log out from the SAML IdP.
+     *
+     * @return
+     *     The URL used to log out from the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URL getLogoutUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_LOGOUT_URL,
+            null
+        );","[{'comment': ""Same here - no need to specify a default of `null`. That's the default behavior of the single-parameter variant of `getProperty()`."", 'commenter': 'mike-jumper'}]"
254,extensions/guacamole-auth-saml/src/main/resources/controllers/samlController.js,"@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Controller for the ""GUAC_SAML_REDIRECT"" field, which redirects
+ * to the provided URI.
+ */
+angular.module('guacSAML').controller('guacSAMLController', ['$scope','$window',
+    function guacSAMLController($scope,$window) {
+
+    $window.location.href = $scope.field.samlRedirect;
+
+}]);","[{'comment': 'I wonder if perhaps it may be worthwhile to begin providing a standard `REDIRECT` field, as it seems commonly leveraged/duplicated when implementing SSO.', 'commenter': 'mike-jumper'}, {'comment': ""Yeah, that sounds like a good idea, I'll take a stab at consolidating those."", 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -0,0 +1,236 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml.conf;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.settings.IdPMetadataParser;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.settings.SettingsBuilder;
+import java.io.File;
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.apache.guacamole.properties.URIGuacamoleProperty;
+
+/**
+ * Service for retrieving configuration information regarding the SAML
+ * authentication module.
+ */
+public class ConfigurationService {
+
+    /**
+     * The file containing the XML Metadata associated with the SAML IdP.
+     */
+    private static final FileGuacamoleProperty SAML_IDP_METADATA =
+            new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-metadata""; }
+
+    };
+
+    /**
+     * The URL of the SAML IdP.
+     */
+    private static final URIGuacamoleProperty SAML_IDP_URL =
+            new URIGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-url""; }
+
+    };
+
+    /**
+     * The URL identifier for this SAML client.
+     */
+    private static final URIGuacamoleProperty SAML_ENTITY_ID =
+            new URIGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-entity-id""; }
+
+    };
+
+    /**
+     * The callback URL to use for SAML IdP, normally the base
+     * of the Guacamole install.
+     */
+    private static final URIGuacamoleProperty SAML_CALLBACK_URL =
+            new URIGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-callback-url""; }
+
+    };
+
+    /**
+     * The single logout redirect URL.
+     */
+    private static final URIGuacamoleProperty SAML_LOGOUT_URL =
+            new URIGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-logout-url""; }
+
+    };
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * Returns the URL to be used as the client ID which will be
+     * submitted to the SAML IdP as configured in
+     * guacamole.properties.
+     *
+     * @return
+     *     The URL to be used as the client ID sent to the
+     *     SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the
+     *     property is missing.
+     */
+    private URI getEntityId() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_ENTITY_ID);
+    }
+
+    /**
+     * The file that contains the metadata that the SAML client should
+     * use to communicate with the SAML IdP.  This is generated by the
+     * SAML IdP and should be uploaded to the system where the Guacamole
+     * client is running.
+     *
+     * @return
+     *     The file containing the metadata used by the SAML client
+     *     when it communicates with the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the client
+     *     metadata is missing.
+     */
+    private File getIdpMetadata() throws GuacamoleException {
+        return environment.getProperty(SAML_IDP_METADATA);
+    }
+
+    /**
+     * Retrieve the URL used to log in to the SAML IdP.
+     *
+     * @return
+     *     The URL used to log in to the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URI getIdpUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_IDP_URL,
+            null
+        );
+    }
+
+    /**
+     * The callback URL used for the SAML IdP to POST a response
+     * to upon completion of authentication, normally the base
+     * of the Guacamole install.
+     *
+     * @return
+     *     The callback URL to be sent to the SAML IdP that will
+     *     be POSTed to upon completion of SAML authentication.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the
+     *     callback parameter is missing.
+     */
+    public URI getCallbackUrl() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_CALLBACK_URL);
+    }
+
+    /**
+     * Return the URL used to log out from the SAML IdP.
+     *
+     * @return
+     *     The URL used to log out from the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URI getLogoutUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_LOGOUT_URL,
+            null
+        );
+    }
+
+    /**
+     * Returns the collection of SAML settings used to
+     * initialize the client.
+     *
+     * @return
+     *     The collection of SAML settings used to 
+     *     initialize the SAML client.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed or
+     *     if parameters are missing.
+     */
+    public Saml2Settings getSamlSettings() throws GuacamoleException {
+
+        File idpMetadata = getIdpMetadata();
+        Map<String, Object> samlMap;
+        if (idpMetadata != null) {
+            try {
+                samlMap = IdPMetadataParser.parseFileXML(idpMetadata.getAbsolutePath());
+            }
+            catch (Exception e) {
+                throw new GuacamoleServerException(
+                        ""Could not parse SAML IdP Metadata file."", e);
+            }
+        }
+
+        else {
+            samlMap = new HashMap<>();
+            samlMap.put(""onelogin.saml2.sp.entityid"", getEntityId().toString());
+            samlMap.put(""onelogin.saml2.sp.assertion_consumer_service.url"",
+                    getCallbackUrl().toString() + ""/api/ext/saml/callback"");
+            samlMap.put(""onelogin.saml2.idp.entityid"", getIdpUrl().toString());
+            samlMap.put(""onelogin.saml2.idp.single_sign_on_service.url"",
+                    getIdpUrl().toString());
+            samlMap.put(""onelogin.saml2.idp.single_sign_on_sevice.binding"",
+                    ""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"");
+        }
+        
+        SettingsBuilder samlBuilder = new SettingsBuilder();
+        Saml2Settings samlSettings = samlBuilder.fromValues(samlMap).build();
+        samlSettings.setDebug(true);","[{'comment': 'Why always debug?', 'commenter': 'mike-jumper'}, {'comment': 'Probably leftover from my testing.  Probably worth making this configurable...', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/AuthenticationProviderService.java,"@@ -0,0 +1,208 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import com.onelogin.saml2.authn.AuthnRequest;
+import com.onelogin.saml2.authn.SamlResponse;
+import com.onelogin.saml2.exception.SettingsException;
+import com.onelogin.saml2.exception.ValidationError;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.util.Util;
+import java.io.IOException;
+import java.util.Arrays;
+import javax.servlet.http.HttpServletRequest;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.xpath.XPathExpressionException;
+import org.apache.guacamole.auth.saml.conf.ConfigurationService;
+import org.apache.guacamole.auth.saml.form.SAMLRedirectField;
+import org.apache.guacamole.auth.saml.user.SAMLAuthenticatedUser;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.AuthenticatedUser;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.SAXException;
+
+/**
+ * Class that provides services for use by the SAMLAuthenticationProvider class.
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+
+    /**
+     * Service for retrieving SAML configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<SAMLAuthenticatedUser> authenticatedUserProvider;
+    
+    /**
+     * The map used to track active SAML responses.
+     */
+    @Inject
+    private SAMLResponseMap samlResponseMap;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+        
+        HttpServletRequest request = credentials.getRequest();
+
+        // Initialize and configure SAML client.
+        Saml2Settings samlSettings = confService.getSamlSettings();
+
+        if (request != null) {
+            
+            // Look for the SAML Response parameter.
+            String responseHash = Util.urlDecoder(request.getParameter(""responseHash""));","[{'comment': 'Does `getParameter()` not already handle URL encoding transparently?', 'commenter': 'mike-jumper'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -0,0 +1,236 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml.conf;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.settings.IdPMetadataParser;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.settings.SettingsBuilder;
+import java.io.File;
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.apache.guacamole.properties.URIGuacamoleProperty;
+
+/**
+ * Service for retrieving configuration information regarding the SAML
+ * authentication module.
+ */
+public class ConfigurationService {
+
+    /**
+     * The file containing the XML Metadata associated with the SAML IdP.
+     */
+    private static final FileGuacamoleProperty SAML_IDP_METADATA =
+            new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-metadata""; }
+
+    };
+
+    /**
+     * The URL of the SAML IdP.
+     */
+    private static final URIGuacamoleProperty SAML_IDP_URL =
+            new URIGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-idp-url""; }
+
+    };
+
+    /**
+     * The URL identifier for this SAML client.
+     */
+    private static final URIGuacamoleProperty SAML_ENTITY_ID =
+            new URIGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-entity-id""; }
+
+    };
+
+    /**
+     * The callback URL to use for SAML IdP, normally the base
+     * of the Guacamole install.
+     */
+    private static final URIGuacamoleProperty SAML_CALLBACK_URL =
+            new URIGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-callback-url""; }
+
+    };
+
+    /**
+     * The single logout redirect URL.
+     */
+    private static final URIGuacamoleProperty SAML_LOGOUT_URL =
+            new URIGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-logout-url""; }
+
+    };
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * Returns the URL to be used as the client ID which will be
+     * submitted to the SAML IdP as configured in
+     * guacamole.properties.
+     *
+     * @return
+     *     The URL to be used as the client ID sent to the
+     *     SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the
+     *     property is missing.
+     */
+    private URI getEntityId() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_ENTITY_ID);
+    }
+
+    /**
+     * The file that contains the metadata that the SAML client should
+     * use to communicate with the SAML IdP.  This is generated by the
+     * SAML IdP and should be uploaded to the system where the Guacamole
+     * client is running.
+     *
+     * @return
+     *     The file containing the metadata used by the SAML client
+     *     when it communicates with the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the client
+     *     metadata is missing.
+     */
+    private File getIdpMetadata() throws GuacamoleException {
+        return environment.getProperty(SAML_IDP_METADATA);
+    }
+
+    /**
+     * Retrieve the URL used to log in to the SAML IdP.
+     *
+     * @return
+     *     The URL used to log in to the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URI getIdpUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_IDP_URL,
+            null
+        );
+    }
+
+    /**
+     * The callback URL used for the SAML IdP to POST a response
+     * to upon completion of authentication, normally the base
+     * of the Guacamole install.
+     *
+     * @return
+     *     The callback URL to be sent to the SAML IdP that will
+     *     be POSTed to upon completion of SAML authentication.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed, or if the
+     *     callback parameter is missing.
+     */
+    public URI getCallbackUrl() throws GuacamoleException {
+        return environment.getRequiredProperty(SAML_CALLBACK_URL);
+    }
+
+    /**
+     * Return the URL used to log out from the SAML IdP.
+     *
+     * @return
+     *     The URL used to log out from the SAML IdP.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    private URI getLogoutUrl() throws GuacamoleException {
+        return environment.getProperty(
+            SAML_LOGOUT_URL,
+            null
+        );
+    }
+
+    /**
+     * Returns the collection of SAML settings used to
+     * initialize the client.
+     *
+     * @return
+     *     The collection of SAML settings used to 
+     *     initialize the SAML client.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed or
+     *     if parameters are missing.
+     */
+    public Saml2Settings getSamlSettings() throws GuacamoleException {
+
+        File idpMetadata = getIdpMetadata();
+        Map<String, Object> samlMap;
+        if (idpMetadata != null) {
+            try {
+                samlMap = IdPMetadataParser.parseFileXML(idpMetadata.getAbsolutePath());
+            }
+            catch (Exception e) {
+                throw new GuacamoleServerException(
+                        ""Could not parse SAML IdP Metadata file."", e);
+            }
+        }
+
+        else {
+            samlMap = new HashMap<>();
+            samlMap.put(""onelogin.saml2.sp.entityid"", getEntityId().toString());
+            samlMap.put(""onelogin.saml2.sp.assertion_consumer_service.url"",
+                    getCallbackUrl().toString() + ""/api/ext/saml/callback"");
+            samlMap.put(""onelogin.saml2.idp.entityid"", getIdpUrl().toString());
+            samlMap.put(""onelogin.saml2.idp.single_sign_on_service.url"",
+                    getIdpUrl().toString());
+            samlMap.put(""onelogin.saml2.idp.single_sign_on_sevice.binding"",
+                    ""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"");","[{'comment': ""> Not sure if I should use constants here??\r\n\r\nIf possible, I'd say yes. It looks like the library in use defines its own:\r\n\r\nhttps://github.com/onelogin/java-saml/blob/58fc7925a2e1e3d222c811239ed483b8f8a042ae/core/src/main/java/com/onelogin/saml2/settings/SettingsBuilder.java#L76"", 'commenter': 'mike-jumper'}, {'comment': 'Ah, yes, makes sense to use those.', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/AuthenticationProviderService.java,"@@ -0,0 +1,208 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import com.onelogin.saml2.authn.AuthnRequest;
+import com.onelogin.saml2.authn.SamlResponse;
+import com.onelogin.saml2.exception.SettingsException;
+import com.onelogin.saml2.exception.ValidationError;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.util.Util;
+import java.io.IOException;
+import java.util.Arrays;
+import javax.servlet.http.HttpServletRequest;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.xpath.XPathExpressionException;
+import org.apache.guacamole.auth.saml.conf.ConfigurationService;
+import org.apache.guacamole.auth.saml.form.SAMLRedirectField;
+import org.apache.guacamole.auth.saml.user.SAMLAuthenticatedUser;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.net.auth.AuthenticatedUser;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.SAXException;
+
+/**
+ * Class that provides services for use by the SAMLAuthenticationProvider class.
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+
+    /**
+     * Service for retrieving SAML configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<SAMLAuthenticatedUser> authenticatedUserProvider;
+    
+    /**
+     * The map used to track active SAML responses.
+     */
+    @Inject
+    private SAMLResponseMap samlResponseMap;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+        
+        HttpServletRequest request = credentials.getRequest();
+
+        // Initialize and configure SAML client.
+        Saml2Settings samlSettings = confService.getSamlSettings();
+
+        if (request != null) {
+            
+            // Look for the SAML Response parameter.
+            String responseHash = Util.urlDecoder(request.getParameter(""responseHash""));
+
+            if (responseHash != null) {
+
+                try {
+
+                    // Generate the response object
+                    if (!samlResponseMap.hasSamlResponse(responseHash))
+                        throw new GuacamoleInvalidCredentialsException(""Provided response has not found."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                        
+                    SamlResponse samlResponse = samlResponseMap.getSamlResponse(responseHash);
+
+                    if (!samlResponse.validateNumAssertions()) {
+                        logger.warn(""SAML response contained other than single assertion."");
+                        logger.debug(""validateNumAssertions returned false."");
+                        throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                    }
+                    if (!samlResponse.validateTimestamps()) {
+                        logger.warn(""SAML response timestamps were invalid."");
+                        logger.debug(""validateTimestamps returned false."");
+                        throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                    }
+
+                    // Grab the username, and, if present, finish authentication.
+                    String username = samlResponse.getNameId().toLowerCase();
+                    if (username != null) {
+                        credentials.setUsername(username);
+                        SAMLAuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
+                        authenticatedUser.init(username, credentials);
+                        return authenticatedUser;
+                    }
+                }
+
+                // Errors are logged and result in a normal username/password login box.
+                catch (IOException e) {
+                    logger.warn(""Error during I/O while parsing SAML response: {}"", e.getMessage());
+                    logger.debug(""Received IOException when trying to parse SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (ParserConfigurationException e) {
+                    logger.warn(""Error configuring XML parser: {}"", e.getMessage());
+                    logger.debug(""Received ParserConfigurationException when trying to parse SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (SAXException e) {
+                    logger.warn(""Bad XML when parsing SAML response: {}"", e.getMessage());
+                    logger.debug(""Received SAXException while parsing SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (SettingsException e) {
+                    logger.warn(""Error with SAML settings while parsing response: {}"", e.getMessage());
+                    logger.debug(""Received SettingsException while parsing SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (ValidationError e) {
+                    logger.warn(""Error validating SAML response: {}"", e.getMessage());
+                    logger.debug(""Received ValidationError while parsing SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (XPathExpressionException e) {
+                    logger.warn(""Problem with XML parsing response: {}"", e.getMessage());
+                    logger.debug(""Received XPathExpressionException while processing SAML response."", e);
+                    throw new GuacamoleInvalidCredentialsException(""Error during SAML login."",
+                                CredentialsInfo.USERNAME_PASSWORD);
+                }
+                catch (Exception e) {","[{'comment': 'Yikes - the library call(s) throw `Exception`?', 'commenter': 'mike-jumper'}, {'comment': ""Uh, yeah...the Exception handling in this particular SAML library isn't very uniform - kind of all over the place.  Hence this plus the huge multi-catch you noted below.  I actually put in a Pull Request for that project to rework the handling a bit and come up with a common `SamlException` class, but they haven't done anything with it, yet."", 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/SAMLAuthenticationProviderResource.java,"@@ -0,0 +1,156 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml;
+
+import com.google.inject.Inject;
+import com.onelogin.saml2.authn.SamlResponse;
+import com.onelogin.saml2.exception.SettingsException;
+import com.onelogin.saml2.exception.ValidationError;
+import com.onelogin.saml2.http.HttpRequest;
+import com.onelogin.saml2.servlet.ServletUtils;
+import com.onelogin.saml2.settings.Saml2Settings;
+import com.onelogin.saml2.util.Util;
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.FormParam;
+import javax.ws.rs.Path;
+import javax.ws.rs.POST;
+import javax.ws.rs.core.Context;
+import javax.xml.bind.DatatypeConverter;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.xpath.XPathExpressionException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.auth.saml.conf.ConfigurationService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.SAXException;
+
+/**
+ * A class that implements the REST API necessary for the
+ * SAML Idp to POST back its response to Guacamole.
+ */
+public class SAMLAuthenticationProviderResource {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger =
+            LoggerFactory.getLogger(SAMLAuthenticationProviderResource.class);
+    
+    /**
+     * The configuration service for this module.
+     */
+    @Inject
+    private ConfigurationService confService;
+    
+    /**
+     * The map used to track active responses.
+     */
+    @Inject
+    private SAMLResponseMap samlResponseMap;
+
+    /**
+     * A REST endpoint that is POSTed to by the SAML IdP
+     * with the results of the SAML SSO Authentication.
+     * 
+     * @param samlResponseString
+     *     The encoded response returned by the SAML IdP.
+     * 
+     * @param consumedRequest
+     *     The HttpServletRequest associated with the SAML response. The
+     *     parameters of this request may not be accessible, as the request may
+     *     have been fully consumed by JAX-RS.
+     * 
+     * @return
+     *     A HTTP Response that will redirect the user back to the
+     *     Guacamole home page, with the SAMLResponse encoded in the
+     *     return URL.
+     * 
+     * @throws GuacamoleException
+     *     If the Guacamole configuration cannot be read or an error occurs
+     *     parsing a URI.
+     */
+    @POST
+    @Path(""callback"")
+    public Response processSamlResponse(
+            @FormParam(""SAMLResponse"") String samlResponseString,
+            @Context HttpServletRequest consumedRequest)
+            throws GuacamoleException {
+        
+        String guacBase = confService.getCallbackUrl().toString();
+        Saml2Settings samlSettings = confService.getSamlSettings();
+        try {
+            HttpRequest request = ServletUtils
+                    .makeHttpRequest(consumedRequest)
+                    .addParameter(""SAMLResponse"", samlResponseString);
+            SamlResponse samlResponse = new SamlResponse(samlSettings, request);
+            
+            String responseHash = hashSamlResponse(samlResponseString);
+            samlResponseMap.putSamlResponse(responseHash, samlResponse);
+            return Response.seeOther(new URI(guacBase 
+                    + ""?responseHash=""
+                    + Util.urlEncoder(responseHash))
+            ).build();
+
+        }
+        catch (IOException
+                | NoSuchAlgorithmException
+                | ParserConfigurationException
+                | SAXException
+                | SettingsException
+                | URISyntaxException
+                | ValidationError
+                | XPathExpressionException e) {
+            throw new GuacamoleServerException(e);
+        }","[{'comment': ""The `GuacamoleServerException` thrown here should have an associated message describing the nature of the failure in context, ideally coupled with the usual logging. I'm guessing that part of the reason there isn't a message here is the breadth of this multicatch, which may need to be slit up a bit to allow useful log messages to be provided in the case of failures."", 'commenter': 'mike-jumper'}, {'comment': 'Yeah, same with catching the high-level `Exception` above, there are so many possible errors here that I just lumped them all together.  I can try to break it out a bit and at least come up with generic log messages for each of the broad exceptions.', 'commenter': 'necouchman'}, {'comment': 'Ah, yes, was confusing this with another spot.  Will rework this to handle each of those individually :-/', 'commenter': 'necouchman'}]"
254,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/SAMLResponseMap.java,"@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml;
+
+import com.google.inject.Singleton;
+import com.onelogin.saml2.authn.SamlResponse;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+/**
+ * A class that handles mapping of hashes to SAMLResponse objects.
+ */
+@Singleton
+public class SAMLResponseMap {
+    
+    /**
+     * The internal data structure that holds a map of SHA-256 hashes to
+     * SAML responses.
+     */
+    private final ConcurrentMap<String, SamlResponse> samlResponseMap =
+        new ConcurrentHashMap<>();
+    
+    /**
+     * Retrieve the SamlResponse from the map that is represented by the
+     * provided hash, or null if no such object exists.
+     * 
+     * @param hash
+     *     The SHA-256 hash of the SamlResponse.
+     * 
+     * @return 
+     *     The SamlResponse object matching the hash provided.
+     */
+    protected SamlResponse getSamlResponse(String hash) {
+        return samlResponseMap.remove(hash);","[{'comment': 'What if `getSamlResponse()` is not invoked for a particular hash, and the size of `samlResponseMap` builds? Is there an overall timeout that should be enforced?', 'commenter': 'mike-jumper'}, {'comment': ""Yeah, that's probably worthwhile to implement.  Are you thinking implementing a `Runnable` and periodically cleaning the map?"", 'commenter': 'necouchman'}]"
255,guacamole/src/main/webapp/app/navigation/services/userPageService.js,"@@ -60,9 +60,13 @@ angular.module('navigation').factory('userPageService', ['$injector',
      * @returns {PageDefinition}
      *     The user's home page.
      */
-    var generateHomePage = function generateHomePage(rootGroups) {
+    var generateHomePage = function generateHomePage(rootGroups,permissions) {","[{'comment': 'Please include a space following the comma before the `permissions` parameter.', 'commenter': 'mike-jumper'}, {'comment': 'The newly-added `permissions` parameter needs to be documented.', 'commenter': 'mike-jumper'}, {'comment': 'Styled and documented.', 'commenter': 'necouchman'}]"
255,guacamole/src/main/webapp/app/navigation/services/userPageService.js,"@@ -60,9 +60,13 @@ angular.module('navigation').factory('userPageService', ['$injector',
      * @returns {PageDefinition}
      *     The user's home page.
      */
-    var generateHomePage = function generateHomePage(rootGroups) {
+    var generateHomePage = function generateHomePage(rootGroups,permissions) {
 
         var homePage = null;
+        var settingsPages = generateSettingsPages(permissions);
+
+        if (settingsPages.length > 1)","[{'comment': ""I'm generally OK with this check (and honestly can't think of a better way), but please include a comment to document what's going on here. The need for this check is not inherently clear."", 'commenter': 'mike-jumper'}, {'comment': 'Commented.', 'commenter': 'necouchman'}]"
255,guacamole/src/main/webapp/app/navigation/services/userPageService.js,"@@ -140,13 +144,20 @@ angular.module('navigation').factory('userPageService', ['$injector',
         var deferred = $q.defer();
 
         // Resolve promise using home page derived from root connection groups
-        dataSourceService.apply(
+        var getRootGroups = dataSourceService.apply(
             connectionGroupService.getConnectionGroupTree,
             authenticationService.getAvailableDataSources(),
             ConnectionGroup.ROOT_IDENTIFIER
-        )
-        .then(function rootConnectionGroupsRetrieved(rootGroups) {
-            deferred.resolve(generateHomePage(rootGroups));
+        );
+        var getPermissionSets = dataSourceService.apply(
+            permissionService.getPermissions,
+            authenticationService.getAvailableDataSources(),
+            authenticationService.getCurrentUsername()
+        );
+
+        $q.all([getRootGroups,getPermissionSets])
+        .then(function rootConnectionGroupsPermissionsRetrieved(data) {
+            deferred.resolve(generateHomePage(data[0],data[1]));","[{'comment': 'According to [the AngularJS documentation for `$q.all()`](https://code.angularjs.org/1.3.16/docs/api/ng/service/$q#all), the function can accept either an array (in which case `data` will be a parallel array, as you use here) or an object (in which case `data` will be an object with identical keys pointing to the results). For the sake of readability, I suggest switching to the latter.', 'commenter': 'mike-jumper'}, {'comment': 'Objectified.', 'commenter': 'necouchman'}]"
255,guacamole/src/main/webapp/app/navigation/services/userPageService.js,"@@ -57,12 +57,24 @@ angular.module('navigation').factory('userPageService', ['$injector',
      *     A map of all root connection groups visible to the current user,
      *     where each key is the identifier of the corresponding data source.
      *
+     * @param {Object.<String, PermissionSet>} permissions
+     *     A map of all permissions granted to the current user, where each
+     *     key is the identifier of the corresponding data source.
+     *
+     * @param {Object.<String,","[{'comment': 'Looks like some copypasta snuck in here.', 'commenter': 'mike-jumper'}, {'comment': ""Ha.  I started to type it myself, then copied it from the function that calls this one and forgot to remove the copy I started to type.  Like any good pasta, I've cleaned it up."", 'commenter': 'necouchman'}]"
255,guacamole/src/main/webapp/app/navigation/services/userPageService.js,"@@ -57,12 +57,24 @@ angular.module('navigation').factory('userPageService', ['$injector',
      *     A map of all root connection groups visible to the current user,
      *     where each key is the identifier of the corresponding data source.
      *
+     * @param {Object.<String, PermissionSet>} permissions
+     *     A map of all permissions granted to the current user, where each
+     *     key is the identifier of the corresponding data source.
+     *
+     * @param {Object.<String,
+     *
      * @returns {PageDefinition}
      *     The user's home page.
      */
-    var generateHomePage = function generateHomePage(rootGroups) {
+    var generateHomePage = function generateHomePage(rootGroups, permissions) {
 
         var homePage = null;
+        var settingsPages = generateSettingsPages(permissions);
+
+        // If we have more than one setting page, return the main home page","[{'comment': 'Better, but the critical fact we want to highlight here is that _more than one settings page indicates that the user has administrative privileges_, and thus redirecting to a single connection would hurt the user experience. The fact that this comparison checks for more than one page is clear from the `> 1`, but the meaning behind that check is non-obvious.', 'commenter': 'mike-jumper'}, {'comment': 'Okay, added some more verbiage there.', 'commenter': 'necouchman'}]"
265,guacamole/pom.xml,"@@ -388,9 +388,14 @@
         <dependency>
             <groupId>org.webjars.bower</groupId>
             <artifactId>angular-translate-loader-static-files</artifactId>
-            <version>2.8.0</version>
+            <version>2.16.0</version>
             <scope>runtime</scope>
         </dependency>
+        <dependency>
+            <groupId>org.webjars.bower</groupId>
+            <artifactId>angular-toArrayFilter</artifactId>","[{'comment': ""The `orderBy` filter no longer supports objects, which necessitates transforming any object into an array before using it - that's what this new dependency is for."", 'commenter': 'jmuehlner'}, {'comment': 'The licenses of bundled dependencies will need to be updated (`guacamole/src/licenses`).', 'commenter': 'mike-jumper'}, {'comment': 'Same for the bundled dependencies which are already documented but whose versions have changed:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/a6579ce4e1c70ea436fa1acc26a9ce2bb1e7fe84/guacamole/src/licenses/LICENSE#L214-L220', 'commenter': 'mike-jumper'}, {'comment': 'Alright, updated.', 'commenter': 'jmuehlner'}]"
265,guacamole/src/main/webapp/app/rest/services/requestService.js,"@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service for converting $http promises that pass the entire response into
+ * promises that pass only the data from that response.
+ */
+angular.module('rest').factory('requestService', ['$q', '$http', 'Error',
+        function requestService($q, $http, Error) {
+
+    function wrappedHttpCall(object) {","[{'comment': 'Documentation needed.', 'commenter': 'mike-jumper'}, {'comment': 'Please also use the same\r\n\r\n    var someFunc = function someFunc() {\r\n        ...\r\n    };\r\n\r\ndeclaration style used elsewhere within the webapp and JS API.', 'commenter': 'mike-jumper'}, {'comment': 'Done.', 'commenter': 'jmuehlner'}]"
265,guacamole/src/main/webapp/app/index/filters/arrayFilter.js,"@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A filter for transforming an object into a an array of all non-inherited","[{'comment': '""a an array""', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'jmuehlner'}]"
265,guacamole/src/main/webapp/app/index/filters/arrayFilter.js,"@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A filter for transforming an object into a an array of all non-inherited
+ * property values.
+ */
+angular.module('index').filter('toArray', [function toArrayFactory() {
+
+    return function toArrayFiter(input) {
+
+        // If no object is available, just return an empty array
+        if (!input) {
+            return [];
+        }
+
+        return Object.keys(input).map(function fetchValueByKey(key) {
+            return input[key]","[{'comment': 'Missing semicolon.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'jmuehlner'}]"
265,guacamole/src/main/webapp/app/rest/services/requestService.js,"@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service for converting $http promises that pass the entire response into
+ * promises that pass only the data from that response.
+ */
+angular.module('rest').factory('requestService', ['$q', '$http', 'Error',
+        function requestService($q, $http, Error) {
+
+    function wrappedHttpCall(object) {
+        
+        var deferred = $q.defer();
+        
+        $http(object)","[{'comment': 'Perhaps it would be cleaner to leverage the `return` / `throw` magic provided by promises? Something like:\r\n\r\n```js\r\nreturn $http(object).then(\r\n    function success(request) { return request.data; },\r\n    function failure(request) { throw new Error(request.data); }\r\n);\r\n```\r\n\r\nwould remove one layer from the promise onion and the need for manual use of `$q`.', 'commenter': 'mike-jumper'}, {'comment': 'Good call. Updated and it looks much cleaner that way.', 'commenter': 'jmuehlner'}]"
265,guacamole/pom.xml,"@@ -324,19 +324,25 @@
         <dependency>
             <groupId>org.webjars.bower</groupId>
             <artifactId>angular</artifactId>
-            <version>1.3.16</version>
+            <version>1.6.9</version>
+            <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.webjars.bower</groupId>
+            <artifactId>angular-cookies</artifactId>","[{'comment': 'This dependency was removed via #273.', 'commenter': 'mike-jumper'}]"
265,guacamole/src/main/webapp/index.html,"@@ -61,15 +61,16 @@
         <script type=""text/javascript"" src=""webjars/lodash/2.4.1/dist/lodash.min.js""></script>
 
         <!-- AngularJS -->
-        <script type=""text/javascript"" src=""webjars/angular/1.3.16/angular.min.js""></script>
-        <script type=""text/javascript"" src=""webjars/angular-route/1.3.16/angular-route.min.js""></script>
-        <script type=""text/javascript"" src=""webjars/angular-touch/1.3.16/angular-touch.min.js""></script>
+        <script type=""text/javascript"" src=""webjars/angular/1.6.9/angular.min.js""></script>
+        <script type=""text/javascript"" src=""webjars/angular-cookies/1.6.9/angular-cookies.min.js""></script>","[{'comment': 'Same here - this dependency was removed via #273.', 'commenter': 'mike-jumper'}]"
282,guacamole/src/main/webapp/app/manage/controllers/manageConnectionController.js,"@@ -157,205 +137,178 @@ angular.module('manage').controller('manageConnectionController', ['$scope', '$i
      */
     $scope.isLoaded = function isLoaded() {
 
-        return $scope.protocols            !== null
-            && $scope.rootGroup            !== null
-            && $scope.connection           !== null
-            && $scope.parameters           !== null
-            && $scope.historyDateFormat    !== null
-            && $scope.historyEntryWrappers !== null
-            && $scope.permissions          !== null
-            && $scope.attributes           !== null
-            && $scope.canSaveConnection    !== null
-            && $scope.canDeleteConnection  !== null
-            && $scope.canCloneConnection   !== null;
+        return $scope.protocols             !== null
+            && $scope.rootGroup             !== null
+            && $scope.connection            !== null
+            && $scope.parameters            !== null
+            && $scope.historyDateFormat     !== null
+            && $scope.historyEntryWrappers  !== null
+            && $scope.managementPermissions !== null
+            && $scope.attributes            !== null;
 
     };
 
-    // Pull connection attribute schema
-    schemaService.getConnectionAttributes($scope.selectedDataSource)
-    .then(function attributesReceived(attributes) {
-        $scope.attributes = attributes;
-    }, requestService.WARN);
-
-    // Pull connection group hierarchy
-    connectionGroupService.getConnectionGroupTree(
-        $scope.selectedDataSource,
-        ConnectionGroup.ROOT_IDENTIFIER,
-        [PermissionSet.ObjectPermissionType.ADMINISTER]
-    )
-    .then(function connectionGroupReceived(rootGroup) {
-        $scope.rootGroup = rootGroup;
-    }, requestService.WARN);
-    
-    // Query the user's permissions for the current connection
-    permissionService.getEffectivePermissions($scope.selectedDataSource, authenticationService.getCurrentUsername())
-    .then(function permissionsReceived(permissions) {
-                
-        $scope.permissions = permissions;
-                        
-        // Check if the connection is new or if the user has UPDATE permission
-        $scope.canSaveConnection =
-               !identifier
-            || PermissionSet.hasSystemPermission(permissions, PermissionSet.SystemPermissionType.ADMINISTER)
-            || PermissionSet.hasConnectionPermission(permissions, PermissionSet.ObjectPermissionType.UPDATE, identifier);
-            
-        // Check if connection is not new and the user has DELETE permission
-        $scope.canDeleteConnection =
-            !!identifier && (
-                   PermissionSet.hasSystemPermission(permissions, PermissionSet.SystemPermissionType.ADMINISTER)
-               ||  PermissionSet.hasConnectionPermission(permissions, PermissionSet.ObjectPermissionType.DELETE, identifier)
-            );
-                
-        // Check if the connection is not new and the user has UPDATE and CREATE_CONNECTION permissions
-        $scope.canCloneConnection =
-            !!identifier && (
-               PermissionSet.hasSystemPermission(permissions, PermissionSet.SystemPermissionType.ADMINISTER) || (
-                       PermissionSet.hasConnectionPermission(permissions, PermissionSet.ObjectPermissionType.UPDATE, identifier)
-                   &&  PermissionSet.hasSystemPermission(permissions, PermissionSet.SystemPermissionType.CREATE_CONNECTION)
-               )
-            );
-    
-    }, requestService.WARN);
-   
-    // Get protocol metadata
-    schemaService.getProtocols($scope.selectedDataSource)
-    .then(function protocolsReceived(protocols) {
-        $scope.protocols = protocols;
-    }, requestService.WARN);
-
-    // Get history date format
-    $translate('MANAGE_CONNECTION.FORMAT_HISTORY_START').then(function historyDateFormatReceived(historyDateFormat) {
-        $scope.historyDateFormat = historyDateFormat;
-    }, angular.noop);
-
-    // If we are editing an existing connection, pull its data
-    if (identifier) {
-
-        // Pull data from existing connection
-        connectionService.getConnection($scope.selectedDataSource, identifier)
-        .then(function connectionRetrieved(connection) {
-            $scope.connection = connection;
-        }, requestService.WARN);
+    /**
+     * Loads the data associated with the connection having the given
+     * identifier, preparing the interface for making modifications to that
+     * existing connection.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the connection to
+     *     load.
+     *
+     * @param {String} identifier
+     *     The identifier of the connection to load.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     editing the given connection.
+     */
+    var loadExistingConnection = function loadExistingConnection(dataSource, identifier) {
+        return $q.all({
+            connection     : connectionService.getConnection(dataSource, identifier),
+            historyEntries : connectionService.getConnectionHistory(dataSource, identifier),
+            parameters     : connectionService.getConnectionParameters(dataSource, identifier)
+        })
+        .then(function connectionDataRetrieved(values) {
 
-        // Pull connection history
-        connectionService.getConnectionHistory($scope.selectedDataSource, identifier)
-        .then(function historyReceived(historyEntries) {
+            $scope.connection = values.connection;
+            $scope.parameters = values.parameters;
 
             // Wrap all history entries for sake of display
             $scope.historyEntryWrappers = [];
-            historyEntries.forEach(function wrapHistoryEntry(historyEntry) {
-               $scope.historyEntryWrappers.push(new HistoryEntryWrapper(historyEntry)); 
+            angular.forEach(values.historyEntries, function wrapHistoryEntry(historyEntry) {","[{'comment': 'Just curious - why do you prefer `angular.forEach` here instead of the built in array `forEach`?', 'commenter': 'jmuehlner'}, {'comment': ""I suppose it's mainly out of habit here. Since `historyEntries` should always be defined, either would work here. Any browsers which would lack `Array.prototype.forEach()` (IE8 and older) are also unable to run Guacamole for more fundamental reasons, and we do use it elsewhere in the webapp.\r\n\r\nWere that not the case, `angular.forEach()` has the benefit that it automatically deals with `null` and `undefined` values."", 'commenter': 'mike-jumper'}, {'comment': 'I can restore the original usage of built-in `forEach()` if you prefer.', 'commenter': 'mike-jumper'}, {'comment': 'I have no problem with `angular.forEach`. :shipit: ', 'commenter': 'jmuehlner'}]"
282,guacamole/src/main/webapp/app/manage/templates/manageConnection.html,"@@ -41,7 +41,7 @@ <h2>{{'MANAGE_CONNECTION.SECTION_HEADER_EDIT_CONNECTION' | translate}}</h2>
     <!-- Connection attributes section -->
     <div class=""attributes"">
         <guac-form namespace=""'CONNECTION_ATTRIBUTES'"" content=""attributes""
-                   model=""connection.attributes"" model-only=""!canChangeAllAttributes()""></guac-form>
+                   model=""connection.attributes"" model-only=""managementPermissions.canChangeAllAttributes""></guac-form>","[{'comment': 'Are you missing a `!` here?', 'commenter': 'jmuehlner'}, {'comment': 'Yes!', 'commenter': 'mike-jumper'}, {'comment': ""OK. I've rebased away the mistake."", 'commenter': 'mike-jumper'}]"
282,guacamole/src/main/webapp/app/manage/controllers/manageConnectionController.js,"@@ -157,205 +137,178 @@ angular.module('manage').controller('manageConnectionController', ['$scope', '$i
      */
     $scope.isLoaded = function isLoaded() {
 
-        return $scope.protocols            !== null
-            && $scope.rootGroup            !== null
-            && $scope.connection           !== null
-            && $scope.parameters           !== null
-            && $scope.historyDateFormat    !== null
-            && $scope.historyEntryWrappers !== null
-            && $scope.permissions          !== null
-            && $scope.attributes           !== null
-            && $scope.canSaveConnection    !== null
-            && $scope.canDeleteConnection  !== null
-            && $scope.canCloneConnection   !== null;
+        return $scope.protocols             !== null
+            && $scope.rootGroup             !== null
+            && $scope.connection            !== null
+            && $scope.parameters            !== null
+            && $scope.historyDateFormat     !== null
+            && $scope.historyEntryWrappers  !== null
+            && $scope.managementPermissions !== null
+            && $scope.attributes            !== null;
 
     };
 
-    // Pull connection attribute schema
-    schemaService.getConnectionAttributes($scope.selectedDataSource)
-    .then(function attributesReceived(attributes) {
-        $scope.attributes = attributes;
-    }, requestService.WARN);
-
-    // Pull connection group hierarchy
-    connectionGroupService.getConnectionGroupTree(
-        $scope.selectedDataSource,
-        ConnectionGroup.ROOT_IDENTIFIER,
-        [PermissionSet.ObjectPermissionType.ADMINISTER]
-    )
-    .then(function connectionGroupReceived(rootGroup) {
-        $scope.rootGroup = rootGroup;
-    }, requestService.WARN);
-    
-    // Query the user's permissions for the current connection
-    permissionService.getEffectivePermissions($scope.selectedDataSource, authenticationService.getCurrentUsername())
-    .then(function permissionsReceived(permissions) {
-                
-        $scope.permissions = permissions;
-                        
-        // Check if the connection is new or if the user has UPDATE permission
-        $scope.canSaveConnection =
-               !identifier
-            || PermissionSet.hasSystemPermission(permissions, PermissionSet.SystemPermissionType.ADMINISTER)
-            || PermissionSet.hasConnectionPermission(permissions, PermissionSet.ObjectPermissionType.UPDATE, identifier);
-            
-        // Check if connection is not new and the user has DELETE permission
-        $scope.canDeleteConnection =
-            !!identifier && (
-                   PermissionSet.hasSystemPermission(permissions, PermissionSet.SystemPermissionType.ADMINISTER)
-               ||  PermissionSet.hasConnectionPermission(permissions, PermissionSet.ObjectPermissionType.DELETE, identifier)
-            );
-                
-        // Check if the connection is not new and the user has UPDATE and CREATE_CONNECTION permissions
-        $scope.canCloneConnection =
-            !!identifier && (
-               PermissionSet.hasSystemPermission(permissions, PermissionSet.SystemPermissionType.ADMINISTER) || (
-                       PermissionSet.hasConnectionPermission(permissions, PermissionSet.ObjectPermissionType.UPDATE, identifier)
-                   &&  PermissionSet.hasSystemPermission(permissions, PermissionSet.SystemPermissionType.CREATE_CONNECTION)
-               )
-            );
-    
-    }, requestService.WARN);
-   
-    // Get protocol metadata
-    schemaService.getProtocols($scope.selectedDataSource)
-    .then(function protocolsReceived(protocols) {
-        $scope.protocols = protocols;
-    }, requestService.WARN);
-
-    // Get history date format
-    $translate('MANAGE_CONNECTION.FORMAT_HISTORY_START').then(function historyDateFormatReceived(historyDateFormat) {
-        $scope.historyDateFormat = historyDateFormat;
-    }, angular.noop);
-
-    // If we are editing an existing connection, pull its data
-    if (identifier) {
-
-        // Pull data from existing connection
-        connectionService.getConnection($scope.selectedDataSource, identifier)
-        .then(function connectionRetrieved(connection) {
-            $scope.connection = connection;
-        }, requestService.WARN);
+    /**
+     * Loads the data associated with the connection having the given
+     * identifier, preparing the interface for making modifications to that
+     * existing connection.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the connection to
+     *     load.
+     *
+     * @param {String} identifier
+     *     The identifier of the connection to load.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     editing the given connection.
+     */
+    var loadExistingConnection = function loadExistingConnection(dataSource, identifier) {
+        return $q.all({
+            connection     : connectionService.getConnection(dataSource, identifier),
+            historyEntries : connectionService.getConnectionHistory(dataSource, identifier),
+            parameters     : connectionService.getConnectionParameters(dataSource, identifier)
+        })
+        .then(function connectionDataRetrieved(values) {
 
-        // Pull connection history
-        connectionService.getConnectionHistory($scope.selectedDataSource, identifier)
-        .then(function historyReceived(historyEntries) {
+            $scope.connection = values.connection;
+            $scope.parameters = values.parameters;
 
             // Wrap all history entries for sake of display
             $scope.historyEntryWrappers = [];
-            historyEntries.forEach(function wrapHistoryEntry(historyEntry) {
-               $scope.historyEntryWrappers.push(new HistoryEntryWrapper(historyEntry)); 
+            angular.forEach(values.historyEntries, function wrapHistoryEntry(historyEntry) {
+               $scope.historyEntryWrappers.push(new HistoryEntryWrapper(historyEntry));
             });
 
-        }, requestService.WARN);
+        });
+    };
 
-        // Pull connection parameters
-        connectionService.getConnectionParameters($scope.selectedDataSource, identifier)
-        .then(function parametersReceived(parameters) {
-            $scope.parameters = parameters;
-        }, requestService.WARN);
-    }
-    
-    // If we are cloning an existing connection, pull its data instead
-    else if (cloneSourceIdentifier) {
+    /**
+     * Loads the data associated with the connection having the given
+     * identifier, preparing the interface for cloning that existing
+     * connection.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the connection
+     *     to be cloned.
+     *
+     * @param {String} identifier
+     *     The identifier of the connection being cloned.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     cloning the given connection.
+     */
+    var loadClonedConnection = function loadClonedConnection(dataSource, identifier) {
+        return $q.all({
+            connection : connectionService.getConnection(dataSource, identifier),
+            parameters : connectionService.getConnectionParameters(dataSource, identifier)
+        })
+        .then(function connectionDataRetrieved(values) {
+
+            $scope.connection = values.connection;
+            $scope.parameters = values.parameters;
 
-        // Pull data from cloned connection
-        connectionService.getConnection($scope.selectedDataSource, cloneSourceIdentifier)
-        .then(function connectionRetrieved(connection) {
-            $scope.connection = connection;
-            
             // Clear the identifier field because this connection is new
             delete $scope.connection.identifier;
-        }, requestService.WARN);
 
-        // Do not pull connection history
-        $scope.historyEntryWrappers = [];
-        
-        // Pull connection parameters from cloned connection
-        connectionService.getConnectionParameters($scope.selectedDataSource, cloneSourceIdentifier)
-        .then(function parametersReceived(parameters) {
-            $scope.parameters = parameters;
-        }, requestService.WARN);
-    }
-
-    // If we are creating a new connection, populate skeleton connection data
-    else {
+            // Cloned connections have no history
+            $scope.historyEntryWrappers = [];
+
+        });
+    };
+
+    /**
+     * Loads skeleton connection data, preparing the interface for creating a
+     * new connection.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     creating a new connection.
+     */
+    var loadSkeletonConnection = function loadSkeletonConnection() {
+
+        // Use skeleton connection object with no associated permissions,
+        // history, or parameters
         $scope.connection = new Connection({
             protocol         : 'vnc',
             parentIdentifier : $location.search().parent
         });
         $scope.historyEntryWrappers = [];
         $scope.parameters = {};
-    }
 
-    /**
-     * Returns whether the current user can change/set all connection
-     * attributes for the connection being edited, regardless of whether those
-     * attributes are already explicitly associated with that connection.
-     *
-     * @returns {Boolean}
-     *     true if the current user can change all attributes for the
-     *     connection being edited, regardless of whether those attributes are
-     *     already explicitly associated with that connection, false otherwise.
-     */
-    $scope.canChangeAllAttributes = function canChangeAllAttributes() {
-
-        // All attributes can be set if we are creating the connection
-        return !identifier;
+        return $q.resolve();
 
     };
 
     /**
-     * Returns the translation string namespace for the protocol having the
-     * given name. The namespace will be of the form:
-     *
-     * <code>PROTOCOL_NAME</code>
+     * Loads the data requred for performing the management task requested","[{'comment': '`requred`?', 'commenter': 'jmuehlner'}, {'comment': 'Ops.', 'commenter': 'mike-jumper'}, {'comment': 'Fxed.', 'commenter': 'mike-jumper'}]"
282,guacamole/src/main/webapp/app/manage/controllers/manageUserController.js,"@@ -361,727 +187,176 @@ angular.module('manage').controller('manageUserController', ['$scope', '$injecto
     };
 
     /**
-     * Returns whether the current user can save the user being edited within
-     * the given data source. Saving will create or update that user depending
-     * on whether the user already exists.
+     * Loads the data associated with the user having the given username,
+     * preparing the interface for making modifications to that existing user.
      *
-     * @param {String} [dataSource]
-     *     The identifier of the data source to check. If omitted, this will
-     *     default to the currently-selected data source.
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user to
+     *     load.
      *
-     * @returns {Boolean}
-     *     true if the current user can save changes to the user being edited,
-     *     false otherwise.
-     */
-    $scope.canSaveUser = function canSaveUser(dataSource) {
-
-        // Do not check if permissions are not yet loaded
-        if (!$scope.permissions)
-            return false;
-
-        // Use currently-selected data source if unspecified
-        dataSource = dataSource || selectedDataSource;
-
-        // The administrator can always save users
-        if (PermissionSet.hasSystemPermission($scope.permissions[dataSource],
-                PermissionSet.SystemPermissionType.ADMINISTER))
-            return true;
-
-        // If user does not exist, can only save if we have permission to create users
-        if (!$scope.userExists(dataSource))
-           return PermissionSet.hasSystemPermission($scope.permissions[dataSource],
-               PermissionSet.SystemPermissionType.CREATE_USER);
-
-        // Otherwise, can only save if we have permission to update this user
-        return PermissionSet.hasUserPermission($scope.permissions[dataSource],
-            PermissionSet.ObjectPermissionType.UPDATE, username);
-
-    };
-
-    /**
-     * Returns whether the current user can clone the user being edited within
-     * the given data source.
+     * @param {String} username
+     *     The username of the user to load.
      *
-     * @param {String} [dataSource]
-     *     The identifier of the data source to check. If omitted, this will
-     *     default to the currently-selected data source.
-     *
-     * @returns {Boolean}
-     *     true if the current user can clone the user being edited, false
-     *     otherwise.
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     editing the given user.
      */
-    $scope.canCloneUser = function canCloneUser(dataSource) {
-
-        // Do not check if permissions are not yet loaded
-        if (!$scope.permissions)
-            return false;
-
-        // Use currently-selected data source if unspecified
-        dataSource = dataSource || selectedDataSource;
-
-        // If we are not editing an existing user, we cannot clone
-        if (!$scope.userExists(selectedDataSource))
-            return false;
-
-        // The administrator can always clone users
-        if (PermissionSet.hasSystemPermission($scope.permissions[dataSource],
-                PermissionSet.SystemPermissionType.ADMINISTER))
-            return true;
-
-        // Otherwise we need explicit CREATE_USER permission
-        return PermissionSet.hasSystemPermission($scope.permissions[dataSource],
-            PermissionSet.SystemPermissionType.CREATE_USER);
-
-    };
-
-    /**
-     * Returns whether the current user can delete the user being edited from
-     * the given data source.
-     *
-     * @param {String} [dataSource]
-     *     The identifier of the data source to check. If omitted, this will
-     *     default to the currently-selected data source.
-     *
-     * @returns {Boolean}
-     *     true if the current user can delete the user being edited, false
-     *     otherwise.
-     */
-    $scope.canDeleteUser = function canDeleteUser(dataSource) {
-
-        // Do not check if permissions are not yet loaded
-        if (!$scope.permissions)
-            return false;
-
-        // Use currently-selected data source if unspecified
-        dataSource = dataSource || selectedDataSource;
-
-        // Can't delete what doesn't exist
-        if (!$scope.userExists(dataSource))
-            return false;
-
-        // The administrator can always delete users
-        if (PermissionSet.hasSystemPermission($scope.permissions[dataSource],
-                PermissionSet.SystemPermissionType.ADMINISTER))
-            return true;
-
-        // Otherwise, require explicit DELETE permission on the user
-        return PermissionSet.hasUserPermission($scope.permissions[dataSource],
-            PermissionSet.ObjectPermissionType.DELETE, username);
-
-    };
-
-    /**
-     * Returns whether the user being edited within the given data source is
-     * read-only, and thus cannot be modified by the current user.
-     *
-     * @param {String} [dataSource]
-     *     The identifier of the data source to check. If omitted, this will
-     *     default to the currently-selected data source.
-     *
-     * @returns {Boolean}
-     *     true if the user being edited is actually read-only and cannot be
-     *     edited at all, false otherwise.
-     */
-    $scope.isReadOnly = function isReadOnly(dataSource) {
-
-        // Use currently-selected data source if unspecified
-        dataSource = dataSource || selectedDataSource;
-
-        // User is read-only if they cannot be saved
-        return !$scope.canSaveUser(dataSource);
-
-    };
-
-    // Update visible account pages whenever available users/permissions changes
-    $scope.$watchGroup(['users', 'permissions'], function updateAccountPages() {
-
-        // Generate pages for each applicable data source
-        $scope.accountPages = [];
-        angular.forEach(dataSources, function addAccountPage(dataSource) {
-
-            // Determine whether data source contains this user
-            var linked   = $scope.userExists(dataSource);
-            var readOnly = $scope.isReadOnly(dataSource);
-
-            // Account is not relevant if it does not exist and cannot be
-            // created
-            if (!linked && readOnly)
-                return;
-
-            // Only the selected data source is relevant when cloning
-            if (cloneSourceUsername && dataSource !== selectedDataSource)
-                return;
-
-            // Determine class name based on read-only / linked status
-            var className;
-            if (readOnly)    className = 'read-only';
-            else if (linked) className = 'linked';
-            else             className = 'unlinked';
-
-            // Add page entry
-            $scope.accountPages.push(new PageDefinition({
-                name      : translationStringService.canonicalize('DATA_SOURCE_' + dataSource) + '.NAME',
-                url       : '/manage/' + encodeURIComponent(dataSource) + '/users/' + encodeURIComponent(username || ''),
-                className : className
-            }));
-
-        });
-
-    });
-
-    // Pull user attribute schema
-    schemaService.getUserAttributes(selectedDataSource).then(function attributesReceived(attributes) {
-        $scope.attributes = attributes;
-    }, requestService.WARN);
-
-    // Pull user data and permissions if we are editing an existing user
-    if (username) {
-
-        // Pull user data
-        dataSourceService.apply(userService.getUser, dataSources, username)
-        .then(function usersReceived(users) {
+    var loadExistingUser = function loadExistingUser(dataSource, username) {
+        return $q.all({
+            users : dataSourceService.apply(userService.getUser, dataSources, username),
+            permissions : permissionService.getPermissions(dataSource, username)
+        })
+        .then(function userDataRetrieved(values) {
 
-            // Get user for currently-selected data source
-            $scope.users = users;
-            $scope.user  = users[selectedDataSource];
+            $scope.users = values.users;
+            $scope.user  = values.users[dataSource];
 
             // Create skeleton user if user does not exist
             if (!$scope.user)
                 $scope.user = new User({
                     'username' : username
                 });
 
-        }, requestService.WARN);
-
-        // The current user will be associated with username of the existing
-        // user in the retrieved permission set
-        $scope.selfUsername = username;
-
-        // Pull user permissions
-        permissionService.getPermissions(selectedDataSource, username).then(function gotPermissions(permissions) {
-            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(permissions);
-        })
-
-        // If permissions cannot be retrieved, use empty permissions
-        ['catch'](requestService.createErrorCallback(function permissionRetrievalFailed() {
-            $scope.permissionFlags = new PermissionFlagSet();
-        }));
-    }
-
-    // If we are cloning an existing user, pull his/her data instead
-    else if (cloneSourceUsername) {
-
-        dataSourceService.apply(userService.getUser, dataSources, cloneSourceUsername)
-        .then(function usersReceived(users) {
-
-            // Get user for currently-selected data source
-            $scope.users = {};
-            $scope.user  = users[selectedDataSource];
-
-        }, requestService.WARN);
-
-        // The current user will be associated with cloneSourceUsername in the
-        // retrieved permission set
-        $scope.selfUsername = cloneSourceUsername;
+            // The current user will be associated with username of the existing
+            // user in the retrieved permission set
+            $scope.selfUsername = username;
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
 
-        // Pull user permissions
-        permissionService.getPermissions(selectedDataSource, cloneSourceUsername)
-        .then(function gotPermissions(permissions) {
-            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(permissions);
-            permissionsAdded = permissions;
-        })
-
-        // If permissions cannot be retrieved, use empty permissions
-        ['catch'](requestService.createErrorCallback(function permissionRetrievalFailed() {
-            $scope.permissionFlags = new PermissionFlagSet();
-        }));
-    }
-
-    // Use skeleton data if we are creating a new user
-    else {
-
-        // No users exist regardless of data source if there is no username
-        $scope.users = {};
-
-        // Use skeleton user object with no associated permissions
-        $scope.user = new User();
-        $scope.permissionFlags = new PermissionFlagSet();
-
-    }
-
-    /**
-     * Expands all items within the tree descending from the given
-     * GroupListItem which have at least one descendant for which explicit READ
-     * permission is granted. The expanded state of all other items is left
-     * untouched.
-     *
-     * @param {GroupListItem} item
-     *     The GroupListItem which should be conditionally expanded depending
-     *     on whether READ permission is granted for any of its descendants.
-     *
-     * @param {PemissionFlagSet} flags
-     *     The set of permissions which should be used to determine whether the
-     *     given item and its descendants are expanded.
-     */
-    var expandReadable = function expandReadable(item, flags) {
-
-        // If the current item is expandable and has defined children,
-        // determine whether it should be expanded
-        if (item.expandable && item.children) {
-            angular.forEach(item.children, function expandReadableChild(child) {
-
-                // Determine whether the user has READ permission for the
-                // current child object
-                var readable = false;
-                switch (child.type) {
-
-                    case GroupListItem.Type.CONNECTION:
-                        readable = flags.connectionPermissions.READ[child.identifier];
-                        break;
-
-                    case GroupListItem.Type.CONNECTION_GROUP:
-                        readable = flags.connectionGroupPermissions.READ[child.identifier];
-                        break;
-
-                    case GroupListItem.Type.SHARING_PROFILE:
-                        readable = flags.sharingProfilePermissions.READ[child.identifier];
-                        break;
-
-                }
-
-                // The parent should be expanded by default if the child is
-                // expanded by default OR the user has READ permission on the
-                // child
-                item.expanded |= expandReadable(child, flags) || readable;
-
-            });
-        }
-
-        return item.expanded;
-
-    };
-
-
-    // Retrieve all connections for which we have ADMINISTER permission
-    dataSourceService.apply(
-        connectionGroupService.getConnectionGroupTree,
-        [selectedDataSource],
-        ConnectionGroup.ROOT_IDENTIFIER,
-        [PermissionSet.ObjectPermissionType.ADMINISTER]
-    )
-    .then(function connectionGroupReceived(rootGroups) {
-
-        // Convert all received ConnectionGroup objects into GroupListItems
-        $scope.rootGroups = {};
-        angular.forEach(rootGroups, function addGroupListItem(rootGroup, dataSource) {
-            $scope.rootGroups[dataSource] = GroupListItem.fromConnectionGroup(dataSource, rootGroup);
         });
-
-    }, requestService.WARN);
-    
-    // Query the user's permissions for the current user
-    dataSourceService.apply(
-        permissionService.getEffectivePermissions,
-        dataSources,
-        currentUsername
-    )
-    .then(function permissionsReceived(permissions) {
-        $scope.permissions = permissions;
-    }, requestService.WARN);
-
-    // Update default expanded state whenever connection groups and associated
-    // permissions change
-    $scope.$watchGroup(['rootGroups', 'permissionFlags'], function updateDefaultExpandedStates() {
-        angular.forEach($scope.rootGroups, function updateExpandedStates(rootGroup) {
-
-            // Automatically expand all objects with any descendants for which
-            // the user has READ permission
-            if ($scope.permissionFlags)
-                expandReadable(rootGroup, $scope.permissionFlags);
-
-        });
-    });
-
-    /**
-     * Available system permission types, as translation string / internal
-     * value pairs.
-     * 
-     * @type Object[]
-     */
-    $scope.systemPermissionTypes = [
-        {
-            label: ""MANAGE_USER.FIELD_HEADER_ADMINISTER_SYSTEM"",
-            value: PermissionSet.SystemPermissionType.ADMINISTER
-        },
-        {
-            label: ""MANAGE_USER.FIELD_HEADER_CREATE_NEW_USERS"",
-            value: PermissionSet.SystemPermissionType.CREATE_USER
-        },
-        {
-            label: ""MANAGE_USER.FIELD_HEADER_CREATE_NEW_CONNECTIONS"",
-            value: PermissionSet.SystemPermissionType.CREATE_CONNECTION
-        },
-        {
-            label: ""MANAGE_USER.FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS"",
-            value: PermissionSet.SystemPermissionType.CREATE_CONNECTION_GROUP
-        },
-        {
-            label: ""MANAGE_USER.FIELD_HEADER_CREATE_NEW_SHARING_PROFILES"",
-            value: PermissionSet.SystemPermissionType.CREATE_SHARING_PROFILE
-        }
-    ];
-
-    /**
-     * The set of permissions that will be added to the user when the user is
-     * saved. Permissions will only be present in this set if they are
-     * manually added, and not later manually removed before saving.
-     *
-     * @type PermissionSet
-     */
-    var permissionsAdded = new PermissionSet();
-
-    /**
-     * The set of permissions that will be removed from the user when the user 
-     * is saved. Permissions will only be present in this set if they are
-     * manually removed, and not later manually added before saving.
-     *
-     * @type PermissionSet
-     */
-    var permissionsRemoved = new PermissionSet();
-
-    /**
-     * Updates the permissionsAdded and permissionsRemoved permission sets to
-     * reflect the addition of the given system permission.
-     * 
-     * @param {String} type
-     *     The system permission to add, as defined by
-     *     PermissionSet.SystemPermissionType.
-     */
-    var addSystemPermission = function addSystemPermission(type) {
-
-        // If permission was previously removed, simply un-remove it
-        if (PermissionSet.hasSystemPermission(permissionsRemoved, type))
-            PermissionSet.removeSystemPermission(permissionsRemoved, type);
-
-        // Otherwise, explicitly add the permission
-        else
-            PermissionSet.addSystemPermission(permissionsAdded, type);
-
     };
 
     /**
-     * Updates the permissionsAdded and permissionsRemoved permission sets to
-     * reflect the removal of the given system permission.
+     * Loads the data associated with the user having the given username,
+     * preparing the interface for cloning that existing user.
      *
-     * @param {String} type
-     *     The system permission to remove, as defined by
-     *     PermissionSet.SystemPermissionType.
-     */
-    var removeSystemPermission = function removeSystemPermission(type) {
-
-        // If permission was previously added, simply un-add it
-        if (PermissionSet.hasSystemPermission(permissionsAdded, type))
-            PermissionSet.removeSystemPermission(permissionsAdded, type);
-
-        // Otherwise, explicitly remove the permission
-        else
-            PermissionSet.addSystemPermission(permissionsRemoved, type);
-
-    };
-
-    /**
-     * Notifies the controller that a change has been made to the given
-     * system permission for the user being edited.
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user to
+     *     be cloned.
      *
-     * @param {String} type
-     *     The system permission that was changed, as defined by
-     *     PermissionSet.SystemPermissionType.
-     */
-    $scope.systemPermissionChanged = function systemPermissionChanged(type) {
-
-        // Determine current permission setting
-        var granted = $scope.permissionFlags.systemPermissions[type];
-
-        // Add/remove permission depending on flag state
-        if (granted)
-            addSystemPermission(type);
-        else
-            removeSystemPermission(type);
-
-    };
-
-    /**
-     * Updates the permissionsAdded and permissionsRemoved permission sets to
-     * reflect the addition of the given user permission.
-     * 
-     * @param {String} type
-     *     The user permission to add, as defined by
-     *     PermissionSet.ObjectPermissionType.
+     * @param {String} username
+     *     The username of the user being cloned.
      *
-     * @param {String} identifier
-     *     The identifier of the user affected by the permission being added.
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     cloning the given user.
      */
-    var addUserPermission = function addUserPermission(type, identifier) {
-
-        // If permission was previously removed, simply un-remove it
-        if (PermissionSet.hasUserPermission(permissionsRemoved, type, identifier))
-            PermissionSet.removeUserPermission(permissionsRemoved, type, identifier);
-
-        // Otherwise, explicitly add the permission
-        else
-            PermissionSet.addUserPermission(permissionsAdded, type, identifier);
-
-    };
-
-    /**
-     * Updates the permissionsAdded and permissionsRemoved permission sets to
-     * reflect the removal of the given user permission.
-     *
-     * @param {String} type
-     *     The user permission to remove, as defined by
-     *     PermissionSet.ObjectPermissionType.
-     *
-     * @param {String} identifier
-     *     The identifier of the user affected by the permission being removed.
-     */
-    var removeUserPermission = function removeUserPermission(type, identifier) {
+    var loadClonedUser = function loadClonedUser(dataSource, username) {
+        return $q.all({
+            users : dataSourceService.apply(userService.getUser, [dataSource], username),
+            permissions : permissionService.getPermissions(dataSource, username)
+        })
+        .then(function userDataRetrieved(values) {
 
-        // If permission was previously added, simply un-add it
-        if (PermissionSet.hasUserPermission(permissionsAdded, type, identifier))
-            PermissionSet.removeUserPermission(permissionsAdded, type, identifier);
+            $scope.users = {};
+            $scope.user  = values.users[dataSource];
 
-        // Otherwise, explicitly remove the permission
-        else
-            PermissionSet.addUserPermission(permissionsRemoved, type, identifier);
+            // The current user will be associated with cloneSourceUsername in the
+            // retrieved permission set
+            $scope.selfUsername = username;
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+            $scope.permissionsAdded = values.permissions;
 
+        });
     };
 
     /**
-     * Notifies the controller that a change has been made to the given user
-     * permission for the user being edited.
+     * Loads skeleton user data, preparing the interface for creating a new
+     * user.
      *
-     * @param {String} type
-     *     The user permission that was changed, as defined by
-     *     PermissionSet.ObjectPermissionType.
-     *
-     * @param {String} identifier
-     *     The identifier of the user affected by the changed permission.
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     creating a new user.
      */
-    $scope.userPermissionChanged = function userPermissionChanged(type, identifier) {
-
-        // Determine current permission setting
-        var granted = $scope.permissionFlags.userPermissions[type][identifier];
-
-        // Add/remove permission depending on flag state
-        if (granted)
-            addUserPermission(type, identifier);
-        else
-            removeUserPermission(type, identifier);
+    var loadSkeletonUser = function loadSkeletonUser() {
 
-    };
+        // No users exist regardless of data source if there is no username
+        $scope.users = {};
 
-    /**
-     * Updates the permissionsAdded and permissionsRemoved permission sets to
-     * reflect the addition of the given connection permission.
-     * 
-     * @param {String} identifier
-     *     The identifier of the connection to add READ permission for.
-     */
-    var addConnectionPermission = function addConnectionPermission(identifier) {
+        // Use skeleton user object with no associated permissions
+        $scope.user = new User();
+        $scope.permissionFlags = new PermissionFlagSet();
 
-        // If permission was previously removed, simply un-remove it
-        if (PermissionSet.hasConnectionPermission(permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier))
-            PermissionSet.removeConnectionPermission(permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
+        // As no permissions are yet associated with the user, it is safe to
+        // use any non-empty username as a placeholder for self-referential
+        // permissions
+        $scope.selfUsername = 'SELF';
 
-        // Otherwise, explicitly add the permission
-        else
-            PermissionSet.addConnectionPermission(permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+        return $q.resolve();
 
     };
 
     /**
-     * Updates the permissionsAdded and permissionsRemoved permission sets to
-     * reflect the removal of the given connection permission.
+     * Loads the data required for performing the management task requested
+     * through the route parameters given at load time, automatically preparing
+     * the interface for editing an existing user, cloning an existing user, or
+     * creating an entirely new user.
      *
-     * @param {String} identifier
-     *     The identifier of the connection to remove READ permission for.
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared
+     *     for performing the requested management task.
      */
-    var removeConnectionPermission = function removeConnectionPermission(identifier) {
+    var loadRequestedUser = function loadRequestedUser() {
 
-        // If permission was previously added, simply un-add it
-        if (PermissionSet.hasConnectionPermission(permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier))
-            PermissionSet.removeConnectionPermission(permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+        // Pull user data and permissions if we are editing an existing user
+        if (username)
+            return loadExistingUser($scope.dataSource, username);
 
-        // Otherwise, explicitly remove the permission
-        else
-            PermissionSet.addConnectionPermission(permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
+        // If we are cloning an existing user, pull his/her data instead
+        if (cloneSourceUsername)
+            return loadClonedUser($scope.dataSource, cloneSourceUsername);
 
-    };
-
-    /**
-     * Updates the permissionsAdded and permissionsRemoved permission sets to
-     * reflect the addition of the given connection group permission.
-     * 
-     * @param {String} identifier
-     *     The identifier of the connection group to add READ permission for.
-     */
-    var addConnectionGroupPermission = function addConnectionGroupPermission(identifier) {
-
-        // If permission was previously removed, simply un-remove it
-        if (PermissionSet.hasConnectionGroupPermission(permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier))
-            PermissionSet.removeConnectionGroupPermission(permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
-
-        // Otherwise, explicitly add the permission
-        else
-            PermissionSet.addConnectionGroupPermission(permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+        return loadSkeletonUser();","[{'comment': ""Nitpick: in the other places where you updated this, you commented on this action.  For consistency's sake, I'd say either remove the comments above the other's or add one, here."", 'commenter': 'necouchman'}]"
282,guacamole/src/main/webapp/app/manage/directives/connectionPermissionEditor.js,"@@ -0,0 +1,406 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive for manipulating the connection permissions granted within a
+ * given {@link PermissionFlagSet}, tracking the specific permissions added or
+ * removed within a separate pair of {@link PermissionSet} objects.
+ */
+angular.module('manage').directive('connectionPermissionEditor', ['$injector',
+    function connectionPermissionEditor($injector) {
+
+    // Required types
+    var ConnectionGroup   = $injector.get('ConnectionGroup');
+    var GroupListItem     = $injector.get('GroupListItem');
+    var PermissionSet     = $injector.get('PermissionSet');
+
+    // Required services
+    var connectionGroupService = $injector.get('connectionGroupService');
+    var dataSourceService      = $injector.get('dataSourceService');
+    var requestService         = $injector.get('requestService');
+
+    var directive = {
+
+        // Element only
+        restrict: 'E',
+        replace: true,
+
+        scope: {
+
+            /**
+             * The unique identifier of the data source associated with the
+             * permissions being manipulated.
+             *
+             * @type String
+             */
+            dataSource : '=',
+
+            /**
+             * The current state of the permissions being manipulated. This
+             * {@link PemissionFlagSet} will be modified as changes are made
+             * through this permission editor.
+             *
+             * @type PermissionFlagSet
+             */
+            permissionFlags : '=',
+
+            /**
+             * The set of permissions that have been added, relative to the
+             * initial state of the permissions being manipulated.
+             *
+             * @type PermissionSet
+             */
+            permissionsAdded : '=',
+
+            /**
+             * The set of permissions that have been added, relative to the","[{'comment': '""The set of permissions that have been added"" - or perhaps ""removed"" :-).', 'commenter': 'necouchman'}]"
282,guacamole/src/main/webapp/app/manage/directives/connectionPermissionEditor.js,"@@ -0,0 +1,406 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive for manipulating the connection permissions granted within a
+ * given {@link PermissionFlagSet}, tracking the specific permissions added or
+ * removed within a separate pair of {@link PermissionSet} objects.
+ */
+angular.module('manage').directive('connectionPermissionEditor', ['$injector',
+    function connectionPermissionEditor($injector) {
+
+    // Required types
+    var ConnectionGroup   = $injector.get('ConnectionGroup');
+    var GroupListItem     = $injector.get('GroupListItem');
+    var PermissionSet     = $injector.get('PermissionSet');
+
+    // Required services
+    var connectionGroupService = $injector.get('connectionGroupService');
+    var dataSourceService      = $injector.get('dataSourceService');
+    var requestService         = $injector.get('requestService');
+
+    var directive = {
+
+        // Element only
+        restrict: 'E',
+        replace: true,
+
+        scope: {
+
+            /**
+             * The unique identifier of the data source associated with the
+             * permissions being manipulated.
+             *
+             * @type String
+             */
+            dataSource : '=',
+
+            /**
+             * The current state of the permissions being manipulated. This
+             * {@link PemissionFlagSet} will be modified as changes are made
+             * through this permission editor.
+             *
+             * @type PermissionFlagSet
+             */
+            permissionFlags : '=',
+
+            /**
+             * The set of permissions that have been added, relative to the
+             * initial state of the permissions being manipulated.
+             *
+             * @type PermissionSet
+             */
+            permissionsAdded : '=',
+
+            /**
+             * The set of permissions that have been added, relative to the
+             * initial state of the permissions being manipulated.
+             *
+             * @type PermissionSet
+             */
+            permissionsRemoved : '='
+
+        },
+
+        templateUrl: 'app/manage/templates/connectionPermissionEditor.html'
+
+    };
+
+    directive.controller = ['$scope', function connectionPermissionEditorController($scope) {
+
+        /**
+         * Array of all connection properties that are filterable.
+         *
+         * @type String[]
+         */
+        $scope.filteredConnectionProperties = [
+            'name',
+            'protocol'
+        ];
+
+        /**
+         * Array of all connection group properties that are filterable.
+         *
+         * @type String[]
+         */
+        $scope.filteredConnectionGroupProperties = [
+            'name'
+        ];
+
+        /**
+         * A map of data source identifiers to the root connection groups within
+         * thost data sources. As only one data source is applicable to any
+         * particular permission set being edited/created, this will only
+         * contain a single key.
+         *
+         * @type Object.<String, GroupListItem>
+         */
+        $scope.rootGroups = null;
+
+        // Retrieve all connections for which we have ADMINISTER permission
+        dataSourceService.apply(
+            connectionGroupService.getConnectionGroupTree,
+            [$scope.dataSource],
+            ConnectionGroup.ROOT_IDENTIFIER,
+            [PermissionSet.ObjectPermissionType.ADMINISTER]
+        )
+        .then(function connectionGroupReceived(rootGroups) {
+
+            // Convert all received ConnectionGroup objects into GroupListItems
+            $scope.rootGroups = {};
+            angular.forEach(rootGroups, function addGroupListItem(rootGroup, dataSource) {
+                $scope.rootGroups[dataSource] = GroupListItem.fromConnectionGroup(dataSource, rootGroup);
+            });
+
+        }, requestService.WARN);
+
+        /**
+         * Expands all items within the tree descending from the given
+         * GroupListItem which have at least one descendant for which explicit
+         * READ permission is granted. The expanded state of all other items is
+         * left untouched.
+         *
+         * @param {GroupListItem} item
+         *     The GroupListItem which should be conditionally expanded
+         *     depending on whether READ permission is granted for any of its
+         *     descendants.
+         *
+         * @param {PemissionFlagSet} flags
+         *     The set of permissions which should be used to determine whether
+         *     the given item and its descendants are expanded.
+         */
+        var expandReadable = function expandReadable(item, flags) {
+
+            // If the current item is expandable and has defined children,
+            // determine whether it should be expanded
+            if (item.expandable && item.children) {
+                angular.forEach(item.children, function expandReadableChild(child) {
+
+                    // Determine whether the permission set contains READ
+                    // permission for the current child object
+                    var readable = false;
+                    switch (child.type) {
+
+                        case GroupListItem.Type.CONNECTION:
+                            readable = flags.connectionPermissions.READ[child.identifier];
+                            break;
+
+                        case GroupListItem.Type.CONNECTION_GROUP:
+                            readable = flags.connectionGroupPermissions.READ[child.identifier];
+                            break;
+
+                        case GroupListItem.Type.SHARING_PROFILE:
+                            readable = flags.sharingProfilePermissions.READ[child.identifier];
+                            break;
+
+                    }
+
+                    // The parent should be expanded by default if the child is
+                    // expanded by default OR the permission set contains READ
+                    // permission on the child
+                    item.expanded |= expandReadable(child, flags) || readable;
+
+                });
+            }
+
+            return item.expanded;
+
+        };
+
+        // Update default expanded state whenever connection groups and
+        // associated permissions change
+        $scope.$watchGroup(['rootGroups', 'permissionFlags'], function updateDefaultExpandedStates() {
+
+            if (!$scope.rootGroups || !$scope.permissionFlags)
+                return;
+
+            angular.forEach($scope.rootGroups, function updateExpandedStates(rootGroup) {
+
+                // Automatically expand all objects with any descendants for
+                // which the permission set contains READ permission
+                expandReadable(rootGroup, $scope.permissionFlags);
+
+            });
+
+        });
+
+        /**
+         * Updates the permissionsAdded and permissionsRemoved permission sets
+         * to reflect the addition of the given connection permission.
+         *
+         * @param {String} identifier
+         *     The identifier of the connection to add READ permission for.
+         */
+        var addConnectionPermission = function addConnectionPermission(identifier) {
+
+            // If permission was previously removed, simply un-remove it
+            if (PermissionSet.hasConnectionPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier))
+                PermissionSet.removeConnectionPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
+
+            // Otherwise, explicitly add the permission
+            else
+                PermissionSet.addConnectionPermission($scope.permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+
+        };
+
+        /**
+         * Updates the permissionsAdded and permissionsRemoved permission sets
+         * to reflect the removal of the given connection permission.
+         *
+         * @param {String} identifier
+         *     The identifier of the connection to remove READ permission for.
+         */
+        var removeConnectionPermission = function removeConnectionPermission(identifier) {
+
+            // If permission was previously added, simply un-add it
+            if (PermissionSet.hasConnectionPermission($scope.permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier))
+                PermissionSet.removeConnectionPermission($scope.permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+
+            // Otherwise, explicitly remove the permission
+            else
+                PermissionSet.addConnectionPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
+
+        };
+
+        /**
+         * Updates the permissionsAdded and permissionsRemoved permission sets
+         * to reflect the addition of the given connection group permission.
+         *
+         * @param {String} identifier
+         *     The identifier of the connection group to add READ permission
+         *     for.
+         */
+        var addConnectionGroupPermission = function addConnectionGroupPermission(identifier) {
+
+            // If permission was previously removed, simply un-remove it
+            if (PermissionSet.hasConnectionGroupPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier))
+                PermissionSet.removeConnectionGroupPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
+
+            // Otherwise, explicitly add the permission
+            else
+                PermissionSet.addConnectionGroupPermission($scope.permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+
+        };
+
+        /**
+         * Updates the permissionsAdded and permissionsRemoved permission sets
+         * to reflect the removal of the given connection permission.","[{'comment': 'connection *group* permission', 'commenter': 'necouchman'}, {'comment': 'Should now be fixed, though GitHub seems to have magically moved this comment up to the part of the code where ""connection"" is actually correct.', 'commenter': 'mike-jumper'}]"
282,guacamole/src/main/webapp/app/manage/directives/connectionPermissionEditor.js,"@@ -0,0 +1,406 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive for manipulating the connection permissions granted within a
+ * given {@link PermissionFlagSet}, tracking the specific permissions added or
+ * removed within a separate pair of {@link PermissionSet} objects.
+ */
+angular.module('manage').directive('connectionPermissionEditor', ['$injector',
+    function connectionPermissionEditor($injector) {
+
+    // Required types
+    var ConnectionGroup   = $injector.get('ConnectionGroup');
+    var GroupListItem     = $injector.get('GroupListItem');
+    var PermissionSet     = $injector.get('PermissionSet');
+
+    // Required services
+    var connectionGroupService = $injector.get('connectionGroupService');
+    var dataSourceService      = $injector.get('dataSourceService');
+    var requestService         = $injector.get('requestService');
+
+    var directive = {
+
+        // Element only
+        restrict: 'E',
+        replace: true,
+
+        scope: {
+
+            /**
+             * The unique identifier of the data source associated with the
+             * permissions being manipulated.
+             *
+             * @type String
+             */
+            dataSource : '=',
+
+            /**
+             * The current state of the permissions being manipulated. This
+             * {@link PemissionFlagSet} will be modified as changes are made
+             * through this permission editor.
+             *
+             * @type PermissionFlagSet
+             */
+            permissionFlags : '=',
+
+            /**
+             * The set of permissions that have been added, relative to the
+             * initial state of the permissions being manipulated.
+             *
+             * @type PermissionSet
+             */
+            permissionsAdded : '=',
+
+            /**
+             * The set of permissions that have been added, relative to the
+             * initial state of the permissions being manipulated.
+             *
+             * @type PermissionSet
+             */
+            permissionsRemoved : '='
+
+        },
+
+        templateUrl: 'app/manage/templates/connectionPermissionEditor.html'
+
+    };
+
+    directive.controller = ['$scope', function connectionPermissionEditorController($scope) {
+
+        /**
+         * Array of all connection properties that are filterable.
+         *
+         * @type String[]
+         */
+        $scope.filteredConnectionProperties = [
+            'name',
+            'protocol'
+        ];
+
+        /**
+         * Array of all connection group properties that are filterable.
+         *
+         * @type String[]
+         */
+        $scope.filteredConnectionGroupProperties = [
+            'name'
+        ];
+
+        /**
+         * A map of data source identifiers to the root connection groups within
+         * thost data sources. As only one data source is applicable to any
+         * particular permission set being edited/created, this will only
+         * contain a single key.
+         *
+         * @type Object.<String, GroupListItem>
+         */
+        $scope.rootGroups = null;
+
+        // Retrieve all connections for which we have ADMINISTER permission
+        dataSourceService.apply(
+            connectionGroupService.getConnectionGroupTree,
+            [$scope.dataSource],
+            ConnectionGroup.ROOT_IDENTIFIER,
+            [PermissionSet.ObjectPermissionType.ADMINISTER]
+        )
+        .then(function connectionGroupReceived(rootGroups) {
+
+            // Convert all received ConnectionGroup objects into GroupListItems
+            $scope.rootGroups = {};
+            angular.forEach(rootGroups, function addGroupListItem(rootGroup, dataSource) {
+                $scope.rootGroups[dataSource] = GroupListItem.fromConnectionGroup(dataSource, rootGroup);
+            });
+
+        }, requestService.WARN);
+
+        /**
+         * Expands all items within the tree descending from the given
+         * GroupListItem which have at least one descendant for which explicit
+         * READ permission is granted. The expanded state of all other items is
+         * left untouched.
+         *
+         * @param {GroupListItem} item
+         *     The GroupListItem which should be conditionally expanded
+         *     depending on whether READ permission is granted for any of its
+         *     descendants.
+         *
+         * @param {PemissionFlagSet} flags
+         *     The set of permissions which should be used to determine whether
+         *     the given item and its descendants are expanded.
+         */
+        var expandReadable = function expandReadable(item, flags) {
+
+            // If the current item is expandable and has defined children,
+            // determine whether it should be expanded
+            if (item.expandable && item.children) {
+                angular.forEach(item.children, function expandReadableChild(child) {
+
+                    // Determine whether the permission set contains READ
+                    // permission for the current child object
+                    var readable = false;
+                    switch (child.type) {
+
+                        case GroupListItem.Type.CONNECTION:
+                            readable = flags.connectionPermissions.READ[child.identifier];
+                            break;
+
+                        case GroupListItem.Type.CONNECTION_GROUP:
+                            readable = flags.connectionGroupPermissions.READ[child.identifier];
+                            break;
+
+                        case GroupListItem.Type.SHARING_PROFILE:
+                            readable = flags.sharingProfilePermissions.READ[child.identifier];
+                            break;
+
+                    }
+
+                    // The parent should be expanded by default if the child is
+                    // expanded by default OR the permission set contains READ
+                    // permission on the child
+                    item.expanded |= expandReadable(child, flags) || readable;
+
+                });
+            }
+
+            return item.expanded;
+
+        };
+
+        // Update default expanded state whenever connection groups and
+        // associated permissions change
+        $scope.$watchGroup(['rootGroups', 'permissionFlags'], function updateDefaultExpandedStates() {
+
+            if (!$scope.rootGroups || !$scope.permissionFlags)
+                return;
+
+            angular.forEach($scope.rootGroups, function updateExpandedStates(rootGroup) {
+
+                // Automatically expand all objects with any descendants for
+                // which the permission set contains READ permission
+                expandReadable(rootGroup, $scope.permissionFlags);
+
+            });
+
+        });
+
+        /**
+         * Updates the permissionsAdded and permissionsRemoved permission sets
+         * to reflect the addition of the given connection permission.
+         *
+         * @param {String} identifier
+         *     The identifier of the connection to add READ permission for.
+         */
+        var addConnectionPermission = function addConnectionPermission(identifier) {
+
+            // If permission was previously removed, simply un-remove it
+            if (PermissionSet.hasConnectionPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier))
+                PermissionSet.removeConnectionPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
+
+            // Otherwise, explicitly add the permission
+            else
+                PermissionSet.addConnectionPermission($scope.permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+
+        };
+
+        /**
+         * Updates the permissionsAdded and permissionsRemoved permission sets
+         * to reflect the removal of the given connection permission.
+         *
+         * @param {String} identifier
+         *     The identifier of the connection to remove READ permission for.
+         */
+        var removeConnectionPermission = function removeConnectionPermission(identifier) {
+
+            // If permission was previously added, simply un-add it
+            if (PermissionSet.hasConnectionPermission($scope.permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier))
+                PermissionSet.removeConnectionPermission($scope.permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+
+            // Otherwise, explicitly remove the permission
+            else
+                PermissionSet.addConnectionPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
+
+        };
+
+        /**
+         * Updates the permissionsAdded and permissionsRemoved permission sets
+         * to reflect the addition of the given connection group permission.
+         *
+         * @param {String} identifier
+         *     The identifier of the connection group to add READ permission
+         *     for.
+         */
+        var addConnectionGroupPermission = function addConnectionGroupPermission(identifier) {
+
+            // If permission was previously removed, simply un-remove it
+            if (PermissionSet.hasConnectionGroupPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier))
+                PermissionSet.removeConnectionGroupPermission($scope.permissionsRemoved, PermissionSet.ObjectPermissionType.READ, identifier);
+
+            // Otherwise, explicitly add the permission
+            else
+                PermissionSet.addConnectionGroupPermission($scope.permissionsAdded, PermissionSet.ObjectPermissionType.READ, identifier);
+
+        };
+
+        /**
+         * Updates the permissionsAdded and permissionsRemoved permission sets
+         * to reflect the removal of the given connection permission.
+         *
+         * @param {String} identifier
+         *     The identifier of the connection to remove READ permission for.","[{'comment': 'connection *group* to remove', 'commenter': 'necouchman'}, {'comment': 'Same here - fixed, but GitHub decided to be magic.', 'commenter': 'mike-jumper'}]"
282,guacamole/src/main/webapp/app/manage/directives/managementButtons.js,"@@ -0,0 +1,201 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Directive which displays a set of object management buttons (save, delete,
+ * clone, etc.) representing the actions available to the current user in
+ * context of the object being edited/created.
+ */
+angular.module('manage').directive('managementButtons', ['$injector',
+    function managementButtons($injector) {
+
+    // Required services
+    var guacNotification = $injector.get('guacNotification');
+
+    var directive = {
+
+        restrict    : 'E',
+        replace     : true,
+        templateUrl : 'app/manage/templates/managementButtons.html',
+
+        scope : {
+
+            /**
+             * The translation namespace associated with all applicable
+             * translation strings. This directive requires at least the
+             * following translation strings within the given namespace:
+             *
+             *     - ACTION_CANCEL
+             *     - ACTION_CLONE
+             *     - ACTION_DELETE
+             *     - ACTION_SAVE
+             *     - DIALOG_HEADER_CONFIRM_DELETE
+             *     - TEXT_CONFIRM_DELETE
+             *
+             * @type String
+             */
+            namespace : '=',","[{'comment': ""Does this need to be a model binding (=) or would this be better as a text binding (@)?  I don't think the namespace would ever be modified within this directive, correct, so it should just be passing it from outside into this directive/controller, right?  Is there a reason to do it this way vs. text binding?  Just curious."", 'commenter': 'necouchman'}, {'comment': ""Text binding would probably be better, yes. I'll make the change."", 'commenter': 'mike-jumper'}]"
282,guacamole/src/main/webapp/app/manage/directives/managementButtons.js,"@@ -0,0 +1,201 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Directive which displays a set of object management buttons (save, delete,
+ * clone, etc.) representing the actions available to the current user in
+ * context of the object being edited/created.
+ */
+angular.module('manage').directive('managementButtons', ['$injector',
+    function managementButtons($injector) {
+
+    // Required services
+    var guacNotification = $injector.get('guacNotification');
+
+    var directive = {
+
+        restrict    : 'E',
+        replace     : true,
+        templateUrl : 'app/manage/templates/managementButtons.html',
+
+        scope : {
+
+            /**
+             * The translation namespace associated with all applicable
+             * translation strings. This directive requires at least the
+             * following translation strings within the given namespace:
+             *
+             *     - ACTION_CANCEL
+             *     - ACTION_CLONE
+             *     - ACTION_DELETE
+             *     - ACTION_SAVE
+             *     - DIALOG_HEADER_CONFIRM_DELETE
+             *     - TEXT_CONFIRM_DELETE
+             *
+             * @type String
+             */
+            namespace : '=',
+
+            /**
+             * The permissions which dictate the management actions available
+             * to the current user.
+             *
+             * @type ManagementPermissions
+             */
+            permissions : '=',
+
+            /**
+             * The function to invoke to save the arbitrary object being edited
+             * if the current user has permission to do so. The provided
+             * function MUST return a promise which is resolved if the save
+             * operation succeeds and is rejected with an {@link Error} if the
+             * save operation fails.
+             *
+             * @type Function
+             */
+            save : '&',
+
+            /**
+             * The function to invoke when the current user chooses to clone
+             * the object being edited. The provided function MUST perform the
+             * actions necessary to produce an interface which will clone the
+             * object.
+             *
+             * @type Function
+             */
+            clone : '&',
+
+            /**
+             * The function to invoke to delete the arbitrary object being edited
+             * if the current user has permission to do so. The provided
+             * function MUST return a promise which is resolved if the delete
+             * operation succeeds and is rejected with an {@link Error} if the
+             * delete operation fails.
+             *
+             * @type Function
+             */
+            delete : '&',
+
+            /**
+             * The function to invoke when the current user chooses to cancel
+             * the edit in progress, or when a save/delete operation has
+             * succeeded. The provided function MUST perform the actions
+             * necessary to return the user to a reasonable starting point.
+             *
+             * @type Function
+             */
+            return : '&'
+
+        }
+
+    };
+
+    directive.controller = ['$scope', function managementButtonsController($scope) {
+
+        /**
+         * An action to be provided along with the object sent to showStatus which
+         * immediately deletes the current connection.
+         */
+        var DELETE_ACTION = {
+            name      : $scope.namespace + '.ACTION_DELETE',
+            className : 'danger',
+            callback  : function deleteCallback() {
+                deleteObjectImmediately();
+                guacNotification.showStatus(false);
+            }
+        };
+
+        /**
+         * An action to be provided along with the object sent to showStatus which
+         * closes the currently-shown status dialog.
+         */
+        var CANCEL_ACTION = {
+            name     : $scope.namespace + '.ACTION_CANCEL',
+            callback : function cancelCallback() {
+                guacNotification.showStatus(false);
+            }
+        };
+
+        /**
+         * Invokes the provided return function to navigate the user back to
+         * the page they started from.
+         */
+        var navigateBack = function navigateBack() {
+            $scope['return']($scope.$parent);
+        };
+
+        /**
+         * Invokes the provided delete function, immediately deleting the
+         * current object without prompting the user for confirmation. If
+         * deletion is successful, the user is navigated back to the page they
+         * started from. If the deletion fails, an error notification is
+         * displayed.
+         */
+        var deleteObjectImmediately = function deleteObjectImmediately() {
+            $scope['delete']($scope.$parent).then(navigateBack, guacNotification.SHOW_REQUEST_ERROR);
+        };
+
+        /**
+         * Cancels all pending edits, returning to the page the user started
+         * from.
+         */
+        $scope.cancel = navigateBack;
+
+        /**
+         * Cancels all pending edits, invoking the provided clone function to
+         * open an edit page for a new object which is prepopulated with the
+         * data from the current object.
+         */
+        $scope.cloneObject = function cloneObject () {
+            $scope.clone($scope.$parent);
+        };
+
+        /**
+         * Invokes the provided save function to saves the current object. If","[{'comment': 'to *save* the', 'commenter': 'necouchman'}]"
288,guacamole-ext/src/main/resources/org/apache/guacamole/protocols/ssh.json,"@@ -83,6 +83,11 @@
                     ""name""    : ""backspace"",
                     ""type""    : ""ENUM"",
                     ""options"" : [ """", ""127"", ""8"" ]
+                },
+                {
+                    ""name""  : ""terminal-type"",
+                    ""type""    : ""ENUM"",
+                    ""options"" : [ ""xterm"", ""xterm-256color"", ""vt220"", ""vt100"", ""ansi"", ""linux"" ]","[{'comment': ""@mike-jumper can comment more on this, but I'm not sure that `xterm` and `xterm-256color` should be included in this list, yet.  There's a JIRA issue, 277 [1] , that deals with providing xterm compatibility, and it isn't completed, yet, AFAIK.  The other values should be fine, and I'm not sure if there are more we can add to the list.\r\n\r\n[1] - https://issues.apache.org/jira/browse/GUACAMOLE-277"", 'commenter': 'necouchman'}, {'comment': 'As long as they\'re not the default (the server-side terminal emulator still uses ""linux"" if this parameter is omitted), it\'s probably OK. In fact, recent changes adding xterm-specific terminal codes will not have any effect unless ""xterm"" or ""xterm-256color"" are used.\r\n\r\nI\'m personally OK with this as long as it\'s documented in the manual that xterm and xterm-256color are not fully supported yet.', 'commenter': 'mike-jumper'}]"
288,guacamole-ext/src/main/resources/org/apache/guacamole/protocols/telnet.json,"@@ -66,6 +66,11 @@
                     ""name""    : ""backspace"",
                     ""type""    : ""ENUM"",
                     ""options"" : [ """", ""127"", ""8"" ]
+                },
+                {
+                    ""name""  : ""terminal-type"",
+                    ""type""    : ""ENUM"",
+                    ""options"" : [ ""xterm"", ""xterm-256color"", ""vt220"", ""vt100"", ""ansi"", ""linux"" ]","[{'comment': 'As above - not sure about whether xterm should be supported, yet, but others look good.', 'commenter': 'necouchman'}]"
290,guacamole/src/main/webapp/app/client/types/ManagedClient.js,"@@ -346,6 +346,18 @@ angular.module('client').factory('ManagedClient', ['$rootScope', '$injector',
                             ManagedClientState.ConnectionState.CONNECTING);
                         break;
 
+                    // Connection is being established","[{'comment': 'Is being established?  Or is established?', 'commenter': 'necouchman'}, {'comment': 'Oops. Definitely should be ""is established"".', 'commenter': 'mike-jumper'}]"
291,guacamole/src/main/java/org/apache/guacamole/rest/GuacamoleExceptionMapper.java,"@@ -0,0 +1,110 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest;
+
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.Map;
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.FormParam;
+import javax.ws.rs.QueryParam;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.ext.ExceptionMapper;
+import javax.ws.rs.ext.Provider;
+import org.aopalliance.intercept.MethodInvocation;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.rest.auth.AuthenticationService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A class that maps GuacamoleExceptions in a way that returns a
+ * custom response to the user via JSON rather than allowing the default
+ * web application error handling to take place.
+ */
+@Provider
+public class GuacamoleExceptionMapper
+        implements ExceptionMapper<GuacamoleException> {
+    
+    /**
+     * The logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(GuacamoleExceptionMapper.class);
+    
+    /**
+     * The request associated with this instance of this mapper.
+     */
+    @Context private HttpServletRequest request;
+    
+    /**
+     * The authentication service associated with the currently active session.
+     */
+    @Inject
+    private AuthenticationService authenticationService;
+    
+    /**
+     * Returns the authentication token that is in use in the current session,
+     * if present, or null if otherwise.
+     *
+     * @return
+     *     The authentication token for the current session, or null if no
+     *     token is present.
+     */
+    private String getAuthenticationToken() {
+
+        @SuppressWarnings(""unchecked"")
+        Map<String, String[]> parameters = request.getParameterMap();
+
+        for (String paramName : parameters.keySet()) {
+            if (paramName.equals(""token"")) {","[{'comment': 'There\'s no need to iterate over the key set of a `Map` to find the entry having a particular key. Part of the point of a `Map` is the ability to retrieve such an entry by its key.\r\n\r\n    parameters.get(""token"")\r\n\r\nIn this case, there\'s no need to go through the map, as you can retrieve the parameter from the request directly:\r\n\r\n    request.getParameter(""token"")', 'commenter': 'mike-jumper'}, {'comment': 'Ah, of course.', 'commenter': 'necouchman'}, {'comment': 'That should be better.  Is it worth keeping it in its own method, or better to just throw it in the toResponse() method?', 'commenter': 'necouchman'}]"
291,guacamole/src/main/java/org/apache/guacamole/rest/GuacamoleExceptionMapper.java,"@@ -0,0 +1,110 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest;
+
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.Map;
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.FormParam;
+import javax.ws.rs.QueryParam;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.ext.ExceptionMapper;
+import javax.ws.rs.ext.Provider;
+import org.aopalliance.intercept.MethodInvocation;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.rest.auth.AuthenticationService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A class that maps GuacamoleExceptions in a way that returns a
+ * custom response to the user via JSON rather than allowing the default
+ * web application error handling to take place.
+ */
+@Provider
+public class GuacamoleExceptionMapper
+        implements ExceptionMapper<GuacamoleException> {
+    
+    /**
+     * The logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(GuacamoleExceptionMapper.class);
+    
+    /**
+     * The request associated with this instance of this mapper.
+     */
+    @Context private HttpServletRequest request;","[{'comment': '`@Context` on own line, please.', 'commenter': 'mike-jumper'}, {'comment': 'Done.', 'commenter': 'necouchman'}]"
291,guacamole/src/main/java/org/apache/guacamole/rest/RESTServiceModule.java,"@@ -83,11 +83,9 @@ protected void configureServlets() {
         bind(AuthenticationService.class);
         bind(AuthTokenGenerator.class).to(SecureRandomAuthTokenGenerator.class);
         bind(DecorationService.class);
-
-        // Automatically translate GuacamoleExceptions for REST methods
-        MethodInterceptor interceptor = new RESTExceptionWrapper();
-        requestInjection(interceptor);
-        bindInterceptor(Matchers.any(), new RESTMethodMatcher(), interceptor);
+        
+        // Get the ExceptionMapper that will rewrite exceptions into JSON.","[{'comment': '`bind()` is not ""getting"" the `ExceptionMapper`. In this case, the original comment is probably still more appropriate.', 'commenter': 'mike-jumper'}, {'comment': 'Copied/pasted the original comment.', 'commenter': 'necouchman'}]"
291,guacamole/src/main/java/org/apache/guacamole/rest/RESTExceptionWrapper.java,"@@ -1,203 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * ""License""); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.guacamole.rest;
-
-import com.google.inject.Inject;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Method;
-import javax.ws.rs.FormParam;
-import javax.ws.rs.QueryParam;
-import javax.ws.rs.WebApplicationException;
-import javax.ws.rs.core.Response;
-import org.aopalliance.intercept.MethodInterceptor;
-import org.aopalliance.intercept.MethodInvocation;
-import org.apache.guacamole.GuacamoleClientException;
-import org.apache.guacamole.GuacamoleException;
-import org.apache.guacamole.GuacamoleResourceNotFoundException;
-import org.apache.guacamole.GuacamoleSecurityException;
-import org.apache.guacamole.GuacamoleUnauthorizedException;
-import org.apache.guacamole.rest.auth.AuthenticationService;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * A method interceptor which wraps custom exception handling around methods
- * which can throw GuacamoleExceptions and which are exposed through the REST
- * interface. The various types of GuacamoleExceptions are automatically
- * translated into appropriate HTTP responses, including JSON describing the
- * error that occurred.
- */
-public class RESTExceptionWrapper implements MethodInterceptor {
-
-    /**
-     * Logger for this class.
-     */
-    private final Logger logger = LoggerFactory.getLogger(RESTExceptionWrapper.class);
-
-    /**
-     * Service for authenticating users and managing their Guacamole sessions.
-     */
-    @Inject
-    private AuthenticationService authenticationService;
-
-    /**
-     * Determines whether the given set of annotations describes an HTTP
-     * request parameter of the given name. For a parameter to be associated
-     * with an HTTP request parameter, it must be annotated with either the
-     * <code>@QueryParam</code> or <code>@FormParam</code> annotations.
-     *
-     * @param annotations
-     *     The annotations associated with the Java parameter being checked.
-     *
-     * @param name
-     *     The name of the HTTP request parameter.
-     *
-     * @return
-     *     true if the given set of annotations describes an HTTP request
-     *     parameter having the given name, false otherwise.
-     */
-    private boolean isRequestParameter(Annotation[] annotations, String name) {
-
-        // Search annotations for associated HTTP parameters
-        for (Annotation annotation : annotations) {
-
-            // Check if parameter is associated with the HTTP query string
-            if (annotation instanceof QueryParam && name.equals(((QueryParam) annotation).value()))
-                return true;
-
-            // Failing that, check whether the parameter is associated with the
-            // HTTP request body
-            if (annotation instanceof FormParam && name.equals(((FormParam) annotation).value()))
-                return true;
-
-        }
-
-        // No parameter annotations are present
-        return false;
-
-    }
-
-    /**
-     * Returns the authentication token that was passed in the given method
-     * invocation. If the given method invocation is not associated with an
-     * HTTP request (it lacks the appropriate JAX-RS annotations) or there is
-     * no authentication token, null is returned.
-     *
-     * @param invocation
-     *     The method invocation whose corresponding authentication token
-     *     should be determined.
-     *
-     * @return
-     *     The authentication token passed in the given method invocation, or
-     *     null if there is no such token.
-     */
-    private String getAuthenticationToken(MethodInvocation invocation) {
-
-        Method method = invocation.getMethod();
-
-        // Get the types and annotations associated with each parameter
-        Annotation[][] parameterAnnotations = method.getParameterAnnotations();
-        Class<?>[] parameterTypes = method.getParameterTypes();
-
-        // The Java standards require these to be parallel arrays
-        assert(parameterAnnotations.length == parameterTypes.length);
-
-        // Iterate through all parameters, looking for the authentication token
-        for (int i = 0; i < parameterTypes.length; i++) {
-
-            // Only inspect String parameters
-            Class<?> parameterType = parameterTypes[i];
-            if (parameterType != String.class)
-                continue;
-
-            // Parameter must be declared as a REST service parameter
-            Annotation[] annotations = parameterAnnotations[i];
-            if (!isRequestParameter(annotations, ""token""))
-                continue;
-
-            // The token parameter has been found - return its value
-            Object[] args = invocation.getArguments();
-            return (String) args[i];
-
-        }
-
-        // No token parameter is defined
-        return null;
-
-    }
-
-    @Override
-    public Object invoke(MethodInvocation invocation) throws WebApplicationException {
-
-        try {
-
-            // Invoke wrapped method
-            try {
-                return invocation.proceed();
-            }
-
-            // Ensure any associated session is invalidated if unauthorized
-            catch (GuacamoleUnauthorizedException e) {
-
-                // Pull authentication token from request
-                String token = getAuthenticationToken(invocation);
-
-                // If there is an associated auth token, invalidate it
-                if (authenticationService.destroyGuacamoleSession(token))
-                    logger.debug(""Implicitly invalidated session for token \""{}\""."", token);
-
-                // Continue with exception processing
-                throw e;
-
-            }
-
-        }
-
-        // Translate GuacamoleException subclasses to HTTP error codes
-        catch (GuacamoleException e) {
-            throw new APIException(
-                Response.Status.fromStatusCode(e.getHttpStatusCode()),
-                e
-            );
-        }
-
-        // Rethrow unchecked exceptions such that they are properly wrapped
-        catch (Throwable t) {","[{'comment': ""There's a good deal of logging and error handling which happens blanketly here (`Throwable`), but will not happen with the new `ExceptionMapper`. This functionality will somehow need to be included."", 'commenter': 'mike-jumper'}, {'comment': ""In that case, seems like this new class should just be renamed to `RESTExceptionMapper` since it isn't just interested in `GuacamoleException` classes.  I'll rework it a bit and add this back in."", 'commenter': 'necouchman'}, {'comment': ""I reworked it so that it's much more generic overall, and should deal with `Throwable` types.  Let me know if anything needs fixing there."", 'commenter': 'necouchman'}]"
291,guacamole/src/main/java/org/apache/guacamole/rest/RESTExceptionMapper.java,"@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest;
+
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.ext.ExceptionMapper;
+import javax.ws.rs.ext.Provider;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.rest.auth.AuthenticationService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A class that maps GuacamoleExceptions in a way that returns a
+ * custom response to the user via JSON rather than allowing the default
+ * web application error handling to take place.
+ */
+@Provider
+@Singleton","[{'comment': 'Does this have an effect? If so, and `RESTExceptionMapper` is a singleton, that would mean that the `HttpServletRequest` field is shared across all requests (which will cause problems for concurrent requests).', 'commenter': 'mike-jumper'}, {'comment': ""It has some effect - if you remove it, you get an error during the webapp deployment in Tomcat that it must be a `Singleton`.  What's the best way to test the token expiration?  Log in with two separate sessions, let them expire (60 minutes) and then try to load something and see what happens?  Or is there some other way to trigger the combination of `GuacamoleUnauthorizedException` and destroying the token?"", 'commenter': 'necouchman'}, {'comment': 'According to this StackOverfow article, it appears they may use ""proxies"" (?) to inject the correct request context into the single instance each time an exception is thrown??\r\n\r\nhttps://stackoverflow.com/questions/17766072/jax-rs-jersey-exceptionmapper-context-injection-into-static-singleton-class\r\n\r\nSo maybe it actually turns out okay??', 'commenter': 'necouchman'}, {'comment': '> What\'s the best way to test the token expiration?\r\n\r\nI\'d just temporarily modify one of the existing extensions to throw `GuacamoleUnauthorizedException` in some case which you can easily trigger, and verify that doing so invalidates the associated token.\r\n\r\n> According to this StackOverfow article, it appears they may use ""proxies"" (?) to inject the correct request context into the single instance each time an exception is thrown??\r\n>\r\n> https://stackoverflow.com/questions/17766072/jax-rs-jersey-exceptionmapper-context-injection-into-static-singleton-class\r\n>\r\n> So maybe it actually turns out okay??\r\n\r\nYeah, it does seem so. Let\'s correct the comment in that case, which currently states:\r\n\r\n    /**\r\n     * The request associated with this instance of this mapper.\r\n     */\r\n    @Context\r\n    private HttpServletRequest request;\r\n\r\nMight be helpful to note that the request object is always request scoped (and will thus always point to the relevant request within `toResponse()`), even for concurrent requests, regardless of the fact it is a field on a singleton.', 'commenter': 'mike-jumper'}, {'comment': 'Okay, comment has been updated.', 'commenter': 'necouchman'}]"
291,guacamole/src/main/java/org/apache/guacamole/rest/RESTExceptionMapper.java,"@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest;
+
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.ext.ExceptionMapper;
+import javax.ws.rs.ext.Provider;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.rest.auth.AuthenticationService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A class that maps GuacamoleExceptions in a way that returns a
+ * custom response to the user via JSON rather than allowing the default
+ * web application error handling to take place.
+ */
+@Provider
+@Singleton
+public class RESTExceptionMapper implements ExceptionMapper<Throwable> {
+    
+    /**
+     * The logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RESTExceptionMapper.class);
+    
+    /**
+     * The request associated with this instance of this mapper.
+     */
+    @Context
+    private HttpServletRequest request;
+    
+    /**
+     * The authentication service associated with the currently active session.
+     */
+    @Inject
+    private AuthenticationService authenticationService;
+    
+    /**
+     * Returns the authentication token that is in use in the current session,
+     * if present, or null if otherwise.
+     *
+     * @return
+     *     The authentication token for the current session, or null if no
+     *     token is present.
+     */
+    private String getAuthenticationToken() {
+
+        String token = request.getParameter(""token"");
+        if (token != null && !token.isEmpty())
+            return token;
+        
+        return null;
+
+    }
+    
+    @Override
+    public Response toResponse(Throwable t) {
+        
+        // Ensure any associated session is invalidated if unauthorized 
+        if (t instanceof GuacamoleUnauthorizedException) {
+            String token = getAuthenticationToken();
+            
+            if (authenticationService.destroyGuacamoleSession(token))
+                logger.debug(""Implicitly invalidated session for token \""{}\"""", token);
+        }
+        
+        // Translate GuacamoleException subclasses to HTTP error codes 
+        if (t instanceof GuacamoleException)
+            return Response
+                    .status(((GuacamoleException) t).getHttpStatusCode())
+                    .entity(new APIError((GuacamoleException)t))
+                    .type(MediaType.APPLICATION_JSON)
+                    .build();
+        
+        // Rethrow unchecked exceptions such that they are properly wrapped            
+        String message = t.getMessage();
+        if (message != null)
+            logger.error(""Unexpected internal error: {}"", message);
+        else
+            logger.error(""An internal error occurred, but did not contain ""
+                    + ""an error message. Enable debug-level logging for ""
+                    + ""details."");
+            
+        logger.debug(""Unexpected error in REST endpoint."", t);
+            
+        return Response
+                .status(Response.Status.INTERNAL_SERVER_ERROR)
+                .entity(""Unexpected Internal Error."")","[{'comment': 'The entity should probably still be an `APIError`, yes? But rather one constructed specifically to represent an internal error?', 'commenter': 'mike-jumper'}, {'comment': 'Yeah, probably so.  Should be good, now.', 'commenter': 'necouchman'}]"
291,guacamole/src/main/java/org/apache/guacamole/rest/RESTExceptionMapper.java,"@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest;
+
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.ext.ExceptionMapper;
+import javax.ws.rs.ext.Provider;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.rest.auth.AuthenticationService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A class that maps GuacamoleExceptions in a way that returns a
+ * custom response to the user via JSON rather than allowing the default
+ * web application error handling to take place.
+ */
+@Provider
+@Singleton
+public class RESTExceptionMapper implements ExceptionMapper<Throwable> {
+    
+    /**
+     * The logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RESTExceptionMapper.class);
+    
+    /**
+     * The request associated with this instance of this mapper.
+     */
+    @Context
+    private HttpServletRequest request;
+    
+    /**
+     * The authentication service associated with the currently active session.
+     */
+    @Inject
+    private AuthenticationService authenticationService;
+    
+    /**
+     * Returns the authentication token that is in use in the current session,
+     * if present, or null if otherwise.
+     *
+     * @return
+     *     The authentication token for the current session, or null if no
+     *     token is present.
+     */
+    private String getAuthenticationToken() {
+
+        String token = request.getParameter(""token"");
+        if (token != null && !token.isEmpty())
+            return token;
+        
+        return null;
+
+    }
+    
+    @Override
+    public Response toResponse(Throwable t) {
+        
+        // Ensure any associated session is invalidated if unauthorized 
+        if (t instanceof GuacamoleUnauthorizedException) {
+            String token = getAuthenticationToken();
+            
+            if (authenticationService.destroyGuacamoleSession(token))
+                logger.debug(""Implicitly invalidated session for token \""{}\"""", token);
+        }
+        
+        // Translate GuacamoleException subclasses to HTTP error codes 
+        if (t instanceof GuacamoleException)
+            return Response
+                    .status(((GuacamoleException) t).getHttpStatusCode())
+                    .entity(new APIError((GuacamoleException)t))","[{'comment': 'Ouch - please add a space between `(GuacamoleException)` and `t`. That `t` is almost invisible. ;)', 'commenter': 'mike-jumper'}, {'comment': 'Spaced.', 'commenter': 'necouchman'}]"
295,guacamole/src/main/webapp/translations/en.json,"@@ -475,6 +476,14 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY"" : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM"" : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220"" : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100"" : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""  : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX"" : ""linux"",","[{'comment': 'This is a style nitpick, but in keeping with the style used throughout the rest of these JSON files, if there are a group of objects like this, the "":"" should be lined up in the same column.', 'commenter': 'necouchman'}]"
295,guacamole/src/main/webapp/translations/en.json,"@@ -536,6 +546,14 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY"" : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM"" : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220"" : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100"" : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""  : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX"" : ""linux"",","[{'comment': 'As mentioned above - for style consistency, please line up the "":"" in this group of options.', 'commenter': 'necouchman'}]"
299,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/Credentials.java,"@@ -72,6 +72,29 @@
      */
     private transient HttpSession session;
 
+    /**
+     * Arbitrary LDAP attributes specified in guacamole.properties
+     */
+     private Map<String, String> ldapAttrs;
+
+     /**
+      * Returns the lDAP attributes associated with this set of credentials.
+      * @return The LDAP attributes Map associated with this set of credentials,
+      *         or  null if no LDAP Attributes have been set.
+      */
+     public Map<String, String> getLDAPAttributes() {
+         return ldapAttrs;
+     }
+
+     /**
+      * Sets the LDAP attributes associated with this set of credentials.
+      * @param attributes The LDAP attributes to associate with this set of
+      *                   credentials.
+      */
+     public void setLDAPAttributes(Map<String, String> attributes) {","[{'comment': ""This is too specific to LDAP. The `Credentials` object is intended to be generic, and shouldn't be tightly coupled to any one authentication mechanism.\r\n\r\nIf `Credentials` should include arbitrary attributes, I'd suggest implementing the `Attributes` interface: https://github.com/apache/guacamole-client/blob/7e6df7c1393be2df7c72f77d530a545edb473623/guacamole-ext/src/main/java/org/apache/guacamole/net/auth/Attributes.java\r\n\r\nBetter perhaps than that would be having `AuthenticatedUser` implement `Attributes` (as, semantically, it is the *user* that has these attributes, not their credentials)."", 'commenter': 'mike-jumper'}, {'comment': ""> If Credentials should include arbitrary attributes, I'd suggest implementing the Attributes interface\r\n\r\nYeah, that makes sense.\r\n\r\n> Better perhaps than that would be having AuthenticatedUser implement Attributes (as, semantically, it is the user that has these attributes, not their credentials).\r\n\r\nAh, yes, that makes more sense to use `AuthenticatedUser`.  Sorry, @jaredfrees, I may have steered you wrong, here."", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -26,12 +26,21 @@
 import org.apache.guacamole.auth.ldap.user.AuthenticatedUser;
 import org.apache.guacamole.auth.ldap.user.UserContext;
 import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
 import org.apache.guacamole.auth.ldap.user.UserService;
 import org.apache.guacamole.net.auth.Credentials;
 import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
 import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import java.util.HashMap;","[{'comment': 'Generally in the Guacamole code the imports are organized alphabetically, so these ones should probably go at the top.', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -221,6 +230,14 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
             throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
 
         try {
+            try {","[{'comment': ""Two things, here...\r\nFirst, I don't think there's any reason to nest these `try` statements, is there?  This may actually be moot (see comment below on the `getLDAPAttributes()` method), but you should be able to do something like:\r\n\r\n    try {\r\n        // Code to authenticate and retrieve attributes\r\n    }\r\n    catch (LDAPException e) {\r\n        throw...\r\n    }\r\n    finally {\r\n        ldapService.disconnect...\r\n    }\r\n\r\nI've definitely encountered instances where the nesting was required, but I don't think this is one of them?\r\n\r\nSecond thing, I would actually put the attribute retrieval *after* the code to authenticate the user.  It probably isn't worth retrieving the attributes if the authentication fails, so I'd only do that if authentication succeeds, and, thus, after."", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -236,6 +253,58 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
     }
 
+    /**
+     * Returns all custom LDAP attributes on the user currently bound under
+     * the given LDAP connection. The custom attributes are specified in
+     * guacamole.properties.
+     *
+     * @param ldapConnection
+     *     LDAP connection to find the custom LDAP attributes.
+     * @param username
+     *     The username of the user whose attributes are queried.
+     *
+     * @return
+     *     All attributes on the user currently bound under the
+     *     given LDAP connection, as a map of attribute name to
+     *     corresponding attribute value.
+     *
+     * @throws LDAPException
+     *     If an error occurs while searching for the user attributes.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs retrieving the user DN.
+     */
+    private Map<String, String> getLDAPAttributes(LDAPConnection ldapConnection,
+            String username) throws LDAPException, GuacamoleException {","[{'comment': ""Maybe @mike-jumper has opinions about this, but I'd suggest only throwing the `GuacamoleException` in this method and catching the `LDAPException`, here, and re-throwing it as a `GuacamoleException` (`GuacamoleServerException`, prehaps).  This also clears up the nested try above..."", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -236,6 +253,58 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
     }
 
+    /**
+     * Returns all custom LDAP attributes on the user currently bound under
+     * the given LDAP connection. The custom attributes are specified in
+     * guacamole.properties.
+     *
+     * @param ldapConnection
+     *     LDAP connection to find the custom LDAP attributes.
+     * @param username
+     *     The username of the user whose attributes are queried.
+     *
+     * @return
+     *     All attributes on the user currently bound under the
+     *     given LDAP connection, as a map of attribute name to
+     *     corresponding attribute value.
+     *
+     * @throws LDAPException
+     *     If an error occurs while searching for the user attributes.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs retrieving the user DN.
+     */
+    private Map<String, String> getLDAPAttributes(LDAPConnection ldapConnection,
+            String username) throws LDAPException, GuacamoleException {
+
+        // Get attributes from configuration information
+        List<String> attrList = confService.getAttributes();
+
+        // If there are no attributes there is no reason to search LDAP
+        if (attrList.size() == 0)","[{'comment': ""Two things:\r\n- You probably also need to check `if attrList == null` here, since the configuration service doesn't have a default and so could return `null` if the attribute is not specified.  The `StringListProperty` returns `null` if the value is not specified, so this will like trigger a `NullPointerException`.\r\n- You can simplify the above to `attrList.isEmpty()`"", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -236,6 +253,58 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
 
     }
 
+    /**
+     * Returns all custom LDAP attributes on the user currently bound under
+     * the given LDAP connection. The custom attributes are specified in
+     * guacamole.properties.
+     *
+     * @param ldapConnection
+     *     LDAP connection to find the custom LDAP attributes.
+     * @param username
+     *     The username of the user whose attributes are queried.
+     *
+     * @return
+     *     All attributes on the user currently bound under the
+     *     given LDAP connection, as a map of attribute name to
+     *     corresponding attribute value.
+     *
+     * @throws LDAPException
+     *     If an error occurs while searching for the user attributes.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs retrieving the user DN.
+     */
+    private Map<String, String> getLDAPAttributes(LDAPConnection ldapConnection,
+            String username) throws LDAPException, GuacamoleException {
+
+        // Get attributes from configuration information
+        List<String> attrList = confService.getAttributes();
+
+        // If there are no attributes there is no reason to search LDAP
+        if (attrList.size() == 0)
+            return null;
+
+        // Build LDAP query parameters
+        String[] attrArray = attrList.toArray(new String[attrList.size()]);
+        String userDN = getUserBindDN(username);
+
+        // Get LDAP attributes by querying LDAP
+        LDAPEntry userEntry = ldapConnection.read(userDN, attrArray);
+        LDAPAttributeSet attrSet = userEntry.getAttributeSet();
+
+        // Add each attribute into Map
+        Map<String, String> attrMap = new HashMap<String, String>();
+        Iterator attrIterator = attrSet.iterator();
+        while (attrIterator.hasNext()) {","[{'comment': 'Might use the Java for-each loop, here - you used it below when dealing with the LDAP attributes in the token - no reason not to use it, here, too! :smile: ', 'commenter': 'necouchman'}, {'comment': ""the reason I did this is because I couldn't get the casting to work in the for-each loop, but I think I got the for-each loop working now. "", 'commenter': 'jaredfrees'}, {'comment': ""Oh, I see what you mean - yeah, that could be a problem, as those custom classes (particularly ancient ones like the JLDAP ones :smile:) don't always plan nice with the for-each loop."", 'commenter': 'necouchman'}, {'comment': 'Here is what I am doing now:\r\n       for (Object attrObj : attrMap) {\r\n            LDAPAttribute attr = (LDAPAttribute)attrObj;\r\n            .....\r\n       }', 'commenter': 'jaredfrees'}, {'comment': ""Yep, that's fine.  And, depending on what you're doing with it later, you might not even need that assignment, there, you could do:\r\n\r\n    String attrName = ((LDAPAttribute) attrObj).getName();\r\n    String attrValue = ((LDAPAttribute) attrObj).getStringValue();\r\n\r\nI'm not certain what penalty there is, if any, to doing the cast twice like that, so it may actually make sense to go ahead and assign it to a new `LDAPAttribute` type.  Either way is probably perfectly fine."", 'commenter': 'necouchman'}]"
299,guacamole-ext/src/main/java/org/apache/guacamole/token/StandardTokens.java,"@@ -23,6 +23,10 @@
 import java.util.Date;
 import org.apache.guacamole.net.auth.AuthenticatedUser;
 import org.apache.guacamole.net.auth.Credentials;
+import java.util.Map;
+import java.util.Set;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;","[{'comment': ""Guessing you had these in here for debugging purposes, but doesn't look like there's any logging code left, so probably best to get rid of them.  Also, these should probably be alphabetized."", 'commenter': 'necouchman'}]"
299,guacamole-ext/src/main/java/org/apache/guacamole/token/StandardTokens.java,"@@ -74,6 +78,12 @@
      */
     private static final String TIME_FORMAT = ""HHmmss"";
 
+    /**
+     * Standard prefix to append to beginning of the name of each custom
+    *  LDAP attribute before adding attributes as tokens.
+     */
+    private static final String LDAP_ATTR_PREFIX = ""USER_ATTR:"";","[{'comment': ""As with @mike-jumper's suggestion above, I'd say make this prefix more generic."", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -36,6 +36,7 @@
 import org.apache.guacamole.GuacamoleException;
 import org.apache.guacamole.GuacamoleServerException;
 import org.apache.guacamole.net.auth.AuthenticatedUser;
+//import org.apache.guacamole.auth.ldap.user.AuthenticatedUser;","[{'comment': 'This should probably come out :smiley: ', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/AuthenticatedUser.java,"@@ -20,15 +20,19 @@
 package org.apache.guacamole.auth.ldap.user;
 
 import com.google.inject.Inject;
+import java.util.Map;
+import java.util.HashMap;
 import org.apache.guacamole.net.auth.AbstractAuthenticatedUser;
+import org.apache.guacamole.net.auth.Attributes;
 import org.apache.guacamole.net.auth.AuthenticationProvider;
 import org.apache.guacamole.net.auth.Credentials;
 
 /**
  * An LDAP-specific implementation of AuthenticatedUser, associating a
  * particular set of credentials with the LDAP authentication provider.
  */
-public class AuthenticatedUser extends AbstractAuthenticatedUser {
+public class AuthenticatedUser extends AbstractAuthenticatedUser","[{'comment': ""The way this is implemented, here, these attributes (tokens) would not be available to connections stored in the JDBC module, since the module you've extended, here, is the LDAP-specific one.  In order for this to cover multiple authentication modules, you'll either have to implement this at one of the parent classes (`AbstractAuthenticatedUser` perhaps) or across multiple modules.  Of course, that doesn't all have to be done with this one pull request - this can just tackle LDAP for now - but the base changes that go into it probably need to at least make it available for other extensions to implement.\r\n\r\nThe other advantage of at least creating the abstract methods within one of the parent classes is avoiding having to do the type-casting when trying to run the `getAttributes()` method.\r\n\r\n@mike-jumper Any pointers on the best place to put the various attribute-related stuff such that it can be easily used across different authentication extensions?"", 'commenter': 'necouchman'}]"
299,guacamole-ext/src/main/java/org/apache/guacamole/token/StandardTokens.java,"@@ -23,6 +23,8 @@
 import java.util.Date;
 import org.apache.guacamole.net.auth.AuthenticatedUser;
 import org.apache.guacamole.net.auth.Credentials;
+import java.util.Map;
+import java.util.Set;","[{'comment': 'This should go above the `org.apache` entries, and be alphabetized in the correct order.', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/AuthenticatedUser.java,"@@ -20,15 +20,19 @@
 package org.apache.guacamole.auth.ldap.user;
 
 import com.google.inject.Inject;
+import java.util.Map;
+import java.util.HashMap;","[{'comment': 'HashMap > Map, at least in the alphabet.', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -126,6 +127,10 @@
             TokenFilter tokenFilter = new TokenFilter();
             StandardTokens.addStandardTokens(tokenFilter, user);
 
+            // Add custom attribute tokens
+            Map<String, String> attrs = ( (org.apache.guacamole.auth.ldap.user.AuthenticatedUser) user).getAttributes();","[{'comment': ""I'm not sure we want to have to do this type-casting, here, but see my comment below on the implementation within the LDAP-specific `AuthenticatedUser` class."", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -221,21 +229,79 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
             throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
 
         try {
-
             // Return AuthenticatedUser if bind succeeds
             AuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
             authenticatedUser.init(credentials);
+
+            //set attributes
+            String username = credentials.getUsername();
+            Map<String, String> attrs = getLDAPAttributes(ldapConnection, username);
+            authenticatedUser.setAttributes(attrs);
+
             return authenticatedUser;
 
         }
-
+        catch (LDAPException e) {
+            throw new GuacamoleServerException(""Error while querying for User Attributes."", e);
+        }
         // Always disconnect
         finally {
             ldapService.disconnect(ldapConnection);
         }
 
     }
 
+    /**
+     * Returns all custom LDAP attributes on the user currently bound under
+     * the given LDAP connection. The custom attributes are specified in
+     * guacamole.properties.
+     *
+     * @param ldapConnection
+     *     LDAP connection to find the custom LDAP attributes.
+     * @param username
+     *     The username of the user whose attributes are queried.
+     *
+     * @return
+     *     All attributes on the user currently bound under the
+     *     given LDAP connection, as a map of attribute name to
+     *     corresponding attribute value.
+     *
+     * @throws LDAPException
+     *     If an error occurs while searching for the user attributes.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs retrieving the user DN.
+     */
+    private Map<String, String> getLDAPAttributes(LDAPConnection ldapConnection,
+            String username) throws LDAPException {
+
+        // Get attributes from configuration information
+        List<String> attrList = confService.getAttributes();","[{'comment': ""Since `getAttributes()` throws a `GuacamoleException`, it will need to be caught, here.  That's why I suggest having the `getLDAPAttributes()` method throw only `GuacamoleException`, and then using `try {} catch {}` within this method to catch and re-throw the `LDAPException` as a `GuacamoleException`.  One way or the other, though, this needs to be handled."", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -22,10 +22,18 @@
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 import com.novell.ldap.LDAPConnection;
+import com.novell.ldap.LDAPAttributeSet;
+import com.novell.ldap.LDAPEntry;
+import com.novell.ldap.LDAPAttribute;
+import com.novell.ldap.LDAPException;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Iterator;
+import java.util.Map;","[{'comment': 'This is totally a nitpick, but this is *almost* in alphabetical order :-).', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -221,21 +229,79 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
             throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
 
         try {
-
             // Return AuthenticatedUser if bind succeeds
             AuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
             authenticatedUser.init(credentials);
+
+            //set attributes
+            String username = credentials.getUsername();
+            Map<String, String> attrs = getLDAPAttributes(ldapConnection, username);
+            authenticatedUser.setAttributes(attrs);
+
             return authenticatedUser;
 
         }
-
+        catch (LDAPException e) {
+            throw new GuacamoleServerException(""Error while querying for User Attributes."", e);
+        }
         // Always disconnect
         finally {
             ldapService.disconnect(ldapConnection);
         }
 
     }
 
+    /**
+     * Returns all custom LDAP attributes on the user currently bound under
+     * the given LDAP connection. The custom attributes are specified in
+     * guacamole.properties.
+     *
+     * @param ldapConnection
+     *     LDAP connection to find the custom LDAP attributes.
+     * @param username","[{'comment': 'Space between `@param` tags.', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -221,21 +229,82 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
             throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
 
         try {
-
             // Return AuthenticatedUser if bind succeeds
             AuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
             authenticatedUser.init(credentials);
+
+            //set attributes
+            String username = credentials.getUsername();
+            Map<String, String> attrs = getLDAPAttributes(ldapConnection, username);
+            authenticatedUser.setAttributes(attrs);
+
             return authenticatedUser;
 
         }
-
         // Always disconnect
         finally {
             ldapService.disconnect(ldapConnection);
         }
 
     }
 
+    /**
+     * Returns all custom LDAP attributes on the user currently bound under
+     * the given LDAP connection. The custom attributes are specified in
+     * guacamole.properties.
+     *
+     * @param ldapConnection
+     *     LDAP connection to find the custom LDAP attributes.
+     *
+     * @param username
+     *     The username of the user whose attributes are queried.
+     *
+     * @return
+     *     All attributes on the user currently bound under the
+     *     given LDAP connection, as a map of attribute name to
+     *     corresponding attribute value.
+     *
+     * @throws LDAPException
+     *     If an error occurs while searching for the user attributes.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs retrieving the user DN.
+     */
+    private Map<String, String> getLDAPAttributes(LDAPConnection ldapConnection,
+            String username) throws GuacamoleException {
+
+        // Get attributes from configuration information
+        List<String> attrList = confService.getAttributes();
+
+        // If there are no attributes there is no reason to search LDAP
+        if (attrList == null || attrList.isEmpty())
+            return null;
+
+        // Build LDAP query parameters
+        String[] attrArray = attrList.toArray(new String[attrList.size()]);
+        String userDN = getUserBindDN(username);
+
+        Map<String, String> attrMap = new HashMap<String, String>();
+        try {
+            // Get LDAP attributes by querying LDAP
+            LDAPEntry userEntry = ldapConnection.read(userDN, attrArray);
+            LDAPAttributeSet attrSet = userEntry.getAttributeSet();
+
+            // Add each attribute into Map
+            for (Object attrObj : attrSet) {
+                LDAPAttribute attr = (LDAPAttribute)attrObj;
+                String attrName = attr.getName();
+                String attrValue = attr.getStringValue();
+                attrMap.put(attrName, attrValue);","[{'comment': ""Can simplify this to:\r\n\r\n    attrMap.put(attr.getName(), attr.getStringValue());\r\n\r\nand avoid the extra `String` variables that don't get used."", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -344,4 +344,20 @@ public int getOperationTimeout() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns names for custom LDAP user attributes.
+     *
+     * @return
+     *     LDAP user attributes as defined in the guacamole.properties file
+     *     as ldap-user-attributes: ''","[{'comment': 'This comment just strikes me as a little odd - I would drop the example of its guacamole.properties definition and just allow that to be documented in the manual and make this more like the other `@return` tags for other properties.', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/AuthenticatedUser.java,"@@ -53,6 +61,72 @@ public void init(Credentials credentials) {
         setIdentifier(credentials.getUsername());
     }
 
+    /**
+     * Get a map of attributes associated with this AuthenticatedUser.
+     *
+     * @return
+     *     The Map of arbitrary attributes associated with this
+     *     AuthenticatedUser object.
+     */","[{'comment': ""Since this is overriding another method, I think it doesn't need the Javadocs, no?"", 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/user/AuthenticatedUser.java,"@@ -53,6 +61,72 @@ public void init(Credentials credentials) {
         setIdentifier(credentials.getUsername());
     }
 
+    /**
+     * Get a map of attributes associated with this AuthenticatedUser.
+     *
+     * @return
+     *     The Map of arbitrary attributes associated with this
+     *     AuthenticatedUser object.
+     */
+    @Override
+    public Map<String, String> getAttributes() {
+        return attributes;
+    }
+
+    /**
+     * Sets a map of attributes associated with this AuthenticatedUser.
+     *
+     * @param attributes
+     *      A map of attribute key/value pairs to add to this AuthenticatedUser.
+     */","[{'comment': ""Same thing as above - since we're overriding another already-documented method, here, you should be able to leave out the Javadoc comments."", 'commenter': 'necouchman'}]"
299,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/AbstractAuthenticatedUser.java,"@@ -41,4 +42,12 @@ public void invalidate() {
         // Nothing to invalidate
     }
 
+    public Map<String, String> getAttributes() {","[{'comment': ""So, I think there are two options here:\r\n\r\n1. Don't implement these, here, since `AbstractAuthenticatedUser` implements `AuthenticatedUser`, which implements `Attributes`, these should already be defined at that level.  If you don't implement them, here, any classes that extend `AbstractAuthenticatedUser` will need to override them.\r\n2. Implement them, here, so that there's a base implementation, but use the `@Override` tag so that it's understood those are overriding methods from another class (`AuthenticatedUser`).  This means you won't have to implement them in every single class that extends `AbstractAuthenticatedUser` except where you want to change this behavior.\r\n\r\nOption 2 is definitely simpler, or at least requires fewer changes to other extensions, so that's probably the easiest to go with for the time being - that just means adding the `@Override` tag for this method and `setAttributes()`."", 'commenter': 'necouchman'}, {'comment': ""I think Option 2 is the way to go. Personally, I don't think we should mess so much with the other extensions. "", 'commenter': 'jaredfrees'}]"
299,guacamole-ext/src/main/java/org/apache/guacamole/token/StandardTokens.java,"@@ -21,9 +21,10 @@
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Map;
+import java.util.Set;
 import org.apache.guacamole.net.auth.AuthenticatedUser;
 import org.apache.guacamole.net.auth.Credentials;
-","[{'comment': 'Add this line back in - style-wise, there should be a line between the imports and the class documentation.', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -189,7 +197,7 @@ private LDAPConnection bindAs(Credentials credentials)
 
     /**
      * Returns an AuthenticatedUser representing the user authenticated by the
-     * given credentials.
+     * given credentials. Also adds custom LDAP attributes to credentials object.","[{'comment': 'Might want to update this comment to reflect the change from storing in `Credentials` to `AuthenticatedUser`', 'commenter': 'necouchman'}]"
299,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -221,21 +229,82 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
             throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.USERNAME_PASSWORD);
 
         try {
-
             // Return AuthenticatedUser if bind succeeds
             AuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
             authenticatedUser.init(credentials);
+
+            //set attributes","[{'comment': '`// Set attributes`', 'commenter': 'necouchman'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -63,35 +57,38 @@
     /**
      * This utility class should not be instantiated.
      */
-    private TokenName() {}
+    protected TokenName() {}
 
     /**
      * Generates the name of the parameter token that should be populated with
-     * the value of the given LDAP attribute. The name of the LDAP attribute
-     * will automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
+     * the value of the given attribute. The name of the attribute will
+     * automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
      * ""lowercase_with_underscores"", and ""mixes_ofBoth_Styles"" to consistent
      * ""UPPERCASE_WITH_UNDERSCORES"". Each returned attribute will be prefixed
      * with ""LDAP_"".
      *
      * @param name
-     *     The name of the LDAP attribute to use to generate the token name.
+     *     The name of the attribute to use to generate the token name.
+     * 
+     * @param prefix
+     *     The prefix to prepend to the generated token name.
      *
      * @return
      *     The name of the parameter token that should be populated with the
-     *     value of the LDAP attribute having the given name.
+     *     value of the attribute having the given name.
      */
-    public static String fromAttribute(String name) {
+    public static String fromAttribute(final String name, final String prefix) {","[{'comment': 'Rather than requiring usage like:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/a4ccfcab5fdad4c1081b5acd5232323b618c0043/guacamole-ext/src/test/java/org/apache/guacamole/token/TokenNameTest.java#L37-L39\r\n\r\nwhere the user must specify `""""` to not include a prefix, I suggest defining an additional:\r\n\r\n```java\r\npublic static String fromAttribute(final String name) {\r\n    ...\r\n}\r\n```\r\n\r\nwhich does that internally.', 'commenter': 'mike-jumper'}, {'comment': 'Implemented.', 'commenter': 'necouchman'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -63,35 +57,38 @@
     /**
      * This utility class should not be instantiated.
      */
-    private TokenName() {}
+    protected TokenName() {}
 
     /**
      * Generates the name of the parameter token that should be populated with
-     * the value of the given LDAP attribute. The name of the LDAP attribute
-     * will automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
+     * the value of the given attribute. The name of the attribute will
+     * automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
      * ""lowercase_with_underscores"", and ""mixes_ofBoth_Styles"" to consistent
      * ""UPPERCASE_WITH_UNDERSCORES"". Each returned attribute will be prefixed
      * with ""LDAP_"".","[{'comment': 'This generic version of `TokenName` is no longer tied to LDAP and will not necessarily apply a `LDAP_` prefix.', 'commenter': 'mike-jumper'}, {'comment': 'Cleaned up this comment.', 'commenter': 'necouchman'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -63,35 +57,38 @@
     /**
      * This utility class should not be instantiated.
      */
-    private TokenName() {}
+    protected TokenName() {}
 
     /**
      * Generates the name of the parameter token that should be populated with
-     * the value of the given LDAP attribute. The name of the LDAP attribute
-     * will automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
+     * the value of the given attribute. The name of the attribute will
+     * automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
      * ""lowercase_with_underscores"", and ""mixes_ofBoth_Styles"" to consistent
      * ""UPPERCASE_WITH_UNDERSCORES"". Each returned attribute will be prefixed
      * with ""LDAP_"".
      *
      * @param name
-     *     The name of the LDAP attribute to use to generate the token name.
+     *     The name of the attribute to use to generate the token name.
+     * 
+     * @param prefix
+     *     The prefix to prepend to the generated token name.","[{'comment': 'Either here, in the description of the function, or both, it may be helpful to clarify that the prefix will not be automatically transformed to ""UPPERCASE_WITH_UNDERSCORES"", and that the supplied prefix should follow this convention if the returned token name is to be consistent.', 'commenter': 'mike-jumper'}, {'comment': 'Added some clarifications here.', 'commenter': 'necouchman'}]"
303,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPTokenName.java,"@@ -0,0 +1,33 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import org.apache.guacamole.token.TokenName;
+
+/**
+ * Utility class for generating parameter token names.
+ */
+public class LDAPTokenName extends TokenName {","[{'comment': 'Creating `LDAPTokenName` and `CASTokenName` just to automatically apply a prefix feels like overkill. Why not use `TokenName` as-is, supplying the desired prefix as a documented constant? (`LDAP_ATTRIBUTE_TOKEN_PREFIX`, etc.)', 'commenter': 'mike-jumper'}, {'comment': 'Got rid of this and did as suggested.', 'commenter': 'necouchman'}]"
303,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -88,33 +92,39 @@ public String validateTicket(String ticket, Credentials credentials) throws Guac
         validator.setAcceptAnyProxy(true);
         validator.setEncoding(""UTF-8"");
         try {
+            Map<String, String> tokens = new HashMap<>();
             String confRedirectURI = confService.getRedirectURI();
             Assertion a = validator.validate(ticket, confRedirectURI);
             AttributePrincipal principal =  a.getPrincipal();
+            Map<String, Object> ticketAttrs = principal.getAttributes();
 
             // Retrieve username and set the credentials.
             String username = principal.getName();
             if (username != null)
                 credentials.setUsername(username);
 
             // Retrieve password, attempt decryption, and set credentials.
-            Object credObj = principal.getAttributes().get(""credential"");
+            Object credObj = ticketAttrs.remove(""credential"");","[{'comment': ""Is the `Map<String, Object>` returned by `principal.getAttributes()` known to be mutable? Are there side effects to making changes to that `Map`? If there's any chance the `Map` might be unmodifiable, might be cached, etc., I don't think we can rely on being able to call `remove()`.\r\n\r\nFrom what I can tell, the CAS client documentation doesn't specify one way or the other. Checking the client source, there is at least one case where an implementation of the `AttributePrincipal` interface will return an unmodifiable, empty map:\r\n\r\nhttps://github.com/apereo/java-cas-client/blob/d88b96a4c6b9445d68379b9c0c5a16d8cd3f1bcd/cas-client-core/src/main/java/org/jasig/cas/client/authentication/AttributePrincipalImpl.java#L55-L57"", 'commenter': 'mike-jumper'}, {'comment': 'Okay, cleaned this up by making a copy of the attributes.', 'commenter': 'necouchman'}]"
303,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -88,33 +92,39 @@ public String validateTicket(String ticket, Credentials credentials) throws Guac
         validator.setAcceptAnyProxy(true);
         validator.setEncoding(""UTF-8"");
         try {
+            Map<String, String> tokens = new HashMap<>();
             String confRedirectURI = confService.getRedirectURI();
             Assertion a = validator.validate(ticket, confRedirectURI);
             AttributePrincipal principal =  a.getPrincipal();
+            Map<String, Object> ticketAttrs = principal.getAttributes();
 
             // Retrieve username and set the credentials.
             String username = principal.getName();
             if (username != null)
                 credentials.setUsername(username);
 
             // Retrieve password, attempt decryption, and set credentials.
-            Object credObj = principal.getAttributes().get(""credential"");
+            Object credObj = ticketAttrs.remove(""credential"");
             if (credObj != null) {
                 String clearPass = decryptPassword(credObj.toString());
                 if (clearPass != null && !clearPass.isEmpty())
                     credentials.setPassword(clearPass);
             }
+            
+            // Convert remaining attributes that have values to Strings
+            for (Entry attr : ticketAttrs.entrySet()) {","[{'comment': 'Should this be `Entry<String, Object>`?', 'commenter': 'mike-jumper'}, {'comment': 'Corrected.', 'commenter': 'necouchman'}]"
303,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -88,33 +92,39 @@ public String validateTicket(String ticket, Credentials credentials) throws Guac
         validator.setAcceptAnyProxy(true);
         validator.setEncoding(""UTF-8"");
         try {
+            Map<String, String> tokens = new HashMap<>();
             String confRedirectURI = confService.getRedirectURI();
             Assertion a = validator.validate(ticket, confRedirectURI);
             AttributePrincipal principal =  a.getPrincipal();
+            Map<String, Object> ticketAttrs = principal.getAttributes();
 
             // Retrieve username and set the credentials.
             String username = principal.getName();
             if (username != null)
                 credentials.setUsername(username);
 
             // Retrieve password, attempt decryption, and set credentials.
-            Object credObj = principal.getAttributes().get(""credential"");
+            Object credObj = ticketAttrs.remove(""credential"");
             if (credObj != null) {
                 String clearPass = decryptPassword(credObj.toString());
                 if (clearPass != null && !clearPass.isEmpty())
                     credentials.setPassword(clearPass);
             }
+            
+            // Convert remaining attributes that have values to Strings
+            for (Entry attr : ticketAttrs.entrySet()) {
+                String tokenName = CASTokenName.fromAttribute(attr.getKey().toString());","[{'comment': 'If the key is known to be a `String`, this is really just calling `someString.toString()`, which is superfluous. If `Entry<String, Object>` is correct, then this should be changed to `attr.getKey()`.', 'commenter': 'mike-jumper'}, {'comment': 'Changed.', 'commenter': 'necouchman'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -63,35 +57,38 @@
     /**
      * This utility class should not be instantiated.
      */
-    private TokenName() {}
+    protected TokenName() {}
 
     /**
      * Generates the name of the parameter token that should be populated with
-     * the value of the given LDAP attribute. The name of the LDAP attribute
-     * will automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
+     * the value of the given attribute. The name of the attribute will","[{'comment': 'While the LDAP version of this was tied to attributes, a generic version should probably not be.', 'commenter': 'mike-jumper'}, {'comment': '... and I guess that means the function should probably be renamed, too, with `fromAttribute()` being overly specific.', 'commenter': 'mike-jumper'}, {'comment': ""So, I removed the LDAP stuff, but kept the `fromAttribute()` name - it seems like most of the extensions still call these attributes, so maybe it isn't too specific?  I'm open to suggestions, but seems okay to me..."", 'commenter': 'necouchman'}, {'comment': ""Well ... they call them attributes because that's what they happen to be in those cases: attributes on an LDAP object and attributes on a CAS principal. I don't think that will fit in the general case, where we are providing a `TokenName` class to serve as a convenience for extensions that wish to generate tokens dynamically. Those tokens may come from something called an attribute, perhaps even Guacamole's own attributes, or they may not.\r\n\r\nThere's a similar function on the JavaScript side for translation strings which we called `canonicalize()`:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/d1e928bea79ca81c827e9b6adedabc98eefdf701/guacamole/src/main/webapp/app/locale/services/translationStringService.js#L28-L42\r\n\r\nPerhaps that would be a better choice?"", 'commenter': 'mike-jumper'}, {'comment': 'Sounds good to me.  Changed as requested.', 'commenter': 'necouchman'}]"
303,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -65,25 +66,26 @@
      *     The credentials to use for authentication.
      *
      * @return
-     *     An AuthenticatedUser representing the user authenticated by the
+     *     A CASAuthenticatedUser representing the user authenticated by the
      *     given credentials.
      *
      * @throws GuacamoleException
      *     If an error occurs while authenticating the user, or if access is
      *     denied.
      */
-    public AuthenticatedUser authenticateUser(Credentials credentials)
+    public CASAuthenticatedUser authenticateUser(Credentials credentials)
             throws GuacamoleException {
 
         // Pull CAS ticket from request if present
         HttpServletRequest request = credentials.getRequest();
         if (request != null) {
             String ticket = request.getParameter(CASTicketField.PARAMETER_NAME);
             if (ticket != null) {
-                String username = ticketService.validateTicket(ticket, credentials);
+                Map<String, String> tokens = ticketService.validateTicket(ticket, credentials);
+                String username = credentials.getUsername();","[{'comment': 'This worries me. While the username previously came only from CAS, the value of `getUsername()` may come from the `username` HTTP parameter (or from an HTTP auth header), and the code within `validateTicket()` is not written to guarantee that this value comes only from CAS:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/a6601a2bfde529fa58575721da0b2ad491c1e8a1/extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java#L108-L110', 'commenter': 'mike-jumper'}, {'comment': ""Yeah, that's a good point.  I added an exception into the `validateTicket()` method for `null` `username`s - let me know if that seems like an okay route?"", 'commenter': 'necouchman'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -17,30 +17,24 @@
  * under the License.
  */
 
-package org.apache.guacamole.auth.ldap;
+package org.apache.guacamole.token;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 /**
  * Utility class for generating parameter token names.
  */
-public class TokenName {
+public abstract class TokenName {","[{'comment': 'Why is this changing to `abstract`? (and the constructor from `private` to `protected`?)', 'commenter': 'mike-jumper'}, {'comment': 'Leftover from when I had the LDAP and CAS-specific implementing classes.  Should be fixed.', 'commenter': 'necouchman'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -63,35 +57,39 @@
     /**
      * This utility class should not be instantiated.
      */
-    private TokenName() {}
+    protected TokenName() {}
 
     /**
      * Generates the name of the parameter token that should be populated with
-     * the value of the given LDAP attribute. The name of the LDAP attribute
-     * will automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
-     * ""lowercase_with_underscores"", and ""mixes_ofBoth_Styles"" to consistent
-     * ""UPPERCASE_WITH_UNDERSCORES"". Each returned attribute will be prefixed
-     * with ""LDAP_"".
+     * the given string. The provided string will be automatically transformed
+     * from ""CamelCase"", ""headlessCamelCase"", ""lowercase_with_underscores"",
+     * and ""mixes_ofBoth_Styles"" to consistent ""UPPERCASE_WITH_UNDERSCORES"".
+     * Each returned attribute will be prefixed with the string value provided","[{'comment': 'Each returned name*', 'commenter': 'mike-jumper'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -63,35 +57,39 @@
     /**
      * This utility class should not be instantiated.
      */
-    private TokenName() {}
+    protected TokenName() {}
 
     /**
      * Generates the name of the parameter token that should be populated with
-     * the value of the given LDAP attribute. The name of the LDAP attribute
-     * will automatically be transformed from ""CamelCase"", ""headlessCamelCase"",
-     * ""lowercase_with_underscores"", and ""mixes_ofBoth_Styles"" to consistent
-     * ""UPPERCASE_WITH_UNDERSCORES"". Each returned attribute will be prefixed
-     * with ""LDAP_"".
+     * the given string. The provided string will be automatically transformed
+     * from ""CamelCase"", ""headlessCamelCase"", ""lowercase_with_underscores"",
+     * and ""mixes_ofBoth_Styles"" to consistent ""UPPERCASE_WITH_UNDERSCORES"".
+     * Each returned attribute will be prefixed with the string value provided
+     * in the prefix.  The value provided in prefix will be prepended to the
+     * attribute name, but will itself not be transformed.","[{'comment': 'Did you mean ""token name""?', 'commenter': 'mike-jumper'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -102,5 +100,21 @@ public static String fromAttribute(String name) {
         return builder.toString();
 
     }
+    
+    /**
+     * Generate the name of a parameter from the given string, and with a blank","[{'comment': 'parameter token*', 'commenter': 'mike-jumper'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -102,5 +100,21 @@ public static String fromAttribute(String name) {
         return builder.toString();
 
     }
+    
+    /**
+     * Generate the name of a parameter from the given string, and with a blank
+     * prefix such that the token name will simply be the transformed version","[{'comment': '> ... and with a blank prefix ...\r\n\r\nThis seems an odd way to say that no prefix is added.', 'commenter': 'mike-jumper'}]"
303,guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java,"@@ -102,5 +100,21 @@ public static String fromAttribute(String name) {
         return builder.toString();
 
     }
+    
+    /**
+     * Generate the name of a parameter from the given string, and with a blank
+     * prefix such that the token name will simply be the transformed version
+     * of the string.","[{'comment': ""While it's relatively clear that this version of `canonicalize()` is meant to perform the same task as the other version of `canonicalize()`, this isn't specifically noted. For the sake of the caller, the transformation performed should be independently described, or the documentation should at least link to the other version and note that the same transformation is performed (except with no prefix)."", 'commenter': 'mike-jumper'}]"
303,guacamole-ext/src/test/java/org/apache/guacamole/token/TokenNameTest.java,"@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.token;
+
+import static org.junit.Assert.assertEquals;
+import org.junit.Test;
+
+/**
+ * Test which verifies automatic generation of LDAP-specific connection
+ * parameter token names.
+ */
+public class TokenNameTest {
+
+    /**
+     * Verifies that TokenName.canonicalize() generates token names as
+     * specified, regardless of the naming convention of the attribute.","[{'comment': 'attribute?', 'commenter': 'mike-jumper'}]"
303,guacamole-ext/src/test/java/org/apache/guacamole/token/TokenNameTest.java,"@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.token;
+
+import static org.junit.Assert.assertEquals;
+import org.junit.Test;
+
+/**
+ * Test which verifies automatic generation of LDAP-specific connection","[{'comment': 'Not LDAP any longer, though.', 'commenter': 'mike-jumper'}]"
308,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -245,7 +245,10 @@ private String getConnectionSearchFilter(String userDN,
         StringBuilder connectionSearchFilter = new StringBuilder();
 
         // Add the prefix to the search filter, prefix filter searches for guacConfigGroups with the userDN as the member attribute value
-        connectionSearchFilter.append(""(&(objectClass=guacConfigGroup)(|(member="");
+        connectionSearchFilter.append(""(&(objectClass=guacConfigGroup)"");
+        connectionSearchFilter.append(""(|("");
+        connectionSearchFilter.append(confService.getMemberAttribute());","[{'comment': 'This will need to be escaped with `escapingService.escapeLDAPSearchFilter()`.', 'commenter': 'mike-jumper'}, {'comment': 'Escaped.', 'commenter': 'necouchman'}]"
308,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -257,7 +260,10 @@ private String getConnectionSearchFilter(String userDN,
             LDAPSearchResults userRoleGroupResults = ldapConnection.search(
                 groupBaseDN,
                 LDAPConnection.SCOPE_SUB,
-                ""(&(!(objectClass=guacConfigGroup))(member="" + escapingService.escapeLDAPSearchFilter(userDN) + ""))"",
+                ""(&(!(objectClass=guacConfigGroup))("" 
+                        + confService.getMemberAttribute() ","[{'comment': 'This will need to be escaped with `escapingService.escapeLDAPSearchFilter()`, as well.', 'commenter': 'mike-jumper'}, {'comment': 'Escaped.', 'commenter': 'necouchman'}]"
308,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPGuacamoleProperties.java,"@@ -215,4 +215,11 @@ private LDAPGuacamoleProperties() {}
         public String getName() { return ""ldap-user-attributes""; }
 
     };
+    
+    public static final StringGuacamoleProperty LDAP_MEMBER_ATTRIBUTE = new StringGuacamoleProperty() {","[{'comment': 'Please document.', 'commenter': 'mike-jumper'}, {'comment': 'Wow, not sure why I forgot that.  Documented.', 'commenter': 'necouchman'}]"
308,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -358,5 +358,12 @@ public int getOperationTimeout() throws GuacamoleException {
             LDAPGuacamoleProperties.LDAP_USER_ATTRIBUTES
         );
     }
+    
+    public String getMemberAttribute() throws GuacamoleException {","[{'comment': 'Please document this function.', 'commenter': 'mike-jumper'}, {'comment': 'Documented.', 'commenter': 'necouchman'}]"
309,guacamole/src/main/webapp/app/manage/controllers/manageUserGroupController.js,"@@ -0,0 +1,535 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The controller for editing user groups.
+ */
+angular.module('manage').controller('manageUserGroupController', ['$scope', '$injector',
+        function manageUserGroupController($scope, $injector) {
+            
+    // Required types
+    var ManagementPermissions = $injector.get('ManagementPermissions');
+    var PermissionFlagSet     = $injector.get('PermissionFlagSet');
+    var PermissionSet         = $injector.get('PermissionSet');
+    var UserGroup             = $injector.get('UserGroup');
+
+    // Required services
+    var $location             = $injector.get('$location');
+    var $routeParams          = $injector.get('$routeParams');
+    var $q                    = $injector.get('$q');
+    var authenticationService = $injector.get('authenticationService');
+    var dataSourceService     = $injector.get('dataSourceService');
+    var membershipService     = $injector.get('membershipService');
+    var permissionService     = $injector.get('permissionService');
+    var requestService        = $injector.get('requestService');
+    var schemaService         = $injector.get('schemaService');
+    var userGroupService      = $injector.get('userGroupService');
+    var userService           = $injector.get('userService');
+
+    /**
+     * The identifiers of all data sources currently available to the
+     * authenticated user.
+     *
+     * @type String[]
+     */
+    var dataSources = authenticationService.getAvailableDataSources();
+
+    /**
+     * The username of the current, authenticated user.
+     *
+     * @type String
+     */
+    var currentUsername = authenticationService.getCurrentUsername();
+
+    /**
+     * The identifier of the original user group from which this user group is
+     * being cloned. Only valid if this is a new user group.
+     *
+     * @type String
+     */
+    var cloneSourceIdentifier = $location.search().clone;
+
+    /**
+     * The identifier of the user group being edited. If a new user group is
+     * being created, this will not be defined.
+     *
+     * @type String
+     */
+    var identifier = $routeParams.id;
+
+    /**
+     * The unique identifier of the data source containing the user group being
+     * edited.
+     *
+     * @type String
+     */
+    $scope.dataSource = $routeParams.dataSource;
+
+    /**
+     * All user groups associated with the same identifier as the group being
+     * created or edited, as a map of data source identifier to the UserGroup
+     * object within that data source.
+     *
+     * @type Object.<String, UserGroup>
+     */
+    $scope.userGroups = null;
+
+    /**
+     * The user group being modified.
+     *
+     * @type UserGroup
+     */
+    $scope.userGroup = null;
+
+    /**
+     * All permissions associated with the user group being modified.
+     * 
+     * @type PermissionFlagSet
+     */
+    $scope.permissionFlags = null;
+
+    /**
+     * The set of permissions that will be added to the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsAdded = new PermissionSet();
+
+    /**
+     * The set of permissions that will be removed from the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually removed, and not later manually added before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsRemoved = new PermissionSet();
+
+    /**
+     * The identifiers of all user groups which can be manipulated (all groups
+     * for which the user accessing this interface has UPDATE permission),
+     * whether that means changing the members of those groups or changing the
+     * groups of which those groups are members. If this information has not
+     * yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableGroups = null;
+
+    /**
+     * The identifiers of all users which can be manipulated (all users for
+     * which the user accessing this interface has UPDATE permission), either
+     * through adding those users as a member of the current group or removing
+     * those users from the current group. If this information has not yet been
+     * retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableUsers = null;
+
+    /**
+     * The identifiers of all user groups of which this group is a member,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.parentGroups = null;
+
+    /**
+     * The set of identifiers of all parent user groups to which this group
+     * will be added when saved. Parent groups will only be present in this set
+     * if they are manually added, and not later manually removed before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all parent user groups from which this group
+     * will be removed when saved. Parent groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsRemoved = [];
+
+    /**
+     * The identifiers of all user groups which are members of this group,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.memberGroups = null;
+
+    /**
+     * The set of identifiers of all member user groups which will be added to
+     * this group when saved. Member groups will only be present in this set if
+     * they are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all member user groups which will be removed
+     * from this group when saved. Member groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsRemoved = [];
+
+    /**
+     * The identifiers of all users which are members of this group, taking
+     * into account any users which will be added/removed when saved. If this
+     * information has not yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.memberUsers = null;
+
+    /**
+     * The set of identifiers of all member users which will be added to this
+     * group when saved. Member users will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersAdded = [];
+
+    /**
+     * The set of identifiers of all member users which will be removed from
+     * this group when saved. Member users will only be present in this set if
+     * they are manually removed, and not later manually added before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersRemoved = [];
+
+    /**
+     * For each applicable data source, the management-related actions that the
+     * current user may perform on the user group currently being created
+     * or modified, as a map of data source identifier to the
+     * {@link ManagementPermissions} object describing the actions available
+     * within that data source, or null if the current user's permissions have
+     * not yet been loaded.
+     *
+     * @type Object.<String, ManagementPermissions>
+     */
+    $scope.managementPermissions = null;
+
+    /**
+     * All available user group attributes. This is only the set of attribute
+     * definitions, organized as logical groupings of attributes, not attribute
+     * values.
+     *
+     * @type Form[]
+     */
+    $scope.attributes = null;
+
+    /**
+     * Returns whether critical data has completed being loaded.
+     *
+     * @returns {Boolean}
+     *     true if enough data has been loaded for the user group interface to
+     *     be useful, false otherwise.
+     */
+    $scope.isLoaded = function isLoaded() {
+
+        return $scope.userGroups            !== null
+            && $scope.permissionFlags       !== null
+            && $scope.managementPermissions !== null
+            && $scope.availableGroups       !== null
+            && $scope.availableUsers        !== null
+            && $scope.parentGroups          !== null
+            && $scope.memberGroups          !== null
+            && $scope.memberUsers           !== null
+            && $scope.attributes            !== null;
+
+    };
+
+    /**
+     * Returns whether the current user can edit the identifier of the user
+     * group being edited.
+     *
+     * @returns {Boolean}
+     *     true if the current user can edit the identifier of the user group
+     *     being edited, false otherwise.
+     */
+    $scope.canEditIdentifier = function canEditIdentifier() {
+        return !identifier;
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for making modifications to that
+     * existing user. group","[{'comment': 'Placement of period is ever so slightly off.', 'commenter': 'necouchman'}]"
309,guacamole/src/main/webapp/app/manage/controllers/manageUserGroupController.js,"@@ -0,0 +1,535 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The controller for editing user groups.
+ */
+angular.module('manage').controller('manageUserGroupController', ['$scope', '$injector',
+        function manageUserGroupController($scope, $injector) {
+            
+    // Required types
+    var ManagementPermissions = $injector.get('ManagementPermissions');
+    var PermissionFlagSet     = $injector.get('PermissionFlagSet');
+    var PermissionSet         = $injector.get('PermissionSet');
+    var UserGroup             = $injector.get('UserGroup');
+
+    // Required services
+    var $location             = $injector.get('$location');
+    var $routeParams          = $injector.get('$routeParams');
+    var $q                    = $injector.get('$q');
+    var authenticationService = $injector.get('authenticationService');
+    var dataSourceService     = $injector.get('dataSourceService');
+    var membershipService     = $injector.get('membershipService');
+    var permissionService     = $injector.get('permissionService');
+    var requestService        = $injector.get('requestService');
+    var schemaService         = $injector.get('schemaService');
+    var userGroupService      = $injector.get('userGroupService');
+    var userService           = $injector.get('userService');
+
+    /**
+     * The identifiers of all data sources currently available to the
+     * authenticated user.
+     *
+     * @type String[]
+     */
+    var dataSources = authenticationService.getAvailableDataSources();
+
+    /**
+     * The username of the current, authenticated user.
+     *
+     * @type String
+     */
+    var currentUsername = authenticationService.getCurrentUsername();
+
+    /**
+     * The identifier of the original user group from which this user group is
+     * being cloned. Only valid if this is a new user group.
+     *
+     * @type String
+     */
+    var cloneSourceIdentifier = $location.search().clone;
+
+    /**
+     * The identifier of the user group being edited. If a new user group is
+     * being created, this will not be defined.
+     *
+     * @type String
+     */
+    var identifier = $routeParams.id;
+
+    /**
+     * The unique identifier of the data source containing the user group being
+     * edited.
+     *
+     * @type String
+     */
+    $scope.dataSource = $routeParams.dataSource;
+
+    /**
+     * All user groups associated with the same identifier as the group being
+     * created or edited, as a map of data source identifier to the UserGroup
+     * object within that data source.
+     *
+     * @type Object.<String, UserGroup>
+     */
+    $scope.userGroups = null;
+
+    /**
+     * The user group being modified.
+     *
+     * @type UserGroup
+     */
+    $scope.userGroup = null;
+
+    /**
+     * All permissions associated with the user group being modified.
+     * 
+     * @type PermissionFlagSet
+     */
+    $scope.permissionFlags = null;
+
+    /**
+     * The set of permissions that will be added to the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsAdded = new PermissionSet();
+
+    /**
+     * The set of permissions that will be removed from the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually removed, and not later manually added before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsRemoved = new PermissionSet();
+
+    /**
+     * The identifiers of all user groups which can be manipulated (all groups
+     * for which the user accessing this interface has UPDATE permission),
+     * whether that means changing the members of those groups or changing the
+     * groups of which those groups are members. If this information has not
+     * yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableGroups = null;
+
+    /**
+     * The identifiers of all users which can be manipulated (all users for
+     * which the user accessing this interface has UPDATE permission), either
+     * through adding those users as a member of the current group or removing
+     * those users from the current group. If this information has not yet been
+     * retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableUsers = null;
+
+    /**
+     * The identifiers of all user groups of which this group is a member,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.parentGroups = null;
+
+    /**
+     * The set of identifiers of all parent user groups to which this group
+     * will be added when saved. Parent groups will only be present in this set
+     * if they are manually added, and not later manually removed before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all parent user groups from which this group
+     * will be removed when saved. Parent groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsRemoved = [];
+
+    /**
+     * The identifiers of all user groups which are members of this group,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.memberGroups = null;
+
+    /**
+     * The set of identifiers of all member user groups which will be added to
+     * this group when saved. Member groups will only be present in this set if
+     * they are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all member user groups which will be removed
+     * from this group when saved. Member groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsRemoved = [];
+
+    /**
+     * The identifiers of all users which are members of this group, taking
+     * into account any users which will be added/removed when saved. If this
+     * information has not yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.memberUsers = null;
+
+    /**
+     * The set of identifiers of all member users which will be added to this
+     * group when saved. Member users will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersAdded = [];
+
+    /**
+     * The set of identifiers of all member users which will be removed from
+     * this group when saved. Member users will only be present in this set if
+     * they are manually removed, and not later manually added before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersRemoved = [];
+
+    /**
+     * For each applicable data source, the management-related actions that the
+     * current user may perform on the user group currently being created
+     * or modified, as a map of data source identifier to the
+     * {@link ManagementPermissions} object describing the actions available
+     * within that data source, or null if the current user's permissions have
+     * not yet been loaded.
+     *
+     * @type Object.<String, ManagementPermissions>
+     */
+    $scope.managementPermissions = null;
+
+    /**
+     * All available user group attributes. This is only the set of attribute
+     * definitions, organized as logical groupings of attributes, not attribute
+     * values.
+     *
+     * @type Form[]
+     */
+    $scope.attributes = null;
+
+    /**
+     * Returns whether critical data has completed being loaded.
+     *
+     * @returns {Boolean}
+     *     true if enough data has been loaded for the user group interface to
+     *     be useful, false otherwise.
+     */
+    $scope.isLoaded = function isLoaded() {
+
+        return $scope.userGroups            !== null
+            && $scope.permissionFlags       !== null
+            && $scope.managementPermissions !== null
+            && $scope.availableGroups       !== null
+            && $scope.availableUsers        !== null
+            && $scope.parentGroups          !== null
+            && $scope.memberGroups          !== null
+            && $scope.memberUsers           !== null
+            && $scope.attributes            !== null;
+
+    };
+
+    /**
+     * Returns whether the current user can edit the identifier of the user
+     * group being edited.
+     *
+     * @returns {Boolean}
+     *     true if the current user can edit the identifier of the user group
+     *     being edited, false otherwise.
+     */
+    $scope.canEditIdentifier = function canEditIdentifier() {
+        return !identifier;
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for making modifications to that
+     * existing user. group
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user group
+     *     to load.
+     *
+     * @param {String} identifier
+     *     The unique identifier of the user group to load.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     editing the given user group.
+     */
+    var loadExistingUserGroup = function loadExistingGroup(dataSource, identifier) {
+        return $q.all({
+            userGroups   : dataSourceService.apply(userGroupService.getUserGroup, dataSources, identifier),
+            permissions  : permissionService.getPermissions(dataSource, identifier, true),
+            parentGroups : membershipService.getUserGroups(dataSource, identifier, true),
+            memberGroups : membershipService.getMemberUserGroups(dataSource, identifier),
+            memberUsers  : membershipService.getMemberUsers(dataSource, identifier)
+        })
+        .then(function userGroupDataRetrieved(values) {
+
+            $scope.userGroups = values.userGroups;
+            $scope.userGroup  = values.userGroups[dataSource];
+            $scope.parentGroups = values.parentGroups;
+            $scope.memberGroups = values.memberGroups;
+            $scope.memberUsers = values.memberUsers;
+
+            // Create skeleton user group if user group does not exist
+            if (!$scope.userGroup)
+                $scope.userGroup = new UserGroup({
+                    'identifier' : identifier
+                });
+
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+
+        });
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for cloning that existing user
+     * group.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user group to
+     *     be cloned.
+     *
+     * @param {String} identifier
+     *     The unique identifier of the user group being cloned.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     cloning the given user group.
+     */
+    var loadClonedUserGroup = function loadClonedUserGroup(dataSource, identifier) {
+        return $q.all({
+            userGroups   : dataSourceService.apply(userGroupService.getUserGroup, [dataSource], identifier),
+            permissions  : permissionService.getPermissions(dataSource, identifier, true),
+            parentGroups : membershipService.getUserGroups(dataSource, identifier, true),
+            memberGroups : membershipService.getMemberUserGroups(dataSource, identifier),
+            memberUsers  : membershipService.getMemberUsers(dataSource, identifier)
+        })
+        .then(function userGroupDataRetrieved(values) {
+
+            $scope.userGroups = {};
+            $scope.userGroup  = values.userGroups[dataSource];
+            $scope.parentGroups = values.parentGroups;
+            $scope.parentGroupsAdded = values.parentGroups;
+            $scope.memberGroups = values.memberGroups;
+            $scope.memberGroupsAdded = values.memberGroups;
+            $scope.memberUsers = values.memberUsers;
+            $scope.memberUsersAdded = values.memberUsers;
+
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+            $scope.permissionsAdded = values.permissions;
+
+        });
+    };
+
+    /**
+     * Loads skeleton user group data, preparing the interface for creating a
+     * new user group.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     creating a new user group.
+     */
+    var loadSkeletonUserGroup = function loadSkeletonUserGroup() {
+
+        // No user groups exist regardless of data source if there is no identifier
+        $scope.userGroups = {};
+
+        // Use skeleton user group object with no associated permissions
+        $scope.userGroup = new UserGroup();
+        $scope.parentGroups = [];
+        $scope.memberGroups = [];
+        $scope.memberUsers = [];
+        $scope.permissionFlags = new PermissionFlagSet();
+
+        return $q.resolve();
+
+    };
+
+    /**
+     * Loads the data required for performing the management task requested
+     * through the route parameters given at load time, automatically preparing
+     * the interface for editing an existing user group, cloning an existing
+     * user group, or creating an entirely new user group.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared
+     *     for performing the requested management task.
+     */
+    var loadRequestedUserGroup = function loadRequestedUserGroup() {
+
+        // Pull user group data and permissions if we are editing an existing
+        // user group
+        if (identifier)
+            return loadExistingUserGroup($scope.dataSource, identifier);
+
+        // If we are cloning an existing user group, pull its data instead
+        if (cloneSourceIdentifier)
+            return loadClonedUserGroup($scope.dataSource, cloneSourceIdentifier);
+
+        // If we are creating a new user group, populate skeleton user group data
+        return loadSkeletonUserGroup();
+
+    };
+
+    // Populate interface with requested data
+    $q.all({
+        userGroupData : loadRequestedUserGroup(),
+        permissions   : dataSourceService.apply(permissionService.getEffectivePermissions, dataSources, currentUsername),
+        userGroups    : userGroupService.getUserGroups($scope.dataSource, [ PermissionSet.ObjectPermissionType.UPDATE ]),
+        users         : userService.getUsers($scope.dataSource, [ PermissionSet.ObjectPermissionType.UPDATE ]),
+        attributes    : schemaService.getUserGroupAttributes($scope.dataSource)
+    })
+    .then(function dataReceived(values) {
+
+        $scope.attributes = values.attributes;
+
+        $scope.managementPermissions = {};
+        angular.forEach(dataSources, function deriveManagementPermissions(dataSource) {
+
+            // Determine whether data source contains this user group
+            var exists = (dataSource in $scope.userGroups);
+
+            // Add the identifiers of all modifiable user groups
+            $scope.availableGroups = [];
+            angular.forEach(values.userGroups, function addUserGroupIdentifier(userGroup) {
+                $scope.availableGroups.push(userGroup.identifier);
+            });
+
+            // Add the identifiers of all modifiable users
+            $scope.availableUsers = [];
+            angular.forEach(values.users, function addUserIdentifier(user) {
+                $scope.availableUsers.push(user.username);
+            });
+
+            // Calculate management actions available for this specific group
+            $scope.managementPermissions[dataSource] = ManagementPermissions.fromPermissionSet(
+                    values.permissions[dataSource],
+                    PermissionSet.SystemPermissionType.CREATE_USER_GROUP,
+                    PermissionSet.hasUserGroupPermission,
+                    exists ? identifier : null);
+
+        });
+
+    }, requestService.WARN);
+
+    /**
+     * Returns the URL for the page which manages the user account currently
+     * being edited under the given data source. The given data source need not
+     * be the same as the data source currently selected.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source that the URL is being
+     *     generated for.
+     *
+     * @returns {String}
+     *     The URL for the page which manages the user account currently being
+     *     edited under the given data source.
+     */
+    $scope.getUserGroupURL = function getUserGroupURL(dataSource) {
+        return '/manage/' + encodeURIComponent(dataSource) + '/userGroups/' + encodeURIComponent(identifier || '');
+    };
+
+    /**
+     * Cancels all pending edits, returning to the main list of users.
+     */
+    $scope.returnToUserGroupList = function returnToUserGroupList() {
+        $location.url('/settings/userGroups');
+    };
+
+    /**
+     * Cancels all pending edits, opening an edit page for a new user","[{'comment': '""new user *group*""\r\n\r\nAlso on the line below.', 'commenter': 'necouchman'}]"
309,guacamole/src/main/webapp/app/manage/controllers/manageUserGroupController.js,"@@ -0,0 +1,535 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The controller for editing user groups.
+ */
+angular.module('manage').controller('manageUserGroupController', ['$scope', '$injector',
+        function manageUserGroupController($scope, $injector) {
+            
+    // Required types
+    var ManagementPermissions = $injector.get('ManagementPermissions');
+    var PermissionFlagSet     = $injector.get('PermissionFlagSet');
+    var PermissionSet         = $injector.get('PermissionSet');
+    var UserGroup             = $injector.get('UserGroup');
+
+    // Required services
+    var $location             = $injector.get('$location');
+    var $routeParams          = $injector.get('$routeParams');
+    var $q                    = $injector.get('$q');
+    var authenticationService = $injector.get('authenticationService');
+    var dataSourceService     = $injector.get('dataSourceService');
+    var membershipService     = $injector.get('membershipService');
+    var permissionService     = $injector.get('permissionService');
+    var requestService        = $injector.get('requestService');
+    var schemaService         = $injector.get('schemaService');
+    var userGroupService      = $injector.get('userGroupService');
+    var userService           = $injector.get('userService');
+
+    /**
+     * The identifiers of all data sources currently available to the
+     * authenticated user.
+     *
+     * @type String[]
+     */
+    var dataSources = authenticationService.getAvailableDataSources();
+
+    /**
+     * The username of the current, authenticated user.
+     *
+     * @type String
+     */
+    var currentUsername = authenticationService.getCurrentUsername();
+
+    /**
+     * The identifier of the original user group from which this user group is
+     * being cloned. Only valid if this is a new user group.
+     *
+     * @type String
+     */
+    var cloneSourceIdentifier = $location.search().clone;
+
+    /**
+     * The identifier of the user group being edited. If a new user group is
+     * being created, this will not be defined.
+     *
+     * @type String
+     */
+    var identifier = $routeParams.id;
+
+    /**
+     * The unique identifier of the data source containing the user group being
+     * edited.
+     *
+     * @type String
+     */
+    $scope.dataSource = $routeParams.dataSource;
+
+    /**
+     * All user groups associated with the same identifier as the group being
+     * created or edited, as a map of data source identifier to the UserGroup
+     * object within that data source.
+     *
+     * @type Object.<String, UserGroup>
+     */
+    $scope.userGroups = null;
+
+    /**
+     * The user group being modified.
+     *
+     * @type UserGroup
+     */
+    $scope.userGroup = null;
+
+    /**
+     * All permissions associated with the user group being modified.
+     * 
+     * @type PermissionFlagSet
+     */
+    $scope.permissionFlags = null;
+
+    /**
+     * The set of permissions that will be added to the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsAdded = new PermissionSet();
+
+    /**
+     * The set of permissions that will be removed from the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually removed, and not later manually added before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsRemoved = new PermissionSet();
+
+    /**
+     * The identifiers of all user groups which can be manipulated (all groups
+     * for which the user accessing this interface has UPDATE permission),
+     * whether that means changing the members of those groups or changing the
+     * groups of which those groups are members. If this information has not
+     * yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableGroups = null;
+
+    /**
+     * The identifiers of all users which can be manipulated (all users for
+     * which the user accessing this interface has UPDATE permission), either
+     * through adding those users as a member of the current group or removing
+     * those users from the current group. If this information has not yet been
+     * retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableUsers = null;
+
+    /**
+     * The identifiers of all user groups of which this group is a member,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.parentGroups = null;
+
+    /**
+     * The set of identifiers of all parent user groups to which this group
+     * will be added when saved. Parent groups will only be present in this set
+     * if they are manually added, and not later manually removed before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all parent user groups from which this group
+     * will be removed when saved. Parent groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsRemoved = [];
+
+    /**
+     * The identifiers of all user groups which are members of this group,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.memberGroups = null;
+
+    /**
+     * The set of identifiers of all member user groups which will be added to
+     * this group when saved. Member groups will only be present in this set if
+     * they are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all member user groups which will be removed
+     * from this group when saved. Member groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsRemoved = [];
+
+    /**
+     * The identifiers of all users which are members of this group, taking
+     * into account any users which will be added/removed when saved. If this
+     * information has not yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.memberUsers = null;
+
+    /**
+     * The set of identifiers of all member users which will be added to this
+     * group when saved. Member users will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersAdded = [];
+
+    /**
+     * The set of identifiers of all member users which will be removed from
+     * this group when saved. Member users will only be present in this set if
+     * they are manually removed, and not later manually added before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersRemoved = [];
+
+    /**
+     * For each applicable data source, the management-related actions that the
+     * current user may perform on the user group currently being created
+     * or modified, as a map of data source identifier to the
+     * {@link ManagementPermissions} object describing the actions available
+     * within that data source, or null if the current user's permissions have
+     * not yet been loaded.
+     *
+     * @type Object.<String, ManagementPermissions>
+     */
+    $scope.managementPermissions = null;
+
+    /**
+     * All available user group attributes. This is only the set of attribute
+     * definitions, organized as logical groupings of attributes, not attribute
+     * values.
+     *
+     * @type Form[]
+     */
+    $scope.attributes = null;
+
+    /**
+     * Returns whether critical data has completed being loaded.
+     *
+     * @returns {Boolean}
+     *     true if enough data has been loaded for the user group interface to
+     *     be useful, false otherwise.
+     */
+    $scope.isLoaded = function isLoaded() {
+
+        return $scope.userGroups            !== null
+            && $scope.permissionFlags       !== null
+            && $scope.managementPermissions !== null
+            && $scope.availableGroups       !== null
+            && $scope.availableUsers        !== null
+            && $scope.parentGroups          !== null
+            && $scope.memberGroups          !== null
+            && $scope.memberUsers           !== null
+            && $scope.attributes            !== null;
+
+    };
+
+    /**
+     * Returns whether the current user can edit the identifier of the user
+     * group being edited.
+     *
+     * @returns {Boolean}
+     *     true if the current user can edit the identifier of the user group
+     *     being edited, false otherwise.
+     */
+    $scope.canEditIdentifier = function canEditIdentifier() {
+        return !identifier;
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for making modifications to that
+     * existing user. group
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user group
+     *     to load.
+     *
+     * @param {String} identifier
+     *     The unique identifier of the user group to load.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     editing the given user group.
+     */
+    var loadExistingUserGroup = function loadExistingGroup(dataSource, identifier) {
+        return $q.all({
+            userGroups   : dataSourceService.apply(userGroupService.getUserGroup, dataSources, identifier),
+            permissions  : permissionService.getPermissions(dataSource, identifier, true),
+            parentGroups : membershipService.getUserGroups(dataSource, identifier, true),
+            memberGroups : membershipService.getMemberUserGroups(dataSource, identifier),
+            memberUsers  : membershipService.getMemberUsers(dataSource, identifier)
+        })
+        .then(function userGroupDataRetrieved(values) {
+
+            $scope.userGroups = values.userGroups;
+            $scope.userGroup  = values.userGroups[dataSource];
+            $scope.parentGroups = values.parentGroups;
+            $scope.memberGroups = values.memberGroups;
+            $scope.memberUsers = values.memberUsers;
+
+            // Create skeleton user group if user group does not exist
+            if (!$scope.userGroup)
+                $scope.userGroup = new UserGroup({
+                    'identifier' : identifier
+                });
+
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+
+        });
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for cloning that existing user
+     * group.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user group to
+     *     be cloned.
+     *
+     * @param {String} identifier
+     *     The unique identifier of the user group being cloned.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     cloning the given user group.
+     */
+    var loadClonedUserGroup = function loadClonedUserGroup(dataSource, identifier) {
+        return $q.all({
+            userGroups   : dataSourceService.apply(userGroupService.getUserGroup, [dataSource], identifier),
+            permissions  : permissionService.getPermissions(dataSource, identifier, true),
+            parentGroups : membershipService.getUserGroups(dataSource, identifier, true),
+            memberGroups : membershipService.getMemberUserGroups(dataSource, identifier),
+            memberUsers  : membershipService.getMemberUsers(dataSource, identifier)
+        })
+        .then(function userGroupDataRetrieved(values) {
+
+            $scope.userGroups = {};
+            $scope.userGroup  = values.userGroups[dataSource];
+            $scope.parentGroups = values.parentGroups;
+            $scope.parentGroupsAdded = values.parentGroups;
+            $scope.memberGroups = values.memberGroups;
+            $scope.memberGroupsAdded = values.memberGroups;
+            $scope.memberUsers = values.memberUsers;
+            $scope.memberUsersAdded = values.memberUsers;
+
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+            $scope.permissionsAdded = values.permissions;
+
+        });
+    };
+
+    /**
+     * Loads skeleton user group data, preparing the interface for creating a
+     * new user group.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     creating a new user group.
+     */
+    var loadSkeletonUserGroup = function loadSkeletonUserGroup() {
+
+        // No user groups exist regardless of data source if there is no identifier
+        $scope.userGroups = {};
+
+        // Use skeleton user group object with no associated permissions
+        $scope.userGroup = new UserGroup();
+        $scope.parentGroups = [];
+        $scope.memberGroups = [];
+        $scope.memberUsers = [];
+        $scope.permissionFlags = new PermissionFlagSet();
+
+        return $q.resolve();
+
+    };
+
+    /**
+     * Loads the data required for performing the management task requested
+     * through the route parameters given at load time, automatically preparing
+     * the interface for editing an existing user group, cloning an existing
+     * user group, or creating an entirely new user group.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared
+     *     for performing the requested management task.
+     */
+    var loadRequestedUserGroup = function loadRequestedUserGroup() {
+
+        // Pull user group data and permissions if we are editing an existing
+        // user group
+        if (identifier)
+            return loadExistingUserGroup($scope.dataSource, identifier);
+
+        // If we are cloning an existing user group, pull its data instead
+        if (cloneSourceIdentifier)
+            return loadClonedUserGroup($scope.dataSource, cloneSourceIdentifier);
+
+        // If we are creating a new user group, populate skeleton user group data
+        return loadSkeletonUserGroup();
+
+    };
+
+    // Populate interface with requested data
+    $q.all({
+        userGroupData : loadRequestedUserGroup(),
+        permissions   : dataSourceService.apply(permissionService.getEffectivePermissions, dataSources, currentUsername),
+        userGroups    : userGroupService.getUserGroups($scope.dataSource, [ PermissionSet.ObjectPermissionType.UPDATE ]),
+        users         : userService.getUsers($scope.dataSource, [ PermissionSet.ObjectPermissionType.UPDATE ]),
+        attributes    : schemaService.getUserGroupAttributes($scope.dataSource)
+    })
+    .then(function dataReceived(values) {
+
+        $scope.attributes = values.attributes;
+
+        $scope.managementPermissions = {};
+        angular.forEach(dataSources, function deriveManagementPermissions(dataSource) {
+
+            // Determine whether data source contains this user group
+            var exists = (dataSource in $scope.userGroups);
+
+            // Add the identifiers of all modifiable user groups
+            $scope.availableGroups = [];
+            angular.forEach(values.userGroups, function addUserGroupIdentifier(userGroup) {
+                $scope.availableGroups.push(userGroup.identifier);
+            });
+
+            // Add the identifiers of all modifiable users
+            $scope.availableUsers = [];
+            angular.forEach(values.users, function addUserIdentifier(user) {
+                $scope.availableUsers.push(user.username);
+            });
+
+            // Calculate management actions available for this specific group
+            $scope.managementPermissions[dataSource] = ManagementPermissions.fromPermissionSet(
+                    values.permissions[dataSource],
+                    PermissionSet.SystemPermissionType.CREATE_USER_GROUP,
+                    PermissionSet.hasUserGroupPermission,
+                    exists ? identifier : null);
+
+        });
+
+    }, requestService.WARN);
+
+    /**
+     * Returns the URL for the page which manages the user account currently
+     * being edited under the given data source. The given data source need not
+     * be the same as the data source currently selected.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source that the URL is being
+     *     generated for.
+     *
+     * @returns {String}
+     *     The URL for the page which manages the user account currently being
+     *     edited under the given data source.
+     */
+    $scope.getUserGroupURL = function getUserGroupURL(dataSource) {
+        return '/manage/' + encodeURIComponent(dataSource) + '/userGroups/' + encodeURIComponent(identifier || '');
+    };
+
+    /**
+     * Cancels all pending edits, returning to the main list of users.
+     */
+    $scope.returnToUserGroupList = function returnToUserGroupList() {
+        $location.url('/settings/userGroups');
+    };
+
+    /**
+     * Cancels all pending edits, opening an edit page for a new user
+     * which is prepopulated with the data from the user currently being edited.
+     */
+    $scope.cloneUserGroup = function cloneUserGroup() {
+        $location.path('/manage/' + encodeURIComponent($scope.dataSource) + '/userGroups').search('clone', identifier);
+    };
+
+    /**
+     * Saves the current user, creating a new user or updating the existing
+     * user depending on context, returning a promise which is resolved if the","[{'comment': 'More copy :spaghetti: ??  ""user"" -> ""user group""', 'commenter': 'necouchman'}]"
309,guacamole/src/main/webapp/app/manage/controllers/manageUserGroupController.js,"@@ -0,0 +1,535 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The controller for editing user groups.
+ */
+angular.module('manage').controller('manageUserGroupController', ['$scope', '$injector',
+        function manageUserGroupController($scope, $injector) {
+            
+    // Required types
+    var ManagementPermissions = $injector.get('ManagementPermissions');
+    var PermissionFlagSet     = $injector.get('PermissionFlagSet');
+    var PermissionSet         = $injector.get('PermissionSet');
+    var UserGroup             = $injector.get('UserGroup');
+
+    // Required services
+    var $location             = $injector.get('$location');
+    var $routeParams          = $injector.get('$routeParams');
+    var $q                    = $injector.get('$q');
+    var authenticationService = $injector.get('authenticationService');
+    var dataSourceService     = $injector.get('dataSourceService');
+    var membershipService     = $injector.get('membershipService');
+    var permissionService     = $injector.get('permissionService');
+    var requestService        = $injector.get('requestService');
+    var schemaService         = $injector.get('schemaService');
+    var userGroupService      = $injector.get('userGroupService');
+    var userService           = $injector.get('userService');
+
+    /**
+     * The identifiers of all data sources currently available to the
+     * authenticated user.
+     *
+     * @type String[]
+     */
+    var dataSources = authenticationService.getAvailableDataSources();
+
+    /**
+     * The username of the current, authenticated user.
+     *
+     * @type String
+     */
+    var currentUsername = authenticationService.getCurrentUsername();
+
+    /**
+     * The identifier of the original user group from which this user group is
+     * being cloned. Only valid if this is a new user group.
+     *
+     * @type String
+     */
+    var cloneSourceIdentifier = $location.search().clone;
+
+    /**
+     * The identifier of the user group being edited. If a new user group is
+     * being created, this will not be defined.
+     *
+     * @type String
+     */
+    var identifier = $routeParams.id;
+
+    /**
+     * The unique identifier of the data source containing the user group being
+     * edited.
+     *
+     * @type String
+     */
+    $scope.dataSource = $routeParams.dataSource;
+
+    /**
+     * All user groups associated with the same identifier as the group being
+     * created or edited, as a map of data source identifier to the UserGroup
+     * object within that data source.
+     *
+     * @type Object.<String, UserGroup>
+     */
+    $scope.userGroups = null;
+
+    /**
+     * The user group being modified.
+     *
+     * @type UserGroup
+     */
+    $scope.userGroup = null;
+
+    /**
+     * All permissions associated with the user group being modified.
+     * 
+     * @type PermissionFlagSet
+     */
+    $scope.permissionFlags = null;
+
+    /**
+     * The set of permissions that will be added to the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsAdded = new PermissionSet();
+
+    /**
+     * The set of permissions that will be removed from the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually removed, and not later manually added before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsRemoved = new PermissionSet();
+
+    /**
+     * The identifiers of all user groups which can be manipulated (all groups
+     * for which the user accessing this interface has UPDATE permission),
+     * whether that means changing the members of those groups or changing the
+     * groups of which those groups are members. If this information has not
+     * yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableGroups = null;
+
+    /**
+     * The identifiers of all users which can be manipulated (all users for
+     * which the user accessing this interface has UPDATE permission), either
+     * through adding those users as a member of the current group or removing
+     * those users from the current group. If this information has not yet been
+     * retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableUsers = null;
+
+    /**
+     * The identifiers of all user groups of which this group is a member,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.parentGroups = null;
+
+    /**
+     * The set of identifiers of all parent user groups to which this group
+     * will be added when saved. Parent groups will only be present in this set
+     * if they are manually added, and not later manually removed before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all parent user groups from which this group
+     * will be removed when saved. Parent groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsRemoved = [];
+
+    /**
+     * The identifiers of all user groups which are members of this group,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.memberGroups = null;
+
+    /**
+     * The set of identifiers of all member user groups which will be added to
+     * this group when saved. Member groups will only be present in this set if
+     * they are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all member user groups which will be removed
+     * from this group when saved. Member groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsRemoved = [];
+
+    /**
+     * The identifiers of all users which are members of this group, taking
+     * into account any users which will be added/removed when saved. If this
+     * information has not yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.memberUsers = null;
+
+    /**
+     * The set of identifiers of all member users which will be added to this
+     * group when saved. Member users will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersAdded = [];
+
+    /**
+     * The set of identifiers of all member users which will be removed from
+     * this group when saved. Member users will only be present in this set if
+     * they are manually removed, and not later manually added before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersRemoved = [];
+
+    /**
+     * For each applicable data source, the management-related actions that the
+     * current user may perform on the user group currently being created
+     * or modified, as a map of data source identifier to the
+     * {@link ManagementPermissions} object describing the actions available
+     * within that data source, or null if the current user's permissions have
+     * not yet been loaded.
+     *
+     * @type Object.<String, ManagementPermissions>
+     */
+    $scope.managementPermissions = null;
+
+    /**
+     * All available user group attributes. This is only the set of attribute
+     * definitions, organized as logical groupings of attributes, not attribute
+     * values.
+     *
+     * @type Form[]
+     */
+    $scope.attributes = null;
+
+    /**
+     * Returns whether critical data has completed being loaded.
+     *
+     * @returns {Boolean}
+     *     true if enough data has been loaded for the user group interface to
+     *     be useful, false otherwise.
+     */
+    $scope.isLoaded = function isLoaded() {
+
+        return $scope.userGroups            !== null
+            && $scope.permissionFlags       !== null
+            && $scope.managementPermissions !== null
+            && $scope.availableGroups       !== null
+            && $scope.availableUsers        !== null
+            && $scope.parentGroups          !== null
+            && $scope.memberGroups          !== null
+            && $scope.memberUsers           !== null
+            && $scope.attributes            !== null;
+
+    };
+
+    /**
+     * Returns whether the current user can edit the identifier of the user
+     * group being edited.
+     *
+     * @returns {Boolean}
+     *     true if the current user can edit the identifier of the user group
+     *     being edited, false otherwise.
+     */
+    $scope.canEditIdentifier = function canEditIdentifier() {
+        return !identifier;
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for making modifications to that
+     * existing user. group
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user group
+     *     to load.
+     *
+     * @param {String} identifier
+     *     The unique identifier of the user group to load.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     editing the given user group.
+     */
+    var loadExistingUserGroup = function loadExistingGroup(dataSource, identifier) {
+        return $q.all({
+            userGroups   : dataSourceService.apply(userGroupService.getUserGroup, dataSources, identifier),
+            permissions  : permissionService.getPermissions(dataSource, identifier, true),
+            parentGroups : membershipService.getUserGroups(dataSource, identifier, true),
+            memberGroups : membershipService.getMemberUserGroups(dataSource, identifier),
+            memberUsers  : membershipService.getMemberUsers(dataSource, identifier)
+        })
+        .then(function userGroupDataRetrieved(values) {
+
+            $scope.userGroups = values.userGroups;
+            $scope.userGroup  = values.userGroups[dataSource];
+            $scope.parentGroups = values.parentGroups;
+            $scope.memberGroups = values.memberGroups;
+            $scope.memberUsers = values.memberUsers;
+
+            // Create skeleton user group if user group does not exist
+            if (!$scope.userGroup)
+                $scope.userGroup = new UserGroup({
+                    'identifier' : identifier
+                });
+
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+
+        });
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for cloning that existing user
+     * group.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user group to
+     *     be cloned.
+     *
+     * @param {String} identifier
+     *     The unique identifier of the user group being cloned.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     cloning the given user group.
+     */
+    var loadClonedUserGroup = function loadClonedUserGroup(dataSource, identifier) {
+        return $q.all({
+            userGroups   : dataSourceService.apply(userGroupService.getUserGroup, [dataSource], identifier),
+            permissions  : permissionService.getPermissions(dataSource, identifier, true),
+            parentGroups : membershipService.getUserGroups(dataSource, identifier, true),
+            memberGroups : membershipService.getMemberUserGroups(dataSource, identifier),
+            memberUsers  : membershipService.getMemberUsers(dataSource, identifier)
+        })
+        .then(function userGroupDataRetrieved(values) {
+
+            $scope.userGroups = {};
+            $scope.userGroup  = values.userGroups[dataSource];
+            $scope.parentGroups = values.parentGroups;
+            $scope.parentGroupsAdded = values.parentGroups;
+            $scope.memberGroups = values.memberGroups;
+            $scope.memberGroupsAdded = values.memberGroups;
+            $scope.memberUsers = values.memberUsers;
+            $scope.memberUsersAdded = values.memberUsers;
+
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+            $scope.permissionsAdded = values.permissions;
+
+        });
+    };
+
+    /**
+     * Loads skeleton user group data, preparing the interface for creating a
+     * new user group.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     creating a new user group.
+     */
+    var loadSkeletonUserGroup = function loadSkeletonUserGroup() {
+
+        // No user groups exist regardless of data source if there is no identifier
+        $scope.userGroups = {};
+
+        // Use skeleton user group object with no associated permissions
+        $scope.userGroup = new UserGroup();
+        $scope.parentGroups = [];
+        $scope.memberGroups = [];
+        $scope.memberUsers = [];
+        $scope.permissionFlags = new PermissionFlagSet();
+
+        return $q.resolve();
+
+    };
+
+    /**
+     * Loads the data required for performing the management task requested
+     * through the route parameters given at load time, automatically preparing
+     * the interface for editing an existing user group, cloning an existing
+     * user group, or creating an entirely new user group.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared
+     *     for performing the requested management task.
+     */
+    var loadRequestedUserGroup = function loadRequestedUserGroup() {
+
+        // Pull user group data and permissions if we are editing an existing
+        // user group
+        if (identifier)
+            return loadExistingUserGroup($scope.dataSource, identifier);
+
+        // If we are cloning an existing user group, pull its data instead
+        if (cloneSourceIdentifier)
+            return loadClonedUserGroup($scope.dataSource, cloneSourceIdentifier);
+
+        // If we are creating a new user group, populate skeleton user group data
+        return loadSkeletonUserGroup();
+
+    };
+
+    // Populate interface with requested data
+    $q.all({
+        userGroupData : loadRequestedUserGroup(),
+        permissions   : dataSourceService.apply(permissionService.getEffectivePermissions, dataSources, currentUsername),
+        userGroups    : userGroupService.getUserGroups($scope.dataSource, [ PermissionSet.ObjectPermissionType.UPDATE ]),
+        users         : userService.getUsers($scope.dataSource, [ PermissionSet.ObjectPermissionType.UPDATE ]),
+        attributes    : schemaService.getUserGroupAttributes($scope.dataSource)
+    })
+    .then(function dataReceived(values) {
+
+        $scope.attributes = values.attributes;
+
+        $scope.managementPermissions = {};
+        angular.forEach(dataSources, function deriveManagementPermissions(dataSource) {
+
+            // Determine whether data source contains this user group
+            var exists = (dataSource in $scope.userGroups);
+
+            // Add the identifiers of all modifiable user groups
+            $scope.availableGroups = [];
+            angular.forEach(values.userGroups, function addUserGroupIdentifier(userGroup) {
+                $scope.availableGroups.push(userGroup.identifier);
+            });
+
+            // Add the identifiers of all modifiable users
+            $scope.availableUsers = [];
+            angular.forEach(values.users, function addUserIdentifier(user) {
+                $scope.availableUsers.push(user.username);
+            });
+
+            // Calculate management actions available for this specific group
+            $scope.managementPermissions[dataSource] = ManagementPermissions.fromPermissionSet(
+                    values.permissions[dataSource],
+                    PermissionSet.SystemPermissionType.CREATE_USER_GROUP,
+                    PermissionSet.hasUserGroupPermission,
+                    exists ? identifier : null);
+
+        });
+
+    }, requestService.WARN);
+
+    /**
+     * Returns the URL for the page which manages the user account currently
+     * being edited under the given data source. The given data source need not
+     * be the same as the data source currently selected.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source that the URL is being
+     *     generated for.
+     *
+     * @returns {String}
+     *     The URL for the page which manages the user account currently being
+     *     edited under the given data source.
+     */
+    $scope.getUserGroupURL = function getUserGroupURL(dataSource) {
+        return '/manage/' + encodeURIComponent(dataSource) + '/userGroups/' + encodeURIComponent(identifier || '');
+    };
+
+    /**
+     * Cancels all pending edits, returning to the main list of users.
+     */
+    $scope.returnToUserGroupList = function returnToUserGroupList() {
+        $location.url('/settings/userGroups');
+    };
+
+    /**
+     * Cancels all pending edits, opening an edit page for a new user
+     * which is prepopulated with the data from the user currently being edited.
+     */
+    $scope.cloneUserGroup = function cloneUserGroup() {
+        $location.path('/manage/' + encodeURIComponent($scope.dataSource) + '/userGroups').search('clone', identifier);
+    };
+
+    /**
+     * Saves the current user, creating a new user or updating the existing
+     * user depending on context, returning a promise which is resolved if the
+     * save operation succeeds and rejected if the save operation fails.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved if the save operation succeeds and is
+     *     rejected with an {@link Error} if the save operation fails.
+     */
+    $scope.saveUserGroup = function saveUserGroup() {
+
+        // Save or create the user group, depending on whether the user group exists
+        var saveUserGroupPromise;
+        if ($scope.dataSource in $scope.userGroups)
+            saveUserGroupPromise = userGroupService.saveUserGroup($scope.dataSource, $scope.userGroup);
+        else
+            saveUserGroupPromise = userGroupService.createUserGroup($scope.dataSource, $scope.userGroup);
+
+        return saveUserGroupPromise.then(function savedUserGroup() {
+            return $q.all([
+                permissionService.patchPermissions($scope.dataSource, $scope.userGroup.identifier, $scope.permissionsAdded, $scope.permissionsRemoved, true),
+                membershipService.patchUserGroups($scope.dataSource, $scope.userGroup.identifier, $scope.parentGroupsAdded, $scope.parentGroupsRemoved, true),
+                membershipService.patchMemberUserGroups($scope.dataSource, $scope.userGroup.identifier, $scope.memberGroupsAdded, $scope.memberGroupsRemoved),
+                membershipService.patchMemberUsers($scope.dataSource, $scope.userGroup.identifier, $scope.memberUsersAdded, $scope.memberUsersRemoved)
+            ]);
+        });
+
+    };
+
+    /**
+     * Deletes the current user, returning a promise which is resolved if the","[{'comment': ':spaghetti: user -> user group', 'commenter': 'necouchman'}]"
309,guacamole/src/main/webapp/app/manage/controllers/manageUserGroupController.js,"@@ -0,0 +1,535 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The controller for editing user groups.
+ */
+angular.module('manage').controller('manageUserGroupController', ['$scope', '$injector',
+        function manageUserGroupController($scope, $injector) {
+            
+    // Required types
+    var ManagementPermissions = $injector.get('ManagementPermissions');
+    var PermissionFlagSet     = $injector.get('PermissionFlagSet');
+    var PermissionSet         = $injector.get('PermissionSet');
+    var UserGroup             = $injector.get('UserGroup');
+
+    // Required services
+    var $location             = $injector.get('$location');
+    var $routeParams          = $injector.get('$routeParams');
+    var $q                    = $injector.get('$q');
+    var authenticationService = $injector.get('authenticationService');
+    var dataSourceService     = $injector.get('dataSourceService');
+    var membershipService     = $injector.get('membershipService');
+    var permissionService     = $injector.get('permissionService');
+    var requestService        = $injector.get('requestService');
+    var schemaService         = $injector.get('schemaService');
+    var userGroupService      = $injector.get('userGroupService');
+    var userService           = $injector.get('userService');
+
+    /**
+     * The identifiers of all data sources currently available to the
+     * authenticated user.
+     *
+     * @type String[]
+     */
+    var dataSources = authenticationService.getAvailableDataSources();
+
+    /**
+     * The username of the current, authenticated user.
+     *
+     * @type String
+     */
+    var currentUsername = authenticationService.getCurrentUsername();
+
+    /**
+     * The identifier of the original user group from which this user group is
+     * being cloned. Only valid if this is a new user group.
+     *
+     * @type String
+     */
+    var cloneSourceIdentifier = $location.search().clone;
+
+    /**
+     * The identifier of the user group being edited. If a new user group is
+     * being created, this will not be defined.
+     *
+     * @type String
+     */
+    var identifier = $routeParams.id;
+
+    /**
+     * The unique identifier of the data source containing the user group being
+     * edited.
+     *
+     * @type String
+     */
+    $scope.dataSource = $routeParams.dataSource;
+
+    /**
+     * All user groups associated with the same identifier as the group being
+     * created or edited, as a map of data source identifier to the UserGroup
+     * object within that data source.
+     *
+     * @type Object.<String, UserGroup>
+     */
+    $scope.userGroups = null;
+
+    /**
+     * The user group being modified.
+     *
+     * @type UserGroup
+     */
+    $scope.userGroup = null;
+
+    /**
+     * All permissions associated with the user group being modified.
+     * 
+     * @type PermissionFlagSet
+     */
+    $scope.permissionFlags = null;
+
+    /**
+     * The set of permissions that will be added to the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsAdded = new PermissionSet();
+
+    /**
+     * The set of permissions that will be removed from the user group when the
+     * user group is saved. Permissions will only be present in this set if they
+     * are manually removed, and not later manually added before saving.
+     *
+     * @type PermissionSet
+     */
+    $scope.permissionsRemoved = new PermissionSet();
+
+    /**
+     * The identifiers of all user groups which can be manipulated (all groups
+     * for which the user accessing this interface has UPDATE permission),
+     * whether that means changing the members of those groups or changing the
+     * groups of which those groups are members. If this information has not
+     * yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableGroups = null;
+
+    /**
+     * The identifiers of all users which can be manipulated (all users for
+     * which the user accessing this interface has UPDATE permission), either
+     * through adding those users as a member of the current group or removing
+     * those users from the current group. If this information has not yet been
+     * retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.availableUsers = null;
+
+    /**
+     * The identifiers of all user groups of which this group is a member,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.parentGroups = null;
+
+    /**
+     * The set of identifiers of all parent user groups to which this group
+     * will be added when saved. Parent groups will only be present in this set
+     * if they are manually added, and not later manually removed before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all parent user groups from which this group
+     * will be removed when saved. Parent groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.parentGroupsRemoved = [];
+
+    /**
+     * The identifiers of all user groups which are members of this group,
+     * taking into account any user groups which will be added/removed when
+     * saved. If this information has not yet been retrieved, this will be
+     * null.
+     *
+     * @type String[]
+     */
+    $scope.memberGroups = null;
+
+    /**
+     * The set of identifiers of all member user groups which will be added to
+     * this group when saved. Member groups will only be present in this set if
+     * they are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsAdded = [];
+
+    /**
+     * The set of identifiers of all member user groups which will be removed
+     * from this group when saved. Member groups will only be present in this
+     * set if they are manually removed, and not later manually added before
+     * saving.
+     *
+     * @type String[]
+     */
+    $scope.memberGroupsRemoved = [];
+
+    /**
+     * The identifiers of all users which are members of this group, taking
+     * into account any users which will be added/removed when saved. If this
+     * information has not yet been retrieved, this will be null.
+     *
+     * @type String[]
+     */
+    $scope.memberUsers = null;
+
+    /**
+     * The set of identifiers of all member users which will be added to this
+     * group when saved. Member users will only be present in this set if they
+     * are manually added, and not later manually removed before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersAdded = [];
+
+    /**
+     * The set of identifiers of all member users which will be removed from
+     * this group when saved. Member users will only be present in this set if
+     * they are manually removed, and not later manually added before saving.
+     *
+     * @type String[]
+     */
+    $scope.memberUsersRemoved = [];
+
+    /**
+     * For each applicable data source, the management-related actions that the
+     * current user may perform on the user group currently being created
+     * or modified, as a map of data source identifier to the
+     * {@link ManagementPermissions} object describing the actions available
+     * within that data source, or null if the current user's permissions have
+     * not yet been loaded.
+     *
+     * @type Object.<String, ManagementPermissions>
+     */
+    $scope.managementPermissions = null;
+
+    /**
+     * All available user group attributes. This is only the set of attribute
+     * definitions, organized as logical groupings of attributes, not attribute
+     * values.
+     *
+     * @type Form[]
+     */
+    $scope.attributes = null;
+
+    /**
+     * Returns whether critical data has completed being loaded.
+     *
+     * @returns {Boolean}
+     *     true if enough data has been loaded for the user group interface to
+     *     be useful, false otherwise.
+     */
+    $scope.isLoaded = function isLoaded() {
+
+        return $scope.userGroups            !== null
+            && $scope.permissionFlags       !== null
+            && $scope.managementPermissions !== null
+            && $scope.availableGroups       !== null
+            && $scope.availableUsers        !== null
+            && $scope.parentGroups          !== null
+            && $scope.memberGroups          !== null
+            && $scope.memberUsers           !== null
+            && $scope.attributes            !== null;
+
+    };
+
+    /**
+     * Returns whether the current user can edit the identifier of the user
+     * group being edited.
+     *
+     * @returns {Boolean}
+     *     true if the current user can edit the identifier of the user group
+     *     being edited, false otherwise.
+     */
+    $scope.canEditIdentifier = function canEditIdentifier() {
+        return !identifier;
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for making modifications to that
+     * existing user. group
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user group
+     *     to load.
+     *
+     * @param {String} identifier
+     *     The unique identifier of the user group to load.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     editing the given user group.
+     */
+    var loadExistingUserGroup = function loadExistingGroup(dataSource, identifier) {
+        return $q.all({
+            userGroups   : dataSourceService.apply(userGroupService.getUserGroup, dataSources, identifier),
+            permissions  : permissionService.getPermissions(dataSource, identifier, true),
+            parentGroups : membershipService.getUserGroups(dataSource, identifier, true),
+            memberGroups : membershipService.getMemberUserGroups(dataSource, identifier),
+            memberUsers  : membershipService.getMemberUsers(dataSource, identifier)
+        })
+        .then(function userGroupDataRetrieved(values) {
+
+            $scope.userGroups = values.userGroups;
+            $scope.userGroup  = values.userGroups[dataSource];
+            $scope.parentGroups = values.parentGroups;
+            $scope.memberGroups = values.memberGroups;
+            $scope.memberUsers = values.memberUsers;
+
+            // Create skeleton user group if user group does not exist
+            if (!$scope.userGroup)
+                $scope.userGroup = new UserGroup({
+                    'identifier' : identifier
+                });
+
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+
+        });
+    };
+
+    /**
+     * Loads the data associated with the user group having the given
+     * identifier, preparing the interface for cloning that existing user
+     * group.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user group to
+     *     be cloned.
+     *
+     * @param {String} identifier
+     *     The unique identifier of the user group being cloned.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     cloning the given user group.
+     */
+    var loadClonedUserGroup = function loadClonedUserGroup(dataSource, identifier) {
+        return $q.all({
+            userGroups   : dataSourceService.apply(userGroupService.getUserGroup, [dataSource], identifier),
+            permissions  : permissionService.getPermissions(dataSource, identifier, true),
+            parentGroups : membershipService.getUserGroups(dataSource, identifier, true),
+            memberGroups : membershipService.getMemberUserGroups(dataSource, identifier),
+            memberUsers  : membershipService.getMemberUsers(dataSource, identifier)
+        })
+        .then(function userGroupDataRetrieved(values) {
+
+            $scope.userGroups = {};
+            $scope.userGroup  = values.userGroups[dataSource];
+            $scope.parentGroups = values.parentGroups;
+            $scope.parentGroupsAdded = values.parentGroups;
+            $scope.memberGroups = values.memberGroups;
+            $scope.memberGroupsAdded = values.memberGroups;
+            $scope.memberUsers = values.memberUsers;
+            $scope.memberUsersAdded = values.memberUsers;
+
+            $scope.permissionFlags = PermissionFlagSet.fromPermissionSet(values.permissions);
+            $scope.permissionsAdded = values.permissions;
+
+        });
+    };
+
+    /**
+     * Loads skeleton user group data, preparing the interface for creating a
+     * new user group.
+     *
+     * @returns {Promise}
+     *     A promise which is resolved when the interface has been prepared for
+     *     creating a new user group.
+     */
+    var loadSkeletonUserGroup = function loadSkeletonUserGroup() {
+
+        // No user groups exist regardless of data source if there is no identifier","[{'comment': 'It\'s a little bit unclear what ""if there is no identifier"" means in this context.', 'commenter': 'jmuehlner'}, {'comment': ""Fair enough. I'll reword and amend."", 'commenter': 'mike-jumper'}]"
309,guacamole/src/main/webapp/app/manage/directives/identifierSetEditor.js,"@@ -0,0 +1,299 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive for manipulating a set of objects sharing some common relation
+ * and represented by an array of their identifiers. The specific objects
+ * added or removed are tracked within a separate pair of arrays of
+ * identifiers.
+ */
+angular.module('manage').directive('identifierSetEditor', ['$injector',
+    function identifierSetEditor($injector) {
+
+    var directive = {
+
+        // Element only
+        restrict: 'E',
+        replace: true,
+
+        scope: {
+
+            /**
+             * The translation key of the text which should be displayed within
+             * the main header of the identifier set editor.
+             *
+             * @type String
+             */
+            header : '@',
+
+            /**
+             * The translation key of the text which should be displayed if no
+             * identifiers are currently present within the set.
+             *
+             * @type String
+             */
+            emptyPlaceholder : '@',
+
+            /**
+             * The translation key of the text which should be displayed if no
+             * identifiers are available to be added within the set.
+             *
+             * @type String
+             */
+            unavailablePlaceholder : '@',
+
+            /**
+             * All identifiers which are available to be added to or removed
+             * from the identifier set being edited.
+             *
+             * @type String[]
+             */
+            identifiersAvailable : '=',
+
+            /**
+             * The current state of the identifier set being manipulated. This
+             * array will be modified as changes are made through this
+             * identifier set editor.
+             *
+             * @type String[]
+             */
+            identifiers : '=',
+
+            /**
+             * The set of identifiers that have been added, relative to the
+             * initial state of the identifier set being manipulated.
+             *
+             * @type String[]
+             */
+            identifiersAdded : '=',
+
+            /**
+             * The set of identifiers that have been removed, relative to the
+             * initial state of the identifier set being manipulated.
+             *
+             * @type String[]
+             */
+            identifiersRemoved : '='
+
+        },
+
+        templateUrl: 'app/manage/templates/identifierSetEditor.html'
+
+    };
+
+    directive.controller = ['$scope', function identifierSetEditorController($scope) {
+
+        /**
+         * Whether the full list of available identifiers should be displayed.
+         * Initially, only an abbreviated list of identifiers currently present
+         * is shown.
+         *
+         * @type Boolean
+         */
+        $scope.expanded = false;
+
+        /**
+         * Map of identifiers to boolean flags indicating whether that
+         * identifier is currently present (true) or absent (false). If an
+         * identifier is absent, it may also be absent from this map.
+         *
+         * @type Object.<String, Boolean>
+         */
+        $scope.identifierFlags = {};
+
+        /**
+         * Map of identifiers to boolean flags indicating whether that
+         * identifier is editabl. If an identifier is not editable, it will be","[{'comment': 'Typo: ""editabl"".', 'commenter': 'jmuehlner'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
309,guacamole/src/main/webapp/app/manage/directives/identifierSetEditor.js,"@@ -0,0 +1,299 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive for manipulating a set of objects sharing some common relation
+ * and represented by an array of their identifiers. The specific objects
+ * added or removed are tracked within a separate pair of arrays of
+ * identifiers.
+ */
+angular.module('manage').directive('identifierSetEditor', ['$injector',
+    function identifierSetEditor($injector) {
+
+    var directive = {
+
+        // Element only
+        restrict: 'E',
+        replace: true,
+
+        scope: {
+
+            /**
+             * The translation key of the text which should be displayed within
+             * the main header of the identifier set editor.
+             *
+             * @type String
+             */
+            header : '@',
+
+            /**
+             * The translation key of the text which should be displayed if no
+             * identifiers are currently present within the set.
+             *
+             * @type String
+             */
+            emptyPlaceholder : '@',
+
+            /**
+             * The translation key of the text which should be displayed if no
+             * identifiers are available to be added within the set.
+             *
+             * @type String
+             */
+            unavailablePlaceholder : '@',
+
+            /**
+             * All identifiers which are available to be added to or removed
+             * from the identifier set being edited.
+             *
+             * @type String[]
+             */
+            identifiersAvailable : '=',
+
+            /**
+             * The current state of the identifier set being manipulated. This
+             * array will be modified as changes are made through this
+             * identifier set editor.
+             *
+             * @type String[]
+             */
+            identifiers : '=',
+
+            /**
+             * The set of identifiers that have been added, relative to the
+             * initial state of the identifier set being manipulated.
+             *
+             * @type String[]
+             */
+            identifiersAdded : '=',
+
+            /**
+             * The set of identifiers that have been removed, relative to the
+             * initial state of the identifier set being manipulated.
+             *
+             * @type String[]
+             */
+            identifiersRemoved : '='
+
+        },
+
+        templateUrl: 'app/manage/templates/identifierSetEditor.html'
+
+    };
+
+    directive.controller = ['$scope', function identifierSetEditorController($scope) {
+
+        /**
+         * Whether the full list of available identifiers should be displayed.
+         * Initially, only an abbreviated list of identifiers currently present
+         * is shown.
+         *
+         * @type Boolean
+         */
+        $scope.expanded = false;
+
+        /**
+         * Map of identifiers to boolean flags indicating whether that
+         * identifier is currently present (true) or absent (false). If an
+         * identifier is absent, it may also be absent from this map.
+         *
+         * @type Object.<String, Boolean>
+         */
+        $scope.identifierFlags = {};
+
+        /**
+         * Map of identifiers to boolean flags indicating whether that
+         * identifier is editable. If an identifier is not editable, it will be
+         * absent from this map.
+         *
+         * @type Object.<String, Boolean>
+         */
+        $scope.isEditable = {};
+
+        /**
+         * Adds the given identifier to the given sorted array of identifiers,
+         * preserving the sorted order of the array. If the identifier is
+         * already present, no change is made to the array. The given array
+         * must already be sorted in ascending order.
+         *
+         * @param {String[]} arr
+         *     The sorted array of identifiers to add the given identifier to.
+         *
+         * @param {String} identifier
+         *     The identifier to add to the given array.
+         */
+        var addIdentifier = function addIdentifier(arr, identifier) {
+
+            // Determine location that the identifier should be added to
+            // maintain sorted order
+            var index = _.sortedIndex(arr, identifier);
+
+            // Do not add if already present
+            if (arr[index] === identifier)
+                return;
+
+            // Insert identifier at determined location
+            arr.splice(index, 0, identifier);
+
+        };
+
+        /**
+         * Removes the given identifier from the given sorted array of
+         * identifiers, preserving the sorted order of the array. If the
+         * identifier is already absent, no change is made to the array. The
+         * given array must already be sorted in ascending order.
+         *
+         * @param {String[]} arr
+         *     The sorted array of identifiers to remove the given identifier
+         *     from.
+         *
+         * @param {String} identifier
+         *     The identifier to remove from the given array.
+         *
+         * @returns {Boolean}
+         *     true if the identifier was present in the given array and has
+         *     been removed, false otherwise.
+         */
+        var removeIdentifier = function removeIdentifier(arr, identifier) {
+
+            // Search for identifier in sorted array
+            var index = _.sortedIndexOf(arr, identifier);
+
+            // Nothing to do if already absent
+            if (index === -1)
+                return false;
+
+            // Remove identifier
+            arr.splice(index, 1);
+            return true;
+
+        };
+
+        // Keep identifierFlags up to date when identifiers array is replaced
+        // or initially assigned
+        $scope.$watch('identifiers', function identifiersChanged(identifiers) {
+
+            // Maintain identifiers in sorted order so additions and removals
+            // can be made more efficiently
+            if (identifiers)
+                identifiers.sort();
+
+            // Convert array of identifiers into set of boolean
+            // presence/absence flags
+            $scope.identifierFlags = {};
+            angular.forEach(identifiers, function storeIdentifierFlag(identifier) {
+                $scope.identifierFlags[identifier] = true;
+            });
+
+        });
+
+        // Keep identifierFlags up to date when identifiers array is replaced","[{'comment': ""Looks like this  comment is just copypasta'd from the one above? I don't think it applies here."", 'commenter': 'jmuehlner'}, {'comment': '🍝 😢 ', 'commenter': 'mike-jumper'}, {'comment': ""OK, I've rebased away the pasta."", 'commenter': 'mike-jumper'}]"
309,guacamole/src/main/webapp/app/settings/directives/guacSettingsUserGroups.js,"@@ -0,0 +1,270 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive for managing all user groups in the system.
+ */
+angular.module('settings').directive('guacSettingsUserGroups', ['$injector',
+    function guacSettingsUserGroups($injector) {
+
+    // Required types
+    var ManageableUserGroup = $injector.get('ManageableUserGroup');
+    var PermissionSet       = $injector.get('PermissionSet');
+    var SortOrder           = $injector.get('SortOrder');
+
+    // Required services
+    var $location              = $injector.get('$location');
+    var authenticationService  = $injector.get('authenticationService');
+    var dataSourceService      = $injector.get('dataSourceService');
+    var permissionService      = $injector.get('permissionService');
+    var requestService         = $injector.get('requestService');
+    var userGroupService       = $injector.get('userGroupService');
+
+    var directive = {
+        restrict    : 'E',
+        replace     : true,
+        templateUrl : 'app/settings/templates/settingsUserGroups.html',
+        scope       : {}
+    };
+
+    directive.controller = ['$scope', function settingsUserGroupsController($scope) {
+
+        // Identifier of the current user
+        var currentUsername = authenticationService.getCurrentUsername();
+
+        /**
+         * The identifiers of all data sources accessible by the current
+         * user.
+         *
+         * @type String[]
+         */
+        var dataSources = authenticationService.getAvailableDataSources();
+
+        /**
+         * Map of data source identifiers to all permissions associated
+         * with the current user within that data source, or null if the
+         * user's permissions have not yet been loaded.
+         *
+         * @type Object.<String, PermissionSet>
+         */
+        var permissions = null;
+
+        /**
+         * All visible user groups, along with their corresponding data
+         * sources.
+         *
+         * @type ManageableUserGroup[]
+         */
+        $scope.manageableUserGroups = null;
+
+        /**
+         * Array of all user group properties that are filterable.
+         *
+         * @type String[]
+         */
+        $scope.filteredUserGroupProperties = [
+            'userGroup.identifier'
+        ];
+
+        /**
+         * SortOrder instance which stores the sort order of the listed
+         * user groups.
+         *
+         * @type SortOrder
+         */
+        $scope.order = new SortOrder([
+            'userGroup.identifier'
+        ]);
+
+        /**
+         * Returns whether critical data has completed being loaded.
+         *
+         * @returns {Boolean}
+         *     true if enough data has been loaded for the user group
+         *     interface to be useful, false otherwise.
+         */
+        $scope.isLoaded = function isLoaded() {
+            return $scope.manageableUserGroups !== null;
+        };
+
+        /**
+         * Returns the identifier of the data source that should be used by
+         * default when creating a new user group.
+         *
+         * @return {String}
+         *     The identifier of the data source that should be used by
+         *     default when creating a new user group, or null if user group
+         *     creation is not allowed.
+         */
+        $scope.getDefaultDataSource = function getDefaultDataSource() {
+
+            // Abort if permissions have not yet loaded
+            if (!permissions)
+                return null;
+
+            // For each data source
+            for (var dataSource in permissions) {","[{'comment': ""Doesn't this just iterate over the data sources in non-deterministic order and choose the first one that the user has permission to?\r\n\r\nI guess the description of the function doesn't say HOW it chooses the default data source, but choosing a non-deterministic one from all the available choices seems odd."", 'commenter': 'jmuehlner'}, {'comment': 'Ick. Yeah, this is definitely non-detereministic. The user settings page will have the same issue. I will try to make this reasonable.', 'commenter': 'mike-jumper'}]"
309,guacamole/src/main/webapp/app/rest/types/UserGroup.js,"@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service which defines the UserGroup class.
+ */
+angular.module('rest').factory('UserGroup', [function defineUserGroup() {
+
+    /**
+     * The object returned by REST API calls when representing the data
+     * associated with a user group.
+     *
+     * @constructor
+     * @param {UserGroup|Object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     UserGroup.
+     */
+    var UserGroup = function UserGroup(template) {
+
+        // Use empty object by default
+        template = template || {};
+
+        /**
+         * The name which uniquely identifies this user group.
+         *
+         * @type String
+         */
+        this.identifier = template.identifier;
+
+        /**
+         * Arbitrary name/value pairs which further describe this user group.
+         * The semantics and validity of these attributes are dictated by the
+         * extension which defines them.
+         *
+         * @type Object.<String, String>
+         */
+        this.attributes = {};","[{'comment': 'So these are never expected to be provided to the constructor?  Just checking...', 'commenter': 'necouchman'}, {'comment': ""Not in practice, but it would make sense to do this. I'm not sure what this wasn't done in the first place."", 'commenter': 'mike-jumper'}]"
309,guacamole/src/main/webapp/app/settings/directives/guacSettingsUserGroups.js,"@@ -0,0 +1,272 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive for managing all user groups in the system.
+ */
+angular.module('settings').directive('guacSettingsUserGroups', ['$injector',
+    function guacSettingsUserGroups($injector) {
+
+    // Required types
+    var ManageableUserGroup = $injector.get('ManageableUserGroup');
+    var PermissionSet       = $injector.get('PermissionSet');
+    var SortOrder           = $injector.get('SortOrder');
+
+    // Required services
+    var $location              = $injector.get('$location');
+    var authenticationService  = $injector.get('authenticationService');
+    var dataSourceService      = $injector.get('dataSourceService');
+    var permissionService      = $injector.get('permissionService');
+    var requestService         = $injector.get('requestService');
+    var userGroupService       = $injector.get('userGroupService');
+
+    var directive = {
+        restrict    : 'E',
+        replace     : true,
+        templateUrl : 'app/settings/templates/settingsUserGroups.html',
+        scope       : {}
+    };
+
+    directive.controller = ['$scope', function settingsUserGroupsController($scope) {
+
+        // Identifier of the current user
+        var currentUsername = authenticationService.getCurrentUsername();
+
+        /**
+         * The identifiers of all data sources accessible by the current
+         * user.
+         *
+         * @type String[]
+         */
+        var dataSources = authenticationService.getAvailableDataSources();
+
+        /**
+         * Map of data source identifiers to all permissions associated
+         * with the current user within that data source, or null if the
+         * user's permissions have not yet been loaded.
+         *
+         * @type Object.<String, PermissionSet>
+         */
+        var permissions = null;
+
+        /**
+         * All visible user groups, along with their corresponding data
+         * sources.
+         *
+         * @type ManageableUserGroup[]
+         */
+        $scope.manageableUserGroups = null;
+
+        /**
+         * Array of all user group properties that are filterable.
+         *
+         * @type String[]
+         */
+        $scope.filteredUserGroupProperties = [
+            'userGroup.identifier'
+        ];
+
+        /**
+         * SortOrder instance which stores the sort order of the listed
+         * user groups.
+         *
+         * @type SortOrder
+         */
+        $scope.order = new SortOrder([
+            'userGroup.identifier'
+        ]);
+
+        /**
+         * Returns whether critical data has completed being loaded.
+         *
+         * @returns {Boolean}
+         *     true if enough data has been loaded for the user group
+         *     interface to be useful, false otherwise.
+         */
+        $scope.isLoaded = function isLoaded() {
+            return $scope.manageableUserGroups !== null;
+        };
+
+        /**
+         * Returns the identifier of the data source that should be used by
+         * default when creating a new user group.
+         *
+         * @return {String}
+         *     The identifier of the data source that should be used by
+         *     default when creating a new user group, or null if user group
+         *     creation is not allowed.
+         */
+        $scope.getDefaultDataSource = function getDefaultDataSource() {
+
+            // Abort if permissions have not yet loaded
+            if (!permissions)
+                return null;
+
+            // For each data source
+            var dataSources = _.keys(permissions).sort();
+            for (var i = 0; i < dataSources.length; i++) {
+
+                // Retrieve corresponding permission set
+                var dataSource = dataSources[i];
+                var permissionSet = permissions[dataSource];
+
+                // Can create user groups if adminstrator or have explicit permission
+                if (PermissionSet.hasSystemPermission(permissionSet, PermissionSet.SystemPermissionType.ADMINISTER)
+                 || PermissionSet.hasSystemPermission(permissionSet, PermissionSet.SystemPermissionType.CREATE_USER_GROUP))
+                    return dataSource;
+
+            }
+
+            // No data sources allow user group creation
+            return null;
+
+        };
+
+        /**
+         * Returns whether the current user can create new user groups
+         * within at least one data source.
+         *
+         * @return {Boolean}
+         *     true if the current user can create new user groups within at
+         *     least one data source, false otherwise.
+         */
+        $scope.canCreateUserGroups = function canCreateUserGroups() {
+            return $scope.getDefaultDataSource() !== null;
+        };
+
+        /**
+         * Returns whether the current user can create new user groups or
+         * make changes to existing user groups within at least one data
+         * source. The user group management interface as a whole is useless
+         * if this function returns false.
+         *
+         * @return {Boolean}
+         *     true if the current user can create new user groups or make
+         *     changes to existing user groups within at least one data
+         *     source, false otherwise.
+         */
+        var canManageUserGroups = function canManageUserGroups() {
+
+            // Abort if permissions have not yet loaded
+            if (!permissions)
+                return false;
+
+            // Creating user groups counts as management
+            if ($scope.canCreateUserGroups())
+                return true;
+
+            // For each data source
+            for (var dataSource in permissions) {
+
+                // Retrieve corresponding permission set
+                var permissionSet = permissions[dataSource];
+
+                // Can manage user groups if granted explicit update or delete
+                if (PermissionSet.hasUserGroupPermission(permissionSet, PermissionSet.ObjectPermissionType.UPDATE)
+                 || PermissionSet.hasUserGroupPermission(permissionSet, PermissionSet.ObjectPermissionType.DELETE))
+                    return true;
+
+            }
+
+            // No data sources allow management of user groups
+            return false;
+
+        };
+
+        /**
+         * Sets the displayed list of user groups. If any user groups are
+         * already shown within the interface, those user groups are replaced
+         * with the given user groups.
+         *
+         * @param {Object.<String, PermissionSet>} permissions
+         *     A map of data source identifiers to all permissions associated
+         *     with the current user within that data source.
+         *
+         * @param {Object.<String, Object.<String, UserGroup>>} userGroups
+         *     A map of all user groups which should be displayed, where each
+         *     key is the data source identifier from which the user groups
+         *     were retrieved and each value is a map of user group identifiers
+         *     to their corresponding @link{UserGroup} objects.
+         */
+        var setDisplayedUserGroups = function setDisplayedUserGroups(permissions, userGroups) {
+
+            var addedUserGroups = {};
+            $scope.manageableUserGroups = [];
+
+            // For each user in each data source","[{'comment': 'For each user or each user group?  Looks like this is looping through user groups in data sources....', 'commenter': 'necouchman'}]"
309,guacamole/src/main/webapp/app/manage/templates/manageUserGroup.html,"@@ -0,0 +1,102 @@
+","[{'comment': ""Nope. I'll get rid of it."", 'commenter': 'mike-jumper'}, {'comment': 'Extra blank removed. GitHub has unfortunately now reassigned this comment to the intentional blank line following the first `<div>`, but the original issue should be addressed.', 'commenter': 'mike-jumper'}]"
309,guacamole/src/main/webapp/app/rest/services/membershipService.js,"@@ -0,0 +1,385 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service for operating on user group memberships via the REST API.
+ */
+angular.module('rest').factory('membershipService', ['$injector',
+        function membershipService($injector) {
+
+    // Required services
+    var requestService        = $injector.get('requestService');
+    var authenticationService = $injector.get('authenticationService');
+    var cacheService          = $injector.get('cacheService');
+    
+    // Required types
+    var RelatedObjectPatch = $injector.get('RelatedObjectPatch');
+
+    var service = {};
+
+    /**
+     * Creates a new array of patches which represents the given changes to an
+     * arbitrary set of objects sharing some common relation.
+     *
+     * @param {String[]} [identifiersToAdd]
+     *     The identifiers of all objects which should be added to the
+     *     relation, if any.
+     *
+     * @param {String[]} [identifiersToRemove]
+     *     The identifiers of all objects which should be removed from the
+     *     relation, if any.
+     *
+     * @returns {RelatedObjectPatch[]}
+     *     A new array of patches which represents the given changes.
+     */
+    var getRelatedObjectPatch = function getRelatedObjectPatch(identifiersToAdd, identifiersToRemove) {
+
+        var patch = [];
+
+        angular.forEach(identifiersToAdd, function addIdentifier(identifier) {
+            patch.push(new RelatedObjectPatch({
+                op    : RelatedObjectPatch.Operation.ADD,
+                value : identifier
+            }));
+        });
+
+        angular.forEach(identifiersToRemove, function removeIdentifier(identifier) {
+            patch.push(new RelatedObjectPatch({
+                op    : RelatedObjectPatch.Operation.REMOVE,
+                value : identifier
+            }));
+        });
+
+        return patch;
+
+    };
+
+    /**
+     * Returns the URL for the REST resource most appropriate for accessing
+     * the parent user groups of the user or group having the given identifier.
+     *
+     * It is important to note that a particular data source can authenticate
+     * and provide user groups for a user, even if that user does not exist
+     * within that data source (and thus cannot be found beneath
+     * ""api/session/data/{dataSource}/users"")
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user or
+     *     group whose parent user groups should be retrieved. This identifier
+     *     corresponds to an AuthenticationProvider within the Guacamole web
+     *     application.
+     *
+     * @param {String} identifier
+     *     The identifier of the user or group for which the URL of the proper
+     *     REST resource should be derived.
+     *
+     * @param {Boolean} [group]
+     *     Whether the provided identifier refers to a user group. If false or
+     *     omitted, the identifier given is assumed to refer to a user.
+     *
+     * @returns {String}
+     *     The URL for the REST resource representing the parent user groups of
+     *     the user or group having the given identifier.
+     */
+    var getUserGroupsResourceURL = function getUserGroupsResourceURL(dataSource, identifier, group) {
+
+        // Create base URL for data source
+        var base = 'api/session/data/' + encodeURIComponent(dataSource);
+
+        // Access parent groups directly (there is no ""self"" for user groups
+        // as there is for users)
+        if (group)
+            return base + '/userGroups/' + encodeURIComponent(identifier) + '/userGroups';
+
+        // If the username is that of the current user, do not rely on the
+        // user actually existing (they may not). Access their parent groups via
+        // ""self"" rather than the collection of defined users.
+        if (identifier === authenticationService.getCurrentUsername())
+            return base + '/self/userGroups';
+
+        // Otherwise, the user must exist for their parent groups to be
+        // accessible. Use the collection of defined users.
+        return base + '/users/' + encodeURIComponent(identifier) + '/userGroups';
+
+    };
+
+    /**
+     * Makes a request to the REST API to retrieve the identifiers of all
+     * parent user groups of which a given user or group is a member, returning
+     * a promise that can be used for processing the results of the call.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user or
+     *     group whose parent user groups should be retrieved. This identifier
+     *     corresponds to an AuthenticationProvider within the Guacamole web
+     *     application.
+     *
+     * @param {String} identifier
+     *     The identifier of the user or group to retrieve the parent user
+     *     groups of.
+     *
+     * @param {Boolean} [group]
+     *     Whether the provided identifier refers to a user group. If false or
+     *     omitted, the identifier given is assumed to refer to a user.
+     *
+     * @returns {Promise.<String[]>}
+     *     A promise for the HTTP call which will resolve with an array
+     *     containing the requested identifiers upon success.
+     */
+    service.getUserGroups = function getUserGroups(dataSource, identifier, group) {
+
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+
+        // Retrieve parent groups
+        return requestService({
+            cache   : cacheService.users,
+            method  : 'GET',
+            url     : getUserGroupsResourceURL(dataSource, identifier, group),
+            params  : httpParameters
+        });
+
+    };
+
+    /**
+     * Makes a request to the REST API to modify the parent user groups of
+     * which a given user or group is a member, returning a promise that can be
+     * used for processing the results of the call.
+     *
+     * @param {String} dataSource
+     *     The unique identifier of the data source containing the user or
+     *     group whose parent user groups should be modified. This identifier
+     *     corresponds to an AuthenticationProvider within the Guacamole web
+     *     application.
+     *
+     * @param {String} identifier
+     *     The identifier of the user or group to modify the parent user
+     *     groups of.
+     *
+     * @param {String[]} [addToUserGroups]
+     *     The identifier of all parent user groups to which the given user or
+     *     group should be added as a member, if any.
+     *
+     * @param {String[]} [removeFromUserGroups]
+     *     The identifier of all parent user groups from which the given member
+     *     user or group should be removed, if any.
+     *
+     * @param {Boolean} [group]
+     *     Whether the provided identifier refers to a user group. If false or
+     *     omitted, the identifier given is assumed to refer to a user.
+     *
+     * @returns {Promise}
+     *     A promise for the HTTP call which will succeed if and only if the
+     *     patch operation is successful.
+     */
+    service.patchUserGroups = function patchUserGroups(dataSource, identifier,
+            addToUserGroups, removeFromUserGroups, group) {
+
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+
+        // Update parent user groups
+        return requestService({
+            method  : 'PATCH',
+            url     : getUserGroupsResourceURL(dataSource, identifier, group),
+            params  : httpParameters,
+            data    : getRelatedObjectPatch(addToUserGroups, removeFromUserGroups)
+        })
+
+        // Clear the cache
+        .then(function parentUserGroupsChanged(){
+            cacheService.users.removeAll();
+        });
+
+    };
+
+    /**
+     * Makes a request to the REST API to retrieve the identifiers of all
+     * users which are members of the given user group, returning a promise","[{'comment': ""That aspect is intentionally left to the implementation. While there is a similar call for retrieving permissions which explicitly requires permission inheritance to be taken into account, no assumption is made in general on how that group inheritance is implemented, nor whether it's taken into account here.\r\n\r\nIn this case, if an extension wants to expose inherited groups at this level, they can. The only requirement is that they make the set of groups mutable if the current user has permission to make changes to those memberships."", 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/pom.xml,"@@ -109,33 +109,33 @@
         <dependency>
             <groupId>org.mybatis</groupId>
             <artifactId>mybatis</artifactId>
-            <version>3.2.8</version>
+            <version>3.4.6</version>","[{'comment': ""When I was doing some playing around in the past with updating this is seems like one of these versions may have required a higher target version of Java than 1.6.  Probably worth double-checking to make sure we're still good with 1.6 with all these updates."", 'commenter': 'necouchman'}, {'comment': ""On that note, public updates for Java 1.6 ended in 2013, and public updates for 1.7 ended in 2015. \r\n\r\nI think maybe it's time to reevaluate our reasons for sticking to 1.6. It's certainly end of life at this point, and upgrading to 1.8 would help us have to worry less about things like this. Are there really a lot of users running Guacamole in environments where the highest available Java version is 1.6?\r\n\r\nAs far as Mybatis 3.46 goes, I had a look at the project POM and the docs, and it's actually not obvious to me how to tell if this supports 1.6 without just building the whole thing and attempting to run it in a 1.6 environment. \r\n\r\nMaybe we shouldn't care though..."", 'commenter': 'jmuehlner'}, {'comment': ""1.8 may be worth considering across the board. The old discussion is here:\r\n\r\nhttps://lists.apache.org/thread.html/874edd3a19b0cf0302cbb56f2406f6050cf4296dc31703aa34b30be6@%3Cdev.guacamole.apache.org%3E\r\n\r\nI'm still antsy about requiring newer Java for guacamole-common, but we should be safe for the other parts of the webapp and stack."", 'commenter': 'mike-jumper'}, {'comment': 'Looking at the POM file it looks like there are certain features of this version of MyBatis that aren\'t usable with older versions of Java.  There\'s a block toward the bottom that excludes certain code file from the compile when the version is 1.6 and a block that excludes for 1.7.  It\'s possible I was using a feature that isn\'t available in 1.6, even if the overall project is compatible with it.  It also looks like the test suite requires at least 1.7, so maybe that is what I was seeing before.\r\n\r\nI definitely am more inclined toward moving on to 1.7 or 1.8 given the age of 1.6 (and even 1.7), but I also understand maintaining compatibility as much as possible.  However, it does seem like several aspects of the web app are using some features that require 1.7 or 1.8, and there are also some Java syntax features that we would probably benefit from by moving on to the higher versions.  Two that come to mind are ""try with resources"" and the ability to handle multiple exception types in a single `catch` block.', 'commenter': 'necouchman'}, {'comment': 'We could switch everything to 1.8 for the 1.0 release. If there are concerns there may be hidden things within MyBatis requiring 1.7+, and considering 1.0 is a major release, now might be the time.\r\n\r\nWell ... ""now"" as in a separate PR with a new JIRA issue associated with 1.0.0.', 'commenter': 'mike-jumper'}, {'comment': 'Sounds good to me - it does seem like a good time to sneak this in.  By ""everything"" I assume you mean everything except the base guacamole-common stuff?', 'commenter': 'necouchman'}, {'comment': 'Yep.', 'commenter': 'mike-jumper'}, {'comment': 'As of #324 ([GUACAMOLE-635](https://issues.apache.org/jira/browse/GUACAMOLE-635)), everything except guacamole-common has been bumped to Java 1.8.', 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ObjectRelationMapper.java,"@@ -0,0 +1,126 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.base;
+
+import java.util.Collection;
+import java.util.Set;
+import org.apache.guacamole.auth.jdbc.user.UserModel;
+import org.apache.ibatis.annotations.Param;
+
+/**
+ * Mapper for the relations represented by a particular RelatedObjectSet
+ * implementation.
+ *
+ * @param <ParentModelType>
+ *     The underlying database model of the object on the parent side of the
+ *     one-to-many relationship represented by the RelatedObjectSet mapped by
+ *     this ObjectRelationMapper.
+ */
+public interface ObjectRelationMapper<ParentModelType extends ObjectModel> {
+
+    /**
+     * Inserts rows as necessary to establish the one-to-many relationship
+     * represented by the RelatedObjectSet between the given parent and
+     * children. If the relation for any parent/child pair is already present,
+     * no attempt is made to insert a new row for that relation.
+     *
+     * @param parent
+     *     The model of the object on the parent side of the one-to-many
+     *     relationship represented by the RelatedObjectSet.
+     *
+     * @param children
+     *     The identifiers of the objects on the child side of the one-to-many
+     *     relationship represented by the RelatedObjectSet.
+     *
+     * @return
+     *     The number of rows inserted.
+     */
+    int insert(@Param(""parent"") ParentModelType parent,
+            @Param(""children"") Collection<String> children);
+
+    /**
+     * Deletes rows as necessary to establish the one-to-many relationship","[{'comment': 'Is ""to establish"" the correct language, here?  Or is this to modify/remove one-to-many relationships?', 'commenter': 'necouchman'}, {'comment': ""I'll reword to be a bit clearer."", 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/permission/SystemPermissionService.java,"@@ -76,23 +78,25 @@ protected SystemPermissionModel getModelInstance(final ModeledUser targetUser,
 
     @Override
     public SystemPermissionSet getPermissionSet(ModeledAuthenticatedUser user,
-            ModeledUser targetUser) throws GuacamoleException {
+            ModeledPermissions<? extends EntityModel> targetEntity,
+            Set<String> effectiveGroups) throws GuacamoleException {
 
         // Create permission set for requested user","[{'comment': 'user -> entity\r\n?', 'commenter': 'necouchman'}, {'comment': 'Correct. Will fix.', 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/permission/SystemPermissionService.java,"@@ -124,39 +129,40 @@ public void deletePermissions(ModeledAuthenticatedUser user, ModeledUser targetU
     }
 
     /**
-     * Retrieves the permission of the given type associated with the given
-     * user, if it exists. If no such permission exists, null is returned.
+     * Retrieves whether the permission of the given type has been granted to
+     * the given entity. Permission inheritance through group membership is
+     * taken into account.
      *
      * @param user
      *     The user retrieving the permission.
      *
-     * @param targetUser
-     *     The user associated with the permission to be retrieved.
+     * @param targetEntity
+     *     The entity associated with the permission to be retrieved.
      * 
      * @param type
      *     The type of permission to retrieve.
      *
+     * @param effectiveGroups
+     *     The identifiers of all groups that should be taken into account
+     *     when determining the permissions effectively granted to the user. If
+     *     no groups are given, only permissions directly granted to the user
+     *     will be used.
+     *
      * @return
-     *     The permission of the given type associated with the given user, or
-     *     null if no such permission exists.
+     *     true if permission of the given type has been granted to the given
+     *     user, false otherwise.
      *
      * @throws GuacamoleException
      *     If an error occurs while retrieving the requested permission.
      */
-    public SystemPermission retrievePermission(ModeledAuthenticatedUser user,
-            ModeledUser targetUser, SystemPermission.Type type) throws GuacamoleException {
+    public boolean hasPermission(ModeledAuthenticatedUser user,
+            ModeledPermissions<? extends EntityModel> targetEntity,
+            SystemPermission.Type type, Set<String> effectiveGroups)
+            throws GuacamoleException {
 
         // Retrieve permissions only if allowed
-        if (canReadPermissions(user, targetUser)) {
-
-            // Read permission from database, return null if not found
-            SystemPermissionModel model = getPermissionMapper().selectOne(targetUser.getModel(), type);
-            if (model == null)
-                return null;
-
-            return getPermissionInstance(model);
-
-        }
+        if (canReadPermissions(user, targetEntity))
+            return getPermissionMapper().selectOne(targetEntity.getModel(), type, effectiveGroups) != null;
 
         // User cannot read this user's permissions","[{'comment': ""user's -> entity's"", 'commenter': 'necouchman'}, {'comment': 'Good catch.', 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/usergroup/ModeledUserGroup.java,"@@ -0,0 +1,212 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.usergroup;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.base.ModeledPermissions;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.form.BooleanField;
+import org.apache.guacamole.form.Field;
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.net.auth.RelatedObjectSet;
+import org.apache.guacamole.net.auth.UserGroup;
+
+/**
+ * An implementation of the UserGroup object which is backed by a database model.
+ */
+public class ModeledUserGroup extends ModeledPermissions<UserGroupModel>
+        implements UserGroup {
+
+    /**
+     * The name of the attribute which controls whether a user group is
+     * disabled.
+     */
+    public static final String DISABLED_ATTRIBUTE_NAME = ""disabled"";
+
+    /**
+     * All attributes related to restricting user groups, within a logical
+     * form.
+     */
+    public static final Form ACCOUNT_RESTRICTIONS = new Form(""restrictions"", Arrays.<Field>asList(
+        new BooleanField(DISABLED_ATTRIBUTE_NAME, ""true"")
+    ));
+
+    /**
+     * All possible attributes of user groups organized as individual,
+     * logical forms.
+     */
+    public static final Collection<Form> ATTRIBUTES = Collections.unmodifiableCollection(Arrays.asList(
+        ACCOUNT_RESTRICTIONS
+    ));
+
+    /**
+     * The names of all attributes which are explicitly supported by this
+     * extension's UserGroup objects.
+     */
+    public static final Set<String> ATTRIBUTE_NAMES =
+            Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(
+                DISABLED_ATTRIBUTE_NAME
+            )));
+
+    /**
+     * Provider for RelatedObjectSets containing the user groups of which this
+     * user group is a member.
+     */
+    @Inject
+    private Provider<UserGroupParentUserGroupSet> parentUserGroupSetProvider;
+
+    /**
+     * Provider for RelatedObjectSets containing the users that are members of
+     * this user group.
+     */
+    @Inject
+    private Provider<UserGroupMemberUserSet> memberUserSetProvider;
+
+    /**
+     * Provider for RelatedObjectSets containing the user groups that are
+     * members of this user group.
+     */
+    @Inject
+    private Provider<UserGroupMemberUserGroupSet> memberUserGroupSetProvider;
+
+    /**
+     * Whether attributes which control access restrictions should be exposed
+     * via getAttributes() or allowed to be set via setAttributes().
+     */
+    private boolean exposeRestrictedAttributes = false;
+
+    /**
+     * Initializes this ModeledUserGroup, associating it with the current
+     * authenticated user and populating it with data from the given user group
+     * model.
+     *
+     * @param currentUser
+     *     The user that created or retrieved this object.
+     *
+     * @param model
+     *     The backing model object.
+     *
+     * @param exposeRestrictedAttributes
+     *     Whether attributes which control access restrictions should be
+     *     exposed via getAttributes() or allowed to be set via
+     *     setAttributes().
+     */
+    public void init(ModeledAuthenticatedUser currentUser, UserGroupModel model,
+            boolean exposeRestrictedAttributes) {
+        super.init(currentUser, model);
+        this.exposeRestrictedAttributes = exposeRestrictedAttributes;
+    }
+
+    /**
+     * Creates a new, empty ModeledUserGroup.
+     */
+    public ModeledUserGroup() {","[{'comment': ""For consistency's sake, should this constructor be above the `init()` method?  I think that's how it's done elsewhere in the code..."", 'commenter': 'necouchman'}, {'comment': ""Sure. In fact, may as well delete the constructor entirely. There's no need to explicitly provide an empty constructor without any parameters if there is no other constructor _with_ parameters. We can rely on the default constructor."", 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/usergroup/UserGroupService.java,"@@ -0,0 +1,189 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.usergroup;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Collection;
+import java.util.Collections;
+import org.apache.guacamole.auth.jdbc.base.ModeledDirectoryObjectMapper;
+import org.apache.guacamole.auth.jdbc.base.ModeledDirectoryObjectService;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.base.EntityMapper;
+import org.apache.guacamole.auth.jdbc.permission.ObjectPermissionMapper;
+import org.apache.guacamole.auth.jdbc.permission.UserGroupPermissionMapper;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.net.auth.UserGroup;
+import org.apache.guacamole.net.auth.permission.ObjectPermission;
+import org.apache.guacamole.net.auth.permission.ObjectPermissionSet;
+import org.apache.guacamole.net.auth.permission.SystemPermission;
+import org.apache.guacamole.net.auth.permission.SystemPermissionSet;
+
+/**
+ * Service which provides convenience methods for creating, retrieving, and
+ * manipulating user groups.
+ */
+public class UserGroupService extends ModeledDirectoryObjectService<ModeledUserGroup, UserGroup, UserGroupModel> {
+    
+    /**
+     * Mapper for creating/deleting entities.
+     */
+    @Inject
+    private EntityMapper entityMapper;
+
+    /**
+     * Mapper for accessing user groups.
+     */
+    @Inject
+    private UserGroupMapper userGroupMapper;
+
+    /**
+     * Mapper for manipulating user group permissions.
+     */
+    @Inject
+    private UserGroupPermissionMapper userGroupPermissionMapper;
+
+    /**
+     * Provider for creating user groups.
+     */
+    @Inject
+    private Provider<ModeledUserGroup> userGroupProvider;
+
+    @Override
+    protected ModeledDirectoryObjectMapper<UserGroupModel> getObjectMapper() {
+        return userGroupMapper;
+    }
+
+    @Override
+    protected ObjectPermissionMapper getPermissionMapper() {
+        return userGroupPermissionMapper;
+    }
+
+    @Override
+    protected ModeledUserGroup getObjectInstance(ModeledAuthenticatedUser currentUser,
+            UserGroupModel model) throws GuacamoleException {
+
+        boolean exposeRestrictedAttributes;
+
+        // Expose restricted attributes if the user group does not yet exist
+        if (model.getObjectID() == null)
+            exposeRestrictedAttributes = true;
+
+        // Otherwise, expose restricted attributes only if the user has
+        // ADMINISTER permission
+        else
+            exposeRestrictedAttributes = hasObjectPermission(currentUser,
+                    model.getIdentifier(), ObjectPermission.Type.ADMINISTER);
+
+        // Produce ModeledUserGroup exposing only those attributes for which the
+        // current user has permission
+        ModeledUserGroup group = userGroupProvider.get();
+        group.init(currentUser, model, exposeRestrictedAttributes);
+        return group;
+
+    }
+
+    @Override
+    protected UserGroupModel getModelInstance(ModeledAuthenticatedUser currentUser,
+            final UserGroup object) throws GuacamoleException {
+
+        // Create new ModeledUserGroup backed by blank model
+        UserGroupModel model = new UserGroupModel();
+        ModeledUserGroup group = getObjectInstance(currentUser, model);
+
+        // Set model contents through ModeledUser, copying the provided group
+        group.setIdentifier(object.getIdentifier());
+        group.setAttributes(object.getAttributes());
+
+        return model;
+        
+    }
+
+    @Override
+    protected boolean hasCreatePermission(ModeledAuthenticatedUser user)
+            throws GuacamoleException {
+
+        // Return whether user has explicit user group creation permission
+        SystemPermissionSet permissionSet = user.getUser().getEffectivePermissions().getSystemPermissions();
+        return permissionSet.hasPermission(SystemPermission.Type.CREATE_USER);
+
+    }
+
+    @Override
+    protected ObjectPermissionSet getEffectivePermissionSet(ModeledAuthenticatedUser user)
+            throws GuacamoleException {
+
+        // Return permissions related to user groups
+        return user.getUser().getEffectivePermissions().getUserGroupPermissions();
+
+    }
+
+    @Override
+    protected void beforeCreate(ModeledAuthenticatedUser user, UserGroup object,
+            UserGroupModel model) throws GuacamoleException {
+
+        super.beforeCreate(user, object, model);
+        
+        // Group name must not be blank
+        if (model.getIdentifier() == null || model.getIdentifier().trim().isEmpty())
+            throw new GuacamoleClientException(""The group name must not be blank."");
+        
+        // Do not create duplicate user groups
+        Collection<UserGroupModel> existing = userGroupMapper.select(Collections.singleton(model.getIdentifier()));
+        if (!existing.isEmpty())
+            throw new GuacamoleClientException(""Group \"""" + model.getIdentifier() + ""\"" already exists."");
+
+        // Create base entity object, implicitly populating underlying entity ID
+        entityMapper.insert(model);
+
+    }
+
+    @Override
+    protected void beforeUpdate(ModeledAuthenticatedUser user,
+            ModeledUserGroup object, UserGroupModel model) throws GuacamoleException {
+
+        super.beforeUpdate(user, object, model);
+        
+        // Username must not be blank","[{'comment': 'Username -> Group name', 'commenter': 'necouchman'}, {'comment': 'Will fix.', 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/usergroup/UserGroupService.java,"@@ -0,0 +1,189 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.usergroup;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Collection;
+import java.util.Collections;
+import org.apache.guacamole.auth.jdbc.base.ModeledDirectoryObjectMapper;
+import org.apache.guacamole.auth.jdbc.base.ModeledDirectoryObjectService;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.base.EntityMapper;
+import org.apache.guacamole.auth.jdbc.permission.ObjectPermissionMapper;
+import org.apache.guacamole.auth.jdbc.permission.UserGroupPermissionMapper;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.net.auth.UserGroup;
+import org.apache.guacamole.net.auth.permission.ObjectPermission;
+import org.apache.guacamole.net.auth.permission.ObjectPermissionSet;
+import org.apache.guacamole.net.auth.permission.SystemPermission;
+import org.apache.guacamole.net.auth.permission.SystemPermissionSet;
+
+/**
+ * Service which provides convenience methods for creating, retrieving, and
+ * manipulating user groups.
+ */
+public class UserGroupService extends ModeledDirectoryObjectService<ModeledUserGroup, UserGroup, UserGroupModel> {
+    
+    /**
+     * Mapper for creating/deleting entities.
+     */
+    @Inject
+    private EntityMapper entityMapper;
+
+    /**
+     * Mapper for accessing user groups.
+     */
+    @Inject
+    private UserGroupMapper userGroupMapper;
+
+    /**
+     * Mapper for manipulating user group permissions.
+     */
+    @Inject
+    private UserGroupPermissionMapper userGroupPermissionMapper;
+
+    /**
+     * Provider for creating user groups.
+     */
+    @Inject
+    private Provider<ModeledUserGroup> userGroupProvider;
+
+    @Override
+    protected ModeledDirectoryObjectMapper<UserGroupModel> getObjectMapper() {
+        return userGroupMapper;
+    }
+
+    @Override
+    protected ObjectPermissionMapper getPermissionMapper() {
+        return userGroupPermissionMapper;
+    }
+
+    @Override
+    protected ModeledUserGroup getObjectInstance(ModeledAuthenticatedUser currentUser,
+            UserGroupModel model) throws GuacamoleException {
+
+        boolean exposeRestrictedAttributes;
+
+        // Expose restricted attributes if the user group does not yet exist
+        if (model.getObjectID() == null)
+            exposeRestrictedAttributes = true;
+
+        // Otherwise, expose restricted attributes only if the user has
+        // ADMINISTER permission
+        else
+            exposeRestrictedAttributes = hasObjectPermission(currentUser,
+                    model.getIdentifier(), ObjectPermission.Type.ADMINISTER);
+
+        // Produce ModeledUserGroup exposing only those attributes for which the
+        // current user has permission
+        ModeledUserGroup group = userGroupProvider.get();
+        group.init(currentUser, model, exposeRestrictedAttributes);
+        return group;
+
+    }
+
+    @Override
+    protected UserGroupModel getModelInstance(ModeledAuthenticatedUser currentUser,
+            final UserGroup object) throws GuacamoleException {
+
+        // Create new ModeledUserGroup backed by blank model
+        UserGroupModel model = new UserGroupModel();
+        ModeledUserGroup group = getObjectInstance(currentUser, model);
+
+        // Set model contents through ModeledUser, copying the provided group
+        group.setIdentifier(object.getIdentifier());
+        group.setAttributes(object.getAttributes());
+
+        return model;
+        
+    }
+
+    @Override
+    protected boolean hasCreatePermission(ModeledAuthenticatedUser user)
+            throws GuacamoleException {
+
+        // Return whether user has explicit user group creation permission
+        SystemPermissionSet permissionSet = user.getUser().getEffectivePermissions().getSystemPermissions();
+        return permissionSet.hasPermission(SystemPermission.Type.CREATE_USER);
+
+    }
+
+    @Override
+    protected ObjectPermissionSet getEffectivePermissionSet(ModeledAuthenticatedUser user)
+            throws GuacamoleException {
+
+        // Return permissions related to user groups
+        return user.getUser().getEffectivePermissions().getUserGroupPermissions();
+
+    }
+
+    @Override
+    protected void beforeCreate(ModeledAuthenticatedUser user, UserGroup object,
+            UserGroupModel model) throws GuacamoleException {
+
+        super.beforeCreate(user, object, model);
+        
+        // Group name must not be blank
+        if (model.getIdentifier() == null || model.getIdentifier().trim().isEmpty())
+            throw new GuacamoleClientException(""The group name must not be blank."");
+        
+        // Do not create duplicate user groups
+        Collection<UserGroupModel> existing = userGroupMapper.select(Collections.singleton(model.getIdentifier()));
+        if (!existing.isEmpty())
+            throw new GuacamoleClientException(""Group \"""" + model.getIdentifier() + ""\"" already exists."");
+
+        // Create base entity object, implicitly populating underlying entity ID
+        entityMapper.insert(model);
+
+    }
+
+    @Override
+    protected void beforeUpdate(ModeledAuthenticatedUser user,
+            ModeledUserGroup object, UserGroupModel model) throws GuacamoleException {
+
+        super.beforeUpdate(user, object, model);
+        
+        // Username must not be blank
+        if (model.getIdentifier() == null || model.getIdentifier().trim().isEmpty())
+            throw new GuacamoleClientException(""The group name must not be blank."");
+        
+        // Check whether such a group is already present
+        UserGroupModel existing = userGroupMapper.selectOne(model.getIdentifier());
+        if (existing != null) {
+
+            // Do not rename to existing user group
+            if (!existing.getObjectID().equals(model.getObjectID()))","[{'comment': ""Should the `!` be here?  Aren't you supposed to be throwing the exception if the `equals()` returns true?  As it is, now, won't this allow a rename with an overlapping name?  Or maybe I'm mis-reading this?\r\n\r\nAlso, any reason not to combine this `if ()` statement with the one above - `if (existing != null && existing.getObjectID().equals(model.getObjectID()))` ?"", 'commenter': 'necouchman'}, {'comment': ""Yep, the `!` is correct here. The two tests being made here are:\r\n\r\n1. Does a group having this identifier already exist? (`existing != null`)\r\n2. Is the group having this identifier actually a different group (different database ID)? (`!existing.getObjectID().equals(model.getObjectID())`)\r\n\r\nIf both of these are true, only then is the object being renamed in such a way that it collides with an existing object.\r\n\r\nThe tests could definitely be combined. That might be clearer, as the comment documenting the test could more accurately capture what's happening here.\r\n\r\n*EDIT:* Corrected test 2 above."", 'commenter': 'mike-jumper'}, {'comment': 'Got it, thanks.', 'commenter': 'necouchman'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/usergroup/UserGroupService.java,"@@ -0,0 +1,189 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.usergroup;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import java.util.Collection;
+import java.util.Collections;
+import org.apache.guacamole.auth.jdbc.base.ModeledDirectoryObjectMapper;
+import org.apache.guacamole.auth.jdbc.base.ModeledDirectoryObjectService;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.base.EntityMapper;
+import org.apache.guacamole.auth.jdbc.permission.ObjectPermissionMapper;
+import org.apache.guacamole.auth.jdbc.permission.UserGroupPermissionMapper;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.net.auth.UserGroup;
+import org.apache.guacamole.net.auth.permission.ObjectPermission;
+import org.apache.guacamole.net.auth.permission.ObjectPermissionSet;
+import org.apache.guacamole.net.auth.permission.SystemPermission;
+import org.apache.guacamole.net.auth.permission.SystemPermissionSet;
+
+/**
+ * Service which provides convenience methods for creating, retrieving, and
+ * manipulating user groups.
+ */
+public class UserGroupService extends ModeledDirectoryObjectService<ModeledUserGroup, UserGroup, UserGroupModel> {
+    
+    /**
+     * Mapper for creating/deleting entities.
+     */
+    @Inject
+    private EntityMapper entityMapper;
+
+    /**
+     * Mapper for accessing user groups.
+     */
+    @Inject
+    private UserGroupMapper userGroupMapper;
+
+    /**
+     * Mapper for manipulating user group permissions.
+     */
+    @Inject
+    private UserGroupPermissionMapper userGroupPermissionMapper;
+
+    /**
+     * Provider for creating user groups.
+     */
+    @Inject
+    private Provider<ModeledUserGroup> userGroupProvider;
+
+    @Override
+    protected ModeledDirectoryObjectMapper<UserGroupModel> getObjectMapper() {
+        return userGroupMapper;
+    }
+
+    @Override
+    protected ObjectPermissionMapper getPermissionMapper() {
+        return userGroupPermissionMapper;
+    }
+
+    @Override
+    protected ModeledUserGroup getObjectInstance(ModeledAuthenticatedUser currentUser,
+            UserGroupModel model) throws GuacamoleException {
+
+        boolean exposeRestrictedAttributes;
+
+        // Expose restricted attributes if the user group does not yet exist
+        if (model.getObjectID() == null)
+            exposeRestrictedAttributes = true;
+
+        // Otherwise, expose restricted attributes only if the user has
+        // ADMINISTER permission
+        else
+            exposeRestrictedAttributes = hasObjectPermission(currentUser,
+                    model.getIdentifier(), ObjectPermission.Type.ADMINISTER);
+
+        // Produce ModeledUserGroup exposing only those attributes for which the
+        // current user has permission
+        ModeledUserGroup group = userGroupProvider.get();
+        group.init(currentUser, model, exposeRestrictedAttributes);
+        return group;
+
+    }
+
+    @Override
+    protected UserGroupModel getModelInstance(ModeledAuthenticatedUser currentUser,
+            final UserGroup object) throws GuacamoleException {
+
+        // Create new ModeledUserGroup backed by blank model
+        UserGroupModel model = new UserGroupModel();
+        ModeledUserGroup group = getObjectInstance(currentUser, model);
+
+        // Set model contents through ModeledUser, copying the provided group
+        group.setIdentifier(object.getIdentifier());
+        group.setAttributes(object.getAttributes());
+
+        return model;
+        
+    }
+
+    @Override
+    protected boolean hasCreatePermission(ModeledAuthenticatedUser user)
+            throws GuacamoleException {
+
+        // Return whether user has explicit user group creation permission
+        SystemPermissionSet permissionSet = user.getUser().getEffectivePermissions().getSystemPermissions();
+        return permissionSet.hasPermission(SystemPermission.Type.CREATE_USER);
+
+    }
+
+    @Override
+    protected ObjectPermissionSet getEffectivePermissionSet(ModeledAuthenticatedUser user)
+            throws GuacamoleException {
+
+        // Return permissions related to user groups
+        return user.getUser().getEffectivePermissions().getUserGroupPermissions();
+
+    }
+
+    @Override
+    protected void beforeCreate(ModeledAuthenticatedUser user, UserGroup object,
+            UserGroupModel model) throws GuacamoleException {
+
+        super.beforeCreate(user, object, model);
+        
+        // Group name must not be blank
+        if (model.getIdentifier() == null || model.getIdentifier().trim().isEmpty())
+            throw new GuacamoleClientException(""The group name must not be blank."");
+        
+        // Do not create duplicate user groups
+        Collection<UserGroupModel> existing = userGroupMapper.select(Collections.singleton(model.getIdentifier()));","[{'comment': 'Is there a particular reason you use a `Collection` with `userGroupMapper.select()`, here, but below, in the `beforeUpdate()` method you use `userGroupMapper.selectOne()`?', 'commenter': 'necouchman'}, {'comment': ""Nope. Probably holdover copypasta from ages past. I'll switch it."", 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/schema/upgrade/upgrade-pre-1.0.0.sql,"@@ -17,6 +17,319 @@
 -- under the License.
 --
 
+--
+-- Add new system-level permission
+--
+
+ALTER TABLE `guacamole_system_permission`
+    MODIFY `permission` enum('CREATE_CONNECTION',
+                             'CREATE_CONNECTION_GROUP',
+                             'CREATE_SHARING_PROFILE',
+                             'CREATE_USER',
+                             'CREATE_USER_GROUP',
+                             'ADMINISTER') NOT NULL;
+
+--
+-- Table of base entities which may each be either a user or user group. Other
+-- tables which represent qualities shared by both users and groups will point
+-- to guacamole_entity, while tables which represent qualities specific to
+-- users or groups will point to guacamole_user or guacamole_user_group.
+--
+
+CREATE TABLE `guacamole_entity` (
+
+  `entity_id`     int(11)            NOT NULL AUTO_INCREMENT,
+  `name`          varchar(128)       NOT NULL,
+  `type`          enum('USER',
+                       'USER_GROUP') NOT NULL,
+
+  PRIMARY KEY (`entity_id`),
+  UNIQUE KEY `guacamole_entity_name_scope` (`type`, `name`)
+
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+--
+-- Table of user groups. Each user group may have an arbitrary set of member
+-- users and member groups, with those members inheriting the permissions
+-- granted to that group.
+--
+
+CREATE TABLE `guacamole_user_group` (
+
+  `user_group_id` int(11)      NOT NULL AUTO_INCREMENT,
+  `entity_id`     int(11)      NOT NULL,
+
+  -- Group disabled status
+  `disabled`      boolean      NOT NULL DEFAULT 0,
+
+  PRIMARY KEY (`user_group_id`),
+
+  UNIQUE KEY `guacamole_user_group_single_entity` (`entity_id`),
+
+  CONSTRAINT `guacamole_user_group_entity`
+    FOREIGN KEY (`entity_id`)
+    REFERENCES `guacamole_entity` (`entity_id`)
+    ON DELETE CASCADE
+
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+--
+-- Table of users which are members of given user groups.
+--
+
+CREATE TABLE `guacamole_user_group_member` (
+
+  `user_group_id`    int(11)     NOT NULL,
+  `member_entity_id` int(11)     NOT NULL,
+
+  PRIMARY KEY (`user_group_id`, `member_entity_id`),
+
+  -- Parent must be a user group
+  CONSTRAINT `guacamole_user_group_member_parent_id`
+    FOREIGN KEY (`user_group_id`)
+    REFERENCES `guacamole_user_group` (`user_group_id`) ON DELETE CASCADE,
+
+  -- Member may be either a user or a user group (any entity)
+  CONSTRAINT `guacamole_user_group_member_entity_id`
+    FOREIGN KEY (`member_entity_id`)
+    REFERENCES `guacamole_entity` (`entity_id`) ON DELETE CASCADE
+
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+--
+-- Table of user group permissions. Each user group permission grants a user
+-- or user group access to a another user group (the ""affected"" user group) for
+-- a specific type of operation.
+--
+
+CREATE TABLE `guacamole_user_group_permission` (
+
+  `entity_id`              int(11) NOT NULL,
+  `affected_user_group_id` int(11) NOT NULL,
+  `permission`             enum('READ',
+                                'UPDATE',
+                                'DELETE',
+                                'ADMINISTER') NOT NULL,
+
+  PRIMARY KEY (`entity_id`, `affected_user_group_id`, `permission`),
+
+  CONSTRAINT `guacamole_user_group_permission_affected_user_group`
+    FOREIGN KEY (`affected_user_group_id`)
+    REFERENCES `guacamole_user_group` (`user_group_id`) ON DELETE CASCADE,
+
+  CONSTRAINT `guacamole_user_group_permission_entity`
+    FOREIGN KEY (`entity_id`)
+    REFERENCES `guacamole_entity` (`entity_id`) ON DELETE CASCADE
+
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+--
+-- Modify guacamole_user table to use guacamole_entity as a base
+--
+
+-- Add new entity_id column
+ALTER TABLE guacamole_user ADD COLUMN entity_id int(11);
+
+-- Create user entities for each guacamole_user entry
+INSERT INTO guacamole_entity (name, type)
+SELECT username, 'USER' FROM guacamole_user;
+
+-- Update guacamole_user to point to corresponding guacamole_entity
+UPDATE guacamole_user SET entity_id = (
+    SELECT entity_id FROM guacamole_entity
+    WHERE
+            username = guacamole_entity.name
+        AND type = 'USER'
+);
+
+-- The entity_id column should now be safely non-NULL
+ALTER TABLE guacamole_user MODIFY entity_id int(11) NOT NULL;
+
+-- The entity_id column should now safely point to guacamole_entity entries","[{'comment': 'Maybe this should say ""The entity_id column should now safely be unique"" ?  Looks like this comment duplicates the one for the block just below.', 'commenter': 'necouchman'}, {'comment': ""Yikes, you're right. This may have to be updated in a few places."", 'commenter': 'mike-jumper'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/resources/org/apache/guacamole/auth/jdbc/connection/ConnectionRecordMapper.xml,"@@ -79,7 +79,10 @@
             #{record.sharingProfileIdentifier,jdbcType=VARCHAR},
             #{record.sharingProfileName,jdbcType=VARCHAR},
             (SELECT user_id FROM guacamole_user
-             WHERE username = #{record.username,jdbcType=VARCHAR}),
+             JOIN guacamole_entity ON guacamole_user.entity_id = guacamole_entity.entity_id","[{'comment': 'Seems like this code here expects that, when users are deleted from the database, their entries will remain present in the `guacamole_entity` table?  Just want to confirm...', 'commenter': 'necouchman'}, {'comment': ""Hm... I'm not sure I know what you mean. What about the code seems that way?"", 'commenter': 'mike-jumper'}, {'comment': 'Oops - I think I was confusing that block of SQL code for the `INSERT` statement with a query that would `SELECT` rows from the table.  My bad.', 'commenter': 'necouchman'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/RelatedObjectSet.java,"@@ -0,0 +1,211 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.base;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Set;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleSecurityException;
+import org.apache.guacamole.net.auth.permission.ObjectPermission;
+import org.apache.guacamole.net.auth.permission.ObjectPermissionSet;
+
+/**
+ * A database implementation of RelatedObjectSet which provides access to a
+ * parent object and corresponding set of objects related to the parent, subject
+ * to object-level permissions. Though the parent and child objects have
+ * specific types, only the parent object's type is enforced through type
+ * parameters, as child objects are represented by identifiers only.
+ *
+ * @param <ParentObjectType>
+ *     The type of object that represents the parent side of the relation.
+ *
+ * @param <ParentModelType>
+ *     The underlying database model of the parent object.
+ */
+public abstract class RelatedObjectSet<ParentObjectType extends ModeledDirectoryObject<ParentModelType>, ParentModelType extends ObjectModel>
+        extends RestrictedObject implements org.apache.guacamole.net.auth.RelatedObjectSet {
+
+    /**
+     * The parent object which shares some arbitrary relation with the objects
+     * within this set.
+     */
+    private ParentObjectType parent;
+
+    /**
+     * Creates a new RelatedObjectSet. The resulting object set must still be
+     * initialized by a call to init().
+     */
+    public RelatedObjectSet() {
+    }
+
+    /**
+     * Initializes this RelatedObjectSet with the current user and the single
+     * object on the parent side of the one-to-many relation represented by the
+     * set.
+     *
+     * @param currentUser
+     *     The user who queried this RelatedObjectSet, and whose permissions
+     *     dictate the access level of all operations performed on this set.
+     *
+     * @param parent
+     *     The parent object which shares some arbitrary relation with the
+     *     objects within this set.
+     */
+    public void init(ModeledAuthenticatedUser currentUser, ParentObjectType parent) {
+        super.init(currentUser);
+        this.parent = parent;
+    }
+
+    /**
+     * Returns the mapper which provides low-level access to the the database
+     * models which drive the relation represented by this RelatedObjectSet.
+     *
+     * @return
+     *     The mapper which provides low-level access to the the database
+     *     models which drive the relation represented by this
+     *     RelatedObjectSet.
+     */
+    protected abstract ObjectRelationMapper<ParentModelType> getObjectRelationMapper();
+
+    /**
+     * Returns the permission set which exposes the effective permissions
+     * available to the current user regarding the objects on the parent side
+     * of the one-to-many relationship represented by this RelatedObjectSet.
+     * Permission inheritance through user groups is taken into account.
+     *
+     * @return
+     *     The permission set which exposes the effective permissions
+     *     available to the current user regarding the objects on the parent
+     *     side of the one-to-many relationship represented by this
+     *     RelatedObjectSet.
+     *
+     * @throws GuacamoleException
+     *     If permission to query permission status is denied.
+     */
+    protected abstract ObjectPermissionSet getParentObjectEffectivePermissionSet()
+            throws GuacamoleException;
+
+    /**
+     * Returns the permission set which exposes the effective permissions
+     * available to the current user regarding the objects on the child side
+     * of the one-to-many relationship represented by this RelatedObjectSet.
+     * Permission inheritance through user groups is taken into account.
+     *
+     * @return
+     *     The permission set which exposes the effective permissions
+     *     available to the current user regarding the objects on the child
+     *     side of the one-to-many relationship represented by this
+     *     RelatedObjectSet.
+     *
+     * @throws GuacamoleException
+     *     If permission to query permission status is denied.
+     */
+    protected abstract ObjectPermissionSet getChildObjectEffectivePermissionSet()
+            throws GuacamoleException;
+
+    /**
+     * Returns whether the current user has permission to alter that status of","[{'comment': 'that status -> the status', 'commenter': 'necouchman'}]"
319,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/permission/ModeledObjectPermissionService.java,"@@ -47,14 +49,14 @@ protected ObjectPermission getPermissionInstance(ObjectPermissionModel model) {
     }
 
     @Override
-    protected ObjectPermissionModel getModelInstance(ModeledUser targetUser,
+    protected ObjectPermissionModel getModelInstance(
+            ModeledPermissions<? extends EntityModel> targetEntity,
             ObjectPermission permission) {
 
         ObjectPermissionModel model = new ObjectPermissionModel();","[{'comment': 'Out of curiosity, is there a particular rationale or driver here for having the empty constructor, and then calling each of the `set...()` methods below?', 'commenter': 'necouchman'}]"
320,guacamole-docker/bin/start.sh,"@@ -141,16 +141,39 @@ environment variables:
 
     MYSQL_DATABASE     The name of the MySQL database to use for Guacamole
                        authentication.
-END
+END`","[{'comment': 'I believe that trailing backtick here will result in the `END` failing to match the `<<END`, as the shell will be searching for a line that contains nothing but `END`. Can you confirm whether this works as expected?', 'commenter': 'mike-jumper'}, {'comment': 'My very rough example compose file for a guacamole stack:\r\n\r\n```yaml\r\nversion: ""3.1""\r\nservices:\r\n  daemon:\r\n    image: guacamole/guacd:latest\r\n    networks:\r\n      - guac\r\n\r\n  client:\r\n    image: wojoinc/guac-test:latest\r\n    networks:\r\n      - guac\r\n      - db\r\n    ports:\r\n      - ""8081:8080""\r\n\r\n    environment:\r\n      GUACD_HOSTNAME: ""daemon""\r\n      GUACD_PORT: ""4822""\r\n      MYSQL_HOSTNAME: ""db""\r\n      #MYSQL_DATABASE_FILE: ""/run/secrets/guac-mysql-db""\r\n      MYSQL_PORT: ""3306""\r\n      MYSQL_USER_FILE: ""/run/secrets/guac-mysql-user""\r\n      MYSQL_PASSWORD_FILE: ""/run/secrets/guac-mysql-password""\r\n\r\n    secrets:\r\n      - guac-mysql-db\r\n      - guac-mysql-user\r\n      - guac-mysql-password\r\n\r\n  db:\r\n    image: mariadb:latest\r\n    networks:\r\n      - db\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD_FILE: ""/run/secrets/guac-mysql-root-password""\r\n      MYSQL_DATABASE: ""guacamole""\r\n      MYSQL_USER_FILE: ""/run/secrets/guac-mysql-user""\r\n      MYSQL_PASSWORD: ""/run/secrets/guac-mysql-password""\r\n      MYSQL_ROOT_HOST: ""localhost""\r\n    volumes:\r\n      - ""db_data:/var/lib/mysql""\r\n      - ""./initdb.sql:/docker-entrypoint-initdb.d/dump.sql""\r\n    secrets:\r\n      - guac-mysql-root-password\r\n      - guac-mysql-db\r\n      - guac-mysql-user\r\n      - guac-mysql-password\r\n\r\nnetworks:\r\n  guac:\r\n\r\n  db:\r\n\r\nsecrets:\r\n  guac-mysql-root-password:\r\n    external: true\r\n  guac-mysql-db:\r\n    external: true\r\n  guac-mysql-user:\r\n    external: true\r\n  guac-mysql-password:\r\n    external: true\r\n\r\nvolumes:\r\n  db_data:\r\n```\r\n\r\nWhen omitting MYSQL_DATABASE or MYSQL_DATABASE_FILE, this causes the container to fail to spin up, and the logs present the error message from before calling associate_mysql() located at the bottom of the file,\r\n```\r\nFATAL: No authentication configured\r\n-------------------------------------------------------------------------------\r\nThe Guacamole Docker container needs at least one authentication mechanism in\r\norder to function, such as a MySQL database, PostgreSQL database, or LDAP\r\ndirectory.  Please specify at least the MYSQL_DATABASE or POSTGRES_DATABASE\r\nenvironment variables, or check Guacamole\'s Docker documentation regarding\r\nconfiguring LDAP and/or custom extensions.\r\n```\r\n\r\nIf you omit MYSQL_USER for example however, it does appear to read beyond the trailing backtick. I made the change to remove it, and I am rebuilding a test image now to see if it still works with that back tick removed. Thanks for letting me know!\r\n\r\n\r\n', 'commenter': 'somerandow'}]"
320,guacamole-docker/README.md,"@@ -28,14 +28,25 @@ Once the Guacamole image is running, Guacamole will be accessible at
 `-p 8080:8080` option to expose this port at the level of the machine hosting
 Docker, as well.
 
+Docker Secrets
+==============
+The string `_FILE` may be appended to some of the environment variables listed below if you are using MySQL or PostgreSQL authentication. This will cause the startup script to load the values for those variables from files within in the container. This is useful for specifying sensitive info, ie. passwords for the database, in secured files instead of plaintext environment variables, and is generally used for loading values from [Docker secrets](https://docs.docker.com/engine/swarm/secrets/#read-more-about-docker-secret-commands), which are stored in `/run/secrets/<secret_name>` within the container.
+","[{'comment': 'A couple of issues, here:\r\n- In the rest of the README.md file, here, lines are formatted with a roughly similar maximum column size.  It looks like you\'ve got a single very long line, here - please reformat these lines (and the others you\'ve added below) to match the style used throughout the rest of the file.\r\n- There is a mistake in the line ""for those variables from files within in the"" should be ""for those variables from files within the"".', 'commenter': 'necouchman'}]"
320,guacamole-docker/README.md,"@@ -45,6 +56,9 @@ the image will stop:
 1. `POSTGRES_DATABASE` - The name of the database to use for Guacamole authentication.
 2. `POSTGRES_USER` - The user that Guacamole will use to connect to PostgreSQL.
 3. `POSTGRES_PASSWORD` - The password that Guacamole will provide when connecting to PostgreSQL as `POSTGRES_USER`.
+4. `POSTGRES_DATABASE_FILE` - The path of the docker secret containing the name of database to use for Guacamole authentication.
+5. `POSTGRES_USER` - The path of the docker secret containing the name of the user that Guacamole will use to connect to PostgreSQL.","[{'comment': 'This should probably be `POSTGRES_USER_FILE` if it\'s the ""path of the docker secret,"" no?', 'commenter': 'necouchman'}]"
320,guacamole-docker/README.md,"@@ -45,6 +56,9 @@ the image will stop:
 1. `POSTGRES_DATABASE` - The name of the database to use for Guacamole authentication.
 2. `POSTGRES_USER` - The user that Guacamole will use to connect to PostgreSQL.
 3. `POSTGRES_PASSWORD` - The password that Guacamole will provide when connecting to PostgreSQL as `POSTGRES_USER`.
+4. `POSTGRES_DATABASE_FILE` - The path of the docker secret containing the name of database to use for Guacamole authentication.
+5. `POSTGRES_USER` - The path of the docker secret containing the name of the user that Guacamole will use to connect to PostgreSQL.
+6. `POSTGRES_PASSWORD` - The path of the docker secret containing the password that Guacamole will provide when connecting to PostgreSQL as `POSTGRES_USER`.","[{'comment': 'This should probably be `POSTGRES_PASSWORD_FILE` if it\'s the ""path of the docker secret,"" no?', 'commenter': 'necouchman'}]"
320,guacamole-docker/README.md,"@@ -90,6 +107,9 @@ the image will stop:
 1. `MYSQL_DATABASE` - The name of the database to use for Guacamole authentication.
 2. `MYSQL_USER` - The user that Guacamole will use to connect to MySQL.
 3. `MYSQL_PASSWORD` - The password that Guacamole will provide when connecting to MySQL as `MYSQL_USER`.
+4. `MYSQL_DATABASE_FILE` - The path of the docker secret containing the name of database to use for Guacamole authentication.
+5. `MYSQL_USER` - The path of the docker secret containing the name of the user that Guacamole will use to connect to MySQL.","[{'comment': '`MYSQL_USER` -> `MYSQL_USER_FILE`', 'commenter': 'necouchman'}]"
320,guacamole-docker/README.md,"@@ -90,6 +107,9 @@ the image will stop:
 1. `MYSQL_DATABASE` - The name of the database to use for Guacamole authentication.
 2. `MYSQL_USER` - The user that Guacamole will use to connect to MySQL.
 3. `MYSQL_PASSWORD` - The password that Guacamole will provide when connecting to MySQL as `MYSQL_USER`.
+4. `MYSQL_DATABASE_FILE` - The path of the docker secret containing the name of database to use for Guacamole authentication.
+5. `MYSQL_USER` - The path of the docker secret containing the name of the user that Guacamole will use to connect to MySQL.
+6. `MYSQL_PASSWORD` - The path of the docker secret containing the password that Guacamole will provide when connecting to MySQL as `MYSQL_USER`.","[{'comment': '`MYSQL_PASSWORD` -> `MYSQL_PASSWORD_FILE`', 'commenter': 'necouchman'}]"
328,guacamole-common-js/src/main/webapp/modules/Keyboard.js,"@@ -953,37 +1006,58 @@ Guacamole.Keyboard = function Keyboard(element) {
             0xFFE9, // Left alt
             0xFFEA, // Right alt
             0xFE03  // AltGr
-        ]);
+        ], keyEvent);
 
         // Resync state of shift
         updateModifierState(guac_keyboard.modifiers.shift, state.shift, [
             0xFFE1, // Left shift
             0xFFE2  // Right shift
-        ]);
+        ], keyEvent);
 
         // Resync state of ctrl
         updateModifierState(guac_keyboard.modifiers.ctrl, state.ctrl, [
             0xFFE3, // Left ctrl
             0xFFE4  // Right ctrl
-        ]);
+        ], keyEvent);
 
         // Resync state of meta
         updateModifierState(guac_keyboard.modifiers.meta, state.meta, [
             0xFFE7, // Left meta
             0xFFE8  // Right meta
-        ]);
+        ], keyEvent);
 
         // Resync state of hyper
         updateModifierState(guac_keyboard.modifiers.hyper, state.hyper, [
             0xFFEB, // Left hyper
             0xFFEC  // Right hyper
-        ]);
+        ], keyEvent);
 
         // Update state
         guac_keyboard.modifiers = state;
 
     };
 
+    /**
+     * Returns whether all currently pressed keys were implicitly pressed. A
+     * key is implicitly pressed if its status was inferred indirectly from
+     * inspection of other key events.
+     *
+     * @private
+     * @returns {Boolean}
+     *     true of all currently pressed keys were implicitly pressed, false","[{'comment': 'of -> if', 'commenter': 'necouchman'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/.gitignore,"@@ -0,0 +1,2 @@
+target/","[{'comment': ""Looks like these .gitignore files are not present in most of the other modules, at least at the base.  Even the jdbc module doesn't have it at the root?"", 'commenter': 'necouchman'}, {'comment': ""I'll recheck - it may well not be needed."", 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-azure/pom.xml,"@@ -0,0 +1,174 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-vault-azure</artifactId>
+    <packaging>jar</packaging>
+    <version>1.0.0</version>
+    <name>guacamole-auth-vault-azure</name>
+    <url>http://guacamole.apache.org/</url>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <parent>
+        <groupId>org.apache.guacamole</groupId>
+        <artifactId>guacamole-auth-vault</artifactId>
+        <version>1.0.0</version>
+        <relativePath>../../</relativePath>
+    </parent>
+
+    <build>
+        <plugins>
+
+            <!-- Written for Java 1.8 -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.3</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                    <compilerArgs>
+                        <arg>-Xlint:all</arg>
+                        <arg>-Werror</arg>
+                    </compilerArgs>
+                    <fork>true</fork>
+                </configuration>
+            </plugin>
+
+            <!-- Copy dependencies prior to packaging -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.10</version>
+                <executions>
+                    <execution>
+                        <id>unpack-dependencies</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>unpack-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <includeScope>runtime</includeScope>
+                            <outputDirectory>${project.build.directory}/classes</outputDirectory>
+                            <excludes>META-INF/*.SF,META-INF/*.DSA</excludes>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Verify format using Apache RAT -->
+            <plugin>
+                <groupId>org.apache.rat</groupId>
+                <artifactId>apache-rat-plugin</artifactId>
+                <version>0.12</version>
+
+                <configuration>
+                    <excludes>
+                        <exclude>**/*.json</exclude>
+                    </excludes>
+                </configuration>
+
+                <!-- Bind RAT to validate phase -->
+                <executions>
+                    <execution>
+                        <id>validate</id>
+                        <phase>validate</phase>
+                        <goals>
+                            <goal>check</goal>
+                        </goals>
+                    </execution>
+                </executions>
+
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <dependencies>
+
+        <!-- Guacamole Extension API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-ext</artifactId>
+            <scope>provided</scope>
+            <exclusions>
+                <exclusion>
+                    <groupId>org.slf4j</groupId>
+                    <artifactId>slf4j-api</artifactId>","[{'comment': ""Should this really be excluded from the `guacamole-ext` dependency?  Isn't this where you want the version pulled in?"", 'commenter': 'necouchman'}, {'comment': ""You're right - it shouldn't be excluded. It's not that we want it pulled in, though, but that it's provided already by the Guacamole webapp just like guacamole-ext and guacamole-common.\r\n\r\nWe don't want it fully excluded, but we also don't want it bundled with the extension. The `<scope>provided</scope>` for the guacamole-ext dependency takes care of that."", 'commenter': 'mike-jumper'}, {'comment': ""I'll remove the unnecessary exclusion."", 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-azure/src/main/java/org/apache/guacamole/auth/vault/azure/AzureKeyVaultAuthenticationProviderModule.java,"@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.azure;
+
+import com.microsoft.azure.keyvault.authentication.KeyVaultCredentials;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.vault.VaultAuthenticationProviderModule;
+import org.apache.guacamole.auth.vault.azure.conf.AzureKeyVaultConfigurationService;
+import org.apache.guacamole.auth.vault.azure.conf.AzureKeyVaultCredentials;
+import org.apache.guacamole.auth.vault.azure.secret.AzureKeyVaultSecretService;
+import org.apache.guacamole.auth.vault.conf.VaultConfigurationService;
+import org.apache.guacamole.auth.vault.secret.VaultSecretService;
+
+/**
+ * Guice module which configures injections specific to Azure Key Vault
+ * support.
+ */
+public class AzureKeyVaultAuthenticationProviderModule
+        extends VaultAuthenticationProviderModule {
+
+    /**
+     * Creates a new AzureKeyVaultAuthenticationiProviderModule which","[{'comment': 'AzureKeyVaultAuthenticationiProviderModule -> AzureKeyVaultAuthenticationProviderModule\r\n\r\n(extra i)', 'commenter': 'necouchman'}, {'comment': 'OK - will fix.', 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-azure/src/main/java/org/apache/guacamole/auth/vault/azure/conf/AzureKeyVaultAuthenticationException.java,"@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.azure.conf;
+
+/**
+ * Unchecked exception thrown by AzureKeyVaultCredentials if an error occurs
+ * during the authentication process. Note that the base KeyVaultCredentials
+ * base class does not provide for checked exceptions within the authentication
+ * process.
+ *
+ * @see AzureKeyVaultCredentials#doAuthenticate(java.lang.String, java.lang.String, java.lang.String)
+ */
+public class AzureKeyVaultAuthenticationException extends RuntimeException {","[{'comment': ""I'm guessing there's a reason, but I have to ask, why does this extend `RuntimeException` and not one of the `GuacamoleException` classes?"", 'commenter': 'necouchman'}, {'comment': 'Yep. From the top of the class:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/4d90b34732d81efd1fbdeab8df9d9edb939f6266/extensions/guacamole-auth-vault/modules/guacamole-auth-vault-azure/src/main/java/org/apache/guacamole/auth/vault/azure/conf/AzureKeyVaultAuthenticationException.java#L22-L30\r\n\r\nThe API provided for Azure does not allow for checked exceptions like `GuacamoleException` to be thrown. Only unchecked exceptions can be used for things which must be thrown within callbacks, etc. in their API. We catch this specific exception and translate into a `GuacamoleException` before things make their way back out to Guacamole.', 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-azure/src/main/java/org/apache/guacamole/auth/vault/azure/conf/AzureKeyVaultCredentials.java,"@@ -0,0 +1,115 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.azure.conf;
+
+import com.google.inject.Inject;
+import com.microsoft.aad.adal4j.AuthenticationContext;
+import com.microsoft.aad.adal4j.AuthenticationResult;
+import com.microsoft.aad.adal4j.ClientCredential;
+import com.microsoft.azure.keyvault.authentication.KeyVaultCredentials;
+import java.net.MalformedURLException;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import org.apache.guacamole.GuacamoleException;
+
+/**
+ * KeyVaultCredentials implementation which retrieves the required client ID
+ * and key from guacamole.properties. Note that KeyVaultCredentials as
+ * implemented in the Azure Java SDK is NOT THREADSAFE; it leverages a
+ * non-concurrent HashMap for authentication result caching and does not
+ * perform any synchronization.
+ */
+public class AzureKeyVaultCredentials extends KeyVaultCredentials {
+
+    /**
+     * Service for retrieving configuration information.
+     */
+    @Inject
+    private AzureKeyVaultConfigurationService confService;
+
+    /**
+     * {@inheritDoc}
+     *
+     * @throws AzureKeyVaultAuthenticationException
+     *     If an error occurs preventing successful authentication. Note that
+     *     this exception is unchecked. Uses of this class which need to be
+     *     aware of errors in the authentication process must manually catch
+     *     this exception.
+     */
+    @Override
+    public String doAuthenticate(String authorization, String resource,
+            String scope) throws AzureKeyVaultAuthenticationException {
+
+        // Read Azure credentials from guacamole.properties
+        ClientCredential credentials;
+        try {
+            credentials = confService.getClientCredentials();
+        }
+        catch (GuacamoleException e) {","[{'comment': ""What's the rationale for not passing this through as a `GuacamoleException`?"", 'commenter': 'necouchman'}, {'comment': ""No rationale, but a hard requirement. `doAuthenticate()` is not defined by us but by the Azure API we're using in this extension. We can't add new checked exceptions like `GuacamoleException` to the prototype of a function we're implementing that's defined by someone else's interface. Ideally, that third-party interface would provide some checked exception that we *could* throw, but no dice - only unchecked exceptions are available for use within `doAuthenticate()`.\r\n\r\nThe code elsewhere in this extension that deals with the part of Azure's API which invokes `doAuthenticate()` has to be conscious of this, catch our special unchecked exception, and translate things back into an appropriate `GuacamoleException."", 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-azure/src/main/java/org/apache/guacamole/auth/vault/azure/secret/AzureKeyVaultSecretService.java,"@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.azure.secret;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import com.google.inject.Singleton;
+import com.microsoft.azure.keyvault.KeyVaultClient;
+import com.microsoft.azure.keyvault.authentication.KeyVaultCredentials;
+import com.microsoft.azure.keyvault.models.SecretBundle;
+import com.microsoft.rest.ServiceCallback;
+import java.util.concurrent.CompletableFuture;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.vault.azure.conf.AzureKeyVaultAuthenticationException;
+import org.apache.guacamole.auth.vault.azure.conf.AzureKeyVaultConfigurationService;
+import org.apache.guacamole.auth.vault.secret.CachedVaultSecretService;
+
+/**
+ * Service which retrieves secrets from Azure Key Vault.
+ */
+@Singleton
+public class AzureKeyVaultSecretService extends CachedVaultSecretService {
+
+    /**
+     * Pattern which matches contiguous groups of characters which are not
+     * allowed within Azure Key Vault secret names.
+     */
+    private static final Pattern DISALLOWED_CHARACTERS = Pattern.compile(""[^a-zA-Z0-9-]+"");
+
+    /**
+     * Service for retrieving configuration information.
+     */
+    @Inject
+    private AzureKeyVaultConfigurationService confService;
+
+    /**
+     * Provider for Azure Key Vault credentials.
+     */
+    @Inject
+    private Provider<KeyVaultCredentials> credentialProvider;
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>Azure Key Vault allows strictly a-z, A-Z, 0-9, and ""-"". This","[{'comment': ""Is this `<p>` here because of the `{@inheritDoc}` tag above?  I know we've discussed this before, but it's been a while..."", 'commenter': 'necouchman'}, {'comment': 'Yep, exactly right.', 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-base/src/main/java/org/apache/guacamole/auth/vault/user/VaultUserContext.java,"@@ -0,0 +1,325 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.user;
+
+import com.google.inject.Inject;
+import com.google.inject.assistedinject.Assisted;
+import com.google.inject.assistedinject.AssistedInject;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.auth.vault.conf.VaultConfigurationService;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.TokenInjectingUserContext;
+import org.apache.guacamole.net.auth.UserContext;
+import org.apache.guacamole.auth.vault.secret.VaultSecretService;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+import org.apache.guacamole.token.GuacamoleTokenUndefinedException;
+import org.apache.guacamole.token.TokenFilter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * UserContext implementation which automatically injects tokens containing the
+ * values of secrets retrieved from a vault.
+ */
+public class VaultUserContext extends TokenInjectingUserContext {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(VaultUserContext.class);","[{'comment': ""Just curious, in the past I think the `logger` object has generally been declared `private static final` - is there a reason why it's better to/not to use `static` for those?  I think a lot of the recent changes have not included the `static` keyword, so not sure if there's a reason things have trended in that direction.  It'd be good to be consistent about it."", 'commenter': 'necouchman'}, {'comment': ""I'll check SLF4J docs for best practices."", 'commenter': 'mike-jumper'}, {'comment': ""SLF4J formerly recommended that instance variables be used (non-static), but no longer takes either stance: https://www.slf4j.org/faq.html#declared_static\r\n\r\nIf we have to pick something to be the standard going forward, I'd say let's stick with the accepted idiom of `private static final` loggers, with the exception being where it's actually necessary to not be `static` (dependency injection)."", 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-base/src/main/java/org/apache/guacamole/auth/vault/user/VaultUserContext.java,"@@ -0,0 +1,325 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.user;
+
+import com.google.inject.Inject;
+import com.google.inject.assistedinject.Assisted;
+import com.google.inject.assistedinject.AssistedInject;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.auth.vault.conf.VaultConfigurationService;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.TokenInjectingUserContext;
+import org.apache.guacamole.net.auth.UserContext;
+import org.apache.guacamole.auth.vault.secret.VaultSecretService;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+import org.apache.guacamole.token.GuacamoleTokenUndefinedException;
+import org.apache.guacamole.token.TokenFilter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * UserContext implementation which automatically injects tokens containing the
+ * values of secrets retrieved from a vault.
+ */
+public class VaultUserContext extends TokenInjectingUserContext {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(VaultUserContext.class);
+
+    /**
+     * The name of the token which will be replaced with the username of the
+     * current user if specified within the name of a secret. This token
+     * applies to both connections and connection groups.
+     */
+    private static final String USERNAME_TOKEN = ""GUAC_USERNAME"";
+
+    /**
+     * The name of the token which will be replaced with the name of the
+     * current connection group if specified within the name of a secret. This
+     * token only applies only to connection groups.
+     */
+    private static final String CONNECTION_GROUP_NAME_TOKEN = ""CONNECTION_GROUP_NAME"";
+
+    /**
+     * The name of the token which will be replaced with the identifier of the
+     * current connection group if specified within the name of a secret. This
+     * token only applies only to connection groups.
+     */
+    private static final String CONNECTION_GROUP_IDENTIFIER_TOKEN = ""CONNECTION_GROUP_ID"";
+
+    /**
+     * The name of the token which will be replaced with the \""hostname\""
+     * connection parameter of the current connection if specified within the
+     * name of a secret. This token only applies only to connections.
+     */
+    private static final String CONNECTION_HOSTNAME_TOKEN = ""CONNECTION_HOSTNAME"";
+
+    /**
+     * The name of the token which will be replaced with the \""username\""
+     * connection parameter of the current connection if specified within the
+     * name of a secret. This token only applies only to connections.
+     */
+    private static final String CONNECTION_USERNAME_TOKEN = ""CONNECTION_USERNAME"";
+
+    /**
+     * The name of the token which will be replaced with the name of the
+     * current connection if specified within the name of a secret. This token
+     * only applies only to connections.
+     */
+    private static final String CONNECTION_NAME_TOKEN = ""CONNECTION_NAME"";
+
+    /**
+     * The name of the token which will be replaced with the identifier of the
+     * current connection if specified within the name of a secret. This token
+     * only applies only to connections.
+     */
+    private static final String CONNECTION_IDENTIFIER_TOKEN = ""CONNECTION_ID"";
+
+    /**
+     * Service for retrieving configuration information.
+     */
+    @Inject
+    private VaultConfigurationService confService;
+
+    /**
+     * Service for retrieving the values of secrets stored in a vault.
+     */
+    @Inject
+    private VaultSecretService secretService;
+
+    /**
+     * Creates a new VaultUserContext which automatically injects tokens
+     * containing values of secrets retrieved from a vault. The given
+     * UserContext is decorated such that connections and connection groups
+     * will receive additional tokens during the connection process.
+     *
+     * Note that this class depends on concrete implementations of the
+     * following classes to be provided via dependency injection:
+     *
+     *     - VaultConfigurationService
+     *     - VaultSecretService
+     *
+     * Bindings providing these concrete implementations will need to be
+     * provided by subclasses of VaultAuthenticationProviderModule for each
+     * supported vault.
+     *
+     * @param userContext
+     *     The UserContext instance to decorate.
+     */
+    @AssistedInject
+    public VaultUserContext(@Assisted UserContext userContext) {
+        super(userContext);
+    }
+
+    /**
+     * Creates a new TokenFilter instance with token values set for all tokens
+     * which are not specific to connections or connection groups. Currently,
+     * this is only the username token (""GUAC_USERNAME"").
+     *
+     * @return
+     *     A new TokenFilter instance with token values set for all tokens
+     *     which are not specific to connections or connection groups.
+     */
+    private TokenFilter createFilter() {
+        TokenFilter filter = new TokenFilter();
+        filter.setToken(USERNAME_TOKEN, self().getIdentifier());
+        return filter;
+    }
+
+    /**
+     * Initiates asynchronous retrieval of all applicable tokens and
+     * corresponding values from the vault, using the given TokenFilter to
+     * filter tokens within the secret names prior to retrieving those secrets.
+     *
+     * @param tokenMapping
+     *     The mapping dictating the name of the secret which maps to each
+     *     parameter token, where the key is the name of the parameter token
+     *     and the value is the name of the secret. The name of the secret
+     *     may contain its own tokens, which will be substituted using values
+     *     from the given filter.
+     *
+     * @param filter
+     *     The filter to use to substitute values for tokens in the names of
+     *     secrets to be retrieved from the vault.
+     *
+     * @return
+     *     A Map of token name to Future, where each Future represents the
+     *     pending retrieval operation which will ultimately be completed with
+     *     the value of all secret mapped to that token.
+     *
+     * @throws GuacamoleException
+     *     If the value for any applicable secret cannot be retrieved from the
+     *     vault due to an error.
+     */
+    private Map<String, Future<String>> getTokens(Map<String, String> tokenMapping,
+            TokenFilter filter) throws GuacamoleException {
+
+        // Populate map with pending secret retrieval operations corresponding
+        // to each mapped token
+        Map<String, Future<String>> pendingTokens = new HashMap<>(tokenMapping.size());
+        for (Map.Entry<String, String> entry : tokenMapping.entrySet()) {
+
+            // Translate secret pattern into secret name, ignoring any
+            // secrets which cannot be translated
+            String secretName;
+            try {
+                secretName = secretService.canonicalize(filter.filterStrict(entry.getValue()));
+            }
+            catch (GuacamoleTokenUndefinedException e) {
+                logger.debug(""Secret for token \""{}\"" will not be retrieved. ""
+                        + ""Token \""{}\"" within mapped secret name has no ""
+                        + ""defined value in the current context."",
+                        entry.getKey(), e.getTokenName());
+                continue;
+            }
+
+            // Initiate asynchronous retrieval of the token value
+            String tokenName = entry.getKey();
+            Future<String> secret = secretService.getValue(secretName);
+            pendingTokens.put(tokenName, secret);
+
+        }
+
+        return pendingTokens;
+
+    }
+
+    /**
+     * Waits for all pending secret retrieval operations to complete,
+     * transforming each Future within the given Map into its contained String
+     * value.
+     *
+     * @param pendingTokens
+     *     A Map of token name to Future, where each Future represents the
+     *     pending retrieval operation which will ultimately be completed with
+     *     the value of all secret mapped to that token.
+     *","[{'comment': 'Missing `@return` tag.', 'commenter': 'necouchman'}, {'comment': 'Whoops. Will fix.', 'commenter': 'mike-jumper'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-azure/pom.xml,"@@ -0,0 +1,168 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-vault-azure</artifactId>
+    <packaging>jar</packaging>
+    <version>1.0.0</version>","[{'comment': 'Guessing this should be bumped to 1.1.0 and probably rebased on the current master.', 'commenter': 'necouchman'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-azure/pom.xml,"@@ -0,0 +1,168 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    ""License""); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
+                        http://maven.apache.org/maven-v4_0_0.xsd"">
+
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>org.apache.guacamole</groupId>
+    <artifactId>guacamole-auth-vault-azure</artifactId>
+    <packaging>jar</packaging>
+    <version>1.0.0</version>
+    <name>guacamole-auth-vault-azure</name>
+    <url>http://guacamole.apache.org/</url>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <parent>
+        <groupId>org.apache.guacamole</groupId>
+        <artifactId>guacamole-auth-vault</artifactId>
+        <version>1.0.0</version>
+        <relativePath>../../</relativePath>
+    </parent>
+
+    <build>
+        <plugins>
+
+            <!-- Written for Java 1.8 -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.3</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                    <compilerArgs>
+                        <arg>-Xlint:all</arg>
+                        <arg>-Werror</arg>
+                    </compilerArgs>
+                    <fork>true</fork>
+                </configuration>
+            </plugin>
+
+            <!-- Copy dependencies prior to packaging -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.10</version>
+                <executions>
+                    <execution>
+                        <id>unpack-dependencies</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>unpack-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <includeScope>runtime</includeScope>
+                            <outputDirectory>${project.build.directory}/classes</outputDirectory>
+                            <excludes>META-INF/*.SF,META-INF/*.DSA</excludes>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <!-- Verify format using Apache RAT -->
+            <plugin>
+                <groupId>org.apache.rat</groupId>
+                <artifactId>apache-rat-plugin</artifactId>
+                <version>0.12</version>
+
+                <configuration>
+                    <excludes>
+                        <exclude>**/*.json</exclude>
+                    </excludes>
+                </configuration>
+
+                <!-- Bind RAT to validate phase -->
+                <executions>
+                    <execution>
+                        <id>validate</id>
+                        <phase>validate</phase>
+                        <goals>
+                            <goal>check</goal>
+                        </goals>
+                    </execution>
+                </executions>
+
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <dependencies>
+
+        <!-- Guacamole Extension API -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-ext</artifactId>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Guacamole base key vault support -->
+        <dependency>
+            <groupId>org.apache.guacamole</groupId>
+            <artifactId>guacamole-auth-vault-base</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
+        <!-- Azure Key Vault client -->
+        <dependency>
+            <groupId>com.microsoft.azure</groupId>
+            <artifactId>azure-keyvault</artifactId>
+
+            <!-- NOTE: Version 1.1.1 causes a segfault in the JVM at
+            build time, 1.1.0 does not exist, and 1.1 (apparently meant as
+            1.1.0) fails to define ServiceClientCredentials. -->
+            <version>1.0.0</version>","[{'comment': ""Looks like they're up to 1.2.1, now."", 'commenter': 'necouchman'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-base/src/main/java/org/apache/guacamole/auth/vault/VaultAuthenticationProviderModule.java,"@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.assistedinject.FactoryModuleBuilder;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.vault.user.VaultUserContext;
+import org.apache.guacamole.auth.vault.user.VaultUserContextFactory;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.apache.guacamole.net.auth.UserContext;
+
+/**
+ * Guice module which configures injections specific to the base support for
+ * key vaults. When adding support for a key vault provider, a subclass
+ * specific to that vault implementation will need to be created.
+ *
+ * @see AzureKeyVaultAuthenticationProviderModule
+ */
+public abstract class VaultAuthenticationProviderModule extends AbstractModule {
+
+    /**
+     * Guacamole server environment.
+     */
+    private final Environment environment;
+
+    /**
+     * Creates a new AzureKeyVaultAuthenticationProviderModule which","[{'comment': 'Copypasta?  I think this should create a new `VaultAuthenticationProviderModule`, not the Azure version?', 'commenter': 'necouchman'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-base/src/main/java/org/apache/guacamole/auth/vault/VaultAuthenticationProviderModule.java,"@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.assistedinject.FactoryModuleBuilder;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.vault.user.VaultUserContext;
+import org.apache.guacamole.auth.vault.user.VaultUserContextFactory;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.apache.guacamole.net.auth.UserContext;
+
+/**
+ * Guice module which configures injections specific to the base support for
+ * key vaults. When adding support for a key vault provider, a subclass
+ * specific to that vault implementation will need to be created.
+ *
+ * @see AzureKeyVaultAuthenticationProviderModule","[{'comment': 'Is it normal to reference child implementation classes?  Might be, just making sure.', 'commenter': 'necouchman'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-base/src/main/java/org/apache/guacamole/auth/vault/conf/VaultConfigurationService.java,"@@ -0,0 +1,106 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.conf;
+
+import com.google.inject.Inject;
+import java.io.File;
+import java.io.IOException;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.environment.Environment;
+import org.codehaus.jackson.map.ObjectMapper;
+import org.codehaus.jackson.type.TypeReference;
+
+/**
+ * Base class for services which retrieve key vault configuration information.
+ * A concrete implementation of this class must be defined and bound for key
+ * vault support to work.
+ *
+ * @see VaultAuthenticationProviderModule
+ */
+public abstract class VaultConfigurationService {
+
+    /**
+     * The Guacamole server environment.
+     */
+    @Inject
+    private Environment environment;
+
+    /**
+     * ObjectMapper for deserializing JSON.
+     */
+    private static final ObjectMapper mapper = new ObjectMapper();
+
+    /**
+     * The name of the file containing a JSON mapping of Guacamole parameter
+     * token to vault secret name.
+     */
+    private final String tokenMappingFilename;
+
+    /**
+     * Creates a new VaultConfigurationService which retrieves the token/secret
+     * mapping from a JSON file having the given name.
+     *
+     * @param tokenMappingFilename
+     *     The name of the JSON file containing the token/secret mapping.
+     */
+    protected VaultConfigurationService(String tokenMappingFilename) {
+        this.tokenMappingFilename = tokenMappingFilename;
+    }
+
+    /**
+     * Returns a mapping dictating the name of the secret which maps to each
+     * parameter token. In the returned mapping, the the value of each entry is","[{'comment': 'An extra extra ""the"", here, I think.', 'commenter': 'necouchman'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-base/src/main/java/org/apache/guacamole/auth/vault/user/VaultUserContext.java,"@@ -0,0 +1,329 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.user;
+
+import com.google.inject.Inject;
+import com.google.inject.assistedinject.Assisted;
+import com.google.inject.assistedinject.AssistedInject;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.auth.vault.conf.VaultConfigurationService;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.TokenInjectingUserContext;
+import org.apache.guacamole.net.auth.UserContext;
+import org.apache.guacamole.auth.vault.secret.VaultSecretService;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+import org.apache.guacamole.token.GuacamoleTokenUndefinedException;
+import org.apache.guacamole.token.TokenFilter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * UserContext implementation which automatically injects tokens containing the
+ * values of secrets retrieved from a vault.
+ */
+public class VaultUserContext extends TokenInjectingUserContext {
+
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(VaultUserContext.class);
+
+    /**
+     * The name of the token which will be replaced with the username of the
+     * current user if specified within the name of a secret. This token
+     * applies to both connections and connection groups.
+     */
+    private static final String USERNAME_TOKEN = ""GUAC_USERNAME"";","[{'comment': 'I think this is probably defined in an upstream token class?  Is there a rationale for redefining it, here, or at least for not referencing the upstream implementation?', 'commenter': 'necouchman'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-base/src/main/java/org/apache/guacamole/auth/vault/user/VaultUserContext.java,"@@ -0,0 +1,329 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.vault.user;
+
+import com.google.inject.Inject;
+import com.google.inject.assistedinject.Assisted;
+import com.google.inject.assistedinject.AssistedInject;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.auth.vault.conf.VaultConfigurationService;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.TokenInjectingUserContext;
+import org.apache.guacamole.net.auth.UserContext;
+import org.apache.guacamole.auth.vault.secret.VaultSecretService;
+import org.apache.guacamole.protocol.GuacamoleConfiguration;
+import org.apache.guacamole.token.GuacamoleTokenUndefinedException;
+import org.apache.guacamole.token.TokenFilter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * UserContext implementation which automatically injects tokens containing the
+ * values of secrets retrieved from a vault.
+ */
+public class VaultUserContext extends TokenInjectingUserContext {
+
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(VaultUserContext.class);
+
+    /**
+     * The name of the token which will be replaced with the username of the
+     * current user if specified within the name of a secret. This token
+     * applies to both connections and connection groups.
+     */
+    private static final String USERNAME_TOKEN = ""GUAC_USERNAME"";
+
+    /**
+     * The name of the token which will be replaced with the name of the
+     * current connection group if specified within the name of a secret. This
+     * token only applies only to connection groups.
+     */
+    private static final String CONNECTION_GROUP_NAME_TOKEN = ""CONNECTION_GROUP_NAME"";
+
+    /**
+     * The name of the token which will be replaced with the identifier of the
+     * current connection group if specified within the name of a secret. This
+     * token only applies only to connection groups.
+     */
+    private static final String CONNECTION_GROUP_IDENTIFIER_TOKEN = ""CONNECTION_GROUP_ID"";
+
+    /**
+     * The name of the token which will be replaced with the \""hostname\""
+     * connection parameter of the current connection if specified within the
+     * name of a secret. This token only applies only to connections.
+     */
+    private static final String CONNECTION_HOSTNAME_TOKEN = ""CONNECTION_HOSTNAME"";
+
+    /**
+     * The name of the token which will be replaced with the \""username\""
+     * connection parameter of the current connection if specified within the
+     * name of a secret. This token only applies only to connections.
+     */
+    private static final String CONNECTION_USERNAME_TOKEN = ""CONNECTION_USERNAME"";
+
+    /**
+     * The name of the token which will be replaced with the name of the
+     * current connection if specified within the name of a secret. This token
+     * only applies only to connections.
+     */
+    private static final String CONNECTION_NAME_TOKEN = ""CONNECTION_NAME"";
+
+    /**
+     * The name of the token which will be replaced with the identifier of the
+     * current connection if specified within the name of a secret. This token
+     * only applies only to connections.
+     */
+    private static final String CONNECTION_IDENTIFIER_TOKEN = ""CONNECTION_ID"";
+
+    /**
+     * Service for retrieving configuration information.
+     */
+    @Inject
+    private VaultConfigurationService confService;
+
+    /**
+     * Service for retrieving the values of secrets stored in a vault.
+     */
+    @Inject
+    private VaultSecretService secretService;","[{'comment': ':dark_sunglasses: ', 'commenter': 'necouchman'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-base/src/main/resources/translations/en.json,"@@ -0,0 +1,7 @@
+{
+
+    ""DATA_SOURCE_AZURE_KEYVAULT"" : {","[{'comment': 'Maybe copypasta?  This is the translation file from the -base module, but is referencing the Azure keyvault.  This should be in the azure-keyvault module, no?', 'commenter': 'necouchman'}]"
336,extensions/guacamole-auth-vault/modules/guacamole-auth-vault-dist/src/licenses/LICENSE,"@@ -0,0 +1,428 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      ""License"" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      ""Licensor"" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      ""Legal Entity"" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      ""control"" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      ""You"" (or ""Your"") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      ""Source"" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      ""Object"" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      ""Work"" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      ""Derivative Works"" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      ""Contribution"" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, ""submitted""
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as ""Not a Contribution.""
+
+      ""Contributor"" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a ""NOTICE"" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an ""AS IS"" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets ""[]""
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same ""printed page"" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the ""License"");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an ""AS IS"" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+
+==============================================================================
+
+APACHE GUACAMOLE SUBCOMPONENTS
+
+Apache Guacamole includes a number of subcomponents with separate copyright
+notices and license terms. Your use of these subcomponents is subject to the
+terms and conditions of the following licenses.
+
+
+AOP Alliance (http://aopalliance.sourceforge.net/)
+--------------------------------------------------
+
+    Version: 1.0
+    From: 'AOP Alliance' (http://aopalliance.sourceforge.net/members.html)
+    License(s):
+        Public Domain (bundled/aopalliance-1.0/LICENSE)
+
+
+Azure AutoRest Client Runtimes for Java
+(https://github.com/Azure/autorest-clientruntime-for-java)
+----------------------------------------------------------
+
+    Version: 1.0.0
+    From: 'Microsoft Azure' (https://github.com/Azure)
+    License(s):
+        MIT (bundled/azure-client-runtime-1.0.0/LICENSE)
+
+The MIT License (MIT)
+
+Copyright (c) 2016 Microsoft Azure
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the ""Software""), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+
+
+Azure SDK for Java (https://github.com/Azure/azure-sdk-for-java/)
+-----------------------------------------------------------------
+
+    Version: 1.0.0
+    From: 'Microsoft' (https://microsoft.com/)
+    License(s):
+        MIT (bundled/azure-sdk-for-java-1.0.0/LICENSE.txt)
+
+The MIT License (MIT)
+
+Copyright (c) 2015 Microsoft
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the ""Software""), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+
+
+Apache Commons Codec (http://commons.apache.org/proper/commons-codec/)
+----------------------------------------------------------------------
+
+    Version: 1.10
+    From: 'Apache Software Foundation' (http://apache.org/)
+    License(s):
+        Apache v2.0 (bundled/commons-codec-1.10/LICENSE.txt)
+
+
+Apache Commons Lang (http://commons.apache.org/proper/commons-lang/)
+--------------------------------------------------------------------
+
+    Version: 3.4
+    From: 'Apache Software Foundation' (http://apache.org/)
+    License(s):
+        Apache v2.0 (bundled/commons-lang-3.4/LICENSE.txt)
+
+","[{'comment': 'The Azure SDK licenses are in the bundled directory for the vault-dist module, but not in this file?  Guessing they should either be here, or removed from dist module and only included in the azure module?', 'commenter': 'necouchman'}]"
336,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/TokenInjectingUserContext.java,"@@ -83,8 +83,13 @@ public TokenInjectingUserContext(UserContext userContext) {
      * @return
      *     The tokens which should be added to the in-progress call to
      *     connect().
+     *
+     * @throws GuacamoleException
+     *     If the tokens applicable to the given connection cannot be
+     *     generated.","[{'comment': 'Are there implications any of the other existing users of this class for adding this exception, here?  Presumably this represents a change to the API, which might bump these changes into 2.0.0 version?', 'commenter': 'necouchman'}]"
336,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/TokenInjectingUserContext.java,"@@ -100,8 +105,13 @@ public TokenInjectingUserContext(UserContext userContext) {
      * @return
      *     The tokens which should be added to the in-progress call to
      *     connect().
+     *
+     * @throws GuacamoleException
+     *     If the tokens applicable to the given connection group cannot be
+     *     generated.","[{'comment': 'Same as above comment for adding this to an existing method...', 'commenter': 'necouchman'}]"
336,guacamole-ext/src/main/java/org/apache/guacamole/token/GuacamoleTokenUndefinedException.java,"@@ -0,0 +1,96 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.token;
+
+import org.apache.guacamole.GuacamoleServerException;
+
+/**
+ * An exception thrown when a token cannot be substituted because it has no
+ * corresponding value. Additional information describing the undefined token
+ * is provided.
+ */
+public class GuacamoleTokenUndefinedException extends GuacamoleServerException {
+
+    /**
+     * The name off the token that is undefined.","[{'comment': 'off -> of', 'commenter': 'necouchman'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -240,17 +244,24 @@ public LDAPAuthenticatedUser authenticateUser(Credentials credentials)
 
         try {
 
+            LdapConnectionConfig ldapConnectionConfig =
+                    ((LdapNetworkConnection) ldapConnection).getConfig();","[{'comment': 'Is this typecast necessary? If `bindAs()` will always return an `LdapNetworkConnection` and we need to use that object as an `LdapNetworkConnection`, then `bindAs()` should be declared as such.\r\n\r\n... This may not be relevant depending on the answer to the comment regarding `new Dn(ldapConnectionConfig.getName())`, though.', 'commenter': 'mike-jumper'}, {'comment': ""I'll see what makes the most sense - maybe just converting everything to LdapNetworkConnection  is the most straight-forward, since that's really the only implementation that ever gets used."", 'commenter': 'necouchman'}, {'comment': ""Unfortunately a different LdapConnection implementation does get used - LdapReferralConnection.  I might be able to clean up some of it, but I think some of the typecasting will have to stay.  We'll see."", 'commenter': 'necouchman'}, {'comment': 'Nevermind...I was able to clean this stuff up.', 'commenter': 'necouchman'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -240,17 +244,24 @@ public LDAPAuthenticatedUser authenticateUser(Credentials credentials)
 
         try {
 
+            LdapConnectionConfig ldapConnectionConfig =
+                    ((LdapNetworkConnection) ldapConnection).getConfig();
+            Dn authDn = new Dn(ldapConnectionConfig.getName());","[{'comment': 'Is there a better way of retrieving the `Dn` than reparsing it from a string? Perhaps it could be stored somewhere by the relevant `bindAs()` implementation? Or perhaps we should be using our own object that provides access to both the `LdapConnection` and the bind `Dn`?', 'commenter': 'mike-jumper'}, {'comment': ""I'll take a look and try to figure something out."", 'commenter': 'necouchman'}, {'comment': ""So I took one stab at a way to do this, storing a `Dn` object called `bindDn` in the `LDAPAuthenticatedUser` class.  I'm not sure it's the right way to go (and haven't tested it to make sure it works), but let me know if that seems reasonable or if I should try another route.\r\n\r\nI also thought about creating a new `LDAPCredentials` class that extends `Credentials` and adding the bindDn into that, but that would require importing other things (JAX-RS) into the guacamole-auth-ldap module, and that seemed like a lot of extra stuff just to find a place to store the bind DN.\r\n\r\nI'm open to other suggestions."", 'commenter': 'necouchman'}, {'comment': ""This does seem to work (now that I cleared up the other things that were wrong), but let me know if it's a reasonable approach or if I should try something else."", 'commenter': 'necouchman'}, {'comment': 'ping @mike-jumper ', 'commenter': 'necouchman'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -156,38 +146,84 @@ public LDAPConnection bindAs(String userDN, String password)
         // Bind using provided credentials
         try {
 
-            byte[] passwordBytes;
-            try {
-
-                // Convert password into corresponding byte array
-                if (password != null)
-                    passwordBytes = password.getBytes(""UTF-8"");
-                else
-                    passwordBytes = null;
-
-            }
-            catch (UnsupportedEncodingException e) {
-                logger.error(""Unexpected lack of support for UTF-8: {}"", e.getMessage());
-                logger.debug(""Support for UTF-8 (as required by Java spec) not found."", e);
-                disconnect(ldapConnection);
-                return null;
-            }
-
-            // Bind as user
-            ldapConnection.bind(LDAPConnection.LDAP_V3, userDN, passwordBytes);
+            BindRequest bindRequest = new BindRequestImpl();
+            bindRequest.setDn(userDN);
+            bindRequest.setCredentials(password);
+            ldapConnection.bind(bindRequest);
 
         }
 
         // Disconnect if an error occurs during bind
-        catch (LDAPException e) {
-            logger.debug(""LDAP bind failed."", e);
+        catch (LdapException e) {
+            logger.debug(""Unable to bind to LDAP server."", e);
             disconnect(ldapConnection);
             return null;
         }
 
         return ldapConnection;
 
     }
+    
+    /**
+     * Generate a new LdapConnection object for following a referral
+     * with the given LdapUrl, and copy the username and password
+     * from the original connection.
+     * 
+     * @param referralUrl
+     *     The LDAP URL to follow.
+     * 
+     * @param ldapConfig
+     *     The connection configuration to use to retrieve username and
+     *     password.
+     * 
+     * @param hop
+     *     The current hop number of this referral - once the configured
+     *     limit is reached, this method will throw an exception.
+     * 
+     * @return
+     *     A LdapConnection object that points at the location
+     *     specified in the referralUrl.
+     *     
+     * @throws GuacamoleException
+     *     If an error occurs parsing out the LdapUrl object or the
+     *     maximum number of referral hops is reached.
+     */
+    public LdapConnection referralConnection(LdapUrl referralUrl,
+            LdapConnectionConfig ldapConfig, Integer hop) ","[{'comment': 'Why `Integer` and not `int`?', 'commenter': 'mike-jumper'}, {'comment': 'Bad habits?! :smile:', 'commenter': 'necouchman'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -188,46 +183,50 @@ public String generateQuery(String filter,
      *     information required to execute the query cannot be read from
      *     guacamole.properties.
      */
-    public List<LDAPEntry> search(LDAPConnection ldapConnection,
-            String baseDN, String query) throws GuacamoleException {
+    public List<Entry> search(LdapConnection ldapConnection,
+            Dn baseDN, ExprNode query) throws GuacamoleException {
 
         logger.debug(""Searching \""{}\"" for objects matching \""{}\""."", baseDN, query);
 
         try {
 
+            LdapConnectionConfig ldapConnectionConfig =
+                    ((LdapNetworkConnection) ldapConnection).getConfig();
+            
             // Search within subtree of given base DN
-            LDAPSearchResults results = ldapConnection.search(baseDN,
-                    LDAPConnection.SCOPE_SUB, query, null, false,
-                    confService.getLDAPSearchConstraints());
+            SearchRequest request = ldapService.getSearchRequest(baseDN,
+                    query);
+            
+            SearchCursor results = ldapConnection.search(request);
 
             // Produce list of all entries in the search result, automatically
             // following referrals if configured to do so
-            List<LDAPEntry> entries = new ArrayList<>(results.getCount());
-            while (results.hasMore()) {
+            List<Entry> entries = new ArrayList<>();
+            while (results.next()) {
 
-                try {
-                    entries.add(results.next());
+                Response response = results.get();
+                if (response instanceof SearchResultEntry) {","[{'comment': 'Any way to avoid all the `instanceof` and typecasts? I see functions like `isReferral()` and `getReferral()` on `SearchCursor`.', 'commenter': 'mike-jumper'}, {'comment': ""I'll take a closer look."", 'commenter': 'necouchman'}, {'comment': 'Reworked to avoid this using the calls you mentioned.', 'commenter': 'necouchman'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -188,46 +183,50 @@ public String generateQuery(String filter,
      *     information required to execute the query cannot be read from
      *     guacamole.properties.
      */
-    public List<LDAPEntry> search(LDAPConnection ldapConnection,
-            String baseDN, String query) throws GuacamoleException {
+    public List<Entry> search(LdapConnection ldapConnection,
+            Dn baseDN, ExprNode query) throws GuacamoleException {
 
         logger.debug(""Searching \""{}\"" for objects matching \""{}\""."", baseDN, query);
 
         try {
 
+            LdapConnectionConfig ldapConnectionConfig =
+                    ((LdapNetworkConnection) ldapConnection).getConfig();
+            
             // Search within subtree of given base DN
-            LDAPSearchResults results = ldapConnection.search(baseDN,
-                    LDAPConnection.SCOPE_SUB, query, null, false,
-                    confService.getLDAPSearchConstraints());
+            SearchRequest request = ldapService.getSearchRequest(baseDN,
+                    query);
+            
+            SearchCursor results = ldapConnection.search(request);
 
             // Produce list of all entries in the search result, automatically
             // following referrals if configured to do so
-            List<LDAPEntry> entries = new ArrayList<>(results.getCount());
-            while (results.hasMore()) {
+            List<Entry> entries = new ArrayList<>();
+            while (results.next()) {
 
-                try {
-                    entries.add(results.next());
+                Response response = results.get();
+                if (response instanceof SearchResultEntry) {
+                    entries.add(((SearchResultEntry) response).getEntry());
                 }
-
-                // Warn if referrals cannot be followed
-                catch (LDAPReferralException e) {
-                    if (confService.getFollowReferrals()) {
-                        logger.error(""Could not follow referral: {}"", e.getFailedReferral());
-                        logger.debug(""Error encountered trying to follow referral."", e);
-                        throw new GuacamoleServerException(""Could not follow LDAP referral."", e);
-                    }
-                    else {
-                        logger.warn(""Given a referral, but referrals are disabled. Error was: {}"", e.getMessage());
-                        logger.debug(""Got a referral, but configured to not follow them."", e);
+                else if (response instanceof SearchResultReference &&
+                        request.isFollowReferrals()) {
+                    
+                    Referral referral = ((SearchResultReference) response).getReferral();
+                    int referralHop = 0;
+                    for (String url : referral.getLdapUrls()) {
+                        LdapConnection referralConnection = ldapService.referralConnection(
+                            new LdapUrl(url), ldapConnectionConfig, referralHop++);
+                        entries.addAll(search(referralConnection, baseDN, query));","[{'comment': ""I'm not sure this is correct. Each call to `search()` will effectively reset that `referralHop` counter. Doesn't this need to be tracked recursively such that it limits the depth of the referral tree?"", 'commenter': 'mike-jumper'}, {'comment': ""Yeah, you're probably right.  The entire recursion of this function was kind of a wild stab, so I'm not surprised I made a few mistakes along the way."", 'commenter': 'necouchman'}, {'comment': ""Took a stab at this, as well - not entirely sure this is the best/cleanest way, but let me know what you think.  As usual, I'm open to suggestions for how to approach it."", 'commenter': 'necouchman'}, {'comment': 'ping @mike-jumper ', 'commenter': 'necouchman'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/conf/LdapFilterGuacamoleProperty.java,"@@ -0,0 +1,53 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap.conf;
+
+import java.text.ParseException;
+import org.apache.directory.api.ldap.model.filter.ExprNode;
+import org.apache.directory.api.ldap.model.filter.FilterParser;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.properties.GuacamoleProperty;
+
+/**
+ * A GuacamoleProperty with a value of an ExprNode query filter.  The string
+ * provided is passed through the FilterParser returning the ExprNode object,
+ * or an exception is thrown if the filter is invalid and cannot be correctly
+ * parsed.
+ */
+public abstract class LdapFilterGuacamoleProperty implements GuacamoleProperty<ExprNode> {
+
+    @Override
+    public ExprNode parseValue(String value) throws GuacamoleException {
+
+        // No value provided, so return null.
+        if (value == null)
+            return null;
+
+        try {
+            return FilterParser.parse(value);
+        }
+        catch (ParseException e) {
+            throw new GuacamoleServerException(""Error parsing filter"", e);","[{'comment': 'I think this error should be clearer. ""Error parsing filter"" is a bit vague, as the important fact for the user/admin is that filter X is invalid. In this case, that fact (filter is invalid) is hidden here behind what is an internal detail (an error occurred parsing it). If it\'s possible to tell the user why something is failing without requiring them to deduce the reason for the failure, we should do so.\r\n\r\nThere\'s a big difference in pain level when troubleshooting `Error parsing filter` vs. something like `""(dn=invalid))"" is not a valid LDAP filter`.', 'commenter': 'mike-jumper'}, {'comment': 'Will reword.', 'commenter': 'necouchman'}, {'comment': 'Reworded.', 'commenter': 'necouchman'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/conf/LdapDnGuacamoleProperty.java,"@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap.conf;
+
+import org.apache.directory.api.ldap.model.exception.LdapInvalidDnException;
+import org.apache.directory.api.ldap.model.name.Dn;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.properties.GuacamoleProperty;
+
+/**
+ * A GuacamoleProperty that converts a string to a Dn that can be used
+ * in LDAP connections.  An exception is thrown if the provided DN is invalid
+ * and cannot be parsed.
+ */
+public abstract class LdapDnGuacamoleProperty implements GuacamoleProperty<Dn> {
+
+    @Override
+    public Dn parseValue(String value) throws GuacamoleException {
+
+        if (value == null)
+            return null;
+
+        try {
+            return new Dn(value);
+        }
+        catch (LdapInvalidDnException e) {
+            throw new GuacamoleServerException(""Invalid DN specified in configuration."", e);","[{'comment': 'To avoid confusion, probably better to include the DN in question. Maybe `Specified DN ""thednhere"" is not valid` or `""thednhere"" is not a valid DN.`, etc.?', 'commenter': 'mike-jumper'}, {'comment': ""Sounds good, I'll rework this error a bit."", 'commenter': 'necouchman'}, {'comment': 'Reworded.', 'commenter': 'necouchman'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -106,86 +125,113 @@ private LDAPConnection createLDAPConnection() throws GuacamoleException {
      * @throws GuacamoleException
      *     If an error occurs while binding to the LDAP server.
      */
-    public LDAPConnection bindAs(String userDN, String password)
+    public LdapNetworkConnection bindAs(Dn userDN, String password)
             throws GuacamoleException {
 
-        // Obtain appropriately-configured LDAPConnection instance
-        LDAPConnection ldapConnection = createLDAPConnection();
-
-        // Configure LDAP connection constraints
-        LDAPConstraints ldapConstraints = ldapConnection.getConstraints();
-        if (ldapConstraints == null)
-          ldapConstraints = new LDAPConstraints();
-
-        // Set whether or not we follow referrals
-        ldapConstraints.setReferralFollowing(confService.getFollowReferrals());
-
-        // Set referral authentication to use the provided credentials.
-        if (userDN != null && !userDN.isEmpty())
-            ldapConstraints.setReferralHandler(new ReferralAuthHandler(userDN, password));
-
-        // Set the maximum number of referrals we follow
-        ldapConstraints.setHopLimit(confService.getMaxReferralHops());
-
-        // Set timelimit to wait for LDAP operations, converting to ms
-        ldapConstraints.setTimeLimit(confService.getOperationTimeout() * 1000);
-
-        // Apply the constraints to the connection
-        ldapConnection.setConstraints(ldapConstraints);
+        // Obtain appropriately-configured LdapNetworkConnection instance
+        LdapNetworkConnection ldapConnection = createLDAPConnection();
 
         try {
 
             // Connect to LDAP server
-            ldapConnection.connect(
-                confService.getServerHostname(),
-                confService.getServerPort()
-            );
+            ldapConnection.connect();
 
             // Explicitly start TLS if requested
             if (confService.getEncryptionMethod() == EncryptionMethod.STARTTLS)
-                ldapConnection.startTLS();
+                ldapConnection.startTls();
 
         }
-        catch (LDAPException e) {
-            logger.error(""Unable to connect to LDAP server: {}"", e.getMessage());
-            logger.debug(""Failed to connect to LDAP server."", e);
-            return null;
+        catch (LdapException e) {
+            throw new GuacamoleServerException(""Error connecting to LDAP server."", e);
         }
 
         // Bind using provided credentials
         try {
 
-            byte[] passwordBytes;
-            try {
-
-                // Convert password into corresponding byte array
-                if (password != null)
-                    passwordBytes = password.getBytes(""UTF-8"");
-                else
-                    passwordBytes = null;
-
-            }
-            catch (UnsupportedEncodingException e) {
-                logger.error(""Unexpected lack of support for UTF-8: {}"", e.getMessage());
-                logger.debug(""Support for UTF-8 (as required by Java spec) not found."", e);
-                disconnect(ldapConnection);
-                return null;
-            }
-
-            // Bind as user
-            ldapConnection.bind(LDAPConnection.LDAP_V3, userDN, passwordBytes);
+            BindRequest bindRequest = new BindRequestImpl();
+            bindRequest.setDn(userDN);
+            bindRequest.setCredentials(password);
+            BindResponse bindResponse = ldapConnection.bind(bindRequest);
+            if (bindResponse.getLdapResult().getResultCode() == ResultCodeEnum.SUCCESS)
+                return ldapConnection;
+            
+            else
+                throw new GuacamoleInvalidCredentialsException(""Error binding""
+                        + "" to server: "" + bindResponse.toString(),
+                        CredentialsInfo.USERNAME_PASSWORD);
 
         }
 
         // Disconnect if an error occurs during bind
-        catch (LDAPException e) {
-            logger.debug(""LDAP bind failed."", e);
+        catch (LdapException e) {
+            logger.debug(""Unable to bind to LDAP server."", e);
             disconnect(ldapConnection);
-            return null;
+            throw new GuacamoleInvalidCredentialsException(
+                    ""Unable to bind to the LDAP server."",
+                    CredentialsInfo.USERNAME_PASSWORD);
         }
 
-        return ldapConnection;
-
+    }
+    
+    /**
+     * Generate a new LdapNetworkConnection object for following a referral
+     * with the given LdapUrl, and copy the username and password
+     * from the original connection.
+     * 
+     * @param referralUrl
+     *     The LDAP URL to follow.
+     * 
+     * @param ldapConfig
+     *     The connection configuration to use to retrieve username and
+     *     password.
+     * 
+     * @param hop
+     *     The current hop number of this referral - once the configured
+     *     limit is reached, this method will throw an exception.
+     * 
+     * @return
+     *     A LdapNetworkConnection object that points at the location
+     *     specified in the referralUrl.
+     *     
+     * @throws GuacamoleException
+     *     If an error occurs parsing out the LdapUrl object or the
+     *     maximum number of referral hops is reached.
+     */
+    public LdapNetworkConnection referralConnection(LdapUrl referralUrl,","[{'comment': 'To follow convention, this should be named in a manner that reflects what the function does. This feels like naming a function which scrambles eggs `egg()`. ;)', 'commenter': 'mike-jumper'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -178,6 +169,9 @@ public String generateQuery(String filter,
      *
      * @param query
      *     The LDAP query to execute.
+     * 
+     * @param searchHop
+     *     The level of depth for this search, used for tracking referrals.","[{'comment': ""Reading this description, I'm somewhat confused about what `searchHop` is. Is this the current depth of the search? Or the maximum depth? I think this should be made a bit clearer.\r\n\r\nThe code within the function looks like the former."", 'commenter': 'mike-jumper'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -100,65 +99,90 @@
      *     If an error occurs preventing retrieval of connections.
      */
     public Map<String, Connection> getConnections(AuthenticatedUser user,
-            LDAPConnection ldapConnection) throws GuacamoleException {
+            LdapNetworkConnection ldapConnection) throws GuacamoleException {
 
         // Do not return any connections if base DN is not specified
-        String configurationBaseDN = confService.getConfigurationBaseDN();
+        Dn configurationBaseDN = confService.getConfigurationBaseDN();
         if (configurationBaseDN == null)
             return Collections.<String, Connection>emptyMap();
 
         try {
 
             // Pull the current user DN from the LDAP connection
-            String userDN = ldapConnection.getAuthenticationDN();
+            LdapConnectionConfig ldapConnectionConfig = ldapConnection.getConfig();
+            Dn userDN = new Dn(ldapConnectionConfig.getName());
 
             // getConnections() will only be called after a connection has been
             // authenticated (via non-anonymous bind), thus userDN cannot
             // possibly be null
-            assert(userDN != null);
+            assert (userDN != null);","[{'comment': 'A wild space appears!', 'commenter': 'mike-jumper'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -100,65 +99,90 @@
      *     If an error occurs preventing retrieval of connections.
      */
     public Map<String, Connection> getConnections(AuthenticatedUser user,
-            LDAPConnection ldapConnection) throws GuacamoleException {
+            LdapNetworkConnection ldapConnection) throws GuacamoleException {
 
         // Do not return any connections if base DN is not specified
-        String configurationBaseDN = confService.getConfigurationBaseDN();
+        Dn configurationBaseDN = confService.getConfigurationBaseDN();
         if (configurationBaseDN == null)
             return Collections.<String, Connection>emptyMap();
 
         try {
 
             // Pull the current user DN from the LDAP connection
-            String userDN = ldapConnection.getAuthenticationDN();
+            LdapConnectionConfig ldapConnectionConfig = ldapConnection.getConfig();
+            Dn userDN = new Dn(ldapConnectionConfig.getName());
 
             // getConnections() will only be called after a connection has been
             // authenticated (via non-anonymous bind), thus userDN cannot
             // possibly be null
-            assert(userDN != null);
+            assert (userDN != null);
 
             // Get the search filter for finding connections accessible by the
             // current user
-            String connectionSearchFilter = getConnectionSearchFilter(userDN, ldapConnection);
+            ExprNode connectionSearchFilter = getConnectionSearchFilter(userDN, ldapConnection);
 
             // Find all Guacamole connections for the given user by
             // looking for direct membership in the guacConfigGroup
             // and possibly any groups the user is a member of that are
             // referred to in the seeAlso attribute of the guacConfigGroup.
-            List<LDAPEntry> results = queryService.search(ldapConnection, configurationBaseDN, connectionSearchFilter);
+            List<Entry> results = queryService.search(ldapConnection,
+                    configurationBaseDN, connectionSearchFilter, 0);
 
             // Return a map of all readable connections
             return queryService.asMap(results, (entry) -> {
 
                 // Get common name (CN)
-                LDAPAttribute cn = entry.getAttribute(""cn"");
+                Attribute cn = entry.get(""cn"");
+                
                 if (cn == null) {
                     logger.warn(""guacConfigGroup is missing a cn."");
                     return null;
                 }
+                
+                String cnName;
+                
+                try {
+                    cnName = cn.getString();
+                }
+                catch (LdapInvalidAttributeValueException e) {
+                    logger.error(""Invalid value for CN attribute."", e.getMessage());
+                    return null;
+                }
 
                 // Get associated protocol
-                LDAPAttribute protocol = entry.getAttribute(""guacConfigProtocol"");
+                Attribute protocol = entry.get(""guacConfigProtocol"");
                 if (protocol == null) {
                     logger.warn(""guacConfigGroup \""{}\"" is missing the ""
                               + ""required \""guacConfigProtocol\"" attribute."",
-                            cn.getStringValue());
+                            cnName);
                     return null;
                 }
 
                 // Set protocol
                 GuacamoleConfiguration config = new GuacamoleConfiguration();
-                config.setProtocol(protocol.getStringValue());
+                try {
+                    config.setProtocol(protocol.getString());
+                }
+                catch (LdapInvalidAttributeValueException e) {
+                    logger.error(""Invalid value of the protocol entry."", e.getMessage());
+                    return null;
+                }
 
                 // Get parameters, if any
-                LDAPAttribute parameterAttribute = entry.getAttribute(""guacConfigParameter"");
+                Attribute parameterAttribute = entry.get(""guacConfigParameter"");
                 if (parameterAttribute != null) {
 
                     // For each parameter
-                    Enumeration<?> parameters = parameterAttribute.getStringValues();
-                    while (parameters.hasMoreElements()) {
-
-                        String parameter = (String) parameters.nextElement();
+                    while (parameterAttribute.size() > 0) {
+                        String parameter;
+                        try {
+                            parameter = parameterAttribute.getString();
+                        }
+                        catch (LdapInvalidAttributeValueException e) {
+                            logger.warn(""Parameter value not valid for {}"", cnName, e);","[{'comment': ""Exceptions should not be logged at any level higher than debug. The general pattern we've used is to use two calls to the logger: one to log the message at the higher level, and another log the debugging details, including the exception."", 'commenter': 'mike-jumper'}]"
345,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/connection/ConnectionService.java,"@@ -100,65 +99,90 @@
      *     If an error occurs preventing retrieval of connections.
      */
     public Map<String, Connection> getConnections(AuthenticatedUser user,
-            LDAPConnection ldapConnection) throws GuacamoleException {
+            LdapNetworkConnection ldapConnection) throws GuacamoleException {
 
         // Do not return any connections if base DN is not specified
-        String configurationBaseDN = confService.getConfigurationBaseDN();
+        Dn configurationBaseDN = confService.getConfigurationBaseDN();
         if (configurationBaseDN == null)
             return Collections.<String, Connection>emptyMap();
 
         try {
 
             // Pull the current user DN from the LDAP connection
-            String userDN = ldapConnection.getAuthenticationDN();
+            LdapConnectionConfig ldapConnectionConfig = ldapConnection.getConfig();
+            Dn userDN = new Dn(ldapConnectionConfig.getName());
 
             // getConnections() will only be called after a connection has been
             // authenticated (via non-anonymous bind), thus userDN cannot
             // possibly be null
-            assert(userDN != null);
+            assert (userDN != null);
 
             // Get the search filter for finding connections accessible by the
             // current user
-            String connectionSearchFilter = getConnectionSearchFilter(userDN, ldapConnection);
+            ExprNode connectionSearchFilter = getConnectionSearchFilter(userDN, ldapConnection);
 
             // Find all Guacamole connections for the given user by
             // looking for direct membership in the guacConfigGroup
             // and possibly any groups the user is a member of that are
             // referred to in the seeAlso attribute of the guacConfigGroup.
-            List<LDAPEntry> results = queryService.search(ldapConnection, configurationBaseDN, connectionSearchFilter);
+            List<Entry> results = queryService.search(ldapConnection,
+                    configurationBaseDN, connectionSearchFilter, 0);
 
             // Return a map of all readable connections
             return queryService.asMap(results, (entry) -> {
 
                 // Get common name (CN)
-                LDAPAttribute cn = entry.getAttribute(""cn"");
+                Attribute cn = entry.get(""cn"");
+                
                 if (cn == null) {
                     logger.warn(""guacConfigGroup is missing a cn."");
                     return null;
                 }
+                
+                String cnName;
+                
+                try {
+                    cnName = cn.getString();
+                }
+                catch (LdapInvalidAttributeValueException e) {
+                    logger.error(""Invalid value for CN attribute."", e.getMessage());
+                    return null;
+                }
 
                 // Get associated protocol
-                LDAPAttribute protocol = entry.getAttribute(""guacConfigProtocol"");
+                Attribute protocol = entry.get(""guacConfigProtocol"");
                 if (protocol == null) {
                     logger.warn(""guacConfigGroup \""{}\"" is missing the ""
                               + ""required \""guacConfigProtocol\"" attribute."",
-                            cn.getStringValue());
+                            cnName);
                     return null;
                 }
 
                 // Set protocol
                 GuacamoleConfiguration config = new GuacamoleConfiguration();
-                config.setProtocol(protocol.getStringValue());
+                try {
+                    config.setProtocol(protocol.getString());
+                }
+                catch (LdapInvalidAttributeValueException e) {
+                    logger.error(""Invalid value of the protocol entry."", e.getMessage());","[{'comment': 'Is `e.getMessage()` included within the output even though `{}` is not present in the string?', 'commenter': 'mike-jumper'}]"
346,guacamole/src/main/webapp/app/auth/service/authenticationService.js,"@@ -290,13 +290,20 @@ angular.module('auth').factory('authenticationService', ['$injector',
         var token = service.getCurrentToken();
         clearAuthenticationResult();
 
-        // Notify listeners that a token is being destroyed
-        $rootScope.$broadcast('guacLogout', token);
+        // Notify listeners that a token is about to be destroyed
+        $rootScope.$broadcast('beforeGuacLogout', token);","[{'comment': ""For sake of compatibility, I think it would be better to:\r\n\r\n* Leave `guacLogout` as-is (but update any existing documentation if incorrect)\r\n* Let the new event be the one with a new name, presumably `guacAfterLogout` or `guacLogoutSuccess` for consistency with established namespacing.\r\n\r\nAs for the event itself, there may be more to be done here. As discovered in #455, the way the interface currently handles automatic reauthentication upon logout causes trouble and cannot currently be prevented. Leveraging this new event and checking `defaultPrevented` to determine whether to reauthenticate after logout could solve things. Extensions like CAS and OpenID could simply `$scope.$on('guacLogoutSuccess', ...)`, and then `preventDefault()` and redirect using `$location` within their handler."", 'commenter': 'mike-jumper'}, {'comment': ""Is there an alternative solution where we have an angular service that components can 'register' handlers in the service.  When someone fires an event through the service it can return a promise that only fires after each handler has been called.\r\n\r\nI have been searching for any AngularJS mechanism built in that would accomplish basically 'guaranteed delivery' and I can't find one.  Should be very minimalistic for me to cook this service up if the idea has merit."", 'commenter': 'tworcester'}, {'comment': ""@knacktim - I think that's a great idea."", 'commenter': 'necouchman'}, {'comment': '@necouchman Here ya go! https://github.com/apache/guacamole-client/pull/573', 'commenter': 'tworcester'}]"
347,guacamole-docker/bin/build-guacamole.sh,"@@ -53,7 +54,12 @@ mkdir -p ""$DESTINATION""
 #
 
 cd ""$BUILD_DIR""
-mvn package
+
+if [ -z ""$BUILD_PROFILE"" ]; then
+  mvn package
+else
+  mvn -P ""$BUILD_PROFILE"" package
+fi","[{'comment': 'Please stick with accepted style of four-space indentations.', 'commenter': 'necouchman'}, {'comment': 'corrected', 'commenter': 'jolentes'}]"
347,guacamole-docker/bin/build-guacamole.sh,"@@ -107,3 +113,11 @@ tar -xzf extensions/guacamole-auth-ldap/target/*.tar.gz \
     ""*.jar""                                             \
     ""*.ldif""
 
+#
+# Copy Radius auth extension if it was build
+#
+
+if [ -f extensions/guacamole-auth-radius/target/guacamole-auth-radius*.jar ]; then
+  mkdir -p ""$DESTINATION/radius""
+  cp extensions/guacamole-auth-radius/target/guacamole-auth-radius*.jar ""$DESTINATION/radius""","[{'comment': 'As with above, four-space indentations, please', 'commenter': 'necouchman'}, {'comment': 'corrected', 'commenter': 'jolentes'}]"
347,guacamole-docker/bin/build-guacamole.sh,"@@ -41,6 +41,7 @@
 
 BUILD_DIR=""$1""
 DESTINATION=""$2""
+BUILD_PROFILE=""$3""","[{'comment': 'This new `BUILD_PROFILE` parameter for `build-guacamole.sh` needs to be documented with an `@param` in the corresponding comment block:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/516dbfd5c7f8eca91c93f63b81bb5773d4a21d08/guacamole-docker/bin/build-guacamole.sh#L21-L40', 'commenter': 'mike-jumper'}, {'comment': 'added the parameter documentation as requested', 'commenter': 'jolentes'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -142,6 +150,12 @@ public ConfiguredGuacamoleSocket(GuacamoleSocket socket,
 
             // Retrieve argument name
             String arg_name = arg_names.get(i);
+            
+            // Check for protocol version as first argument
+            if (i == 0 && arg_name.startsWith(""VERSION_"")) {
+                protocol = GuacamoleProtocolVersion.valueOf(arg_name);
+                arg_values[i] = protocol.toString();","[{'comment': 'This will be overwritten by:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/0f4ff0fe468e064a672296af47c0744cf919ee4e/guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java#L160-L167', 'commenter': 'mike-jumper'}, {'comment': 'Yeah, that could be a problem...should be fixed.', 'commenter': 'necouchman'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleProtocolVersion.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.protocol;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+
+/**
+ * An enum that defines the available Guacamole protocol versions that can be
+ * used between guacd and clients, and provides convenience methods for parsing
+ * and comparing versions.
+ */
+public enum GuacamoleProtocolVersion {
+    
+    // Version 1.0.0 and older.
+    VERSION_1_0_0(1, 0, 0),
+
+    // Version 1.1.0
+    VERSION_1_1_0(1, 1, 0);
+    
+    // The major version number.
+    private final int major;
+
+    // The minor version number.
+    private final int minor;
+
+    // The patch version number.
+    private final int patch;
+    
+    /**
+     * Generate a new GuacamoleProtocolVersion object with the given
+     * major version, minor version, and patch version.
+     * 
+     * @param major
+     *     The integer representation of the major version component.
+     * 
+     * @param minor
+     *     The integer representation of the minor version component.
+     * 
+     * @param patch 
+     *     The integer representation of the patch version component.
+     */
+    GuacamoleProtocolVersion(int major, int minor, int patch) {
+        this.major = major;
+        this.minor = minor;
+        this.patch = patch;
+    }
+    
+    /**
+     * Return the major version number.
+     * 
+     * @return 
+     *     The integer major version.
+     */
+    public int getMajor() {
+        return major;
+    }
+    
+    /**
+     * Return the minor version number.
+     * 
+     * @return 
+     *     The integer minor version.
+     */
+    public int getMinor() {
+        return minor;
+    }
+    
+    /**
+     * Return the patch version number.
+     * @return 
+     *     The integer patch version.
+     */
+    public int getPatch() {
+        return patch;
+    }
+    
+    /**
+     * Determines whether or not this object is greater than or equal to the
+     * the version passed in to the method.  Returns a boolean true if the
+     * version is the same as or greater than the other version, otherwise
+     * false.
+     * 
+     * @param otherVersion
+     *     The version to which this object should be compared.
+     * 
+     * @return 
+     *     True if this object is greater than or equal to the other version.
+     */
+    public boolean atLeast(GuacamoleProtocolVersion otherVersion) {","[{'comment': ""If what we need is a means of comparing one version against another, it might be better to implement [`Comparable`](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html), an interface meant for achieving exactly that in a generic way.\r\n\r\nNow that we're all Java 8, chaining comparisons across several values is easier with [`Comparator`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html) and chains of the various `comparing()` and `thenComparing()` functions. Here, a chain of [`Comparator.comparingInt()`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparingInt-java.util.function.ToIntFunction-) and [`Comparator.thenComparingInt()`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparingInt-java.util.function.ToIntFunction-) might condense this down into essentially one line."", 'commenter': 'mike-jumper'}, {'comment': ""Ah, but `guacamole-common` is not at Java 8, it's still at Java 6.  So, we'll either have to bring it up, or do this another way..."", 'commenter': 'necouchman'}, {'comment': 'It looks like Java `enum`s implement the `compareTo()` method, though, using the position of declaration of the enum value as the relative comparison between them.  So, I could leverage that, instead of a function like this, but is that something we really want to rely on?', 'commenter': 'necouchman'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleProtocolVersion.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.protocol;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+
+/**
+ * An enum that defines the available Guacamole protocol versions that can be
+ * used between guacd and clients, and provides convenience methods for parsing
+ * and comparing versions.
+ */
+public enum GuacamoleProtocolVersion {
+    
+    // Version 1.0.0 and older.
+    VERSION_1_0_0(1, 0, 0),
+
+    // Version 1.1.0
+    VERSION_1_1_0(1, 1, 0);
+    
+    // The major version number.
+    private final int major;
+
+    // The minor version number.
+    private final int minor;
+
+    // The patch version number.
+    private final int patch;
+    
+    /**
+     * Generate a new GuacamoleProtocolVersion object with the given
+     * major version, minor version, and patch version.
+     * 
+     * @param major
+     *     The integer representation of the major version component.
+     * 
+     * @param minor
+     *     The integer representation of the minor version component.
+     * 
+     * @param patch 
+     *     The integer representation of the patch version component.
+     */
+    GuacamoleProtocolVersion(int major, int minor, int patch) {
+        this.major = major;
+        this.minor = minor;
+        this.patch = patch;
+    }
+    
+    /**
+     * Return the major version number.","[{'comment': 'You mean the major component of the protocol version number?', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -184,6 +199,20 @@ public ConfiguredGuacamoleSocket(GuacamoleSocket socket,
                     ""image"",
                     info.getImageMimetypes().toArray(new String[0])
                 ));
+        
+        // Protocol version 1.1.0 and higher options
+        
+        if (protocol.atLeast(GuacamoleProtocolVersion.VERSION_1_1_0)) {
+            // Send client timezone, if available
+            String timezone = info.getTimezone();
+            if (timezone != null && !timezone.isEmpty()) {","[{'comment': 'Any reason why both `null` and `""""` are used rather than just `null`?', 'commenter': 'mike-jumper'}, {'comment': ""Well, currently in the `GuacamoleClientInformation` class it is pre-initialized to an empty string.  I don't know if there was a particular reason I did this - I think I was trying to follow the pattern of the other config information, like the mimetypes, which are initialized to an empty list.  So, if anything, shouldn't it be only empty and skip the `null` check?"", 'commenter': 'necouchman'}, {'comment': 'Reduced it to just the `null` check/value.', 'commenter': 'necouchman'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleClientInformation.java,"@@ -144,5 +149,25 @@ public void setOptimalResolution(int optimalResolution) {
     public List<String> getImageMimetypes() {
         return imageMimetypes;
     }
+    
+    /**
+     * Return the timezone as reported by the client.
+     * 
+     * @return
+     *     A string value of the timezone reported by the client.
+     */
+    public String getTimezone() {
+        return timezone;
+    }
+    
+    /**
+     * Set the string value of the timezone.
+     * 
+     * @param timezone
+     *     The string value of the timezone reported by the client.","[{'comment': 'Same here: if `null` and/or `""""` have special meaning, that meaning should be documented.', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleClientInformation.java,"@@ -144,5 +149,25 @@ public void setOptimalResolution(int optimalResolution) {
     public List<String> getImageMimetypes() {
         return imageMimetypes;
     }
+    
+    /**
+     * Return the timezone as reported by the client.
+     * 
+     * @return
+     *     A string value of the timezone reported by the client.","[{'comment': 'If `null` and/or `""""` have special meaning here, that meaning should be documented for the sake of downstream users of this class. I would also suggest settling on a single, specific representation for ""no timezone"" (presumably `null`?).', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleClientInformation.java,"@@ -144,5 +149,25 @@ public void setOptimalResolution(int optimalResolution) {
     public List<String> getImageMimetypes() {
         return imageMimetypes;
     }
+    
+    /**
+     * Return the timezone as reported by the client.","[{'comment': 'As it will not otherwise be clear to a user of this class, the standard that these timezone strings should conform to should be documented here.', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleClientInformation.java,"@@ -144,5 +149,25 @@ public void setOptimalResolution(int optimalResolution) {
     public List<String> getImageMimetypes() {
         return imageMimetypes;
     }
+    
+    /**
+     * Return the timezone as reported by the client.
+     * 
+     * @return
+     *     A string value of the timezone reported by the client.
+     */
+    public String getTimezone() {
+        return timezone;
+    }
+    
+    /**
+     * Set the string value of the timezone.","[{'comment': 'Same here: as it will not otherwise be clear to a user of this class, the standard that these timezone strings should conform to should be documented.', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleProtocolVersion.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.protocol;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+
+/**
+ * An enum that defines the available Guacamole protocol versions that can be
+ * used between guacd and clients, and provides convenience methods for parsing
+ * and comparing versions.
+ */
+public enum GuacamoleProtocolVersion {
+    
+    // Version 1.0.0 and older.","[{'comment': 'Please use JavaDoc comments to document enum values, so that the text will be included in the API documentation generated with the build and ultimately deployed to the website with the release.\r\n\r\nWith that in mind, I suggest documenting in more detail what ""version 1.0.0 and older"" means here.', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleProtocolVersion.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.protocol;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+
+/**
+ * An enum that defines the available Guacamole protocol versions that can be
+ * used between guacd and clients, and provides convenience methods for parsing
+ * and comparing versions.
+ */
+public enum GuacamoleProtocolVersion {
+    
+    // Version 1.0.0 and older.
+    VERSION_1_0_0(1, 0, 0),
+
+    // Version 1.1.0","[{'comment': 'Same here:\r\n\r\n* Needs JavaDoc.\r\n* Description of the value should provide some clarity beyond that ""VERSION_1_1_0"" means ""Version 1.1.0"". ;)', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleProtocolVersion.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.protocol;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnsupportedException;
+
+/**
+ * An enum that defines the available Guacamole protocol versions that can be
+ * used between guacd and clients, and provides convenience methods for parsing
+ * and comparing versions.
+ */
+public enum GuacamoleProtocolVersion {
+    
+    // Version 1.0.0 and older.
+    VERSION_1_0_0(1, 0, 0),
+
+    // Version 1.1.0
+    VERSION_1_1_0(1, 1, 0);
+    
+    // The major version number.","[{'comment': 'JavaDoc', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -142,6 +150,13 @@ public ConfiguredGuacamoleSocket(GuacamoleSocket socket,
 
             // Retrieve argument name
             String arg_name = arg_names.get(i);
+            
+            // Check for protocol version as first argument
+            if (i == 0 && arg_name.startsWith(""VERSION_"")) {
+                protocol = GuacamoleProtocolVersion.valueOf(arg_name);","[{'comment': ""As `valueOf()` for an enum is specifically defined based on the names of the enum values, I'm uncomfortable directly relying on it for parsing of the Guacamole protocol (something which technically is independent of the Java objects we may use to implement it).\r\n\r\nI suggest providing a function within `GuacamoleProtocolVersion` which is specifically defined as parsing the Guacamole protocol constant for that protocol version and returning the corresponding enum value. Even though that function may internally only wrap `valueOf()`, it will decouple the internals of the API from the internals of the protocol."", 'commenter': 'mike-jumper'}, {'comment': ""Okay, I implemented a `getVersion()` method that checks for null/empty and then wraps `valueOf()` for the time being.  I'm happy to do something different in `getVersion()` if that's desirable, but at least it decouples from reliance upon `valueOf()` at this point."", 'commenter': 'necouchman'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -184,6 +199,20 @@ public ConfiguredGuacamoleSocket(GuacamoleSocket socket,
                     ""image"",
                     info.getImageMimetypes().toArray(new String[0])
                 ));
+        
+        // Protocol version 1.1.0 and higher options
+        
+        if (protocol.atLeast(GuacamoleProtocolVersion.VERSION_1_1_0)) {","[{'comment': ""Thoughts on providing some sort of capability-style query rather than requiring comparisons on version number? What you've got here will clearly work fine for now, but will get cumbersome as new features are introduced.\r\n\r\nSomething like `protocol.isSupported(GuacamoleProtocolCapability.HANDSHAKE_TIMEZONE)` would remove the need for repeated version comparison logic here or elsewhere, and would allow us to define what features are supported by what versions in a more readable way."", 'commenter': 'mike-jumper'}, {'comment': ""Yeah, I like this idea.  I'm guessing another enum (or class?) would be required to implement this?  Or is there a way that I should try to do it within the current enum?"", 'commenter': 'necouchman'}, {'comment': 'Took a stab at an implementation of this with a new `GuacamoleProtocolCapability` enum.  Let me know if it looks sane or if I should go another direction.', 'commenter': 'necouchman'}]"
348,guacamole/src/main/java/org/apache/guacamole/tunnel/TunnelRequest.java,"@@ -365,5 +370,16 @@ public Integer getDPI() throws GuacamoleException {
     public List<String> getImageMimetypes() {
         return getParameterValues(IMAGE_PARAMETER);
     }
-
+    
+    /**
+     * Returns the value of the timezone parameter declared within the","[{'comment': 'I suggest wording this from the perspective of the client and the semantics behind the value returned, rather than the fact that it internally pulls the ""timezone"" parameter.\r\n\r\nFor example, `getImageMimetypes()` is documented as returning the image mimetypes that the client declares it supports:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/377e93c518fbee77fbfe04970d30d9b721bcaedf/guacamole/src/main/java/org/apache/guacamole/tunnel/TunnelRequest.java#L363-L364\r\n\r\nand `getWidth()` is documented as returning the client\'s desired width:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/377e93c518fbee77fbfe04970d30d9b721bcaedf/guacamole/src/main/java/org/apache/guacamole/tunnel/TunnelRequest.java#L294-L295\r\n\r\nIf the above were documented instead as ""the value of the width parameter"" or ""the value of the image parameters"", we would be missing information that is important for the caller.', 'commenter': 'mike-jumper'}]"
348,guacamole/src/main/webapp/app/settings/services/preferenceService.js,"@@ -98,6 +98,17 @@ angular.module('settings').provider('preferenceService', ['$injector',
         return language.replace(/-/g, '_');
 
     };
+    
+    /**
+     * Return the timezone detected for the current browser session
+     * by the JSTZ timezone library.
+     * 
+     * @returns String
+     *     The name of the currently-detected timezone.","[{'comment': 'Is the format of the timezone returned by JSTZ known to conform to a particular standard? If so, I suggest documenting that here.', 'commenter': 'mike-jumper'}, {'comment': 'Sounds good.  Is there any precedent to adding a link/URL within the JavaDoc for this to the Wikipedia article on tz database?', 'commenter': 'necouchman'}]"
348,guacamole/pom.xml,"@@ -493,6 +493,13 @@
             </exclusions>
 
         </dependency>
+        
+        <!-- JSTZ for TimeZone Detection -->","[{'comment': 'This will need to be added to the list of bundled dependencies within `LICENSE`.', 'commenter': 'mike-jumper'}]"
348,guacamole/src/licenses/LICENSE,"@@ -605,6 +605,36 @@ licenses; we recommend you read them, as their terms may differ from the
 terms above.
 
 
+JSTZ (http://webjars.org/)
+--------------------------
+
+    Version: 1.0.10
+    From: 'WebJars' (http://webjars.org/)","[{'comment': '""From"" here needs to be the copyright holder. Based on the license below, it looks like the correct value would be `\'Jon Nylander\'`.\r\n\r\nIf the individual/organization holding the copyright has a website, a GitHub account, etc., that\'s what has been used for the URL following the name.', 'commenter': 'mike-jumper'}]"
348,guacamole/src/licenses/LICENSE,"@@ -605,6 +605,36 @@ licenses; we recommend you read them, as their terms may differ from the
 terms above.
 
 
+JSTZ (http://webjars.org/)","[{'comment': 'The URL here should be the URL of the project.\r\n\r\nPerhaps https://pellepim.bitbucket.io/jstz/?', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleClientInformation.java,"@@ -144,5 +149,30 @@ public void setOptimalResolution(int optimalResolution) {
     public List<String> getImageMimetypes() {
         return imageMimetypes;
     }
+    
+    /**
+     * Return the timezone as reported by the client, or null if the timezone
+     * is not set.  Valid timezones are specified in tz database format.","[{'comment': 'The JSTZ documentation states:\r\n\r\n> The return value is an IANA zone info key (aka the Olson time zone database).\r\n>\r\n> The IANA timezone database is pretty much standard for most platforms (UNIX and Mac support it natively, and every programming language in the world either has native support or well maintained libraries that support it).\r\n\r\nIs the correct term for this ""tz database format""? Or ""IANA timezone database format""? Or ""IANA zone info key""? Or ... ?', 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleProtocolVersion.java,"@@ -0,0 +1,193 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.protocol;
+
+/**
+ * An enum that defines the available Guacamole protocol versions that can be
+ * used between guacd and clients, and provides convenience methods for parsing
+ * and comparing versions.
+ */
+public enum GuacamoleProtocolVersion {
+    
+    /**
+     * Protocol version 1.0.0 and older.  Any client that doesn't explicitly
+     * set the protocol version will negotiate down to this protocol version.
+     * This requires that handshake instructions be ordered correctly, and
+     * lacks support for certain protocol-related features introduced in later
+     * versions.
+     */
+    VERSION_1_0_0(1, 0, 0),
+
+    /**
+     * Protocol version 1.1.0, which introduces Client-Server version
+     * detection, arbitrary handshake instruction order, and support
+     * for passing the client timezone to the server during the handshake.
+     */
+    VERSION_1_1_0(1, 1, 0);
+    
+    /**
+     * The major version component of the protocol version.
+     */
+    private final int major;
+
+    /**
+     * The minor version component of the protocol version.
+     */
+    private final int minor;
+
+    /**
+     * The patch version component of the protocol version.
+     */
+    private final int patch;
+    
+    /**
+     * Generate a new GuacamoleProtocolVersion object with the given
+     * major version, minor version, and patch version.
+     * 
+     * @param major
+     *     The integer representation of the major version component.
+     * 
+     * @param minor
+     *     The integer representation of the minor version component.
+     * 
+     * @param patch 
+     *     The integer representation of the patch version component.
+     */
+    GuacamoleProtocolVersion(int major, int minor, int patch) {
+        this.major = major;
+        this.minor = minor;
+        this.patch = patch;
+    }
+    
+    /**
+     * Return the major version component of the protocol version.
+     * 
+     * @return 
+     *     The integer major version component.
+     */
+    public int getMajor() {
+        return major;
+    }
+    
+    /**
+     * Return the minor version component of the protocol version.
+     * 
+     * @return 
+     *     The integer minor version component.
+     */
+    public int getMinor() {
+        return minor;
+    }
+    
+    /**
+     * Return the patch version component of the protocol version.
+     * 
+     * @return 
+     *     The integer patch version component.
+     */
+    public int getPatch() {
+        return patch;
+    }
+    
+    /**
+     * Determines whether or not this object is greater than or equal to the
+     * the version passed in to the method.  Returns a boolean true if the
+     * version is the same as or greater than the other version, otherwise
+     * false.
+     * 
+     * @param otherVersion
+     *     The version to which this object should be compared.
+     * 
+     * @return 
+     *     True if this object is greater than or equal to the other version.
+     */
+    public boolean atLeast(GuacamoleProtocolVersion otherVersion) {
+        
+        // Major version is greater
+        if (major > otherVersion.getMajor())
+            return true;
+        
+        // Major version is less than or equal to.
+        else {","[{'comment': ""You might be able to clean this up by relying on the fact that code flow stops after that `return`. There's no need for an explicit `else` here."", 'commenter': 'mike-jumper'}]"
348,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleProtocolVersion.java,"@@ -0,0 +1,193 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.protocol;
+
+/**
+ * An enum that defines the available Guacamole protocol versions that can be
+ * used between guacd and clients, and provides convenience methods for parsing
+ * and comparing versions.
+ */
+public enum GuacamoleProtocolVersion {
+    
+    /**
+     * Protocol version 1.0.0 and older.  Any client that doesn't explicitly
+     * set the protocol version will negotiate down to this protocol version.
+     * This requires that handshake instructions be ordered correctly, and
+     * lacks support for certain protocol-related features introduced in later
+     * versions.
+     */
+    VERSION_1_0_0(1, 0, 0),
+
+    /**
+     * Protocol version 1.1.0, which introduces Client-Server version
+     * detection, arbitrary handshake instruction order, and support
+     * for passing the client timezone to the server during the handshake.
+     */
+    VERSION_1_1_0(1, 1, 0);
+    
+    /**
+     * The major version component of the protocol version.
+     */
+    private final int major;
+
+    /**
+     * The minor version component of the protocol version.
+     */
+    private final int minor;
+
+    /**
+     * The patch version component of the protocol version.
+     */
+    private final int patch;
+    
+    /**
+     * Generate a new GuacamoleProtocolVersion object with the given
+     * major version, minor version, and patch version.
+     * 
+     * @param major
+     *     The integer representation of the major version component.
+     * 
+     * @param minor
+     *     The integer representation of the minor version component.
+     * 
+     * @param patch 
+     *     The integer representation of the patch version component.
+     */
+    GuacamoleProtocolVersion(int major, int minor, int patch) {
+        this.major = major;
+        this.minor = minor;
+        this.patch = patch;
+    }
+    
+    /**
+     * Return the major version component of the protocol version.
+     * 
+     * @return 
+     *     The integer major version component.
+     */
+    public int getMajor() {
+        return major;
+    }
+    
+    /**
+     * Return the minor version component of the protocol version.
+     * 
+     * @return 
+     *     The integer minor version component.
+     */
+    public int getMinor() {
+        return minor;
+    }
+    
+    /**
+     * Return the patch version component of the protocol version.
+     * 
+     * @return 
+     *     The integer patch version component.
+     */
+    public int getPatch() {
+        return patch;
+    }
+    
+    /**
+     * Determines whether or not this object is greater than or equal to the
+     * the version passed in to the method.  Returns a boolean true if the
+     * version is the same as or greater than the other version, otherwise
+     * false.
+     * 
+     * @param otherVersion
+     *     The version to which this object should be compared.
+     * 
+     * @return 
+     *     True if this object is greater than or equal to the other version.
+     */
+    public boolean atLeast(GuacamoleProtocolVersion otherVersion) {
+        
+        // Major version is greater
+        if (major > otherVersion.getMajor())
+            return true;
+        
+        // Major version is less than or equal to.
+        else {
+            
+            // Major version is less than
+            if (major < otherVersion.getMajor())
+                return false;
+            
+            // Major version is equal, minor version is greater
+            if (minor > otherVersion.getMinor())
+                return true;
+            
+            // Minor version is less than or equal to.
+            else {","[{'comment': ""Same here - it may be possible to reduce the complexity of this through relying on the way you've already structured the comparisons."", 'commenter': 'mike-jumper'}]"
349,guacamole-ext/src/main/java/org/apache/guacamole/properties/UriGuacamoleProperty.java,"@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+
+/**
+ * A GuacamoleProperty whose value is a URI.
+ */
+public abstract class UriGuacamoleProperty implements GuacamoleProperty<URI> {","[{'comment': ""With the competing camps of applying camelcase to variable/class/function names containing abbreviations, the Guacamole codebase has historically gone the `URIGuacamoleProperty` route rather than the `UriGuacamoleProperty` route. I would suggest doing that here for consistency's sake."", 'commenter': 'mike-jumper'}, {'comment': ""Fair enough, I'll rename it."", 'commenter': 'necouchman'}, {'comment': 'Renamed to `URIGuacamoleProperty`.', 'commenter': 'necouchman'}]"
349,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/MySQLAuthenticationProviderModule.java,"@@ -58,11 +59,20 @@ public MySQLAuthenticationProviderModule(MySQLEnvironment environment)
 
         // Set the MySQL-specific properties for MyBatis.
         myBatisProperties.setProperty(""mybatis.environment.id"", ""guacamole"");
-        myBatisProperties.setProperty(""JDBC.host"", environment.getMySQLHostname());
-        myBatisProperties.setProperty(""JDBC.port"", String.valueOf(environment.getMySQLPort()));
-        myBatisProperties.setProperty(""JDBC.schema"", environment.getMySQLDatabase());
-        myBatisProperties.setProperty(""JDBC.username"", environment.getMySQLUsername());
-        myBatisProperties.setProperty(""JDBC.password"", environment.getMySQLPassword());
+        
+        // Check for URI
+        URI mySQLUri = environment.getMySQLUri();","[{'comment': 'This is likely a good change to have, allowing users to override the entire JDBC URL, but it seems out of scope for the nature of this particular change. The [GUACAMOLE-678](https://issues.apache.org/jira/browse/GUACAMOLE-678) issue is pretty specifically about defining a new property type:\r\n\r\n> Implement a new property type, UriGuacamoleProperty, that takes a string and generates a URI object, validating the URI in the process. With the increased number of extensions that take URIs as configuration parameters this will allow for more central validation of the URI before it gets used by the module.\r\n\r\nI agree that it makes sense to refactor existing code to migrate to that type wherever appropriate, but this particular change adds a new feature that deserves its own issue.', 'commenter': 'mike-jumper'}, {'comment': ""Yeah, you're probably right - I'll refactor and pull this code out, and open a separate JIRA issue for it."", 'commenter': 'necouchman'}, {'comment': 'Okay, JDBC URI configuration has been extracted and will be moved to GUACAMOLE-766.', 'commenter': 'necouchman'}]"
351,guacamole-docker/bin/build-guacamole.sh,"@@ -126,3 +126,15 @@ if [ -f extensions/guacamole-auth-radius/target/guacamole-auth-radius*.jar ]; th
     mkdir -p ""$DESTINATION/radius""
     cp extensions/guacamole-auth-radius/target/guacamole-auth-radius*.jar ""$DESTINATION/radius""
 fi
+
+# Copy OPENID auth extension and schema modifications
+#
+
+mkdir -p ""$DESTINATION/openid""
+tar -xzf extensions/guacamole-auth-openid/target/*.tar.gz \","[{'comment': 'A couple of items, here:\r\n- Why not just use the jar file?  In the case of LDAP above, it is extracted because the LDIF file is also there.  For this module, though, just having the JAR should be sufficient.\r\n- All of the slashes at the end of the line should line up.', 'commenter': 'necouchman'}, {'comment': ""@necouchman Thx for checking. You are right. It doesn't make sense to complicate it here and just copy the jar file. Just pushed the changes."", 'commenter': 'krisss85'}]"
351,guacamole-docker/bin/start.sh,"@@ -404,6 +404,37 @@ END
     ln -s /opt/guacamole/radius/guacamole-auth-*.jar ""$GUACAMOLE_EXT""
 }
 
+## Adds properties to guacamole.properties which select the OPENID
+## authentication provider, and configure it to connect to the specified OPENID
+## provider.
+##
+associate_openid() {
+
+    # Verify required parameters are present
+    if [ -z ""$OPENID_AUTHORIZATION_ENDPOINT"" -o -z ""$OPENID_CLIENT_ID"" ]; then","[{'comment': 'According to the OpenID documentation (http://guacamole.apache.org/doc/gug/openid-auth.html), the following parameters are required:\r\n- openid-authorization-endpoint\r\n- openid-jwks-endpoint\r\n- openid-issuer\r\n- openid-client-id\r\n- openid-redirect-uri\r\n\r\nSeems like we should probably check for all of these as required, here, and not just the authorization endpoint and client ID?', 'commenter': 'necouchman'}, {'comment': 'makes sense indeed, pushed the changes', 'commenter': 'krisss85'}]"
351,guacamole-docker/bin/start.sh,"@@ -404,6 +404,42 @@ END
     ln -s /opt/guacamole/radius/guacamole-auth-*.jar ""$GUACAMOLE_EXT""
 }
 
+## Adds properties to guacamole.properties which select the OPENID
+## authentication provider, and configure it to connect to the specified OPENID
+## provider.
+##
+associate_openid() {
+
+    # Verify required parameters are present
+    if [ -z ""$OPENID_AUTHORIZATION_ENDPOINT"" ] || \
+       [ -z ""$OPENID_JWKS_ENDPOINT"" ]          || \
+       [ -z ""$OPENID_ISSUER"" ]                 || \
+       [ -z ""$OPENID_CLIENT_ID"" ]              || \          
+       [ -z ""$OPENID_REDIRECT_URI"" ]
+    then
+        cat <<END
+FATAL: Missing required environment variables to setup openid authentication.
+-------------------------------------------------------------------------------
+END","[{'comment': 'The specifics of the error should be logged. For example, take a look at the error displayed if required variables are missing for MySQL auth:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/78f1ae1b4eac25501d532ddee94fd1d8588e56dc/guacamole-docker/bin/start.sh#L131-L143', 'commenter': 'mike-jumper'}, {'comment': 'Makes sense of course. Please verify the latest version with amendments in this section.', 'commenter': 'krisss85'}]"
354,guacamole-docker/bin/start.sh,"@@ -317,6 +317,10 @@ END
         ""ldap-search-bind-password"" \
         ""$LDAP_SEARCH_BIND_PASSWORD""
 
+    set_optional_property       \
+        ""ldap-user-search-filter"" \","[{'comment': 'Ever so minor nit-pick, but, in keeping with the style on the rest of the document, please line up the `\\` at the end of the lines, here.', 'commenter': 'necouchman'}, {'comment': ""np, aligned it first and then changed the second line indent :-(\r\nI'm with you on clean code style."", 'commenter': 'jolentes'}]"
355,guacamole-docker/bin/start.sh,"@@ -591,6 +591,18 @@ END
     exit 1;
 fi
 
+# Use Duo if specified
+if [ -n ""$DUO_API_HOSTNAME"" ] &&        \
+    [ -n ""$DUO_INTEGRATION_KEY"" ] &&    \
+    [ -n ""$DUO_SECRET_KEY"" ] &&         \
+    [ -n ""$DUO_APPLICATION_KEY"" ] ; then
+    set_optional_property ""duo-api-hostname""        ""$DUO_API_HOSTNAME""
+    set_optional_property ""duo-integration-key""     ""$DUO_INTEGRATION_KEY""
+    set_optional_property ""duo-secret-key""          ""$DUO_SECRET_KEY""","[{'comment': ""These properties are actually all required, not optional:\r\n\r\nhttp://guacamole.apache.org/doc/gug/duo-auth.html#guac-duo-config\r\n\r\nIf any are absent, the startup script should abort and warn the user, as with the other extensions supported by the image. For example:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/9dcee8bdac2d40ae98ebabb53bdba2e9237ca93c/guacamole-docker/bin/start.sh#L128-L146\r\n\r\nThis should also be set up in a similar manner to the others. We currently have extension-specific setup, parsing, etc. is organized within separate functions, keeping the logic which follows later simple and unobstructed:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/9dcee8bdac2d40ae98ebabb53bdba2e9237ca93c/guacamole-docker/bin/start.sh#L551-L555\r\n\r\nYou're correct to not update the `INSTALLED_AUTH` environment variable, as things will not work unless some other auth mechanism is set up, but things will be easier to read and more maintainable if the existing pattern is followed."", 'commenter': 'mike-jumper'}, {'comment': 'Ok, changes made! Let me know if you think any others are necessary.', 'commenter': 'scottpas'}]"
360,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/Connectable.java,"@@ -54,8 +97,13 @@
      *     If an error occurs while connecting to guacd, or if permission to
      *     connect is denied.
      */
-    public GuacamoleTunnel connect(GuacamoleClientInformation info,
-            Map<String, String> tokens) throws GuacamoleException;
+    default GuacamoleTunnel connect(GuacamoleClientInformation info,
+            Map<String, String> tokens) throws GuacamoleException {
+
+        // Allow old implementations of Connectable to continue to work
+        return this.connect(info);","[{'comment': ""Is there a reason supplying a default of this particular instance of this method is necessary or valuable?  Won't the old implementations already be calling the other default method, without the `tokens` parameter?  And doesn't this introduce the possibility that an implementing class could end up recursively calling these parameters (if they don't actually implement either of them)?  Or will that get caught at compile time?"", 'commenter': 'necouchman'}, {'comment': ""> Is there a reason supplying a default of this particular instance of this method is necessary or valuable? Won't the old implementations already be calling the other default method, without the `tokens` parameter?\r\n\r\nSome sort of default is necessary to bridge the implementations, as it's the webapp that ultimately calls `connect()`, and in this case will be calling the version which has `tokens`.\r\n\r\nIn the general case, defaults are needed to bridge in both directions to allow extensions of different versions to interoperate. An older extension (compatible with 1.0.0) which decorates the connections of other extensions will need to be able to invoke `connect()`, even though it will be calling the older version. A newer extension and the webapp need the same ability but in the other direction.\r\n\r\n> And doesn't this introduce the possibility that an implementing class could end up recursively calling these parameters (if they don't actually implement either of them)?\r\n\r\nYes, and that's definitely a bad thing. I think I may have a route around this."", 'commenter': 'mike-jumper'}, {'comment': ""OK - I'm rearranging things a bit such that the interface defined within guacamole-ext is still strictly as defined before: one `connect()` definition which accepts `tokens`.\r\n\r\nWithin the webapp, I'm adding another version of `Connectable` in the same package which defines both `connect()` versions as well as defaults, and thus an ABI-compatible redefinition of both versions of the interface. Because of the way servlet containers handle classes bundled with the webapp vs. within dependencies, the webapp version of `Connectable` takes priority."", 'commenter': 'mike-jumper'}]"
360,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/simple/SimpleUserContext.java,"@@ -99,7 +129,7 @@ public SimpleUserContext(AuthenticationProvider authProvider,
             GuacamoleConfiguration config = configEntry.getValue();
 
             // Add as simple connection
-            Connection connection = new SimpleConnection(identifier, identifier, config);
+            Connection connection = new SimpleConnection(identifier, identifier, config, true);","[{'comment': 'Should this be `true`, or should this be passing the value of `interpretTokens`?', 'commenter': 'necouchman'}, {'comment': 'Good catch - we should pass through `interpretTokens`.', 'commenter': 'mike-jumper'}]"
365,guacamole-docker/bin/start.sh,"@@ -321,6 +321,10 @@ END
         ""ldap-user-search-filter"" \
         ""$LDAP_USER_SEARCH_FILTER""
 
+    set_optional_property         \
+        ""ldap-follow-referrals"" \","[{'comment': 'Very minor nitpick, but please line up the trailing back-slash, for consistency with the rest of the code...', 'commenter': 'necouchman'}]"
369,guacamole-docker/bin/start.sh,"@@ -303,27 +303,29 @@ END
     set_property          ""ldap-hostname""           ""$LDAP_HOSTNAME""
     set_optional_property ""ldap-port""               ""$LDAP_PORT""
     set_optional_property ""ldap-encryption-method""  ""$LDAP_ENCRYPTION_METHOD""
+    set_optional_property ""ldap-max-search-results"" ""$LDAP_MAX_SEARCH_RESULTS""
+    set_optional_property ""ldap-search-bind-dn""     ""$LDAP_SEARCH_BIND_DN""
     set_property          ""ldap-user-base-dn""       ""$LDAP_USER_BASE_DN""
     set_optional_property ""ldap-username-attribute"" ""$LDAP_USERNAME_ATTRIBUTE""
-    set_optional_property ""ldap-member-attribute""   ""$LDAP_MEMBER_ATTRIBUTE""
-    set_optional_property ""ldap-group-base-dn""      ""$LDAP_GROUP_BASE_DN""
+    set_optional_property ""ldap-user-search-filter"" ""$LDAP_USER_SEARCH_FILTER""
     set_optional_property ""ldap-config-base-dn""     ""$LDAP_CONFIG_BASE_DN""
-
-    set_optional_property     \
-        ""ldap-search-bind-dn"" \
-        ""$LDAP_SEARCH_BIND_DN""","[{'comment': ""I like the reformatting overall, but I'm concerned about these items that reorganize properties away from each other - for example, the `ldap-search-bind-dn` property ends up several lines away from `ldap-search-bind-password`.  While this isn't something that users will every see or care about, from a debugging and code maintenance point of view I think it could organized so that it makes a little more sense."", 'commenter': 'necouchman'}, {'comment': 'Hi Nick, I actually preferred that when making the change but opted to keep it the same as the previous formatting where the shorter lines were grouped and then the longer lines grouped after.\r\n\r\nJust to be clear, would you prefer to have them interspersed like this?\r\n\r\n    set_optional_property ""ldap-search-bind-dn""     ""$LDAP_SEARCH_BIND_DN""\r\n\r\n    set_optional_property           \\\r\n        ""ldap-search-bind-password"" \\\r\n        ""$LDAP_SEARCH_BIND_PASSWORD""\r\n\r\n    set_property          ""ldap-user-base-dn""       ""$LDAP_USER_BASE_DN""\r\n    set_optional_property ""ldap-username-attribute"" ""$LDAP_USERNAME_ATTRIBUTE""\r\n\r\n\r\nLet me know and I\'ll amend the PR.', 'commenter': 'JoelB'}, {'comment': ""IMHO, yes, it makes more sense to group the options together that logically go together, rather than grouping them by line length.  If others want to vote me down on that, that's fine, we can discuss it, and I don't feel uber-passionate about it, but it does make more sense to me."", 'commenter': 'necouchman'}, {'comment': ""I've made the changes and squashed my commits to remove the merge (I think!). Commit 26d3d51 should have the changes you requested."", 'commenter': 'JoelB'}]"
371,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -220,6 +220,9 @@ public String generateQuery(String filter,
                         logger.warn(""Given a referral, but referrals are disabled. Error was: {}"", e.getMessage());
                         logger.debug(""Got a referral, but configured to not follow them."", e);
                     }
+                } catch (LDAPException e) {","[{'comment': ""Please don't cuddle the `catch`. We do that for `do`/`while`, but that's really it. See [the rough guidelines](http://guacamole.apache.org/guac-style/#braces) and elsewhere:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/b3f3b18f0bbd063b4f9ce8ce50329ac3f1e47148/extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java#L208-L213"", 'commenter': 'mike-jumper'}, {'comment': 'Fixed.  What do you think about adding a link to those coding guidelines in the CONTRIBUTING document?', 'commenter': 'JoelB'}]"
371,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -220,6 +220,9 @@ public String generateQuery(String filter,
                         logger.warn(""Given a referral, but referrals are disabled. Error was: {}"", e.getMessage());
                         logger.debug(""Got a referral, but configured to not follow them."", e);
                     }
+                } catch (LDAPException e) {
+                  logger.warn(""Failed to process an LDAP search result."");
+                  logger.error(""Error processing LDAPEntry search result."",e);","[{'comment': 'Logging an exception in this way will produce a stacktrace in the logs. This is good, but should only be done at the debug level. The is the origin for the pattern you see above:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/b3f3b18f0bbd063b4f9ce8ce50329ac3f1e47148/extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java#L220-L221\r\n\r\nThe idea is to not confront users/administrators with stacktraces unless they truly are interested in debugging information.', 'commenter': 'mike-jumper'}, {'comment': ""Oops, I meant for that to be in the debug logs. The warning should be sufficient to point the admin in the right direction.  I've moved the stack trace to debug."", 'commenter': 'JoelB'}]"
371,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -220,6 +220,9 @@ public String generateQuery(String filter,
                         logger.warn(""Given a referral, but referrals are disabled. Error was: {}"", e.getMessage());
                         logger.debug(""Got a referral, but configured to not follow them."", e);
                     }
+                } catch (LDAPException e) {
+                  logger.warn(""Failed to process an LDAP search result."");","[{'comment': ""Does the exception itself provide any other information that would be worth including here? I'm not sure offhand whether the message of the `LDAPException` is human-readable enough to be useful to an admin."", 'commenter': 'mike-jumper'}, {'comment': 'Here is an example Exception from the logs after this change is applied:\r\n\r\n`22:09:34.489 [http-nio-8080-exec-2] ERROR o.a.g.auth.ldap.ObjectQueryService - Error processing LDAPEntry search result.\r\ncom.novell.ldap.LDAPException: Sizelimit Exceeded\r\n        at com.novell.ldap.LDAPResponse.getResultException(Unknown Source) ~[guacamole-auth-ldap-1.0.0.jar:na]\r\n        at com.novell.ldap.LDAPResponse.chkResultCode(Unknown Source) ~[guacamole-auth-ldap-1.0.0.jar:na]\r\n        at com.novell.ldap.LDAPSearchResults.next(Unknown Source) ~[guacamole-auth-ldap-1.0.0.jar:na]\r\n        at org.apache.guacamole.auth.ldap.ObjectQueryService.search(ObjectQueryService.java:209) [guacamole-auth-ldap-1.0.0.jar:na]\r\n        at org.apache.guacamole.auth.ldap.ObjectQueryService.search(ObjectQueryService.java:279) [guacamole-auth-ldap-1.0.0.jar:na]\r\n        at org.apache.guacamole.auth.ldap.group.UserGroupService.getUserGroups(UserGroupService.java:115) [guacamole-auth-ldap-1.0.0.jar:na]\r\n        at org.apache.guacamole.auth.ldap.user.LDAPUserContext.init(LDAPUserContext.java:137) [guacamole-auth-ldap-1.0.0.jar:na]\r\n        at org.apache.guacamole.auth.ldap.AuthenticationProviderService.getUserContext(AuthenticationProviderService.java:351) [guacamole-auth-ldap-1.0.0.jar:na]\r\n        at org.apache.guacamole.auth.ldap.LDAPAuthenticationProvider.getUserContext(LDAPAuthenticationProvider.java:86) [guacamole-auth-ldap-1.0.0.jar:na]\r\n        at org.apache.guacamole.extension.AuthenticationProviderFacade.getUserContext(AuthenticationProviderFacade.java:274) [classes/:na]\r\n        at org.apache.guacamole.rest.auth.AuthenticationService.getUserContexts(AuthenticationService.java:393) [classes/:na]\r\n        at org.apache.guacamole.rest.auth.AuthenticationService.authenticate(AuthenticationService.java:442) [classes/:na]\r\n        at org.apache.guacamole.rest.auth.TokenRESTService.createToken(TokenRESTService.java:173) [classes/:na]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]\r\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]\r\n        at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60) [jersey-server-1.17.1.jar:1.17.1]\r\n        at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$TypeOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:185) [jersey-server-1.17.1.jar:1.17.1]\r\n        at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75) [jersey-server-1.17.1.jar:1.17.1]`\r\n\r\nI\'d say the only thing that\'s useful is the exception description ""Sizelimit Exceeded"".', 'commenter': 'JoelB'}, {'comment': ""I've added e.resultCodeToString() to the warning in the logs which gives enough information but doesn't spam the admin. It's included in the latest version of the PR. Here's some example output:\r\n\r\n`00:33:34.844 [http-nio-8080-exec-1] WARN  o.a.g.auth.ldap.ObjectQueryService - Failed to process an LDAP search result. Error was: Sizelimit Exceeded`"", 'commenter': 'JoelB'}]"
371,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -221,6 +221,11 @@ public String generateQuery(String filter,
                         logger.debug(""Got a referral, but configured to not follow them."", e);
                     }
                 }
+                
+                catch (LDAPException e) {
+                  logger.warn(""Failed to process an LDAP search result. Error was: {}"",e.resultCodeToString());
+                  logger.debug(""Error processing LDAPEntry search result."",e);","[{'comment': 'Such a minor nit-pick,but spaces,please,after the commas.\r\n\r\n:smile:', 'commenter': 'necouchman'}, {'comment': 'Fixed :+1: ', 'commenter': 'JoelB'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/WOLAuthenticationProvider.java,"@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.wol;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.net.auth.AbstractAuthenticationProvider;
+import org.apache.guacamole.net.auth.AuthenticatedUser;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.UserContext;
+import org.apache.guacamole.auth.wol.user.WOLUserContext;
+
+/**
+ * Base AuthenticationProvider class for Wake-on-LAN extension support.  This
+ * provider decorates other providers' userContext objects to wrap the
+ * connections with Wake-on-LAN data.
+ */
+public class WOLAuthenticationProvider extends AbstractAuthenticationProvider {
+    
+    @Override
+    public String getIdentifier() {
+        return ""wol"";
+    }
+
+    @Override
+    public UserContext decorate(UserContext context,
+            AuthenticatedUser authenticatedUser, Credentials credentials)
+            throws GuacamoleException {
+        
+        return new WOLUserContext(context, this);
+        
+    }
+
+    @Override
+    public UserContext redecorate(UserContext decorated, UserContext context,
+            AuthenticatedUser authenticatedUser, Credentials credentials)
+            throws GuacamoleException {
+        
+        return new WOLUserContext(context, this);","[{'comment': 'This (doing the same thing as `decorate()`) is the default `redecorate()` implementation provided by `AbstractAuthenticationProvider`.\r\n\r\nhttps://github.com/apache/guacamole-client/blob/d1e928bea79ca81c827e9b6adedabc98eefdf701/guacamole-ext/src/main/java/org/apache/guacamole/net/auth/AbstractAuthenticationProvider.java#L139-L144\r\n\r\nI think you can safely get rid of this function.', 'commenter': 'mike-jumper'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/connection/WOLConnection.java,"@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.wol.connection;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.form.TextField;
+import org.apache.guacamole.wol.WOLException;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.wol.WakeOnLAN;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A Connection which delegates functionality to an underlying connection, but
+ * which supplies attributes specific to Wake-on-LAN functionality.
+ */
+public class WOLConnection extends DelegatingConnection {
+    
+    /**
+     * The logger for this class.
+    */
+    private static final Logger logger = LoggerFactory.getLogger(WOLConnection.class);
+
+    /**
+     * The name of the attribute for the MAC address of this host.
+     */
+    public static final String WOL_ATTRIBUTE_MAC_ADDRESS = ""wol-mac-address"";
+
+    /**
+     * The name of the attribute that stores the network address to use
+     * to broadcast the WOL packet.
+     */
+    public static final String WOL_ATTRIBUTE_NET_BROADCAST = ""wol-net-broadcast"";
+
+    /**
+     * The default broadcast address to use if none is configured.
+     */
+    public static final String WOL_DEFAULT_BROADCAST = ""255.255.255.255"";
+    
+    /**
+     * The form containing Wake-on-LAN attributes.
+     */
+    public static final Form WOL_ATTRIBUTE_FORM = new Form(""wol-attributes"",
+        Arrays.asList(
+                new TextField(WOL_ATTRIBUTE_MAC_ADDRESS),
+                new TextField(WOL_ATTRIBUTE_NET_BROADCAST)
+        )
+    );
+    
+    /**
+     * The collection of forms for Wake-on-LAN configuration.
+     */
+    public static final Collection<Form> ATTRIBUTES =
+            Collections.unmodifiableCollection(Arrays.asList(
+                    WOL_ATTRIBUTE_FORM
+        )
+    );
+
+    /**
+     * The array containing all of the WOL-specific attributes.
+     */
+    public static final List<String> WOL_ATTRIBUTES = Arrays.asList(
+            WOL_ATTRIBUTE_MAC_ADDRESS,
+            WOL_ATTRIBUTE_NET_BROADCAST
+    );
+
+    /**
+     * The attributes for this connection.
+     */
+    private final Map<String, String> attributes;
+
+    /**
+     * The undecorated connection object used as the base of this WOLConnection.
+     */
+    private final Connection undecorated;
+    
+    /**
+     * Whether or not the user has access to update the data for this connection.
+     */
+    private final Boolean canUpdate;
+
+    /**
+     * Create a WOLConnection with the specified Connection object as the
+     * base, and indicate whether the user has privileges to update this
+     * connection.
+     *
+     * @param connection
+     *     The Connection object to decorate.
+     * 
+     * @param canUpdate
+     *     Whether or not the user can update this connection.
+     */
+    public WOLConnection(Connection connection, Boolean canUpdate) {
+
+        super(connection);
+        this.undecorated = connection;
+        this.attributes = super.getAttributes();
+        this.canUpdate = canUpdate;
+
+    }
+
+    /**
+     * Get the undecorated version of the object represented by this
+     * WOLConnection.
+     *
+     * @return
+     *     The undecorated version of the Connection represented by this
+     *     WOLConnection.
+     */
+    public Connection getUndecorated() {
+        return undecorated;","[{'comment': 'While we do need to provide a public function like this, storage of the wrapped `Connection` is already provided by `DelegatingConnection` through the protected `getDelegateConnection()` function:\r\n\r\nhttp://guacamole.apache.org/doc/guacamole-ext/org/apache/guacamole/net/auth/DelegatingConnection.html#getDelegateConnection--\r\n\r\nI think you can leverage that rather than providing your own storage with `undecorated`.', 'commenter': 'mike-jumper'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/connection/WOLConnection.java,"@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.wol.connection;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.form.TextField;
+import org.apache.guacamole.wol.WOLException;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.wol.WakeOnLAN;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A Connection which delegates functionality to an underlying connection, but
+ * which supplies attributes specific to Wake-on-LAN functionality.
+ */
+public class WOLConnection extends DelegatingConnection {
+    
+    /**
+     * The logger for this class.
+    */
+    private static final Logger logger = LoggerFactory.getLogger(WOLConnection.class);
+
+    /**
+     * The name of the attribute for the MAC address of this host.
+     */
+    public static final String WOL_ATTRIBUTE_MAC_ADDRESS = ""wol-mac-address"";
+
+    /**
+     * The name of the attribute that stores the network address to use
+     * to broadcast the WOL packet.
+     */
+    public static final String WOL_ATTRIBUTE_NET_BROADCAST = ""wol-net-broadcast"";
+
+    /**
+     * The default broadcast address to use if none is configured.
+     */
+    public static final String WOL_DEFAULT_BROADCAST = ""255.255.255.255"";
+    
+    /**
+     * The form containing Wake-on-LAN attributes.
+     */
+    public static final Form WOL_ATTRIBUTE_FORM = new Form(""wol-attributes"",
+        Arrays.asList(
+                new TextField(WOL_ATTRIBUTE_MAC_ADDRESS),
+                new TextField(WOL_ATTRIBUTE_NET_BROADCAST)
+        )
+    );
+    
+    /**
+     * The collection of forms for Wake-on-LAN configuration.
+     */
+    public static final Collection<Form> ATTRIBUTES =
+            Collections.unmodifiableCollection(Arrays.asList(
+                    WOL_ATTRIBUTE_FORM
+        )
+    );
+
+    /**
+     * The array containing all of the WOL-specific attributes.
+     */
+    public static final List<String> WOL_ATTRIBUTES = Arrays.asList(
+            WOL_ATTRIBUTE_MAC_ADDRESS,
+            WOL_ATTRIBUTE_NET_BROADCAST
+    );
+
+    /**
+     * The attributes for this connection.
+     */
+    private final Map<String, String> attributes;
+
+    /**
+     * The undecorated connection object used as the base of this WOLConnection.
+     */
+    private final Connection undecorated;
+    
+    /**
+     * Whether or not the user has access to update the data for this connection.
+     */
+    private final Boolean canUpdate;
+
+    /**
+     * Create a WOLConnection with the specified Connection object as the
+     * base, and indicate whether the user has privileges to update this
+     * connection.
+     *
+     * @param connection
+     *     The Connection object to decorate.
+     * 
+     * @param canUpdate
+     *     Whether or not the user can update this connection.
+     */
+    public WOLConnection(Connection connection, Boolean canUpdate) {
+
+        super(connection);
+        this.undecorated = connection;
+        this.attributes = super.getAttributes();
+        this.canUpdate = canUpdate;
+
+    }
+
+    /**
+     * Get the undecorated version of the object represented by this
+     * WOLConnection.
+     *
+     * @return
+     *     The undecorated version of the Connection represented by this
+     *     WOLConnection.
+     */
+    public Connection getUndecorated() {
+        return undecorated;
+    }
+
+    @Override
+    public Map<String, String> getAttributes() {
+        
+        // Create a mutable copy of the attributes
+        Map<String, String> effectiveAttributes = new HashMap<>(attributes);
+        
+        // Check to see if any need to be added or removed
+        for (String attr : WOL_ATTRIBUTES) {
+            if (canUpdate && !effectiveAttributes.containsKey(attr))","[{'comment': 'Rather than `containsKey()` followed by `put()`, it would be better to use `putIfAbsent()`:\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Map.html#putIfAbsent-K-V-', 'commenter': 'mike-jumper'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/connection/WOLConnection.java,"@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.wol.connection;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.form.TextField;
+import org.apache.guacamole.wol.WOLException;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.wol.WakeOnLAN;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A Connection which delegates functionality to an underlying connection, but
+ * which supplies attributes specific to Wake-on-LAN functionality.
+ */
+public class WOLConnection extends DelegatingConnection {
+    
+    /**
+     * The logger for this class.
+    */
+    private static final Logger logger = LoggerFactory.getLogger(WOLConnection.class);
+
+    /**
+     * The name of the attribute for the MAC address of this host.
+     */
+    public static final String WOL_ATTRIBUTE_MAC_ADDRESS = ""wol-mac-address"";
+
+    /**
+     * The name of the attribute that stores the network address to use
+     * to broadcast the WOL packet.
+     */
+    public static final String WOL_ATTRIBUTE_NET_BROADCAST = ""wol-net-broadcast"";
+
+    /**
+     * The default broadcast address to use if none is configured.
+     */
+    public static final String WOL_DEFAULT_BROADCAST = ""255.255.255.255"";
+    
+    /**
+     * The form containing Wake-on-LAN attributes.
+     */
+    public static final Form WOL_ATTRIBUTE_FORM = new Form(""wol-attributes"",
+        Arrays.asList(
+                new TextField(WOL_ATTRIBUTE_MAC_ADDRESS),
+                new TextField(WOL_ATTRIBUTE_NET_BROADCAST)
+        )
+    );
+    
+    /**
+     * The collection of forms for Wake-on-LAN configuration.
+     */
+    public static final Collection<Form> ATTRIBUTES =
+            Collections.unmodifiableCollection(Arrays.asList(
+                    WOL_ATTRIBUTE_FORM
+        )
+    );
+
+    /**
+     * The array containing all of the WOL-specific attributes.
+     */
+    public static final List<String> WOL_ATTRIBUTES = Arrays.asList(
+            WOL_ATTRIBUTE_MAC_ADDRESS,
+            WOL_ATTRIBUTE_NET_BROADCAST
+    );
+
+    /**
+     * The attributes for this connection.
+     */
+    private final Map<String, String> attributes;
+
+    /**
+     * The undecorated connection object used as the base of this WOLConnection.
+     */
+    private final Connection undecorated;
+    
+    /**
+     * Whether or not the user has access to update the data for this connection.
+     */
+    private final Boolean canUpdate;
+
+    /**
+     * Create a WOLConnection with the specified Connection object as the
+     * base, and indicate whether the user has privileges to update this
+     * connection.
+     *
+     * @param connection
+     *     The Connection object to decorate.
+     * 
+     * @param canUpdate
+     *     Whether or not the user can update this connection.
+     */
+    public WOLConnection(Connection connection, Boolean canUpdate) {
+
+        super(connection);
+        this.undecorated = connection;
+        this.attributes = super.getAttributes();
+        this.canUpdate = canUpdate;
+
+    }
+
+    /**
+     * Get the undecorated version of the object represented by this
+     * WOLConnection.
+     *
+     * @return
+     *     The undecorated version of the Connection represented by this
+     *     WOLConnection.
+     */
+    public Connection getUndecorated() {
+        return undecorated;
+    }
+
+    @Override
+    public Map<String, String> getAttributes() {
+        
+        // Create a mutable copy of the attributes
+        Map<String, String> effectiveAttributes = new HashMap<>(attributes);
+        
+        // Check to see if any need to be added or removed
+        for (String attr : WOL_ATTRIBUTES) {
+            if (canUpdate && !effectiveAttributes.containsKey(attr))
+                effectiveAttributes.put(attr, null);
+            else if (!canUpdate && effectiveAttributes.containsKey(attr))","[{'comment': 'Why the check for `containsKey()` prior to attempting to `remove()`?', 'commenter': 'mike-jumper'}, {'comment': 'Safety, first.', 'commenter': 'necouchman'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/connection/WOLConnection.java,"@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.wol.connection;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.form.TextField;
+import org.apache.guacamole.wol.WOLException;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.wol.WakeOnLAN;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A Connection which delegates functionality to an underlying connection, but
+ * which supplies attributes specific to Wake-on-LAN functionality.
+ */
+public class WOLConnection extends DelegatingConnection {
+    
+    /**
+     * The logger for this class.
+    */
+    private static final Logger logger = LoggerFactory.getLogger(WOLConnection.class);
+
+    /**
+     * The name of the attribute for the MAC address of this host.
+     */
+    public static final String WOL_ATTRIBUTE_MAC_ADDRESS = ""wol-mac-address"";
+
+    /**
+     * The name of the attribute that stores the network address to use
+     * to broadcast the WOL packet.
+     */
+    public static final String WOL_ATTRIBUTE_NET_BROADCAST = ""wol-net-broadcast"";
+
+    /**
+     * The default broadcast address to use if none is configured.
+     */
+    public static final String WOL_DEFAULT_BROADCAST = ""255.255.255.255"";
+    
+    /**
+     * The form containing Wake-on-LAN attributes.
+     */
+    public static final Form WOL_ATTRIBUTE_FORM = new Form(""wol-attributes"",
+        Arrays.asList(
+                new TextField(WOL_ATTRIBUTE_MAC_ADDRESS),
+                new TextField(WOL_ATTRIBUTE_NET_BROADCAST)
+        )
+    );
+    
+    /**
+     * The collection of forms for Wake-on-LAN configuration.
+     */
+    public static final Collection<Form> ATTRIBUTES =
+            Collections.unmodifiableCollection(Arrays.asList(
+                    WOL_ATTRIBUTE_FORM
+        )
+    );
+
+    /**
+     * The array containing all of the WOL-specific attributes.
+     */
+    public static final List<String> WOL_ATTRIBUTES = Arrays.asList(
+            WOL_ATTRIBUTE_MAC_ADDRESS,
+            WOL_ATTRIBUTE_NET_BROADCAST
+    );
+
+    /**
+     * The attributes for this connection.
+     */
+    private final Map<String, String> attributes;
+
+    /**
+     * The undecorated connection object used as the base of this WOLConnection.
+     */
+    private final Connection undecorated;
+    
+    /**
+     * Whether or not the user has access to update the data for this connection.
+     */
+    private final Boolean canUpdate;
+
+    /**
+     * Create a WOLConnection with the specified Connection object as the
+     * base, and indicate whether the user has privileges to update this
+     * connection.
+     *
+     * @param connection
+     *     The Connection object to decorate.
+     * 
+     * @param canUpdate
+     *     Whether or not the user can update this connection.
+     */
+    public WOLConnection(Connection connection, Boolean canUpdate) {
+
+        super(connection);
+        this.undecorated = connection;
+        this.attributes = super.getAttributes();
+        this.canUpdate = canUpdate;
+
+    }
+
+    /**
+     * Get the undecorated version of the object represented by this
+     * WOLConnection.
+     *
+     * @return
+     *     The undecorated version of the Connection represented by this
+     *     WOLConnection.
+     */
+    public Connection getUndecorated() {
+        return undecorated;
+    }
+
+    @Override
+    public Map<String, String> getAttributes() {
+        
+        // Create a mutable copy of the attributes
+        Map<String, String> effectiveAttributes = new HashMap<>(attributes);
+        
+        // Check to see if any need to be added or removed
+        for (String attr : WOL_ATTRIBUTES) {
+            if (canUpdate && !effectiveAttributes.containsKey(attr))
+                effectiveAttributes.put(attr, null);
+            else if (!canUpdate && effectiveAttributes.containsKey(attr))
+                effectiveAttributes.remove(attr);
+        }
+
+        return effectiveAttributes;
+
+    }
+
+    @Override
+    public void setAttributes(Map<String, String> setAttributes) {
+
+        // Create a multable copy of the attributes","[{'comment': 'mutable*', 'commenter': 'mike-jumper'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/connection/WOLConnection.java,"@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.wol.connection;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.form.TextField;
+import org.apache.guacamole.wol.WOLException;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.wol.WakeOnLAN;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A Connection which delegates functionality to an underlying connection, but
+ * which supplies attributes specific to Wake-on-LAN functionality.
+ */
+public class WOLConnection extends DelegatingConnection {
+    
+    /**
+     * The logger for this class.
+    */
+    private static final Logger logger = LoggerFactory.getLogger(WOLConnection.class);
+
+    /**
+     * The name of the attribute for the MAC address of this host.
+     */
+    public static final String WOL_ATTRIBUTE_MAC_ADDRESS = ""wol-mac-address"";
+
+    /**
+     * The name of the attribute that stores the network address to use
+     * to broadcast the WOL packet.
+     */
+    public static final String WOL_ATTRIBUTE_NET_BROADCAST = ""wol-net-broadcast"";
+
+    /**
+     * The default broadcast address to use if none is configured.
+     */
+    public static final String WOL_DEFAULT_BROADCAST = ""255.255.255.255"";
+    
+    /**
+     * The form containing Wake-on-LAN attributes.
+     */
+    public static final Form WOL_ATTRIBUTE_FORM = new Form(""wol-attributes"",
+        Arrays.asList(
+                new TextField(WOL_ATTRIBUTE_MAC_ADDRESS),
+                new TextField(WOL_ATTRIBUTE_NET_BROADCAST)
+        )
+    );
+    
+    /**
+     * The collection of forms for Wake-on-LAN configuration.
+     */
+    public static final Collection<Form> ATTRIBUTES =
+            Collections.unmodifiableCollection(Arrays.asList(
+                    WOL_ATTRIBUTE_FORM
+        )
+    );
+
+    /**
+     * The array containing all of the WOL-specific attributes.
+     */
+    public static final List<String> WOL_ATTRIBUTES = Arrays.asList(
+            WOL_ATTRIBUTE_MAC_ADDRESS,
+            WOL_ATTRIBUTE_NET_BROADCAST
+    );
+
+    /**
+     * The attributes for this connection.
+     */
+    private final Map<String, String> attributes;
+
+    /**
+     * The undecorated connection object used as the base of this WOLConnection.
+     */
+    private final Connection undecorated;
+    
+    /**
+     * Whether or not the user has access to update the data for this connection.
+     */
+    private final Boolean canUpdate;
+
+    /**
+     * Create a WOLConnection with the specified Connection object as the
+     * base, and indicate whether the user has privileges to update this
+     * connection.
+     *
+     * @param connection
+     *     The Connection object to decorate.
+     * 
+     * @param canUpdate
+     *     Whether or not the user can update this connection.
+     */
+    public WOLConnection(Connection connection, Boolean canUpdate) {
+
+        super(connection);
+        this.undecorated = connection;
+        this.attributes = super.getAttributes();
+        this.canUpdate = canUpdate;
+
+    }
+
+    /**
+     * Get the undecorated version of the object represented by this
+     * WOLConnection.
+     *
+     * @return
+     *     The undecorated version of the Connection represented by this
+     *     WOLConnection.
+     */
+    public Connection getUndecorated() {
+        return undecorated;
+    }
+
+    @Override
+    public Map<String, String> getAttributes() {
+        
+        // Create a mutable copy of the attributes
+        Map<String, String> effectiveAttributes = new HashMap<>(attributes);
+        
+        // Check to see if any need to be added or removed
+        for (String attr : WOL_ATTRIBUTES) {
+            if (canUpdate && !effectiveAttributes.containsKey(attr))
+                effectiveAttributes.put(attr, null);
+            else if (!canUpdate && effectiveAttributes.containsKey(attr))
+                effectiveAttributes.remove(attr);
+        }
+
+        return effectiveAttributes;
+
+    }
+
+    @Override
+    public void setAttributes(Map<String, String> setAttributes) {
+
+        // Create a multable copy of the attributes
+        setAttributes =  new HashMap<>(setAttributes);
+
+        if (!canUpdate)","[{'comment': ""1. I recommend only creating a mutable copy which excludes `WOL_ATTRIBUTES` when necessary. If the user has update permission, there's no need to create a whole new `Map`.\r\n2. Come to think of it ... why remove the attributes within `setAttributes()` at all? If the user lacks update permission, the underlying extension should be disallowing updates to the object, ignoring any attributes specified here."", 'commenter': 'mike-jumper'}, {'comment': ""Okay, I've refactored this a bit - hopefully it's okay, now."", 'commenter': 'necouchman'}]"
374,extensions/guacamole-auth-wol/src/main/resources/services/wolService.js,"@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Services to support the Wake-on-LAN extensions, including triggering
+ * the wake-up packet and checking host status.
+ */
+angular.module('guacWOL').factory('wolService', ['$injector',
+        function wolService($injector) {
+    
+    // Import required supporting services
+    var $log                  = $injector.get('$log');
+    var authenticationService = $injector.get('authenticationService');
+    var connectionService     = $injector.get('connectionService');
+    var requestService        = $injector.get('requestService');
+    
+    // This service.
+    var service = {};
+    
+    /**
+     * Wake up the host associated with the specified connection identifier.
+     * 
+     * @param {type} identifier
+     *     The identifier of the connection in the directory of the host
+     *     to be sent the Wake-on-LAN packet.
+     *     
+     * @return {Promise}
+     *     A promise which, when resolved, will mirror the identifier
+     *     passed in for the wake-on-LAN request and the status of the request.
+     */
+    service.wakeHost = function wakeHost(identifier) {
+        
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+
+        // Send the WOL request
+        return requestService({
+            method  : 'POST',
+            url     : 'api/session/ext/wol/wake',
+            params  : httpParameters,
+            data    : $.param({connectionIdentifier: identifier}),
+            headers : {'Content-Type': 'application/x-www-form-urlencoded'}
+        })
+        .then(function wokeHost(wokeData) {
+            return wokeData['identifier'];
+        });
+    };
+    
+    /**
+     * Retrieve host information about the host associated with the given
+     * connection data source and identifier.
+     * 
+     * @param {type} dataSource
+     *     The data source where the connection exists.
+     *     
+     * @param {type} identifier
+     *     The identifier of the connection.
+     *     
+     * @returns {Promise}.Object
+     *     A promise, which, when resolved, will contain the hostname and
+     *     port associated with the connection.
+     */
+    var getHostInfo = function getHostInfo(dataSource, identifier) {
+        
+        return connectionService.getConnectionParameters(dataSource, identifier)
+        .then(function gotParameters(paramData) {
+            
+                $log.debug(paramData);
+            
+                return {
+                   'hostname' : paramData['hostname'],
+                   'port'     : paramData['port']
+               };
+                            
+        }, function(error) {
+            $log.error(error);
+            return null;
+        });
+    };
+    
+    /**
+     * Check the status of the host associated with the given datasource
+     * and connection identifier, returning a promise which, when resolved,
+     * will contain true if the host is up, or false if the host is down or an
+     * error occurs.
+     * 
+     * @param {type} dataSource
+     *     The datasource in Guacamole where the connection exists.
+     *     
+     * @param {type} identifier
+     *     The identifier of the connection.
+     *     
+     * @return {Promise}.Boolean
+     *     A promse which, when resolved, will contain a Boolean value for the
+     *     status of the host - True if the host is up, false otherwise or if
+     *     an error exists.
+     */
+    service.checkStatus = function checkStatus(dataSource, identifier) {
+
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+        
+        // Retrieve the information for the host (hostname and port).
+        var hostInfo = getHostInfo(dataSource, identifier);
+        
+        // Retrieve a promise to get the status of the host.
+        var status = hostInfo.then(function(hostData) {
+        
+            // Send the WOL request
+            return requestService({
+                method  : 'GET',
+                url     : 'api/session/ext/wol/check/' + hostData['hostname'] + '/' + hostData['port'],
+                params  : httpParameters
+            })
+            .then(function gotStatus(statusData) {
+                return statusData;
+            }, function(error) {","[{'comment': 'For the sake of readable stack traces, some sort of reasonable names should be provided to the callback functions.', 'commenter': 'mike-jumper'}]"
374,extensions/guacamole-auth-wol/src/main/resources/services/wolService.js,"@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Services to support the Wake-on-LAN extensions, including triggering
+ * the wake-up packet and checking host status.
+ */
+angular.module('guacWOL').factory('wolService', ['$injector',
+        function wolService($injector) {
+    
+    // Import required supporting services
+    var $log                  = $injector.get('$log');
+    var authenticationService = $injector.get('authenticationService');
+    var connectionService     = $injector.get('connectionService');
+    var requestService        = $injector.get('requestService');
+    
+    // This service.
+    var service = {};
+    
+    /**
+     * Wake up the host associated with the specified connection identifier.
+     * 
+     * @param {type} identifier
+     *     The identifier of the connection in the directory of the host
+     *     to be sent the Wake-on-LAN packet.
+     *     
+     * @return {Promise}
+     *     A promise which, when resolved, will mirror the identifier
+     *     passed in for the wake-on-LAN request and the status of the request.
+     */
+    service.wakeHost = function wakeHost(identifier) {
+        
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+
+        // Send the WOL request
+        return requestService({
+            method  : 'POST',
+            url     : 'api/session/ext/wol/wake',
+            params  : httpParameters,
+            data    : $.param({connectionIdentifier: identifier}),
+            headers : {'Content-Type': 'application/x-www-form-urlencoded'}
+        })
+        .then(function wokeHost(wokeData) {
+            return wokeData['identifier'];
+        });
+    };
+    
+    /**
+     * Retrieve host information about the host associated with the given
+     * connection data source and identifier.
+     * 
+     * @param {type} dataSource
+     *     The data source where the connection exists.
+     *     
+     * @param {type} identifier
+     *     The identifier of the connection.
+     *     
+     * @returns {Promise}.Object
+     *     A promise, which, when resolved, will contain the hostname and
+     *     port associated with the connection.
+     */
+    var getHostInfo = function getHostInfo(dataSource, identifier) {
+        
+        return connectionService.getConnectionParameters(dataSource, identifier)
+        .then(function gotParameters(paramData) {
+            
+                $log.debug(paramData);
+            
+                return {
+                   'hostname' : paramData['hostname'],
+                   'port'     : paramData['port']
+               };
+                            
+        }, function(error) {
+            $log.error(error);
+            return null;
+        });
+    };
+    
+    /**
+     * Check the status of the host associated with the given datasource
+     * and connection identifier, returning a promise which, when resolved,
+     * will contain true if the host is up, or false if the host is down or an
+     * error occurs.
+     * 
+     * @param {type} dataSource
+     *     The datasource in Guacamole where the connection exists.
+     *     
+     * @param {type} identifier
+     *     The identifier of the connection.
+     *     
+     * @return {Promise}.Boolean
+     *     A promse which, when resolved, will contain a Boolean value for the
+     *     status of the host - True if the host is up, false otherwise or if
+     *     an error exists.
+     */
+    service.checkStatus = function checkStatus(dataSource, identifier) {
+
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+        
+        // Retrieve the information for the host (hostname and port).
+        var hostInfo = getHostInfo(dataSource, identifier);
+        
+        // Retrieve a promise to get the status of the host.
+        var status = hostInfo.then(function(hostData) {
+        
+            // Send the WOL request
+            return requestService({
+                method  : 'GET',
+                url     : 'api/session/ext/wol/check/' + hostData['hostname'] + '/' + hostData['port'],
+                params  : httpParameters
+            })
+            .then(function gotStatus(statusData) {
+                return statusData;","[{'comment': ""Isn't this what will already happen (ie: effectively a no-op)?"", 'commenter': 'mike-jumper'}]"
374,extensions/guacamole-auth-wol/src/main/resources/services/wolService.js,"@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Services to support the Wake-on-LAN extensions, including triggering
+ * the wake-up packet and checking host status.
+ */
+angular.module('guacWOL').factory('wolService', ['$injector',
+        function wolService($injector) {
+    
+    // Import required supporting services
+    var $log                  = $injector.get('$log');
+    var authenticationService = $injector.get('authenticationService');
+    var connectionService     = $injector.get('connectionService');
+    var requestService        = $injector.get('requestService');
+    
+    // This service.
+    var service = {};
+    
+    /**
+     * Wake up the host associated with the specified connection identifier.
+     * 
+     * @param {type} identifier
+     *     The identifier of the connection in the directory of the host
+     *     to be sent the Wake-on-LAN packet.
+     *     
+     * @return {Promise}
+     *     A promise which, when resolved, will mirror the identifier
+     *     passed in for the wake-on-LAN request and the status of the request.
+     */
+    service.wakeHost = function wakeHost(identifier) {
+        
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+
+        // Send the WOL request
+        return requestService({
+            method  : 'POST',
+            url     : 'api/session/ext/wol/wake',
+            params  : httpParameters,
+            data    : $.param({connectionIdentifier: identifier}),
+            headers : {'Content-Type': 'application/x-www-form-urlencoded'}
+        })
+        .then(function wokeHost(wokeData) {
+            return wokeData['identifier'];
+        });
+    };
+    
+    /**
+     * Retrieve host information about the host associated with the given
+     * connection data source and identifier.
+     * 
+     * @param {type} dataSource
+     *     The data source where the connection exists.
+     *     
+     * @param {type} identifier
+     *     The identifier of the connection.
+     *     
+     * @returns {Promise}.Object
+     *     A promise, which, when resolved, will contain the hostname and
+     *     port associated with the connection.
+     */
+    var getHostInfo = function getHostInfo(dataSource, identifier) {
+        
+        return connectionService.getConnectionParameters(dataSource, identifier)
+        .then(function gotParameters(paramData) {
+            
+                $log.debug(paramData);
+            
+                return {
+                   'hostname' : paramData['hostname'],
+                   'port'     : paramData['port']
+               };
+                            
+        }, function(error) {
+            $log.error(error);
+            return null;
+        });
+    };
+    
+    /**
+     * Check the status of the host associated with the given datasource
+     * and connection identifier, returning a promise which, when resolved,
+     * will contain true if the host is up, or false if the host is down or an
+     * error occurs.
+     * 
+     * @param {type} dataSource
+     *     The datasource in Guacamole where the connection exists.
+     *     
+     * @param {type} identifier
+     *     The identifier of the connection.
+     *     
+     * @return {Promise}.Boolean
+     *     A promse which, when resolved, will contain a Boolean value for the
+     *     status of the host - True if the host is up, false otherwise or if
+     *     an error exists.
+     */
+    service.checkStatus = function checkStatus(dataSource, identifier) {
+
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+        
+        // Retrieve the information for the host (hostname and port).
+        var hostInfo = getHostInfo(dataSource, identifier);
+        
+        // Retrieve a promise to get the status of the host.
+        var status = hostInfo.then(function(hostData) {
+        
+            // Send the WOL request
+            return requestService({
+                method  : 'GET',
+                url     : 'api/session/ext/wol/check/' + hostData['hostname'] + '/' + hostData['port'],
+                params  : httpParameters
+            })
+            .then(function gotStatus(statusData) {
+                return statusData;
+            }, function(error) {
+                $log.error(error);","[{'comment': 'If a warning is sufficient, you may be able to leverage `requestService.WARN`:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/3089e71e60541731a49c8d8a5d69a7425780ce6f/guacamole/src/main/webapp/app/rest/services/requestService.js#L133-L144', 'commenter': 'mike-jumper'}]"
374,pom.xml,"@@ -57,11 +57,11 @@
         <module>extensions/guacamole-auth-openid</module>
         <module>extensions/guacamole-auth-quickconnect</module>
         <module>extensions/guacamole-auth-totp</module>
+        <module>extensions/guacamole-auth-wol</module>
 
         <!-- Example web applications using the Guacamole APIs -->
         <module>doc/guacamole-example</module>
         <module>doc/guacamole-playback-example</module>
-","[{'comment': 'Poor blank line. It was just minding its own business, being blank.', 'commenter': 'mike-jumper'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/connection/WOLConnection.java,"@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.wol.connection;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.form.TextField;
+import org.apache.guacamole.wol.WOLException;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.wol.WakeOnLAN;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A Connection which delegates functionality to an underlying connection, but
+ * which supplies attributes specific to Wake-on-LAN functionality.
+ */
+public class WOLConnection extends DelegatingConnection {
+    
+    /**
+     * The logger for this class.
+    */
+    private static final Logger logger = LoggerFactory.getLogger(WOLConnection.class);
+
+    /**
+     * The name of the attribute for the MAC address of this host.
+     */
+    public static final String WOL_ATTRIBUTE_MAC_ADDRESS = ""wol-mac-address"";
+
+    /**
+     * The name of the attribute that stores the network address to use
+     * to broadcast the WOL packet.
+     */
+    public static final String WOL_ATTRIBUTE_NET_BROADCAST = ""wol-net-broadcast"";
+
+    /**
+     * The default broadcast address to use if none is configured.
+     */
+    public static final String WOL_DEFAULT_BROADCAST = ""255.255.255.255"";
+    
+    /**
+     * The form containing Wake-on-LAN attributes.
+     */
+    public static final Form WOL_ATTRIBUTE_FORM = new Form(""wol-attributes"",
+        Arrays.asList(
+                new TextField(WOL_ATTRIBUTE_MAC_ADDRESS),
+                new TextField(WOL_ATTRIBUTE_NET_BROADCAST)
+        )
+    );
+    
+    /**
+     * The collection of forms for Wake-on-LAN configuration.
+     */
+    public static final Collection<Form> ATTRIBUTES =
+            Collections.unmodifiableCollection(Arrays.asList(
+                    WOL_ATTRIBUTE_FORM
+        )
+    );
+
+    /**
+     * The array containing all of the WOL-specific attributes.
+     */
+    public static final List<String> WOL_ATTRIBUTES = Arrays.asList(
+            WOL_ATTRIBUTE_MAC_ADDRESS,
+            WOL_ATTRIBUTE_NET_BROADCAST
+    );
+
+    /**
+     * The attributes for this connection.
+     */
+    private final Map<String, String> attributes;
+
+    /**
+     * The undecorated connection object used as the base of this WOLConnection.
+     */
+    private final Connection undecorated;
+    
+    /**
+     * Whether or not the user has access to update the data for this connection.
+     */
+    private final Boolean canUpdate;
+
+    /**
+     * Create a WOLConnection with the specified Connection object as the
+     * base, and indicate whether the user has privileges to update this
+     * connection.
+     *
+     * @param connection
+     *     The Connection object to decorate.
+     * 
+     * @param canUpdate
+     *     Whether or not the user can update this connection.
+     */
+    public WOLConnection(Connection connection, Boolean canUpdate) {
+
+        super(connection);
+        this.undecorated = connection;
+        this.attributes = super.getAttributes();","[{'comment': 'Caching the attributes of the superclass could be problematic. I would recommend instead calling `getAttributes()` where needed, saving the result of that call only locally to the function that needs it.', 'commenter': 'mike-jumper'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/rest/WOLUserContextResource.java,"@@ -0,0 +1,127 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.wol.rest;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.Socket;
+import java.util.Collections;
+import java.util.Map;
+import javax.ws.rs.FormParam;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.wol.connection.WOLConnection;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.Directory;
+
+/**
+ * REST API endpoints for the Wake-on-LAN module
+ */
+@Produces(MediaType.APPLICATION_JSON)
+public class WOLUserContextResource {
+
+    /**
+     * The directory associated with this REST endpoint resource that
+     * will be queried to trigger WOL packets.
+     */
+    private final Directory<Connection> directory;
+    
+    /**
+     * Default timeout for attempting to connect to a host, in milliseconds.
+     */
+    public static final int DEFAULT_TIMEOUT = 5000;
+
+    /**
+     * Set up a new REST resource that will be use to trigger
+     * WOL packets.
+     * 
+     * @param directory
+     *     The directory to use for this REST endpoint.
+     */
+    public WOLUserContextResource(Directory<Connection> directory) {
+        this.directory = directory;
+    }
+
+    /**
+     * A method which takes a connection identifier and triggers the wake-up
+     * of the host, returning the connection identifier and true if the wake-up
+     * was sent successfully, and throwing an exception if an error occurs.
+     * 
+     * @param connectionIdentifier
+     *     The identifier of the connection to trigger the wake-up for.
+     * 
+     * @return
+     *     A map containing the connection identifier and a Boolean true if 
+     *     the wake-up packet was triggered successfully.
+     * 
+     * @throws GuacamoleException
+     *     If an error occurs triggering the host wake-up.
+     */
+    @POST
+    @Path(""wake"")
+    public Map<String, Boolean> wakeUpHost(
+            @FormParam(""connectionIdentifier"") String connectionIdentifier)
+            throws GuacamoleException {
+
+        // Retrieve the connection
+        WOLConnection connection = (WOLConnection) directory.get(connectionIdentifier);
+
+        // Send the wake-up packet
+        connection.wakeUpHost();
+
+        // If we don't get an exception, we assume the packet is sent.
+        return Collections.<String, Boolean>singletonMap(connectionIdentifier,
+                true);
+    }
+    
+    /**
+     * Have Java attempting to connect to the given hostname on the given
+     * port number, returning true if the connection is successful, otherwise
+     * false.
+     * 
+     * @param hostname
+     *     The hostname or IP of the system to connect to.
+     * 
+     * @param port
+     *     The port number on which to connect to the system.
+     * 
+     * @return
+     *     True if the connection is established successfully, otherwise false.
+     */
+    @GET
+    @Path(""check/{hostname}/{port}"")
+    public Boolean checkHost(@PathParam(""hostname"") String hostname,
+            @PathParam(""port"") int port) {
+        
+        try (Socket socket = new Socket()) {
+            socket.connect(new InetSocketAddress(hostname, port), DEFAULT_TIMEOUT);
+            return true;
+        }
+        catch (IOException | IllegalArgumentException | SecurityException e) {
+            return false;","[{'comment': 'Any need to log that exception? Perhaps at least at the debug level?', 'commenter': 'mike-jumper'}, {'comment': ""Yeah, that's reasonable."", 'commenter': 'necouchman'}]"
374,extensions/guacamole-auth-wol/src/main/java/org/apache/guacamole/auth/wol/user/WOLUserContext.java,"@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.wol.user;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.net.auth.AuthenticationProvider;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DecoratingDirectory;
+import org.apache.guacamole.net.auth.DelegatingUserContext;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.UserContext;
+import org.apache.guacamole.auth.wol.connection.WOLConnection;
+import org.apache.guacamole.auth.wol.rest.WOLUserContextResource;
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.net.auth.Permissions;
+import org.apache.guacamole.net.auth.permission.ObjectPermission;
+import org.apache.guacamole.net.auth.permission.ObjectPermissionSet;
+import org.apache.guacamole.net.auth.permission.SystemPermission;
+import org.apache.guacamole.net.auth.permission.SystemPermissionSet;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A UserContext for the Wake-on-LAN extension that delegates storage
+ * to another UserContext.
+ */
+public class WOLUserContext extends DelegatingUserContext {
+
+    /**
+     * The logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(WOLUserContext.class);
+
+    /**
+     * The AuthenticationProvider associated with this UserContext.
+     */
+    private final AuthenticationProvider authProvider;
+
+    /**
+     * Establish a new WOLUserContext, which delegates all functions
+     * to the specified UserContext object.
+     * 
+     * @param userContext 
+     *     The UserContext object that this will delegate to.
+     * 
+     * @param authProvider
+     *     The authentication provider associated with this user context.
+     */
+    public WOLUserContext(UserContext userContext, AuthenticationProvider authProvider) {
+        super(userContext);
+        this.authProvider = authProvider;
+    }
+
+    @Override
+    public Directory<Connection> getConnectionDirectory() throws GuacamoleException {
+        return new DecoratingDirectory<Connection>(super.getConnectionDirectory()) {
+
+            @Override
+            protected Connection decorate(Connection object) throws GuacamoleException {
+                Permissions effective = self().getEffectivePermissions();
+                SystemPermissionSet systemPermissions = effective.getSystemPermissions();
+                ObjectPermissionSet objectPermissions = effective.getConnectionPermissions();
+                Boolean canUpdate = false;","[{'comment': 'Why `Boolean` rather than `boolean`?', 'commenter': 'mike-jumper'}, {'comment': 'Because CAPS is better than lowercase.\r\n\r\nNot really.', 'commenter': 'necouchman'}]"
374,extensions/guacamole-auth-wol/src/main/resources/templates/wol.html,"@@ -0,0 +1,11 @@
+<meta name=""after"" content=""a.home-connection"" />
+<span class=""wol""
+      ng-controller=""wolController""","[{'comment': ""It looks like you're essentially implementing a directive. It would be better to implement such a directive and reference that here, rather than use `ng-controller`."", 'commenter': 'mike-jumper'}]"
375,extensions/guacamole-auth-cas/src/main/resources/translations/de.json,"@@ -0,0 +1,12 @@
+{
+
+    ""DATA_SOURCE_CAS"" : {
+        ""NAME"" : ""CAS SSO Backend""","[{'comment': 'If this is the proper translation, it should be kept, but if you are not translating this, it should be removed.', 'commenter': 'necouchman'}, {'comment': 'I improve the translation', 'commenter': 'JordiRoman'}]"
375,extensions/guacamole-auth-duo/src/main/resources/translations/de.json,"@@ -0,0 +1,13 @@
+{
+
+    ""DATA_SOURCE_DUO"" : {
+        ""NAME"" : ""Duo TFA Backend""","[{'comment': 'Same as with above - if this is the correct German translation, keep the line, else remove it.', 'commenter': 'necouchman'}, {'comment': 'translation is ok', 'commenter': 'berndhose'}]"
375,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/de.json,"@@ -0,0 +1,112 @@
+{
+
+    ""LOGIN"" : {
+
+        ""ERROR_PASSWORD_BLANK""    : ""@:APP.ERROR_PASSWORD_BLANK"",
+        ""ERROR_PASSWORD_SAME""     : ""Das neue Passwort muss sich vom abgelaufenen Passwort unterscheiden."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
+        ""ERROR_NOT_VALID""         : ""Dieser Account ist gegenwärtig nicht gültig"",
+        ""ERROR_NOT_ACCESSIBLE""    : ""Zugriff zu diesem Account ist gegenwärtig nicht erlaubt. Bitte versuchen Sie es später erneut."",
+
+        ""INFO_PASSWORD_EXPIRED"" : ""Ihr Passwort ist abgelaufen und muss erneuert werden. Bitte geben Sie ein neues Passwort ein um fortzufahren."",
+
+        ""FIELD_HEADER_NEW_PASSWORD""         : ""Neues Passwort"",
+        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""Neues Passwort bestätigen""
+
+    },
+
+    ""CONNECTION_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Maximale Anzahl Verbindungen:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Maximale Anzahl Verbindungen pro Benutzer:"",
+
+        ""FIELD_HEADER_FAILOVER_ONLY""            : ""Nur Failover:"",
+        ""FIELD_HEADER_WEIGHT""                   : ""Verbindungspriorität:"",
+
+        ""FIELD_HEADER_GUACD_HOSTNAME""   : ""Hostname:"",
+        ""FIELD_HEADER_GUACD_ENCRYPTION"" : ""Verschlüsselung:"",
+        ""FIELD_HEADER_GUACD_PORT""       : ""Port:"",
+
+        ""FIELD_OPTION_GUACD_ENCRYPTION_EMPTY"" : """",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_NONE""  : ""Keine (unverschlüsselt)"",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_SSL""   : ""SSL / TLS"",
+
+        ""SECTION_HEADER_CONCURRENCY""    : ""Verbindungslimite"",
+        ""SECTION_HEADER_LOAD_BALANCING"" : ""Lastverteilung"",
+        ""SECTION_HEADER_GUACD""          : ""Guacamole Proxy Parameter (guacd)""","[{'comment': 'If this is the actual translation, it can stay, but this looks like an untranslated string?', 'commenter': 'necouchman'}, {'comment': 'translation is ok', 'commenter': 'berndhose'}]"
375,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/de.json,"@@ -0,0 +1,112 @@
+{
+
+    ""LOGIN"" : {
+
+        ""ERROR_PASSWORD_BLANK""    : ""@:APP.ERROR_PASSWORD_BLANK"",
+        ""ERROR_PASSWORD_SAME""     : ""Das neue Passwort muss sich vom abgelaufenen Passwort unterscheiden."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
+        ""ERROR_NOT_VALID""         : ""Dieser Account ist gegenwärtig nicht gültig"",
+        ""ERROR_NOT_ACCESSIBLE""    : ""Zugriff zu diesem Account ist gegenwärtig nicht erlaubt. Bitte versuchen Sie es später erneut."",
+
+        ""INFO_PASSWORD_EXPIRED"" : ""Ihr Passwort ist abgelaufen und muss erneuert werden. Bitte geben Sie ein neues Passwort ein um fortzufahren."",
+
+        ""FIELD_HEADER_NEW_PASSWORD""         : ""Neues Passwort"",
+        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""Neues Passwort bestätigen""
+
+    },
+
+    ""CONNECTION_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Maximale Anzahl Verbindungen:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Maximale Anzahl Verbindungen pro Benutzer:"",
+
+        ""FIELD_HEADER_FAILOVER_ONLY""            : ""Nur Failover:"",
+        ""FIELD_HEADER_WEIGHT""                   : ""Verbindungspriorität:"",
+
+        ""FIELD_HEADER_GUACD_HOSTNAME""   : ""Hostname:"",
+        ""FIELD_HEADER_GUACD_ENCRYPTION"" : ""Verschlüsselung:"",
+        ""FIELD_HEADER_GUACD_PORT""       : ""Port:"",
+
+        ""FIELD_OPTION_GUACD_ENCRYPTION_EMPTY"" : """",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_NONE""  : ""Keine (unverschlüsselt)"",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_SSL""   : ""SSL / TLS"",
+
+        ""SECTION_HEADER_CONCURRENCY""    : ""Verbindungslimite"",
+        ""SECTION_HEADER_LOAD_BALANCING"" : ""Lastverteilung"",
+        ""SECTION_HEADER_GUACD""          : ""Guacamole Proxy Parameter (guacd)""
+
+    },
+
+    ""CONNECTION_GROUP_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_ENABLE_SESSION_AFFINITY""  : ""Sessionzugehörigkeit aktivieren"",
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Maximale Anzahl Verbindungen:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Maximale Anzahl Verbindungen pro Benutzer:"",
+        ""SECTION_HEADER_CONCURRENCY"" : ""Verbindungslimit (Verteilungsgruppe)""
+
+    },
+
+    ""DATA_SOURCE_MYSQL"" : {
+        ""NAME"" : ""MySQL""","[{'comment': 'If this is the German translation of this string, keep it - if it is not being translated, remove it...and so on :-).', 'commenter': 'necouchman'}, {'comment': 'translation is ok', 'commenter': 'berndhose'}]"
375,extensions/guacamole-auth-openid/src/main/resources/translations/de.json,"@@ -0,0 +1,12 @@
+{
+
+    ""DATA_SOURCE_OPENID"" : {
+        ""NAME"" : ""OpenID SSO Backend""","[{'comment': 'Probably should be left out, unless this is the German translation.', 'commenter': 'necouchman'}, {'comment': 'translation is ok', 'commenter': 'berndhose'}]"
375,extensions/guacamole-auth-quickconnect/src/main/resources/translations/de.json,"@@ -0,0 +1,18 @@
+{
+
+    ""DATA_SOURCE_QUICKCONNECT"" : {
+        ""NAME"" : ""QuickConnect""","[{'comment': 'Probably should not be here?', 'commenter': 'necouchman'}, {'comment': 'translation is ok', 'commenter': 'berndhose'}]"
375,extensions/guacamole-auth-radius/src/main/resources/translations/de.json,"@@ -0,0 +1,13 @@
+{
+
+    ""DATA_SOURCE_RADIUS"" : {
+        ""NAME"" : ""RADIUS Backend""","[{'comment': 'Is this the correct French translation?', 'commenter': 'necouchman'}]"
375,extensions/guacamole-auth-totp/src/main/resources/translations/de.json,"@@ -0,0 +1,34 @@
+{
+
+    ""DATA_SOURCE_TOTP"" : {
+        ""NAME"" : ""TOTP TFA Backend""","[{'comment': 'No translation...', 'commenter': 'necouchman'}, {'comment': 'translation is ok', 'commenter': 'berndhose'}]"
375,extensions/guacamole-auth-totp/src/main/resources/translations/de.json,"@@ -0,0 +1,34 @@
+{
+
+    ""DATA_SOURCE_TOTP"" : {
+        ""NAME"" : ""TOTP TFA Backend""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_GUAC_TOTP"" : """"
+    },
+
+    ""TOTP"" : {
+
+        ""ACTION_HIDE_DETAILS"" : ""Details ausblenden"",
+        ""ACTION_SHOW_DETAILS"" : ""Details anzeigen"",
+
+        ""FIELD_HEADER_ALGORITHM""  : ""Algorithmus:"",
+        ""FIELD_HEADER_DIGITS""     : ""Anzahl Zeichen:"",
+        ""FIELD_HEADER_INTERVAL""   : ""Intervall:"",
+        ""FIELD_HEADER_SECRET_KEY"" : ""Privater Schlüssel:"",
+
+        ""FIELD_PLACEHOLDER_CODE"" : ""Authentifizierungs-Code"",
+
+        ""INFO_CODE_REQUIRED""       : ""Bitte geben Sie Ihren Authentifizierungs-Code ein, um Ihre Identität zu bestätigen."",
+        ""INFO_ENROLL_REQUIRED""     : ""Die Zweifaktor-Authentifizierung wurde für Ihren Account aktiviert."",
+        ""INFO_VERIFICATION_FAILED"" : ""Verifikation fehlgeschlagen. Bitte nochmals versuchen."",
+
+        ""HELP_ENROLL_BARCODE"" : ""Bitte scannen Sie den Barcode mittels einer Zweifaktor-Authentifizierungs-App auf Ihrem Smartphone oder einem anderen Gerät, um den Prozess fortzusetzen."",
+        ""HELP_ENROLL_VERIFY""  : ""Nach dem Scannen des Barcodes wird Ihnen ein {DIGITS}-stelliger Authentifizierungscode angezeigt. Bitte geben Sie diesen Code ein um die Aktivierung des Zweifaktor-Verfahrens abzuschliessen."",
+
+        ""SECTION_HEADER_DETAILS"" : ""Details:""","[{'comment': 'Leave it out...', 'commenter': 'necouchman'}]"
375,guacamole/src/main/webapp/translations/de.json,"@@ -4,29 +4,36 @@
     
     ""APP"" : {
 
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""${project.version}"",","[{'comment': 'Both these lines should be omitted.', 'commenter': 'necouchman'}, {'comment': 'Thanks, omitted.', 'commenter': 'leetxyz'}]"
375,guacamole/src/main/webapp/translations/de.json,"@@ -261,23 +292,74 @@
         ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
 
         ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""Administration:"",
-        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Ändere eigenes Passwort:"",
-        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Erstelle neue Benutzer:"",
-        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""Erstelle neue Verbindung:"",
-        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""Erstelle neue Verbindungsgruppe:"",
+        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Eigenes Passwort ändern:"",
+        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Neuen Benutzer erstellen:"",
+		""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""Neue Benutzergruppe erstellen:"",","[{'comment': 'Looks like this line has tabs instead of spaces.', 'commenter': 'necouchman'}, {'comment': 'Thanks, should be fixed.', 'commenter': 'leetxyz'}]"
375,guacamole/src/main/webapp/translations/de.json,"@@ -336,47 +437,80 @@
         ""FIELD_OPTION_COLOR_DEPTH_8""     : ""256 Farben"",
         ""FIELD_OPTION_COLOR_DEPTH_EMPTY"" : """",
 
+        ""FIELD_OPTION_RESIZE_METHOD_DISPLAY_UPDATE"" : ""\""Display Update\"" virtual channel (RDP 8.1+)"",
+        ""FIELD_OPTION_RESIZE_METHOD_EMPTY""          : """",
+        ""FIELD_OPTION_RESIZE_METHOD_RECONNECT""      : ""Erneut verbinden"",
+
         ""FIELD_OPTION_SECURITY_ANY""   : ""Jede"",
         ""FIELD_OPTION_SECURITY_EMPTY"" : """",
         ""FIELD_OPTION_SECURITY_NLA""   : ""NLA (Netzwerkebene Authentifizierung)"",
         ""FIELD_OPTION_SECURITY_RDP""   : ""RDP Verschlüsselung"",
         ""FIELD_OPTION_SECURITY_TLS""   : ""TLS Verschlüsselung"",
 
+        ""FIELD_OPTION_SERVER_LAYOUT_DA_DK_QWERTY"": ""Dänisch (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_DE_DE_QWERTZ"" : ""Deutsch (Qwertz)"",
         ""FIELD_OPTION_SERVER_LAYOUT_EMPTY""        : """",
-        ""FIELD_OPTION_SERVER_LAYOUT_EN_US_QWERTY"" : ""US Englisch (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_EN_GB_QWERTY"" : ""Englisch (GB) (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_EN_US_QWERTY"" : ""Englisch (US) (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_ES_ES_QWERTY"" : ""Spanisch (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_FAILSAFE""     : ""Unicode"",
+        ""FIELD_OPTION_SERVER_LAYOUT_FR_CH_QWERTZ"" : ""Schweiz/Französisch (Qwertz)"",
         ""FIELD_OPTION_SERVER_LAYOUT_FR_FR_AZERTY"" : ""Französisch (Azerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_IT_IT_QWERTY"" : ""Italienisch (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_JA_JP_QWERTY"" : ""Japanisch (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_PT_BR_QWERTY"" : ""Portugiesisch (BR) (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_SV_SE_QWERTY"" : ""Schwedisch (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_TR_TR_QWERTY"" : ""Türkisch (Qwerty)"",
 
         ""NAME"" : ""RDP"",
 
         ""SECTION_HEADER_AUTHENTICATION""     : ""Authentifizierung"",
         ""SECTION_HEADER_BASIC_PARAMETERS""   : ""Basiseinstellungen"",
         ""SECTION_HEADER_DEVICE_REDIRECTION"" : ""Geräteumleitung"",
         ""SECTION_HEADER_DISPLAY""            : ""Bildschirm"",
+        ""SECTION_HEADER_GATEWAY""            : ""Remote Desktop Gateway"",
+        ""SECTION_HEADER_LOAD_BALANCING""     : ""Load Balancing"",","[{'comment': 'Not sure these two lines should be here, unless this is the German translation?', 'commenter': 'necouchman'}, {'comment': 'translation is ok', 'commenter': 'berndhose'}]"
375,guacamole/src/main/webapp/translations/de.json,"@@ -400,27 +534,56 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY""          : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",","[{'comment': 'Are these accurate translations?', 'commenter': 'necouchman'}, {'comment': 'translation is ok', 'commenter': 'berndhose'}]"
375,guacamole/src/main/webapp/translations/de.json,"@@ -400,27 +534,56 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY""          : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+
         ""NAME"" : ""SSH"",
 
         ""SECTION_HEADER_AUTHENTICATION"" : ""Authentifizierung"",
+        ""SECTION_HEADER_BEHAVIOR""       : ""Terminal behavior"",","[{'comment': 'Translation, or copy?', 'commenter': 'necouchman'}, {'comment': 'Should be ""Terminalverhalten""', 'commenter': 'berndhose'}]"
375,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/de.json,"@@ -0,0 +1,112 @@
+{
+
+    ""LOGIN"" : {
+
+        ""ERROR_PASSWORD_BLANK""    : ""@:APP.ERROR_PASSWORD_BLANK"",
+        ""ERROR_PASSWORD_SAME""     : ""Das neue Passwort muss sich vom abgelaufenen Passwort unterscheiden."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
+        ""ERROR_NOT_VALID""         : ""Dieser Account ist gegenwärtig nicht gültig"",
+        ""ERROR_NOT_ACCESSIBLE""    : ""Zugriff zu diesem Account ist gegenwärtig nicht erlaubt. Bitte versuchen Sie es später erneut."",
+
+        ""INFO_PASSWORD_EXPIRED"" : ""Ihr Passwort ist abgelaufen und muss erneuert werden. Bitte geben Sie ein neues Passwort ein um fortzufahren."",
+
+        ""FIELD_HEADER_NEW_PASSWORD""         : ""Neues Passwort"",
+        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""Neues Passwort bestätigen""
+
+    },
+
+    ""CONNECTION_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Maximale Anzahl Verbindungen:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Maximale Anzahl Verbindungen pro Benutzer:"",
+
+        ""FIELD_HEADER_FAILOVER_ONLY""            : ""Nur Failover:"",
+        ""FIELD_HEADER_WEIGHT""                   : ""Verbindungspriorität:"",
+
+        ""FIELD_HEADER_GUACD_HOSTNAME""   : ""Hostname:"",
+        ""FIELD_HEADER_GUACD_ENCRYPTION"" : ""Verschlüsselung:"",
+        ""FIELD_HEADER_GUACD_PORT""       : ""Port:"",
+
+        ""FIELD_OPTION_GUACD_ENCRYPTION_EMPTY"" : """",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_NONE""  : ""Keine (unverschlüsselt)"",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_SSL""   : ""SSL / TLS"",
+
+        ""SECTION_HEADER_CONCURRENCY""    : ""Verbindungslimite"",
+        ""SECTION_HEADER_LOAD_BALANCING"" : ""Lastverteilung"",
+        ""SECTION_HEADER_GUACD""          : ""Guacamole Proxy Parameter (guacd)""
+
+    },
+
+    ""CONNECTION_GROUP_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_ENABLE_SESSION_AFFINITY""  : ""Sessionzugehörigkeit aktivieren"",
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Maximale Anzahl Verbindungen:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Maximale Anzahl Verbindungen pro Benutzer:"",
+        ""SECTION_HEADER_CONCURRENCY"" : ""Verbindungslimit (Verteilungsgruppe)""
+
+    },
+
+    ""DATA_SOURCE_MYSQL"" : {
+        ""NAME"" : ""MySQL""
+    },
+
+    ""DATA_SOURCE_MYSQL_SHARED"" : {
+        ""NAME"" : ""Geteilte Verbindungen (MySQL)""
+    },
+
+    ""DATA_SOURCE_POSTGRESQL"" : {
+        ""NAME"" : ""PostgreSQL""
+    },
+
+    ""DATA_SOURCE_POSTGRESQL_SHARED"" : {
+        ""NAME"" : ""Geteilte Verbindungen (PostgreSQL)""
+    },
+
+    ""DATA_SOURCE_SQLSERVER"" : {
+        ""NAME"" : ""SQL Server""
+    },
+
+    ""DATA_SOURCE_SQLSERVER_SHARED"" : {
+        ""NAME"" : ""Geteilte Verbindungen (SQL Server)""
+    },
+
+    ""HOME"" : {
+        ""INFO_SHARED_BY"" : ""Geteilt mit {USERNAME}""
+    },
+
+    ""PASSWORD_POLICY"" : {
+
+        ""ERROR_CONTAINS_USERNAME""      : ""Passwörten dürfen Ihren Benutzername nicht enthalten."",","[{'comment': 'From @berndhose on #399:\r\n\r\n> I have reviewed the proposed changes of #375 and they seem to be ok, apart from one occurrence of the word ""Passwörten"", which should read ""Passwörter"".', 'commenter': 'mike-jumper'}, {'comment': 'reviewed some more, see following messages', 'commenter': 'berndhose'}]"
378,extensions/guacamole-auth-cas/src/licenses/LICENSE,"@@ -234,3 +234,13 @@ JSR-330 / Dependency Injection for Java (http://code.google.com/p/atinject/)
     From: 'JSR-330 Expert Group' (https://jcp.org/en/jsr/detail?id=330)
     License(s):
         Apache v2.0 (bundled/javax.inject-1/LICENSE-2.0.txt)
+
+
+JAXB API / XML Processing (https://projects.eclipse.org/projects/ee4j.jaxb)","[{'comment': '""JAXB ..."" should be between ""Google Guice ..."" and ""JSR-330 ..."".', 'commenter': 'mike-jumper'}]"
378,extensions/guacamole-auth-duo/src/licenses/LICENSE,"@@ -272,3 +272,12 @@ JSR-330 / Dependency Injection for Java (http://code.google.com/p/atinject/)
     License(s):
         Apache v2.0 (bundled/javax.inject-1/LICENSE-2.0.txt)
 
+
+JAXB API / XML Processing (https://projects.eclipse.org/projects/ee4j.jaxb)","[{'comment': '""JAXB ..."" should be between ""Google Guice ..."" and ""JSR-330 ..."".', 'commenter': 'mike-jumper'}]"
378,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-dist/src/licenses/LICENSE,"@@ -247,6 +247,15 @@ JSR-330 / Dependency Injection for Java (http://code.google.com/p/atinject/)
         Apache v2.0 (bundled/javax.inject-1/LICENSE-2.0.txt)
 
 
+JAXB API / XML Processing (https://projects.eclipse.org/projects/ee4j.jaxb)","[{'comment': '""JAXB ..."" should be between ""Guava ..."" and ""JSR-330 ..."".', 'commenter': 'mike-jumper'}]"
378,extensions/guacamole-auth-totp/src/licenses/LICENSE,"@@ -292,3 +292,12 @@ ZXing Barcode Scanning Library (https://github.com/zxing/zxing/)
     License(s):
         Apache v2.0 (bundled/zxing-3.3.1/LICENSE)
 
+
+JAXB API / XML Processing (https://projects.eclipse.org/projects/ee4j.jaxb)","[{'comment': '""JAXB ..."" should be before ""ZXing ..."".', 'commenter': 'mike-jumper'}]"
378,extensions/guacamole-auth-totp/src/licenses/LICENSE,"@@ -284,6 +284,15 @@ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 
+JAXB API / XML Processing (https://projects.eclipse.org/projects/ee4j.jaxb)","[{'comment': 'Sorry - I was wrong here. There are a number of other licenses cited in `LICENSE` for TOTP, and the ""JAXB ..."" one should thus go even further up where it\'s properly alphabetical.', 'commenter': 'mike-jumper'}, {'comment': ""Now I've said my A B Cs, next time won't you sing with me... :musical_note: "", 'commenter': 'necouchman'}]"
379,guacamole/src/main/webapp/translations/ru.json,"@@ -327,9 +327,11 @@
         ""FIELD_OPTION_SERVER_LAYOUT_FR_FR_AZERTY"" : ""French (Azerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_IT_IT_QWERTY"" : ""Italian (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_SV_SE_QWERTY"" : ""Swedish (Qwerty)"",
-	      ""FIELD_OPTION_SERVER_LAYOUT_RU_RU_QWERTY"" : ""Russian (Qwerty)"",
+	    ""FIELD_OPTION_SERVER_LAYOUT_RU_RU_QWERTY"" : ""Russian (Qwerty)"",","[{'comment': 'Looks like a stray tab made it in here...', 'commenter': 'necouchman'}, {'comment': ""Yep, apparently some time ago via 8d33092c357b62da8b181046e8bb9506820ae885 when the Russian translation was contributed. I'll correct it."", 'commenter': 'mike-jumper'}]"
381,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/ModeledAuthenticatedUser.java,"@@ -168,5 +169,12 @@ public String getIdentifier() {
     public void setIdentifier(String identifier) {
         user.setIdentifier(identifier);
     }
+    
+    @Override
+    public Set<String> getEffectiveUserGroups() {
+        Set<String> allGroups = new HashSet<>(user.getEffectiveUserGroups());
+        allGroups.addAll(super.getEffectiveUserGroups());
+        return Collections.unmodifiableSet(allGroups);","[{'comment': ""Since we're using Guava, I suggest using `Sets.union()` to produce a read-only merged view of the two sets, rather than creating a new merged set through copying each element:\r\n\r\nhttps://google.github.io/guava/releases/27.0.1-jre/api/docs/com/google/common/collect/Sets.html#union-java.util.Set-java.util.Set-\r\n\r\nOther than that, I'm happy with these changes."", 'commenter': 'mike-jumper'}, {'comment': 'Done.', 'commenter': 'necouchman'}]"
382,extensions/guacamole-auth-duo/src/main/java/org/apache/guacamole/auth/duo/api/SignedDuoCookie.java,"@@ -221,7 +221,7 @@ private static String sign(String key, String data) throws GuacamoleException {
             mac.init(new SecretKeySpec(key.getBytes(""UTF-8""), SIGNATURE_ALGORITHM));
 
             // Return signature as hex
-            return DatatypeConverter.printHexBinary(mac.doFinal(data.getBytes(""UTF-8""))).toLowerCase();
+            return BaseEncoding.base16().encode(mac.doFinal(data.getBytes(""UTF-8""))).toLowerCase();","[{'comment': 'Guava provides a mechanism for controlling the case of the resulting string prior to encoding:\r\n\r\nhttps://google.github.io/guava/releases/27.0-jre/api/docs/com/google/common/io/BaseEncoding.html#lowerCase--\r\n\r\nFairly minor, but probably worth switching over to `BaseEncoding.base16().lowerCase()`.', 'commenter': 'mike-jumper'}, {'comment': 'Okay, swapped this over to lower prior to encoding.', 'commenter': 'necouchman'}]"
383,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/UserService.java,"@@ -411,8 +411,13 @@ public ModeledUser retrieveUser(AuthenticationProvider authenticationProvider,
 
         // Retrieve corresponding user model, if such a user exists
         UserModel userModel = userMapper.selectOne(username);
-        if (userModel == null)
-            return null;
+        
+        // If no user exists, create a temporary one to map
+        // the authenticated user.
+        if (userModel == null) {
+            userModel = new UserModel();","[{'comment': ""Unfortunately, this will break handling of the `mysql-user-required`, `postgresql-user-required`, etc. properties, which rely on this function returning `null` if no user exists:\r\n\r\nhttp://guacamole.apache.org/doc/gug/jdbc-auth.html#jdbc-auth-restrict\r\n\r\nSee:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/d1e928bea79ca81c827e9b6adedabc98eefdf701/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/JDBCAuthenticationProviderService.java#L84-L140\r\n\r\nThis function's documented return behavior will also need to be updated if this change (or something similar to it) are implemented. It is currently documented as returning `null` if no such user exists."", 'commenter': 'mike-jumper'}, {'comment': 'Okay, this should be handled, now.  And return tag has been updated.', 'commenter': 'necouchman'}]"
383,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/UserService.java,"@@ -392,8 +399,12 @@ public ModeledAuthenticatedUser retrieveAuthenticatedUser(AuthenticationProvider
      *     The AuthenticatedUser to retrieve the corresponding ModeledUser of.
      *
      * @return
-     *     The ModeledUser which corresponds to the given AuthenticatedUser, or
-     *     null if no such user exists.
+     *     The ModeledUser which corresponds to the given AuthenticatedUser, if
+     *     the user exists in the database.  If the user does not exist, and
+     *     the module has been configured to require JDBC authentication via
+     *     a ""[db]-user-required"" parameter, null will be returned.  Otherwise","[{'comment': 'This now looks OK, but this feels like a separation of concerns issue to me. The `UserService` has up until now not dealt with configuration details from the `JDBCEnvironment` at all, and this function is aimed at actual retrieval of data.\r\n\r\nWhat do you think about a separate function that embodies strictly the semantics of creating a skeleton, in-memory `AuthenticatedUser`? That way `retrieveAuthenticatedUser()` can truly be about retrieval and can remain independent of configuration concerns?', 'commenter': 'mike-jumper'}, {'comment': ""Yeah, you're right.  I've taken a stab at redoing this way - creating a new `retrieveSkeletonUser()` method in the `UserService` class, and then doing all of the checks (that already happen, anyway) for configuration items in `JDBCAUthenticationProviderSrevice`."", 'commenter': 'necouchman'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/UserService.java,"@@ -401,25 +401,25 @@ public ModeledAuthenticatedUser retrieveAuthenticatedUser(AuthenticationProvider
      */
     public ModeledUser retrieveUser(AuthenticationProvider authenticationProvider,
             AuthenticatedUser authenticatedUser) throws GuacamoleException {
+        
+        if (authenticatedUser == null)","[{'comment': 'Why the check for `null`?', 'commenter': 'mike-jumper'}, {'comment': ""The rest of the code in that method assumes that `authenticatedUser` is not `null`.  I think the IDE flagged it ]as a potential for `null`-dereferencing, so I added a check.  Will pull it out for now - since I'm not doing anything else with this particular method it seems out of scope, now."", 'commenter': 'necouchman'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/UserService.java,"@@ -460,6 +460,47 @@ public ModeledUser retrieveSkeletonUser(AuthenticationProvider authenticationPro
         return user;
         
     }
+    
+    /**
+     * Create a user in the database that does not already exist, setting up an
+     * empty model and inserting both the entity and the user object, and
+     * generating a random password for the account.
+     * 
+     * @param authenticationProvider
+     *     The authentication provider that authenticated the user.
+     * 
+     * @param authenticatedUser
+     *     The authenticated user that is being added to the database.
+     * 
+     * @return
+     *     The ModeledUser associated with the newly-created database object
+     *     for the user.
+     * 
+     * @throws GuacamoleException
+     *     If a ModeledUser cannot be created, or if the user cannot be
+     *     inserted into the database.
+     */
+    public ModeledUser createMissingUser(AuthenticationProvider authenticationProvider,
+            AuthenticatedUser authenticatedUser) throws GuacamoleException {
+        
+        ModeledUser user = getObjectInstance(null,
+                new UserModel(authenticatedUser.getIdentifier()));
+        
+        // Insert the database object
+        entityMapper.insert(user.getModel());
+            
+        // Auto-generate a password
+        user.setPassword(null);
+            
+        // Set up cyclic reference
+        user.setCurrentUser(new ModeledAuthenticatedUser(authenticatedUser,
+            authenticationProvider, user));
+            
+        // Insert the user object
+        userMapper.insert(user.getModel());","[{'comment': ""The creation process will need to take into account the default set of permissions intended to be granted to each user upon creation:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/68c542787c092aae22decc40307b1927119f6e4b/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/UserService.java#L73-L79\r\n\r\nI'm a little worried about duplicating creation logic here. Is there a way to leverage `createObject()`?"", 'commenter': 'mike-jumper'}, {'comment': 'So, for using `createObject()`, the only issue I can see is that the current implementation of it requires the input of an already authenticated user who is creating the object, and then checks that the user is an Administrator.  So, we could do one of a couple of things:\r\n* Tweak the `createObject()` code to factor in System-created users in this instance.\r\n* Create some sort of internal definition of a SYSTEM user that can be passed into the `createObject()` method and that is, by definition, an Administrator.\r\n\r\nThoughts?', 'commenter': 'necouchman'}, {'comment': '@mike-jumper: Ping - suggestions on the best way to go for this?', 'commenter': 'necouchman'}, {'comment': ""Tweaking `createObject()` (and pretty much everything else) such that it has defined behavior for some unrestricted internal system user makes sense. It would also ease the implementation of some future addition to the extension API which allows third-party extensions to perform actions without requiring the logged-in user to have sufficient privileges (enrolling in TOTP despite lacking `UPDATE` permission on your own user object, for example).\r\n\r\nDefining behavior for `null` would be simple but dangerous. It would be all to easy for a bug to result in an unexpected `null` and then bam: privilege escalation.\r\n\r\nI like the idea of an internal system user definition. That would require very explicit usage which would not be error prone. I can think of two possible approaches:\r\n\r\n1. Creating some wrapper class which *might* contain a `ModeledAuthenticatedUser` (but isn't guaranteed to) and which has some well-defined way to declare that an instance represents a privileged system user that lacks a model.\r\n2. Creating some base interface which both `RemoteAuthenticatedUser` and `ModeledAuthenticatedUser` implement and which abstracts away permission retrieval. Existing usages of those classes can then be replaced with the interface, and a concrete, privileged implementation of that interface can be created which simply returns true for all permission checks."", 'commenter': 'mike-jumper'}, {'comment': ""A third option:\r\n\r\nCheck whether it's possible to refactor things which accept `ModeledAuthenticatedUser` to instead accept `User`. Callers would then either pass `modeledAuthenticatedUser.getUser()` or the previously-mentioned concrete implementation of the interface (in this case `User`) which simply returns true for all permission checks."", 'commenter': 'mike-jumper'}, {'comment': 'I’m getting back to working on this, hopefully have something figured out in a couple of days.  Any of the options are going to take some significant refactoring, so just trying to flesh out which makes the most sense.', 'commenter': 'necouchman'}, {'comment': ""Okay, so, been taking a look at the options and trying some things out - I'm determined to figure this out...\r\n1. The first option - a wrapper class - seems like the least desirable to me, so I've been mostly ignoring this route.  Still a possibility, but the other two seem a little more elegant.\r\n2. The second option - an interface for permission gathering that can be implemented by `RemoteAuthenticatedUser` and `ModeledAuthenticatedUser` - seems like the best way to do this.  **Question: Is there any reason the interface to be implemented shouldn't be the `Permissions` interface, since it already contains the permissions-gathering methods?**\r\n3. I took a look at the third option - replacing `ModeledAuthenticatedUser` with `User`, and, while it probably would be feasible in the end, it isn't quite as simple as just swapping them out - particularly since `ModeledAuthenticatedUser.getUser()` passes a `ModeledUser`, not a plain `User`, which has some extra methods like `isAdministrator()` that have to be factored in.  So, either the `User` class (interface?) would have to have at least the `isAdministrator()` method defined (stubbed), or we'd have to do `ModeledUser` instead of `User`, but then this System user couldn't be defined in the `guacamole-ext` package, it would have to be in the `guacamole-jdbc-base` package, which may not be the best place for it.  Hopefully that makes sense.\r\n4. I guess this brings up a fourth option that is a combination of two and three - either add a handful of the permissions methods to the `User` interface, and replace `ModeledAuthenticatedUser` with `User` such that swapping out `ModeledAuthenticatedUser` with `User` would actually work."", 'commenter': 'necouchman'}, {'comment': ""I'll have to reread and reacquaint myself with these changes.\r\n\r\nI don't think it will make sense to expose permission sets from `AuthenticatedUser`, nor that there should need to be any fundamental changes to guacamole-ext. It should be possible for the internals of the JDBC auth to have their own internal representation of a system-level user without requiring that permissions be re-anchored to `AuthenticatedUser`.\r\n\r\nThere are semantic issues with doing so:\r\n\r\n1. The `AuthenticatedUser` interface is a pure means of representing _identity_. Mixing that with identity (authentication) with permissions (authorization) collapses an established separation of concerns.\r\n2. There is no definition of cross-extension identity except for `AuthenticatedUser`. As such, the identifiers used by `ObjectPermissionSet` will not have a well-defined meaning. Given a particular `AuthenticatedUser`, I can retrieve the corresponding `User` for each other extension and discover what extension-specific permissions have been granted. If those permissions are moved to `AuthenticatedUser`, this becomes impossible, and the meaning of the identifiers becomes ambiguous."", 'commenter': 'mike-jumper'}, {'comment': ""Looking over creation of a user and the functionality of `createObject()`, the main beast appears to be the automatic permission creation. When a user `X` attempts to create a user `Y`, the following permissions are automatically added:\r\n\r\nThis user... | ...can do this... | ...to this object\r\n------------ | ----------------- | -----------------\r\n`X` | `READ` | User `Y`\r\n`X` | `UPDATE` | User `Y`\r\n`X` | `DELETE` | User `Y`\r\n`X` | `ADMINISTER` | User `Y`\r\n`Y` | `READ` | User `Y`\r\n\r\nThis will be problematic where `X` is the special system user, as then `X` does not exist and we really only want to grant the following permissions:\r\n\r\nThis user... | ...can do this... | ...to this object\r\n------------ | ----------------- | -----------------\r\n`Y` | `READ` | User `Y`\r\n\r\nPerhaps we really can't avoid having a special-case `createMissingUser()`-type function specific to `UserService`..."", 'commenter': 'mike-jumper'}, {'comment': ""Okay - I'll refocus it on solely the JDBC extension for now.\r\n\r\nI was thinking that it actually might dovetail nicely with GUACAMOLE-617, which deals with extracting the permissions management portions of the JDBC module out into a common place usable by multiple modules, but at this point it probably just makes sense to go ahead and stick in the JDBC module and work about those changes later.  Let me see what I can figure out."", 'commenter': 'necouchman'}, {'comment': ""Okay, @mike-jumper, jumping back into this.  The changes you made have vastly simplified the code....\r\n\r\n....but, I've run aground of another issue.  Your first request, long, long ago, was to try to re-use the existing `userService.createObject()` method, both to avoid duplicating code, and to make sure that implicit permissions are granted.  I'm now hitting an issue with this, because the `PrivilegedModeledAuthenticatedUser` doesn't have an `entity_id`, which means when it goes to run `getImplicitPermissions()`, it sets the `entity_id` to `null`, which then causes a database constraint violation trying to insert into `guacamole_user_permission` with a `null` `entity_id` value.\r\n\r\nSuggestions?  Refactor `createObject()` to handle these cases?  Or scrap that and just manually do the `entityMapper.insert()` and `userMapper.insert()` calls, and then update permissions after those?\r\n\r\n...and, now that I'm re-reading your comments, it seems that you arrived at the same conclusion earlier, so maybe I'll just push forward with a `createMissingUser()` method."", 'commenter': 'necouchman'}, {'comment': ""Okay, with a couple of minor tweaks to `getImplicitPermissions()`, I think I've got this working."", 'commenter': 'necouchman'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-sqlserver/src/main/java/org/apache/guacamole/auth/sqlserver/SQLServerGuacamoleProperties.java,"@@ -181,5 +181,13 @@ private SQLServerGuacamoleProperties() {}
         public String getName() { return ""sqlserver-driver""; }
 
     };
+    
+    public static final BooleanGuacamoleProperty SQLSERVER_AUTO_CREATE_ACCOUNTS =","[{'comment': 'Missing JavaDoc.', 'commenter': 'mike-jumper'}, {'comment': 'Oops.', 'commenter': 'necouchman'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/sharing/user/SharedAuthenticatedUser.java,"@@ -99,7 +102,57 @@ public String getIdentifier() {
 
     @Override
     public void setIdentifier(String identifier) {
-        throw new UnsupportedOperationException(""Users authenticated via share keys are immutable."");
+        throw new UnsupportedOperationException(
+                ""Users authenticated via share keys are immutable."");
+    }
+
+    @Override
+    public ObjectPermissionSet getActiveConnectionPermissions()
+            throws GuacamoleException {
+        throw new UnsupportedOperationException(
+                ""Shared users do not have any assigned permissions."");
+    }","[{'comment': ""The `ObjectPermissionSet` representation of no permissions is an implementation of `ObjectPermissionSet` which returns no permissions, such as [`ObjectPermissionSet.EMPTY_SET`](http://guacamole.apache.org/doc/guacamole-ext/org/apache/guacamole/net/auth/permission/ObjectPermissionSet.html#EMPTY_SET).\r\n\r\nRetrieving user permissions is a common operation and needs to succeed. Throwing `UnsupportedOperationException` doesn't indicate that the user has no permissions, but rather that permission retrieval is not supported, and will cause an internal error whenever any part of the webapp attempts to retrieve the permissions of this user."", 'commenter': 'mike-jumper'}, {'comment': ""Yeah, this was one of my many attempts to figure out some elegant or sexy way to do this.  I'll refactor it, here, soon."", 'commenter': 'necouchman'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ModeledDirectoryObjectService.java,"@@ -429,14 +429,19 @@ public InternalType retrieveObject(ModeledAuthenticatedUser user,
         
         // Build list of implicit permissions
         Collection<ObjectPermissionModel> implicitPermissions =
-                new ArrayList<ObjectPermissionModel>(IMPLICIT_OBJECT_PERMISSIONS.length);
+                new ArrayList<>();","[{'comment': 'Why is the initial length is going away?', 'commenter': 'mike-jumper'}, {'comment': ""The way I implemented it, the length gets checked in `createObject()` to see if there's any reason at all to try to create the implicit permissions.  I was unsure what the behavior of that would be if an initial length is actually set?"", 'commenter': 'necouchman'}, {'comment': ""Okay, I'v re-arranged the way that method works a bit more to keep this and not check entity ID on each iteration of the loop."", 'commenter': 'necouchman'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ModeledDirectoryObjectService.java,"@@ -429,14 +429,19 @@ public InternalType retrieveObject(ModeledAuthenticatedUser user,
         
         // Build list of implicit permissions
         Collection<ObjectPermissionModel> implicitPermissions =
-                new ArrayList<ObjectPermissionModel>(IMPLICIT_OBJECT_PERMISSIONS.length);
+                new ArrayList<>();
 
         UserModel userModel = user.getUser().getModel();
         for (ObjectPermission.Type permission : IMPLICIT_OBJECT_PERMISSIONS) {
 
+            Integer entityId = userModel.getEntityID();
+            
+            if (entityId == null)
+                continue;","[{'comment': ""If I'm reading this correctly, if user model does not yet have an associated entity ID, the entirety of this loop will be skipped (one iteration at a time). Is this correct and intended?\r\n\r\nCan you clarify under what circumstances the entity ID would not be present?"", 'commenter': 'mike-jumper'}, {'comment': ""As far as I know, the only circumstances where `entityId` is null is where the system user is doing the work rather than an actual user.  That said, it should always be null, so I can definitely re-arrange this a bit.  I just wasn't sure where the permission comes from that grants the new entity `READ` access to itself..."", 'commenter': 'necouchman'}, {'comment': ""Okay, I've re-arranged this a bit - let me know if that looks okay."", 'commenter': 'necouchman'}, {'comment': ""Okay, took another couple of tries, but I've tweaked this a bit more.  Let me know if that looks okay - essentially, in the `super` version of the `getImplicitPermissions()` method I'm either returning an `emptyList()` if the entity id is null, or an `unmodifiableCollection()` of permissions.  In the `UserService` version of `getImplicitPermissions()` I have it making a copy and then adding anything to it (`READ` for self) that it needs, and return another `unmodifiableCollection()` of those.  This makes the behavior consistent across both of those methods."", 'commenter': 'necouchman'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLGuacamoleProperties.java,"@@ -240,5 +240,13 @@ private MySQLGuacamoleProperties() {}
         public String getName() { return ""mysql-ssl-client-password""; }
         
     };
+    
+    public static final BooleanGuacamoleProperty MYSQL_AUTO_CREATE_ACCOUNTS =","[{'comment': 'Missing JavaDoc.', 'commenter': 'mike-jumper'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-sqlserver/src/main/java/org/apache/guacamole/auth/sqlserver/conf/SQLServerGuacamoleProperties.java,"@@ -193,5 +193,13 @@ private SQLServerGuacamoleProperties() {}
         public String getName() { return ""sqlserver-driver""; }
 
     };
+    
+    public static final BooleanGuacamoleProperty SQLSERVER_AUTO_CREATE_ACCOUNTS =","[{'comment': 'Here, too - missing JavaDoc.', 'commenter': 'mike-jumper'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/JDBCAuthenticationProviderService.java,"@@ -126,9 +127,15 @@ public ModeledUserContext getUserContext(AuthenticationProvider authenticationPr
         }
         
         // If no user account is found, and database-specific account
-        // restrictions do not apply, get an empty user.
+        // restrictions do not apply, get a skeleton user.
         else if (!databaseRestrictionsApplicable) {
             user = userService.retrieveSkeletonUser(authenticationProvider, authenticatedUser);
+            
+            // If auto account creation is enabled, add user to DB.
+            if(environment.autoCreateAbsentAccounts()) {","[{'comment': 'Your `if` nemesis returns. ;)', 'commenter': 'mike-jumper'}, {'comment': '-Sigh-', 'commenter': 'necouchman'}]"
389,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLGuacamoleProperties.java,"@@ -240,5 +240,18 @@ private MySQLGuacamoleProperties() {}
         public String getName() { return ""mysql-ssl-client-password""; }
         
     };
+    
+    /**
+     * Wether or not to automatically create accounts in the MySQL database for","[{'comment': 'Whether*', 'commenter': 'mike-jumper'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -72,7 +83,9 @@
         ""ERROR_TUNNEL_202""     : ""La connexion a été fermée car le serveur met trop de temps à répondre. En général, il s'agit de problème réseau comme un réseau Wi-Fi trop lent ou un réseau très lent. Merci de vérifier votre réseau ou de contacter l'administrateur."", 
         ""ERROR_TUNNEL_203""     : ""Le serveur a rencontré une erreur et a fermé la connexion. Merci de réessayer ou de contacter l'administrateur."", 
         ""ERROR_TUNNEL_204""     : ""Le connexion demandée n'existe pas. Merci de vérifier le nom et de réessayer."",
-        ""ERROR_TUNNEL_205""     : ""Cette connexion est actuellement utilisée et les connexions multiples ne sont pas autorisées. Merci de réeassyer plus tard."", 
+        ""ERROR_TUNNEL_205""     : ""Cette connexion est actuellement utilisée et les connexions multiples ne sont pas autorisées. Merci de réeassyer plus tard."",
+          ""ERROR_TUNNEL_207""     : ""Le serveur Guacamole n'est pas actuellement accessible. Veuillez vérifier votre réseau et réessayer.."",","[{'comment': 'This has some extra indentation.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -98,7 +111,8 @@
         ""HELP_MOUSE_MODE""          : ""Détermine comment la souris distante se comporte selon les événements."", 
         ""HELP_MOUSE_MODE_ABSOLUTE"" : ""Appuyer pour cliquer. Le clique s'effectue à l'endroit de l'appui."",
         ""HELP_MOUSE_MODE_RELATIVE"" : ""Glisser pour déplacer le pointeur de la souris et appuyer opur cliquer. Le clique s'effectue à l'endroit du pointeur."", 
-
+        ""HELP_SHARE_LINK""          : ""La connexion actuelle est en cours de partage et est accessible à toute personne possédant les caractéristiques suivantes: {LINKS, plusieurs, un{link} autres{links}}:"",","[{'comment': 'In keeping with style of the rest of the files, there should be a blank line after this one.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -158,7 +173,10 @@
         ""SECTION_HEADER_RECENT_CONNECTIONS"" : ""Connexions récentes""
 
     },
-
+    
+    ""LIST"":{
+         ""TEXT_ANONYMOUS_USER"" : ""Anonyme""","[{'comment': 'Style here should match other files - there should be blank lines before and after this line.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -158,7 +173,10 @@
         ""SECTION_HEADER_RECENT_CONNECTIONS"" : ""Connexions récentes""
 
     },
-
+    
+    ""LIST"":{
+         ""TEXT_ANONYMOUS_USER"" : ""Anonyme""
+    },","[{'comment': 'And a blank line, here.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -202,6 +220,7 @@
         ""TABLE_HEADER_HISTORY_USERNAME"" : ""Identifiant"",
         ""TABLE_HEADER_HISTORY_START""    : ""Ouverture"",
         ""TABLE_HEADER_HISTORY_DURATION"" : ""Durée"",
+        ""TABLE_HEADER_HISTORY_REMOTEHOST"" : ""Ordinateur distant"",","[{'comment': 'I\'d be in favor of lining all of these `TABLE_HEADER_HISTORY` lines up so that the "":"" is in the same place.  See other places in the file.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -263,41 +288,100 @@
         ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""Administer system:"",
         ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Modifier son propre mot de passe:"",
         ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Créer nouveaux utilisateurs:"",
+          ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""Créer nouveaux groupes d'utilisateurs:"",","[{'comment': 'Fix indentation.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -263,41 +288,100 @@
         ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""Administer system:"",
         ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Modifier son propre mot de passe:"",
         ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Créer nouveaux utilisateurs:"",
+          ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""Créer nouveaux groupes d'utilisateurs:"",
         ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""Créer nouvelles connexions:"",
         ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""Créer nouveaux groupes de connexion:"",
+      ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""Créer nouveaux partage de connexions:"",","[{'comment': 'Fix indentation.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -263,41 +288,100 @@
         ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""Administer system:"",
         ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Modifier son propre mot de passe:"",
         ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Créer nouveaux utilisateurs:"",
+          ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""Créer nouveaux groupes d'utilisateurs:"",
         ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""Créer nouvelles connexions:"",
         ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""Créer nouveaux groupes de connexion:"",
+      ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""Créer nouveaux partage de connexions:"",
         ""FIELD_HEADER_PASSWORD""                      : ""@:APP.FIELD_HEADER_PASSWORD"",
         ""FIELD_HEADER_PASSWORD_AGAIN""                : ""@:APP.FIELD_HEADER_PASSWORD_AGAIN"",
         ""FIELD_HEADER_USERNAME""                      : ""Identifiant:"",
         
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""HELP_NO_USER_GROUPS"" : ""Cet utilisateur n'appartient à aucun groupe. Devlopper cette section pour ajouter des groupes.."",","[{'comment': 'Should be a blank line after this line.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -263,41 +288,100 @@
         ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""Administer system:"",
         ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Modifier son propre mot de passe:"",
         ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Créer nouveaux utilisateurs:"",
+          ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""Créer nouveaux groupes d'utilisateurs:"",
         ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""Créer nouvelles connexions:"",
         ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""Créer nouveaux groupes de connexion:"",
+      ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""Créer nouveaux partage de connexions:"",
         ""FIELD_HEADER_PASSWORD""                      : ""@:APP.FIELD_HEADER_PASSWORD"",
         ""FIELD_HEADER_PASSWORD_AGAIN""                : ""@:APP.FIELD_HEADER_PASSWORD_AGAIN"",
         ""FIELD_HEADER_USERNAME""                      : ""Identifiant:"",
         
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""HELP_NO_USER_GROUPS"" : ""Cet utilisateur n'appartient à aucun groupe. Devlopper cette section pour ajouter des groupes.."",
         ""INFO_READ_ONLY"" : ""Désolé, mais ce compte ne peut pas être édité."",
+        ""INFO_NO_USER_GROUPS_AVAILABLE"" : ""Pas de groupes disponibles."",
 
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""Toutes les Connexions"",
         ""SECTION_HEADER_CONNECTIONS"" : ""Connexions"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""Connexions en cours"",
         ""SECTION_HEADER_EDIT_USER""   : ""Modifier Utilisateur"",
         ""SECTION_HEADER_PERMISSIONS"" : ""Permissions"",
+        ""SECTION_HEADER_USER_GROUPS""         : ""Groupes"",
 
         ""TEXT_CONFIRM_DELETE"" : ""Les utilisateurs ne pourront être restaurés une fois supprimés. Êtes-vous certains de vouloir supprimer cet utilisateur?""
 
     },
     
+   ""MANAGE_USER_GROUP"" : {
+
+        ""ACTION_ACKNOWLEDGE""   : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CANCEL""        : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLONE""         : ""@:APP.ACTION_CLONE"",
+        ""ACTION_DELETE""        : ""@:APP.ACTION_DELETE"",
+        ""ACTION_SAVE""          : ""@:APP.ACTION_SAVE"",
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Supprimer Groupe"",
+        ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""@:MANAGE_USER.FIELD_HEADER_ADMINISTER_SYSTEM"",
+        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""@:MANAGE_USER.FIELD_HEADER_CHANGE_OWN_PASSWORD"",
+        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_USERS"",
+        ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_USER_GROUPS"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_CONNECTIONS"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS"",
+        ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_SHARING_PROFILES"",
+        ""FIELD_HEADER_USER_GROUP_NAME""               : ""Nom Groupe:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HELP_NO_USER_GROUPS""        : ""Ce groupe n'appartient actuellement à aucun groupe. Développez cette section pour ajouter des groupes."",
+        ""HELP_NO_MEMBER_USER_GROUPS"" : ""Ce groupe n'appartient actuellement à aucun groupe. Développez cette section pour ajouter des groupes."",
+        ""HELP_NO_MEMBER_USERS""       : ""Ce groupe ne contient actuellement aucun utilisateur. Développez cette section pour ajouter des utilisateurs."",
+
+        ""INFO_READ_ONLY""                : ""Désolé, mais ce groupe ne peut pas être édité."",
+        ""INFO_NO_USER_GROUPS_AVAILABLE"" : ""@:MANAGE_USER.INFO_NO_USER_GROUPS_AVAILABLE"",
+        ""INFO_NO_USERS_AVAILABLE""       : ""Pas d'utilisateur disponible."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""@:MANAGE_USER.SECTION_HEADER_ALL_CONNECTIONS"",
+        ""SECTION_HEADER_CONNECTIONS""         : ""@:MANAGE_USER.SECTION_HEADER_CONNECTIONS"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""@:MANAGE_USER.SECTION_HEADER_CURRENT_CONNECTIONS"",
+        ""SECTION_HEADER_EDIT_USER_GROUP""     : ""Editer Groupe"",
+        ""SECTION_HEADER_MEMBER_USERS""        : ""Utilisateurs Membre"",
+        ""SECTION_HEADER_MEMBER_USER_GROUPS""  : ""Groupes Membre"",
+        ""SECTION_HEADER_PERMISSIONS""         : ""@:MANAGE_USER.SECTION_HEADER_PERMISSIONS"",
+        ""SECTION_HEADER_USER_GROUPS""         : ""Groupe Parent"",
+
+        ""TEXT_CONFIRM_DELETE"" : ""Les groupes ne peuvent pas être restaurés après leur suppression. Êtes-vous sûr de vouloir supprimer ce groupe?""
+
+    },
+    
+    
     ""PROTOCOL_RDP"" : {
 
         ""FIELD_HEADER_CLIENT_NAME""     : ""Nom du Client:"",
         ""FIELD_HEADER_COLOR_DEPTH""     : ""Qualité couleur:"",
         ""FIELD_HEADER_CONSOLE""         : ""Console Administrateur:"",
         ""FIELD_HEADER_CONSOLE_AUDIO""   : ""Support son en console:"",
         ""FIELD_HEADER_CREATE_DRIVE_PATH"" : ""Créer automatiquement un lecteur:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Créer automatiquement un chemin d'enregistrement:"",
         ""FIELD_HEADER_DISABLE_AUDIO""   : ""Désactiver son:"",
         ""FIELD_HEADER_DISABLE_AUTH""    : ""Désactiver authentification:"",
+         ""FIELD_HEADER_DISABLE_COPY""    : ""Désactiver la copie depuis l'ordinateur distant:"",
+         ""FIELD_HEADER_DISABLE_PASTE""   : ""Désactiver coller à partir du client:"",","[{'comment': 'Please fix indentation.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -338,6 +433,12 @@
         ""FIELD_OPTION_COLOR_DEPTH_8""     : ""256 couleurs"",
         ""FIELD_OPTION_COLOR_DEPTH_EMPTY"" : """",
 
+        ""FIELD_OPTION_RESIZE_METHOD_DISPLAY_UPDATE"" : ""\""Afficher Mise à jour\"" canal virtuel (RDP 8.1+)"",
+        
+        ","[{'comment': 'I think these blank lines can go.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -346,41 +447,70 @@
 
         ""FIELD_OPTION_SERVER_LAYOUT_DE_DE_QWERTZ"" : ""German (Qwertz)"",
         ""FIELD_OPTION_SERVER_LAYOUT_EMPTY""        : """",
+        ""FIELD_OPTION_SERVER_LAYOUT_EN_GB_QWERTY"" : ""UK English (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_EN_US_QWERTY"" : ""US English (Qwerty)"",
+         ""FIELD_OPTION_SERVER_LAYOUT_ES_ES_QWERTY"" : ""Spanish (Qwerty)"",","[{'comment': 'Please fix indentation.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -346,41 +447,70 @@
 
         ""FIELD_OPTION_SERVER_LAYOUT_DE_DE_QWERTZ"" : ""German (Qwertz)"",
         ""FIELD_OPTION_SERVER_LAYOUT_EMPTY""        : """",
+        ""FIELD_OPTION_SERVER_LAYOUT_EN_GB_QWERTY"" : ""UK English (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_EN_US_QWERTY"" : ""US English (Qwerty)"",
+         ""FIELD_OPTION_SERVER_LAYOUT_ES_ES_QWERTY"" : ""Spanish (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_FAILSAFE""     : ""Unicode"",
+        ""FIELD_OPTION_SERVER_LAYOUT_FR_CH_QWERTZ"" : ""Swiss French (Qwertz)"",
         ""FIELD_OPTION_SERVER_LAYOUT_FR_FR_AZERTY"" : ""French (Azerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_IT_IT_QWERTY"" : ""Italian (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_JA_JP_QWERTY"" : ""Japanese (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_PT_BR_QWERTY"" : ""Portuguese Brazilian (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_SV_SE_QWERTY"" : ""Swedish (Qwerty)"",
-
+        ""FIELD_OPTION_SERVER_LAYOUT_DA_DK_QWERTY"" : ""Danish (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_TR_TR_QWERTY"" : ""Turkish-Q (Qwerty)"",
+        
         ""NAME"" : ""RDP"",
 
         ""SECTION_HEADER_AUTHENTICATION""     : ""Authentification"",
         ""SECTION_HEADER_BASIC_PARAMETERS""   : ""Paramètres de base"",
         ""SECTION_HEADER_CLIPBOARD""          : ""Presse-papiers"",
         ""SECTION_HEADER_DEVICE_REDIRECTION"" : ""Redirection Périphérique"",
         ""SECTION_HEADER_DISPLAY""            : ""Affichage"",
+        ""SECTION_HEADER_GATEWAY""            : ""Passerelle du bureau à distance"",
+        ""SECTION_HEADER_LOAD_BALANCING""     : ""Equilibrage de charge"",
         ""SECTION_HEADER_NETWORK""            : ""Réseau"",
         ""SECTION_HEADER_PERFORMANCE""        : ""Performance"",
         ""SECTION_HEADER_PRECONNECTION_PDU""  : ""Pré-connexion PDU / Hyper-V"",
+         ""SECTION_HEADER_RECORDING""          : ""Enregistrement écran"",","[{'comment': 'Please fix indentation.', 'commenter': 'necouchman'}]"
390,guacamole/src/main/webapp/translations/fr.json,"@@ -520,7 +661,7 @@
         ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
         ""ACTION_NEW_CONNECTION""       : ""Nouvelle Connexion"",
         ""ACTION_NEW_CONNECTION_GROUP"" : ""Nouveau Groupe"",
-
+        ""ACTION_NEW_SHARING_PROFILE""  : ""Nouveau Partage Profile"",","[{'comment': 'Should be a blank line after this.', 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -129,6 +133,18 @@ private RadiusAuthenticator setupRadiusAuthenticator(RadiusClient radiusClient)
         if (radAuth == null)
             throw new GuacamoleException(""Could not get a valid RadiusAuthenticator for specified protocol: "" + confService.getRadiusAuthProtocol());
 
+        // For MSCHAPv1/2, we need MD4 support
+        if (radAuth instanceof MSCHAPv1Authenticator
+                || radAuth instanceof MSCHAPv2Authenticator) {
+            
+            Security.addProvider(new Provider(""MD4"", 0.00, ""MD4 for MSCHAPv1/2 RADIUS"") {","[{'comment': ""`setupRadiusAuthenticator()` is invoked from within `authenticate()`, so this will result in `Security.addProvider(...)` being invoked each time someone authenticates. It's unclear to me within the documentation for `addProvider()` whether this will result in multiple copies of the MD4 implementation being added.\r\n\r\nPerhaps this should be moved to a location where it occurs only once?\r\n\r\nIs it known that no other auth protocols use MD4?"", 'commenter': 'mike-jumper'}, {'comment': 'Yeah, probably a good point.  I could move it to the constructor for the `RadiusConnectionService` class, but not sure if that would still happen each time someone logged in, or would be a one-shot thing?\r\n\r\n> Is it known that no other auth protocols use MD4?\r\n\r\nI do not know one way or the other if others require it.', 'commenter': 'necouchman'}, {'comment': 'Okay, I\'ve put the initialization for this into the Guice module, which I think will suffice to load it only a single time.\r\n\r\nI queried the JRadius repository for any other instances of ""MD4"", and the MSCHAP library is the only place it shows up, so I think that covers the requirement:\r\nhttps://github.com/coova/jradius/search?q=MD4&unscoped_q=MD4', 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -129,6 +133,18 @@ private RadiusAuthenticator setupRadiusAuthenticator(RadiusClient radiusClient)
         if (radAuth == null)
             throw new GuacamoleException(""Could not get a valid RadiusAuthenticator for specified protocol: "" + confService.getRadiusAuthProtocol());
 
+        // For MSCHAPv1/2, we need MD4 support
+        if (radAuth instanceof MSCHAPv1Authenticator
+                || radAuth instanceof MSCHAPv2Authenticator) {","[{'comment': 'Rather than checking `instanceof` everywhere, and thus relying on the internals of JRadius, it would be better if `getRadiusAuthProtocol()` leveraged an `enum` that could be checked independently of whatever JRadius decides to return. Such an `enum` could provide a method for obtaining a corresponding instance of `RadiusAuthenticator` given a `RadiusClient`.\r\n\r\nRechecking `getRadiusAuthProtocol()`, it is somewhat scary that the raw string value is passed straight to JRadius. I think there should be some validation on the value on the Guacamole side, and a decoupling from the underlying RADIUS library.', 'commenter': 'mike-jumper'}, {'comment': ""Okay, I'll work up a new property type and `enum` for this."", 'commenter': 'necouchman'}, {'comment': 'This should be implemented as requested.', 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java,"@@ -68,6 +70,27 @@
     private ConfigurationService confService;
 
 
+    /**
+     * ","[{'comment': 'Empty comment.', 'commenter': 'mike-jumper'}, {'comment': 'Not seeing this in the current set of commits...were you looking at an earlier commit??', 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/RadiusAuthenticationProtocol.java,"@@ -0,0 +1,64 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package org.apache.guacamole.auth.radius.conf;
+
+/**
+ * This enum represents supported RADIUS authentication protocols for
+ * the guacamole-auth-radius extension.
+ */
+public enum RadiusAuthenticationProtocol {
+    
+    // Password authentication protocol","[{'comment': 'The comments documenting `enum` values should be JavaDoc style.', 'commenter': 'mike-jumper'}, {'comment': ""JavaDoc'd."", 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/RadiusAuthenticationProtocol.java,"@@ -0,0 +1,64 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.","[{'comment': 'Oops - Netbeans default template snuck in. I think this may also fail the build when the RAT plugin kicks in.', 'commenter': 'mike-jumper'}, {'comment': 'I think this is good in most recent code.', 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/RadiusAuthenticationProtocol.java,"@@ -0,0 +1,64 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package org.apache.guacamole.auth.radius.conf;
+
+/**
+ * This enum represents supported RADIUS authentication protocols for
+ * the guacamole-auth-radius extension.
+ */
+public enum RadiusAuthenticationProtocol {
+    
+    // Password authentication protocol
+    PAP(""pap""),
+    
+    // Challenge-Handshake AUthentication Protocol
+    CHAP(""chap""),
+    
+    // Microsoft CHAP version 1
+    MSCHAPv1(""mschapv1""),
+    
+    // Microsoft CHAP version 2
+    MSCHAPv2(""mschapv2""),
+    
+    // Extensible authentication protocol with MD5 hashing.
+    EAP_MD5(""eap-md5""),
+
+    // Extensible authentication protocol with TLS
+    EAP_TLS(""eap-tls""),
+
+    // Extensible authentication protocol with Tunneled TLS
+    EAP_TTLS(""eap-ttls"");
+
+    // Store the string value used in the configuration file.","[{'comment': ""JavaDoc.\r\n\r\nBesides being the value used in `guacamole.properties`, it looks like we're intentionally using the value used by JRadius (and relying on this later on). That may a detail be worth documenting."", 'commenter': 'mike-jumper'}, {'comment': ""JavaDoc'd, and added some detail."", 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/RadiusAuthenticationProtocol.java,"@@ -0,0 +1,64 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package org.apache.guacamole.auth.radius.conf;
+
+/**
+ * This enum represents supported RADIUS authentication protocols for
+ * the guacamole-auth-radius extension.
+ */
+public enum RadiusAuthenticationProtocol {
+    
+    // Password authentication protocol
+    PAP(""pap""),
+    
+    // Challenge-Handshake AUthentication Protocol
+    CHAP(""chap""),
+    
+    // Microsoft CHAP version 1
+    MSCHAPv1(""mschapv1""),
+    
+    // Microsoft CHAP version 2
+    MSCHAPv2(""mschapv2""),
+    
+    // Extensible authentication protocol with MD5 hashing.
+    EAP_MD5(""eap-md5""),
+
+    // Extensible authentication protocol with TLS
+    EAP_TLS(""eap-tls""),
+
+    // Extensible authentication protocol with Tunneled TLS
+    EAP_TTLS(""eap-ttls"");
+
+    // Store the string value used in the configuration file.
+    private final String strValue;
+    
+    /**
+     * Create a new RadiusAuthenticationProtocol object having the
+     * given string value.
+     * 
+     * @param strValue
+     *     The string value of the protocol.","[{'comment': 'If I\'m going to invoke this constructor (defining a new enum value perhaps), ""the string value of the protocol"" doesn\'t give me an understanding of what needs to go here. I would need to go through the code using the value to determine what actually is needed.\r\n\r\nIs there a better way to describe this?', 'commenter': 'mike-jumper'}, {'comment': 'Took a better slice at this documentation.', 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/RadiusAuthenticationProtocol.java,"@@ -0,0 +1,64 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package org.apache.guacamole.auth.radius.conf;
+
+/**
+ * This enum represents supported RADIUS authentication protocols for
+ * the guacamole-auth-radius extension.
+ */
+public enum RadiusAuthenticationProtocol {
+    
+    // Password authentication protocol
+    PAP(""pap""),
+    
+    // Challenge-Handshake AUthentication Protocol
+    CHAP(""chap""),
+    
+    // Microsoft CHAP version 1
+    MSCHAPv1(""mschapv1""),
+    
+    // Microsoft CHAP version 2
+    MSCHAPv2(""mschapv2""),
+    
+    // Extensible authentication protocol with MD5 hashing.
+    EAP_MD5(""eap-md5""),
+
+    // Extensible authentication protocol with TLS
+    EAP_TLS(""eap-tls""),
+
+    // Extensible authentication protocol with Tunneled TLS
+    EAP_TTLS(""eap-ttls"");
+
+    // Store the string value used in the configuration file.
+    private final String strValue;
+    
+    /**
+     * Create a new RadiusAuthenticationProtocol object having the
+     * given string value.
+     * 
+     * @param strValue
+     *     The string value of the protocol.
+     */
+    public RadiusAuthenticationProtocol(String strValue) {
+        this.strValue = strValue;
+    }
+    
+    @Override
+    public String toString() {","[{'comment': ""Though it's not normally needed to document `toString()`, I would suggest doing so here since we are depending on this function having specific behavior (returning the value used by both `guacamole.properties` and specific parts of JRadius).\r\n\r\nSomething like:\r\n\r\n```java\r\n/**\r\n * {@inheritDoc}\r\n * <p>\r\n * Doooocuuumentaaationnn...\r\n */\r\n```\r\n\r\nwould probably do well.\r\n\r\nThe alternative would be to not use `toString()` but our own function with well defined semantics regarding the return value and `guacamole.properties` and JRadius."", 'commenter': 'mike-jumper'}, {'comment': ""Doc'd."", 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/RadiusAuthenticationProtocol.java,"@@ -0,0 +1,64 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package org.apache.guacamole.auth.radius.conf;
+
+/**
+ * This enum represents supported RADIUS authentication protocols for
+ * the guacamole-auth-radius extension.
+ */
+public enum RadiusAuthenticationProtocol {
+    
+    // Password authentication protocol
+    PAP(""pap""),
+    
+    // Challenge-Handshake AUthentication Protocol
+    CHAP(""chap""),
+    
+    // Microsoft CHAP version 1
+    MSCHAPv1(""mschapv1""),
+    
+    // Microsoft CHAP version 2
+    MSCHAPv2(""mschapv2""),
+    
+    // Extensible authentication protocol with MD5 hashing.
+    EAP_MD5(""eap-md5""),
+
+    // Extensible authentication protocol with TLS
+    EAP_TLS(""eap-tls""),
+
+    // Extensible authentication protocol with Tunneled TLS
+    EAP_TTLS(""eap-ttls"");
+
+    // Store the string value used in the configuration file.
+    private final String strValue;
+    
+    /**
+     * Create a new RadiusAuthenticationProtocol object having the
+     * given string value.
+     * 
+     * @param strValue
+     *     The string value of the protocol.
+     */
+    public RadiusAuthenticationProtocol(String strValue) {
+        this.strValue = strValue;
+    }
+    
+    @Override
+    public String toString() {
+        return strValue;
+    }
+    
+    @Override
+    public static RadiusAuthenticationProtocol valueOf(String value) {","[{'comment': ""`valueOf()` for enums is explicitly defined as returning the enum constant whose name exactly matches the given string:\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html#valueOf-java.lang.Class-java.lang.String-\r\n\r\nI don't think we should override the default implementation of a function such that it no longer matches the contract of the original interface. This should probably be our own function."", 'commenter': 'mike-jumper'}, {'comment': ""Again, not sure if you were looking at a specific commit instead of the latest round of code, but the latest has `getEnum()` defined (which I failed to document, so that needs fixing) - turns out that I don't think it's even valid to override `valueOf()` for `enum`s."", 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/RadiusAuthenticationProtocolProperty.java,"@@ -0,0 +1,38 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.","[{'comment': 'Double oops. Netbeans template.', 'commenter': 'mike-jumper'}, {'comment': 'As with others, I think this is actually okay in the most recent code.', 'commenter': 'necouchman'}]"
392,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusAuthenticationProviderModule.java,"@@ -57,6 +62,24 @@ public RadiusAuthenticationProviderModule(AuthenticationProvider authProvider)
 
         // Get local environment
         this.environment = new LocalEnvironment();
+        
+        // Check for MD4 requirement
+        RadiusAuthenticationProtocol authProtocol = environment.getProperty(RadiusGuacamoleProperties.RADIUS_AUTH_PROTOCOL);
+        RadiusAuthenticationProtocol innerProtocol = environment.getProperty(RadiusGuacamoleProperties.RADIUS_EAP_TTLS_INNER_PROTOCOL);
+        if ((authProtocol != null 
+                    && (authProtocol == RadiusAuthenticationProtocol.MSCHAPv1 
+                    || authProtocol == RadiusAuthenticationProtocol.MSCHAPv2)) 
+                || (innerProtocol != null 
+                    && (innerProtocol == RadiusAuthenticationProtocol.MSCHAPv1 
+                    || innerProtocol == RadiusAuthenticationProtocol.MSCHAPv2))) {","[{'comment': 'You might be able to clean up this logic if you remove the `null` checks, which are unnecessary in this case. The `==` comparisons will just fail if `authProtocol` or `innerProtocol` are `null`.', 'commenter': 'mike-jumper'}, {'comment': 'Cleaned up.', 'commenter': 'necouchman'}]"
397,guacamole/src/main/webapp/translations/cz.json,"@@ -0,0 +1,691 @@
+{
+  ""NAME"": ""Čeština"",
+  ""APP"": {
+    ""NAME"": ""Krtek NG VFU Beta"",
+    ""VERSION"": ""${project.version}"",
+    ""ACTION_ACKNOWLEDGE"": ""OK"",
+    ""ACTION_CANCEL"": ""Zrušit"",
+    ""ACTION_CLONE"": ""Klonovat"",
+    ""ACTION_CONTINUE"": ""Pokračovat"",
+    ""ACTION_DELETE"": ""Smazat"",
+    ""ACTION_DELETE_SESSIONS"": ""Ukončit sezení"",
+    ""ACTION_DOWNLOAD"": ""Stáhnout"",
+    ""ACTION_LOGIN"": ""Přihlásit"",
+    ""ACTION_LOGOUT"": ""Odhlásit"",
+    ""ACTION_MANAGE_CONNECTIONS"": ""Připojení"",
+    ""ACTION_MANAGE_PREFERENCES"": ""Vlastnosti"",
+    ""ACTION_MANAGE_SETTINGS"": ""Nastavení"",
+    ""ACTION_MANAGE_SESSIONS"": ""Aktivní sezení"",
+    ""ACTION_MANAGE_USERS"": ""Uživatelé"",
+    ""ACTION_MANAGE_USER_GROUPS"": ""Skupiny"",
+    ""ACTION_NAVIGATE_BACK"": ""Zpět"",
+    ""ACTION_NAVIGATE_HOME"": ""Domů"",
+    ""ACTION_SAVE"": ""Uložit"",
+    ""ACTION_SEARCH"": ""Hledat"",
+    ""ACTION_SHARE"": ""Sdílet"",
+    ""ACTION_UPDATE_PASSWORD"": ""Změnit heslo"",
+    ""ACTION_VIEW_HISTORY"": ""Historie"",
+    ""DIALOG_HEADER_ERROR"": ""Chyba"",
+    ""ERROR_PAGE_UNAVAILABLE"": ""Došlo k chybě a tuto akci nelze dokončit. Pokud problém přetrvává, informujte prosím správce systému nebo zkontrolujte systémové protokoly."",
+    ""ERROR_PASSWORD_BLANK"": ""Heslo nesmí být prázdné."",
+    ""ERROR_PASSWORD_MISMATCH"": ""Hesla nesouhlasí."",
+    ""FIELD_HEADER_PASSWORD"": ""Heslo:"",
+    ""FIELD_HEADER_PASSWORD_AGAIN"": ""Heslo znovu:"",
+    ""FIELD_PLACEHOLDER_FILTER"": ""Filtr"",
+    ""FORMAT_DATE_TIME_PRECISE"": ""yyyy-MM-dd HH:mm:ss"",
+    ""INFO_ACTIVE_USER_COUNT"": ""V současné době používá {USERS} {USERS, plural, one{user} other{users}}."",
+    ""TEXT_ANONYMOUS_USER"": ""Anonym"",
+    ""TEXT_HISTORY_DURATION"": ""{VALUE} {UNIT, select, second{{VALUE, plural, one{second} other{seconds}}} minute{{VALUE, plural, one{minute} other{minutes}}} hour{{VALUE, plural, one{hour} other{hours}}} day{{VALUE, plural, one{day} other{days}}} other{}}""
+  },
+  ""CLIENT"": {
+    ""ACTION_ACKNOWLEDGE"": ""@:APP.ACTION_ACKNOWLEDGE"",
+    ""ACTION_CLEAR_COMPLETED_TRANSFERS"": ""Vyčistit"",
+    ""ACTION_DISCONNECT"": ""Odpojit"",
+    ""ACTION_LOGOUT"": ""@:APP.ACTION_LOGOUT"",
+    ""ACTION_NAVIGATE_BACK"": ""@:APP.ACTION_NAVIGATE_BACK"",
+    ""ACTION_NAVIGATE_HOME"": ""@:APP.ACTION_NAVIGATE_HOME"",
+    ""ACTION_RECONNECT"": ""Znovu připojit"",
+    ""ACTION_SAVE_FILE"": ""@:APP.ACTION_SAVE"",
+    ""ACTION_SHARE"": ""@:APP.ACTION_SHARE"",
+    ""ACTION_UPLOAD_FILES"": ""Nahrát soubory"",
+    ""DIALOG_HEADER_CONNECTING"": ""Připojování"",
+    ""DIALOG_HEADER_CONNECTION_ERROR"": ""Chyba připojení"",
+    ""DIALOG_HEADER_DISCONNECTED"": ""Odpojeno"",
+    ""ERROR_CLIENT_201"": ""Synchronizační server je zaneprázdněn, zkuste to prosím znovu později."",
+    ""ERROR_CLIENT_202"": ""Guacamole server zavřel spojení protože vzdálený počítač příliš dlouho neodpovídal. Zkuste to prosím později, nebo kontaktujte správce."",
+    ""ERROR_CLIENT_203"": ""Chyba vzdáleného serveru, spojení bylo uzavřeno. Zkuste to prosím později, nebo kontaktujte správce."",
+    ""ERROR_CLIENT_207"": ""Server vzdálené plochy je aktuálně nedostupný. Pokud problém přetrvává, informujte prosím správce systému nebo zkontrolujte systémové protokoly."",
+    ""ERROR_CLIENT_208"": ""Server vzdálené plochy není aktuálně k dispozici. Pokud problém přetrvává, informujte prosím správce systému nebo zkontrolujte systémové protokoly."",
+    ""ERROR_CLIENT_209"": ""Server vzdálené plochy ukončil připojení, protože je v konfliktu s jiným připojením. Prosím zkuste to znovu později."",
+    ""ERROR_CLIENT_20A"": ""Server vzdálené plochy ukončil připojení, protože se zdálo být neaktivní. Pokud je to nežádoucí nebo neočekávané, informujte prosím správce systému nebo zkontrolujte nastavení systému."",
+    ""ERROR_CLIENT_20B"": ""Server vzdálené plochy násilně uzavřel připojení. Pokud je to nežádoucí nebo neočekávané, informujte prosím správce systému nebo zkontrolujte systémové protokoly."",
+    ""ERROR_CLIENT_301"": ""Přihlášení selhalo. Připojte se a zkuste to znovu."",
+    ""ERROR_CLIENT_303"": ""Server vzdálené plochy odepřel přístup k tomuto připojení. Pokud potřebujete přístup, požádejte správce systému, aby vám umožnil přístup, nebo zkontrolujte nastavení systému."",
+    ""ERROR_CLIENT_308"": ""Server Guacamole ukončil spojení, protože z vašeho prohlížeče nebyla dostatečně dlouhá odezva, aby se zdálo, že je stále připojen. To je obvykle způsobeno problémy se sítí, jako je například nekvalitní bezdrátový signál, nebo jednoduše velmi pomalá síťová rychlost. Zkontrolujte síť a zkuste to znovu."",
+    ""ERROR_CLIENT_31D"": ""Server Guacamole odepřel přístup k tomuto připojení, protože jste vyčerpali limit pro vícenásobné připojení tímto uživatelem. Zavřete jedno nebo více připojení a zkuste to znovu."",
+    ""ERROR_CLIENT_DEFAULT"": ""V rámci serveru Guacamole došlo k interní chybě a připojení bylo ukončeno. Pokud problém přetrvává, informujte prosím správce systému nebo zkontrolujte systémové protokoly."",
+    ""ERROR_TUNNEL_201"": ""Server Guacamole odmítl tento pokus o připojení, protože existuje příliš mnoho aktivních připojení. Počkejte prosím několik minut a zkuste to znovu."",
+    ""ERROR_TUNNEL_202"": ""Připojení bylo uzavřeno, protože serveru trvalo příliš dlouho, než odpověděl. To je obvykle způsobeno problémy se sítí, jako je například nekvalitní bezdrátový signál nebo pomalé připojení k síti. Zkontrolujte síťové připojení a zkuste to znovu nebo se obraťte na správce systému."",
+    ""ERROR_TUNNEL_203"": ""Server zjistil chybu a připojení ukončil. Zkuste to prosím znovu nebo se obraťte na správce systému."",
+    ""ERROR_TUNNEL_204"": ""Požadované připojení neexistuje. Zkontrolujte název připojení a zkuste to znovu."",
+    ""ERROR_TUNNEL_205"": ""Toto připojení je právě používáno a vícenásobný přístup k tomuto připojení není povolen. Prosím zkuste to znovu později."",
+    ""ERROR_TUNNEL_207"": ""Server Guacamole není v současné době dostupný. Zkontrolujte síť a zkuste to znovu"",
+    ""ERROR_TUNNEL_208"": ""Server Guacamole nepřijímá připojení. Zkontrolujte síť a zkuste to znovu."",
+    ""ERROR_TUNNEL_301"": ""Nemáte oprávnění k přístupu k tomuto připojení, protože nejste přihlášeni. Přihlaste se a zkuste to znovu."",
+    ""ERROR_TUNNEL_303"": ""Nemáte oprávnění k přístupu k tomuto připojení. Pokud potřebujete přístup, požádejte správce systému, aby vás přidal do seznamu povolených uživatelů nebo zkontrolujte nastavení systému."",
+    ""ERROR_TUNNEL_308"": ""Server Guacamole ukončil spojení, protože z vašeho prohlížeče nebyla dostatečně dlouhá odezva, aby se zdálo, že je stále připojen. To je obvykle způsobeno problémy se sítí, jako je například nekvalitní bezdrátový signál, nebo jednoduše velmi pomalá síťová rychlost. Zkontrolujte síť a zkuste to znovu."",
+    ""ERROR_TUNNEL_31D"": ""Server Guacamole odepřel přístup k tomuto připojení, protože jste vyčerpali limit pro vícenásobné připojení tímto uživatelem. Zavřete jedno nebo více připojení a zkuste to znovu."",
+    ""ERROR_TUNNEL_DEFAULT"": ""V rámci serveru Guacamole došlo k interní chybě a připojení bylo ukončeno. Pokud problém přetrvává, informujte prosím správce systému nebo zkontrolujte systémové protokoly."",
+    ""ERROR_UPLOAD_100"": ""Přenos souborů není podporován nebo není povolen. Obraťte se na správce systému nebo zkontrolujte systémové protokoly."",
+    ""ERROR_UPLOAD_201"": ""V současné době se přenáší příliš mnoho souborů. Počkejte prosím na dokončení probíhajících přenosů a akci opakujte."",
+    ""ERROR_UPLOAD_202"": ""Soubor nelze přenést, protože serveru vzdálené plochy trvá příliš dlouho, než odpoví. Zkuste to prosím znovu nebo se obraťte na správce systému."",
+    ""ERROR_UPLOAD_203"": ""Server vzdálené plochy zaznamenal chybu během přenosu. Zkuste to prosím znovu nebo se obraťte na správce systému."",
+    ""ERROR_UPLOAD_204"": ""Cíl pro přenos souborů neexistuje. Zkontrolujte, zda cíl existuje a zkuste to znovu."",
+    ""ERROR_UPLOAD_205"": ""Cíl přenosu souborů je aktuálně uzamčen. Počkejte prosím na dokončení probíhajících úkolů a zkuste to znovu."",
+    ""ERROR_UPLOAD_301"": ""Nemáte oprávnění nahrát tento soubor, protože nejste přihlášeni. Přihlaste se a zkuste to znovu."",
+    ""ERROR_UPLOAD_303"": ""Nemáte oprávnění k nahrání tohoto souboru. Pokud potřebujete přístup, zkontrolujte nastavení systému nebo se obraťte na správce systému."",
+    ""ERROR_UPLOAD_308"": ""Přenos souboru se zastavil. To je obvykle způsobeno problémy se sítí, jako je například nekvalitní bezdrátový signál, nebo jednoduše velmi pomalé připojení k síťi. Zkontrolujte síť a zkuste to znovu."",
+    ""ERROR_UPLOAD_31D"": ""V současné době se přenáší příliš mnoho souborů. Počkejte prosím na dokončení probíhajících přenosů a akci opakujte."",
+    ""ERROR_UPLOAD_DEFAULT"": ""V rámci serveru Guacamole došlo k interní chybě a připojení bylo ukončeno. Pokud problém přetrvává, informujte prosím správce systému nebo zkontrolujte systémové protokoly."",
+    ""FIELD_PLACEHOLDER_FILTER"": ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+    ""HELP_CLIPBOARD"": ""Zde se zobrazí text zkopírovaný / oříznutý v Guacamole. Změny níže uvedeného textu ovlivní vzdálenou schránku."",
+    ""HELP_INPUT_METHOD_NONE"": ""Není použita žádná metoda vstupu. Vstup z klávesnice je přijímán z připojené fyzické klávesnice."",
+    ""HELP_INPUT_METHOD_OSK"": ""Zobrazte a přijměte vstup z vestavěné klávesnice Guacamole na obrazovce. Klávesnice na obrazovce umožňuje zadávat kombinace kláves, které jinak mohou být nemožné (například Ctrl-Alt-Del)."",
+    ""HELP_INPUT_METHOD_TEXT"": ""Povolit psaní textu a emulovat události klávesnice na základě zadaného textu. To je nezbytné pro zařízení, jako jsou mobilní telefony, které nemají fyzickou klávesnici."",
+    ""HELP_MOUSE_MODE"": ""Určuje, jak se bude vzdálená myš chovat s ohledem na dotyky."",
+    ""HELP_MOUSE_MODE_ABSOLUTE"": ""Tap to click. Kliknutí nastane v místě dotyku."",
+    ""HELP_MOUSE_MODE_RELATIVE"": ""Přetažením myši posuňte ukazatel myši a klepněte na tlačítko. Kliknutí nastane v místě ukazatele."",
+    ""HELP_SHARE_LINK"": ""Aktuální připojení je sdíleno a může k němu přistupovat kdokoli s následujícím {LINKS, plural, one{link} other{links}}:"",
+    ""INFO_CONNECTION_SHARED"": ""Toto připojení je nyní sdíleno."",
+    ""INFO_NO_FILE_TRANSFERS"": ""Žádné přenosy souborů."",
+    ""NAME_INPUT_METHOD_NONE"": ""Žádné"",
+    ""NAME_INPUT_METHOD_OSK"": ""Na obrazovce, klávesnice"",
+    ""NAME_INPUT_METHOD_TEXT"": ""Textový vstup"",
+    ""NAME_KEY_CTRL"": ""Ctrl"",
+    ""NAME_KEY_ALT"": ""Alt"",
+    ""NAME_KEY_ESC"": ""Esc"",
+    ""NAME_KEY_TAB"": ""Tab"",
+    ""NAME_MOUSE_MODE_ABSOLUTE"": ""Dotyková obrazovka"",
+    ""NAME_MOUSE_MODE_RELATIVE"": ""Touchpad"",
+    ""SECTION_HEADER_CLIPBOARD"": ""Schránka"",
+    ""SECTION_HEADER_DEVICES"": ""Zařízení"",
+    ""SECTION_HEADER_DISPLAY"": ""Zobrazení"",
+    ""SECTION_HEADER_FILE_TRANSFERS"": ""Přenos souborů"",
+    ""SECTION_HEADER_INPUT_METHOD"": ""Metoda vstupu"",
+    ""SECTION_HEADER_MOUSE_MODE"": ""Mód emulace myši"",
+    ""TEXT_ZOOM_AUTO_FIT"": ""Automaticky přizpůsobit prohlížeč oknu"",
+    ""TEXT_CLIENT_STATUS_IDLE"": ""Nečinný"",
+    ""TEXT_CLIENT_STATUS_CONNECTING"": ""Připojuji ke Guacamole..."",
+    ""TEXT_CLIENT_STATUS_DISCONNECTED"": ""Byl jste odpojen."",
+    ""TEXT_CLIENT_STATUS_UNSTABLE"": ""Síťové spojení ke  Guacamole serveru se zdá nestabilní."",
+    ""TEXT_CLIENT_STATUS_WAITING"": ""Připojen ke Guacamole. Čekání na odpověď..."",
+    ""TEXT_RECONNECT_COUNTDOWN"": ""Znovu připojuji  {REMAINING} {REMAINING, plural, one{second} other{seconds}}..."",
+    ""TEXT_FILE_TRANSFER_PROGRESS"": ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}"",
+    ""URL_OSK_LAYOUT"": ""layouts/en-us-qwerty.json""
+  },
+  ""DATA_SOURCE_DEFAULT"": {
+    ""NAME"": ""Výchozí (XML)""
+  },
+  ""FORM"": {
+    ""FIELD_PLACEHOLDER_DATE"": ""YYYY-MM-DD"",","[{'comment': 'Based on some recent experience with this issue, this may need to be `YYYY-MM-dd` - AngularJS uses `dd` as the placeholder for a zero-padded date, and someone else was running into issues when they tried to use `DD` in this type field.', 'commenter': 'necouchman'}, {'comment': 'I changed it to dd', 'commenter': 'Vict0rC'}]"
397,guacamole/src/main/webapp/translations/cz.json,"@@ -0,0 +1,885 @@
+{
+
+    ""NAME"" : ""Čeština"",
+
+    ""APP"" : {
+
+        ""NAME"" : ""Apache Guacamole"",
+        ""VERSION"" : ""${project.version}"",","[{'comment': 'These two lines should be omitted - only the base translation file has these.', 'commenter': 'necouchman'}, {'comment': 'Fixed now', 'commenter': 'Vict0rC'}]"
398,guacamole/src/main/java/org/apache/guacamole/rest/auth/AuthenticationService.java,"@@ -93,12 +93,12 @@
     /**
      * Regular expression which matches any IPv4 address.
      */
-    private static final String IPV4_ADDRESS_REGEX = ""([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})"";
+    private static final String IPV4_ADDRESS_REGEX = ""([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})(?::[0-9]{1,4})?"";
 
     /**
      * Regular expression which matches any IPv6 address.
      */
-    private static final String IPV6_ADDRESS_REGEX = ""([0-9a-fA-F]*(:[0-9a-fA-F]*){0,7})"";
+    private static final String IPV6_ADDRESS_REGEX = ""([0-9a-fA-F]*(:[0-9a-fA-F]*){0,7})(?::[0-9]{1,4})?"";","[{'comment': 'Both `IPV4_ADDRESS_REGEX` and `IPV6_ADDRESS_REGEX` are documented here as matching IP addresses. Altering them such that they also accept port numbers will mean that the documentation becomes incorrect. If the change proposed here is correct, then that documentation needs to be updated to match. However:\r\n\r\n* Duplicating the same pattern across both `IPV4_ADDRESS_REGEX` and `IPV6_ADDRESS_REGEX` is suboptimal. There are other patterns which would be better homes for this change and avoid duplication, but again: modifying something that is essentially named ""IP address"" and documented as matching IP addresses such that it also matches port numbers isn\'t complete in itself. That change would need to be followed through such that the documentation and naming are correct.\r\n* The de facto `X-Forwarded-For` header is defined as a list of IP addresses, not a list of IP addresses with optional port numbers:\r\n\r\n  https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For\r\n  https://en.wikipedia.org/wiki/X-Forwarded-For\r\n\r\n  If there are real world cases where a port number is included, please provide some background information when you open the corresponding issue in JIRA so the reasoning for your proposed change can be understood.', 'commenter': 'mike-jumper'}]"
398,guacamole/src/main/java/org/apache/guacamole/rest/auth/AuthenticationService.java,"@@ -93,12 +93,12 @@
     /**
      * Regular expression which matches any IPv4 address.
      */
-    private static final String IPV4_ADDRESS_REGEX = ""([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})"";
+    private static final String IPV4_ADDRESS_REGEX = ""([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})(?::[0-9]{1,5})?"";","[{'comment': ""The documentation for this constant currently states:\r\n\r\n> Regular expression which matches any IPv4 address.\r\n\r\nModifying this constant such that it also matches port numbers isn't complete in itself. That change would need to be followed through such that the documentation is correct. The same goes for the naming of the constant (`IPV4_ADDRESS_REGEX` is pretty specific to IPv4 addresses).\r\n\r\nIt may be much simpler to modify `IP_ADDRESS_REGEX` instead. This would remove the duplicated pattern and may be easier to rename and document."", 'commenter': 'mike-jumper'}, {'comment': 'Another way may would be to create e new constant PORT_NUMBER_REGEX. And combine it within the X_FORWARDED_FOR Constant. Then you have an impended Port Regex and the renaming can be avoided.', 'commenter': 'Unknown'}, {'comment': 'Sure. That sounds good and satisfies the criteria.', 'commenter': 'mike-jumper'}]"
398,guacamole/src/main/java/org/apache/guacamole/rest/auth/AuthenticationService.java,"@@ -105,11 +105,16 @@
      */
     private static final String IP_ADDRESS_REGEX = ""("" + IPV4_ADDRESS_REGEX + ""|"" + IPV6_ADDRESS_REGEX + "")"";
 
+     /**","[{'comment': 'It looks like the start of this comment was indented one space too far. There is a standard formatting for JavaDoc comments. For example:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/8f12ae4fcb1c3385d2f214f0cfcaa29f5ff8bf64/guacamole/src/main/java/org/apache/guacamole/rest/auth/AuthenticationService.java#L113-L116\r\n\r\n', 'commenter': 'mike-jumper'}]"
413,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/resources/guac-manifest.json,"@@ -22,7 +22,8 @@
         ""translations/en.json"",
         ""translations/es.json"",
         ""translations/fr.json"",
-        ""translations/ru.json""
+        ""translations/ru.json"",
+        ""translations/ja.json""","[{'comment': 'These are generally kept in alphabetical order.', 'commenter': 'necouchman'}, {'comment': 'Please keep in alphabetical order.', 'commenter': 'necouchman'}, {'comment': 'Same, here - alphabetical order.', 'commenter': 'necouchman'}]"
413,guacamole/src/main/webapp/translations/ja.json,"@@ -0,0 +1,867 @@
+{
+    
+    ""NAME"" : ""Japanese"",
+    
+    ""APP"" : {
+
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""1.0.0"",","[{'comment': 'These values should not be duplicated, here - if you look at the other translations, they are left out and should only be present in the `en.json` file.', 'commenter': 'necouchman'}]"
413,guacamole/src/main/webapp/translations/ja.json,"@@ -0,0 +1,867 @@
+{
+    
+    ""NAME"" : ""Japanese"",
+    
+    ""APP"" : {
+
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""1.0.0"",
+
+        ""ACTION_ACKNOWLEDGE""        : ""OK"",","[{'comment': 'If this is the Japanese translation for ""OK"" then this should stay, but values that are not being translated should be left out.', 'commenter': 'necouchman'}]"
413,guacamole/src/main/webapp/translations/ja.json,"@@ -0,0 +1,867 @@
+{
+    
+    ""NAME"" : ""Japanese"",
+    
+    ""APP"" : {
+
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""1.0.0"",
+
+        ""ACTION_ACKNOWLEDGE""        : ""OK"",
+        ""ACTION_CANCEL""             : ""キャンセル"",
+        ""ACTION_CLONE""              : ""コピー"",
+        ""ACTION_CONTINUE""           : ""次へ"",
+        ""ACTION_DELETE""             : ""削除"",
+        ""ACTION_DELETE_SESSIONS""    : ""セッションの切断"",
+        ""ACTION_DOWNLOAD""           : ""ダウンロード"",
+        ""ACTION_LOGIN""              : ""ログイン"",
+        ""ACTION_LOGOUT""             : ""ログアウト"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""接続"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""ユーザ設定"",
+        ""ACTION_MANAGE_SETTINGS""    : ""設定"",
+        ""ACTION_MANAGE_SESSIONS""    : ""アクティブなセッション"",
+        ""ACTION_MANAGE_USERS""       : ""ユーザ"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""グループ"",
+        ""ACTION_NAVIGATE_BACK""      : ""戻る"",
+        ""ACTION_NAVIGATE_HOME""      : ""ホーム"",
+        ""ACTION_SAVE""               : ""保存"",
+        ""ACTION_SEARCH""             : ""検索"",
+        ""ACTION_SHARE""              : ""シェア"",
+        ""ACTION_UPDATE_PASSWORD""    : ""パスワードの更新"",
+        ""ACTION_VIEW_HISTORY""       : ""履歴"",
+
+        ""DIALOG_HEADER_ERROR"" : ""エラー"",
+
+        ""ERROR_PASSWORD_BLANK""    : ""パスワードが入力されていません。"",
+        ""ERROR_PASSWORD_MISMATCH"" : ""パスワードが一致しません。"",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""パスワード:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""パスワード確認:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""フィルタ"",
+
+        ""FORMAT_DATE_TIME_PRECISE"" : ""yyyy-MM-dd HH:mm:ss"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""現在以下のユーザが利用中です。 {USERS} {USERS, plural, one{user} other{users}}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""匿名ユーザ"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{{VALUE, plural, one{second} other{seconds}}} minute{{VALUE, plural, one{minute} other{minutes}}} hour{{VALUE, plural, one{hour} other{hours}}} day{{VALUE, plural, one{day} other{days}}} other{}}""
+
+    },
+
+    ""CLIENT"" : {
+
+        ""ACTION_ACKNOWLEDGE""               : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""クリア"",
+        ""ACTION_DISCONNECT""                : ""切断"",
+        ""ACTION_LOGOUT""                    : ""@:APP.ACTION_LOGOUT"",
+        ""ACTION_NAVIGATE_BACK""             : ""@:APP.ACTION_NAVIGATE_BACK"",
+        ""ACTION_NAVIGATE_HOME""             : ""@:APP.ACTION_NAVIGATE_HOME"",
+        ""ACTION_RECONNECT""                 : ""再接続"",
+        ""ACTION_SAVE_FILE""                 : ""@:APP.ACTION_SAVE"",
+        ""ACTION_SHARE""                     : ""@:APP.ACTION_SHARE"",
+        ""ACTION_UPLOAD_FILES""              : ""ファイルアップロード"",
+
+        ""DIALOG_HEADER_CONNECTING""       : ""接続"",
+        ""DIALOG_HEADER_CONNECTION_ERROR"" : ""接続エラー"",
+        ""DIALOG_HEADER_DISCONNECTED""     : ""切断"",
+
+        ""ERROR_CLIENT_201"": ""サーバーがビジー状態のため、この接続は切断されました。数分待ってからもう一度お試しください。"",
+        ""ERROR_CLIENT_202"": ""リモートデスクトップの応答に時間がかかりすぎるため、Guacamoleサーバが接続を切断しました。再試行するか、システム管理者に連絡してください。"",
+        ""ERROR_CLIENT_203"": ""リモートデスクトップサーバーでエラーが発生し、接続を切断しました。再試行するかシステム管理者に連絡してください。"",
+        ""ERROR_CLIENT_207"": ""現在リモートデスクトップサーバーにアクセスできません。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_208"": ""リモートデスクトップサーバーは現在利用できません。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_209"": ""リモートデスクトップサーバーが他の接続と競合しています。後でもう一度やり直してください。"",
+        ""ERROR_CLIENT_20A"": ""リモートデスクトップサーバーが停止しているため接続を閉じました。システム管理者に連絡するか、システム設定を確認してください。"",
+        ""ERROR_CLIENT_20B"": ""リモートデスクトップサーバーが強制的に接続を切断しました。システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_301"": ""ログインに失敗しました。再接続してからもう一度お試しください。"",
+        ""ERROR_CLIENT_303"": ""リモートデスクトップサーバーがこの接続へのアクセスを拒否しました。アクセスが必要な場合は、システム管理者にアカウントのアクセスを許可を依頼するか、システム設定を確認してください。"",
+        ""ERROR_CLIENT_308"": ""ブラウザからの応答が十分でないため、Guacamoleサーバーが接続を切断しました。これは一般的にネットワークの問題が原因です。ネットワークの状態を確認して、もう一度やり直してください。 "",
+        ""ERROR_CLIENT_31D"": ""同時接続の使用制限に達したため、Guacamoleサーバーはこの接続へのアクセスを拒否しています。1つ以上の接続を閉じてからやり直してください。"",
+        ""ERROR_CLIENT_DEFAULT"": ""Guacamoleサーバ内で内部エラーが発生し、接続が終了しました。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_TUNNEL_201"": ""アクティブな接続が多すぎるため、Guacamoleサーバーはこの接続を拒否しました。数分待ってからもう一度お試しください。"",
+        ""ERROR_TUNNEL_202"": ""サーバーの応答に時間がかかりすぎるため、接続が切断されました。通常はネットワーク問題によって引き起こされます。"",
+        ""ERROR_TUNNEL_203"": ""サーバーでエラーが発生し、接続を切断しました。再試行するかシステム管理者に連絡してください。"",
+        ""ERROR_TUNNEL_204"": ""指定された接続は存在しません。接続名を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_205"": ""この接続は現在使用中です。同時アクセスは許可されていません。後ほどやり直してください。"",
+        ""ERROR_TUNNEL_207"": ""現在Guacamoleサーバーにアクセスできません。ネットワークの状態を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_208"": ""Guacamoleサーバーは接続を受け付けていません。ネットワークの状態を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_301"": ""あなたはログインしていないため、この接続にアクセスする権限がありません。ログインしてからやり直してください。"",
+        ""ERROR_TUNNEL_303"": ""この接続にアクセスする権限がありません。アクセスが必要な場合は、システム管理者に許可を依頼するか、システム設定を確認してください。"",
+        ""ERROR_TUNNEL_308"": ""ブラウザからの応答がないため、Guacamoleサーバーが接続を切断しました。一般的にネットワークの問題が原因です。ネットワークの状態を確認して、もう一度やり直してください。 "",
+        ""ERROR_TUNNEL_31D"": ""同時接続の使用制限に達したため、Guacamoleサーバーはこの接続へのアクセスを拒否しています。1つ以上の接続を閉じてからやり直してください。"",
+        ""ERROR_TUNNEL_DEFAULT"": ""Guacamoleサーバー内で内部エラーが発生し、接続が終了しました。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_UPLOAD_100"": ""ファイル転送がサポートされていないか有効になっていません。システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_UPLOAD_201"": ""現在転送中のファイルが多すぎます。転送が完了するのを待ってからやり直してください。"",
+        ""ERROR_UPLOAD_202"": ""リモートデスクトップサーバーの応答に時間がかかりすぎるため、ファイルを転送できません。やりなおすかシステム管理者に連絡してください。"",
+        ""ERROR_UPLOAD_203"": ""転送中にリモートデスクトップサーバーでエラーが発生しました。もう一度やり直すか、システム管理者に連絡してください。"",
+        ""ERROR_UPLOAD_204"": ""ファイル転送先が存在しません。宛先が存在することを確認してやり直してください。"",
+        ""ERROR_UPLOAD_205"": ""ファイル転送先は現在ロックされています。進行中のタスクが完了するのを待ってからやり直してください。 "",
+        ""ERROR_UPLOAD_301"": ""あなたはログインしていないため、このファイルをアップロードする権限がありません。ログインしてからやり直してください。"",
+        ""ERROR_UPLOAD_303"": ""このファイルをアップロードする権限がありません。アクセスが必要な場合は、システム設定を確認するか、システム管理者に確認してください。"",
+        ""ERROR_UPLOAD_308"": ""ファイル転送が停止しています。これは一般的にネットワーク速度が非常に遅いなどのネットワークの問題が原因で発生します。"",
+        ""ERROR_UPLOAD_31D"": ""現在転送中のファイルが多すぎます。転送が完了するのを待ってからやり直してください。"",
+        ""ERROR_UPLOAD_DEFAULT"": ""Guacamoleサーバ内で内部エラーが発生し、接続が終了しました。それでも問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""HELP_CLIPBOARD"": ""Guacamole内でコピー/カットされたテキストがここに表示されます。以下のテキストを変更するとリモートクリップボードに影響します。 "",
+        ""HELP_INPUT_METHOD_NONE"": ""入力方法は指定されていません。キーボード入力は接続された物理的なキーボードから受け付けられます。 "",
+        ""HELP_INPUT_METHOD_OSK"": ""内蔵のGuacamoleオンスクリーンキーボードからの入力を表示し、受け入れます。オンスクリーンキーボードを使用すると、不可能な場合もあるキーの組み合わせを入力できます（Ctrl-Alt-Delなど）。"",
+        ""HELP_INPUT_METHOD_TEXT"": ""テキストの入力を許可し、入力されたテキストに基づいてキーボードイベントをエミュレートします。これはスマートフォンのような物理的なキーボードがない機器に必要です。 "",
+        ""HELP_MOUSE_MODE"": ""タッチに対するリモートマウスの動作を決定します。 "",
+        ""HELP_MOUSE_MODE_ABSOLUTE"": ""タッチによってクリックを行います。タッチの位置でクリックしたとみなされます。 "",
+        ""HELP_MOUSE_MODE_RELATIVE"": ""マウスポインタをドラッグしてからクリックします。マウスポインタの位置でクリックしたとみなされます。 "",
+        ""HELP_SHARE_LINK"": ""現在の接続は共有されており、次の{LINKS、multiple、one {link} other {links}}を持つ人なら誰でもアクセスできます:"",
+
+        ""INFO_CONNECTION_SHARED"": ""この接続は現在共有されています。"",
+        ""INFO_NO_FILE_TRANSFERS"": ""ファイル転送はありません。"",
+
+
+        ""NAME_INPUT_METHOD_NONE""   : ""なし"",
+        ""NAME_INPUT_METHOD_OSK""    : ""オンスクリーンキーボード"",
+        ""NAME_INPUT_METHOD_TEXT""   : ""テキストインプット"",
+        ""NAME_KEY_CTRL""            : ""Ctrl"",
+        ""NAME_KEY_ALT""             : ""Alt"",
+        ""NAME_KEY_ESC""             : ""Esc"",
+        ""NAME_KEY_TAB""             : ""Tab"",
+        ""NAME_MOUSE_MODE_ABSOLUTE"" : ""タッチスクリーン"",
+        ""NAME_MOUSE_MODE_RELATIVE"" : ""タッチパッド"",
+
+        ""SECTION_HEADER_CLIPBOARD""      : ""クリップボード"",
+        ""SECTION_HEADER_DEVICES""        : ""デバイス"",
+        ""SECTION_HEADER_DISPLAY""        : ""ディスプレイ"",
+        ""SECTION_HEADER_FILE_TRANSFERS"" : ""ファイル転送"",
+        ""SECTION_HEADER_INPUT_METHOD""   : ""インプットメソッド"",
+        ""SECTION_HEADER_MOUSE_MODE""     : ""マウスエミュレートモード"",
+
+        ""TEXT_ZOOM_AUTO_FIT""              : ""自動的にブラウザのサイズに合わせる"",
+        ""TEXT_CLIENT_STATUS_IDLE""         : ""アイドル状態."",
+        ""TEXT_CLIENT_STATUS_CONNECTING""   : ""Guacamoleサーバに接続しています..."",
+        ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""切断されました。"",
+        ""TEXT_CLIENT_STATUS_UNSTABLE""     : ""Guacamoleサーバへのネットワーク接続が不安定です。"",
+        ""TEXT_CLIENT_STATUS_WAITING""      : ""Guacamoleサーバに接続しました。応答を待っています"",
+        ""TEXT_RECONNECT_COUNTDOWN""        : ""再接続しています... {REMAINING} {REMAINING, plural, one{second} other{seconds}}..."",
+        ""TEXT_FILE_TRANSFER_PROGRESS""     : ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}"",
+
+        ""URL_OSK_LAYOUT"" : ""layouts/en-us-qwerty.json""
+
+    },
+
+    ""DATA_SOURCE_DEFAULT"" : {
+        ""NAME"" : ""Default (XML)""
+    },
+
+    ""FORM"" : {
+
+        ""FIELD_PLACEHOLDER_DATE"" : ""YYYY-MM-DD"",
+        ""FIELD_PLACEHOLDER_TIME"" : ""HH:MM:SS"",","[{'comment': 'Not sure that these need to be here?', 'commenter': 'necouchman'}]"
413,guacamole/src/main/webapp/translations/ja.json,"@@ -0,0 +1,867 @@
+{
+    
+    ""NAME"" : ""Japanese"",
+    
+    ""APP"" : {
+
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""1.0.0"",
+
+        ""ACTION_ACKNOWLEDGE""        : ""OK"",
+        ""ACTION_CANCEL""             : ""キャンセル"",
+        ""ACTION_CLONE""              : ""コピー"",
+        ""ACTION_CONTINUE""           : ""次へ"",
+        ""ACTION_DELETE""             : ""削除"",
+        ""ACTION_DELETE_SESSIONS""    : ""セッションの切断"",
+        ""ACTION_DOWNLOAD""           : ""ダウンロード"",
+        ""ACTION_LOGIN""              : ""ログイン"",
+        ""ACTION_LOGOUT""             : ""ログアウト"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""接続"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""ユーザ設定"",
+        ""ACTION_MANAGE_SETTINGS""    : ""設定"",
+        ""ACTION_MANAGE_SESSIONS""    : ""アクティブなセッション"",
+        ""ACTION_MANAGE_USERS""       : ""ユーザ"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""グループ"",
+        ""ACTION_NAVIGATE_BACK""      : ""戻る"",
+        ""ACTION_NAVIGATE_HOME""      : ""ホーム"",
+        ""ACTION_SAVE""               : ""保存"",
+        ""ACTION_SEARCH""             : ""検索"",
+        ""ACTION_SHARE""              : ""シェア"",
+        ""ACTION_UPDATE_PASSWORD""    : ""パスワードの更新"",
+        ""ACTION_VIEW_HISTORY""       : ""履歴"",
+
+        ""DIALOG_HEADER_ERROR"" : ""エラー"",
+
+        ""ERROR_PASSWORD_BLANK""    : ""パスワードが入力されていません。"",
+        ""ERROR_PASSWORD_MISMATCH"" : ""パスワードが一致しません。"",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""パスワード:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""パスワード確認:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""フィルタ"",
+
+        ""FORMAT_DATE_TIME_PRECISE"" : ""yyyy-MM-dd HH:mm:ss"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""現在以下のユーザが利用中です。 {USERS} {USERS, plural, one{user} other{users}}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""匿名ユーザ"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{{VALUE, plural, one{second} other{seconds}}} minute{{VALUE, plural, one{minute} other{minutes}}} hour{{VALUE, plural, one{hour} other{hours}}} day{{VALUE, plural, one{day} other{days}}} other{}}""
+
+    },
+
+    ""CLIENT"" : {
+
+        ""ACTION_ACKNOWLEDGE""               : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""クリア"",
+        ""ACTION_DISCONNECT""                : ""切断"",
+        ""ACTION_LOGOUT""                    : ""@:APP.ACTION_LOGOUT"",
+        ""ACTION_NAVIGATE_BACK""             : ""@:APP.ACTION_NAVIGATE_BACK"",
+        ""ACTION_NAVIGATE_HOME""             : ""@:APP.ACTION_NAVIGATE_HOME"",
+        ""ACTION_RECONNECT""                 : ""再接続"",
+        ""ACTION_SAVE_FILE""                 : ""@:APP.ACTION_SAVE"",
+        ""ACTION_SHARE""                     : ""@:APP.ACTION_SHARE"",
+        ""ACTION_UPLOAD_FILES""              : ""ファイルアップロード"",
+
+        ""DIALOG_HEADER_CONNECTING""       : ""接続"",
+        ""DIALOG_HEADER_CONNECTION_ERROR"" : ""接続エラー"",
+        ""DIALOG_HEADER_DISCONNECTED""     : ""切断"",
+
+        ""ERROR_CLIENT_201"": ""サーバーがビジー状態のため、この接続は切断されました。数分待ってからもう一度お試しください。"",
+        ""ERROR_CLIENT_202"": ""リモートデスクトップの応答に時間がかかりすぎるため、Guacamoleサーバが接続を切断しました。再試行するか、システム管理者に連絡してください。"",
+        ""ERROR_CLIENT_203"": ""リモートデスクトップサーバーでエラーが発生し、接続を切断しました。再試行するかシステム管理者に連絡してください。"",
+        ""ERROR_CLIENT_207"": ""現在リモートデスクトップサーバーにアクセスできません。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_208"": ""リモートデスクトップサーバーは現在利用できません。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_209"": ""リモートデスクトップサーバーが他の接続と競合しています。後でもう一度やり直してください。"",
+        ""ERROR_CLIENT_20A"": ""リモートデスクトップサーバーが停止しているため接続を閉じました。システム管理者に連絡するか、システム設定を確認してください。"",
+        ""ERROR_CLIENT_20B"": ""リモートデスクトップサーバーが強制的に接続を切断しました。システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_301"": ""ログインに失敗しました。再接続してからもう一度お試しください。"",
+        ""ERROR_CLIENT_303"": ""リモートデスクトップサーバーがこの接続へのアクセスを拒否しました。アクセスが必要な場合は、システム管理者にアカウントのアクセスを許可を依頼するか、システム設定を確認してください。"",
+        ""ERROR_CLIENT_308"": ""ブラウザからの応答が十分でないため、Guacamoleサーバーが接続を切断しました。これは一般的にネットワークの問題が原因です。ネットワークの状態を確認して、もう一度やり直してください。 "",
+        ""ERROR_CLIENT_31D"": ""同時接続の使用制限に達したため、Guacamoleサーバーはこの接続へのアクセスを拒否しています。1つ以上の接続を閉じてからやり直してください。"",
+        ""ERROR_CLIENT_DEFAULT"": ""Guacamoleサーバ内で内部エラーが発生し、接続が終了しました。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_TUNNEL_201"": ""アクティブな接続が多すぎるため、Guacamoleサーバーはこの接続を拒否しました。数分待ってからもう一度お試しください。"",
+        ""ERROR_TUNNEL_202"": ""サーバーの応答に時間がかかりすぎるため、接続が切断されました。通常はネットワーク問題によって引き起こされます。"",
+        ""ERROR_TUNNEL_203"": ""サーバーでエラーが発生し、接続を切断しました。再試行するかシステム管理者に連絡してください。"",
+        ""ERROR_TUNNEL_204"": ""指定された接続は存在しません。接続名を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_205"": ""この接続は現在使用中です。同時アクセスは許可されていません。後ほどやり直してください。"",
+        ""ERROR_TUNNEL_207"": ""現在Guacamoleサーバーにアクセスできません。ネットワークの状態を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_208"": ""Guacamoleサーバーは接続を受け付けていません。ネットワークの状態を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_301"": ""あなたはログインしていないため、この接続にアクセスする権限がありません。ログインしてからやり直してください。"",
+        ""ERROR_TUNNEL_303"": ""この接続にアクセスする権限がありません。アクセスが必要な場合は、システム管理者に許可を依頼するか、システム設定を確認してください。"",
+        ""ERROR_TUNNEL_308"": ""ブラウザからの応答がないため、Guacamoleサーバーが接続を切断しました。一般的にネットワークの問題が原因です。ネットワークの状態を確認して、もう一度やり直してください。 "",
+        ""ERROR_TUNNEL_31D"": ""同時接続の使用制限に達したため、Guacamoleサーバーはこの接続へのアクセスを拒否しています。1つ以上の接続を閉じてからやり直してください。"",
+        ""ERROR_TUNNEL_DEFAULT"": ""Guacamoleサーバー内で内部エラーが発生し、接続が終了しました。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_UPLOAD_100"": ""ファイル転送がサポートされていないか有効になっていません。システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_UPLOAD_201"": ""現在転送中のファイルが多すぎます。転送が完了するのを待ってからやり直してください。"",
+        ""ERROR_UPLOAD_202"": ""リモートデスクトップサーバーの応答に時間がかかりすぎるため、ファイルを転送できません。やりなおすかシステム管理者に連絡してください。"",
+        ""ERROR_UPLOAD_203"": ""転送中にリモートデスクトップサーバーでエラーが発生しました。もう一度やり直すか、システム管理者に連絡してください。"",
+        ""ERROR_UPLOAD_204"": ""ファイル転送先が存在しません。宛先が存在することを確認してやり直してください。"",
+        ""ERROR_UPLOAD_205"": ""ファイル転送先は現在ロックされています。進行中のタスクが完了するのを待ってからやり直してください。 "",
+        ""ERROR_UPLOAD_301"": ""あなたはログインしていないため、このファイルをアップロードする権限がありません。ログインしてからやり直してください。"",
+        ""ERROR_UPLOAD_303"": ""このファイルをアップロードする権限がありません。アクセスが必要な場合は、システム設定を確認するか、システム管理者に確認してください。"",
+        ""ERROR_UPLOAD_308"": ""ファイル転送が停止しています。これは一般的にネットワーク速度が非常に遅いなどのネットワークの問題が原因で発生します。"",
+        ""ERROR_UPLOAD_31D"": ""現在転送中のファイルが多すぎます。転送が完了するのを待ってからやり直してください。"",
+        ""ERROR_UPLOAD_DEFAULT"": ""Guacamoleサーバ内で内部エラーが発生し、接続が終了しました。それでも問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""HELP_CLIPBOARD"": ""Guacamole内でコピー/カットされたテキストがここに表示されます。以下のテキストを変更するとリモートクリップボードに影響します。 "",
+        ""HELP_INPUT_METHOD_NONE"": ""入力方法は指定されていません。キーボード入力は接続された物理的なキーボードから受け付けられます。 "",
+        ""HELP_INPUT_METHOD_OSK"": ""内蔵のGuacamoleオンスクリーンキーボードからの入力を表示し、受け入れます。オンスクリーンキーボードを使用すると、不可能な場合もあるキーの組み合わせを入力できます（Ctrl-Alt-Delなど）。"",
+        ""HELP_INPUT_METHOD_TEXT"": ""テキストの入力を許可し、入力されたテキストに基づいてキーボードイベントをエミュレートします。これはスマートフォンのような物理的なキーボードがない機器に必要です。 "",
+        ""HELP_MOUSE_MODE"": ""タッチに対するリモートマウスの動作を決定します。 "",
+        ""HELP_MOUSE_MODE_ABSOLUTE"": ""タッチによってクリックを行います。タッチの位置でクリックしたとみなされます。 "",
+        ""HELP_MOUSE_MODE_RELATIVE"": ""マウスポインタをドラッグしてからクリックします。マウスポインタの位置でクリックしたとみなされます。 "",
+        ""HELP_SHARE_LINK"": ""現在の接続は共有されており、次の{LINKS、multiple、one {link} other {links}}を持つ人なら誰でもアクセスできます:"",
+
+        ""INFO_CONNECTION_SHARED"": ""この接続は現在共有されています。"",
+        ""INFO_NO_FILE_TRANSFERS"": ""ファイル転送はありません。"",
+
+
+        ""NAME_INPUT_METHOD_NONE""   : ""なし"",
+        ""NAME_INPUT_METHOD_OSK""    : ""オンスクリーンキーボード"",
+        ""NAME_INPUT_METHOD_TEXT""   : ""テキストインプット"",
+        ""NAME_KEY_CTRL""            : ""Ctrl"",
+        ""NAME_KEY_ALT""             : ""Alt"",
+        ""NAME_KEY_ESC""             : ""Esc"",
+        ""NAME_KEY_TAB""             : ""Tab"",
+        ""NAME_MOUSE_MODE_ABSOLUTE"" : ""タッチスクリーン"",
+        ""NAME_MOUSE_MODE_RELATIVE"" : ""タッチパッド"",
+
+        ""SECTION_HEADER_CLIPBOARD""      : ""クリップボード"",
+        ""SECTION_HEADER_DEVICES""        : ""デバイス"",
+        ""SECTION_HEADER_DISPLAY""        : ""ディスプレイ"",
+        ""SECTION_HEADER_FILE_TRANSFERS"" : ""ファイル転送"",
+        ""SECTION_HEADER_INPUT_METHOD""   : ""インプットメソッド"",
+        ""SECTION_HEADER_MOUSE_MODE""     : ""マウスエミュレートモード"",
+
+        ""TEXT_ZOOM_AUTO_FIT""              : ""自動的にブラウザのサイズに合わせる"",
+        ""TEXT_CLIENT_STATUS_IDLE""         : ""アイドル状態."",
+        ""TEXT_CLIENT_STATUS_CONNECTING""   : ""Guacamoleサーバに接続しています..."",
+        ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""切断されました。"",
+        ""TEXT_CLIENT_STATUS_UNSTABLE""     : ""Guacamoleサーバへのネットワーク接続が不安定です。"",
+        ""TEXT_CLIENT_STATUS_WAITING""      : ""Guacamoleサーバに接続しました。応答を待っています"",
+        ""TEXT_RECONNECT_COUNTDOWN""        : ""再接続しています... {REMAINING} {REMAINING, plural, one{second} other{seconds}}..."",
+        ""TEXT_FILE_TRANSFER_PROGRESS""     : ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}"",
+
+        ""URL_OSK_LAYOUT"" : ""layouts/en-us-qwerty.json""
+
+    },
+
+    ""DATA_SOURCE_DEFAULT"" : {
+        ""NAME"" : ""Default (XML)""
+    },","[{'comment': 'This entire section can probably be removed if it is not being translated.', 'commenter': 'necouchman'}]"
413,guacamole/src/main/webapp/translations/ja.json,"@@ -0,0 +1,867 @@
+{
+    
+    ""NAME"" : ""Japanese"",
+    
+    ""APP"" : {
+
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""1.0.0"",
+
+        ""ACTION_ACKNOWLEDGE""        : ""OK"",
+        ""ACTION_CANCEL""             : ""キャンセル"",
+        ""ACTION_CLONE""              : ""コピー"",
+        ""ACTION_CONTINUE""           : ""次へ"",
+        ""ACTION_DELETE""             : ""削除"",
+        ""ACTION_DELETE_SESSIONS""    : ""セッションの切断"",
+        ""ACTION_DOWNLOAD""           : ""ダウンロード"",
+        ""ACTION_LOGIN""              : ""ログイン"",
+        ""ACTION_LOGOUT""             : ""ログアウト"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""接続"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""ユーザ設定"",
+        ""ACTION_MANAGE_SETTINGS""    : ""設定"",
+        ""ACTION_MANAGE_SESSIONS""    : ""アクティブなセッション"",
+        ""ACTION_MANAGE_USERS""       : ""ユーザ"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""グループ"",
+        ""ACTION_NAVIGATE_BACK""      : ""戻る"",
+        ""ACTION_NAVIGATE_HOME""      : ""ホーム"",
+        ""ACTION_SAVE""               : ""保存"",
+        ""ACTION_SEARCH""             : ""検索"",
+        ""ACTION_SHARE""              : ""シェア"",
+        ""ACTION_UPDATE_PASSWORD""    : ""パスワードの更新"",
+        ""ACTION_VIEW_HISTORY""       : ""履歴"",
+
+        ""DIALOG_HEADER_ERROR"" : ""エラー"",
+
+        ""ERROR_PASSWORD_BLANK""    : ""パスワードが入力されていません。"",
+        ""ERROR_PASSWORD_MISMATCH"" : ""パスワードが一致しません。"",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""パスワード:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""パスワード確認:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""フィルタ"",
+
+        ""FORMAT_DATE_TIME_PRECISE"" : ""yyyy-MM-dd HH:mm:ss"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""現在以下のユーザが利用中です。 {USERS} {USERS, plural, one{user} other{users}}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""匿名ユーザ"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{{VALUE, plural, one{second} other{seconds}}} minute{{VALUE, plural, one{minute} other{minutes}}} hour{{VALUE, plural, one{hour} other{hours}}} day{{VALUE, plural, one{day} other{days}}} other{}}""
+
+    },
+
+    ""CLIENT"" : {
+
+        ""ACTION_ACKNOWLEDGE""               : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""クリア"",
+        ""ACTION_DISCONNECT""                : ""切断"",
+        ""ACTION_LOGOUT""                    : ""@:APP.ACTION_LOGOUT"",
+        ""ACTION_NAVIGATE_BACK""             : ""@:APP.ACTION_NAVIGATE_BACK"",
+        ""ACTION_NAVIGATE_HOME""             : ""@:APP.ACTION_NAVIGATE_HOME"",
+        ""ACTION_RECONNECT""                 : ""再接続"",
+        ""ACTION_SAVE_FILE""                 : ""@:APP.ACTION_SAVE"",
+        ""ACTION_SHARE""                     : ""@:APP.ACTION_SHARE"",
+        ""ACTION_UPLOAD_FILES""              : ""ファイルアップロード"",
+
+        ""DIALOG_HEADER_CONNECTING""       : ""接続"",
+        ""DIALOG_HEADER_CONNECTION_ERROR"" : ""接続エラー"",
+        ""DIALOG_HEADER_DISCONNECTED""     : ""切断"",
+
+        ""ERROR_CLIENT_201"": ""サーバーがビジー状態のため、この接続は切断されました。数分待ってからもう一度お試しください。"",
+        ""ERROR_CLIENT_202"": ""リモートデスクトップの応答に時間がかかりすぎるため、Guacamoleサーバが接続を切断しました。再試行するか、システム管理者に連絡してください。"",
+        ""ERROR_CLIENT_203"": ""リモートデスクトップサーバーでエラーが発生し、接続を切断しました。再試行するかシステム管理者に連絡してください。"",
+        ""ERROR_CLIENT_207"": ""現在リモートデスクトップサーバーにアクセスできません。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_208"": ""リモートデスクトップサーバーは現在利用できません。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_209"": ""リモートデスクトップサーバーが他の接続と競合しています。後でもう一度やり直してください。"",
+        ""ERROR_CLIENT_20A"": ""リモートデスクトップサーバーが停止しているため接続を閉じました。システム管理者に連絡するか、システム設定を確認してください。"",
+        ""ERROR_CLIENT_20B"": ""リモートデスクトップサーバーが強制的に接続を切断しました。システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_301"": ""ログインに失敗しました。再接続してからもう一度お試しください。"",
+        ""ERROR_CLIENT_303"": ""リモートデスクトップサーバーがこの接続へのアクセスを拒否しました。アクセスが必要な場合は、システム管理者にアカウントのアクセスを許可を依頼するか、システム設定を確認してください。"",
+        ""ERROR_CLIENT_308"": ""ブラウザからの応答が十分でないため、Guacamoleサーバーが接続を切断しました。これは一般的にネットワークの問題が原因です。ネットワークの状態を確認して、もう一度やり直してください。 "",
+        ""ERROR_CLIENT_31D"": ""同時接続の使用制限に達したため、Guacamoleサーバーはこの接続へのアクセスを拒否しています。1つ以上の接続を閉じてからやり直してください。"",
+        ""ERROR_CLIENT_DEFAULT"": ""Guacamoleサーバ内で内部エラーが発生し、接続が終了しました。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_TUNNEL_201"": ""アクティブな接続が多すぎるため、Guacamoleサーバーはこの接続を拒否しました。数分待ってからもう一度お試しください。"",
+        ""ERROR_TUNNEL_202"": ""サーバーの応答に時間がかかりすぎるため、接続が切断されました。通常はネットワーク問題によって引き起こされます。"",
+        ""ERROR_TUNNEL_203"": ""サーバーでエラーが発生し、接続を切断しました。再試行するかシステム管理者に連絡してください。"",
+        ""ERROR_TUNNEL_204"": ""指定された接続は存在しません。接続名を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_205"": ""この接続は現在使用中です。同時アクセスは許可されていません。後ほどやり直してください。"",
+        ""ERROR_TUNNEL_207"": ""現在Guacamoleサーバーにアクセスできません。ネットワークの状態を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_208"": ""Guacamoleサーバーは接続を受け付けていません。ネットワークの状態を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_301"": ""あなたはログインしていないため、この接続にアクセスする権限がありません。ログインしてからやり直してください。"",
+        ""ERROR_TUNNEL_303"": ""この接続にアクセスする権限がありません。アクセスが必要な場合は、システム管理者に許可を依頼するか、システム設定を確認してください。"",
+        ""ERROR_TUNNEL_308"": ""ブラウザからの応答がないため、Guacamoleサーバーが接続を切断しました。一般的にネットワークの問題が原因です。ネットワークの状態を確認して、もう一度やり直してください。 "",
+        ""ERROR_TUNNEL_31D"": ""同時接続の使用制限に達したため、Guacamoleサーバーはこの接続へのアクセスを拒否しています。1つ以上の接続を閉じてからやり直してください。"",
+        ""ERROR_TUNNEL_DEFAULT"": ""Guacamoleサーバー内で内部エラーが発生し、接続が終了しました。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_UPLOAD_100"": ""ファイル転送がサポートされていないか有効になっていません。システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_UPLOAD_201"": ""現在転送中のファイルが多すぎます。転送が完了するのを待ってからやり直してください。"",
+        ""ERROR_UPLOAD_202"": ""リモートデスクトップサーバーの応答に時間がかかりすぎるため、ファイルを転送できません。やりなおすかシステム管理者に連絡してください。"",
+        ""ERROR_UPLOAD_203"": ""転送中にリモートデスクトップサーバーでエラーが発生しました。もう一度やり直すか、システム管理者に連絡してください。"",
+        ""ERROR_UPLOAD_204"": ""ファイル転送先が存在しません。宛先が存在することを確認してやり直してください。"",
+        ""ERROR_UPLOAD_205"": ""ファイル転送先は現在ロックされています。進行中のタスクが完了するのを待ってからやり直してください。 "",
+        ""ERROR_UPLOAD_301"": ""あなたはログインしていないため、このファイルをアップロードする権限がありません。ログインしてからやり直してください。"",
+        ""ERROR_UPLOAD_303"": ""このファイルをアップロードする権限がありません。アクセスが必要な場合は、システム設定を確認するか、システム管理者に確認してください。"",
+        ""ERROR_UPLOAD_308"": ""ファイル転送が停止しています。これは一般的にネットワーク速度が非常に遅いなどのネットワークの問題が原因で発生します。"",
+        ""ERROR_UPLOAD_31D"": ""現在転送中のファイルが多すぎます。転送が完了するのを待ってからやり直してください。"",
+        ""ERROR_UPLOAD_DEFAULT"": ""Guacamoleサーバ内で内部エラーが発生し、接続が終了しました。それでも問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""HELP_CLIPBOARD"": ""Guacamole内でコピー/カットされたテキストがここに表示されます。以下のテキストを変更するとリモートクリップボードに影響します。 "",
+        ""HELP_INPUT_METHOD_NONE"": ""入力方法は指定されていません。キーボード入力は接続された物理的なキーボードから受け付けられます。 "",
+        ""HELP_INPUT_METHOD_OSK"": ""内蔵のGuacamoleオンスクリーンキーボードからの入力を表示し、受け入れます。オンスクリーンキーボードを使用すると、不可能な場合もあるキーの組み合わせを入力できます（Ctrl-Alt-Delなど）。"",
+        ""HELP_INPUT_METHOD_TEXT"": ""テキストの入力を許可し、入力されたテキストに基づいてキーボードイベントをエミュレートします。これはスマートフォンのような物理的なキーボードがない機器に必要です。 "",
+        ""HELP_MOUSE_MODE"": ""タッチに対するリモートマウスの動作を決定します。 "",
+        ""HELP_MOUSE_MODE_ABSOLUTE"": ""タッチによってクリックを行います。タッチの位置でクリックしたとみなされます。 "",
+        ""HELP_MOUSE_MODE_RELATIVE"": ""マウスポインタをドラッグしてからクリックします。マウスポインタの位置でクリックしたとみなされます。 "",
+        ""HELP_SHARE_LINK"": ""現在の接続は共有されており、次の{LINKS、multiple、one {link} other {links}}を持つ人なら誰でもアクセスできます:"",
+
+        ""INFO_CONNECTION_SHARED"": ""この接続は現在共有されています。"",
+        ""INFO_NO_FILE_TRANSFERS"": ""ファイル転送はありません。"",
+
+
+        ""NAME_INPUT_METHOD_NONE""   : ""なし"",
+        ""NAME_INPUT_METHOD_OSK""    : ""オンスクリーンキーボード"",
+        ""NAME_INPUT_METHOD_TEXT""   : ""テキストインプット"",
+        ""NAME_KEY_CTRL""            : ""Ctrl"",
+        ""NAME_KEY_ALT""             : ""Alt"",
+        ""NAME_KEY_ESC""             : ""Esc"",
+        ""NAME_KEY_TAB""             : ""Tab"",
+        ""NAME_MOUSE_MODE_ABSOLUTE"" : ""タッチスクリーン"",
+        ""NAME_MOUSE_MODE_RELATIVE"" : ""タッチパッド"",
+
+        ""SECTION_HEADER_CLIPBOARD""      : ""クリップボード"",
+        ""SECTION_HEADER_DEVICES""        : ""デバイス"",
+        ""SECTION_HEADER_DISPLAY""        : ""ディスプレイ"",
+        ""SECTION_HEADER_FILE_TRANSFERS"" : ""ファイル転送"",
+        ""SECTION_HEADER_INPUT_METHOD""   : ""インプットメソッド"",
+        ""SECTION_HEADER_MOUSE_MODE""     : ""マウスエミュレートモード"",
+
+        ""TEXT_ZOOM_AUTO_FIT""              : ""自動的にブラウザのサイズに合わせる"",
+        ""TEXT_CLIENT_STATUS_IDLE""         : ""アイドル状態."",
+        ""TEXT_CLIENT_STATUS_CONNECTING""   : ""Guacamoleサーバに接続しています..."",
+        ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""切断されました。"",
+        ""TEXT_CLIENT_STATUS_UNSTABLE""     : ""Guacamoleサーバへのネットワーク接続が不安定です。"",
+        ""TEXT_CLIENT_STATUS_WAITING""      : ""Guacamoleサーバに接続しました。応答を待っています"",
+        ""TEXT_RECONNECT_COUNTDOWN""        : ""再接続しています... {REMAINING} {REMAINING, plural, one{second} other{seconds}}..."",
+        ""TEXT_FILE_TRANSFER_PROGRESS""     : ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}"",
+
+        ""URL_OSK_LAYOUT"" : ""layouts/en-us-qwerty.json""
+
+    },
+
+    ""DATA_SOURCE_DEFAULT"" : {
+        ""NAME"" : ""Default (XML)""
+    },
+
+    ""FORM"" : {
+
+        ""FIELD_PLACEHOLDER_DATE"" : ""YYYY-MM-DD"",
+        ""FIELD_PLACEHOLDER_TIME"" : ""HH:MM:SS"",
+
+        ""HELP_SHOW_PASSWORD"" : ""パスワードを見る"",
+        ""HELP_HIDE_PASSWORD"" : ""パスワードを隠す""
+
+    },
+
+    ""HOME"" : {
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""@:APP.INFO_ACTIVE_USER_COUNT"",
+
+        ""INFO_NO_RECENT_CONNECTIONS"" : ""最近の接続情報はありません。"",
+        
+        ""PASSWORD_CHANGED"" : ""パスワードが変更されました。"",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""    : ""全ての接続情報"",
+        ""SECTION_HEADER_RECENT_CONNECTIONS"" : ""最近の接続情報""
+
+    },
+
+    ""LIST"" : {
+
+        ""TEXT_ANONYMOUS_USER"" : ""匿名""
+
+    },
+
+    ""LOGIN"": {
+
+        ""ACTION_ACKNOWLEDGE"" : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CONTINUE""    : ""@:APP.ACTION_CONTINUE"",
+        ""ACTION_LOGIN""       : ""@:APP.ACTION_LOGIN"",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""ERROR_INVALID_LOGIN"" : ""不正なログインです。"",
+
+        ""FIELD_HEADER_USERNAME"" : ""ユーザ名"",
+        ""FIELD_HEADER_PASSWORD"" : ""パスワード""
+
+    },
+
+    ""MANAGE_CONNECTION"" : {
+
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CANCEL""               : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLONE""                : ""@:APP.ACTION_CLONE"",
+        ""ACTION_DELETE""               : ""@:APP.ACTION_DELETE"",
+        ""ACTION_SAVE""                 : ""@:APP.ACTION_SAVE"",
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""接続の削除"",
+        ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""FIELD_HEADER_LOCATION"" : ""ロケーション:"",
+        ""FIELD_HEADER_NAME""     : ""名前:"",
+        ""FIELD_HEADER_PROTOCOL"" : ""プロトコル:"",
+
+        ""FORMAT_HISTORY_START"" : ""@:APP.FORMAT_DATE_TIME_PRECISE"",
+
+        ""INFO_CONNECTION_DURATION_UNKNOWN"" : ""--"",
+        ""INFO_CONNECTION_ACTIVE_NOW""       : ""アクティブにする"",
+        ""INFO_CONNECTION_NOT_USED""         : ""この接続はまだ使用されていません。"",
+
+        ""SECTION_HEADER_EDIT_CONNECTION"" : ""接続の編集"",
+        ""SECTION_HEADER_HISTORY""         : ""使用履歴"",
+        ""SECTION_HEADER_PARAMETERS""      : ""パラメータ"",
+
+        ""TABLE_HEADER_HISTORY_USERNAME""   : ""ユーザ名"",
+        ""TABLE_HEADER_HISTORY_START""      : ""開始時間"",
+        ""TABLE_HEADER_HISTORY_DURATION""   : ""期間"",
+        ""TABLE_HEADER_HISTORY_REMOTEHOST"" : ""接続元"",
+
+        ""TEXT_CONFIRM_DELETE""   : ""削除した接続は元に戻せません。この接続を削除してもよろしいですか？"",
+        ""TEXT_HISTORY_DURATION"" : ""@:APP.TEXT_HISTORY_DURATION""
+
+    },
+
+    ""MANAGE_CONNECTION_GROUP"" : {
+
+        ""ACTION_ACKNOWLEDGE""   : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CANCEL""        : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLONE""         : ""@:APP.ACTION_CLONE"",
+        ""ACTION_DELETE""        : ""@:APP.ACTION_DELETE"",
+        ""ACTION_SAVE""          : ""@:APP.ACTION_SAVE"",
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""接続グループの削除"",
+        ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""FIELD_HEADER_LOCATION"" : ""ロケーション:"",
+        ""FIELD_HEADER_NAME""     : ""名前:"",
+        ""FIELD_HEADER_TYPE""     : ""タイプ:"",
+
+        ""NAME_TYPE_BALANCING""       : ""Balancing"",
+        ""NAME_TYPE_ORGANIZATIONAL""  : ""Organizational"",","[{'comment': 'Same as other places - if these are accurate Japanese translations they should be kept, but if they are not being translated they should be removed.', 'commenter': 'necouchman'}]"
413,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/ja.json,"@@ -0,0 +1,99 @@
+{
+
+    ""LOGIN"" : {
+
+        ""ERROR_PASSWORD_BLANK""    : ""@:APP.ERROR_PASSWORD_BLANK"",
+        ""ERROR_PASSWORD_SAME""     : ""新しいパスワードには、無効になったパスワードとは別の文字を使用してください。"",
+        ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
+        ""ERROR_NOT_VALID""         : ""このユーザアカウントは、現在有効ではありません。"",
+        ""ERROR_NOT_ACCESSIBLE""    : ""このユーザのアクセスは現在許可されていません。 しばらくしてから再度アクセスをしてください。"",
+
+        ""INFO_PASSWORD_EXPIRED"" : ""あなたのパスワードは無効なため、リセットが必要です。 新しいパスワードを入力してください。"",
+
+        ""FIELD_HEADER_NEW_PASSWORD""         : ""新しいパスワード"",
+        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""新しいパスワード(確認)""
+
+    },
+
+    ""CONNECTION_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""最大接続数:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""ユーザ毎の最大接続数:"",
+
+        ""FIELD_HEADER_FAILOVER_ONLY""            : ""フェイルオーバ機能のみを使用:"",
+        ""FIELD_HEADER_WEIGHT""                   : ""コネクションウェイト:"",
+
+        ""FIELD_HEADER_GUACD_HOSTNAME""   : ""ホスト名:"",
+        ""FIELD_HEADER_GUACD_ENCRYPTION"" : ""暗号化:"",
+        ""FIELD_HEADER_GUACD_PORT""       : ""ポート:"",
+
+        ""FIELD_OPTION_GUACD_ENCRYPTION_NONE""  : ""なし (暗号化なし)"",
+
+        ""SECTION_HEADER_CONCURRENCY""    : ""同時接続制限"",
+        ""SECTION_HEADER_LOAD_BALANCING"" : ""ロードバラシング"",
+        ""SECTION_HEADER_GUACD""          : ""Guacamoleプロキシパラメータ (guacd)""
+
+    },
+
+    ""CONNECTION_GROUP_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_ENABLE_SESSION_AFFINITY""  : ""セッションアフィニティの有効化:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""最大接続数:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""ユーザ毎の最大接続数:"",
+
+        ""SECTION_HEADER_CONCURRENCY"" : ""同時接続制限(バランシンググループ)""
+
+    },
+
+    ""DATA_SOURCE_MYSQL_SHARED"" : {
+        ""NAME"" : ""共有接続 (MySQL)""
+    },
+
+    ""DATA_SOURCE_POSTGRESQL_SHARED"" : {
+        ""NAME"" : ""共有接続 (PostgreSQL)""
+    },
+
+    ""DATA_SOURCE_SQLSERVER_SHARED"" : {
+        ""NAME"" : ""共有接続 (SQL Server)""
+    },
+
+    ""HOME"" : {
+        ""INFO_SHARED_BY"" : ""{USERNAME}によって共有されています""
+    },
+
+    ""PASSWORD_POLICY"" : {
+
+        ""ERROR_CONTAINS_USERNAME""      : ""ユーザ名にパスワードを含んでいます。"",
+        ""ERROR_REQUIRES_DIGIT""         : ""パスワードには数字を含めてください。"",
+        ""ERROR_REQUIRES_MULTIPLE_CASE"" : ""パスワードにはアルファベットの大文字・小文字を含めてください。"",
+        ""ERROR_REQUIRES_NON_ALNUM""     : ""パスワードには記号を含めてください。"",
+        ""ERROR_REUSED""                 : ""This password has already been used. Please do not reuse any of the previous {HISTORY_SIZE} {HISTORY_SIZE, plural, one{password} other{passwords}}."",
+        ""ERROR_TOO_SHORT""              : ""Passwords must be at least {LENGTH} {LENGTH, plural, one{character} other{characters}} long."",
+        ""ERROR_TOO_YOUNG""              : ""The password for this account has already been reset. Please wait at least {WAIT} more {WAIT, plural, one{day} other{days}} before changing the password again.""","[{'comment': 'These three strings (`ERROR_TOO_YOUNG`, `ERROR_TOO_SHORT`, `ERROR_REUSED`) are untranslated. If the intent of these changes is to not translate these strings, they should be omitted rather than duplicated.', 'commenter': 'mike-jumper'}]"
413,guacamole/src/main/webapp/translations/ja.json,"@@ -0,0 +1,750 @@
+{
+    
+    ""NAME"" : ""Japanese"",
+    
+    ""APP"" : {
+
+        ""ACTION_CANCEL""             : ""キャンセル"",
+        ""ACTION_CLONE""              : ""コピー"",
+        ""ACTION_CONTINUE""           : ""次へ"",
+        ""ACTION_DELETE""             : ""削除"",
+        ""ACTION_DELETE_SESSIONS""    : ""セッションの切断"",
+        ""ACTION_DOWNLOAD""           : ""ダウンロード"",
+        ""ACTION_LOGIN""              : ""ログイン"",
+        ""ACTION_LOGOUT""             : ""ログアウト"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""接続"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""ユーザ設定"",
+        ""ACTION_MANAGE_SETTINGS""    : ""設定"",
+        ""ACTION_MANAGE_SESSIONS""    : ""アクティブなセッション"",
+        ""ACTION_MANAGE_USERS""       : ""ユーザ"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""グループ"",
+        ""ACTION_NAVIGATE_BACK""      : ""戻る"",
+        ""ACTION_NAVIGATE_HOME""      : ""ホーム"",
+        ""ACTION_SAVE""               : ""保存"",
+        ""ACTION_SEARCH""             : ""検索"",
+        ""ACTION_SHARE""              : ""シェア"",
+        ""ACTION_UPDATE_PASSWORD""    : ""パスワードの更新"",
+        ""ACTION_VIEW_HISTORY""       : ""履歴"",
+
+        ""DIALOG_HEADER_ERROR"" : ""エラー"",
+
+        ""ERROR_PAGE_UNAVAILABLE""  : ""エラーが発生したため、この操作を完了できませんでした。問題が解決しない場合は、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_PASSWORD_BLANK""    : ""パスワードが入力されていません。"",
+        ""ERROR_PASSWORD_MISMATCH"" : ""パスワードが一致しません。"",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""パスワード:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""パスワード確認:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""フィルタ"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""現在以下のユーザが利用中です。 {USERS} {USERS, plural, one{user} other{users}}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""匿名ユーザ"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{{VALUE, plural, one{second} other{seconds}}} minute{{VALUE, plural, one{minute} other{minutes}}} hour{{VALUE, plural, one{hour} other{hours}}} day{{VALUE, plural, one{day} other{days}}} other{}}""","[{'comment': 'Same here - if `TEXT_HISTORY_DURATION` is not being translated, it should be omitted.', 'commenter': 'mike-jumper'}]"
413,guacamole/src/main/webapp/translations/ja.json,"@@ -0,0 +1,746 @@
+{
+    
+    ""NAME"" : ""Japanese"",
+    
+    ""APP"" : {
+
+        ""ACTION_CANCEL""             : ""キャンセル"",
+        ""ACTION_CLONE""              : ""コピー"",
+        ""ACTION_CONTINUE""           : ""次へ"",
+        ""ACTION_DELETE""             : ""削除"",
+        ""ACTION_DELETE_SESSIONS""    : ""セッションの切断"",
+        ""ACTION_DOWNLOAD""           : ""ダウンロード"",
+        ""ACTION_LOGIN""              : ""ログイン"",
+        ""ACTION_LOGOUT""             : ""ログアウト"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""接続"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""ユーザ設定"",
+        ""ACTION_MANAGE_SETTINGS""    : ""設定"",
+        ""ACTION_MANAGE_SESSIONS""    : ""アクティブなセッション"",
+        ""ACTION_MANAGE_USERS""       : ""ユーザ"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""グループ"",
+        ""ACTION_NAVIGATE_BACK""      : ""戻る"",
+        ""ACTION_NAVIGATE_HOME""      : ""ホーム"",
+        ""ACTION_SAVE""               : ""保存"",
+        ""ACTION_SEARCH""             : ""検索"",
+        ""ACTION_SHARE""              : ""シェア"",
+        ""ACTION_UPDATE_PASSWORD""    : ""パスワードの更新"",
+        ""ACTION_VIEW_HISTORY""       : ""履歴"",
+
+        ""DIALOG_HEADER_ERROR"" : ""エラー"",
+
+        ""ERROR_PAGE_UNAVAILABLE""  : ""エラーが発生したため、この操作を完了できませんでした。問題が解決しない場合は、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_PASSWORD_BLANK""    : ""パスワードが入力されていません。"",
+        ""ERROR_PASSWORD_MISMATCH"" : ""パスワードが一致しません。"",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""パスワード:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""パスワード確認:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""フィルタ"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""現在以下のユーザが利用中です。 {USERS} {USERS, plural, one{user} other{users}}."",","[{'comment': 'This will result in:\r\n\r\n> 現在以下のユーザが利用中です。 1 user.\r\n\r\nif there is one user on a connection, and:\r\n\r\n> 現在以下のユーザが利用中です。 3 users.\r\n\r\n(or similar) for other values.\r\n\r\nIs this intentional?', 'commenter': 'mike-jumper'}]"
413,guacamole/src/main/webapp/translations/ja.json,"@@ -0,0 +1,746 @@
+{
+    
+    ""NAME"" : ""Japanese"",
+    
+    ""APP"" : {
+
+        ""ACTION_CANCEL""             : ""キャンセル"",
+        ""ACTION_CLONE""              : ""コピー"",
+        ""ACTION_CONTINUE""           : ""次へ"",
+        ""ACTION_DELETE""             : ""削除"",
+        ""ACTION_DELETE_SESSIONS""    : ""セッションの切断"",
+        ""ACTION_DOWNLOAD""           : ""ダウンロード"",
+        ""ACTION_LOGIN""              : ""ログイン"",
+        ""ACTION_LOGOUT""             : ""ログアウト"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""接続"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""ユーザ設定"",
+        ""ACTION_MANAGE_SETTINGS""    : ""設定"",
+        ""ACTION_MANAGE_SESSIONS""    : ""アクティブなセッション"",
+        ""ACTION_MANAGE_USERS""       : ""ユーザ"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""グループ"",
+        ""ACTION_NAVIGATE_BACK""      : ""戻る"",
+        ""ACTION_NAVIGATE_HOME""      : ""ホーム"",
+        ""ACTION_SAVE""               : ""保存"",
+        ""ACTION_SEARCH""             : ""検索"",
+        ""ACTION_SHARE""              : ""シェア"",
+        ""ACTION_UPDATE_PASSWORD""    : ""パスワードの更新"",
+        ""ACTION_VIEW_HISTORY""       : ""履歴"",
+
+        ""DIALOG_HEADER_ERROR"" : ""エラー"",
+
+        ""ERROR_PAGE_UNAVAILABLE""  : ""エラーが発生したため、この操作を完了できませんでした。問題が解決しない場合は、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_PASSWORD_BLANK""    : ""パスワードが入力されていません。"",
+        ""ERROR_PASSWORD_MISMATCH"" : ""パスワードが一致しません。"",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""パスワード:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""パスワード確認:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""フィルタ"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""現在以下のユーザが利用中です。 {USERS} {USERS, plural, one{user} other{users}}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""匿名ユーザ""
+
+    },
+
+    ""CLIENT"" : {
+
+        ""ACTION_ACKNOWLEDGE""               : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""クリア"",
+        ""ACTION_DISCONNECT""                : ""切断"",
+        ""ACTION_LOGOUT""                    : ""@:APP.ACTION_LOGOUT"",
+        ""ACTION_NAVIGATE_BACK""             : ""@:APP.ACTION_NAVIGATE_BACK"",
+        ""ACTION_NAVIGATE_HOME""             : ""@:APP.ACTION_NAVIGATE_HOME"",
+        ""ACTION_RECONNECT""                 : ""再接続"",
+        ""ACTION_SAVE_FILE""                 : ""@:APP.ACTION_SAVE"",
+        ""ACTION_SHARE""                     : ""@:APP.ACTION_SHARE"",
+        ""ACTION_UPLOAD_FILES""              : ""ファイルアップロード"",
+
+        ""DIALOG_HEADER_CONNECTING""       : ""接続"",
+        ""DIALOG_HEADER_CONNECTION_ERROR"" : ""接続エラー"",
+        ""DIALOG_HEADER_DISCONNECTED""     : ""切断"",
+
+        ""ERROR_CLIENT_201"": ""サーバーがビジー状態のため、この接続は切断されました。数分待ってからもう一度お試しください。"",
+        ""ERROR_CLIENT_202"": ""リモートデスクトップの応答に時間がかかりすぎるため、Guacamoleサーバが接続を切断しました。再試行するか、システム管理者に連絡してください。"",
+        ""ERROR_CLIENT_203"": ""リモートデスクトップサーバーでエラーが発生し、接続を切断しました。再試行するかシステム管理者に連絡してください。"",
+        ""ERROR_CLIENT_207"": ""現在リモートデスクトップサーバーにアクセスできません。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_208"": ""リモートデスクトップサーバーは現在利用できません。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_209"": ""リモートデスクトップサーバーが他の接続と競合しています。後でもう一度やり直してください。"",
+        ""ERROR_CLIENT_20A"": ""リモートデスクトップサーバーが停止しているため接続を閉じました。システム管理者に連絡するか、システム設定を確認してください。"",
+        ""ERROR_CLIENT_20B"": ""リモートデスクトップサーバーが強制的に接続を切断しました。システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_CLIENT_301"": ""ログインに失敗しました。再接続してからもう一度お試しください。"",
+        ""ERROR_CLIENT_303"": ""リモートデスクトップサーバーがこの接続へのアクセスを拒否しました。アクセスが必要な場合は、システム管理者にアカウントのアクセスを許可を依頼するか、システム設定を確認してください。"",
+        ""ERROR_CLIENT_308"": ""ブラウザからの応答が十分でないため、Guacamoleサーバーが接続を切断しました。これは一般的にネットワークの問題が原因です。ネットワークの状態を確認して、もう一度やり直してください。 "",
+        ""ERROR_CLIENT_31D"": ""同時接続の使用制限に達したため、Guacamoleサーバーはこの接続へのアクセスを拒否しています。1つ以上の接続を閉じてからやり直してください。"",
+        ""ERROR_CLIENT_DEFAULT"": ""Guacamoleサーバ内で内部エラーが発生し、接続が終了しました。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_TUNNEL_201"": ""アクティブな接続が多すぎるため、Guacamoleサーバーはこの接続を拒否しました。数分待ってからもう一度お試しください。"",
+        ""ERROR_TUNNEL_202"": ""サーバーの応答に時間がかかりすぎるため、接続が切断されました。通常はネットワーク問題によって引き起こされます。"",
+        ""ERROR_TUNNEL_203"": ""サーバーでエラーが発生し、接続を切断しました。再試行するかシステム管理者に連絡してください。"",
+        ""ERROR_TUNNEL_204"": ""指定された接続は存在しません。接続名を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_205"": ""この接続は現在使用中です。同時アクセスは許可されていません。後ほどやり直してください。"",
+        ""ERROR_TUNNEL_207"": ""現在Guacamoleサーバーにアクセスできません。ネットワークの状態を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_208"": ""Guacamoleサーバーは接続を受け付けていません。ネットワークの状態を確認してもう一度やり直してください。"",
+        ""ERROR_TUNNEL_301"": ""あなたはログインしていないため、この接続にアクセスする権限がありません。ログインしてからやり直してください。"",
+        ""ERROR_TUNNEL_303"": ""この接続にアクセスする権限がありません。アクセスが必要な場合は、システム管理者に許可を依頼するか、システム設定を確認してください。"",
+        ""ERROR_TUNNEL_308"": ""ブラウザからの応答がないため、Guacamoleサーバーが接続を切断しました。一般的にネットワークの問題が原因です。ネットワークの状態を確認して、もう一度やり直してください。 "",
+        ""ERROR_TUNNEL_31D"": ""同時接続の使用制限に達したため、Guacamoleサーバーはこの接続へのアクセスを拒否しています。1つ以上の接続を閉じてからやり直してください。"",
+        ""ERROR_TUNNEL_DEFAULT"": ""Guacamoleサーバー内で内部エラーが発生し、接続が終了しました。問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""ERROR_UPLOAD_100"": ""ファイル転送がサポートされていないか有効になっていません。システム管理者に連絡するか、システムログを確認してください。"",
+        ""ERROR_UPLOAD_201"": ""現在転送中のファイルが多すぎます。転送が完了するのを待ってからやり直してください。"",
+        ""ERROR_UPLOAD_202"": ""リモートデスクトップサーバーの応答に時間がかかりすぎるため、ファイルを転送できません。やりなおすかシステム管理者に連絡してください。"",
+        ""ERROR_UPLOAD_203"": ""転送中にリモートデスクトップサーバーでエラーが発生しました。もう一度やり直すか、システム管理者に連絡してください。"",
+        ""ERROR_UPLOAD_204"": ""ファイル転送先が存在しません。宛先が存在することを確認してやり直してください。"",
+        ""ERROR_UPLOAD_205"": ""ファイル転送先は現在ロックされています。進行中のタスクが完了するのを待ってからやり直してください。 "",
+        ""ERROR_UPLOAD_301"": ""あなたはログインしていないため、このファイルをアップロードする権限がありません。ログインしてからやり直してください。"",
+        ""ERROR_UPLOAD_303"": ""このファイルをアップロードする権限がありません。アクセスが必要な場合は、システム設定を確認するか、システム管理者に確認してください。"",
+        ""ERROR_UPLOAD_308"": ""ファイル転送が停止しています。これは一般的にネットワーク速度が非常に遅いなどのネットワークの問題が原因で発生します。"",
+        ""ERROR_UPLOAD_31D"": ""現在転送中のファイルが多すぎます。転送が完了するのを待ってからやり直してください。"",
+        ""ERROR_UPLOAD_DEFAULT"": ""Guacamoleサーバ内で内部エラーが発生し、接続が終了しました。それでも問題が解決しない場合、システム管理者に連絡するか、システムログを確認してください。"",
+
+        ""HELP_CLIPBOARD"": ""Guacamole内でコピー/カットされたテキストがここに表示されます。以下のテキストを変更するとリモートクリップボードに影響します。 "",
+        ""HELP_INPUT_METHOD_NONE"": ""入力方法は指定されていません。キーボード入力は接続された物理的なキーボードから受け付けられます。 "",
+        ""HELP_INPUT_METHOD_OSK"": ""内蔵のGuacamoleオンスクリーンキーボードからの入力を表示し、受け入れます。オンスクリーンキーボードを使用すると、不可能な場合もあるキーの組み合わせを入力できます（Ctrl-Alt-Delなど）。"",
+        ""HELP_INPUT_METHOD_TEXT"": ""テキストの入力を許可し、入力されたテキストに基づいてキーボードイベントをエミュレートします。これはスマートフォンのような物理的なキーボードがない機器に必要です。 "",
+        ""HELP_MOUSE_MODE"": ""タッチに対するリモートマウスの動作を決定します。 "",
+        ""HELP_MOUSE_MODE_ABSOLUTE"": ""タッチによってクリックを行います。タッチの位置でクリックしたとみなされます。 "",
+        ""HELP_MOUSE_MODE_RELATIVE"": ""マウスポインタをドラッグしてからクリックします。マウスポインタの位置でクリックしたとみなされます。 "",
+        ""HELP_SHARE_LINK"": ""現在の接続は共有されており、次の{LINKS、multiple、one {link} other {links}}を持つ人なら誰でもアクセスできます:"",
+
+        ""INFO_CONNECTION_SHARED"": ""この接続は現在共有されています。"",
+        ""INFO_NO_FILE_TRANSFERS"": ""ファイル転送はありません。"",
+
+
+        ""NAME_INPUT_METHOD_NONE""   : ""なし"",
+        ""NAME_INPUT_METHOD_OSK""    : ""オンスクリーンキーボード"",
+        ""NAME_INPUT_METHOD_TEXT""   : ""テキストインプット"",
+        ""NAME_MOUSE_MODE_ABSOLUTE"" : ""タッチスクリーン"",
+        ""NAME_MOUSE_MODE_RELATIVE"" : ""タッチパッド"",
+
+        ""SECTION_HEADER_CLIPBOARD""      : ""クリップボード"",
+        ""SECTION_HEADER_DEVICES""        : ""デバイス"",
+        ""SECTION_HEADER_DISPLAY""        : ""ディスプレイ"",
+        ""SECTION_HEADER_FILE_TRANSFERS"" : ""ファイル転送"",
+        ""SECTION_HEADER_INPUT_METHOD""   : ""インプットメソッド"",
+        ""SECTION_HEADER_MOUSE_MODE""     : ""マウスエミュレートモード"",
+
+        ""TEXT_ZOOM_AUTO_FIT""              : ""自動的にブラウザのサイズに合わせる"",
+        ""TEXT_CLIENT_STATUS_IDLE""         : ""アイドル状態."",
+        ""TEXT_CLIENT_STATUS_CONNECTING""   : ""Guacamoleサーバに接続しています..."",
+        ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""切断されました。"",
+        ""TEXT_CLIENT_STATUS_UNSTABLE""     : ""Guacamoleサーバへのネットワーク接続が不安定です。"",
+        ""TEXT_CLIENT_STATUS_WAITING""      : ""Guacamoleサーバに接続しました。応答を待っています"",
+        ""TEXT_RECONNECT_COUNTDOWN""        : ""再接続しています... {REMAINING} {REMAINING, plural, one{second} other{seconds}}...""","[{'comment': 'Here, as well, the pluralized part is English. If there are seven seconds left, for example, this would produce:\r\n\r\n> 再接続しています... 7 seconds...\r\n\r\nIs this intentional?', 'commenter': 'mike-jumper'}, {'comment': 'YES! \r\nHere, ""s"" is added because it is in English as it is not translated into Japanese.', 'commenter': 'dg-hasimoto'}]"
419,guacamole/src/main/webapp/app/login/directives/login.js,"@@ -188,17 +190,36 @@ angular.module('login').directive('guacLogin', [function guacLogin() {
 
                     // Clear all remaining fields that are not username fields
                     angular.forEach($scope.remainingFields, function clearEnteredValueIfPassword(field) {
-
+                        
                         // If field is not username field, delete it.
                         if (field.type !== Field.Type.USERNAME && field.name in $scope.enteredValues)
                             delete $scope.enteredValues[field.name];
-
+                        
                     });
+
                 }
 
             }));
 
         };
+        
+        /**
+         * Returns the field most relevant to the user given the current state
+         * of the login process. This will normally be the first empty field.
+         *
+         * @return {Field}
+         */","[{'comment': 'Missing documentation for the return value.', 'commenter': 'mike-jumper'}, {'comment': '> Update: Added the two pieces of documentation requested above.\r\n\r\nI see the new documentation for `$scope.relevantField`, but this return value still appears undocumented.', 'commenter': 'mike-jumper'}]"
419,guacamole/src/main/webapp/app/login/directives/login.js,"@@ -137,13 +137,15 @@ angular.module('login').directive('guacLogin', [function guacLogin() {
             $scope.remainingFields = fields.filter(function isRemaining(field) {
                 return !(field.name in $scope.values);
             });
-
+            
             // Set default values for all unset fields
             angular.forEach($scope.remainingFields, function setDefault(field) {
                 if (!$scope.enteredValues[field.name])
                     $scope.enteredValues[field.name] = '';
             });
 
+            $scope.relevantField = getRelevantField();","[{'comment': ""Properties which will be set on the scope need to be documented, just as functions, objects, etc. This is done through assigning an initial value to the property earlier in the directive/controller and using that assignment as the location for the property's JSDoc:\r\n\r\nFor example:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/829aac98c7c6b04140d97c17be7347039a93ef11/guacamole/src/main/webapp/app/login/directives/login.js#L74-L93\r\n"", 'commenter': 'mike-jumper'}]"
419,guacamole/src/main/webapp/app/login/directives/login.js,"@@ -102,6 +102,13 @@ angular.module('login').directive('guacLogin', [function guacLogin() {
          */
         $scope.submitted = false;
 
+        /**
+         * The field that needs to be focused","[{'comment': ""JSDoc comments need to end with a period.\r\n\r\n> The field that needs to be focused\r\n\r\nThis feels too tightly coupled to the actual internal implementation. It is ultimately used to focus a field, yes, but I don't think this level of things should be aware of that. The property is named nicely based on its high-level use: `relevantField`. Is there a better way to phrase this which captures that high-level intent?"", 'commenter': 'mike-jumper'}]"
419,guacamole/src/main/webapp/app/login/directives/login.js,"@@ -102,6 +102,13 @@ angular.module('login').directive('guacLogin', [function guacLogin() {
          */
         $scope.submitted = false;
 
+        /**
+         * The field that needs to be focused
+         *
+         * @type Field
+         */
+        $scope.relevantField = {};","[{'comment': ""`{}` is not a `Field` and will also fail simple tests for whether the value has been set (`{}` is truthy). If you're looking for a default value prior to actual assignment later, `null` would be a better choice."", 'commenter': 'mike-jumper'}]"
419,guacamole/src/main/webapp/app/login/directives/login.js,"@@ -188,17 +197,38 @@ angular.module('login').directive('guacLogin', [function guacLogin() {
 
                     // Clear all remaining fields that are not username fields
                     angular.forEach($scope.remainingFields, function clearEnteredValueIfPassword(field) {
-
+                        
                         // If field is not username field, delete it.
                         if (field.type !== Field.Type.USERNAME && field.name in $scope.enteredValues)
                             delete $scope.enteredValues[field.name];
-
+                        
                     });
+
                 }
 
             }));
 
         };
+        
+        /**
+         * Returns the field most relevant to the user given the current state
+         * of the login process. This will normally be the first empty field.
+         *
+         * @return {Field}
+         *     A field object if an incorrect ligin is attempted, null if no","[{'comment': '""ligin""\r\n\r\nTypo aside, what does this function have to do with incorrect login? This function looks only at the current state of the login process - what values have been entered, what values remain, etc. It isn\'t aware of whether login was incorrect.\r\n\r\nI\'d also like to point out that ""a field object"" doesn\'t provide much more information beyond what is already given by `@return {Field}`. The documentation for the function itself covers this, but the documentation for the return value should also.', 'commenter': 'mike-jumper'}]"
419,guacamole/src/main/webapp/app/form/templates/timeZoneField.html,"@@ -3,12 +3,14 @@
     <!-- Available time zone regions -->
     <select class=""time-zone-region""
             ng-disabled=""disabled""
+            guac-focus=""focused""   
             ng-model=""region""
             ng-options=""name for name in regions | orderBy: name""></select>
 
     <!-- Time zones within selected region -->
     <select class=""time-zone""
             ng-disabled=""disabled || !region""
+            guac-focus=""focused""","[{'comment': 'Having `guac-focus=""focused""` for both `<select>` fields doesn\'t make sense, as you can only have one field focused at a time. What is the intended effect?', 'commenter': 'mike-jumper'}, {'comment': 'What you point out is indeed correct and there was no legit reasoning behind this besides the fact that I was applying this `guac-focus` on every field template out there. I will make appropriate changes based on actual reasoning this time around.', 'commenter': 'm-khan-glyptodon'}, {'comment': 'The new approach that I believe is suitable for this field is to have the `guac-focus` directive applied only to the ""time-zone-region"" and there are a few reasons why I believe it is the right to do.\r\n1. In most cases, it is impossible to determine which part of the field is relevant so it makes sense to naturally focus the beginning of this field.\r\n2. Also, the ""time-zone"" field is disabled until some content is selected in the ""time-zone-region"". Because of this dependency, I think it is best to focus the field that does not depend on the other.\r\n3. And last but not the least, it is simple.', 'commenter': 'm-khan-glyptodon'}, {'comment': 'Sure. Focusing just the first `<select>` makes sense to me.', 'commenter': 'mike-jumper'}]"
419,guacamole/src/main/webapp/app/login/directives/login.js,"@@ -188,17 +197,37 @@ angular.module('login').directive('guacLogin', [function guacLogin() {
 
                     // Clear all remaining fields that are not username fields
                     angular.forEach($scope.remainingFields, function clearEnteredValueIfPassword(field) {
-
+                        
                         // If field is not username field, delete it.
                         if (field.type !== Field.Type.USERNAME && field.name in $scope.enteredValues)
                             delete $scope.enteredValues[field.name];
-
+                        
                     });
+
                 }
 
             }));
 
         };
+        
+        /**
+         * Returns the field most relevant to the user given the current state
+         * of the login process. This will normally be the first empty field.
+         *
+         * @return {Field}
+         *     A field most relevant, null if no relevant field exist.","[{'comment': '> A field most relevant\r\n\r\nDo you mean ""the field most relevant?""\r\n\r\n> null if no relevant field exist.\r\n\r\nIs this the case? My reading of the logic is that it will return null if all fields appear equally relevant (ie: there is no single ""most relevant"" field), not necessarily that are absolutely no relevant fields whatsoever. In fact, for the login process, it\'s more likely that all fields are relevant; it\'s a question of degrees.', 'commenter': 'mike-jumper'}]"
419,guacamole/src/main/webapp/app/login/directives/login.js,"@@ -188,17 +197,37 @@ angular.module('login').directive('guacLogin', [function guacLogin() {
 
                     // Clear all remaining fields that are not username fields
                     angular.forEach($scope.remainingFields, function clearEnteredValueIfPassword(field) {
-
+                        
                         // If field is not username field, delete it.
                         if (field.type !== Field.Type.USERNAME && field.name in $scope.enteredValues)
                             delete $scope.enteredValues[field.name];
-
+                        
                     });
+","[{'comment': ""Not a deal-breaker, but if you can, I suggest rebasing away these whitespace changes. I'm not sure where they came from, but they don't appear related to the changes."", 'commenter': 'mike-jumper'}, {'comment': ""> Unneeded whitespaces removed\r\n\r\nIt's partly fixed, yes, but the two instances of added whitespace above (lines 204 and 206) are still here."", 'commenter': 'mike-jumper'}]"
422,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/group/UserGroupService.java,"@@ -165,14 +165,44 @@ private String getGroupSearchFilter() throws GuacamoleException {
         if (groupBaseDN == null)
             return Collections.emptyList();
 
+        // memberAttribute specified in properties could contain DN or username 
+        String memberAttributeType = confService.getMemberAttributeType();
+        String userID = userDN;
+        switch (memberAttributeType) {","[{'comment': 'Might be worth doing a new `enum` type for this and a `GuacamoleProperty` that validates it.', 'commenter': 'necouchman'}, {'comment': 'Looks much better with the `enum`, here, but, now I think we can probably get rid of the `switch()` statement, no?  Based on the way the logic is constructed, here, I think you can just do the `String userID = userDN;` assignment, and then do a `if (memberAttributeType == MemberAttributeType.UID)` with and re-assign as necessary?', 'commenter': 'necouchman'}]"
422,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -396,4 +396,21 @@ public String getMemberAttribute() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns a string indicating the type of data contained in the LDAP","[{'comment': 'No longer returns a `String` - is now a `MemberAttributeType`', 'commenter': 'necouchman'}]"
422,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ConfigurationService.java,"@@ -396,4 +396,21 @@ public String getMemberAttribute() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns a string indicating the type of data contained in the LDAP
+     * attribute used to enumerate members in a group, ""dn"" by default.
+     *
+     * @return
+     *     The type of data contained in the LDAP attribute used to enumerate
+     *     members in a group, as configured in guacamole.properties
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties connect be parsed.","[{'comment': 'connect -> cannot', 'commenter': 'necouchman'}, {'comment': '... also copypasta, from getMemberAttribute()', 'commenter': 'mlewissmith'}]"
422,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/MemberAttributeTypeProperty.java,"@@ -0,0 +1,53 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.properties.GuacamoleProperty;
+
+/**
+ * A GuacamoleProperty whose value is a MemberAttributeType. The possible
+ * strings ""dn"" or ""uid"" are mapped to their values as a MemberAttributeType
+ * enum.  Anything else results in a parse error.
+ */
+public abstract class MemberAttributeTypeProperty implements GuacamoleProperty<MemberAttributeType> {
+
+    @Override
+    public MemberAttributeType parseValue(String value) throws GuacamoleException {
+
+        // If no value provided, return null.
+        if (value == null)
+            return null;
+
+        // dn
+        if (value.equals(""dn""))
+            return MemberAttributeType.DN;
+
+        // uid
+        if (value.equals(""uid""))
+            return MemberAttributeType.UID;
+
+        // The provided value is not legal
+        throw new GuacamoleServerException(""Encryption method must be one of \""dn\"" or \""uid\""."");","[{'comment': 'Copypasta, I think - this is not the encryption method ;-).', 'commenter': 'necouchman'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -605,39 +784,68 @@
 
         ""FORMAT_DATE"" : ""@:APP.FORMAT_DATE_TIME_PRECISE"",
 
-        ""HELP_USERS"" : ""Klicke oder Tippe auf einen Benutzer um diesen zu verwalten. Abhänig von Ihrer Zugriffsebene können Benutzer hinzugefügt, gelöscht bzw. dessen Passwort geändert werden."",
+        ""HELP_USERS"" : ""Klicke oder tippe unten auf einen Benutzer, um diesen zu verwalten. Abhängig von der Berechtigung können Benutzer hinzugefügt und gelöscht sowie ihre Kennwörter geändert werden."",
 
         ""SECTION_HEADER_USERS""       : ""Benutzer"",
 
-        ""TABLE_HEADER_USERNAME"" : ""Benutzername""
+        ""TABLE_HEADER_LAST_ACTIVE"" : ""Letzte Aktivität"",
+        ""TABLE_HEADER_USERNAME""    : ""Benutzername""
 
     },
-    
+
+    ""SETTINGS_USER_GROUPS"" : {
+
+        ""ACTION_ACKNOWLEDGE""    : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_NEW_USER_GROUP"" : ""Neue Gruppe"",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""FORMAT_DATE"" : ""@:APP.FORMAT_DATE_TIME_PRECISE"",
+
+        ""HELP_USER_GROUPS"" : ""Klicke oder tippe auf eine der folgenden Gruppen, um diese zu verwalten. Abhängig von der Berechtigung können Gruppen hinzugefügt und gelöscht sowie deren Benutzer und Gruppen geändert werden."",
+
+        ""SECTION_HEADER_USER_GROUPS"" : ""Gruppen"",
+
+        ""TABLE_HEADER_USER_GROUP_NAME"" : ""Gruppenname""
+
+    },
+
     ""SETTINGS_SESSIONS"" : {
         
         ""ACTION_ACKNOWLEDGE"" : ""@:APP.ACTION_ACKNOWLEDGE"",
         ""ACTION_CANCEL""      : ""@:APP.ACTION_CANCEL"",
-        ""ACTION_DELETE""      : ""Beende Sitzung"",
+        ""ACTION_DELETE""      : ""Sitzungen beenden"",
         
-        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Beende Sitzung"",
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Sitzungen beenden"",
         ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
         
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
         
         ""FORMAT_STARTDATE"" : ""@:APP.FORMAT_DATE_TIME_PRECISE"",
 
-        ""HELP_SESSIONS"" : ""Diese Seite wird mit derzeit aktiven Verbindungen gefüllt. Die aufgelisteten Verbindungen und die Möglichkeit, diese Verbindungen zu beenden, hängen von Ihrer Zugriffsebene ab. Wenn Sie eine oder mehrere Sitzungen beenden wollen, wählen Sie diese Sitzung durch Aktivierung der nebenstehende Box und klicken auf \""Beende Sitzung\"". Beendung einer Sitzung trennt den Benutzer von dessen Verbindung unverzüglich."",
+        ""HELP_SESSIONS"" : ""Auf dieser Seite werden alle aktvie Verbindungen aufgelistet. Die aufgelisteten Verbindungen beenden zu können, hängt von deiner Berechtigung ab. Wenn du eine oder mehrere Sitzungen beenden möchtest, aktiviere das Kontrollkästchen neben diesen Sitzungen und klicke auf \""Sitzungen beenden\"". Durch das Beenden einer Sitzung wird der Benutzer sofort von der zugeordneten Verbindung getrennt."",","[{'comment': 'Should this read ""alle **aktive** Verbindungen""?', 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -514,46 +688,51 @@
 
     },
 
-    ""SETTINGS_CONNECTIONS"" : {
-
-        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
-        ""ACTION_NEW_CONNECTION""       : ""Neue Verbindung"",
-        ""ACTION_NEW_CONNECTION_GROUP"" : ""Neue Verbindungsgruppe"",
-
-        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
-
-        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
-
-        ""HELP_CONNECTIONS""   : ""Klicke oder Tippe auf eine Verbindung um diese zu verwalten. Abhänig von Ihrer Zugriffsebene können Verbindungen hinzugefügt, gelöscht oder Parameter (Protokol, Hostname, Port, etc.) geändert werden."",
-        
-        ""INFO_ACTIVE_USER_COUNT"" : ""@:APP.INFO_ACTIVE_USER_COUNT"",
-
-        ""SECTION_HEADER_CONNECTIONS""     : ""Verbindungen""
-
-    },
-
     ""SETTINGS_CONNECTION_HISTORY"" : {
 
-        ""ACTION_SEARCH"" : ""@:APP.ACTION_SEARCH"",
+        ""ACTION_DOWNLOAD"" : ""@:APP.ACTION_DOWNLOAD"",
+        ""ACTION_SEARCH""   : ""@:APP.ACTION_SEARCH"",
 
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""FILENAME_HISTORY_CSV"" : ""history.csv"",
+
         ""FORMAT_DATE"" : ""@:APP.FORMAT_DATE_TIME_PRECISE"",
 
-        ""HELP_CONNECTION_HISTORY"" : ""Die letzten Verbindungen werden hier historisch aufgelistet und können durch Klicken auf die Spaltenüberschriften sortiert werden. Zum Aufsuchen von bestimmten Datensätzen, geben Sie eine Filterzeichenfolge ein und klicken Sie auf \""Suchen\"". Nur Datensätze, die die vorgesehenen Filterzeichenfolge entsprechen, werden aufgelistet."",
+        ""HELP_CONNECTION_HISTORY"" : ""Verlaufseinträge für frühere Verbindungen werden hier aufgelistet und können durch das Anlicken der Spaltenüberschriften sortiert werden. Um nach bestimmten Datensätzen zu suchen, geben Sie eine Zzeichenfolge ein und klicken Sie auf \""Suchen\"". Es werden nur Datensätze aufgelistet, die mit der angegebenen Zeichenfolge übereinstimmen."",","[{'comment': 'Zeichenfolge*', 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -448,47 +602,66 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY""          : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+
         ""NAME"" : ""Telnet"",
 
         ""SECTION_HEADER_AUTHENTICATION"" : ""Authentifizierung"",
-        ""SECTION_HEADER_CLIPBOARD""      : ""Zwischenablage"",
-        ""SECTION_HEADER_DISPLAY""        : ""Bildschirm"",
+        ""SECTION_HEADER_BEHAVIOR""       : ""Terminal-Verhalten"",
+        ""SECTION_HEADER_DISPLAY""        : ""Anzeige"",
+        ""SECTION_HEADER_RECORDING""      : ""Bildschirmaufnahme"",
+        ""SECTION_HEADER_TYPESCRIPT""     : ""Typescript (Textsitzungsaufzeichnung)"",
         ""SECTION_HEADER_NETWORK""        : ""Netzwerk""
 
     },
 
     ""PROTOCOL_VNC"" : {
 
-        ""FIELD_HEADER_AUDIO_SERVERNAME"" : ""Audioservername:"",
+        ""FIELD_HEADER_AUDIO_SERVERNAME"" : ""Name des Audioservers:"",
         ""FIELD_HEADER_CLIPBOARD_ENCODING"" : ""Codierung:"",
         ""FIELD_HEADER_COLOR_DEPTH""      : ""Farbtiefe:"",
-        ""FIELD_HEADER_CURSOR""           : ""Cursor:"",
-        ""FIELD_HEADER_DEST_HOST""        : ""Ziel Host:"",
-        ""FIELD_HEADER_DEST_PORT""        : ""Ziel Port:"",
-        ""FIELD_HEADER_ENABLE_AUDIO""     : ""Aktiviere Audio:"",
-        ""FIELD_HEADER_ENABLE_SFTP""      : ""Aktiviere SFTP:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Aufnahmepfad automatisch erstellen:"",
+        ""FIELD_HEADER_CURSOR""           : ""Mauszeiger:"",
+        ""FIELD_HEADER_DEST_HOST""        : ""Zielhost:"",
+        ""FIELD_HEADER_DEST_PORT""        : ""Zielport:"",
+        ""FIELD_HEADER_ENABLE_AUDIO""     : ""Audio aktivieren:"",
+        ""FIELD_HEADER_ENABLE_SFTP""      : ""SFTP aktivieren:"",
         ""FIELD_HEADER_HOSTNAME""         : ""Hostname:"",
         ""FIELD_HEADER_PASSWORD""         : ""Passwort:"",
         ""FIELD_HEADER_PORT""             : ""Port:"",
-        ""FIELD_HEADER_READ_ONLY""        : ""Nur-Lesen:"",
-        ""FIELD_HEADER_SFTP_DIRECTORY""   : ""Standard-Upload-Verzeichnis:"",
-        ""FIELD_HEADER_SFTP_HOSTNAME""    : ""Hostname:"",
-        ""FIELD_HEADER_SFTP_PASSPHRASE""  : ""Passphrase:"",
-        ""FIELD_HEADER_SFTP_PASSWORD""    : ""Passwort:"",
-        ""FIELD_HEADER_SFTP_PORT""        : ""Port:"",
-        ""FIELD_HEADER_SFTP_PRIVATE_KEY"" : ""Privater Schlüssel:"",
-        ""FIELD_HEADER_SFTP_USERNAME""    : ""Benutzername:"",
+        ""FIELD_HEADER_READ_ONLY""        : ""Schreibgeschützt:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""Maus ausschließen:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""Grafiken / Streams ausschließen:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : "">Include key events:"",
+        ""FIELD_HEADER_RECORDING_NAME"" : ""Name der Aufnahme:"",
+        ""FIELD_HEADER_RECORDING_PATH"" : ""Aufnahmepfad:"",
+        ""FIELD_HEADER_SFTP_DIRECTORY""             : ""Standard-Upload-Verzeichnis:"",
+        ""FIELD_HEADER_SFTP_HOST_KEY""              : ""Öffentlicher Hostschlüssel (Base64):"",
+        ""FIELD_HEADER_SFTP_HOSTNAME""              : ""Hostname:"",
+        ""FIELD_HEADER_SFTP_SERVER_ALIVE_INTERVAL"" : ""SFTP Keepalive Intervall:"",
+        ""FIELD_HEADER_SFTP_PASSPHRASE""            : ""Passphrase:"",
+        ""FIELD_HEADER_SFTP_PASSWORD""              : ""Passwort:"",
+        ""FIELD_HEADER_SFTP_PORT""                  : ""Port:"",
+        ""FIELD_HEADER_SFTP_PRIVATE_KEY""           : ""Privater Schlüssel:"",
+        ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""        : ""Dateibrowser Stammverzeichnis:"",
+        ""FIELD_HEADER_SFTP_USERNAME""              : ""Benutzername:"",
         ""FIELD_HEADER_SWAP_RED_BLUE""    : ""Vertausche rot/blau Komponenten:"",
 
         ""FIELD_OPTION_COLOR_DEPTH_8""     : ""256 Farben"",
-        ""FIELD_OPTION_COLOR_DEPTH_16""    : ""Hohe Farbtiefe (16-bit)"",
-        ""FIELD_OPTION_COLOR_DEPTH_24""    : ""Echfarben (24-bit)"",
-        ""FIELD_OPTION_COLOR_DEPTH_32""    : ""Echfarben (32-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_16""    : ""Geringe Farben(16-bit)"",","[{'comment': 'Missing space between ""Farben"" and ""(16-bit)"".', 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -448,47 +602,66 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY""          : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+
         ""NAME"" : ""Telnet"",
 
         ""SECTION_HEADER_AUTHENTICATION"" : ""Authentifizierung"",
-        ""SECTION_HEADER_CLIPBOARD""      : ""Zwischenablage"",
-        ""SECTION_HEADER_DISPLAY""        : ""Bildschirm"",
+        ""SECTION_HEADER_BEHAVIOR""       : ""Terminal-Verhalten"",
+        ""SECTION_HEADER_DISPLAY""        : ""Anzeige"",
+        ""SECTION_HEADER_RECORDING""      : ""Bildschirmaufnahme"",
+        ""SECTION_HEADER_TYPESCRIPT""     : ""Typescript (Textsitzungsaufzeichnung)"",
         ""SECTION_HEADER_NETWORK""        : ""Netzwerk""
 
     },
 
     ""PROTOCOL_VNC"" : {
 
-        ""FIELD_HEADER_AUDIO_SERVERNAME"" : ""Audioservername:"",
+        ""FIELD_HEADER_AUDIO_SERVERNAME"" : ""Name des Audioservers:"",
         ""FIELD_HEADER_CLIPBOARD_ENCODING"" : ""Codierung:"",
         ""FIELD_HEADER_COLOR_DEPTH""      : ""Farbtiefe:"",
-        ""FIELD_HEADER_CURSOR""           : ""Cursor:"",
-        ""FIELD_HEADER_DEST_HOST""        : ""Ziel Host:"",
-        ""FIELD_HEADER_DEST_PORT""        : ""Ziel Port:"",
-        ""FIELD_HEADER_ENABLE_AUDIO""     : ""Aktiviere Audio:"",
-        ""FIELD_HEADER_ENABLE_SFTP""      : ""Aktiviere SFTP:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Aufnahmepfad automatisch erstellen:"",
+        ""FIELD_HEADER_CURSOR""           : ""Mauszeiger:"",
+        ""FIELD_HEADER_DEST_HOST""        : ""Zielhost:"",
+        ""FIELD_HEADER_DEST_PORT""        : ""Zielport:"",
+        ""FIELD_HEADER_ENABLE_AUDIO""     : ""Audio aktivieren:"",
+        ""FIELD_HEADER_ENABLE_SFTP""      : ""SFTP aktivieren:"",
         ""FIELD_HEADER_HOSTNAME""         : ""Hostname:"",
         ""FIELD_HEADER_PASSWORD""         : ""Passwort:"",
         ""FIELD_HEADER_PORT""             : ""Port:"",
-        ""FIELD_HEADER_READ_ONLY""        : ""Nur-Lesen:"",
-        ""FIELD_HEADER_SFTP_DIRECTORY""   : ""Standard-Upload-Verzeichnis:"",
-        ""FIELD_HEADER_SFTP_HOSTNAME""    : ""Hostname:"",
-        ""FIELD_HEADER_SFTP_PASSPHRASE""  : ""Passphrase:"",
-        ""FIELD_HEADER_SFTP_PASSWORD""    : ""Passwort:"",
-        ""FIELD_HEADER_SFTP_PORT""        : ""Port:"",
-        ""FIELD_HEADER_SFTP_PRIVATE_KEY"" : ""Privater Schlüssel:"",
-        ""FIELD_HEADER_SFTP_USERNAME""    : ""Benutzername:"",
+        ""FIELD_HEADER_READ_ONLY""        : ""Schreibgeschützt:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""Maus ausschließen:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""Grafiken / Streams ausschließen:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : "">Include key events:"",
+        ""FIELD_HEADER_RECORDING_NAME"" : ""Name der Aufnahme:"",
+        ""FIELD_HEADER_RECORDING_PATH"" : ""Aufnahmepfad:"",
+        ""FIELD_HEADER_SFTP_DIRECTORY""             : ""Standard-Upload-Verzeichnis:"",
+        ""FIELD_HEADER_SFTP_HOST_KEY""              : ""Öffentlicher Hostschlüssel (Base64):"",
+        ""FIELD_HEADER_SFTP_HOSTNAME""              : ""Hostname:"",
+        ""FIELD_HEADER_SFTP_SERVER_ALIVE_INTERVAL"" : ""SFTP Keepalive Intervall:"",
+        ""FIELD_HEADER_SFTP_PASSPHRASE""            : ""Passphrase:"",
+        ""FIELD_HEADER_SFTP_PASSWORD""              : ""Passwort:"",
+        ""FIELD_HEADER_SFTP_PORT""                  : ""Port:"",
+        ""FIELD_HEADER_SFTP_PRIVATE_KEY""           : ""Privater Schlüssel:"",
+        ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""        : ""Dateibrowser Stammverzeichnis:"",
+        ""FIELD_HEADER_SFTP_USERNAME""              : ""Benutzername:"",
         ""FIELD_HEADER_SWAP_RED_BLUE""    : ""Vertausche rot/blau Komponenten:"",
 
         ""FIELD_OPTION_COLOR_DEPTH_8""     : ""256 Farben"",
-        ""FIELD_OPTION_COLOR_DEPTH_16""    : ""Hohe Farbtiefe (16-bit)"",
-        ""FIELD_OPTION_COLOR_DEPTH_24""    : ""Echfarben (24-bit)"",
-        ""FIELD_OPTION_COLOR_DEPTH_32""    : ""Echfarben (32-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_16""    : ""Geringe Farben(16-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_24""    : ""Echte Farben (24-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_32""    : ""Echte Farben(32-bit)"",","[{'comment': 'Same here: missing space between ""Farben"" and ""(32-bit)"".', 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -448,47 +602,66 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY""          : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+
         ""NAME"" : ""Telnet"",
 
         ""SECTION_HEADER_AUTHENTICATION"" : ""Authentifizierung"",
-        ""SECTION_HEADER_CLIPBOARD""      : ""Zwischenablage"",","[{'comment': 'Why is `SECTION_HEADER_CLIPBOARD` being removed?', 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -448,47 +602,66 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY""          : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+
         ""NAME"" : ""Telnet"",
 
         ""SECTION_HEADER_AUTHENTICATION"" : ""Authentifizierung"",
-        ""SECTION_HEADER_CLIPBOARD""      : ""Zwischenablage"",
-        ""SECTION_HEADER_DISPLAY""        : ""Bildschirm"",
+        ""SECTION_HEADER_BEHAVIOR""       : ""Terminal-Verhalten"",
+        ""SECTION_HEADER_DISPLAY""        : ""Anzeige"",","[{'comment': 'Out of curiosity, why ""Anzeige"" vs. ""Bildshirm""?', 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -403,28 +532,53 @@
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
 
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY""          : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+
         ""NAME"" : ""SSH"",
 
         ""SECTION_HEADER_AUTHENTICATION"" : ""Authentifizierung"",
-        ""SECTION_HEADER_CLIPBOARD""      : ""Zwischenablage"",","[{'comment': ""Here, as well - `SECTION_HEADER_CLIPBOARD` probably shouldn't be removed. It's a legitimate translation string."", 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -257,129 +285,230 @@
         ""ACTION_DELETE""        : ""@:APP.ACTION_DELETE"",
         ""ACTION_SAVE""          : ""@:APP.ACTION_SAVE"",
 
-        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Lösche Benutzer"",
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Benutzer löschen"",
         ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
 
         ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
 
         ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""Administration:"",
-        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Ändere eigenes Passwort:"",
-        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Erstelle neue Benutzer:"",
-        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""Erstelle neue Verbindung:"",
-        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""Erstelle neue Verbindungsgruppe:"",
+        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Eigenes Passwort ändern:"",
+        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Neuer Benutzer:"",
+        ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""Neue Benutzergruppen erstellen:"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""Neue Verbindungen erstellen:"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""Neue Verbindungsgruppen erstellen:"",
+        ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""Neues Freigabeprofil erstellen:"",
         ""FIELD_HEADER_PASSWORD""                      : ""@:APP.FIELD_HEADER_PASSWORD"",
         ""FIELD_HEADER_PASSWORD_AGAIN""                : ""@:APP.FIELD_HEADER_PASSWORD_AGAIN"",
         ""FIELD_HEADER_USERNAME""                      : ""Benutzername:"",
-        
+
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
-        ""INFO_READ_ONLY"" : ""Dieses Benutzerkonto kann nicht bearbeitet werden."",
-        
-        ""SECTION_HEADER_CONNECTIONS"" : ""Verbindungen"",
-        ""SECTION_HEADER_EDIT_USER""   : ""Ändere Benutzer"",
-        ""SECTION_HEADER_PERMISSIONS"" : ""Berechtigungen"",
+        ""HELP_NO_USER_GROUPS"" : ""Dieser Benutzer gehört derzeit keiner Gruppe an. Erweitere diesen Abschnitt, um Gruppen hinzuzufügen."",
+
+        ""INFO_READ_ONLY""                : ""Dieses Benutzerkonto kann nicht bearbeitet werden."",
+		""INFO_NO_USER_GROUPS_AVAILABLE"" : ""Keine Gruppen vorhanden."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""Alle Verbindungen"",
+        ""SECTION_HEADER_CONNECTIONS""         : ""Verbindungen"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""Aktuelle Verbindungen"",
+        ""SECTION_HEADER_EDIT_USER""           : ""Benutzer bearbeiten"",
+        ""SECTION_HEADER_PERMISSIONS""         : ""Berechtigungen"",
+        ""SECTION_HEADER_USER_GROUPS""         : ""Gruppen"",
 
-        ""TEXT_CONFIRM_DELETE"" : ""Dieser Löschvorgang ist unumkehrbar. Soll dieser Benutzer wirklich gelöscht werden?""
+        ""TEXT_CONFIRM_DELETE"" : ""Benutzer können nach dem Löschen nicht wiederhergestellt werden. Möchten Sie diesen Benutzer wirklich löschen?""
+
+    },
+
+    ""MANAGE_USER_GROUP"" : {
+
+        ""ACTION_ACKNOWLEDGE""   : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CANCEL""        : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLONE""         : ""@:APP.ACTION_CLONE"",
+        ""ACTION_DELETE""        : ""@:APP.ACTION_DELETE"",
+        ""ACTION_SAVE""          : ""@:APP.ACTION_SAVE"",
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Gruppe löschen"",
+        ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""@:MANAGE_USER.FIELD_HEADER_ADMINISTER_SYSTEM"",
+        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""@:MANAGE_USER.FIELD_HEADER_CHANGE_OWN_PASSWORD"",
+        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_USERS"",
+        ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_USER_GROUPS"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_CONNECTIONS"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS"",
+        ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_SHARING_PROFILES"",
+        ""FIELD_HEADER_USER_GROUP_NAME""               : ""Name der Gruppe:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HELP_NO_USER_GROUPS""        : ""Diese Gruppe gehört derzeit keiner Gruppe an. Erweitere den diesen Abschnitt, um Gruppen hinzuzufügen."",
+        ""HELP_NO_MEMBER_USER_GROUPS"" : ""Diese Gruppe enthält derzeit keine Gruppen. Erweitere diesen Abschnitt, um eine Gruppen hinzuzufügen."",
+        ""HELP_NO_MEMBER_USERS""       : ""Diese Gruppe enthält derzeit keine Benutzer. Erweitere diesen Abschnitt, um einen Benutzer hinzuzufügen."",
+
+        ""INFO_READ_ONLY""                : ""Diese Gruppe kann leider nicht bearbeitet werden."",
+        ""INFO_NO_USER_GROUPS_AVAILABLE"" : ""@:MANAGE_USER.INFO_NO_USER_GROUPS_AVAILABLE"",
+        ""INFO_NO_USERS_AVAILABLE""       : ""Keine Benutzer verfügbar."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""@:MANAGE_USER.SECTION_HEADER_ALL_CONNECTIONS"",
+        ""SECTION_HEADER_CONNECTIONS""         : ""@:MANAGE_USER.SECTION_HEADER_CONNECTIONS"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""@:MANAGE_USER.SECTION_HEADER_CURRENT_CONNECTIONS"",
+        ""SECTION_HEADER_EDIT_USER_GROUP""     : ""Gruppe bearbeiten"",
+        ""SECTION_HEADER_MEMBER_USERS""        : ""Mitglieder (Benutzer) dieser Gruppe"",
+        ""SECTION_HEADER_MEMBER_USER_GROUPS""  : ""Mitglieder (Gruppen) dieser Gruppe"",
+        ""SECTION_HEADER_PERMISSIONS""         : ""@:MANAGE_USER.SECTION_HEADER_PERMISSIONS"",
+        ""SECTION_HEADER_USER_GROUPS""         : ""Übergeordnete Gruppen"",
+
+        ""TEXT_CONFIRM_DELETE"" : ""Gruppen können nach dem Löschen nicht wiederhergestellt werden. Möchten Sie diese Gruppe wirklich löschen?""
 
     },
     
     ""PROTOCOL_RDP"" : {
 
-        ""FIELD_HEADER_CLIENT_NAME""     : ""Client-Name:"",
+        ""FIELD_HEADER_CLIENT_NAME""     : ""Rechnername:"",
         ""FIELD_HEADER_COLOR_DEPTH""     : ""Farbtiefe:"",
-        ""FIELD_HEADER_CONSOLE""         : ""Mit Konsole verbinden (Windows 2003 / 2003 R2):"",
-        ""FIELD_HEADER_CONSOLE_AUDIO""   : ""Audiounterstützung Konsole:"",
-        ""FIELD_HEADER_CREATE_DRIVE_PATH"" : ""Erstellen Sie automatisch Laufwerk:"",
-        ""FIELD_HEADER_DISABLE_AUDIO""   : ""Deaktivere Audio:"",
-        ""FIELD_HEADER_DISABLE_AUTH""    : ""Deaktivere Authentifizierung:"",
+        ""FIELD_HEADER_CONSOLE""         : ""Administratorkonsole:"",
+        ""FIELD_HEADER_CONSOLE_AUDIO""   : ""Unterstützung von Audio in der Konsole:"",
+        ""FIELD_HEADER_CREATE_DRIVE_PATH"" : ""Laufwerk automatisch erstellen:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Automatically create recording path:"",
+        ""FIELD_HEADER_DISABLE_AUDIO""   : ""Audio deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_AUTH""    : ""Authentifizierung deaktivieren:"",
         ""FIELD_HEADER_DOMAIN""          : ""Domäne:"",
         ""FIELD_HEADER_DPI""             : ""Auflösung (DPI):"",
-        ""FIELD_HEADER_DRIVE_PATH""      : ""Laufwerkspfad:"",
-        ""FIELD_HEADER_ENABLE_DESKTOP_COMPOSITION"" : ""Aktiviere Desktop Gestaltung (Aero):"",
-        ""FIELD_HEADER_ENABLE_DRIVE""               : ""Aktiviere Laufwerk:"",
-        ""FIELD_HEADER_ENABLE_FONT_SMOOTHING""      : ""Aktiviere Schriftartglättung (ClearType):"",
-        ""FIELD_HEADER_ENABLE_FULL_WINDOW_DRAG""    : ""Aktiviere Fensterziehen:"",
-        ""FIELD_HEADER_ENABLE_MENU_ANIMATIONS""     : ""Aktiviere Menüanimationen:"",
-        ""FIELD_HEADER_ENABLE_PRINTING""            : ""Aktiviere Drucken:"",
-        ""FIELD_HEADER_ENABLE_SFTP""                : ""Aktiviere SFTP:"",
-        ""FIELD_HEADER_ENABLE_THEMING""             : ""Aktiviere Theming:"",
-        ""FIELD_HEADER_ENABLE_WALLPAPER""           : ""Aktiviere Desktophintergrund:"",
+        ""FIELD_HEADER_DRIVE_NAME""      : ""Laufwerksname:"",
+        ""FIELD_HEADER_DRIVE_PATH""      : ""Drive path:"",
+        ""FIELD_HEADER_ENABLE_AUDIO_INPUT""         : ""Audioeingang aktivieren (Mikrofon):"",
+        ""FIELD_HEADER_ENABLE_DESKTOP_COMPOSITION"" : ""Desktop Gestaltung (Aero) aktivieren:"",
+        ""FIELD_HEADER_ENABLE_DRIVE""               : ""Laufwerk aktivieren:"",
+        ""FIELD_HEADER_ENABLE_FONT_SMOOTHING""      : ""Schriftglättung aktivieren (ClearType):"",
+        ""FIELD_HEADER_ENABLE_FULL_WINDOW_DRAG""    : "">Enable full-window drag:"",
+        ""FIELD_HEADER_ENABLE_MENU_ANIMATIONS""     : ""Menüanimationen aktivieren:"",
+        ""FIELD_HEADER_DISABLE_BITMAP_CACHING""     : ""Bitmap-Zwischenspeicherung deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_OFFSCREEN_CACHING""  : ""Off-Screen-Caching deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_GLYPH_CACHING""      : ""Glyph-Cache deaktivieren:"",
+        ""FIELD_HEADER_ENABLE_PRINTING""            : ""Drucken aktivieren:"",
+        ""FIELD_HEADER_ENABLE_SFTP""     : ""SFTP aktivieren:"",
+        ""FIELD_HEADER_ENABLE_THEMING""             : ""Theming aktivieren:"",
+        ""FIELD_HEADER_ENABLE_WALLPAPER""           : ""Hintergrundbild aktivieren:"",
         ""FIELD_HEADER_GATEWAY_DOMAIN""   : ""Domäne:"",
         ""FIELD_HEADER_GATEWAY_HOSTNAME"" : ""Hostname:"",
         ""FIELD_HEADER_GATEWAY_PASSWORD"" : ""Passwort:"",
         ""FIELD_HEADER_GATEWAY_PORT""     : ""Port:"",
         ""FIELD_HEADER_GATEWAY_USERNAME"" : ""Benutzername:"",
         ""FIELD_HEADER_HEIGHT""          : ""Höhe:"",
         ""FIELD_HEADER_HOSTNAME""        : ""Hostname:"",
-        ""FIELD_HEADER_IGNORE_CERT""     : ""Server Zertifikat ignorieren:"",
+        ""FIELD_HEADER_IGNORE_CERT""     : ""Serverzertifikat ignorieren:"",
         ""FIELD_HEADER_INITIAL_PROGRAM"" : ""Startprogramm:"",
+        ""FIELD_HEADER_LOAD_BALANCE_INFO"" : ""Lastverteilung (info/cookie):"",
         ""FIELD_HEADER_PASSWORD""        : ""Passwort:"",
         ""FIELD_HEADER_PORT""            : ""Port:"",
-        ""FIELD_HEADER_READ_ONLY""       : ""Nur-Lesen:"",
+        ""FIELD_HEADER_PRINTER_NAME""    : ""Name des umgeleiteten Druckers:"",
+        ""FIELD_HEADER_PRECONNECTION_BLOB"" : ""Vorverbindungs-BLOB (VM-ID):"",
+        ""FIELD_HEADER_PRECONNECTION_ID""   : ""Quelle (RDP-ID):"",
+        ""FIELD_HEADER_READ_ONLY""      : ""Schreibgeschützt:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""Maus ausschließen:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""Grafiken / Streams ausschließen:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : "">Include key events:"",
+        ""FIELD_HEADER_RECORDING_NAME"" : ""Name der Aufnahme:"",
+        ""FIELD_HEADER_RECORDING_PATH"" : ""Aufnahmepfad:"",
+        ""FIELD_HEADER_RESIZE_METHOD"" : ""Methode zur Skalierung/Größenänderung:"",
         ""FIELD_HEADER_REMOTE_APP_ARGS"" : ""Parameter:"",
         ""FIELD_HEADER_REMOTE_APP_DIR""  : ""Arbeitsverzeichnis:"",
         ""FIELD_HEADER_REMOTE_APP""      : ""Programm:"",
-        ""FIELD_HEADER_SECURITY""        : ""Sicherheitsverfahren:"",
-        ""FIELD_HEADER_SERVER_LAYOUT""   : ""Tastatur Layout:"",
-        ""FIELD_HEADER_SFTP_DIRECTORY""  : ""Standard-Upload-Verzeichnis:"",
-        ""FIELD_HEADER_SFTP_HOSTNAME""    : ""Hostname:"",
-        ""FIELD_HEADER_SFTP_PASSPHRASE""  : ""Passphrase:"",
-        ""FIELD_HEADER_SFTP_PASSWORD""    : ""Passwort:"",
-        ""FIELD_HEADER_SFTP_PORT""        : ""Port:"",
-        ""FIELD_HEADER_SFTP_PRIVATE_KEY"" : ""Privater Schlüssel:"",
-        ""FIELD_HEADER_SFTP_USERNAME""    : ""Benutzername:"",
+        ""FIELD_HEADER_SECURITY""        : ""Sicherheitsmodus:"",
+        ""FIELD_HEADER_SERVER_LAYOUT""   : ""Tastaturbelegung:"",
+        ""FIELD_HEADER_SFTP_DIRECTORY""             : ""Standard-Upload-Verzeichnis:"",
+        ""FIELD_HEADER_SFTP_HOST_KEY""              : ""Öffentlicher Hostschlüssel (Base64):"",
+        ""FIELD_HEADER_SFTP_HOSTNAME""              : ""Hostname:"",
+        ""FIELD_HEADER_SFTP_SERVER_ALIVE_INTERVAL"" : ""SFTP Keepalive Intervall:"",
+        ""FIELD_HEADER_SFTP_PASSPHRASE""            : ""Passphrase:"",
+        ""FIELD_HEADER_SFTP_PASSWORD""              : ""Passwort:"",
+        ""FIELD_HEADER_SFTP_PORT""                  : ""Port:"",
+        ""FIELD_HEADER_SFTP_PRIVATE_KEY""           : ""Privater Schlüssel:"",
+        ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""        : ""Standard-Upload-Verzeichnis:"",
+        ""FIELD_HEADER_SFTP_USERNAME""              : ""Benutzername:"",
         ""FIELD_HEADER_STATIC_CHANNELS"" : ""Statischer Kanalname:"",
         ""FIELD_HEADER_USERNAME""        : ""Benutzername:"",
         ""FIELD_HEADER_WIDTH""           : ""Breite:"",
 
-        ""FIELD_OPTION_COLOR_DEPTH_16""    : ""Hohe Farbtiefe (16-bit)"",
-        ""FIELD_OPTION_COLOR_DEPTH_24""    : ""Echtfarben (24-bit)"",
-        ""FIELD_OPTION_COLOR_DEPTH_32""    : ""Echtfarben (32-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_16""    : ""Geringe Farbe (16-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_24""    : ""Echte Farben (24-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_32""    : ""Echte Farben (32-bit)"",
         ""FIELD_OPTION_COLOR_DEPTH_8""     : ""256 Farben"",
         ""FIELD_OPTION_COLOR_DEPTH_EMPTY"" : """",
 
-        ""FIELD_OPTION_SECURITY_ANY""   : ""Jede"",
+        ""FIELD_OPTION_RESIZE_METHOD_DISPLAY_UPDATE"" : ""\""Aktualisierung anzeigen\"" virtueller Kanal (RDP 8.1+)"",
+        ""FIELD_OPTION_RESIZE_METHOD_EMPTY""          : """",
+        ""FIELD_OPTION_RESIZE_METHOD_RECONNECT""      : ""Erneut verbinden"",
+
+        ""FIELD_OPTION_SECURITY_ANY""   : ""Alle"",
         ""FIELD_OPTION_SECURITY_EMPTY"" : """",
-        ""FIELD_OPTION_SECURITY_NLA""   : ""NLA (Netzwerkebene Authentifizierung)"",
-        ""FIELD_OPTION_SECURITY_RDP""   : ""RDP Verschlüsselung"",
-        ""FIELD_OPTION_SECURITY_TLS""   : ""TLS Verschlüsselung"",
+        ""FIELD_OPTION_SECURITY_NLA""   : ""NLA (Authentifizierung auf Netzwerkebene)"",
+        ""FIELD_OPTION_SECURITY_RDP""   : ""RDP-Verschlüsselung"",
+        ""FIELD_OPTION_SECURITY_TLS""   : ""TLS-Verschlüsselung"",
 
         ""FIELD_OPTION_SERVER_LAYOUT_DE_DE_QWERTZ"" : ""Deutsch (Qwertz)"",
         ""FIELD_OPTION_SERVER_LAYOUT_EMPTY""        : """",
+        ""FIELD_OPTION_SERVER_LAYOUT_EN_GB_QWERTY"" : ""UK Englisch (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_EN_US_QWERTY"" : ""US Englisch (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_ES_ES_QWERTY"" : ""Spanisch (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_FAILSAFE""     : ""Unicode"",
-        ""FIELD_OPTION_SERVER_LAYOUT_FR_FR_AZERTY"" : ""Französisch (Azerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_FR_CH_QWERTZ"" : ""Schweizerisch-französisch (Qwertz)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_FR_FR_AZERTY"" : ""Französisch (Azerty)"",       
         ""FIELD_OPTION_SERVER_LAYOUT_IT_IT_QWERTY"" : ""Italienisch (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_JA_JP_QWERTY"" : ""Japanisch (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_PT_BR_QWERTY"" : ""Brasilianisch-portugiesisch (Qwerty)"",
         ""FIELD_OPTION_SERVER_LAYOUT_SV_SE_QWERTY"" : ""Schwedisch (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_TR_TR_QWERTY"" : ""Türkisch-Q (Qwerty)"",
 
         ""NAME"" : ""RDP"",
 
         ""SECTION_HEADER_AUTHENTICATION""     : ""Authentifizierung"",
-        ""SECTION_HEADER_BASIC_PARAMETERS""   : ""Basiseinstellungen"",
-        ""SECTION_HEADER_CLIPBOARD""          : ""Zwischenablage"",","[{'comment': ""And here - `SECTION_HEADER_CLIPBOARD` probably shouldn't be removed."", 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -257,129 +285,230 @@
         ""ACTION_DELETE""        : ""@:APP.ACTION_DELETE"",
         ""ACTION_SAVE""          : ""@:APP.ACTION_SAVE"",
 
-        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Lösche Benutzer"",
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Benutzer löschen"",
         ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
 
         ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
 
         ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""Administration:"",
-        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Ändere eigenes Passwort:"",
-        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Erstelle neue Benutzer:"",
-        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""Erstelle neue Verbindung:"",
-        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""Erstelle neue Verbindungsgruppe:"",
+        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""Eigenes Passwort ändern:"",
+        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""Neuer Benutzer:"",
+        ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""Neue Benutzergruppen erstellen:"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""Neue Verbindungen erstellen:"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""Neue Verbindungsgruppen erstellen:"",
+        ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""Neues Freigabeprofil erstellen:"",
         ""FIELD_HEADER_PASSWORD""                      : ""@:APP.FIELD_HEADER_PASSWORD"",
         ""FIELD_HEADER_PASSWORD_AGAIN""                : ""@:APP.FIELD_HEADER_PASSWORD_AGAIN"",
         ""FIELD_HEADER_USERNAME""                      : ""Benutzername:"",
-        
+
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
-        ""INFO_READ_ONLY"" : ""Dieses Benutzerkonto kann nicht bearbeitet werden."",
-        
-        ""SECTION_HEADER_CONNECTIONS"" : ""Verbindungen"",
-        ""SECTION_HEADER_EDIT_USER""   : ""Ändere Benutzer"",
-        ""SECTION_HEADER_PERMISSIONS"" : ""Berechtigungen"",
+        ""HELP_NO_USER_GROUPS"" : ""Dieser Benutzer gehört derzeit keiner Gruppe an. Erweitere diesen Abschnitt, um Gruppen hinzuzufügen."",
+
+        ""INFO_READ_ONLY""                : ""Dieses Benutzerkonto kann nicht bearbeitet werden."",
+		""INFO_NO_USER_GROUPS_AVAILABLE"" : ""Keine Gruppen vorhanden."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""Alle Verbindungen"",
+        ""SECTION_HEADER_CONNECTIONS""         : ""Verbindungen"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""Aktuelle Verbindungen"",
+        ""SECTION_HEADER_EDIT_USER""           : ""Benutzer bearbeiten"",
+        ""SECTION_HEADER_PERMISSIONS""         : ""Berechtigungen"",
+        ""SECTION_HEADER_USER_GROUPS""         : ""Gruppen"",
 
-        ""TEXT_CONFIRM_DELETE"" : ""Dieser Löschvorgang ist unumkehrbar. Soll dieser Benutzer wirklich gelöscht werden?""
+        ""TEXT_CONFIRM_DELETE"" : ""Benutzer können nach dem Löschen nicht wiederhergestellt werden. Möchten Sie diesen Benutzer wirklich löschen?""
+
+    },
+
+    ""MANAGE_USER_GROUP"" : {
+
+        ""ACTION_ACKNOWLEDGE""   : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CANCEL""        : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLONE""         : ""@:APP.ACTION_CLONE"",
+        ""ACTION_DELETE""        : ""@:APP.ACTION_DELETE"",
+        ""ACTION_SAVE""          : ""@:APP.ACTION_SAVE"",
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Gruppe löschen"",
+        ""DIALOG_HEADER_ERROR""          : ""@:APP.DIALOG_HEADER_ERROR"",
+
+        ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""@:MANAGE_USER.FIELD_HEADER_ADMINISTER_SYSTEM"",
+        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""@:MANAGE_USER.FIELD_HEADER_CHANGE_OWN_PASSWORD"",
+        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_USERS"",
+        ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_USER_GROUPS"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_CONNECTIONS"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS"",
+        ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""@:MANAGE_USER.FIELD_HEADER_CREATE_NEW_SHARING_PROFILES"",
+        ""FIELD_HEADER_USER_GROUP_NAME""               : ""Name der Gruppe:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HELP_NO_USER_GROUPS""        : ""Diese Gruppe gehört derzeit keiner Gruppe an. Erweitere den diesen Abschnitt, um Gruppen hinzuzufügen."",
+        ""HELP_NO_MEMBER_USER_GROUPS"" : ""Diese Gruppe enthält derzeit keine Gruppen. Erweitere diesen Abschnitt, um eine Gruppen hinzuzufügen."",
+        ""HELP_NO_MEMBER_USERS""       : ""Diese Gruppe enthält derzeit keine Benutzer. Erweitere diesen Abschnitt, um einen Benutzer hinzuzufügen."",
+
+        ""INFO_READ_ONLY""                : ""Diese Gruppe kann leider nicht bearbeitet werden."",
+        ""INFO_NO_USER_GROUPS_AVAILABLE"" : ""@:MANAGE_USER.INFO_NO_USER_GROUPS_AVAILABLE"",
+        ""INFO_NO_USERS_AVAILABLE""       : ""Keine Benutzer verfügbar."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""@:MANAGE_USER.SECTION_HEADER_ALL_CONNECTIONS"",
+        ""SECTION_HEADER_CONNECTIONS""         : ""@:MANAGE_USER.SECTION_HEADER_CONNECTIONS"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""@:MANAGE_USER.SECTION_HEADER_CURRENT_CONNECTIONS"",
+        ""SECTION_HEADER_EDIT_USER_GROUP""     : ""Gruppe bearbeiten"",
+        ""SECTION_HEADER_MEMBER_USERS""        : ""Mitglieder (Benutzer) dieser Gruppe"",
+        ""SECTION_HEADER_MEMBER_USER_GROUPS""  : ""Mitglieder (Gruppen) dieser Gruppe"",
+        ""SECTION_HEADER_PERMISSIONS""         : ""@:MANAGE_USER.SECTION_HEADER_PERMISSIONS"",
+        ""SECTION_HEADER_USER_GROUPS""         : ""Übergeordnete Gruppen"",
+
+        ""TEXT_CONFIRM_DELETE"" : ""Gruppen können nach dem Löschen nicht wiederhergestellt werden. Möchten Sie diese Gruppe wirklich löschen?""
 
     },
     
     ""PROTOCOL_RDP"" : {
 
-        ""FIELD_HEADER_CLIENT_NAME""     : ""Client-Name:"",
+        ""FIELD_HEADER_CLIENT_NAME""     : ""Rechnername:"",
         ""FIELD_HEADER_COLOR_DEPTH""     : ""Farbtiefe:"",
-        ""FIELD_HEADER_CONSOLE""         : ""Mit Konsole verbinden (Windows 2003 / 2003 R2):"",
-        ""FIELD_HEADER_CONSOLE_AUDIO""   : ""Audiounterstützung Konsole:"",
-        ""FIELD_HEADER_CREATE_DRIVE_PATH"" : ""Erstellen Sie automatisch Laufwerk:"",
-        ""FIELD_HEADER_DISABLE_AUDIO""   : ""Deaktivere Audio:"",
-        ""FIELD_HEADER_DISABLE_AUTH""    : ""Deaktivere Authentifizierung:"",
+        ""FIELD_HEADER_CONSOLE""         : ""Administratorkonsole:"",
+        ""FIELD_HEADER_CONSOLE_AUDIO""   : ""Unterstützung von Audio in der Konsole:"",
+        ""FIELD_HEADER_CREATE_DRIVE_PATH"" : ""Laufwerk automatisch erstellen:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Automatically create recording path:"",
+        ""FIELD_HEADER_DISABLE_AUDIO""   : ""Audio deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_AUTH""    : ""Authentifizierung deaktivieren:"",
         ""FIELD_HEADER_DOMAIN""          : ""Domäne:"",
         ""FIELD_HEADER_DPI""             : ""Auflösung (DPI):"",
-        ""FIELD_HEADER_DRIVE_PATH""      : ""Laufwerkspfad:"",
-        ""FIELD_HEADER_ENABLE_DESKTOP_COMPOSITION"" : ""Aktiviere Desktop Gestaltung (Aero):"",
-        ""FIELD_HEADER_ENABLE_DRIVE""               : ""Aktiviere Laufwerk:"",
-        ""FIELD_HEADER_ENABLE_FONT_SMOOTHING""      : ""Aktiviere Schriftartglättung (ClearType):"",
-        ""FIELD_HEADER_ENABLE_FULL_WINDOW_DRAG""    : ""Aktiviere Fensterziehen:"",
-        ""FIELD_HEADER_ENABLE_MENU_ANIMATIONS""     : ""Aktiviere Menüanimationen:"",
-        ""FIELD_HEADER_ENABLE_PRINTING""            : ""Aktiviere Drucken:"",
-        ""FIELD_HEADER_ENABLE_SFTP""                : ""Aktiviere SFTP:"",
-        ""FIELD_HEADER_ENABLE_THEMING""             : ""Aktiviere Theming:"",
-        ""FIELD_HEADER_ENABLE_WALLPAPER""           : ""Aktiviere Desktophintergrund:"",
+        ""FIELD_HEADER_DRIVE_NAME""      : ""Laufwerksname:"",
+        ""FIELD_HEADER_DRIVE_PATH""      : ""Drive path:"",
+        ""FIELD_HEADER_ENABLE_AUDIO_INPUT""         : ""Audioeingang aktivieren (Mikrofon):"",
+        ""FIELD_HEADER_ENABLE_DESKTOP_COMPOSITION"" : ""Desktop Gestaltung (Aero) aktivieren:"",
+        ""FIELD_HEADER_ENABLE_DRIVE""               : ""Laufwerk aktivieren:"",
+        ""FIELD_HEADER_ENABLE_FONT_SMOOTHING""      : ""Schriftglättung aktivieren (ClearType):"",
+        ""FIELD_HEADER_ENABLE_FULL_WINDOW_DRAG""    : "">Enable full-window drag:"",
+        ""FIELD_HEADER_ENABLE_MENU_ANIMATIONS""     : ""Menüanimationen aktivieren:"",
+        ""FIELD_HEADER_DISABLE_BITMAP_CACHING""     : ""Bitmap-Zwischenspeicherung deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_OFFSCREEN_CACHING""  : ""Off-Screen-Caching deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_GLYPH_CACHING""      : ""Glyph-Cache deaktivieren:"",
+        ""FIELD_HEADER_ENABLE_PRINTING""            : ""Drucken aktivieren:"",
+        ""FIELD_HEADER_ENABLE_SFTP""     : ""SFTP aktivieren:"",
+        ""FIELD_HEADER_ENABLE_THEMING""             : ""Theming aktivieren:"",
+        ""FIELD_HEADER_ENABLE_WALLPAPER""           : ""Hintergrundbild aktivieren:"",
         ""FIELD_HEADER_GATEWAY_DOMAIN""   : ""Domäne:"",
         ""FIELD_HEADER_GATEWAY_HOSTNAME"" : ""Hostname:"",
         ""FIELD_HEADER_GATEWAY_PASSWORD"" : ""Passwort:"",
         ""FIELD_HEADER_GATEWAY_PORT""     : ""Port:"",
         ""FIELD_HEADER_GATEWAY_USERNAME"" : ""Benutzername:"",
         ""FIELD_HEADER_HEIGHT""          : ""Höhe:"",
         ""FIELD_HEADER_HOSTNAME""        : ""Hostname:"",
-        ""FIELD_HEADER_IGNORE_CERT""     : ""Server Zertifikat ignorieren:"",
+        ""FIELD_HEADER_IGNORE_CERT""     : ""Serverzertifikat ignorieren:"",
         ""FIELD_HEADER_INITIAL_PROGRAM"" : ""Startprogramm:"",
+        ""FIELD_HEADER_LOAD_BALANCE_INFO"" : ""Lastverteilung (info/cookie):"",
         ""FIELD_HEADER_PASSWORD""        : ""Passwort:"",
         ""FIELD_HEADER_PORT""            : ""Port:"",
-        ""FIELD_HEADER_READ_ONLY""       : ""Nur-Lesen:"",
+        ""FIELD_HEADER_PRINTER_NAME""    : ""Name des umgeleiteten Druckers:"",
+        ""FIELD_HEADER_PRECONNECTION_BLOB"" : ""Vorverbindungs-BLOB (VM-ID):"",
+        ""FIELD_HEADER_PRECONNECTION_ID""   : ""Quelle (RDP-ID):"",
+        ""FIELD_HEADER_READ_ONLY""      : ""Schreibgeschützt:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""Maus ausschließen:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""Grafiken / Streams ausschließen:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : "">Include key events:"",","[{'comment': 'Why the "">""?', 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -138,7 +153,7 @@
 
     ""FORM"" : {
 
-        ""FIELD_PLACEHOLDER_DATE"" : ""YYYY-MM-DD"",","[{'comment': '`FIELD_PLACEHOLDER_DATE` shows the format of date required by the application, which is always YYYY-MM-DD (ISO 8601). If the letters, etc. used within the date format need to be different for the language at hand, then it should be updated accordingly, but the format does still need to equate to YEAR-MONTH-DAY.\r\n\r\nI\'m guessing that the German version of the required format would be ""JJJJ-MM-TT"", but I don\'t honestly know.', 'commenter': 'mike-jumper'}]"
431,guacamole/src/main/webapp/translations/de.json,"@@ -4,103 +4,117 @@
     
     ""APP"" : {
 
+        
+        
+
         ""ACTION_ACKNOWLEDGE""        : ""OK"",
-        ""ACTION_CANCEL""             : ""Abbruch"",
-        ""ACTION_CLONE""              : ""Kopieren"",
+        ""ACTION_CANCEL""             : ""Abbrechen"",
+        ""ACTION_CLONE""              : ""Klonen"",
         ""ACTION_CONTINUE""           : ""Weiter"",
         ""ACTION_DELETE""             : ""Löschen"",
-        ""ACTION_DELETE_SESSIONS""    : ""Beende Sitzung"",
+        ""ACTION_DELETE_SESSIONS""    : ""Sitzungen beenden"",
+        ""ACTION_DOWNLOAD""           : ""Herunterladen"",
         ""ACTION_LOGIN""              : ""Anmelden"",
         ""ACTION_LOGOUT""             : ""Abmelden"",
         ""ACTION_MANAGE_CONNECTIONS"" : ""Verbindungen"",
         ""ACTION_MANAGE_PREFERENCES"" : ""Einstellungen"",
         ""ACTION_MANAGE_SETTINGS""    : ""Einstellungen"",
         ""ACTION_MANAGE_SESSIONS""    : ""Aktive Sitzungen"",
         ""ACTION_MANAGE_USERS""       : ""Benutzer"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""Gruppen"",
         ""ACTION_NAVIGATE_BACK""      : ""Zurück"",
         ""ACTION_NAVIGATE_HOME""      : ""Startseite"",
         ""ACTION_SAVE""               : ""Speichern"",
-        ""ACTION_SEARCH""             : ""Suche"",
-        ""ACTION_UPDATE_PASSWORD""    : ""Aktualisiere Passwort"",
+        ""ACTION_SEARCH""             : ""Suchen"",
+        ""ACTION_SHARE""              : ""Teilen"",
+        ""ACTION_UPDATE_PASSWORD""    : ""Passwort ändern"",
         ""ACTION_VIEW_HISTORY""       : ""Verlauf"",
 
         ""DIALOG_HEADER_ERROR"" : ""Fehler"",
 
-        ""ERROR_PASSWORD_BLANK""    : ""Bitte ein Passwort vergeben."",
-        ""ERROR_PASSWORD_MISMATCH"" : ""Die Passwörter stimmen nicht überein."",
+        ""ERROR_PASSWORD_BLANK""    : ""Bitte ein Passwort vergeben.."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""Die angegebenen Passwörter stimmen nicht überein."",
         
         ""FIELD_HEADER_PASSWORD""       : ""Passwort:"",
-        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""Wiederhole Passwort:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""Passwort erneut eingeben:"",
 
         ""FIELD_PLACEHOLDER_FILTER"" : ""Filter"",
 
-        ""FORMAT_DATE_TIME_PRECISE"" : ""dd-MM-yyyy HH:mm:ss"",
+        ""FORMAT_DATE_TIME_PRECISE"" : ""dd.MM.yyyy HH:mm:ss"",
 
-        ""INFO_ACTIVE_USER_COUNT"" : ""In Benutzung durch {USERS} Benutzer."",
+        ""INFO_ACTIVE_USER_COUNT"" : ""Wird derzeit von {USERS} {USERS, plural, one{Benutzer} other{Benutzern}} verwendet."",
 
+        ""TEXT_ANONYMOUS_USER""   : ""Anonym"",
         ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{{VALUE, plural, one{Sekunde} other{Sekunden}}} minute{{VALUE, plural, one{Minute} other{Minuten}}} hour{{VALUE, plural, one{Stunde} other{Stunden}}} day{{VALUE, plural, one{Tag} other{Tage}}} other{}}""
 
     },
 
     ""CLIENT"" : {
 
         ""ACTION_ACKNOWLEDGE""               : ""@:APP.ACTION_ACKNOWLEDGE"",
-        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""Entferne abgeschlossene Übertragungen"",
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""Löschen"",
         ""ACTION_DISCONNECT""                : ""Trennen"",
         ""ACTION_LOGOUT""                    : ""@:APP.ACTION_LOGOUT"",
         ""ACTION_NAVIGATE_BACK""             : ""@:APP.ACTION_NAVIGATE_BACK"",
         ""ACTION_NAVIGATE_HOME""             : ""@:APP.ACTION_NAVIGATE_HOME"",
-        ""ACTION_RECONNECT""                 : ""Neu Verbinden"",
+        ""ACTION_RECONNECT""                 : ""Erneut verbinden"",
         ""ACTION_SAVE_FILE""                 : ""@:APP.ACTION_SAVE"",
-        ""ACTION_UPLOAD_FILES""              : ""Dateien hochladen"",
+        ""ACTION_SHARE""                     : ""@:APP.ACTION_SHARE"",
+        ""ACTION_UPLOAD_FILES""              : ""Daten hochladen"",
 
-        ""DIALOG_HEADER_CONNECTING""       : ""Verbindung"",
+        ""DIALOG_HEADER_CONNECTING""       : ""Verbinden"",
         ""DIALOG_HEADER_CONNECTION_ERROR"" : ""Verbindungsfehler"",
-        ""DIALOG_HEADER_DISCONNECTED""     : ""Verbindung getrennt"",
-
-        ""ERROR_CLIENT_201""     : ""Aufgrund hoher Serverauslastung wurde diese Verbindung zurückgesetzt. Versuche es in wenigen Minuten erneut."",
-        ""ERROR_CLIENT_202""     : ""Der Verbindungsaufbau wurde durch den Guacamole Server abgebrochen da der Entfernte Computer nicht reagiert. Versuche es noch einmal oder kontaktiere den Systemadministrator."",        
-        ""ERROR_CLIENT_203""     : ""Der entfernte Computer hat einen Fehler hervorgerufen und die Verbindung geschlossen. Versuche es noch einmal oder kontaktiere den Systemadministrator."",
-        ""ERROR_CLIENT_205""     : ""Diese Verbindung kollidiert mit einer bestehenen Verbindung. Versuche es später erneut."",
-        ""ERROR_CLIENT_301""     : ""Anmeldung Fehlgeschlagen. Bitte schließen Sie und versuchen Sie es erneut."",
-        ""ERROR_CLIENT_303""     : ""Sie haben keine Berechtigung auf diese Verbindung zuzugreifen. Wenn Sie diese Berechtigung benötigen, bitten Sie den Systemadministrator diese Berechtigung hinzuzufügen oder prüfen Sie Ihre Systemeinstellugen."",
-        ""ERROR_CLIENT_308""     : ""Die Verbindung wurde durch den Guacamole Server geschlossen da keine aktive Interkommukaion mit dem Browser besteht. Dies wird gewöhnlich durch Netzwerkprobleme verursacht, wie eine schlechte drahtlose Verbindung oder eine sehr langsame Netzwerkverbindung. Bitte überprüfen Sie Ihre Netzwerkverbindung und versuchen Sie es erneut."",
-        ""ERROR_CLIENT_31D""     : ""Der Zugang zu dieser Verbindung wurde durch den Guacamole Server verweigert, da die maximale Anzahl der gleichzeitigen Zugiffe für diese Verbindung für einen einzelnen Benutzer erreicht wurde."",
-        ""ERROR_CLIENT_DEFAULT"" : ""Die Verbindung wurde aufgrund eines interen Fehlers im Guacamole Server beendet. Sollte dieses Problem weiterhin bestehen informieren Sie den Systemadministrator oder überprüfen Sie die Protokolle."",
-
-        ""ERROR_TUNNEL_201""     : ""Der Verbindungsversuch wurde aufgrund zu vieler bestehenden Verbindungen durch den Guacamole Server zurückgewiesen. Versuche es in wenigen Minuten erneut."",
-        ""ERROR_TUNNEL_202""     : ""Die Verbindung zum Server wurde aufgrund hoher Latenz geschlossen. Dies wird gewöhnlich durch Netzwerkprobleme verursacht, wie eine schlechte drahtlose Verbindung oder eine sehr langsame Netzwerkverbindung. Bitte überprüfen Sie Ihre Netzwerkverbindung und versuchen Sie es erneut."",
-        ""ERROR_TUNNEL_203""     : ""Die Verbindung wurde aufgrund eines interen Fehlers beendet. Versuche es noch einmal oder kontaktiere den Systemadministrator."",
-        ""ERROR_TUNNEL_204""     : ""Die angeforderte Verbindung exisiert nicht. Bitte überprüfe den Verbindungsnamen und versuche es erneut."",
-        ""ERROR_TUNNEL_205""     : ""Diese Verbindung ist in Verwendung, ein konkurrierender Zugriff ist nicht gestattet. Versuche es später erneut."",
-        ""ERROR_TUNNEL_301""     : ""Sie haben keine Zugriffsberechtigung für diese Verbindung. Bitte melden Sie sich an und versuchen es erneut."",
-        ""ERROR_TUNNEL_303""     : ""Sie haben keine Zugriffsberechtigung für diese Verbindung. Wenn Sie diese Berechtigung benötigen, bitten Sie den Systemadministrator diese Berechtigung hinzuzufügen oder prüfen Sie Ihre Systemeinstellugen."",
-        ""ERROR_TUNNEL_308""     : ""Die Verbindung wurde durch den Guacamole Server geschlossen da keine aktive Interkommunikation mit dem Browser besteht. Dies wird gewöhnlich durch Netzwerkprobleme verursacht, wie eine schlechte drahtlose Verbindung oder eine sehr langsame Netzwerkverbindung. Bitte überprüfen Sie Ihre Netzwerkverbindung und versuchen Sie es erneut."",
-        ""ERROR_TUNNEL_31D""     : ""Der Zugang zu dieser Verbindung wurde durch den Guacamole Server verweigert, da die maximale Anzahl der gleichzeitigen Zugiffe für einen einzelnen Benutzer erreicht wurde. Bitte schliesse eine oder mehrere Verbindungen und versuche es erneut."",
-        ""ERROR_TUNNEL_DEFAULT"" : ""Die Verbindung wurde aufgrund eines interen Fehlers im Guacamole Server beendet. Sollte dieses Problem weiterhin bestehen informieren Sie den Systemadministrator oder überprüfen Sie die Protokolle."",
-
-        ""ERROR_UPLOAD_100""     : ""Dateiübertragungen werden entweder nicht unterstützt oder sind nicht aktiviert. Bitte kontaktiere den Systemadministrator oder überprüfe die Protokolle."",
-        ""ERROR_UPLOAD_201""     : ""Die maximale Anzahl gleichzeitiger Dateiübertragungen erreicht. Bitte warte bis laufende Dateiübertagungen abgeschlossen sind und versuche es erneut."",
-        ""ERROR_UPLOAD_202""     : ""Die Dateiübertragung konnte nicht gestartet werden da der Entfernet Computer nicht reagiert. Bitte versuche es erneut oder kontaktiere den Systemadministrator."",
-        ""ERROR_UPLOAD_203""     : ""Der entfernte Computer hat bei der Übertragungen einen Fehler verursacht. Bitte versuche es erneut oder kontaktiere den Systemadministrator."",
-        ""ERROR_UPLOAD_204""     : ""Das Übertragungsziel existiert nicht. Bitte überprüfe ob der Zielort exisitert und versuche es erneut."",
-        ""ERROR_UPLOAD_205""     : ""Das Übertragungsziel ist zur Zeit gesperrt. Bitte warte bis alle laufenden Prozesse beendet wurden und versuche es erneut."",
-        ""ERROR_UPLOAD_301""     : ""Es besteht ohne Anmeldung keine Berechtigung zur Dateiübertragung. Bitte anmelden und erneut versuchen."",
-        ""ERROR_UPLOAD_303""     : ""Es besteht keine Berechtingung zur Dateiübertragung. Wenn Sie diese Berechtigung benötigen überprüfen Sie die Systemeinstellungen oder überprüfen Sie diese gemeinsam mit dem Systemadministrator."",
-        ""ERROR_UPLOAD_308""     : ""Die Dateiübertragung weist keinen Fortschritt auf. Dies wird gewöhnlich durch Netzwerkprobleme verursacht, wie eine schlechte drahtlose Verbindung oder eine sehr langsame Netzwerkverbindung. Bitte überprüfen Sie Ihre Netzwerkverbindung und versuchen Sie es erneut."",
-        ""ERROR_UPLOAD_31D""     : ""Die maximale Anzahl gleichzeiter Dateiübertragungen erreicht. Bitte warte bis laufende Dateiübertagungen abgeschlossen sind und versuche es erneut."",
-        ""ERROR_UPLOAD_DEFAULT"" : ""Die Verbindung wurde aufgrund eines interen Fehlers im Guacamole Server beendet. Sollte dieses Problem weiterhin bestehen informieren Sie den Systemadministrator oder überprüfen Sie die Protokolle."",
-
-        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
-
-        ""HELP_CLIPBOARD""           : ""Kopierter oder ausgeschnittener Text aus Guacamole wird hier angezeigt. Änderungen am Text werden direkt auf die entfernte Zwischenablage angewandt."",
-        ""HELP_INPUT_METHOD_NONE""   : ""Keine Eingabemethode in Verwendung. Tastatureingaben werden von der Hardwaretastatur akzeptiert."",
-        ""HELP_INPUT_METHOD_OSK""    : ""Bildschirmeingaben und die eingebettete Guacamole Bildschrimtastatur werden akzeptiert. Die Bildschirmtastatur gestattet Tastenkombinationen die ansonsten unmöglich sind (z.B.: Strg-Alt-Del)."",
-        ""HELP_INPUT_METHOD_TEXT""   : ""Gestattet Eingaben von Text und emuliert Tastaturkombinationen basierend auf den eingegebenen Text. Dies wird benötigt für Geräte ohne Hardwaretastatur."",
-        ""HELP_MOUSE_MODE""          : ""Beeinflusst, wie sich die entfernte Maus bei Touchpadberührungen verhält."",
-        ""HELP_MOUSE_MODE_ABSOLUTE"" : ""Tippen Sie auf die Zielposition, der Klick erfolgt am Ort der Berührung des Touchscreen's."",
-        ""HELP_MOUSE_MODE_RELATIVE"" : ""Den Mauszeiger zur Zielposition bewegen und klicken. Der Klick erfolgt an der Position des Mauszeigers."",
-
+        ""DIALOG_HEADER_DISCONNECTED""     : ""Getrennt"",
+
+        ""ERROR_CLIENT_201""     : ""Diese Verbindung wurde geschlossen, weil der Server ausgelastet ist. Bitte warten Sie einige Minuten und versuchen Sie es erneut."",
+        ""ERROR_CLIENT_202""     : ""Der Guacamole-Server hat die Verbindung geschlossen, weil der Remotedesktop zu lange braucht, um zu antworten. Bitte versuchen Sie es erneut oder wenden Sie sich an Ihren Systemadministrator."",
+        ""ERROR_CLIENT_203""     : ""Der Remotedesktop-Server hat einen Fehler festgestellt und die Verbindung beendet. Bitte versuchen Sie es erneut oder wenden Sie sich an Ihren Systemadministrator."",
+        ""ERROR_CLIENT_207""     : ""Der Remotedesktop-Server ist derzeit nicht erreichbar. Wenn das Problem weiterhin besteht, benachrichtigen Sie Ihren Systemadministrator oder überprüfen Sie die Systemprotokolle."",
+        ""ERROR_CLIENT_208""     : ""Der Remotedesktopserver ist derzeit nicht verfügbar. Wenn das Problem weiterhin besteht, benachrichtigen Sie bitte Ihren Systemadministrator oder überprüfen Sie Ihre Systemprotokolle."",
+        ""ERROR_CLIENT_209""     : ""Der Remotedesktop-Server hat die Verbindung geschlossen, da ein Konflikt mit einer anderen Verbindung besteht. Bitte versuchen Sie es später noch einmal."",
+        ""ERROR_CLIENT_20A""     : ""Der Remotedesktopserver hat die Verbindung geschlossen, da sie inaktiv zu sein schien. Wenn dies unerwünscht oder unerwartet ist, benachrichtigen Sie bitte Ihren Systemadministrator oder überprüfen Sie Ihre Systemeinstellungen."",
+        ""ERROR_CLIENT_20B""     : ""Der Remotedesktopserver hat die Verbindung zwangsweise getrennt. Wenn dies unerwünscht oder unerwartet ist, benachrichtigen Sie bitte Ihren Systemadministrator oder überprüfen Sie Ihre Systemprotokolle."",
+        ""ERROR_CLIENT_301""     : ""Anmeldung fehlgeschlagen. Bitte stellen Sie die Verbindung wieder her und versuchen Sie es erneut."",
+        ""ERROR_CLIENT_303""     : ""Der Remotedesktopserver hat den Zugriff auf diese Verbindung verweigert. Wenn Sie Zugriff benötigen, bitten Sie Ihren Systemadministrator, Ihrem Konto Zugriff zu gewähren, oder überprüfen Sie Ihre Systemeinstellungen."",
+        ""ERROR_CLIENT_308""     : ""Der Guacamole-Server hat die Verbindung geschlossen, da der Browser so lange nicht reagiert hat, dass die Verbindung offenbar getrennt wurde. Dies wird häufig durch Netzwerkprobleme verursacht, wie z.B. schlechtes WLAN-Signal oder eine sehr langsame Netzwerkverbindung. Bitte überprüfen Sie das Netzwerk und versuchen Sie es erneut."",
+        ""ERROR_CLIENT_31D""     : ""Der Guacamole-Server verweigert den Zugriff auf diese Verbindung, weil Sie das Limit für die gleichzeitige Verwendung von Verbindungen durch einen einzelnen Benutzer erreicht haben. Bitte schließen Sie eine oder mehrere Verbindungen und versuchen Sie es erneut."",
+        ""ERROR_CLIENT_DEFAULT"" : ""Auf dem Guacamole-Server ist ein interner Fehler aufgetreten und die Verbindung wurde beendet. Wenn das Problem weiterhin besteht, benachrichtigen Sie bitte Ihren Systemadministrator oder überprüfen Sie Ihre Systemprotokolle."",
+
+        ""ERROR_TUNNEL_201""     : ""Der Guacamole-Server hat diesen Verbindungsversuch abgelehnt, weil zu viele Verbindungen aktiv sind. Bitte warten Sie einige Minuten und versuchen Sie es erneut."",
+        ""ERROR_TUNNEL_202""     : ""Die Verbindung wurde geschlossen, weil der Server zu lange braucht, um zu antworten. Dies wird in der Regel durch Netzwerkprobleme verursacht, z.B. ein schlechts WLAN-Signal oder eine langsame Netzwerkverbindung. Bitte überprüfen Sie Ihre Netzwerkverbindung und versuchen Sie es erneut oder wenden Sie sich an Ihren Systemadministrator."",
+        ""ERROR_TUNNEL_203""     : ""Der Server hat einen Fehler festgestellt und die Verbindung geschlossen. Bitte versuchen Sie es erneut oder wenden Sie sich an Ihren Systemadministrator."",
+        ""ERROR_TUNNEL_204""     : ""Die angeforderte Verbindung existiert nicht. Bitte überprüfen Sie den Verbindungsnamen und versuchen Sie es erneut."",
+        ""ERROR_TUNNEL_205""     : ""Diese Verbindung wird derzeit verwendet und der gleichzeitige Zugriff auf diese Verbindung ist nicht zulässig. Bitte versuchen Sie es später noch einmal."",
+        ""ERROR_TUNNEL_207""     : ""Der Guacamole-Server ist derzeit nicht erreichbar. Bitte überprüfen Sie das Netzwerk und versuchen Sie es erneut."",
+        ""ERROR_TUNNEL_208""     : ""Der Guacamole-Server akzeptiert keine Verbindungen. Bitte überprüfen Sie das Netzwerk und versuchen Sie es erneut."",
+        ""ERROR_TUNNEL_301""     : ""Sie haben keine Berechtigung, auf diese Verbindung zuzugreifen, da Sie nicht angemeldet sind. Melden Sie sich an und versuchen Sie es erneut."",
+        ""ERROR_TUNNEL_303""     : ""Sie haben keine Berechtigung, auf diese Verbindung zuzugreifen. Wenn Sie Zugriff benötigen, bitten Sie Ihren Systemadministrator, Sie in die Liste der zulässigen Benutzer aufzunehmen oder überprüfen Sie Ihre Systemeinstellungen.."",
+        ""ERROR_TUNNEL_308""     : ""Der Guacamole-Server hat die Verbindung geschlossen, da Ihr Browser so lange nicht reagiert hat, dass die Verbindung offenbar getrennt wurde. Dies wird häufig durch Netzwerkprobleme verursacht, wie z.B. schlechtes WLAN-Signal oder eine sehr langsame Netzwerkverbindung. Bitte überprüfen Sie das Netzwerk und versuchen Sie es erneut."",
+        ""ERROR_TUNNEL_31D""     : ""Der Guacamole-Server verweigert den Zugriff auf diese Verbindung, weil Sie das Limit für die gleichzeitige Verwendung von Verbindungen durch einen einzelnen Benutzer erreicht haben. Bitte schließen Sie eine oder mehrere Verbindungen und versuchen Sie es erneut."",
+        ""ERROR_TUNNEL_DEFAULT"" : ""Auf dem Guacamole-Server ist ein interner Fehler aufgetreten und die Verbindung wurde beendet. Wenn das Problem weiterhin besteht, benachrichtigen Sie bitte Ihren Systemadministrator oder überprüfen Sie Ihre Systemprotokolle."",
+
+        ""ERROR_UPLOAD_100""     : ""Die Dateiübertragung wird entweder nicht unterstützt oder ist nicht aktiviert. Bitte wenden Sie sich an Ihren Systemadministrator oder überprüfen Sie Ihre Systemprotokolle."",
+        ""ERROR_UPLOAD_201""     : ""Derzeit werden zu viele Dateien übertragen. Warte, bis die vorhandenen Übertragungen abgeschlossen sind, und versuchen es Sie dann erneut."",
+        ""ERROR_UPLOAD_202""     : ""Die Datei kann nicht übertragen werden, da der Remote-Desktop-Server zu lange benötigt, um zu antworten. Bitte versuchen Sie es erneut oder wenden Sie sich an Ihren Systemadministrator.."",
+        ""ERROR_UPLOAD_203""     : ""Auf dem Remotedesktopserver ist während der Übertragung ein Fehler aufgetreten. Bitte versuchen Sie es erneut oder wenden Sie sich an Ihren Systemadministrator."",
+        ""ERROR_UPLOAD_204""     : ""Das Ziel für die Dateiübertragung existiert nicht. Bitte überprüfen Sie, ob das Ziel vorhanden ist, und versuchen Sie es erneut."",
+        ""ERROR_UPLOAD_205""     : ""Das Ziel für die Dateiübertragung ist derzeit gesperrt. Warten Sie, bis alle laufenden Aufgaben abgeschlossen sind, und versuchen Sie es erneut."",
+        ""ERROR_UPLOAD_301""     : ""Sie haben keine Berechtigung diese Datei hochzuladen, da Sie nicht angemeldet sind. Melden Sie sich an und versuchen Sie es erneut."",
+        ""ERROR_UPLOAD_303""     : ""Sie haben keine Berechtigung, diese Datei hochzuladen. Wenn Sie Zugriff benötigen, überprüfe die Systemeinstellungen oder wenden Sie sich an Ihren Systemadministrator."",
+        ""ERROR_UPLOAD_308""     : ""Die Dateiübertragung weist keinen Fortschritt auf. Dies wird häufig durch Netzwerkprobleme verursacht, wie z.B. schlechtes WLAN-Signal oder  eine sehr langsame Netzwerkverbindung. Bitte überprüfen Sie das Netzwerk und versuchen Sie es erneut."",
+        ""ERROR_UPLOAD_31D""     : ""Derzeit werden zu viele Dateien übertragen. Warten Sie, bis die vorhandenen Übertragungen abgeschlossen sind, und versuchen Sie es dann erneut."",
+        ""ERROR_UPLOAD_DEFAULT"" : ""Auf dem Guacamole-Server ist ein interner Fehler aufgetreten und die Verbindung wurde beendet. Wenn das Problem weiterhin besteht, benachrichtigen Sie bitte Ihren Systemadministrator oder überprüfen Sie Ihre Systemprotokolle."",
+
+        ""HELP_CLIPBOARD""           : ""Kopierter / ausgeschnittener Text in Guacamole wird hier angezeigt. Änderungen am folgenden Text wirken sich auf die entfernte Zwischenablage aus."",
+        ""HELP_INPUT_METHOD_NONE""   : ""Es wird keine Eingabemethode verwendet. Tastatureingaben werden von einer angeschlossenen, physischen Tastatur akzeptiert."",
+        ""HELP_INPUT_METHOD_OSK""    : ""Anzeigen und Akzeptieren von Eingaben über die eingebaute Guacamole-Bildschirmtastatur. Die Bildschirmtastatur ermöglicht die Eingabe von Tastenkombinationen, die ansonsten möglicherweise nicht möglich sind (z. B. Strg-Alt-Entf)."",
+        ""HELP_INPUT_METHOD_TEXT""   : ""Ermöglicht die Eingabe von Text und emuliert Tastaturereignisse basierend auf dem eingegebenen Text. Dies ist für Geräte wie Mobiltelefone erforderlich, denen eine physische Tastatur fehlt."",
+        ""HELP_MOUSE_MODE""          : ""Legt fest, wie sich die Remote-Maus in Bezug auf Berührungen verhält."",
+        ""HELP_MOUSE_MODE_ABSOLUTE"" : ""Tippe um zu klicken. Das Klicken erfolgt am Ort der Berührung."",
+        ""HELP_MOUSE_MODE_RELATIVE"" : ""Ziehen Sie, um den Mauszeiger zu bewegen und tippen Sie, um zu klicken. Der Klick erfolgt an der Position des Mauszeigers."",
+        ""HELP_SHARE_LINK""          : ""Die aktuelle Verbindung wird gemeinsam genutzt und kann von jedem mit den folgenden {LINKS, Plural, einem {Link} anderen {Links} aufgerufen werden:"",","[{'comment': ""I don't believe this will work, as it's not correct ICU format for pluralization. Shouldn't this be `... mit {LINKS, plural, one{foldendem Link} other{den folgenden Links}} ...`?"", 'commenter': 'mike-jumper'}]"
431,extensions/guacamole-auth-radius/src/main/resources/guac-manifest.json,"@@ -11,7 +11,8 @@
 
     ""translations"" : [
         ""translations/en.json"",
-        ""translations/ja.json""
+        ""translations/ja.json"",
+        ""translations/de.json""","[{'comment': 'Please maintain alphabetical order of the filenames listed under `translations` for any particular `guac-manifest.json`.', 'commenter': 'mike-jumper'}]"
433,guacamole-ext/src/main/resources/org/apache/guacamole/protocols/vnc.json,"@@ -19,6 +19,10 @@
         {
             ""name""  : ""authentication"",
             ""fields"" : [
+                {
+                    ""name""  : ""username"",
+                    ""type""  : ""TEXT""","[{'comment': 'This should actually be `USERNAME`. The two fields are technically implemented identically, but `USERNAME` is defined with username-specific meaning.\r\n\r\nSee:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/339c920a89ba6d2363bd442d77490b00237ce650/guacamole-ext/src/main/resources/org/apache/guacamole/protocols/rdp.json#L22-L25', 'commenter': 'mike-jumper'}, {'comment': 'Ah, yes.  Fixed.', 'commenter': 'necouchman'}]"
433,guacamole/src/main/webapp/translations/en.json,"@@ -677,6 +677,7 @@
         ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""        : ""File browser root directory:"",
         ""FIELD_HEADER_SFTP_USERNAME""              : ""Username:"",
         ""FIELD_HEADER_SWAP_RED_BLUE""    : ""Swap red/blue components:"",
+        ""FIELD_HEADER_USERNAME""     : ""Username:"",","[{'comment': '""Username"" is common enough that there are likely translations in the other supported languages which can be safely copied without having to be a native speaker. Thoughts on adding those?', 'commenter': 'mike-jumper'}, {'comment': ""Definitely - I've shamelessly copied the Telnet protocol version of the translation for each language to the VNC protocol.  Two things I noticed as I was doing this:\r\n* There is some level of inconsistency within the translations as to whether they are organized alphabetically or logically.  I tried to be consistent within the inconsistency - but I can try to correct the inconsistency if you'd rather.\r\n* The Italian translation looks like most of the items probably need to be removed - I don't think they're actually translated.  Again, I just copied it and carried on, but if it's a good time to strip out untranslated strings within that translation, I can go for that..."", 'commenter': 'necouchman'}]"
437,extensions/guacamole-auth-radius/src/main/resources/templates/radiusResponseField.html,"@@ -1 +1,6 @@
-<input type=""password"" ng-model=""model"" ng-trim=""false"" autocorrect=""off"" autocapitalize=""off"" placeholder=""{{radiusPlaceholder}}"" />
+<input
+    type=""password""","[{'comment': 'If moving to a simple `<input type=""password"" ...>`, any reason to continue using the custom `RadiusChallengeResponseField` instead of the standard `PasswordField`?', 'commenter': 'mike-jumper'}, {'comment': 'Yeah, that makes sense.  Removed.', 'commenter': 'necouchman'}]"
437,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -53,6 +54,12 @@
      * Logger for this class.
      */
     private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+    
+    /**
+     * The name of the password field for the user to response to the RADIUS
+     * challenge.
+     */
+    private static final String CHALLENGE_RESPONSE_PARAM = ""radisuChallenge"";","[{'comment': 'radius*', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'necouchman'}]"
437,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -97,13 +106,17 @@ private CredentialsInfo getRadiusChallenge(RadiusPacket challengePacket) {
         }
 
         // We have the required attributes - convert to strings and then generate the additional login box/field
-        String replyMsg = replyAttr.toString();
+        logger.debug(""Received challenge: {}"", replyAttr.toString());
+        String replyMsg = replyAttr.toString().split("" = "", 2)[1];","[{'comment': ""Would `replyAttr.getValue()` work here? Formatting the `RadiusAttribute` as a string and then re-parsing it back into an attribute feels like it shouldn't be necessary."", 'commenter': 'mike-jumper'}, {'comment': 'Well, two things, here:\r\n* In order to get the ""Reply-Message = "" out of here, I need to split it.  Not sure how feasible this is with an `AttributeValue` type?\r\n* It ends up getting passed through the form on the Web side.  Is this going to play okay with using `AttributeValue` vs. `String`?', 'commenter': 'necouchman'}, {'comment': 'Checking the source of `RadiusAttribute`, [the `toString()` function](https://github.com/coova/jradius/blob/master/core/src/main/java/net/jradius/packet/attribute/RadiusAttribute.java#L155-L158) says:\r\n\r\n```java\r\npublic String toString()\r\n{\r\n    return attributeName + "" "" + Operator.operatorToString(attributeOp) + "" "" + attributeValue.toString();\r\n}\r\n```\r\n\r\nwith `attributeValue` being exposed through [`getValue()`](https://github.com/coova/jradius/blob/4ee91e33fa155843fe428559d81f036051d30515/core/src/main/java/net/jradius/packet/attribute/RadiusAttribute.java#L94-L97):\r\n\r\n```java\r\npublic AttributeValue getValue()\r\n{\r\n    return attributeValue;\r\n}\r\n```\r\n\r\nFrom the above, it looks like calling `replyAttr.toString()` and splitting that to obtain the value is equivalent to `replyAttr.getValue().toString()` (the value used in the `logger.debug()` call), with the latter avoiding the back-and-forth conversion and assumption of the contents of `attributeOp`.\r\n\r\nIs this not the case?', 'commenter': 'mike-jumper'}, {'comment': ""Ah, okay, i see.  I'll give it a shot."", 'commenter': 'necouchman'}]"
437,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -67,18 +74,20 @@
     private Provider<AuthenticatedUser> authenticatedUserProvider;
 
     /**
-     * Returns the expected credentials from a RADIUS challenge.
+     * Returns an object containing the challenge message and the expected
+     * credentials from a RADIUS challenge.
      *
      * @param challengePacket
      *     The AccessChallenge RadiusPacket received from the RADIUS 
      *     server.
      *
      * @return
-     *     A CredentialsInfo object that represents fields that need to
-     *     be presented to the user in order to complete authentication.
-     *     One of these must be the RADIUS state.
+     *     A GuacamoleRadiusChallenge object that contains the challenge message
+     *     sent by the RADIUS server and the expected credentials that should
+     *     be requested of the user in order to continue authentication.  One
+     *     of the expected credentials *must* be the RADIUS state.","[{'comment': 'I see further down that `getRadiusChallenge()` is expected to return `null` under some circumstances. If that is indeed the case, then the circumstances for returning `null` should be documented here.', 'commenter': 'mike-jumper'}, {'comment': 'Null documented.', 'commenter': 'necouchman'}]"
437,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,"@@ -53,6 +54,12 @@
      * Logger for this class.
      */
     private final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+    
+    /**
+     * The name of the password field for the user to response to the RADIUS","[{'comment': '> The name of the password field for the user to response to the RADIUS challenge.\r\n\r\nI was initially going to say that ""response"" should be ""respond"" here, but with that change the sentence still reads a bit off (""the password field for the user to respond"").\r\n\r\nDid you mean the password field that will contain the user\'s response?', 'commenter': 'mike-jumper'}, {'comment': 'Fixed this up.', 'commenter': 'necouchman'}]"
437,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/form/GuacamoleRadiusChallenge.java,"@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius.form;
+
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+
+/**
+ * A class for storing the RADIUS challenge message and expected credentials","[{'comment': 'I\'m OK with keeping this as is, but in case you feel inspired to change it:\r\n\r\nIf all our documentation for all Java classes started with ""A class for ..."", things would be pretty redundant. If there\'s a way to rephrase this such that this is avoided, that would be better.', 'commenter': 'mike-jumper'}, {'comment': 'I felt inspired.', 'commenter': 'necouchman'}]"
437,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/form/GuacamoleRadiusChallenge.java,"@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.radius.form;
+
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+
+/**
+ * A class for storing the RADIUS challenge message and expected credentials
+ * in a single object.
+ */
+public class GuacamoleRadiusChallenge {
+    
+    /**
+     * The challenge text sent by the RADIUS server.
+     */
+    private final String challengeText;
+    
+    /**
+     * The expected credentials that need to be provided to satisfy the
+     * RADIUS authentication challenge.
+     */
+    private final CredentialsInfo expectedCredentials;
+    
+    /**
+     * Create a new GuacamoleRadiusChallenge object with the provided","[{'comment': 'Convention for the first part of a function\'s JavaDoc documentation is a present tense sentence fragment - the portion that would follow the implied ""This function"" beginning of that sentence. To follow that convention, you\'ll want ""Creates a new ..."" here, not ""Create a new ..."". The latter is more the style of git commit messages. ;)\r\n\r\nSame with the ""Return the ..."" phrasing below.', 'commenter': 'mike-jumper'}, {'comment': 'Present tensed.', 'commenter': 'necouchman'}]"
438,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/sharing/ConnectionSharingService.java,"@@ -88,7 +89,8 @@
      *
      * @param sharingProfileIdentifier
      *     The identifier of the sharing profile dictating the semantics or
-     *     restrictions applying to the shared session.
+     *     restrictions applying to the shared session, or null if no such
+     *     restrictions should apply.
      *
      * @return
      *     A newly-generated set of temporary credentials which can be used to","[{'comment': 'I think this needs to be changed to reflect the new return value of this method?', 'commenter': 'necouchman'}, {'comment': 'Yep. Good catch.', 'commenter': 'mike-jumper'}, {'comment': 'OK - should be fixed.', 'commenter': 'mike-jumper'}]"
446,guacamole-common-js/src/main/webapp/modules/Display.js,"@@ -543,26 +549,97 @@ Guacamole.Display = function() {
      */
     this.drawBlob = function(layer, x, y, blob) {
 
-        // Create URL for blob
-        var url = URL.createObjectURL(blob);
+        var task;
 
-        // Draw and free blob URL when ready
-        var task = scheduleTask(function __display_drawBlob() {
+        // Prefer createImageBitmap() over blob URLs if available
+        if (window.createImageBitmap) {
 
-            // Draw the image only if it loaded without errors
-            if (image.width && image.height)
-                layer.drawImage(x, y, image);
+            var bitmap;
 
-            // Blob URL no longer needed
-            URL.revokeObjectURL(url);
+            // Draw image once loaded
+            task = scheduleTask(function drawImageBitmap() {
+                layer.drawImage(x, y, bitmap);
+            }, true);
 
-        }, true);
+            // Load image from provided blob
+            window.createImageBitmap(blob).then(function bitmapLoaded(decoded) {
+                bitmap = decoded;
+                task.unblock();
+            });
 
-        // Load image from URL
-        var image = new Image();
-        image.onload = task.unblock;
-        image.onerror = task.unblock;
-        image.src = url;
+        }
+
+        // Use blob URLs and the Image object if createImageBitmap() is
+        // unavailable
+        else {
+
+            // Create URL for blob
+            var url = URL.createObjectURL(blob);
+
+            // Draw and free blob URL when ready
+            task = scheduleTask(function __display_drawBlob() {
+
+                // Draw the image only if it loaded without errors
+                if (image.width && image.height)
+                    layer.drawImage(x, y, image);
+
+                // Blob URL no longer needed
+                URL.revokeObjectURL(url);
+
+            }, true);
+
+            // Load image from URL
+            var image = new Image();
+            image.onload = task.unblock;
+            image.onerror = task.unblock;
+            image.src = url;
+
+        }
+
+    };
+
+    /**
+     * Draws the image within the given stream at the given coordinates. The
+     * image will be loaded automatically, and this and any future operations
+     * will wait for the image to finish loading. This function will
+     * automatically choose an approriate method for reading and decoding the
+     * given image stream, and should be preferred for received streams except
+     * where manual decoding of the stream is unavoidable.
+     *
+     * @param {Guacamole.Layer} layer
+     *     The layer to draw upon.
+     *
+     * @param {Number} x
+     *     The destination X coordinate.
+     *
+     * @param {Number} y
+     *     The destination Y coordinate.
+     *
+     * @param {Guacamole.InputStream} stream
+     *     The stream along which image data will be received.
+     *
+     * @param {String} mimetype
+     *     The mimetype of the image within the stream.
+     */
+    this.drawStream = function drawStream(layer, x, y, stream, mimetype) {
+
+        // If createImageBitmap() is available, load the image as a blob so
+        // that function can be used
+        if (window.createImageBitmap) {
+            var reader = new Guacamole.BlobReader(stream, mimetype);
+            reader.onend = function drawImageBlob() {
+                guac_display.drawBlob(layer, x, y, reader.getBlob());
+            };
+        }
+
+        // Lacking createImageBitmap(), fall back to data URIs and the Image
+        // object
+        else {
+            var reader = new Guacamole.DataURIReader(stream, mimetype);
+            reader.onend = function drawImageDataURI() {
+                guac_display.draw(layer, x, y, reader.getURI());","[{'comment': 'Is `guac_display.draw()` correct here, or should it be `guac_display.drawImage()`?', 'commenter': 'necouchman'}, {'comment': 'Yep, `draw()` is correct here as we are using a data URI.\r\n\r\n`drawImage()` takes an `Image` (though the documentation is now updated to acknowledge it can take anything considered a `CanvasImageSource`). The `draw()` function is the one that accepts a URI.\r\n\r\nSee:\r\n\r\n* http://guacamole.apache.org/doc/guacamole-common-js/Guacamole.Display.html#draw\r\n* http://guacamole.apache.org/doc/guacamole-common-js/Guacamole.Display.html#drawImage', 'commenter': 'mike-jumper'}]"
449,Dockerfile,"@@ -45,6 +45,9 @@ COPY guacamole-docker/bin/ /opt/guacamole/bin/
 COPY . ""$BUILD_DIR""
 
 # Run the build itself
+RUN [""chmod"", ""777"", ""/opt/guacamole/bin/build-guacamole.sh""]
+RUN [""chmod"", ""777"", ""/opt/guacamole/bin/start.sh""]","[{'comment': 'These changes seem out-of-scope for this particular pull request.  If the pull request is focused on modifying how the GUAC_DATE and GUAC_TIME tokens behave, then it should be kept to that, without these extra changes.', 'commenter': 'necouchman'}, {'comment': 'These changes would also add far more permissions to the scripts than they should be given. The build and startup scripts definitely do not need to be world-writable.', 'commenter': 'mike-jumper'}]"
449,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AbstractGuacamoleTunnelService.java,"@@ -392,7 +395,29 @@ private GuacamoleSocket getUnconfiguredGuacamoleSocket(
         public ConnectionCleanupTask(ActiveConnectionRecord activeConnection) {
             this.activeConnection = activeConnection;
         }
-        
+
+
+
+        /***
+         * @Author zero
+         * @Description 将活动会话记录里的 会话开始时间变更为GUAC_DATE,GUAC_TIME
+         * @InitDate 10:53 2019/10/12
+         * @Param [activeConnection, tokens]
+         **/","[{'comment': 'The javadoc comments should follow the format of the other comments throughout the code.  Please be consistent with the style used in the code.', 'commenter': 'necouchman'}, {'comment': 'Documentation will also need to be in English.', 'commenter': 'mike-jumper'}]"
449,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AbstractGuacamoleTunnelService.java,"@@ -392,7 +395,29 @@ private GuacamoleSocket getUnconfiguredGuacamoleSocket(
         public ConnectionCleanupTask(ActiveConnectionRecord activeConnection) {
             this.activeConnection = activeConnection;
         }
-        
+
+
+
+        /***
+         * @Author zero
+         * @Description 将活动会话记录里的 会话开始时间变更为GUAC_DATE,GUAC_TIME
+         * @InitDate 10:53 2019/10/12
+         * @Param [activeConnection, tokens]
+         **/
+        public ConnectionCleanupTask(ActiveConnectionRecord activeConnection,Map<String ,String > tokens) {
+            this.activeConnection = activeConnection;
+
+            String yearMonthDay = tokens.get(""GUAC_DATE"");
+            String hourMinSecMs = tokens.get(""GUAC_TIME"");
+            SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyyMMddHHmmss-SSS"");","[{'comment': ""I'm not sure about using the token to set the `ActiveConnectionRecord` date - in mind, this should actually work the other way around - the token should (somehow) be set using the date generated for the `ActiveConnectionRecord`, making the connection record the reference point and not the other way around.\r\n\r\n@mike-jumper @ceharris @jmuehlner Any opinions on this??"", 'commenter': 'necouchman'}, {'comment': ""I agree. I don't think this is the approach we should take. The history and tokens should be made to be consistent with each other, but we shouldn't be parsing tokens as a means of determining when a connection started."", 'commenter': 'mike-jumper'}]"
449,guacamole/src/main/java/org/apache/guacamole/tunnel/StandardTokenMap.java,"@@ -73,7 +73,7 @@
      * The date format that should be used for the time token. This format must
      * be compatible with Java's SimpleDateFormat.
      */
-    private static final String TIME_FORMAT = ""HHmmss"";
+    private static final String TIME_FORMAT = ""HHmmss-SSS"";","[{'comment': 'Why is the format being changed?', 'commenter': 'necouchman'}, {'comment': 'I agree that this change need to be justified.\r\n\r\nAssuming we do want such a token, it will probably need to be a different token. Modifying a well-established token to use a different format will result in breakage in downstream systems that rely on the format of the old token.', 'commenter': 'mike-jumper'}]"
449,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AbstractGuacamoleTunnelService.java,"@@ -392,7 +395,29 @@ private GuacamoleSocket getUnconfiguredGuacamoleSocket(
         public ConnectionCleanupTask(ActiveConnectionRecord activeConnection) {
             this.activeConnection = activeConnection;
         }
-        
+
+
+
+        /***
+         * @Author zero
+         * @Description 将活动会话记录里的 会话开始时间变更为GUAC_DATE,GUAC_TIME
+         * @InitDate 10:53 2019/10/12
+         * @Param [activeConnection, tokens]
+         **/
+        public ConnectionCleanupTask(ActiveConnectionRecord activeConnection,Map<String ,String > tokens) {","[{'comment': ""Please follow existing code style. I'm not sure why the spacing here is the way it is, but it should be kept consistent with established conventions. That is:\r\n\r\n```\r\n..., Map<String, String> tokens\r\n```\r\n\r\nnot:\r\n\r\n```\r\n...,Map<String ,String > tokens\r\n```"", 'commenter': 'mike-jumper'}]"
449,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AbstractGuacamoleTunnelService.java,"@@ -392,7 +395,29 @@ private GuacamoleSocket getUnconfiguredGuacamoleSocket(
         public ConnectionCleanupTask(ActiveConnectionRecord activeConnection) {
             this.activeConnection = activeConnection;
         }
-        
+
+
+
+        /***
+         * @Author zero
+         * @Description 将活动会话记录里的 会话开始时间变更为GUAC_DATE,GUAC_TIME
+         * @InitDate 10:53 2019/10/12
+         * @Param [activeConnection, tokens]
+         **/
+        public ConnectionCleanupTask(ActiveConnectionRecord activeConnection,Map<String ,String > tokens) {
+            this.activeConnection = activeConnection;
+
+            String yearMonthDay = tokens.get(""GUAC_DATE"");
+            String hourMinSecMs = tokens.get(""GUAC_TIME"");
+            SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyyMMddHHmmss-SSS"");
+
+            try {
+                activeConnection.setStartDate(simpleDateFormat.parse(yearMonthDay+hourMinSecMs));
+            } catch (ParseException e) {
+                e.printStackTrace();","[{'comment': 'Exceptions should be handled either by being properly logged with a `Logger` at an appropriate log level, or internally in such a way that logging is unnecessary. Calls to `e.printStackTrace()` should not be found in production code.', 'commenter': 'mike-jumper'}]"
449,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/ActiveConnectionRecord.java,"@@ -211,6 +211,10 @@ public void init(RemoteAuthenticatedUser user,
         this.connectionID = activeConnection.getConnectionID();
     }
 
+    public void setStartDate(Date startDate) {","[{'comment': ""If this approach moves forward and `ActiveConnectionRecord` does need to be mutable, then this new function needs to be documented.\r\n\r\nThat said, I don't believe we should use this approach. Connection records should be immutable, as they are meant to be a reliable snapshot of history. Rather than create a record with the wrong date and correct that date later by parsing tokens, the correct date should be used from the start."", 'commenter': 'mike-jumper'}]"
450,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/conf/MemberAttributeType.java,"@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap.conf;
+
+/**
+ * All possible means of describing membership within 
+ * LDAP group directory records.
+ */
+public enum MemberAttributeType {
+    /**
+     * group membership is specified by DN
+     */
+    DN,
+    /**","[{'comment': '#Nitpick - but there should be some spaces, here - above the first comment block, and between each value.', 'commenter': 'necouchman'}]"
453,guacamole/src/main/webapp/app/form/controllers/languageFieldController.js,"@@ -40,7 +40,7 @@ angular.module('form').controller('languageFieldController', ['$scope', '$inject
 
     // Retrieve defined languages
     languageService.getLanguages().then(function languagesRetrieved(languages) {
-        $scope.$apply(function updateLanguageOptions() {
+        $scope.$applyAsync(function updateLanguageOptions() {","[{'comment': ""I'm not really sure this change should be, here.  We can talk about changing this; however, I believe it is out of scope for a set of changes targeted at improving Chinese language support."", 'commenter': 'necouchman'}, {'comment': ""@necouchman \r\nYou're right, but there is something else hidden. At first I just wanted to fix this js error so that I could choose Chinese localization. After fixing it, I found that the localization was incomplete, and then I completed it.\r\n\r\nThis is a bug that I fixed that would cause an existing script error, I fixed it, and if I don't modify it here, my commit may not work.\r\n\r\nI did a simple test, it was fixed, and it worked fine.\r\n\r\nUnfortunately I don't have the ability to write unit tests for this modification at this time because it is beyond my ability to do so."", 'commenter': 'XYUU'}, {'comment': 'I have explained the reason for this change in JIRA.\r\n\r\nI found that there is a script error in the front end when setting the default internationalization. This error is caused by the wrong use of angular ajax request. I checked the information and fixed the problem.', 'commenter': 'XYUU'}, {'comment': '> I have explained the reason for this change in JIRA.\r\n\r\nNot yet - the JIRA issue currently says ""fixed ... replace ""$apply"" to ""$applyAsync"""" and links to this commit. Please clarify on the issue, when you can, the actual underlying nature of the issue being fixed.\r\n\r\n> I found that there is a script error in the front end when setting the default internationalization. This error is caused by the wrong use of angular ajax request.\r\n\r\n`$apply()` and `$applyAsync()` do not deal with AJAX, nor is AJAX involved with the internationalization system. The error in question (infinite digest) results from `$apply()` being used within a digest cycle.\r\n\r\nI see the same errors you do, but please describe on the issue the nature of the issue being fixed (why current usage of `$apply()` leads to an infinite digest error). The reason that `$apply()` is incorrect here (ie: what circumstances would cause this particular call to be invoked within an active digest) needs to be known.\r\n\r\nSplitting this specific fix into its own pull request (rather than piggybacking it on GUACAMOLE-903) should also be done.\r\n\r\n> Unfortunately I don\'t have the ability to write unit tests for this modification at this time because it is beyond my ability to do so.\r\n\r\nI\'m not sure what unit test would need to be written for this, but don\'t worry - there\'s no need in this case. All that is needed is (1) to split this change such that it only covers the scope of the specific issue and (2) to document the nature of the issue in JIRA.', 'commenter': 'mike-jumper'}, {'comment': ""okay!I'll do as you say. I will open another PR after this PR merge to submit this bug fix."", 'commenter': 'XYUU'}]"
453,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/zh.json,"@@ -0,0 +1,113 @@
+{
+
+    ""LOGIN"" : {
+
+        ""ERROR_PASSWORD_BLANK""    : ""@:APP.ERROR_PASSWORD_BLANK"",
+        ""ERROR_PASSWORD_SAME""     : ""新密码必须与过期密码不同。"",
+        ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
+        ""ERROR_NOT_VALID""         : ""此用户帐户当前无效。"",
+        ""ERROR_NOT_ACCESSIBLE""    : ""当前不允许访问该帐户。请稍后再试。"",
+
+        ""INFO_PASSWORD_EXPIRED"" : ""您的密码已过期，必须重新设置。请输入新密码以继续。"",
+
+        ""FIELD_HEADER_NEW_PASSWORD""         : ""新密码"",
+        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""确认新密码""
+
+    },
+
+    ""CONNECTION_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""最大连接数："",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""每个用户的最大连接数："",
+
+        ""FIELD_HEADER_FAILOVER_ONLY""            : ""仅用于故障转移："",
+        ""FIELD_HEADER_WEIGHT""                   : ""连接权重："",
+
+        ""FIELD_HEADER_GUACD_HOSTNAME""   : ""主机名："",
+        ""FIELD_HEADER_GUACD_ENCRYPTION"" : ""加密："",
+        ""FIELD_HEADER_GUACD_PORT""       : ""端口："",
+
+        ""FIELD_OPTION_GUACD_ENCRYPTION_EMPTY"" : """",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_NONE""  : ""没有 (未加密)"",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_SSL""   : ""SSL / TLS"",
+
+        ""SECTION_HEADER_CONCURRENCY""    : ""并发限制"",
+        ""SECTION_HEADER_LOAD_BALANCING"" : ""负载均衡"",
+        ""SECTION_HEADER_GUACD""          : ""Guacamole代理参数(guacd)""
+
+    },
+
+    ""CONNECTION_GROUP_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_ENABLE_SESSION_AFFINITY""  : ""启用会话亲和："",
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""最大连接数："",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""每个用户的最大连接数："",
+
+        ""SECTION_HEADER_CONCURRENCY"" : ""并发限制(组负载均衡)""
+
+    },
+
+    ""DATA_SOURCE_MYSQL"" : {
+        ""NAME"" : ""MySQL""
+    },
+
+    ""DATA_SOURCE_MYSQL_SHARED"" : {
+        ""NAME"" : ""共享连接(MySQL)""
+    },
+
+    ""DATA_SOURCE_POSTGRESQL"" : {
+        ""NAME"" : ""PostgreSQL""
+    },
+
+    ""DATA_SOURCE_POSTGRESQL_SHARED"" : {
+        ""NAME"" : ""共享连接(PostgreSQL)""
+    },
+
+    ""DATA_SOURCE_SQLSERVER"" : {
+        ""NAME"" : ""SQL Server""
+    },
+
+    ""DATA_SOURCE_SQLSERVER_SHARED"" : {
+        ""NAME"" : ""共享连接(SQL Server)""
+    },
+
+    ""HOME"" : {
+        ""INFO_SHARED_BY"" : ""由{USERNAME}共享""
+    },
+
+    ""PASSWORD_POLICY"" : {
+
+        ""ERROR_CONTAINS_USERNAME""      : ""密码可能不包含用户名。"",
+        ""ERROR_REQUIRES_DIGIT""         : ""密码必须至少包含一位数字。"",
+        ""ERROR_REQUIRES_MULTIPLE_CASE"" : ""密码必须同时包含大写和小写字符。"",
+        ""ERROR_REQUIRES_NON_ALNUM""     : ""密码必须包含至少一个符号。"",
+        ""ERROR_REUSED""                 : ""此密码已被使用。请勿重复使用以前的{HISTORY_SIZE} {HISTORY_SIZE, plural, one{password} other{passwords}}。"",
+        ""ERROR_TOO_SHORT""              : ""密码必须至少{LENGTH} {LENGTH, plural, one{character} other{characters}} 位长度。"",
+        ""ERROR_TOO_YOUNG""              : ""此帐户的密码已被重设。请至少再等待 {WAIT}个{WAIT, plural, one{day} other{days}}，然后再次更改密码。""","[{'comment': 'These pluralization substitutions will result in English plurals being included within Chinese text. Perhaps these should be translated, as well?', 'commenter': 'mike-jumper'}]"
453,guacamole/src/main/webapp/translations/zh.json,"@@ -430,30 +572,38 @@
         ""FIELD_HEADER_COMMAND""      : ""运行命令："",
         ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""自动建立录像目录："",
         ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""自动建立打字稿目录："",
+        ""FIELD_HEADER_DISABLE_COPY""  : ""禁用从终端复制:"",
+        ""FIELD_HEADER_DISABLE_PASTE"" : ""禁用从客户端粘贴:"",
         ""FIELD_HEADER_FONT_NAME""   : ""字体名："",
         ""FIELD_HEADER_FONT_SIZE""   : ""字体大小："",
         ""FIELD_HEADER_ENABLE_SFTP"" : ""启用SFTP："",
+        ""FIELD_HEADER_HOST_KEY""      : ""公钥(Base64):"",
         ""FIELD_HEADER_HOSTNAME""    : ""主机名："",
+        ""FIELD_HEADER_LOCALE""        : ""语言/地区($LANG):"",
         ""FIELD_HEADER_USERNAME""    : ""用户名："",
         ""FIELD_HEADER_PASSWORD""    : ""密码："",
         ""FIELD_HEADER_PASSPHRASE""  : ""口令："",
         ""FIELD_HEADER_PORT""        : ""端口："",
         ""FIELD_HEADER_PRIVATE_KEY"" : ""私钥："",
+        ""FIELD_HEADER_SCROLLBACK""    : ""最大回滚尺寸:"",
         ""FIELD_HEADER_READ_ONLY""   : ""只读："",
         ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""排除鼠标："",
         ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""排除图像/数据流："",
         ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""包含按键事件："",
         ""FIELD_HEADER_RECORDING_NAME"" : ""录像名："",
         ""FIELD_HEADER_RECORDING_PATH"" : ""录像路径："",
         ""FIELD_HEADER_SERVER_ALIVE_INTERVAL"" : ""服务器keepalive时间间隔："",
+
         ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""   : ""文件浏览器根目录："",
-        ""FIELD_HEADER_TYPESCRIPT_NAME"" : ""打字稿名："",
-        ""FIELD_HEADER_TYPESCRIPT_PATH"" : ""打字稿路径："",","[{'comment': 'Is ""打字稿"" incorrect vs. ""Typescript""?', 'commenter': 'mike-jumper'}, {'comment': 'Okay,I correct it.', 'commenter': 'XYUU'}]"
453,guacamole/src/main/webapp/translations/zh.json,"@@ -475,7 +625,15 @@
         ""FIELD_OPTION_FONT_SIZE_72""    : ""72"",
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
         ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",
-
+	
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_EMPTY""          : """",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256色"",","[{'comment': '""xterm-256color"" is the value that `$TERM` would be set to. There is no ""xterm-256色"".', 'commenter': 'mike-jumper'}]"
453,guacamole/src/main/webapp/translations/zh.json,"@@ -490,31 +648,40 @@
 
     },
 
+
+
     ""PROTOCOL_TELNET"" : {
 
-        ""FIELD_HEADER_BACKSPACE""      : ""退格键发送："",
-        ""FIELD_HEADER_COLOR_SCHEME""   : ""配色方案："",
-        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""自动建立录像目录："",
-        ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""自动建立打字稿目录："",
-        ""FIELD_HEADER_FONT_NAME""      : ""字体名："",
-        ""FIELD_HEADER_FONT_SIZE""      : ""字体大小："",
-        ""FIELD_HEADER_HOSTNAME""       : ""主机名："",
-        ""FIELD_HEADER_USERNAME""       : ""用户名："",
-        ""FIELD_HEADER_PASSWORD""       : ""密码："",
-        ""FIELD_HEADER_PASSWORD_REGEX"" : ""密码规则正则表达式："",
-        ""FIELD_HEADER_PORT""           : ""端口："",
-        ""FIELD_HEADER_READ_ONLY""      : ""只读："",
-        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""排除鼠标："",
-        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""排除图像/数据流："",
-        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""包含按键事件："",
-        ""FIELD_HEADER_RECORDING_NAME"" : ""录像名："",
-        ""FIELD_HEADER_RECORDING_PATH"" : ""录像路径："",
-        ""FIELD_HEADER_TYPESCRIPT_NAME"" : ""打字稿名："",
-        ""FIELD_HEADER_TYPESCRIPT_PATH"" : ""打字稿路径："",
+        ""FIELD_HEADER_BACKSPACE""      : ""发送退格键:"",
+        ""FIELD_HEADER_COLOR_SCHEME""   : ""配色方案:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""自动创建记录路径:"",
+        ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""自动创建typescript路径:"",
+        ""FIELD_HEADER_DISABLE_COPY""   : ""禁止从终端复制："",
+        ""FIELD_HEADER_DISABLE_PASTE""  : ""禁用从客户端粘贴："",
+        ""FIELD_HEADER_FONT_NAME""      : ""字体名称:"",
+        ""FIELD_HEADER_FONT_SIZE""      : ""字体大小:"",
+        ""FIELD_HEADER_HOSTNAME""       : ""主机名:"",
+        ""FIELD_HEADER_LOGIN_FAILURE_REGEX"" : ""登录失败正则表达式:"",
+        ""FIELD_HEADER_LOGIN_SUCCESS_REGEX"" : ""登录成功正则表达式:"",
+        ""FIELD_HEADER_USERNAME""       : ""用户名:"",
+        ""FIELD_HEADER_USERNAME_REGEX"" : ""用户名正则表达式:"",
+        ""FIELD_HEADER_PASSWORD""       : ""密码:"",
+        ""FIELD_HEADER_PASSWORD_REGEX"" : ""密码正则表达式:"",
+        ""FIELD_HEADER_PORT""           : ""端口:"",
+        ""FIELD_HEADER_READ_ONLY""      : ""只读:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""排除鼠标:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""排除图形/流:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""包含关键事件:"",
+        ""FIELD_HEADER_RECORDING_NAME"" : ""记录名称:"",
+        ""FIELD_HEADER_RECORDING_PATH"" : ""记录路径:"",
+        ""FIELD_HEADER_SCROLLBACK""     : ""最大回滚尺寸:"",
+        ""FIELD_HEADER_TERMINAL_TYPE""   : ""终端类型:"",
+        ""FIELD_HEADER_TYPESCRIPT_NAME"" : ""Typescript 名称:"",
+        ""FIELD_HEADER_TYPESCRIPT_PATH"" : ""Typescript 路径:"",
 
         ""FIELD_OPTION_BACKSPACE_EMPTY"" : """",
-        ""FIELD_OPTION_BACKSPACE_8""     : ""退格键（Ctrl-H）"",
-        ""FIELD_OPTION_BACKSPACE_127""   : ""删除键（Ctrl-?）"",
+        ""FIELD_OPTION_BACKSPACE_8""     : ""Backspace (Ctrl-H)"",
+        ""FIELD_OPTION_BACKSPACE_127""   : ""Delete (Ctrl-?)"",","[{'comment': 'Why are these being changed back into English?', 'commenter': 'mike-jumper'}, {'comment': 'Okay,I correct it.', 'commenter': 'XYUU'}]"
453,guacamole/src/main/webapp/translations/zh.json,"@@ -678,14 +856,15 @@
         ""FIELD_HEADER_PASSWORD_OLD""       : ""当前密码："",
         ""FIELD_HEADER_PASSWORD_NEW""       : ""新密码："",
         ""FIELD_HEADER_PASSWORD_NEW_AGAIN"" : ""确认新密码："",
+        ""FIELD_HEADER_TIMEZONE""           : ""时区:"",
         ""FIELD_HEADER_USERNAME""           : ""用户名："",
         
         ""HELP_DEFAULT_INPUT_METHOD"" : ""缺省输入法决定了Guacamole如何接收键盘事件。当使用移动设备或使用IME输入时，有可能需要更改设置。本设置可在Guacamole菜单内被单个连接的设定覆盖。"",
         ""HELP_DEFAULT_MOUSE_MODE""   : ""缺省鼠标模拟方式决定了新连接内的远程鼠标如何响应屏幕触控。本设置可在Guacamole菜单内被单个连接的设定覆盖。"",
         ""HELP_INPUT_METHOD_NONE""    : ""@:CLIENT.HELP_INPUT_METHOD_NONE"",
         ""HELP_INPUT_METHOD_OSK""     : ""@:CLIENT.HELP_INPUT_METHOD_OSK"",
         ""HELP_INPUT_METHOD_TEXT""    : ""@:CLIENT.HELP_INPUT_METHOD_TEXT"",
-        ""HELP_LANGUAGE""             : ""在下方列表中选择Guacamole界面所使用的语言。可选用的语言决定于系统安装了什么语言。"",
+        ""HELP_LOCALE""             : ""以下选项与用户的语言环境有关，并将影响界面各部分的显示方式。"",","[{'comment': 'Why is the nature of the text here changing?', 'commenter': 'mike-jumper'}]"
453,guacamole/src/main/webapp/translations/zh.json,"@@ -418,7 +560,7 @@
         ""SECTION_HEADER_PERFORMANCE""        : ""性能"",
         ""SECTION_HEADER_PRECONNECTION_PDU""  : ""预连接PDU / Hyper-V"",
         ""SECTION_HEADER_RECORDING""          : ""屏幕录像"",
-        ""SECTION_HEADER_REMOTEAPP""          : ""RemoteApp"",
+        ""SECTION_HEADER_REMOTEAPP""          : ""远程应用"",","[{'comment': 'Is ""远程应用"" correct for ""RemoteApp""? I\'m surprised to see a Microsoft brand-like term like ""RemoteApp"" translated, while other translations below like ""typescript"", ""backspace"", and ""delete"" are being changed back to English.', 'commenter': 'mike-jumper'}, {'comment': 'Okay,I correct it.', 'commenter': 'XYUU'}]"
453,guacamole/src/main/webapp/translations/zh.json,"@@ -300,14 +318,129 @@
 
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""HELP_NO_USER_GROUPS"" : ""该用户当前不属于任何组。 展开此部分以添加组。"",
+	
         ""INFO_READ_ONLY"" : ""对不起，不能编辑此用户的账户。"",
+        ""INFO_NO_USER_GROUPS_AVAILABLE"" : ""没用可用的用户组."",
 
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""全部连接"",
         ""SECTION_HEADER_CONNECTIONS"" : ""连接"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""当前连接"",
         ""SECTION_HEADER_EDIT_USER""   : ""编辑用户"",
         ""SECTION_HEADER_PERMISSIONS"" : ""使用权限"",
-
+        ""SECTION_HEADER_USER_GROUPS""         : ""用户组"",
+	
         ""TEXT_CONFIRM_DELETE"" : ""将不能恢复已被删除的用户。确定要删除这个用户吗？""
 
+    },
+    
+        ""MANAGE_USER_GROUP"" : {","[{'comment': 'Beware - it looks like you accidentally indented this an extra level.', 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -58,6 +63,7 @@
     @Inject
     private Provider<CASAuthenticatedUser> authenticatedUserProvider;
 
+","[{'comment': 'Extra line added - not sure this needs to be here :-).', 'commenter': 'necouchman'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -81,11 +87,13 @@ public CASAuthenticatedUser authenticateUser(Credentials credentials)
         if (request != null) {
             String ticket = request.getParameter(CASTicketField.PARAMETER_NAME);
             if (ticket != null) {
-                Map<String, String> tokens = ticketService.validateTicket(ticket, credentials);
+		TokensAndGroups tokensAndGroups = ticketService.validateTicket(ticket, credentials);
+		Map<String, String> tokens = tokensAndGroups.tokens;
+                Set<String> effectiveGroups = tokensAndGroups.effectiveGroups;","[{'comment': ""Style needs to conform to the existing standards, which are four space tab stops.  Looks like a couple of these lines have tabs.\r\n\r\nI'm also not sure that an entirely separate class is required here for parsing out tokens and groups.  It seems like maybe it would be better to just have the `validateTicket()` method return the raw attributes, and then have a  utility method - maybe a private one within this class - that parses the returned attributes for whatever one is configured for group membership, returning the `effectiveGroups`.  The method could either leave the group membership on for use as a token (if that's of any value) or remove the group membership attributes(s) from the `Map` such that only the non-group attributes are left as tokens."", 'commenter': 'necouchman'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/CASGuacamoleProperties.java,"@@ -68,5 +69,30 @@ private CASGuacamoleProperties() {}
         public String getName() { return ""cas-clearpass-key""; }
 
     };
+  
+   /**
+    * The attribute used for group membership
+    * example:  memberOf  (case sensitive)
+    */
+    public static final StringGuacamoleProperty CAS_GROUP_ATTRIBUTE =
+         new StringGuacamoleProperty() {
 
+      @Override
+      public String getName() { return ""cas-group-attribute""; }","[{'comment': 'Indentation issues, here...', 'commenter': 'necouchman'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/CASGuacamoleProperties.java,"@@ -68,5 +69,30 @@ private CASGuacamoleProperties() {}
         public String getName() { return ""cas-clearpass-key""; }
 
     };
+  
+   /**
+    * The attribute used for group membership
+    * example:  memberOf  (case sensitive)
+    */
+    public static final StringGuacamoleProperty CAS_GROUP_ATTRIBUTE =
+         new StringGuacamoleProperty() {
 
+      @Override
+      public String getName() { return ""cas-group-attribute""; }
+
+    };
+
+   /**
+    * The attribute used for group DN Format
+    * such as CN=%s,OU=myou,DC=example,DC=com  (case sensitive)
+    * used to strip all but %s.  This is only necessary when
+    * CAS backend is LDAP. 
+    */
+    public static final StringGuacamoleProperty CAS_GROUP_DN_FORMAT =
+         new StringGuacamoleProperty() {
+
+      @Override
+      public String getName() { return ""cas-group-dn-format""; }","[{'comment': 'Indentation issues...', 'commenter': 'necouchman'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -85,4 +85,34 @@ public PrivateKey getClearpassKey() throws GuacamoleException {
         return environment.getProperty(CASGuacamoleProperties.CAS_CLEARPASS_KEY);
     }
 
+    /**
+     * Returns the attribute used to determine group memberships
+     * in CAS, or null if not defined.
+     *
+     * @return
+     *     The attribute name","[{'comment': 'This should probably be more along the lines of ""The attribute name used to determine group memberships in CAS, or null if not defined.""  I know it seems redundant based on what\'s already a couple of lines above it, but when people are looking at the JavaDoc documentation for a Guacamole method there are situations where it can be useful.', 'commenter': 'necouchman'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -85,4 +85,34 @@ public PrivateKey getClearpassKey() throws GuacamoleException {
         return environment.getProperty(CASGuacamoleProperties.CAS_CLEARPASS_KEY);
     }
 
+    /**
+     * Returns the attribute used to determine group memberships
+     * in CAS, or null if not defined.
+     *
+     * @return
+     *     The attribute name
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getCasGroupAttribute() throws GuacamoleException {
+        return environment.getProperty(CASGuacamoleProperties.CAS_GROUP_ATTRIBUTE);
+    }
+
+    /**
+     * Returns the attribute used to format group DN's
+     * in CAS, or null if not defined.","[{'comment': ""This seems a little unclear to me.  I know you described the behavior in the body of the pull request, so I think I get what you're trying to say, but try to think of it from the perspective of someone reading JavaDocs without having ever seen what you wrote on the pull request, and maybe without having read any additional stuff that will be added to the manual.  So, this should be a little more descriptive of what the property is used for."", 'commenter': 'necouchman'}, {'comment': ""I've taken a crack at a correction to this, please review and let me know if it's clearer."", 'commenter': 'siacali'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -68,6 +72,7 @@
     @Inject
     private ConfigurationService confService;
 
+ ","[{'comment': 'No need for the extra line.', 'commenter': 'necouchman'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -122,15 +128,41 @@
             }
             
             // Convert remaining attributes that have values to Strings
+            String groupAttribute = confService.getCasGroupAttribute();
+            // Use cas-member-attribute to retrieve and set group memberships
+            String groupDnFormat = confService.getCasGroupDnFormat();
+            String groupTemplate = """";
+            if (groupDnFormat != null) {
+                // if CAS is backended to LDAP, groups come in as RFC4514 DN
+                // syntax.  If cas-group-dn-format is set, this strips
+                // an entry such as ""CN=Foo,OU=Bar,DC=example,DC=com"" to
+                // ""Foo""
+                groupTemplate = groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)""); 
+                // the underlying parser aggregates all instances of the same
+                // attribute, so we need to be able to parse them out
+                groupTemplate=groupTemplate+"",*\\s*"";
+            } else {
+               groupTemplate = ""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+,*\\s*)"";
+           }
             for (Entry <String, Object> attr : ticketAttrs.entrySet()) {
                 String tokenName = TokenName.canonicalize(attr.getKey(),
                         CAS_ATTRIBUTE_TOKEN_PREFIX);
                 Object value = attr.getValue();
-                if (value != null)
+                if (value != null) {
                     tokens.put(tokenName, value.toString());
+                    if (attr.getKey().equals(groupAttribute)) {
+                        String valueWithoutBrackets = value.toString().substring(1,value.toString().length()-1);
+                        // probably could move this up further for efficiency
+                        Pattern pattern = Pattern.compile(groupTemplate);
+                        Matcher matcher = pattern.matcher(valueWithoutBrackets);
+                        while (matcher.find()) {
+                            effectiveGroups.add(matcher.group(1));
+                        }
+                    }","[{'comment': 'Keep in mind that, with the way you have written this code, here, the group attribute will continue to be available in the tokens, as well.  Which is fine - this may be what you were going for, or it may not, just something to discuss about the merits of doing things this way or not.', 'commenter': 'necouchman'}, {'comment': ""I've left a comment below as to my reasoning.  If you agree, I'll leave it unchanged.  If you disagree, I will agree to disagree and change it.  :-)"", 'commenter': 'siacali'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/user/CASAuthenticatedUser.java,"@@ -50,6 +51,12 @@
      */
     private Map<String, String> tokens;
 
+    /**
+     * The unique identifiers of all user groups which affect the permissions
+     * available to this user.","[{'comment': ""I'm not sure that this should reference permissions, mainly because the CAS module does not implement connections or permissions at all, so it may be a little misleading to start referencing it within the context of this module.  While we do fully expect that these groups will be used to assign permissions in other modules (JDBC), within this module it's simply the groups the user is a member of."", 'commenter': 'necouchman'}, {'comment': ""Please review my changes to see if they're more on the mark...."", 'commenter': 'siacali'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/util/TokensAndGroups.java,"@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.cas.util;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.HashSet;
+
+/**
+ * A class to facilitate the return values of both Tokens and Groups
+ */
+public class TokensAndGroups {
+      public final Map<String, String> tokens;
+      public final Set<String> effectiveGroups;
+      public <TokensAndGroups> TokensAndGroups(Map<String, String> tokens, Set<String> effectiveGroups) {
+             this.tokens=tokens;
+             this.effectiveGroups=effectiveGroups;
+      }","[{'comment': ""If we're going to keep this class (see other comments), style here needs to match up, and comments need to be added.  That may be moot, though..."", 'commenter': 'necouchman'}, {'comment': 'I;ve corrected the formatting and am awaiting your reply on my comments below to resolve.', 'commenter': 'siacali'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/util/TokensAndGroups.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.cas.util;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.HashSet;
+
+    /**
+     * A class to facilitate the return values of both Tokens and Groups
+     *
+     * @param tokens, groups
+     *     A Map<String, String> of tokens, parsed from attributes returned
+     *     by CAS.
+     *      A Set<String> of groups, parsed from attributes returned by CAS.
+     *
+     * @return an instance of itself
+     *
+     */
+    public class TokensAndGroups {
+        public final Map<String, String> tokens;
+        public final Set<String> effectiveGroups;
+        public <TokensAndGroups> TokensAndGroups(Map<String, String> tokens, Set<String> effectiveGroups) {
+            this.tokens=tokens;
+            this.effectiveGroups=effectiveGroups;","[{'comment': 'Should be spaces around the `=` here.', 'commenter': 'necouchman'}, {'comment': 'Fixing...', 'commenter': 'siacali'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -85,4 +85,40 @@ public PrivateKey getClearpassKey() throws GuacamoleException {
         return environment.getProperty(CASGuacamoleProperties.CAS_CLEARPASS_KEY);
     }
 
+    /**
+     * Returns the attribute used to determine group memberships
+     * in CAS, or null if not defined.
+     *
+     * @return
+     *     The attribute name user to determine group memberships in CAS,
+     *     null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getCasGroupAttribute() throws GuacamoleException {","[{'comment': 'In sticking with the way the rest of these methods are named, I\'d suggest taking the ""Cas"" out of this and making it `getGroupAttribute()`, and similarly with the method below for the group DN format.', 'commenter': 'necouchman'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -33,10 +33,14 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.regex.*;","[{'comment': 'We generally try to avoid importing classes using wildcards like this, and prefer to list out the specific ones you need.', 'commenter': 'necouchman'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -88,7 +92,7 @@
      *     If the ID ticket is not valid or guacamole.properties could
      *     not be parsed.
      */
-    public Map<String, String> validateTicket(String ticket,
+    public TokensAndGroups  validateTicket(String ticket,","[{'comment': ""I hate to be a pain about this, but I'm still in favor of having this `validateTicket()` method just return the `Map<String, String>` data, and parsing it out in the body of the `authenticateUser()` method in the `AutenticationProviderService` class.  This leaves the `validateTicket()` method to do ticket validation, keeping it free from the extra logic introduced here.\r\n\r\nI'd suggest doing one of two things:\r\n* Keep the `TokenAndGroups` utility class, but, rather than using it to store the information, implement a static method (or two) that takes in the `Map<String, String>` input from `validateTicket()` and parses out the groups, returning the `List` of effective groups.  Call this method within the `authenticateUser()` method using the output received from `validateTicket()` and using the output to set up the effective groups\r\n* Get rid of the `TokensAndGroups` class and implement the parser in a `private` method within the `AuthenticationProviderService` class that does the same as above.\r\n\r\nI'm completely on-board with leaving the group data in the tokens, as we discussed earlier."", 'commenter': 'necouchman'}, {'comment': 'Ok, the problem with your suggestion is that the `Map<String, String>` **_presently_** returned by `validateTicket()` doesn\'t contain valid information for me to derive groups (from anything other than a group attribute such as memberOf, doing so, I realized I’ve implemented in code I’m playing with in-house but didn’t actually submit in my pull request Doh! - so by now you probably think I’m either nuts or stupid - I apologize for that confusion).  In particular, it returns capitalized keys with a string prepended (CAS-FOOBAR), and groups is case sensitive (So, CAS-FOOBAR, would not be enough for me to differentiate groups such as FooBar from fooBar - I had mentioned this before).  So, to do the processing within `authenticateUser()`, I would need to:\r\n\r\n- Refactor the previous author\'s code to return what I need (""raw"" SAML attributes released by CAS)\r\n- Move/restructure their code to create tokens from SAML attributes within `authenticateUser()`\r\n- Derive both tokens and groups in `authenticateUser()`\r\n\r\nCertainly possible, but refactoring/restructuring someone elses code (and then having to QA it) does seem like a different task and a bit more risk than adding a feature to existing code.   \r\n\r\nAlso, does that really fit into the philosophy of ""one jira ticket, one change?"" or is it ""ok"" to ""fix"" someone elses non-broken code as part of adding a feature?  I\'m not even a Java programmer and I can see a lot of things I\'d like to ""fix"" given a license like that...  :-)\r\n\r\nGive me the final word and I\'ll do it (given the time to do so), if that\'s what you\'d like to see.   Otherwise I’ll do a version that only considers actual group membership type attributes (moving the group stuff to `authenticateUser()`, and open a Jira to address the more full-featured version.\r\n\r\nAll the other changes you\'ve suggested are ""no brainers"" - I\'m on it.', 'commenter': 'siacali'}, {'comment': '> ...\r\n>\r\n> Certainly possible, but refactoring/restructuring someone elses code (and then having to QA it) does seem like a different task and a bit more risk than adding a feature to existing code.\r\n>\r\n> Also, does that really fit into the philosophy of ""one jira ticket, one change?"" or is it ""ok"" to ""fix"" someone elses non-broken code as part of adding a feature? ...\r\n\r\nIt does occasionally happen that additional code needs to be touched in order to implement a feature. I don\'t think there\'s a universal ""this way is safe, this way is unsafe"" answer to your question, but we do tend to look for ways to improve established code when a new change indicates that it would be a better direction. Doing otherwise would mean we trend toward greater and greater technical debt.', 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/util/TokensAndGroups.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.cas.util;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.HashSet;
+
+    /**
+     * A class to facilitate the return values of both Tokens and Groups
+     *
+     * @param tokens, groups
+     *     A Map<String, String> of tokens, parsed from attributes returned
+     *     by CAS.
+     *     A Set<String> of groups, parsed from attributes returned by CAS.
+     *
+     * @return an instance of itself
+     *
+     */
+    public class TokensAndGroups {","[{'comment': 'Why is this class declaration indented by a level?', 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/util/TokensAndGroups.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.cas.util;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.HashSet;
+
+    /**
+     * A class to facilitate the return values of both Tokens and Groups
+     *
+     * @param tokens, groups
+     *     A Map<String, String> of tokens, parsed from attributes returned
+     *     by CAS.
+     *     A Set<String> of groups, parsed from attributes returned by CAS.
+     *
+     * @return an instance of itself","[{'comment': ""The `class` is just a `class`. It doesn't accept parameters nor return a value."", 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -81,11 +86,13 @@ public CASAuthenticatedUser authenticateUser(Credentials credentials)
         if (request != null) {
             String ticket = request.getParameter(CASTicketField.PARAMETER_NAME);
             if (ticket != null) {
-                Map<String, String> tokens = ticketService.validateTicket(ticket, credentials);
+                TokensAndGroups tokensAndGroups = ticketService.validateTicket(ticket, credentials);","[{'comment': ""I'm not a fan of defining a new class just for the sake of returning a pair of values when there's no higher level concept behind that class besides being a pair. `TokensAndGroups` is a type-specific pair, but that's about it. There has to be a better way.\r\n\r\nPerhaps `validateTicket()` should return the `CASAuthenticatedUser` instance?"", 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/CASGuacamoleProperties.java,"@@ -68,5 +69,30 @@ private CASGuacamoleProperties() {}
         public String getName() { return ""cas-clearpass-key""; }
 
     };
+  
+   /**
+    * The attribute used for group membership
+    * example:  memberOf  (case sensitive)
+    */
+    public static final StringGuacamoleProperty CAS_GROUP_ATTRIBUTE =
+         new StringGuacamoleProperty() {
 
+    @Override
+    public String getName() { return ""cas-group-attribute""; }
+
+    };
+
+   /**
+    * The attribute used for group DN Format
+    * such as CN=%s,OU=myou,DC=example,DC=com  (case sensitive)
+    * used to strip all but %s.  This is only necessary when
+    * CAS backend is LDAP. 
+    */","[{'comment': 'Are there other cases where CAS might have group names in a specific format? If so, perhaps this should be more generic and not specific to an LDAP DN?', 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -122,15 +127,41 @@
             }
             
             // Convert remaining attributes that have values to Strings
+            String groupAttribute = confService.getCasGroupAttribute();
+            // Use cas-member-attribute to retrieve and set group memberships
+            String groupDnFormat = confService.getCasGroupDnFormat();
+            String groupTemplate = """";
+            if (groupDnFormat != null) {
+                // if CAS is backended to LDAP, groups come in as RFC4514 DN
+                // syntax.  If cas-group-dn-format is set, this strips
+                // an entry such as ""CN=Foo,OU=Bar,DC=example,DC=com"" to
+                // ""Foo""
+                groupTemplate = groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)""); 
+                // the underlying parser aggregates all instances of the same
+                // attribute, so we need to be able to parse them out
+                groupTemplate=groupTemplate+"",*\\s*"";
+            } else {
+               groupTemplate = ""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+,*\\s*)"";
+           }
             for (Entry <String, Object> attr : ticketAttrs.entrySet()) {
                 String tokenName = TokenName.canonicalize(attr.getKey(),
                         CAS_ATTRIBUTE_TOKEN_PREFIX);
                 Object value = attr.getValue();
-                if (value != null)
+                if (value != null) {
                     tokens.put(tokenName, value.toString());
+                    if (attr.getKey().equals(groupAttribute)) {
+                        String valueWithoutBrackets = value.toString().substring(1,value.toString().length()-1);
+                        // probably could move this up further for efficiency
+                        Pattern pattern = Pattern.compile(groupTemplate);","[{'comment': 'What if the value of the property that `groupTemplate` is derived from already contains characters with special meaning to Java regex?', 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -122,15 +127,41 @@
             }
             
             // Convert remaining attributes that have values to Strings
+            String groupAttribute = confService.getCasGroupAttribute();
+            // Use cas-member-attribute to retrieve and set group memberships
+            String groupDnFormat = confService.getCasGroupDnFormat();
+            String groupTemplate = """";
+            if (groupDnFormat != null) {
+                // if CAS is backended to LDAP, groups come in as RFC4514 DN
+                // syntax.  If cas-group-dn-format is set, this strips
+                // an entry such as ""CN=Foo,OU=Bar,DC=example,DC=com"" to
+                // ""Foo""
+                groupTemplate = groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)""); 
+                // the underlying parser aggregates all instances of the same
+                // attribute, so we need to be able to parse them out
+                groupTemplate=groupTemplate+"",*\\s*"";
+            } else {
+               groupTemplate = ""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+,*\\s*)"";","[{'comment': ""The `getProperty()` function already has a variant for providing a default value. There's no need to test for `null` and manually select that default.\r\n\r\nI'd also suggest that even if there were such a need, it would be better to abstract that within the relevant function within `ConfigurationService`."", 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/util/TokensAndGroups.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.cas.util;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.HashSet;
+
+    /**
+     * A class to facilitate the return values of both Tokens and Groups
+     *
+     * @param tokens, groups
+     *     A Map<String, String> of tokens, parsed from attributes returned
+     *     by CAS.
+     *     A Set<String> of groups, parsed from attributes returned by CAS.
+     *
+     * @return an instance of itself
+     *
+     */
+    public class TokensAndGroups {
+        public final Map<String, String> tokens;
+        public final Set<String> effectiveGroups;
+        public <TokensAndGroups> TokensAndGroups(Map<String, String> tokens, Set<String> effectiveGroups) {","[{'comment': 'Why is this constructor declared as if it leverages generics (`<TokensAndGroups>`)?', 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/util/TokensAndGroups.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.cas.util;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.HashSet;
+
+    /**
+     * A class to facilitate the return values of both Tokens and Groups","[{'comment': ""There should be a better way to achieve this (more on this above). I don't think we should be declaring a class just to be a type-specific pair when there is no other high-level concept behind that class."", 'commenter': 'mike-jumper'}]"
454,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/user/CASAuthenticatedUser.java,"@@ -79,9 +85,10 @@ public void init(String username, Credentials credentials) {
      *     as tokens when connections are established with this user.
      */
     public void init(String username, Credentials credentials,
-            Map<String, String> tokens) {
+            Map<String, String> tokens, Set<String> effectiveGroups) {","[{'comment': 'If adding a new parameter, documentation needs to be added for that parameter (see the documentation for other parameters of this function for examples of this).', 'commenter': 'mike-jumper'}]"
460,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/MySQLAuthenticationProviderModule.java,"@@ -82,6 +83,11 @@ public MySQLAuthenticationProviderModule(MySQLEnvironment environment)
         // Get the MySQL-compatible driver to use.
         mysqlDriver = environment.getMySQLDriver();
 
+        // If timezone is present, set it.
+        TimeZone serverTz = environment.getServerTimeZone();
+        if (serverTz != null)
+            driverProperties.setProperty(""serverTimezone"", serverTz.toString());","[{'comment': ""Is it known that the `toString()` function of Java's `TimeZone` produces a string acceptable by the `serverTimezone` property of the MySQL/MariaDB driver?"", 'commenter': 'mike-jumper'}, {'comment': 'I think `getID()` will be safer.  According to MySQL J/Connector documentation([1]):\r\n\r\n> The MySQL server is configured with a canonical time zone that is recognizable by Java (for example, Europe/Paris, Etc/GMT-5, UTC, etc.)\r\n\r\nThis seems to match with Java\'s TimeZone documentation on ID([2]):\r\n\r\n> You can also get a TimeZone using getTimeZone along with a time zone ID. For instance, the time zone ID for the U.S. Pacific Time zone is ""America/Los_Angeles"".\r\n\r\n[1] - https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-other-changes.html\r\n[2] - https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html', 'commenter': 'necouchman'}]"
460,guacamole-ext/src/main/java/org/apache/guacamole/properties/TimeZoneGuacamoleProperty.java,"@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.util.TimeZone;
+import org.apache.guacamole.GuacamoleException;
+
+/**
+ * A GuacamoleProperty whose value is a TimeZone.
+ */
+public abstract class TimeZoneGuacamoleProperty
+        implements GuacamoleProperty<TimeZone> {
+    
+    @Override
+    public TimeZone parseValue(String value) throws GuacamoleException {
+        
+        // Nothing in, nothing out
+        if (value == null || value.isEmpty())
+            return null;
+        
+        // Attempt to return the TimeZone of the provided string value.
+        return TimeZone.getTimeZone(value);","[{'comment': 'What if the provided timezone name is invalid?', 'commenter': 'mike-jumper'}, {'comment': 'According to the `TimeZone` documentation, it simply returns GMT if the provided value is invalid.  Guess the Java developers were tired that day and decided not to use any Exception handling :laughing:.  Anyway, I can either document it as such, or throw in some logic that tries to detect when that happens (GMT is not provided as the string value, but ends up as the `TimeZone` value) and throw an exception.', 'commenter': 'necouchman'}, {'comment': 'Yikes, that is a bit of a horror show: https://stackoverflow.com/questions/13092865/timezone-validation-in-java\r\n\r\nIf possible, I think proper validation is worth doing ... but I get that it\'s going to be real hairy. Would probably need a few tests that verify the validation works correctly for legal ways of specifying ""GMT"".\r\n\r\nI hate to ask, but is there a finite, known set of strings for GMT within Java?', 'commenter': 'mike-jumper'}, {'comment': '> I hate to ask, but is there a finite, known set of strings for GMT within Java?\r\n\r\nJudging from [the grammar in the documentation for `TimeZone`](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html), it looks like valid GMT strings are:\r\n\r\n* `GMT`\r\n* `GMT+0`\r\n* `GMT-0`\r\n* `GMT+0:00`\r\n* `GMT-0:00`\r\n* `GMT+000`\r\n* `GMT-000`\r\n* `GMT+00`\r\n* `GMT-00`\r\n* `GMT+00:00`\r\n* `GMT-00:00`\r\n* `GMT+0000`\r\n* `GMT-0000`\r\n\r\nWe might be able to safely validate by checking that either of the following is true:\r\n\r\n1. The resulting `TimeZone` is not equivalent to `GMT`.\r\n2. The resulting `TimeZone` _is_ equivalent to `GMT`, and is either explicitly listed by `getAvailableIDs()` or matches a valid ""custom time zone ID"" for GMT (regex?).', 'commenter': 'mike-jumper'}, {'comment': 'Is there any reason not to just loop through the `getAvailableIDs()` output and compare the string value we receive to the available IDs, and throw an error if don\'t match on that? It\'s probably a slightly expensive operation from a compute perspective, but probably not all that bad, and then we can just document that the value for the timezone property must be a valid Java TimeZone ID. Something like:\r\n```\r\nfor (String tzStr : TimeZone.getAvailableIDs()) {\r\n    if (value.equals(tzStr))\r\n        return TimeZone.getTimeZone(value);\r\n}\r\n\r\nthrow GuacamoleServerException(""Invalid timezone specified."");\r\n```\r\n\r\nIt\'s not pretty or elegant, but it\'s fairly simple. Or is there some downfall I\'m missing with that?', 'commenter': 'necouchman'}, {'comment': 'I believe so: not _all_ valid GMT representations are within that list. The grammar for ""custom time zone IDs"" allows for quite a few equivalent ways to say GMT / GMT+0.\r\n\r\nI think the best way would to accept any value that does not equate to GMT, and for all others do a quick comparison for known-good values (static `HashSet` of `getAvailableIDs()`?) and known-good representations of GMT (regex?). Anything that equals GMT, isn\'t a valid custom ID for GMT, and isn\'t explicitly listed by `getAvailableIDs()` must be invalid.', 'commenter': 'mike-jumper'}, {'comment': 'Okay, I think I understand - will give it a go.', 'commenter': 'necouchman'}, {'comment': 'Wow, the Java `TimeZone` implementation is really awful.  Writing the `JUnit` tests is fun:\r\n* If you use the string ""GMT"" for the input, the ID you get back is ""GMT"" - okay, good so far.\r\n* If you use the string ""GMT+00:00"" for the input, the ID you get back is ""GMT+00:00"" - not ideal, but not the worst.\r\n* If you use the string ""GMT+0000"" for the input, the ID you get back is ""GMT+00:00"" - :exploding_head: \r\n\r\nSo, cannot check that valid input strings generate an ID of ""GMT"", and cannot check that valid input strings generate an ID equal to the input string.', 'commenter': 'necouchman'}, {'comment': 'Okay, well, I have given it a shot, so let me know how that looks.', 'commenter': 'necouchman'}, {'comment': 'I feel like there might be two RegEx matches required, here - one for the valid GMT inputs, and one for TimeZone IDs that are returned for either GMT or custom offsets.  It seems that any time an input value is in the format ""GMT+hhmm"" it gets converted with `getID()` to ""GMT+hh:mm"" (adds the colon).  So, it seems like the checks for validity should be:\r\n* Matches the list of known TimeZones\r\n* Input value is the same as the `getID()` output\r\n* Valid GMT value (GMT+/- and some number of 0s)\r\n* Some sort of RegEx that matches custom offset of GMT[+-][hhmm] to GMT[+-][hh:mm]', 'commenter': 'necouchman'}, {'comment': 'What about something like `^GMT[+-](0|00)((:)?00)?$` ?', 'commenter': 'mike-jumper'}, {'comment': 'Yeah, one slight modification - since ""GMT"" is also valid, had to make the entire section after that optional - but that works pretty well.', 'commenter': 'necouchman'}, {'comment': 'Strictly speaking, it isn\'t valid for a ""custom time zone ID"". From [the documentation for `TimeZone`](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html):\r\n\r\n> You can use the getAvailableIDs method to iterate through all the supported time zone IDs. You can then choose a supported ID to get a TimeZone. If the time zone you want is not represented by one of the supported IDs, then a custom time zone ID can be specified to produce a TimeZone. The syntax of a custom time zone ID is:\r\n>\r\n> ```\r\n>  CustomID:\r\n>          GMT Sign Hours : Minutes\r\n>          GMT Sign Hours Minutes\r\n>          GMT Sign Hours\r\n>  Sign: one of\r\n>          + -\r\n>  Hours:\r\n>          Digit\r\n>          Digit Digit\r\n>  Minutes:\r\n>          Digit Digit\r\n>  Digit: one of\r\n>          0 1 2 3 4 5 6 7 8 9\r\n> ```\r\n\r\n""GMT"" is a valid time zone ID, but because `TimeZone` explicitly accepts it as one of the various supported IDs defined by `getAvailableIDs()`.', 'commenter': 'mike-jumper'}, {'comment': 'So, are you good with the code as-is, or would you rather see a loop through `getAvailableIDs()` and put the RegEx back to requiring `GMT[+-]0`?', 'commenter': 'necouchman'}]"
460,guacamole-ext/src/main/java/org/apache/guacamole/properties/TimeZoneGuacamoleProperty.java,"@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.TimeZone;
+import java.util.regex.Pattern;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+
+/**
+ * A GuacamoleProperty whose value is a TimeZone.
+ */
+public abstract class TimeZoneGuacamoleProperty
+        implements GuacamoleProperty<TimeZone> {
+    
+    /**
+     * The set of known good timezone identifiers.
+     */
+    public static final HashSet<String> TZ_IDS =
+            new HashSet<String>(Arrays.asList(TimeZone.getAvailableIDs()));
+    
+    /**
+     * A regex that matches valid variants of GMT timezones.
+     */
+    public static final Pattern GMT_REGEX =
+            Pattern.compile(""^GMT([+-](([0]{3,4})|([0]{1,2}([:][0]{2})?)))?$"",
+                    Pattern.MULTILINE);
+    
+    @Override
+    public TimeZone parseValue(String value) throws GuacamoleException {
+        
+        // Nothing in, nothing out
+        if (value == null || value.isEmpty())
+            return null;
+        
+        // Attempt to return the TimeZone of the provided string value.
+        TimeZone tz = TimeZone.getTimeZone(value);
+        
+        // If the TimeZone is in the available list, return it.
+        if (TZ_IDS.contains(value))
+            return tz;
+        
+        // If the TimeZone matches the GMT regex, return it.
+        if (GMT_REGEX.matcher(value).matches())
+            return tz;
+        
+        // If the output of the TimeZone matches the input, it's probably valid
+        if (tz.getID().equals(value))
+            return tz;
+        
+        // Nothing valid is found, so throw exception.
+        throw new GuacamoleServerException(""Property \"""" + getName()
+                + ""\"" does not specify a valid time zone."");","[{'comment': 'I think we should test for invalidity only if the resulting `TimeZone` is not identical to GMT. Any other value returned by `TimeZone.getTimeZone()` would mean that `value` must be valid. That reduces the scope of the problem from ""is this timezone valid?"" to ""did the user really mean GMT?"".', 'commenter': 'mike-jumper'}, {'comment': 'Makes sense.  Implemented as so.', 'commenter': 'necouchman'}]"
460,guacamole-ext/src/main/java/org/apache/guacamole/properties/TimeZoneGuacamoleProperty.java,"@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.util.TimeZone;
+import java.util.regex.Pattern;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+
+/**
+ * A GuacamoleProperty whose value is a TimeZone.
+ */
+public abstract class TimeZoneGuacamoleProperty
+        implements GuacamoleProperty<TimeZone> {
+    
+    /**
+     * A regex that matches valid variants of GMT timezones.
+     */
+    public static final Pattern GMT_REGEX =
+            Pattern.compile(""^GMT([+-](0|00)((:)?00)?)?$"",
+                    Pattern.MULTILINE);","[{'comment': 'Why multiline?', 'commenter': 'mike-jumper'}, {'comment': 'Oh, I think I was having issues with one of the previous RegExs not working as expected and threw that in to try it out. Forgot to go back and clean it up.', 'commenter': 'necouchman'}]"
460,guacamole-ext/src/test/java/org/apache/guacamole/properties/TimeZoneGuacamolePropertyTest.java,"@@ -0,0 +1,230 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import java.util.Arrays;
+import java.util.List;
+import org.apache.guacamole.GuacamoleException;
+import static org.junit.Assert.*;
+import org.junit.Test;
+
+/**
+ * Tests that validate Time Zone property input.
+ */
+public class TimeZoneGuacamolePropertyTest {
+    
+    /**
+     * An array of valid TimeZones that should be correct parsed by the TimeZone
+     * property, returning either the same or synonymous zone.
+     */
+    private static final List<String> TZ_TEST_VALID = Arrays.asList(
+            ""America/Los_Angeles"",
+            ""America/New_York"",
+            ""Australia/Sydney"",
+            ""Africa/Johannesburg"",
+            ""Asia/Shanghai""
+    );
+    
+    /**
+     * An array of invalid timezone names that should be parsed to GMT, which
+     * should cause an exception to be thrown by the TimeZone property.
+     */
+    private static final List<String> TZ_TEST_INVALID = Arrays.asList(
+            ""Chips/Guacamole"",
+            ""Chips/Queso"",
+            ""Chips/Salsa"",
+            ""Mashed/Avacado"",
+            ""Pico/De_Guayo""
+    );
+    
+    /**
+     * An array of valid GMT specifications that should be correctly parsed
+     * by the TimeZone property as GMT.
+     */
+    private static final List<String> TZ_GMT_VALID = Arrays.asList(
+            ""GMT"",
+            ""GMT-0000"",
+            ""GMT+000"",
+            ""GMT+00:00"",
+            ""GMT-0:00"",
+            ""GMT+0""
+    );
+    
+    /**
+     * An array of invalid GMT specifications that should cause an exception to
+     * be thrown for the TimeZone property.
+     */
+    private static final List<String> TZ_GMT_INVALID = Arrays.asList(
+            ""GMTx0000"",
+            ""GMT=00:00"",
+            ""GMT0:00"",
+            ""GMT+000000"",
+            ""GMT-000:000"",
+            ""GMT100""
+    );
+    
+    /**
+     * An array of custom GMT offsets that should evaluate correctly for
+     * the TimeZone property.
+     */
+    private static final List<String> TZ_CUSTOM_VALID = Arrays.asList(
+            ""GMT-23:59"",
+            ""GMT+01:30"",
+            ""GMT-00:30"",
+            ""GMT-11:25""
+    );
+    
+    /**
+     * An array of invalid custom GMT offsets that should cause an exception
+     * to be thrown by the TimeZone property.
+     */
+    private static final List<String> TZ_CUSTOM_INVALID = Arrays.asList(
+            ""GMT-9999"",
+            ""GMT+2500"",
+            ""GMT+29:30"",
+            ""GMT-1:99"",
+            ""GMT+10:65""
+    );
+    
+    private static final TimeZoneGuacamoleProperty WHERE_IN_WORLD =
+            new TimeZoneGuacamoleProperty() {","[{'comment': 'Please document this very important property. ;)', 'commenter': 'mike-jumper'}, {'comment': 'Ah, yes.  Done.', 'commenter': 'necouchman'}]"
468,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -61,41 +57,58 @@
 
     /**
      * Creates a new instance of LdapNetworkConnection, configured as required
-     * to use whichever encryption method is requested within
-     * guacamole.properties.
+     * to use the given encryption method to communicate with the LDAP server
+     * at the given hostname and port. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly","[{'comment': 'Extra ""it"" here, I think.', 'commenter': 'necouchman'}]"
468,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -61,41 +57,58 @@
 
     /**
      * Creates a new instance of LdapNetworkConnection, configured as required
-     * to use whichever encryption method is requested within
-     * guacamole.properties.
+     * to use the given encryption method to communicate with the LDAP server
+     * at the given hostname and port. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly
+     * requested, and will not connected until it is used in an LDAP operation","[{'comment': '""and will not *be* connected""', 'commenter': 'necouchman'}]"
468,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -104,151 +117,254 @@ private LdapNetworkConnection createLDAPConnection() throws GuacamoleException {
 
         }
 
+        return new LdapNetworkConnection(config);
+
     }
 
     /**
-     * Binds to the LDAP server using the provided user DN and password.
+     * Creates a new instance of LdapNetworkConnection, configured as required
+     * to use whichever encryption method, hostname, and port are requested
+     * within guacamole.properties. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly","[{'comment': '""until a bind operation""', 'commenter': 'necouchman'}]"
468,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -104,151 +117,254 @@ private LdapNetworkConnection createLDAPConnection() throws GuacamoleException {
 
         }
 
+        return new LdapNetworkConnection(config);
+
     }
 
     /**
-     * Binds to the LDAP server using the provided user DN and password.
+     * Creates a new instance of LdapNetworkConnection, configured as required
+     * to use whichever encryption method, hostname, and port are requested
+     * within guacamole.properties. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly
+     * requested, and will not connected until it is used in an LDAP operation","[{'comment': '""will not *be* connected""', 'commenter': 'necouchman'}]"
468,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -104,151 +117,254 @@ private LdapNetworkConnection createLDAPConnection() throws GuacamoleException {
 
         }
 
+        return new LdapNetworkConnection(config);
+
     }
 
     /**
-     * Binds to the LDAP server using the provided user DN and password.
+     * Creates a new instance of LdapNetworkConnection, configured as required
+     * to use whichever encryption method, hostname, and port are requested
+     * within guacamole.properties. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly
+     * requested, and will not connected until it is used in an LDAP operation
+     * (such as a bind).
      *
-     * @param userDN
-     *     The DN of the user to bind as, or null to bind anonymously.
+     * @return
+     *     A new LdapNetworkConnection instance which has already been
+     *     configured to use the encryption method, hostname, and port
+     *     requested within guacamole.properties.
      *
-     * @param password
-     *     The password to use when binding as the specified user, or null to
-     *     attempt to bind without a password.
+     * @throws GuacamoleException
+     *     If an error occurs while parsing guacamole.properties, or if the
+     *     requested encryption method is actually not implemented (a bug).
+     */
+    private LdapNetworkConnection createLDAPConnection()
+            throws GuacamoleException {
+        return createLDAPConnection(
+                confService.getServerHostname(),
+                confService.getServerPort(),
+                confService.getEncryptionMethod());
+    }
+
+    /**
+     * Creates a new instance of LdapNetworkConnection, configured as required
+     * to use whichever encryption method, hostname, and port are specified
+     * within the given LDAP URL. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly","[{'comment': 'And, same extra ""it"" here...', 'commenter': 'necouchman'}]"
468,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -104,151 +117,254 @@ private LdapNetworkConnection createLDAPConnection() throws GuacamoleException {
 
         }
 
+        return new LdapNetworkConnection(config);
+
     }
 
     /**
-     * Binds to the LDAP server using the provided user DN and password.
+     * Creates a new instance of LdapNetworkConnection, configured as required
+     * to use whichever encryption method, hostname, and port are requested
+     * within guacamole.properties. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly
+     * requested, and will not connected until it is used in an LDAP operation
+     * (such as a bind).
      *
-     * @param userDN
-     *     The DN of the user to bind as, or null to bind anonymously.
+     * @return
+     *     A new LdapNetworkConnection instance which has already been
+     *     configured to use the encryption method, hostname, and port
+     *     requested within guacamole.properties.
      *
-     * @param password
-     *     The password to use when binding as the specified user, or null to
-     *     attempt to bind without a password.
+     * @throws GuacamoleException
+     *     If an error occurs while parsing guacamole.properties, or if the
+     *     requested encryption method is actually not implemented (a bug).
+     */
+    private LdapNetworkConnection createLDAPConnection()
+            throws GuacamoleException {
+        return createLDAPConnection(
+                confService.getServerHostname(),
+                confService.getServerPort(),
+                confService.getEncryptionMethod());
+    }
+
+    /**
+     * Creates a new instance of LdapNetworkConnection, configured as required
+     * to use whichever encryption method, hostname, and port are specified
+     * within the given LDAP URL. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly
+     * requested, and will not connected until it is used in an LDAP operation","[{'comment': 'And same missing *be* here (will not be connected)', 'commenter': 'necouchman'}]"
468,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java,"@@ -104,151 +117,254 @@ private LdapNetworkConnection createLDAPConnection() throws GuacamoleException {
 
         }
 
+        return new LdapNetworkConnection(config);
+
     }
 
     /**
-     * Binds to the LDAP server using the provided user DN and password.
+     * Creates a new instance of LdapNetworkConnection, configured as required
+     * to use whichever encryption method, hostname, and port are requested
+     * within guacamole.properties. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly
+     * requested, and will not connected until it is used in an LDAP operation
+     * (such as a bind).
      *
-     * @param userDN
-     *     The DN of the user to bind as, or null to bind anonymously.
+     * @return
+     *     A new LdapNetworkConnection instance which has already been
+     *     configured to use the encryption method, hostname, and port
+     *     requested within guacamole.properties.
      *
-     * @param password
-     *     The password to use when binding as the specified user, or null to
-     *     attempt to bind without a password.
+     * @throws GuacamoleException
+     *     If an error occurs while parsing guacamole.properties, or if the
+     *     requested encryption method is actually not implemented (a bug).
+     */
+    private LdapNetworkConnection createLDAPConnection()
+            throws GuacamoleException {
+        return createLDAPConnection(
+                confService.getServerHostname(),
+                confService.getServerPort(),
+                confService.getEncryptionMethod());
+    }
+
+    /**
+     * Creates a new instance of LdapNetworkConnection, configured as required
+     * to use whichever encryption method, hostname, and port are specified
+     * within the given LDAP URL. The returned LdapNetworkConnection is
+     * configured for use but is not yet connected nor bound to the LDAP
+     * server. It will not be bound until it a bind operation is explicitly
+     * requested, and will not connected until it is used in an LDAP operation
+     * (such as a bind).
+     *
+     * @param url
+     *     The LDAP URL containing the details which should be used to connect
+     *     to the LDAP server.
      *
      * @return
-     *     A bound LDAP connection, or null if the connection could not be
-     *     bound.
+     *     A new LdapNetworkConnection instance which has already been
+     *     configured to use the encryption method, hostname, and port
+     *     specified within the given LDAP URL.
      *
      * @throws GuacamoleException
-     *     If the configuration details relevant to binding to the LDAP server
-     *     cannot be read.
+     *     If the given URL is not a valid LDAP URL, or if the encryption
+     *     method indicated by the URL is known but not actually implemented (a
+     *     bug).
      */
-    public LdapNetworkConnection bindAs(Dn userDN, String password)
+    private LdapNetworkConnection createLDAPConnection(String url)
             throws GuacamoleException {
 
-        // Get ldapConnection and try to connect and bind.
-        LdapNetworkConnection ldapConnection = createLDAPConnection();
+        // Parse provided LDAP URL
+        LdapUrl ldapUrl;
         try {
+            ldapUrl = new LdapUrl(url);
+        }
+        catch (LdapException e) {
+            logger.debug(""Cannot connect to LDAP URL \""{}\"": URL is invalid."", url, e);
+            throw new GuacamoleServerException(""Invalid LDAP URL."", e);
+        }
+
+        // Retrieve hostname from URL, bailing out if no hostname is present
+        String host = ldapUrl.getHost();
+        if (host == null || host.isEmpty()) {
+            logger.debug(""Cannot connect to LDAP URL \""{}\"": no hostname is present."", url);
+            throw new GuacamoleServerException(""LDAP URL contains no hostname."");
+        }
+
+        // Parse encryption method from URL scheme
+        EncryptionMethod encryptionMethod = EncryptionMethod.NONE;
+        if (LdapUrl.LDAPS_SCHEME.equals(ldapUrl.getScheme()))
+            encryptionMethod = EncryptionMethod.SSL;
 
-            // Connect to LDAP server
-            ldapConnection.connect();
+        // If no post is specified within the URL, use the default port
+        // dictated by the encryption method
+        int port = ldapUrl.getPort();
+        if (port < 1)
+            port = encryptionMethod.DEFAULT_PORT;
+
+        return createLDAPConnection(host, port, encryptionMethod);
 
-            // Explicitly start TLS if requested
-            if (confService.getEncryptionMethod() == EncryptionMethod.STARTTLS)
-                ldapConnection.startTls();","[{'comment': ""Why are we not looking at the TLS encryption method, here?  Since there's not really a way that I know of within the LDAP URL to specify that we want TLS encryption, and since we assume no encryption if not set to LDAPS, it seems like we'd want to allow the user to use the URL, but override the encryption with TLS?  Or at least try?"", 'commenter': 'necouchman'}, {'comment': ""As far as normal binds go, we are still using TLS when requested - it's just set up via the `LdapConnectionConfig` and thus automatically applied when the Apache Directory API does its internal `connect()`:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/cb53b17afb30d5cbd1c4f744344dd2f32c6fe1b4/extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java#L107-L111\r\n\r\nMy understanding of the previous iteration of this code was that TLS was not applied to referrals, as the code being removed here (and replaced with `setUseTls(true)`) is specific to the old version of `bindAs()`, which was not called for referral URLs.\r\n\r\nWe could apply TLS for referrals, as well. It would be a simply matter of choosing that `EncryptionMethod` when delegating the creation of the LDAP connection for an LDAP referral:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/cb53b17afb30d5cbd1c4f744344dd2f32c6fe1b4/extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/LDAPConnectionService.java#L193-L196\r\n\r\nI agree this makes sense (a deployment which requires STARTTLS for the main connection should generally be expected to also require it for `ldap://` connections encountered in referrals). I'll add this."", 'commenter': 'mike-jumper'}]"
469,guacamole-docker/bin/start.sh,"@@ -583,8 +583,11 @@ END
 start_guacamole() {
 
     # Install webapp
-    rm -Rf /usr/local/tomcat/webapps/${WEBAPP_CONTEXT:-guacamole}
-    ln -sf /opt/guacamole/guacamole.war /usr/local/tomcat/webapps/${WEBAPP_CONTEXT:-guacamole}.war
+    if [ -n ""$WEBAPP_CONTEXT"" ]
+    then
+        rm /usr/local/tomcat/webapps/guacamole.war
+        ln -sf /opt/guacamole/guacamole.war /usr/local/tomcat/webapps/${WEBAPP_CONTEXT}.war
+    fi","[{'comment': ""I'm not sure I understand how this both resolves the non-root user issue and also maintains the `WEBAPP_CONTEXT` capability?  It seems like, if linking at start time rather than build time causes non-root startup to fail, then anyone who is using `WEBAPP_CONTEXT` rather than the default `guacamole.war` is going to still have an issue running under a non-root account, correct??"", 'commenter': 'necouchman'}, {'comment': ""Correct, we can't do both, at least I did not find a way to do so.\r\nWe could `chmod 777 webapps` directory at build time, but sounds like a security breach to me...\r\nIMO there's no way to support `WEBAPP_CONTEXT` as non-root user..."", 'commenter': 'benrubson'}, {'comment': 'Finally solved with my last commit 👍 ', 'commenter': 'benrubson'}]"
469,Dockerfile,"@@ -56,6 +56,14 @@ WORKDIR /opt/guacamole
 # Copy artifacts from builder image into this image
 COPY --from=builder /opt/guacamole/ .
 
+# Turn on the Remote IP Valve
+RUN sed -i 's+^\(      </Host>\)+        <Valve className=""org.apache.catalina.valves.RemoteIpValve"" />\n\1+' /usr/local/tomcat/conf/server.xml
+
+# Allow image to run as non-root user
+RUN sed -i 's/unpackWARs=""true""/unpackWARs=""false""/' /usr/local/tomcat/conf/server.xml
+RUN chmod 777 /usr/local/tomcat/temp","[{'comment': ""This looks dangerous. Reducing privileges is a good thing, but removing existing restrictions from Tomcat's internals in order to achieve that seems a step in the wrong direction. That would be effectively granting privileges.\r\n\r\nAssuming it is possible to configure the Tomcat portion of the image such that it can be run as a lower-privilege user, we should find a way to do that which doesn't lessen the security restrictions already in place."", 'commenter': 'mike-jumper'}, {'comment': 'Thank you @mike-jumper for your great review.\r\nI think you talk here about the temp directory permissions.\r\nI though rather strange that, by default, `temp` directory was not world-writable.\r\nFor sure, being non-writable by non-root user prevents the non-unpacked app to start.\r\nWe could workaround this by setting the runtime `CATALINA_TMPDIR` env var to another writable dir, `/tmp` for instance. Let me then know if you think we should get rid of this chmod command.\r\n', 'commenter': 'benrubson'}, {'comment': ""There's definitely a difference in purpose between `/tmp` (the system-wide temp directory) and `CATALINA_TMPDIR` (the temp directory dedicated to Tomcat). The former needs to be world-writable, yes, but I don't know what the security implications would be of making the Tomcat-specific temp directory world-writable.\r\n\r\nThe fact that:\r\n\r\n* A system-wide, generic temp directory isn't already used for `CATALINA_TMPDIR`\r\n* The Tomcat-specific directory isn't world-writable by default, but rather locked down for Tomcat's use.\r\n\r\nindicates to me that this change should be made with caution. I think we would need to firmly establish that this directory is safe to be world-writable.\r\n\r\nOne alternative could be to create a Tomcat-specific subdirectory within `/tmp` or `/var/tmp` and point `CATALINA_TMPDIR` to that. As long as that subdirectory has the same permissions as the default `CATALINA_TMPDIR` normally would, this should be safe. Pointing `CATALINA_TMPDIR` directly to `/tmp` itself would not necessarily be safe unless it can be established that what you're already doing (`chmod 777`) is safe."", 'commenter': 'mike-jumper'}, {'comment': 'I agree.\r\nI then just pushed a much better way 👍', 'commenter': 'benrubson'}]"
469,Dockerfile,"@@ -56,6 +56,14 @@ WORKDIR /opt/guacamole
 # Copy artifacts from builder image into this image
 COPY --from=builder /opt/guacamole/ .
 
+# Turn on the Remote IP Valve
+RUN sed -i 's+^\(      </Host>\)+        <Valve className=""org.apache.catalina.valves.RemoteIpValve"" />\n\1+' /usr/local/tomcat/conf/server.xml","[{'comment': ""This looks like it might prove fragile, being both a regex parsing XML and a regex which is sensitive to changes in indentation. Perhaps there is a way to do this which is either aware of XML structure or aware of some degree of context? Applying a patch to `server.xml` might be an easy and more rigorous solution, if there isn't a good alternative that is XML-aware."", 'commenter': 'mike-jumper'}, {'comment': ""I've hardened the `sed` expression to be more robust to potential indentation changes.\r\nIt's an easy one-line update, and is now robust IMO.\r\nOf course feel free to tell me if I should rather go with a `patch` command (would fail on indentation changes though).\r\nThank you !"", 'commenter': 'benrubson'}]"
469,Dockerfile,"@@ -56,6 +56,13 @@ WORKDIR /opt/guacamole
 # Copy artifacts from builder image into this image
 COPY --from=builder /opt/guacamole/ .
 
+# Turn on the Remote IP Valve
+RUN sed -i 's+^\(\( *\)</Host>\)+\2  <Valve className=""org.apache.catalina.valves.RemoteIpValve"" />\n\n\1+' /usr/local/tomcat/conf/server.xml","[{'comment': ""Why does the regex care about spaces before the closing tag? And, if it does, shouldn't it use a generic whitespace pattern rather than a space?\r\n\r\nWhat is the impact of configuring the Remote IP Valve with default options? I have only ever seen it with proxy filtering enabled."", 'commenter': 'manolan1'}, {'comment': ""Thank you for your review @manolan1 👍\r\n\r\n> Why does the regex care about spaces before the closing tag?\r\n\r\nTo be sure, in addition to the `^` anchor, to select the real closing tag, and not for example a comment.\r\n\r\n> And, if it does, shouldn't it use a generic whitespace pattern rather than a space?\r\n\r\nI used space because the .xml file uses spaces, but I've switched to `\\s`, even stronger. Thx."", 'commenter': 'benrubson'}, {'comment': ""> What is the impact of configuring the Remote IP Valve with default options? I have only ever seen it with proxy filtering enabled.\r\n\r\nIf you use (as you should) your Docker instance behind a (Apache) reverse proxy :\r\n- without the Remote IP Valve, you'll get the Docker interface IP in the Guacamole logs ;\r\n- with the Remote IP Valve, you'll get the correct client (public) IP in the Guacamole logs.\r\n\r\nIf you use your Docker instance directly (strange as you won't provide SSL etc...) :\r\n- with or without the Remote IP Valve, you'll get the correct client (public) IP in the Guacamole logs. The only drawback is that a client with a **local** IP should be able to replace its IP by a fake one in Guacamole logs adding some headers (normally sent by the proxy) to his requests (`X-Forwarded-For`)."", 'commenter': 'benrubson'}]"
469,Dockerfile,"@@ -25,7 +25,7 @@
 # such as `--build-arg TOMCAT_JRE=jre8-alpine`
 #
 ARG TOMCAT_VERSION=8.5
-ARG TOMCAT_JRE=jre8
+ARG TOMCAT_JRE=jdk8","[{'comment': 'Why?', 'commenter': 'necouchman'}, {'comment': 'As discussed above with @manolan1, and also based on his comment in the [issue itself](https://issues.apache.org/jira/browse/GUACAMOLE-890), this is a more uptodate / supported Tomcat image, which also helps with non-root user, as it contains some of the fixes we need (especially the permissions on the `temp` folder).', 'commenter': 'benrubson'}, {'comment': ""Hmmm...okay...this is going to increase the size of this Docker image pretty substantially, I would imagine, so I'm a little skeptical that this is the right thing to do.  Sorry I missed it in the other conversation..."", 'commenter': 'necouchman'}, {'comment': ""I also don't think a world-writable directory is the right way to go - the directory should have the correct ownership and permissions, not just the ones that work because we've blown everything open.  If we're trying to improve security with this issue, making something world-writable seems contradictory to that effort."", 'commenter': 'necouchman'}, {'comment': ""I've then reverted to original `jre` image, and created a user-writable `temp` dir.\r\nThis was what I initially pushed before switching to `sdk` image."", 'commenter': 'benrubson'}]"
469,guacamole-docker/bin/start.sh,"@@ -30,7 +30,7 @@
 
 GUACAMOLE_HOME_TEMPLATE=""$GUACAMOLE_HOME""
 
-GUACAMOLE_HOME=""$HOME/.guacamole""
+GUACAMOLE_HOME=""/tmp/guacamole""","[{'comment': ""I really don't like this part of it - making the `GUACAMOLE_HOME` into a temp directory doesn't seem wise to me.  Maybe I'm thinking of this too much from a non-docker perspective, but what if the user decides to try to map through `/etc/guacamole` to a specific path?\r\n\r\nI don't know if there's any other solution for this in the Docker Tomcat world, but this approach just makes me twitch :-)."", 'commenter': 'necouchman'}, {'comment': 'First, this line is due to the fact the user chosen to run the container may not have a home directory into the container, which would then not start.\r\nNote however that the `guacamole` directory, inside the `tmp` directory, is only reachable by the user running the container, as shown below, from a container running this PR :\r\n```\r\n$ ls -l /tmp/\r\ntotal 12\r\ndrwx------ 5 1024 1024 4096 Mar  4 13:02 guacamole\r\n```\r\n\r\n> but what if the user decides to try to map through `/etc/guacamole` to a specific path?\r\n\r\nI also do this in my `docker-compose.yml` file, not an issue at all :\r\n```\r\nservices:\r\n  guacamole:\r\n    image: guacamole/guacamole:1.1.0\r\n    volumes:\r\n      - ./etc:/etc/guacamole:ro\r\n```', 'commenter': 'benrubson'}, {'comment': ""My issue with the directory being placed in /tmp is not the accessibility of the directory to other users/processes, it's the fact that a configuration directory (or webapp deployment directory) is in /tmp - this doesn't make sense to me.  Configuration directories should be in configuration directory locations - not in any place that happens to work because we have write access to it :-).\r\n\r\nI tend to agree with @manolan1, here - Guacamole can't be the only piece of software fighting this issue.  Is what you've done here a commonly-implemented solution among other Tomcat + Docker web applications that run as non-root users?\r\n\r\nI'm willing to defer on this one if @mike-jumper or any of the other project members think we should just move forward, but this still just feels a little off to me."", 'commenter': 'necouchman'}, {'comment': '> Guacamole can\'t be the only piece of software fighting this issue. Is what you\'ve done here a commonly-implemented solution among other Tomcat + Docker web applications that run as non-root users?\r\n\r\nIt is what Tomcat documentation recommends, it\'s the goal of `CATALINA_BASE` env var we then use in this PR.\r\nIMO, what is done in the Tomcat Docker image, 777-chmoding application / configuration / work / tmp... default directories is not the best way to go.\r\nDo you, on a standard installation, as non-root user, have write access to these directories ? No :-)\r\nHowever you\'re free to set your own `CATALINA_BASE` directory, in your home directory for example, and start a new Tomcat instance over it.\r\nAs we do here in this PR.\r\n\r\n> Configuration directories should be in configuration directory locations - not in any place that happens to work because we have write access to it :-)\r\n\r\nWe could `chmod 777 /home` at image build time (in `Dockerfile`), and then use `GUACAMOLE_HOME=""/home/guacamole""` instead of `GUACAMOLE_HOME=""/tmp/guacamole""`, but the whole idea would remain the same.\r\nI\'ve just verified, there\'s nothing in `/home` in the Tomcat Docker image, so we can safely perform this modification, if you\'re more confortable with this.\r\n\r\nHowever keep in mind that whatever is done when Docker container starts will be lost when it will stop, and will have to be done again (this is what `start.sh` does).\r\nSo, configuration which is done when container starts, will be lost when it will stop, wherever it stands, in `/tmp`, `/etc`, `/home` etc...\r\n\r\nWe could also come back to the original `GUACAMOLE_HOME=""$HOME/.guacamole""`, thus getting rid of the hard-coded `/tmp` path.\r\nEverything will run as today, from inside `/root` directory, for those running the container as `root`.\r\nThe others, switching to a different user, will have to set the `$HOME` environment variable to a writable directory.\r\nCould then suit everyone\'s needs here.\r\n\r\nI think this PR is the proper way to go to address this (non-)root security issue.\r\nOf course I run it since the beginning without any issue.\r\n\r\nThank you again :+1:', 'commenter': 'benrubson'}]"
471,guacamole-docker/bin/start.sh,"@@ -707,6 +722,11 @@ END
     exit 1;
 fi
 
+# Use TOTP if specified.
+if [ -n ""$TOTP_ISSUER"" ]; then","[{'comment': 'Is this the best way to do this?  The `totp-issuer` has a default value, per the manual, so should setting the issuer be what triggers activation of this module?  Or should we go with something like `TOTP_ENABLED`?', 'commenter': 'necouchman'}, {'comment': 'I did not want to add another specific var to keep it as simple as possible, but I can for sure :+1:\r\nYour new var / varname sounds good to me.\r\nShould I ?', 'commenter': 'benrubson'}, {'comment': 'Done, as it really seems proper 👍', 'commenter': 'benrubson'}]"
471,guacamole-docker/bin/build-guacamole.sh,"@@ -135,6 +136,15 @@ if [ -f extensions/guacamole-auth-openid/target/guacamole-auth-openid*.jar ]; th
     cp extensions/guacamole-auth-openid/target/guacamole-auth-openid*.jar ""$DESTINATION/openid""
 fi
 
+#
+# Copy TOTP auth extension if it was built","[{'comment': ""Why would it not have been built? From what I recall, the only extension that's conditional within the build is RADIUS support."", 'commenter': 'mike-jumper'}, {'comment': 'I took exactly what is done above and below for other extensions :)', 'commenter': 'benrubson'}]"
471,guacamole-docker/bin/start.sh,"@@ -707,6 +722,11 @@ END
     exit 1;
 fi
 
+# Use TOTP if specified.
+if [ -n ""$TOTP_ENABLED"" ]; then","[{'comment': ""I'm not a huge fan of having to add an environment variable that doesn't map to a property, as it deviates from established patterns, but since the TOTP auth doesn't have any required properties I'm not sure we have any choice."", 'commenter': 'mike-jumper'}, {'comment': ""FWIW, I'm not tied to this - if we want to change it to something else or some other way of enabling it, I'm open to the options.  It just seemed a little weird to me to trigger it by adding a parameter that isn't required.  But, I'm willing to go with whatever."", 'commenter': 'necouchman'}, {'comment': 'The only ""generic"" solution I see is :\r\n`if env | grep -q ""^TOTP_""; then`\r\nSo that enforcing at least one of the `TOTP` properties would enable it.', 'commenter': 'benrubson'}, {'comment': ""@mike-jumper Thoughts, here?  I'm not tied to my suggestion, so if you have a vote...?"", 'commenter': 'necouchman'}, {'comment': 'My preference would be:\r\n\r\n* Continue using `TOTP_ENABLED`.\r\n* Actually check the value rather than simply whether it\'s set. The current implementation would enable TOTP if the user sets `TOTP_ENABLED` to ""1"", to ""false"", to ""salmon"", etc., and that\'s not exactly rigorous.\r\n\r\nI\'m not against additionally accepting `TOTP_*` in lieu of `TOTP_ENABLED` for convenience, but if so:\r\n\r\n* Only actual, known variables should be accepted (for similar reasons to the above... setting `TOTP_FISH` to ""salmon"" shouldn\'t result in TOTP being enabled).\r\n* `TOTP_ENABLED` should still probably be accepted (and checked), as users shouldn\'t be required to set a TOTP-related variable to its default value just to enable use of TOTP.', 'commenter': 'mike-jumper'}, {'comment': 'Thank you for your feedbacks.\r\nI then updated to :\r\n`if [ ""$TOTP_ENABLED"" = ""true"" ]`', 'commenter': 'benrubson'}]"
471,guacamole-docker/bin/start.sh,"@@ -536,6 +536,21 @@ END
 
 }
 
+##
+## Adds properties to guacamole.properties which configure the TOTP two-factor
+## authentication service.","[{'comment': ""Unlike Duo, TOTP isn't an authentication service. There may be a more correct way to document this."", 'commenter': 'mike-jumper'}, {'comment': 'Done, thank you for your review 👍', 'commenter': 'benrubson'}]"
471,guacamole-docker/bin/start.sh,"@@ -536,6 +536,21 @@ END
 
 }
 
+##
+## Adds properties to guacamole.properties which configure the TOTP two-factor
+## authentication mechanism.
+##
+associate_totp() {
+    # Update config file
+    [ -n ""$TOTP_ISSUER"" ] && set_property ""totp-issuer""    ""$TOTP_ISSUER""
+    [ -n ""$TOTP_DIGITS"" ] && set_property ""totp-digits""    ""$TOTP_DIGITS""
+    [ -n ""$TOTP_PERIOD"" ] && set_property ""totp-period""    ""$TOTP_PERIOD""
+    [ -n ""$TOTP_MODE"" ]   && set_property ""totp-mode""      ""$TOTP_MODE""","[{'comment': 'Looking at the other sections (mostly above this), it looks like instead of doing\r\n```\r\n [ -n ""$TOTP_ISSUER"" ] && set_property ""totp-issuer""    ""$TOTP_ISSUER""\r\n```\r\nyou should be able to do:\r\n```\r\nset_optional_property ""totp-issuer"" ""$TOTP_ISSUER""\r\n```', 'commenter': 'necouchman'}, {'comment': ""I'm not sure because we would then set empty options in the configuration file.\r\nIn the other sections, options are tested to always have a value."", 'commenter': 'benrubson'}, {'comment': 'This is the code for `set_optional_property()`:\r\n```\r\nset_optional_property() {\r\n    NAME=""$1""\r\n    VALUE=""$2""\r\n    # Set the property only if a value is provided\r\n    if [ -n ""$VALUE"" ]; then\r\n        set_property ""$NAME"" ""$VALUE""\r\n    fi\r\n}\r\n```\r\n\r\nSo, it\'s essentially duplicating what you\'re doing, no?', 'commenter': 'necouchman'}, {'comment': 'Tired certainly...\r\nThank you @necouchman for pointing this, just fixed 👍 ', 'commenter': 'benrubson'}]"
471,guacamole-docker/bin/start.sh,"@@ -536,6 +536,21 @@ END
 
 }
 
+##
+## Adds properties to guacamole.properties which configure the TOTP two-factor
+## authentication mechanism.
+##
+associate_totp() {
+    # Update config file
+    set_property ""totp-issuer""    ""$TOTP_ISSUER""
+    set_property ""totp-digits""    ""$TOTP_DIGITS""
+    set_property ""totp-period""    ""$TOTP_PERIOD""
+    set_property ""totp-mode""      ""$TOTP_MODE""","[{'comment': 'I think we want `set_optional_property`, right, since all of these already have default values?', 'commenter': 'necouchman'}, {'comment': 'For sure, I just then pushed the required fix.\r\nThank you @necouchman 👍', 'commenter': 'benrubson'}]"
475,guacamole-common/pom.xml,"@@ -26,7 +26,7 @@
     <groupId>org.apache.guacamole</groupId>
     <artifactId>guacamole-common</artifactId>
     <packaging>jar</packaging>
-    <version>1.1.0</version>
+    <version>1.2.0</version>","[{'comment': ""Has guacamole-common changed? I'm not seeing any changes from 1.1.0 according to git."", 'commenter': 'mike-jumper'}, {'comment': 'Good point - reverted that.', 'commenter': 'necouchman'}]"
475,extensions/guacamole-auth-cas/pom.xml,"@@ -210,15 +210,15 @@
         <dependency>
             <groupId>org.apache.guacamole</groupId>
             <artifactId>guacamole-common</artifactId>
-            <version>1.1.0</version>
+            <version>1.2.0</version>","[{'comment': 'It might be easier to just remove this dependency, relying on inheriting it from guacamole-ext. Unlike projects like guacamole-example, use of guacamole-common within an extension will be to service guacamole-ext.', 'commenter': 'mike-jumper'}, {'comment': 'Removed.', 'commenter': 'necouchman'}]"
475,extensions/guacamole-auth-radius/pom.xml,"@@ -178,15 +178,15 @@
         <dependency>
             <groupId>org.apache.guacamole</groupId>
             <artifactId>guacamole-common</artifactId>
-            <version>1.1.0</version>
+            <version>1.2.0</version>","[{'comment': 'Same here:\r\n\r\nIt might be easier to just remove this dependency, relying on inheriting it from guacamole-ext. Unlike projects like guacamole-example, use of guacamole-common within an extension will be to service guacamole-ext.', 'commenter': 'mike-jumper'}, {'comment': 'Removed.', 'commenter': 'necouchman'}]"
475,doc/guacamole-example/pom.xml,"@@ -106,15 +106,15 @@
         <dependency>
             <groupId>org.apache.guacamole</groupId>
             <artifactId>guacamole-common</artifactId>
-            <version>1.1.0</version>
+            <version>1.2.0</version>","[{'comment': '1.1.0*', 'commenter': 'mike-jumper'}, {'comment': 'Oops, fixed.', 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/PostgreSQLEnvironment.java,"@@ -47,6 +47,21 @@
      */
     private static final int DEFAULT_PORT = 5432;
 
+    /**
+     * The default defaultStatementTimeout (in seconds),
+     * if POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT is not specified.
+     * Default to null (no timeout)
+     * https://mybatis.org/mybatis-3/configuration.html
+     */
+    private static final String DEFAULT_DEFAULT_STATEMENT_TIMEOUT = ""null"";
+
+    /**
+     * The default socketTimeout (in seconds), if POSTGRESQL_SOCKET_TIMEOUT is not specified.
+     * Default to 0 (no timeout)
+     * https://jdbc.postgresql.org/documentation/head/connect.html
+     */
+    private static final int DEFAULT_SOCKET_TIMEOUT = 0;
+","[{'comment': ""Is there some reason why you've implemented one of these as a `String` and the other as an `int`?  I think I would stick with `int` to be consistent with how other timeouts are implemented.  Also, one uses `null` for no timeout, the other uses 0 - can we align on that, or does the underlying code note allow for that?"", 'commenter': 'necouchman'}, {'comment': 'Yes, I was trying to keep same as what the backend takes. But I see your point - consistency at this level would be good rather than exposing the underlying differences.', 'commenter': 'DouglasHeriot'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/PostgreSQLEnvironment.java,"@@ -47,6 +47,21 @@
      */
     private static final int DEFAULT_PORT = 5432;
 
+    /**
+     * The default defaultStatementTimeout (in seconds),
+     * if POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT is not specified.
+     * Default to null (no timeout)
+     * https://mybatis.org/mybatis-3/configuration.html
+     */
+    private static final String DEFAULT_DEFAULT_STATEMENT_TIMEOUT = ""null"";","[{'comment': '`""null""` != `NULL` - does the underlying setting require the String value `null` for this?', 'commenter': 'necouchman'}, {'comment': ""Yes it takes a string value. I thought that just keeping it as a string was neater than making a nullable `Integer` where all other properties are `int`.\r\nI've now changed this to an `int` and don't pass through when it's `0`."", 'commenter': 'DouglasHeriot'}, {'comment': 'I dug into this a little more, and it does not look to me like the string value ""null"" is what they intend - I think just mean `null` in the since of not setting anything.  So, this should not be `""null""`, it should be `null`.\r\n\r\nhttps://mybatis.org/mybatis-3/configuration.html', 'commenter': 'necouchman'}, {'comment': '@necouchman I agree, it looks like I made a mistake. See my latest commit on this branch for the fix 330b2c3ec0c1fa5ed62f4efcb8585f7c287f86c9', 'commenter': 'DouglasHeriot'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/PostgreSQLAuthenticationProviderModule.java,"@@ -67,9 +67,18 @@ public PostgreSQLAuthenticationProviderModule(PostgreSQLEnvironment environment)
         myBatisProperties.setProperty(""mybatis.pooled.pingEnabled"", ""true"");
         myBatisProperties.setProperty(""mybatis.pooled.pingQuery"", ""SELECT 1"");
 
+        // Only set if > 0. Underlying backend does not take 0 as not-set.
+        int defaultStatementTimeout = environment.getPostgreSQLDefaultStatementTimeout();
+        if(defaultStatementTimeout > 0) {","[{'comment': 'Style issue that it took me a long time to learn (and I still get wrong sometimes).\r\n\r\nIn the words of @mike-jumper, ""if is not a function"" - so should be `if (defaultStatementTimeout > 0) {` (with a space between the `if` and the condition block.', 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/PostgreSQLEnvironment.java,"@@ -47,6 +47,21 @@
      */
     private static final int DEFAULT_PORT = 5432;
 
+    /**
+     * The default defaultStatementTimeout (in seconds),
+     * if POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT is not specified.
+     * Default to 0 (no timeout, property won't be set)
+     * https://mybatis.org/mybatis-3/configuration.html
+     */
+    private static final int DEFAULT_DEFAULT_STATEMENT_TIMEOUT = 0;","[{'comment': ""I think we should probably keep it to one `DEFAULT` here :-).  I see what you were going for, but I don't think the extra `DEFAULT` is necessary - it makes perfect sense (and, arguably, more sense) without it."", 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/PostgreSQLGuacamoleProperties.java,"@@ -92,6 +92,30 @@ private PostgreSQLGuacamoleProperties() {}
 
     };
 
+    /**
+     * Sets the number of seconds the driver will wait for","[{'comment': 'This is a bit of a nitpick, but the below statement doesn\'t actually ""set"" anything.  It is a property that can be used to set it.  Take a look at some of the other properties around this - for example, ""The password used to authenticate...""  This can probably be simplified to something similar to that.', 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/PostgreSQLGuacamoleProperties.java,"@@ -92,6 +92,30 @@ private PostgreSQLGuacamoleProperties() {}
 
     };
 
+    /**
+     * Sets the number of seconds the driver will wait for
+     * a response from the database.
+     */
+    public static final IntegerGuacamoleProperty
+            POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT = new IntegerGuacamoleProperty(){
+
+        @Override
+        public String getName() { return ""postgresql-default-statement-timeout""; }
+
+    };
+
+    /**
+     * Sets the number of seconds the driver will wait in a read() call","[{'comment': ""As above, this isn't setting anything, so more direct language would probably be better, here."", 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/PostgreSQLEnvironment.java,"@@ -47,6 +47,21 @@
      */
     private static final int DEFAULT_PORT = 5432;
 
+    /**
+     * The default defaultStatementTimeout (in seconds),
+     * if POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT is not specified.
+     * Default to 0 (no timeout, property won't be set)
+     * https://mybatis.org/mybatis-3/configuration.html","[{'comment': 'A couple things for this comment block:\r\n* I\'d avoid using the actual variable name (`defaultStatementTimeout`) and just make it read like ""The default statement timeout...""\r\n* We don\'t really link to outside documentation for any of the other properties, and I\'m not sure it\'s worth starting for these two, so I\'d remove the links to external sites.\r\n* For the explanation for ""Default to 0,"" something more verbose might be appropriate: ""Setting this value to 0 (the default) will result in...""', 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLGuacamoleProperties.java,"@@ -94,6 +94,30 @@ private PostgreSQLGuacamoleProperties() {}
 
     };
 
+    /**
+     * The number of seconds the driver will wait for
+     * a response from the database.
+     */
+    public static final IntegerGuacamoleProperty
+            POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT = new IntegerGuacamoleProperty(){","[{'comment': 'Please put a space between `()` and `{`.', 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLGuacamoleProperties.java,"@@ -94,6 +94,30 @@ private PostgreSQLGuacamoleProperties() {}
 
     };
 
+    /**
+     * The number of seconds the driver will wait for
+     * a response from the database.
+     */
+    public static final IntegerGuacamoleProperty
+            POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT = new IntegerGuacamoleProperty(){
+
+        @Override
+        public String getName() { return ""postgresql-default-statement-timeout""; }
+
+    };
+
+    /**
+     * The number of seconds the driver will wait in a read() call
+     * on the TCP connection to the database.
+     */
+    public static final IntegerGuacamoleProperty
+            POSTGRESQL_SOCKET_TIMEOUT = new IntegerGuacamoleProperty(){","[{'comment': 'Space between `()` and `{`, please.', 'commenter': 'necouchman'}]"
488,guacamole-docker/bin/start.sh,"@@ -354,10 +354,18 @@ END
         ""postgresql-default-max-group-connections-per-user"" \
         ""$POSTGRES_DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER""
 
+    set_optional_property               \
+        ""postgresql-default-statement-timeout"" \","[{'comment': 'Please line up the trailing `\\`.', 'commenter': 'necouchman'}, {'comment': 'These two lines still do not appear to line up the trailing slashes.', 'commenter': 'necouchman'}]"
488,guacamole-docker/bin/start.sh,"@@ -354,10 +354,18 @@ END
         ""postgresql-default-max-group-connections-per-user"" \
         ""$POSTGRES_DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER""
 
+    set_optional_property               \
+        ""postgresql-default-statement-timeout"" \
+        ""$POSTGRES_DEFAULT_STATEMENT_TIMEOUT""
+
     set_optional_property          \
         ""postgresql-user-required"" \
         ""$POSTGRES_USER_REQUIRED""
 
+    set_optional_property               \
+        ""postgresql-socket-timeout"" \","[{'comment': 'Please line up the trailing `\\`', 'commenter': 'necouchman'}, {'comment': 'Trailing slashes are still not lined up, here.', 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLEnvironment.java,"@@ -249,6 +265,41 @@ public String getPostgreSQLUsername() throws GuacamoleException {
     public String getPostgreSQLPassword() throws GuacamoleException {
         return getRequiredProperty(PostgreSQLGuacamoleProperties.POSTGRESQL_PASSWORD);
     }
+    
+    /**
+     * Returns the defaultStatementTimeout set for PostgreSQL connections.
+     * If unspecified, this will be the default 0,
+     * and should not be passed through to the backend.
+     * 
+     * @return
+     *     The statement timeout (in seconds)
+     *
+     * @throws GuacamoleException 
+     *     If an error occurs while retrieving the property value.
+     */
+    public int getPostgreSQLDefaultStatementTimeout() throws GuacamoleException {
+        return getProperty(
+            PostgreSQLGuacamoleProperties.POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT,
+            DEFAULT_STATEMENT_TIMEOUT
+        );
+    }
+    
+    /**
+     * Returns the socketTimeout property to set on PostgreSQL connections.
+     * If unspecified, this will be the default to 0 (no timeout)","[{'comment': 'Probably should either be:\r\n> this will default to\r\n\r\nor:\r\n> this will be the default of', 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLEnvironment.java,"@@ -48,6 +48,22 @@
      */
     private static final int DEFAULT_PORT = 5432;
 
+    /**
+     * The default number of seconds the driver will wait for a response from
+     * the database. A value of 0 (the default) means the timeout is disabled.
+     */
+    private static final int DEFAULT_STATEMENT_TIMEOUT = 0;
+
+    /**
+     * The default timeout (in seconds) used for socket read operations.
+     * If reading from the server takes longer than this value, the
+     * connection is closed. This can be used to handle network problems
+     * such as a dropped connection to the database. Similar to 
+     * DEFAULT_STATEMENT_TIMEOUT, it will also abort queries that take too ","[{'comment': 'Two comments, here:\r\n* You say ""similar to DEFAULT_STATEMENT_TIMEOUT"", but there\'s no mention of aborting queries on the above timeout.\r\n* It looks like most of the documentation around what these two additional parameters do is here in the `DEFAULT_` sections, rather than down in the `PostgreSQLGuacamoleProperties.java` file.  If you look at the documentation of other `DEFAULT_`s around this, you\'ll see that the documentation is more succinct and references the actual properties.  I suggest doing the same with these two.', 'commenter': 'necouchman'}]"
488,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/PostgreSQLAuthenticationProviderModule.java,"@@ -70,6 +70,12 @@ public PostgreSQLAuthenticationProviderModule(PostgreSQLEnvironment environment)
         myBatisProperties.setProperty(""mybatis.pooled.pingEnabled"", ""true"");
         myBatisProperties.setProperty(""mybatis.pooled.pingQuery"", ""SELECT 1"");
 
+        // Only set if > 0. Underlying backend does not take 0 as not-set.
+        int defaultStatementTimeout = environment.getPostgreSQLDefaultStatementTimeout();
+        if (defaultStatementTimeout > 0) {
+            myBatisProperties.setProperty(""mybatis.configuration.defaultStatementTimeout"", String.valueOf(defaultStatementTimeout));","[{'comment': 'Might be good to break this line somewhere - this is a looooooooooooooong line :-).', 'commenter': 'necouchman'}]"
489,guacamole-docker/bin/start.sh,"@@ -683,6 +683,66 @@ END
     ln -s /opt/guacamole/cas/guacamole-auth-*.jar   ""$GUACAMOLE_EXT""
 }
 
+##
+## Sets up Tomcat's remote IP valve that allows gathering the remote IP
+## from headers set by a remote proxy
+##
+enable_remote_ip_valve() {
+    # Check the required variables
+    if [ -z ""$GUACAMOLE_PROXY_ALLOWED_IPS_REGEX"" ]; then
+        cat <<END
+FATAL: Missing required environment variables
+-------------------------------------------------------------------------------
+If using the Tomcat RemoteIPValve preseed, you must provide each of the
+following environment variables:
+
+    GUACAMOLE_PROXY_ALLOWED_IPS_REGEX   The regex of addresses allowed to set
+                                        the remote IP of the client via
+                                        transmission of specific headers
+END
+        exit 1
+    fi
+
+    # Set reasonable defaults if optional variables have not been provided
+    if [ -z ""$GUACAMOLE_PROXY_IP_HEADER"" ]; then
+        GUACAMOLE_PROXY_IP_HEADER='X-Forwarded-For'
+        echo ""Defaulted RemoteIPValve IP header to: $GUACAMOLE_PROXY_IP_HEADER""
+    fi
+    if [ -z ""$GUACAMOLE_PROXY_PROTOCOL_HEADER"" ]; then
+        GUACAMOLE_PROXY_PROTOCOL_HEADER='X-Forwarded-Proto'
+        echo ""Defaulted RemoteIPValve protocol header to: $GUACAMOLE_PROXY_PROTOCOL_HEADER""
+    fi
+    if [ -z ""$GUACAMOLE_PROXY_BY_HEADER"" ]; then
+        GUACAMOLE_PROXY_BY_HEADER='X-Forwarded-By'
+        echo ""Defaulted RemoteIPValve source header to: $GUACAMOLE_PROXY_BY_HEADER""
+    fi
+
+    # Build the new Tomcat configuration
+    cat > /tmp/valve.xml <<EOF
+        <Valve className=""org.apache.catalina.valves.RemoteIpValve""
+          internalProxies=""$GUACAMOLE_PROXY_ALLOWED_IPS_REGEX""
+          remoteIpHeader=""$GUACAMOLE_PROXY_IP_HEADER""
+          remoteIpProxiesHeader=""$GUACAMOLE_PROXY_BY_HEADER""
+          protocolHeader=""$GUACAMOLE_PROXY_PROTOCOL_HEADER"" />
+EOF
+
+    # Get the line where the Host configuration ends
+    LINEN=$(grep -n '</Host>' /usr/local/tomcat/conf/server.xml | cut -d ':' -f 1)
+
+    # Split the file in 2 around the Host configuration
+    head -n ""$(( LINEN - 1 ))"" < /usr/local/tomcat/conf/server.xml > /tmp/head.xml
+    tail -n ""+$LINEN"" < /usr/local/tomcat/conf/server.xml > /tmp/tail.xml
+
+    # Reassemble the file
+    cat /tmp/head.xml /tmp/valve.xml /tmp/tail.xml > /usr/local/tomcat/conf/server.xml
+
+    # Cleanup
+    rm -f \
+        /tmp/head.xml \
+        /tmp/tail.xml \
+        /tmp/valve.xml
+}
+","[{'comment': 'Let\'s replace the whole `enable_remote_ip_valve` function with the following :\r\n```\r\nenable_remote_ip_valve() {\r\n    sed -i ""s|^\\(\\(\\s\\)\\+\\)</Host>|\\1\\2\\2<Valve \\\r\n    className=\\""org.apache.catalina.valves.RemoteIpValve\\"" \\\r\n    ${GUACAMOLE_PROXY_ALLOWED_IPS_REGEX:+internalProxies=\\""$GUACAMOLE_PROXY_ALLOWED_IPS_REGEX\\""} \\\r\n    ${GUACAMOLE_PROXY_IP_HEADER:+remoteIpHeader=\\""$GUACAMOLE_PROXY_IP_HEADER\\""} \\\r\n    ${GUACAMOLE_PROXY_BY_HEADER:+remoteIpProxiesHeader=\\""$GUACAMOLE_PROXY_BY_HEADER\\""} \\\r\n    ${GUACAMOLE_PROXY_PROTOCOL_HEADER:+protocolHeader=\\""$GUACAMOLE_PROXY_PROTOCOL_HEADER\\""} \\\r\n    />\\n\\n\\1</Host>|"" \\\r\n    /usr/local/tomcat/conf/server.xml\r\n}\r\n```\r\nIt has several advantages :\r\n- we update the `server.xml` file inplace, without several temporary files ;\r\n- we keep the safe valve options [default values](https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html) if they are not enforced by the user.', 'commenter': 'benrubson'}]"
489,guacamole-docker/bin/start.sh,"@@ -762,6 +822,11 @@ fi
 set_property ""guacd-hostname"" ""$GUACD_HOSTNAME""
 set_property ""guacd-port""     ""$GUACD_PORT""
 
+# Set up Tomcat RemoteIPValve
+if [ -n ""$GUACAMOLE_PROXY_ALLOWED_IPS_REGEX"" ]; then","[{'comment': 'Let\'s mimic the `TOTP_ENABLED` option :\r\n```suggestion\r\nif [ ""$REMOTE_IP_VALVE_ENABLED"" = ""true"" ]; then\r\n```\r\nSo that we are not enforced to overwrite the default Tomcat value.', 'commenter': 'benrubson'}]"
489,guacamole-docker/bin/start.sh,"@@ -683,6 +683,43 @@ END
     ln -s /opt/guacamole/cas/guacamole-auth-*.jar   ""$GUACAMOLE_EXT""
 }
 
+##
+## Sets up Tomcat's remote IP valve that allows gathering the remote IP
+## from headers set by a remote proxy
+## Upstream documentation: https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html
+##
+enable_remote_ip_valve() {
+    # Use Tomcat defaults if optional variables have not been provided
+    if [ -z ""$GUACAMOLE_PROXY_ALLOWED_IPS_REGEX"" ]; then
+    	echo ""Using default Tomcat allowed IPs regex""
+    fi
+    if [ -z ""$GUACAMOLE_PROXY_IP_HEADER"" ]; then
+        echo ""Using default Tomcat proxy IP header""
+    fi
+    if [ -z ""$GUACAMOLE_PROXY_PROTOCOL_HEADER"" ]; then
+        echo ""Using default Tomcat proxy protocol header""
+    fi
+    if [ -z ""$GUACAMOLE_PROXY_BY_HEADER"" ]; then
+        echo ""Using default Tomcat proxy forwarded by header""
+    fi
+
+    # Build the new Tomcat configuration inplace
+    ## Explaination:
+    ## The initial regex ((\s)+)</Host>
+    ## Matches the spaces before </Host> as \1 and individual spaces as \2, ...
+    ## The replacement will be located at \1\2\2 (original + 2 spaces)
+    ## ${VAR:+expr} expressions yield either empty (thus using Tomcat's default) or our setting
+    ## The last line restores the configuration file original tag at its original indentation
+    sed -i ""s|^\(\(\s\)\+\)</Host>|\1\2\2<Valve \
+	className=\""org.apache.catalina.valves.RemoteIpValve\"" \
+	${GUACAMOLE_PROXY_ALLOWED_IPS_REGEX:+internalProxies=\""$GUACAMOLE_PROXY_ALLOWED_IPS_REGEX\""} \
+	${GUACAMOLE_PROXY_IP_HEADER:+remoteIpHeader=\""$GUACAMOLE_PROXY_IP_HEADER\""} \
+	${GUACAMOLE_PROXY_BY_HEADER:+remoteIpProxiesHeader=\""$GUACAMOLE_PROXY_BY_HEADER\""} \
+	${GUACAMOLE_PROXY_PROTOCOL_HEADER:+protocolHeader=\""$GUACAMOLE_PROXY_PROTOCOL_HEADER\""} \
+	/>\n\1</Host>|"" \
+	/usr/local/tomcat/conf/server.xml
+}","[{'comment': ""I find two main issues with this:\r\n\r\n1. The values supplied via environment variables are not properly escaped for inclusion within XML.\r\n2. It's too complex.\r\n\r\nThere must be a simpler, more readable way to achieve this. Using `envsubst` on our own template `server.xml` with pre-escaped variables, for example."", 'commenter': 'mike-jumper'}]"
489,Dockerfile,"@@ -50,6 +50,9 @@ RUN /opt/guacamole/bin/build-guacamole.sh ""$BUILD_DIR"" /opt/guacamole ""$BUILD_PR
 # For the runtime image, we start with the official Tomcat distribution
 FROM tomcat:${TOMCAT_VERSION}-${TOMCAT_JRE}
 
+# Install XMLStarlet for server.conf alterations","[{'comment': 'server.conf?', 'commenter': 'mike-jumper'}]"
489,Dockerfile,"@@ -50,6 +50,9 @@ RUN /opt/guacamole/bin/build-guacamole.sh ""$BUILD_DIR"" /opt/guacamole ""$BUILD_PR
 # For the runtime image, we start with the official Tomcat distribution
 FROM tomcat:${TOMCAT_VERSION}-${TOMCAT_JRE}
 
+# Install XMLStarlet for server.conf alterations
+RUN apt-get update -qq && apt-get install -y xmlstarlet","[{'comment': 'For Docker images, the package cache should be cleaned after `apt-get` is finished, to avoid unnecessarily increasing the size of the image.\r\n\r\nFor example, in the guacamole-server `Dockerfile`:\r\n\r\nhttps://github.com/apache/guacamole-server/blob/b2ae2fdf003a6854ac42877ce0fce8e88ceb038a/Dockerfile#L143-L147', 'commenter': 'mike-jumper'}]"
489,guacamole-docker/bin/start.sh,"@@ -708,6 +708,58 @@ associate_json() {
     # Add required .jar files to GUACAMOLE_EXT
     ln -s /opt/guacamole/json/guacamole-auth-*.jar ""$GUACAMOLE_EXT""
 }
+##
+## Sets up Tomcat's remote IP valve that allows gathering the remote IP
+## from headers set by a remote proxy
+## Upstream documentation: https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html
+##
+enable_remote_ip_valve() {
+    # Add <Valve> element
+    xmlstarlet edit --inplace \
+        --insert '/Server/Service/Engine/Host/*' --type elem -n Valve \
+        --insert '/Server/Service/Engine/Host/Valve[not(@className)]' --type attr -n className -v org.apache.catalina.valves.RemoteIpValve \
+        $CATALINA_BASE/conf/server.xml
+
+    # Allowed IPs
+    if [ -z ""$GUACAMOLE_PROXY_ALLOWED_IPS_REGEX"" ]; then
+    	echo ""Using default Tomcat allowed IPs regex""","[{'comment': 'Please use 4-space indents per level.', 'commenter': 'mike-jumper'}]"
489,guacamole-docker/bin/start.sh,"@@ -708,6 +708,58 @@ associate_json() {
     # Add required .jar files to GUACAMOLE_EXT
     ln -s /opt/guacamole/json/guacamole-auth-*.jar ""$GUACAMOLE_EXT""
 }
+##
+## Sets up Tomcat's remote IP valve that allows gathering the remote IP
+## from headers set by a remote proxy
+## Upstream documentation: https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html
+##
+enable_remote_ip_valve() {
+    # Add <Valve> element
+    xmlstarlet edit --inplace \
+        --insert '/Server/Service/Engine/Host/*' --type elem -n Valve \
+        --insert '/Server/Service/Engine/Host/Valve[not(@className)]' --type attr -n className -v org.apache.catalina.valves.RemoteIpValve \
+        $CATALINA_BASE/conf/server.xml
+
+    # Allowed IPs
+    if [ -z ""$GUACAMOLE_PROXY_ALLOWED_IPS_REGEX"" ]; then","[{'comment': '`GUACAMOLE_PROXY_ALLOWED_IPS_REGEX`, `GUACAMOLE_PROXY_IP_HEADER`, etc. feel redundant with their `GUACAMOLE_` prefix, which is not used by any of the other Docker-specific environment variables for the `guacamole/guacamole` image. It might also result in some confusion, as guacd is sometimes referred to as the Guacamole proxy daemon.', 'commenter': 'mike-jumper'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLSSLMode.java,"@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.mysql.conf;
+
+/**
+ * Possible values for enabling SSL within the MySQL Driver.
+ */
+public enum MySQLSSLMode {
+    
+    // Disable SSL altogether.
+    DISABLED,
+    
+    // Prefer SSL, but fall-back to non-SSL.
+    PREFERRED,
+    
+    // Require SSL, but perform no verification.
+    REQUIRED,
+    
+    // Require SSL and verify a valid authority.
+    VERIFY_CA,
+    
+    // Require SSL and verify a valid authority and server certificate.
+    VERIFY_IDENTITY;","[{'comment': 'Looks good, but please format for JavaDoc.', 'commenter': 'mike-jumper'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLSSLProperty.java,"@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.mysql.conf;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.properties.GuacamoleProperty;
+
+/**
+ *
+ * @author nick_couchman
+ */","[{'comment': 'Whoops - this is just the default IDE placeholder. Missing the actual comment here.', 'commenter': 'mike-jumper'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLSSLMode.java,"@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.postgresql.conf;
+
+/**
+ * Possible values for PostgreSQL SSL connectivity.
+ */
+public enum PostgreSQLSSLMode {
+    
+    // Do not use SSL to connect to server.
+    DISABLE(""disable""),
+    
+    // Allow SSL connections, but try non-SSL, first.
+    ALLOW(""allow""),
+    
+    // Prefer SSL connections, falling back to non-SSL if that fails.
+    PREFER(""prefer""),
+    
+    // Require SSL connections, do not connect if SSL fails.
+    REQUIRE(""require""),
+    
+    // Require SSL connections and validate the CA certificate.
+    VERIFY_CA(""verify-ca""),
+    
+    // Require SSL connections and validate both the CA and server certificates.
+    VERIFY_FULL(""verify-full"");
+    
+    // The value actually passed on to the JDBC driver.
+    private String configValue;","[{'comment': 'Same here - these should be formatted for JavaDoc.', 'commenter': 'mike-jumper'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLSSLProperty.java,"@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.postgresql.conf;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.properties.GuacamoleProperty;
+
+/**
+ *
+ * @author nick_couchman
+ */","[{'comment': 'Oops, also here - accidental IDE placeholder comment.', 'commenter': 'mike-jumper'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLSSLMode.java,"@@ -0,0 +1,104 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.postgresql.conf;
+
+import org.apache.guacamole.properties.EnumGuacamoleProperty.PropertyValue;
+
+/**
+ * Possible values for PostgreSQL SSL connectivity.
+ */
+public enum PostgreSQLSSLMode {
+    
+    /**
+     * Do not use SSL to connect to server.
+     */
+    @PropertyValue(""disable"")
+    DISABLE(""disable""),
+    
+    /**
+     * Allow SSL connections, but try non-SSL, first.
+     */
+    @PropertyValue(""allow"")
+    ALLOW(""allow""),
+    
+    /**
+     * Prefer SSL connections, falling back to non-SSL if that fails.
+     */
+    @PropertyValue(""prefer"")
+    PREFER(""prefer""),
+    
+    /**
+     * Require SSL connections, do not connect if SSL fails.
+     */
+    @PropertyValue(""require"")
+    REQUIRE(""require""),
+    
+    /**
+     * Require SSL connections and validate the CA certificate.
+     */
+    @PropertyValue(""verify-ca"")
+    VERIFY_CA(""verify-ca""),
+    
+    /**
+     * Require SSL connections and validate both the CA and server certificates.
+     */
+    @PropertyValue(""verify-full"")
+    VERIFY_FULL(""verify-full"");
+    
+    /**
+     * The value actually passed on to the JDBC driver.
+     */
+    private final String configValue;
+    
+    /**
+     * Create a new instance of this enum with the given configValue as the
+     * value that will be used when configuring the JDBC driver.
+     * 
+     * @param configValue
+     *     The value to use when configuring the JDBC driver.
+     */
+    PostgreSQLSSLMode(String configValue) {
+        this.configValue = configValue;
+    }
+    
+    @Override
+    public String toString() {
+        return configValue;
+    }
+    
+    /**
+     * Given the String value, determine the correct enum value that matches
+     * the string, or null if there is no match.
+     * 
+     * @param value
+     *     The String value to test to find a match.
+     * 
+     * @return 
+     *     The enum value matching the given String.
+     */
+    public static PostgreSQLSSLMode getValue(String value) {","[{'comment': 'Is this still used?', 'commenter': 'mike-jumper'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/MySQLAuthenticationProviderModule.java,"@@ -79,6 +84,37 @@ public MySQLAuthenticationProviderModule(MySQLEnvironment environment)
         // Allow use of multiple statements within a single query
         driverProperties.setProperty(""allowMultiQueries"", ""true"");
         
+        // Set the SSL mode to use when conncting
+        MySQLSSLMode sslMode = environment.getMySQLSSLMode();
+        driverProperties.setProperty(""sslMode"", sslMode.toString());","[{'comment': 'With `MySQLSSLMode` now refactored to rely on `@PropertyValue`, this may not return the value you expect. The `MySQLSSLMode` enum should expose a means of retrieving the value required by the JDBC driver.', 'commenter': 'mike-jumper'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/MySQLAuthenticationProviderModule.java,"@@ -79,6 +84,37 @@ public MySQLAuthenticationProviderModule(MySQLEnvironment environment)
         // Allow use of multiple statements within a single query
         driverProperties.setProperty(""allowMultiQueries"", ""true"");
         
+        // Set the SSL mode to use when conncting
+        MySQLSSLMode sslMode = environment.getMySQLSSLMode();
+        driverProperties.setProperty(""sslMode"", sslMode.toString());
+        
+        // Set legacy properties
+        if (sslMode == MySQLSSLMode.DISABLED)
+            driverProperties.setProperty(""useSSL"", ""false"");","[{'comment': 'If `MySQLSSLMode.DISABLED` represents `useSSL=false`, is the value set for `sslMode` above correct in this case? Is specifying `sslMode` legal if `useSSL=false` is also specified?', 'commenter': 'mike-jumper'}, {'comment': 'I think so - basically, the only case where `useSSL` will be set to `false` will be where `sslMode` is already set to `disabled`.  In every other case of `sslMode`, `useSSL` will be set to `true`, which, based on some feedback and documentation, is required for different (older) versions of MySQL and/or MariaDB.', 'commenter': 'necouchman'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLSSLMode.java,"@@ -0,0 +1,104 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.postgresql.conf;
+
+import org.apache.guacamole.properties.EnumGuacamoleProperty.PropertyValue;
+
+/**
+ * Possible values for PostgreSQL SSL connectivity.
+ */
+public enum PostgreSQLSSLMode {
+    
+    /**
+     * Do not use SSL to connect to server.
+     */
+    @PropertyValue(""disable"")
+    DISABLE(""disable""),
+    
+    /**
+     * Allow SSL connections, but try non-SSL, first.
+     */
+    @PropertyValue(""allow"")
+    ALLOW(""allow""),
+    
+    /**
+     * Prefer SSL connections, falling back to non-SSL if that fails.
+     */
+    @PropertyValue(""prefer"")
+    PREFER(""prefer""),
+    
+    /**
+     * Require SSL connections, do not connect if SSL fails.
+     */
+    @PropertyValue(""require"")
+    REQUIRE(""require""),
+    
+    /**
+     * Require SSL connections and validate the CA certificate.
+     */
+    @PropertyValue(""verify-ca"")
+    VERIFY_CA(""verify-ca""),
+    
+    /**
+     * Require SSL connections and validate both the CA and server certificates.
+     */
+    @PropertyValue(""verify-full"")
+    VERIFY_FULL(""verify-full"");
+    
+    /**
+     * The value actually passed on to the JDBC driver.
+     */
+    private final String configValue;
+    
+    /**
+     * Create a new instance of this enum with the given configValue as the
+     * value that will be used when configuring the JDBC driver.
+     * 
+     * @param configValue
+     *     The value to use when configuring the JDBC driver.
+     */
+    PostgreSQLSSLMode(String configValue) {
+        this.configValue = configValue;
+    }
+    
+    @Override
+    public String toString() {
+        return configValue;
+    }","[{'comment': 'I suggest providing access to this value in a way that is specifically tied to the fact that it is the configuration value for the JDBC driver (and documented as such), rather than overriding `toString()`.', 'commenter': 'mike-jumper'}]"
492,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLSSLMode.java,"@@ -0,0 +1,89 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.mysql.conf;
+
+import org.apache.guacamole.properties.EnumGuacamoleProperty.PropertyValue;
+
+/**
+ * Possible values for enabling SSL within the MySQL Driver.
+ */
+public enum MySQLSSLMode {
+    
+    /**
+     * Do not use SSL at all.
+     */
+    @PropertyValue(""disabled"")
+    DISABLED(""disabled""),","[{'comment': 'According to https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html:\r\n\r\n> ... The following values are allowed: ""DISABLED"" - Establish unencrypted connections; ""PREFERRED"" - (default) Establish encrypted connections if the server enabled them, otherwise fall back to unencrypted connections; ""REQUIRED"" - Establish secure connections if the server enabled them, fail otherwise; ""VERIFY_CA"" - Like ""REQUIRED"" but additionally verify the server TLS certificate against the configured Certificate Authority (CA) certificates; ""VERIFY_IDENTITY"" - Like ""VERIFY_CA"", but additionally verify that the server certificate matches the host to which the connection is attempted.\r\n\r\nAre the current strings for `driverValue` listed here (""disabled"", ""verify-ca"", etc.) correct?', 'commenter': 'mike-jumper'}, {'comment': 'Ah, that explains why I was trying to use `toString()` - just seemed to match up exactly.  They should be correct, now.', 'commenter': 'necouchman'}]"
496,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/conf/ConfigurationService.java,"@@ -317,7 +318,27 @@ public int getMaxReferralHops() throws GuacamoleException {
     public ExprNode getUserSearchFilter() throws GuacamoleException {
         return environment.getProperty(
             LDAPGuacamoleProperties.LDAP_USER_SEARCH_FILTER,
-            new PresenceNode(""objectClass"")
+            new EqualityNode(""objectClass"",""user"")","[{'comment': ""This seems out-of-scope for this particular pull request.  We might discuss the merits of doing this at some point, but I don't think it should be included in an issue to implement the group filter."", 'commenter': 'necouchman'}, {'comment': '+1\r\n\r\nAdding the option to narrow by `objectClass` would be a separate feature, the value that is used should not be hard-coded to `user`, and we should avoid breaking compatibility with existing deployments which have been relying on the former `*` filter for ages.\r\n\r\nSame for the group filter - if the deployment in question needs to narrow things, then specifying custom filters will allow that. Beyond the filters, the different base DNs should be the only restrictions applied unless the administrator configures otherwise.', 'commenter': 'mike-jumper'}, {'comment': '> +1\r\n> \r\n> Adding the option to narrow by `objectClass` would be a separate feature, the value that is used should not be hard-coded to `user`, and we should avoid breaking compatibility with existing deployments which have been relying on the former `*` filter for ages.\r\n> \r\n> Same for the group filter - if the deployment in question needs to narrow things, then specifying custom filters will allow that. Beyond the filters, the different base DNs should be the only restrictions applied unless the administrator configures otherwise.\r\n\r\nPlease note that description inside code states the following:\r\n`    /**\r\n     * Returns the search filter that should be used when querying the\r\n     * LDAP server for Guacamole users.  If no filter is specified,\r\n     * a default of ""(objectClass=user)"" is returned.\r\n     *\r\n     * @return\r\n     *     The search filter that should be used when querying the\r\n     *     LDAP server for users that are valid in Guacamole, or\r\n     *     ""(objectClass=user)"" if not specified.\r\n     *\r\n     * @throws GuacamoleException\r\n     *     If guacamole.properties cannot be parsed.\r\n     */`\r\n**If no filter is specified, a default of ""(objectClass=user)"" is returned.**\r\nSo, that\'s why I corrected the code.', 'commenter': 'echu2013'}]"
496,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/group/UserGroupService.java,"@@ -79,17 +79,17 @@
      * @throws GuacamoleException
      *     If guacamole.properties cannot be parsed.
      */
-    private ExprNode getGroupSearchFilter() throws GuacamoleException {
+    private ExprNode buildGroupSearchFilter() throws GuacamoleException {
 
         // Explicitly exclude guacConfigGroup object class only if it should
         // be assumed to be defined (query may fail due to no such object
         // class existing otherwise)
         if (confService.getConfigurationBaseDN() != null)
             return new NotNode(new EqualityNode(""objectClass"",""guacConfigGroup""));
 
-        // Read any object as a group if LDAP is not being used for connection
+        // Read objects from LDAP with filter defined by ""ldap-group-search-filter"" as a group if LDAP is not being used for connection","[{'comment': ""This should probably just be made a multi-line comment - it's pretty long."", 'commenter': 'necouchman'}, {'comment': '@necouchman sorry, i am pretty newie with contributing online and I make some mistakes. You are right about The out of scope stuff.. And I will rewrite the ""pretty long"" comment, how could I update this pull request?', 'commenter': 'echu2013'}]"
496,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/group/UserGroupService.java,"@@ -79,17 +79,17 @@
      * @throws GuacamoleException
      *     If guacamole.properties cannot be parsed.
      */
-    private ExprNode getGroupSearchFilter() throws GuacamoleException {
+    private ExprNode buildGroupSearchFilter() throws GuacamoleException {","[{'comment': 'Why is this being renamed?', 'commenter': 'mike-jumper'}, {'comment': 'I though it was more descriptive this name rather than get, also to avoid confusion with \r\n`        return confService.getGroupSearchFilter();\r\n`', 'commenter': 'echu2013'}]"
497,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/conf/ConfigurationService.java,"@@ -321,6 +322,26 @@ public ExprNode getUserSearchFilter() throws GuacamoleException {
         );
     }
 
+    /**
+     * Returns the search filter that should be used when querying the
+     * LDAP server for Guacamole groups.  If no filter is specified,
+     * a default of ""(objectClass=group)"" is returned.
+     *
+     * @return
+     *     The search filter that should be used when querying the
+     *     LDAP server for groups that are valid in Guacamole, or
+     *     ""(objectClass=group)"" if not specified.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public ExprNode getGroupSearchFilter() throws GuacamoleException {
+        return environment.getProperty(
+            LDAPGuacamoleProperties.LDAP_GROUP_SEARCH_FILTER,
+            new EqualityNode(""objectClass"",""group"")","[{'comment': 'I think @mike-jumper\'s vote here was to make the default the `PresenceNode(""objectClass"")`, similar to how users are done.  I\'m good with either one, but it does seem more consistent at present to stick with that.', 'commenter': 'necouchman'}, {'comment': ""I think he observed the change to pre-existing ldap-user-search-filter function, that it's out of the scope of this GUACAMOLE-996"", 'commenter': 'echu2013'}, {'comment': 'Yes, modifying the user one is certainly out-of-scope - I\'m not just not sure if we should be changing the default for user searches at this point vs. providing a way for people to change it if they want to.  In the end the question becomes, ""How many confused admins are we going to have out there when they upgrade from 1.2.0 to 1.3.0 and all of the sudden their group searches don\'t work as expected?""  Changing defaults should be done with care.', 'commenter': 'necouchman'}, {'comment': ""@mike-jumper: Thoughts on this?  The above change will essentially change the default group filter from `(objectClass=*)` to `(objectClass=group)`.  While I suspect that's probably okay and what we want in the long-run, I worry about catching unsuspecting admins off-guard..."", 'commenter': 'necouchman'}, {'comment': 'I think we should lean toward Principle of Least Surprise and maintain the existing `(objectClass=*)` behavior by default. The default behavior is intended to rely on LDAP directory structure to determine which objects should be returned and classified as users or groups, and I think it makes sense to continue to use that as the default behavior.\r\n\r\nFilters like `ldap-user-search-filter` and soon-to-be-implemented `ldap-group-search-filter` exist to allow for more complex and intermingled cases, but default filters would involve too many assumptions and could break existing deployments.', 'commenter': 'mike-jumper'}]"
497,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/group/UserGroupService.java,"@@ -87,9 +87,9 @@ private ExprNode getGroupSearchFilter() throws GuacamoleException {
         if (confService.getConfigurationBaseDN() != null)
             return new NotNode(new EqualityNode(""objectClass"",""guacConfigGroup""));","[{'comment': 'The filter should also be factored in right here - that is, if the user has configured the configuration DN, the configured search filter should, at the very least, be `AndNode`d together here with this `NotNode` to remove `guacConfigGroup` objects from the results.', 'commenter': 'necouchman'}, {'comment': 'You say... Retrieve everything under `configurationbaseDN ` **NOT** containing `guacConfigGroup `right?', 'commenter': 'echu2013'}, {'comment': ""Retrieve everything under `groupBaseDN` NOT containing `guacConfigGroup`.  Basically, the previous code made the assumption that, if you've configured a DN for configuration items you've also extended your LDAP schema to include the `guacConfigGroup` schema item, and that you do not want those being returned by the groups filter, you want them being returned in the config search.  That is still the case in the line mentioned above, but the new group filter needs to be and-ed with that logic."", 'commenter': 'necouchman'}, {'comment': '@necouchman do you find more convinient to replace ""default"" value of my proposed configuration item **ldap-group-search-filter** from `EqualityNode(""objectClass"",""group"")` to the original behaviour` PresenceNode(""objectClass"")`? \r\nIn this way, if admin does not specify such filter then original behavior will be inplace. Otherwise, they will have the possibility of fine-grained control of which Groups shall be retrieved.\r\n', 'commenter': 'echu2013'}, {'comment': 'My point, here, is that, as you have this implemented, when `ldap-config-base-dn` is set, the new `ldap-group-search-filter` property will be completely ignored, and you\'ll always end up with the following group filter:\r\n`(!(objectClass=guacConfigGroup)))`\r\n\r\nSo, the lines above should be something like:\r\n```\r\nif (confService.getConfigurationBaseDN() != null)\r\n    return new AndNode(new NotNode(new EqualityNode(""objectClass"",""guacConfigGroup""), confService.getGroupSearchFilter());\r\n```\r\nAssuming the default group filter, this will result in an LDAP filter like this:\r\n`(&(!(objectClass=guacConfigGroup))(objectClass=group))`', 'commenter': 'necouchman'}]"
500,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleServerErrorCommandException.java,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole;
+
+import org.apache.guacamole.protocol.GuacamoleStatus;
+
+/**
+ * The exception thrown when the Guacamole server explicitly sends an error
+ * command to the client. The error message and status code reflect the arguments
+ * of the error command as determined by the server.
+ */
+public class GuacamoleServerErrorCommandException extends GuacamoleServerException {","[{'comment': 'Regarding `GuacamoleServerErrorCommandException` and its description, ""error command"" isn\'t terminology used within the Guacamole protocol. In this case, the correct term would be ""error instruction"", but I don\'t think simply renaming things to `GuacamoleServerErrorInstructionException` would be a good choice, as that too closely ties the error to the vehicle carrying it. The naming of the exception and the documentation describing the exception should capture the context, rather than the means.\r\n\r\nI suggest something like `GuacamoleHandshakeException`, for an error that prevents the Guacamole protocol handshake from continuing. I\'m sure there are other possibilities.', 'commenter': 'mike-jumper'}, {'comment': ""You're right about the command/instruction thing, I missed it. The problem with `GuacamoleHandshakeException` is that it ties the error to the specific connection phase; an `error` instruction can occur at any time in any phase. I do believe it deserves special semantics to distinguish it from any other error condition, because that allows for very explicit and clear `catch` blocks - this was the original impetus for this PR.\r\n\r\nI honestly couldn't find a more descriptive, and semantically appropriate, name than `GuacamoleServerErrorInstructionException` (adjusting for your comment, of course). Considering any part of it:\r\n* Guacamole can be omitted since it's contextual and present in the package name, but then it won't follow the already-established convention;\r\n* Server can't really be omitted, as it's not denoted by the package and it's semantically important;\r\n* ErrorInstruction is, well, what it is;\r\n* and Exception can be omitted, but that would be against the preexisting convention in this codebase (and the Java ecosystem as a whole).\r\n\r\nI know at this point most people reading this think this is splitting hairs, sorry ladies and gentlemen :-) Serious though @mike-jumper, if you have any better names I'd be happy to take them. This one is a mouthful."", 'commenter': 'holograph'}, {'comment': 'What about adding a static utility method like `fromStatus()` to `GuacamoleServerException`? For example:\r\n\r\n```java\r\npublic static GuacamoleServerException fromStatus(GuacamoleStatus status, String message) {\r\n    ...\r\n}\r\n```\r\n\r\nAs we already provide an exception for each status code, code attempting to connect using `ConfiguredGuacamoleSocket` would be able to handle specific error conditions by catching the appropriate exceptions, rather than catching a new type of exception and inspecting the status.\r\n\r\n', 'commenter': 'mike-jumper'}, {'comment': ""Considering I no longer work for Strigo I don't really have a strong opinion or even a test harness. Feel free to do with this pull request as you will..."", 'commenter': 'holograph'}]"
500,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleServerErrorCommandException.java,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole;
+
+import org.apache.guacamole.protocol.GuacamoleStatus;
+
+/**
+ * The exception thrown when the Guacamole server explicitly sends an error
+ * command to the client. The error message and status code reflect the arguments
+ * of the error command as determined by the server.
+ */
+public class GuacamoleServerErrorCommandException extends GuacamoleServerException {
+    /**
+     * The Guacamole protocol status code, as determined by the server;
+     */
+    private final GuacamoleStatus status;
+
+    /**
+     * Creates a new GuacamoleServerException with the given message and status.
+     *
+     * @param message The error message, as determined by the server where the error
+     *               originated.
+     * @param status The status code, as determined by the server where the error originated.","[{'comment': ""Please follow the style used for documentation elsewhere in the code. For example:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/0091bb1aea14c567c8166f0ed8eadf7c31b6bd6e/guacamole-common/src/main/java/org/apache/guacamole/GuacamoleUpstreamUnavailableException.java#L30-L42\r\n\r\nThe style you've used here is similar to what we used to do, but we migrated away from that since it can be difficult to read, particularly for long variable names. New code should use the new style."", 'commenter': 'mike-jumper'}, {'comment': 'Fixed', 'commenter': 'holograph'}]"
500,guacamole-common/src/main/java/org/apache/guacamole/GuacamoleServerErrorCommandException.java,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole;
+
+import org.apache.guacamole.protocol.GuacamoleStatus;
+
+/**
+ * The exception thrown when the Guacamole server explicitly sends an error
+ * command to the client. The error message and status code reflect the arguments
+ * of the error command as determined by the server.
+ */
+public class GuacamoleServerErrorCommandException extends GuacamoleServerException {
+    /**
+     * The Guacamole protocol status code, as determined by the server;
+     */
+    private final GuacamoleStatus status;
+
+    /**
+     * Creates a new GuacamoleServerException with the given message and status.","[{'comment': 'This should note the name of the exception in question, not `GuacamoleServerException`.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed', 'commenter': 'holograph'}]"
500,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -83,14 +111,24 @@ private GuacamoleInstruction expect(GuacamoleReader reader, String opcode)
         if (instruction == null)
             throw new GuacamoleServerException(""End of stream while waiting for \"""" + opcode + ""\""."");
 
+        // Handle server control commands
+        if (""disconnect"".equals(instruction.getOpcode()))
+            throw new GuacamoleServerException(""Server disconnected while waiting for \"""" + opcode + ""\""."");
+        if (""error"".equals(instruction.getOpcode())) {
+            GuacamoleServerErrorCommandException e = parseServerErrorCommandArgs(instruction.getArgs());
+            if (e == null)
+                throw new GuacamoleServerException(""Invalid command received from server: "" + instruction);","[{'comment': 'These are referred to as instructions, not commands.', 'commenter': 'mike-jumper'}, {'comment': ""Might be better to let it be the responsibility of the function parsing the `error` instruction to decide whether the instruction is valid and throw an appropriate exception if it isn't. This would simplify the logic here and more cleanly separate concerns."", 'commenter': 'mike-jumper'}, {'comment': 'Fixed', 'commenter': 'holograph'}, {'comment': 'Fair enough, incorporated the feedback. After a couple of iterations it does look better, have a look.', 'commenter': 'holograph'}]"
500,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -83,14 +111,24 @@ private GuacamoleInstruction expect(GuacamoleReader reader, String opcode)
         if (instruction == null)
             throw new GuacamoleServerException(""End of stream while waiting for \"""" + opcode + ""\""."");
 
+        // Handle server control commands","[{'comment': 'instructions*', 'commenter': 'mike-jumper'}, {'comment': 'Fixed', 'commenter': 'holograph'}]"
500,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -63,12 +64,39 @@
      */
     private GuacamoleProtocolVersion protocolVersion =
             GuacamoleProtocolVersion.VERSION_1_0_0;
-    
+
+    /**
+     * Parses the arguments for the Guacamole ""error"" server command and returns
+     * the corresponding exception.
+     * @param args The arguments as provided by the server command.
+     * @return An instance of {@link GuacamoleServerErrorCommandException} configured
+     *         with the server-provided arguments, or {@literal null} if the specified
+     *         arguments are invalid.
+     */
+    private static GuacamoleServerErrorCommandException parseServerErrorCommandArgs(List<String> args) {
+        if (args == null || args.size() != 2)
+            return null;","[{'comment': ""1. It's pretty common for instructions to be extended down the line by adding new arguments, relying on older implementations to ignore any additional arguments. I think it would be better here to test `args.size() < 2`.\r\n2. Under what circumstance would `args` be `null`?"", 'commenter': 'mike-jumper'}, {'comment': ""1. Fixed\r\n2. None, apparently. I've changed the signature per your other comments, so this is no longer an issue."", 'commenter': 'holograph'}]"
500,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -63,12 +64,39 @@
      */
     private GuacamoleProtocolVersion protocolVersion =
             GuacamoleProtocolVersion.VERSION_1_0_0;
-    
+
+    /**
+     * Parses the arguments for the Guacamole ""error"" server command and returns
+     * the corresponding exception.
+     * @param args The arguments as provided by the server command.
+     * @return An instance of {@link GuacamoleServerErrorCommandException} configured
+     *         with the server-provided arguments, or {@literal null} if the specified
+     *         arguments are invalid.
+     */
+    private static GuacamoleServerErrorCommandException parseServerErrorCommandArgs(List<String> args) {
+        if (args == null || args.size() != 2)
+            return null;
+
+        int code;
+        try {
+            code = Integer.parseInt(args.get(1));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+        GuacamoleStatus status = GuacamoleStatus.fromGuacamoleStatusCode(code);
+        return (status == null)
+                ? null
+                : new GuacamoleServerErrorCommandException(args.get(0), status);
+    }
+
     /**
      * Waits for the instruction having the given opcode, returning that
      * instruction once it has been read. If the instruction is never read,
      * an exception is thrown.
-     * 
+     *
+     * Respects server control commands that are allowed during the handshake","[{'comment': 'instructions*', 'commenter': 'mike-jumper'}, {'comment': 'Fixed', 'commenter': 'holograph'}]"
501,extensions/guacamole-auth-cas/src/main/resources/translations/ru.json,"@@ -0,0 +1,12 @@
+{
+
+    ""DATA_SOURCE_CAS"" : {
+        ""NAME"" : ""Бэкенд CAS SSO""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_TICKET""        : """",","[{'comment': ""You should be able to leave this out of the translation, as it doesn't need to be re-translated from the original."", 'commenter': 'necouchman'}]"
501,extensions/guacamole-auth-duo/src/main/resources/translations/ru.json,"@@ -0,0 +1,13 @@
+{
+
+    ""DATA_SOURCE_DUO"" : {
+        ""NAME"" : ""Бэкенд Duo TFA""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_GUAC_DUO_SIGNED_RESPONSE"" : """",","[{'comment': 'Same, here, as in the CAS module - you can leave this out.', 'commenter': 'necouchman'}]"
501,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/ru.json,"@@ -3,10 +3,110 @@
     ""LOGIN"" : {
 
         ""ERROR_PASSWORD_BLANK""    : ""@:APP.ERROR_PASSWORD_BLANK"",
+        ""ERROR_PASSWORD_SAME""     : ""Новый пароль должен отличаться от текущего просроченного."",
         ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
+        ""ERROR_NOT_VALID""         : ""Этот аккаунт на данный момент недействителен."",
+        ""ERROR_NOT_ACCESSIBLE""    : ""Доступ к этому аккаунту в данный момент запрещен. Попробуйте позже."",
+
+        ""INFO_PASSWORD_EXPIRED"" : ""Ваш пароль просрочен и требует смены. Пожалуйста, введите новый пароль для продолжения."",
 
         ""FIELD_HEADER_NEW_PASSWORD""         : ""Новый пароль"",
-        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""Подтверждение пароля""
+        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""Подтвердите новый пароль""
+
+    },
+
+    ""CONNECTION_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Максимальное число соединений:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Максимальное число соединений на пользователя:"",
+
+        ""FIELD_HEADER_FAILOVER_ONLY""            : ""Использовать только для отказоустойчивости:"",
+        ""FIELD_HEADER_WEIGHT""                   : ""«Вес» соединения:"",
+
+        ""FIELD_HEADER_GUACD_HOSTNAME""   : ""Сервер:"",
+        ""FIELD_HEADER_GUACD_ENCRYPTION"" : ""Шифрование:"",
+        ""FIELD_HEADER_GUACD_PORT""       : ""Порт:"",
+
+        ""FIELD_OPTION_GUACD_ENCRYPTION_EMPTY"" : """",","[{'comment': 'This can be left out', 'commenter': 'necouchman'}]"
501,extensions/guacamole-auth-openid/src/main/resources/translations/ru.json,"@@ -0,0 +1,12 @@
+{
+
+    ""DATA_SOURCE_OPENID"" : {
+        ""NAME"" : ""Бэкенд OpenID SSO""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_ID_TOKEN"" : """",","[{'comment': 'You can leave this line out.', 'commenter': 'necouchman'}]"
501,extensions/guacamole-auth-radius/src/main/resources/translations/ru.json,"@@ -0,0 +1,13 @@
+{
+
+    ""DATA_SOURCE_RADIUS"" : {
+        ""NAME"" : ""Бэкенд RADIUS""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_GUAC_RADIUS_CHALLENGE_RESPONSE"" : """",
+        ""FIELD_HEADER_GUAC_RADIUS_STATE""              : """",","[{'comment': 'These two lines can be left out.', 'commenter': 'necouchman'}]"
501,extensions/guacamole-auth-totp/src/main/resources/translations/ru.json,"@@ -0,0 +1,34 @@
+{
+
+    ""DATA_SOURCE_TOTP"" : {
+        ""NAME"" : ""Бэкенд TOTP TFA""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_GUAC_TOTP"" : """"","[{'comment': 'This line can be left out.', 'commenter': 'necouchman'}]"
501,guacamole/src/main/webapp/translations/ru.json,"@@ -185,13 +228,14 @@
         ""INFO_CONNECTION_ACTIVE_NOW""       : ""Активно"",
         ""INFO_CONNECTION_NOT_USED""         : ""Это подключение еще не использовалось."",
 
-        ""SECTION_HEADER_EDIT_CONNECTION"" : ""Редактировать подключение"",
+        ""SECTION_HEADER_EDIT_CONNECTION"" : ""Редактирование подключения"",
         ""SECTION_HEADER_HISTORY""         : ""История использования"",
         ""SECTION_HEADER_PARAMETERS""      : ""Настройки"",
 
         ""TABLE_HEADER_HISTORY_USERNAME"" : ""Имя пользователя"",
         ""TABLE_HEADER_HISTORY_START""    : ""Время начала"",
         ""TABLE_HEADER_HISTORY_DURATION"" : ""Продолжительность"",
+        ""TABLE_HEADER_HISTORY_REMOTEHOST"" : ""Удаленный узел"",","[{'comment': 'Nitpick: It would be good to line these up :-).', 'commenter': 'necouchman'}]"
501,guacamole/src/main/webapp/translations/ru.json,"@@ -229,11 +274,16 @@
         ""ACTION_DELETE""      : ""@:APP.ACTION_DELETE"",
         ""ACTION_SAVE""        : ""@:APP.ACTION_SAVE"",
 
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""Удалить профиль расшаривания"",
         ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",","[{'comment': 'Maybe line these up?', 'commenter': 'necouchman'}]"
511,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,"@@ -184,26 +178,39 @@ public static GuacamoleConfiguration getConfiguration(String uri)
      *     The GuacamoleConfiguration object to store the username
      *     and password in.
      *
-     * @throws UnsupportedEncodingException
-     *     If Java lacks UTF-8 support.
+     * @throws GuacamoleException
+     *     If an error occurs checking if the parameter is allowed, or if
+     *     Java unexpectedly lacks UTF-8 support.
      */
     public static void parseUserInfo(String userInfo, 
             GuacamoleConfiguration config)
-            throws UnsupportedEncodingException {
+            throws GuacamoleException {
 
         Matcher userinfoMatcher = userinfoPattern.matcher(userInfo);
 
         if (userinfoMatcher.matches()) {
             String username = userinfoMatcher.group(USERNAME_GROUP);
             String password = userinfoMatcher.group(PASSWORD_GROUP);
 
-            if (username != null && !username.isEmpty())
+            if (username != null && !username.isEmpty()) {
+                try {
                 config.setParameter(""username"",
                         URLDecoder.decode(username, ""UTF-8""));
+                }","[{'comment': 'Indentation here somehow became wonky.', 'commenter': 'mike-jumper'}]"
511,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/conf/StringListProperty.java,"@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.conf;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.regex.Pattern;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.properties.GuacamoleProperty;
+
+/**
+ * A GuacamoleProperty whose value is a List of Strings. The string value
+ * parsed to produce this list is a comma-delimited list. Duplicate values are
+ * ignored, as is any whitespace following delimiters. To maintain
+ * compatibility with the behavior of Java properties in general, only
+ * whitespace at the beginning of each value is ignored; trailing whitespace
+ * becomes part of the value.
+ */
+public abstract class StringListProperty implements GuacamoleProperty<List<String>> {","[{'comment': 'I believe this is now part of guacamole-ext.', 'commenter': 'mike-jumper'}]"
511,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/conf/ConfigurationService.java,"@@ -0,0 +1,93 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.conf;
+
+import com.google.inject.Inject;
+import java.util.List;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+
+/**
+ * Configuration options to control the QuickConnect module.
+ */
+public class ConfigurationService {
+    
+    @Inject
+    private Environment environment;
+    
+    /**
+     * A list of parameters that, if set, will limit the parameters allowed to
+     * be defined by connections created using the QuickConnect module to only
+     * the parameters defined in this list.  Defaults to null (all parameters
+     * are allowed).
+     */
+    public static final StringListProperty QUICKCONNECT_ALLOWED_PARAMETERS = new StringListProperty() {
+        
+        @Override
+        public String getName() { return ""quickconnect-allowed-parameters""; }
+        
+    };
+    
+    /**
+     * A list of parameters that, if set, will limit the parameters allowed to
+     * be defined by connections created using the QuickConnect module to any
+     * except the ones defined in this list.  Defaults to null (all parameters
+     * are allowed).
+     */
+    public static final StringListProperty QUICKCONNECT_DENIED_PARAMETERS = new StringListProperty() {
+        
+        @Override
+        public String getName() { return ""quickconnect-denied-parameters""; }
+        
+    };
+    
+    /**
+     * Return the list of allowed parameters to be set by connections created
+     * using the QuickConnect module, or null if none are defined (thereby
+     * allowing all parameters to be set).
+     * 
+     * @return 
+     *    The list of allowed parameters to be set by connections crated using
+     *    the QuickConnect module.
+     * 
+     * @throws GuacamoleException
+     *    If guacamole.properties cannot be parsed.
+     */
+    public List<String> getAllowedParameters() throws GuacamoleException {
+        return environment.getProperty(QUICKCONNECT_ALLOWED_PARAMETERS);
+    }
+    
+    /**
+     * Return the list of denied parameters for connections created using the
+     * QuickConnect module, or null if none are defined (thereby allowing all
+     * parameters to be set).
+     * 
+     * @return
+     *     THe list of parameters that cannot be set by connections created","[{'comment': 'The*', 'commenter': 'mike-jumper'}]"
511,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/conf/ConfigurationService.java,"@@ -0,0 +1,93 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.quickconnect.conf;
+
+import com.google.inject.Inject;
+import java.util.List;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+
+/**
+ * Configuration options to control the QuickConnect module.
+ */
+public class ConfigurationService {
+    
+    @Inject
+    private Environment environment;","[{'comment': 'Please add JavaDoc.', 'commenter': 'mike-jumper'}]"
511,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/QuickConnectDirectory.java,"@@ -118,5 +136,54 @@ public String create(GuacamoleConfiguration config) throws GuacamoleException {
 
         return newConnectionId;
     }
+    
+    /**
+     * Checks the provided GuacamoleConfiguration to make sure the parameters
+     * in the configuration are allowed by the configuration.  If the
+     * allowed parameter configuration option is set, all parameters not
+     * specified will be removed from the config.  If the denied parameter
+     * configuration option is set, any parameters specified by that will be
+     * removed from the configuration.  If neither are set then all parameters
+     * are allowed.
+     * 
+     * @param config
+     *     The GuacamoleConfiguration containing parameters to check against
+     *     configured allowed and denied values.
+     * 
+     * @throws GuacamoleException 
+     *     If guacamole.properties cannot be parsed.
+     */
+    private void checkConfigParameters(GuacamoleConfiguration config) throws GuacamoleException {
+        
+        // Get configuration items.
+        List<String> allowedParams = confService.getAllowedParameters();
+        List<String> deniedParams = confService.getDeniedParameters();
+        
+        // Loop through parameters and remove them if they are not allowed.
+        Set<String> setParams = new HashSet<>(config.getParameterNames());
+        for (String key : setParams) {
+            
+            if (allowedParams != null
+                    && !allowedParams.isEmpty()
+                    && !allowedParams.contains(key)) {
+                
+                logger.debug(""Parameter \""{}\"" is not allowed and will be removed."",
+                        key);
+                config.unsetParameter(key);
+            
+            }
+            
+            if (deniedParams != null
+                    && !deniedParams.isEmpty()
+                    && deniedParams.contains(key)) {
+                
+                logger.debug(""Parameter \""{}\"" has been denied and will be removed."",
+                        key);
+                config.unsetParameter(key);
+                
+            }
+        }","[{'comment': '`config.getParameters().keySet().retainAll()` and `config.getParameters().keySet().removeAll()` would be easier than manually looping through the map.', 'commenter': 'mike-jumper'}, {'comment': 'Wow. Yes.', 'commenter': 'necouchman'}]"
511,extensions/guacamole-auth-quickconnect/pom.xml,"@@ -191,6 +191,18 @@
             <version>1.2.0</version>
             <scope>provided</scope>
         </dependency>
+        
+        <!-- Guice -->
+        <dependency>
+            <groupId>com.google.inject</groupId>
+            <artifactId>guice</artifactId>
+            <version>3.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.google.inject.extensions</groupId>
+            <artifactId>guice-multibindings</artifactId>
+            <version>3.0</version>
+        </dependency>","[{'comment': 'Please be sure to add the licenses for these new dependencies to the set of licenses bundled with the extension.', 'commenter': 'mike-jumper'}]"
511,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/QuickConnectDirectory.java,"@@ -118,5 +136,54 @@ public String create(GuacamoleConfiguration config) throws GuacamoleException {
 
         return newConnectionId;
     }
+    
+    /**
+     * Checks the provided GuacamoleConfiguration to make sure the parameters
+     * in the configuration are allowed by the configuration.  If the
+     * allowed parameter configuration option is set, all parameters not
+     * specified will be removed from the config.  If the denied parameter
+     * configuration option is set, any parameters specified by that will be
+     * removed from the configuration.  If neither are set then all parameters
+     * are allowed.
+     * 
+     * @param config
+     *     The GuacamoleConfiguration containing parameters to check against
+     *     configured allowed and denied values.
+     * 
+     * @throws GuacamoleException 
+     *     If guacamole.properties cannot be parsed.
+     */
+    private void checkConfigParameters(GuacamoleConfiguration config) throws GuacamoleException {","[{'comment': ""I think `checkConfigParameters()` here is a misnomer. The function doesn't just check whether parameters are allowed, but rather strips away any parameters that are denied or not allowed."", 'commenter': 'mike-jumper'}, {'comment': 'Should this instead be part of `QCParser` (and tested via `QCParserTest`)? Comments within `QCParser` look like this may have originally been intended, and it feels like ensuring `QCParser` always abides by the set of allowed/denied parameters would be a safer approach', 'commenter': 'mike-jumper'}, {'comment': ""Yeah, probably so - I think I was being lazy and trying to avoid having to pull the `ConfigurationService` class/injection into the `QCParser` class, but it's probably worth it."", 'commenter': 'necouchman'}, {'comment': ""Renamed it to `purgeConfigParameters()` - if you have other ideas, I'm game, I was having a mental block coming up with something more apropos."", 'commenter': 'necouchman'}, {'comment': 'Okay, moved it, with a couple of extra parameters to avoid having to pull `ConfigurationService` into the `QCParser` class.', 'commenter': 'necouchman'}, {'comment': 'Also added unit tests...', 'commenter': 'necouchman'}]"
511,extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/QuickConnectDirectory.java,"@@ -106,6 +114,12 @@ public String create(GuacamoleConfiguration config) throws GuacamoleException {
         // Generate a name for the configuration.
         String name = QCParser.getName(config);
 
+        // Purge configuration parameters that are either not allowed or are
+        // explicitly denied.
+        QCParser.purgeConfigParameters(config,
+                confService.getAllowedParameters(),
+                confService.getDeniedParameters());","[{'comment': 'Manually purging parameters after the `GuacamoleConfiguration` has been created makes me uncomfortable. If this is ever accidentally omitted, then a security issue appears. Can this be done at the time that the `GuacamoleConfiguration` is built from the URL?\r\n\r\nFor example, if `QCParser` were concrete, with a constructor requiring a set of allowed and denied parameter, that would ensure that all parsing of URLs has to explicitly take the allow/deny bits into account, and any usage that (unsafely) _ignores_ those bits would need to be pretty purposefully written to ignore them.', 'commenter': 'mike-jumper'}, {'comment': ""Sure, makes sense. I've got the changes almost done - just need to clean up the unit tests."", 'commenter': 'necouchman'}, {'comment': 'Okay, things have been re-worked as suggested.', 'commenter': 'necouchman'}]"
513,extensions/guacamole-auth-cas/src/main/resources/translations/ca.json,"@@ -0,0 +1,12 @@
+{
+
+    ""DATA_SOURCE_CAS"" : {
+        ""NAME"" : ""CAS SSO Backend""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_TICKET""        : """",","[{'comment': 'You can leave out empty strings like this, since they will inherit from the English translation.', 'commenter': 'necouchman'}, {'comment': 'Empty strings removed', 'commenter': 'JordiRoman'}]"
513,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/ca.json,"@@ -0,0 +1,113 @@
+{
+
+    ""LOGIN"" : {
+
+        ""ERROR_PASSWORD_BLANK""    : ""@:APP.ERROR_PASSWORD_BLANK"",
+        ""ERROR_PASSWORD_SAME""     : ""La nova contrasenya ha de ser diferent de la contrasenya caducada."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""@:APP.ERROR_PASSWORD_MISMATCH"",
+        ""ERROR_NOT_VALID""         : ""Aquest compte d'usuari actualment no és vàlid."",
+        ""ERROR_NOT_ACCESSIBLE""    : ""L'accés a aquest compte actualment no està permès. Torneu-ho a provar més endavant."",
+
+        ""INFO_PASSWORD_EXPIRED"" : ""La vostra contrasenya ha caducat i s'ha de restablir. Introduïu una nova contrasenya per continuar."",
+
+        ""FIELD_HEADER_NEW_PASSWORD""         : ""Nova contrasenya"",
+        ""FIELD_HEADER_CONFIRM_NEW_PASSWORD"" : ""Confirmar nova contrasenya""
+
+    },
+
+    ""CONNECTION_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Nombre màxim de connexions:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Nombre màxim de connexions per usuari:"",
+
+        ""FIELD_HEADER_FAILOVER_ONLY""            : ""Ús només per fer-ho desactivar:"",
+        ""FIELD_HEADER_WEIGHT""                   : ""Pes de la connexió:"",
+
+        ""FIELD_HEADER_GUACD_HOSTNAME""   : ""Nom de l'amfitrió:"",
+        ""FIELD_HEADER_GUACD_ENCRYPTION"" : ""Xifrat:"",
+        ""FIELD_HEADER_GUACD_PORT""       : ""Port:"",
+
+        ""FIELD_OPTION_GUACD_ENCRYPTION_EMPTY"" : """",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_NONE""  : ""Cap (sense xifrar)"",
+        ""FIELD_OPTION_GUACD_ENCRYPTION_SSL""   : ""SSL / TLS"",
+
+        ""SECTION_HEADER_CONCURRENCY""    : ""Límits de concurrència"",
+        ""SECTION_HEADER_LOAD_BALANCING"" : ""Equilibri de càrrega"",
+        ""SECTION_HEADER_GUACD""          : ""Paràmetres del proxy de Guacamole (guacd)""
+
+    },
+
+    ""CONNECTION_GROUP_ATTRIBUTES"" : {
+
+        ""FIELD_HEADER_ENABLE_SESSION_AFFINITY""  : ""Activa l’afinitat de la sessió:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS""          : ""Nombre màxim de connexions:"",
+        ""FIELD_HEADER_MAX_CONNECTIONS_PER_USER"" : ""Nombre màxim de connexions per usuari:"",
+
+        ""SECTION_HEADER_CONCURRENCY"" : ""Límits de concurrència (grups d'equilibri)""
+
+    },
+
+    ""DATA_SOURCE_MYSQL"" : {
+        ""NAME"" : ""MySQL""
+    },
+
+    ""DATA_SOURCE_MYSQL_SHARED"" : {
+        ""NAME"" : ""Connexions compartides (MySQL)""
+    },
+
+    ""DATA_SOURCE_POSTGRESQL"" : {
+        ""NAME"" : ""PostgreSQL""
+    },
+
+    ""DATA_SOURCE_POSTGRESQL_SHARED"" : {
+        ""NAME"" : ""Connexions compartides (PostgreSQL)""
+    },
+
+    ""DATA_SOURCE_SQLSERVER"" : {
+        ""NAME"" : ""SQL Server""
+    },
+
+    ""DATA_SOURCE_SQLSERVER_SHARED"" : {
+        ""NAME"" : ""Connexions compartides (SQL Server)""
+    },
+
+    ""HOME"" : {
+        ""INFO_SHARED_BY"" : ""Compartit per{USERNAME}""","[{'comment': 'I believe there should be a space between `per` and `{USERNAME}`?', 'commenter': 'necouchman'}, {'comment': 'Ok', 'commenter': 'JordiRoman'}]"
513,guacamole/src/main/webapp/translations/ca.json,"@@ -0,0 +1,962 @@
+{
+    
+    ""NAME"" : ""Catalan"",
+    
+    ""APP"" : {
+
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""${project.version}"",","[{'comment': 'Both of these lines should be left out of this translation file.', 'commenter': 'necouchman'}, {'comment': ""Ok. I Do it.\r\n\r\nSorry. I'm newie with git & github. I must re-do the pull request when I correct all ?\r\n\r\nThank you"", 'commenter': 'JordiRoman'}, {'comment': 'No, you do not need to close and redo the pull request - just make the changes and push your commits to your working branch, and the changes will show up, here.  You can also rebase to correct the commit messages and then force-push with the new commit messages.', 'commenter': 'necouchman'}, {'comment': 'APP.NAME & APP.VERSION removed from translation', 'commenter': 'JordiRoman'}]"
513,guacamole/src/main/webapp/translations/ca.json,"@@ -0,0 +1,1004 @@
+{
+    
+    ""NAME"" : ""Catalan"",
+    
+    ""APP"" : {
+
+
+
+","[{'comment': 'Looks like a few extra spaces, here.  Just one should be enough :-).', 'commenter': 'necouchman'}, {'comment': 'yes, one is sufficient. I removed the extra lines', 'commenter': 'JordiRoman'}]"
513,guacamole/src/main/webapp/translations/ca.json,"@@ -0,0 +1,1004 @@
+{
+    
+    ""NAME"" : ""Catalan"",
+    
+    ""APP"" : {
+
+
+
+
+        ""ACTION_ACKNOWLEDGE""        : ""OK"",
+        ""ACTION_CANCEL""             : ""Cancel·lar"",
+        ""ACTION_CLONE""              : ""Clon"",
+        ""ACTION_CONTINUE""           : ""Continua"",
+        ""ACTION_DELETE""             : ""Suprimeix"",
+        ""ACTION_DELETE_SESSIONS""    : ""Mata Sessions"",
+        ""ACTION_DOWNLOAD""           : ""Descarregar"",
+        ""ACTION_LOGIN""              : ""Iniciar Sessió"",
+        ""ACTION_LOGOUT""             : ""Tancar sessió"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""Connexions"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""Preferències"",
+        ""ACTION_MANAGE_SETTINGS""    : ""Configuració"",
+        ""ACTION_MANAGE_SESSIONS""    : ""Sessions actives"",
+        ""ACTION_MANAGE_USERS""       : ""Usuaris"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""Grups"",
+        ""ACTION_NAVIGATE_BACK""      : ""Enrera"",
+        ""ACTION_NAVIGATE_HOME""      : ""Inici"",
+        ""ACTION_SAVE""               : ""Desa"",
+        ""ACTION_SEARCH""             : ""Cerca"",
+        ""ACTION_SHARE""              : ""Compartir"",
+        ""ACTION_UPDATE_PASSWORD""    : ""Actualitza la contrasenya"",
+        ""ACTION_VIEW_HISTORY""       : ""Història"",
+
+        ""DIALOG_HEADER_ERROR"" : ""Error"",
+
+        ""ERROR_PAGE_UNAVAILABLE""  : ""S'ha produït un error i aquesta acció no es pot completar. Si el problema continua, aviseu l'administrador del sistema o comproveu els registres del vostre sistema."",
+        ""ERROR_PASSWORD_BLANK""    : ""La vostra contrasenya no pot estar en blanc."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""Les contrasenyes proporcionades no coincideixen."",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""Contrasenya:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""Torna a escriure la contrasenya:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""Filtre"",
+
+        ""FORMAT_DATE_TIME_PRECISE"" : ""yyyy-MM-dd HH:mm:ss"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""Actualment en ús per {USERS} {USERS, plural, one{user} other{users}}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""Anònim"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{{VALUE, plural, one{second} other{seconds}}} minute{{VALUE, plural, one{minute} other{minutes}}} hour{{VALUE, plural, one{hour} other{hours}}} day{{VALUE, plural, one{day} other{days}}} other{}}"",
+        ""TEXT_UNTRANSLATED"" : ""{MESSAGE}""","[{'comment': ""I think you can leave this line out, as it's intentionally untranslated."", 'commenter': 'necouchman'}, {'comment': 'yes, it is evident that it is an untranslated text :)', 'commenter': 'JordiRoman'}]"
513,extensions/guacamole-auth-cas/src/main/resources/guac-manifest.json,"@@ -13,7 +13,8 @@
         ""translations/de.json"",
         ""translations/en.json"",
         ""translations/ja.json"",
-        ""translations/ru.json""
+        ""translations/ru.json"",
+        ""translations/ca.json""","[{'comment': 'This should be added in alphabetical order, like the rest of the list. So, should go at the start of the list.', 'commenter': 'necouchman'}, {'comment': 'Sorry, I reorder the content of the translation list in alphabetical order.\r\n\r\nThank you very much for the clarification.', 'commenter': 'JordiRoman'}]"
514,guacamole-docker/bin/start.sh,"@@ -567,6 +567,38 @@ END
     ln -s /opt/guacamole/duo/guacamole-auth-*.jar   ""$GUACAMOLE_EXT""
 }
 
+##
+## Adds properties to guacamole.properties witch configure the Cas
+## authentication service.
+##
+associate_cas() {
+    # Verify required parameters are present
+    if [ -z ""$CAS_AUTHORIZATION_ENDPOINT"" ] || \
+       [ -z ""$CAS_REDIRECT_URI"" ]
+    then
+        cat <<END
+FATAL: Missing required environment variables
+-----------------------------------------------------------------------------------
+If using the Cas authentication extension, you must provide each of the","[{'comment': 'Should probably be consistent about calling this the ""CAS authentication extension.""', 'commenter': 'necouchman'}, {'comment': ""yes, it's a typo error.\r\n\r\nCan or should I add a new commit to the branch?\r\n\r\nWhat should the commit description be [GUACAMOLE-1082: Add guacamole-auth-cas to docker Script - Cas 2 CAS typo ]?\r\n\r\n"", 'commenter': 'JordiRoman'}, {'comment': 'You should be able to just make then changes and then do `git add` and `git commit --amend`, and then you can force push with a `git push -f`, which will update the pull request automatically.', 'commenter': 'necouchman'}]"
514,guacamole-docker/bin/start.sh,"@@ -567,6 +567,38 @@ END
     ln -s /opt/guacamole/duo/guacamole-auth-*.jar   ""$GUACAMOLE_EXT""
 }
 
+##
+## Adds properties to guacamole.properties witch configure the Cas","[{'comment': 'Cas -> CAS', 'commenter': 'necouchman'}, {'comment': ""as above\r\n\r\nI found another 'Cas' in my code, on line 739.\r\n I'll change it too\r\n\r\n\r\nSorry"", 'commenter': 'JordiRoman'}]"
518,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/resources/guac-manifest.json,"@@ -24,7 +24,8 @@
         ""translations/es.json"",
         ""translations/fr.json"",
         ""translations/ja.json"",
-        ""translations/ru.json""
+        ""translations/ru.json"",
+        ""translations/zh.json""","[{'comment': ""Shouldn't this also be added to the `guac-manifest.json` file for PostgreSQL and SQL Server?"", 'commenter': 'necouchman'}, {'comment': 'okay，I add。', 'commenter': 'XYUU'}]"
519,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/RadiusAuthenticationProtocol.java,"@@ -19,100 +19,54 @@
 
 package org.apache.guacamole.auth.radius.conf;
 
+import org.apache.guacamole.properties.EnumGuacamoleProperty.PropertyValue;
+
 /**
  * This enum represents supported RADIUS authentication protocols for
  * the guacamole-auth-radius extension.
  */
 public enum RadiusAuthenticationProtocol {
     
     /**
-     * Password Authentication Protocol (PAP)
+     * Password Authentication Protocol (PAP).
      */
-    PAP(""pap""),
+    @PropertyValue(""pap"")
+    PAP,
     
     /**
-     * Challenge-Handshake Authentication Protocol (CHAP)
+     * Challenge-Handshake Authentication Protocol (CHAP).
      */
-    CHAP(""chap""),
+    @PropertyValue(""chap"")
+    CHAP,
     
     /**
-     * Microsoft implementation of CHAP, Version 1 (MS-CHAPv1)
+     * Microsoft implementation of CHAP, Version 1 (MS-CHAPv1).
      */
-    MSCHAPv1(""mschapv1""),
+    @PropertyValue(""mschapv1"")
+    MSCHAP_V1,
     
     /**
-     * Microsoft implementation of CHAP, Version 2 (MS-CHAPv2)
+     * Microsoft implementation of CHAP, Version 2 (MS-CHAPv2).
      */
-    MSCHAPv2(""mschapv2""),
+    @PropertyValue(""mschapv2"")
+    MSCHAP_V2,
     
     /**
-     * Extensible Authentication Protocol (EAP) with MD5 Hashing (EAP-MD5)
+     * Extensible Authentication Protocol (EAP) with MD5 Hashing (EAP-MD5).
      */
-    EAP_MD5(""eap-md5""),
+    @PropertyValue(""eap-md5"")
+    EAP_MD5,
 
     /**
      * Extensible Authentication Protocol (EAP) with TLS encryption (EAP-TLS).
      */
-    EAP_TLS(""eap-tls""),
+    @PropertyValue(""eap-tls"")
+    EAP_TLS,
 
     /**
      * Extensible Authentication Protocol (EAP) with Tunneled TLS (EAP-TTLS).
      */
-    EAP_TTLS(""eap-ttls"");
+    @PropertyValue(""eap-ttls"")
+    EAP_TTLS;
 
-    /**
-     * This variable stores the string value of the protocol, and is also
-     * used within the extension to pass to JRadius for configuring the
-     * library to talk to the RADIUS server.
-     */
-    private final String strValue;
-    
-    /**
-     * Create a new RadiusAuthenticationProtocol object having the
-     * given string value.
-     * 
-     * @param strValue
-     *     The value of the protocol to store as a string, which will be used
-     *     in specifying the protocol within the guacamole.properties file, and
-     *     will also be used by the JRadius library for its configuration.","[{'comment': ""Eep - will deleting this break RADIUS? I don't recall the string value being used for JRadius, but if that's the case, I should definitely put some of this back."", 'commenter': 'mike-jumper'}, {'comment': ""I'll have to take a look..."", 'commenter': 'necouchman'}, {'comment': 'Okay, so, as long as it properly converts to a `String` using `toString()`, it should be okay:\r\nhttps://github.com/apache/guacamole-client/blob/4e4b6f24f2d34a91f5381da955680f85c2ce56c3/extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java#L129-L133\r\n\r\nThe Inner Protocol may have to be re-worked, a bit:\r\nhttps://github.com/apache/guacamole-client/blob/4e4b6f24f2d34a91f5381da955680f85c2ce56c3/extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/RadiusConnectionService.java#L161-L170', 'commenter': 'necouchman'}, {'comment': 'Ah, but ""properly"" there means into whatever value is required by JRadius.\r\n\r\nI\'ll restore a means of getting the authenticator name specific to JRadius from the protocol.', 'commenter': 'mike-jumper'}, {'comment': ""Okay - I basically implemented it such that the value set in `guacamole.properties` is the same value that `JRadius` uses, so it just need to be able to retrieve that value and pass it through.  If there's a way to do that mapping back to the `@PropertyValue` annotation I'm not opposed to that."", 'commenter': 'necouchman'}, {'comment': ""OK - I've added:\r\n\r\n* A constructor parameter for the JRadius protocol name (referencing the specific `NAME` constant) and static property, `JRADIUS_PROTOCOL_NAME`, that exposes this.\r\n* A convenience function, `getAuthenticator()`, which returns the `RadiusAuthenticator` instance for the protocol in question.\r\n\r\nand carried that refactor through."", 'commenter': 'mike-jumper'}]"
519,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/conf/LDAPGuacamoleProperties.java,"@@ -181,8 +183,13 @@ private LDAPGuacamoleProperties() {}
      * Property that controls whether or not the LDAP connection follows
      * (dereferences) aliases as it searches the tree.
      */
-    public static final DereferenceAliasesProperty LDAP_DEREFERENCE_ALIASES =
-            new DereferenceAliasesProperty() {
+    public static final EnumGuacamoleProperty<AliasDerefMode> LDAP_DEREFERENCE_ALIASES =
+            new EnumGuacamoleProperty<AliasDerefMode>(
+                ""never"",     AliasDerefMode.NEVER_DEREF_ALIASES,
+                ""searching"", AliasDerefMode.DEREF_IN_SEARCHING,
+                ""finding"",   AliasDerefMode.DEREF_FINDING_BASE_OBJ,
+                ""always"",    AliasDerefMode.DEREF_ALWAYS","[{'comment': ""Guessing there's some reason that using `AliasDerefMode.class`, here, doesn't work?"", 'commenter': 'necouchman'}, {'comment': ""Yep, because `AliasDerefMode` is part of an API outside of this extension and Guacamole. It's not within our power to add `@PropertyValue` annotations there."", 'commenter': 'mike-jumper'}]"
519,guacamole-ext/src/test/java/org/apache/guacamole/properties/EnumGuacamolePropertyTest.java,"@@ -0,0 +1,372 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.properties;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.properties.EnumGuacamoleProperty.PropertyValue;
+import static org.junit.Assert.*;
+import org.junit.Test;
+
+/**
+ * Test which verifies that EnumGuacamoleProperty functions correctly.
+ */
+public class EnumGuacamolePropertyTest {
+
+    /**
+     * Example enum consisting of a small set of possible fish. All values of
+     * this enum are annotated with {@link PropertyValue}.
+     */
+    public static enum Fish {
+
+        /**
+         * Salmon are large, anadromous fish prized for their pink/red/orange
+         * flesh.
+         *
+         * @see <a href=""https://en.wikipedia.org/wiki/Salmon"">Salmon (Wikipedia)</a>
+         */
+        @PropertyValue(""salmon"")
+        SALMON,
+
+        /**
+         * Trout are freshwater fish related to salmon, popular both as food
+         * and as game fish.
+         *
+         * @see <a href=""https://en.wikipedia.org/wiki/Trout"">Trout (Wikipedia)</a>
+         */
+        @PropertyValue(""trout"")
+        TROUT,
+
+        /**
+         * Mackerel are pelagic fish, typically having vertical stripes along
+         * their backs.
+         *
+         * @see <a href=""https://en.wikipedia.org/wiki/Mackerel"">Mackerel (Wikipedia)</a>
+         */
+        @PropertyValue(""mackerel"")
+        MACKEREL,
+
+        /**
+         * Tuna are large, predatory, saltwater fish in the same family as
+         * mackerel. They are one of the few fish that can maintain a body
+         * temperature higher than the surrounding water.
+         *
+         * @see <a href=""https://en.wikipedia.org/wiki/Tuna"">Tuna (Wikipedia)</a>
+         */
+        @PropertyValue(""tuna"")
+        TUNA,
+
+        /**
+         * Sardines are small, herring-like fish commonly served in cans.
+         * Sardines are considered prey fish and feed almost exclusively on
+         * zooplankton.
+         *
+         * @see <a href=""https://en.wikipedia.org/wiki/Sardine"">Sardine (Wikipedia)</a>
+         */
+        @PropertyValue(""sardine"")
+        SARDINE
+
+    }
+
+    /**
+     * Example enum consisting of a small set of possible vegetables. None of
+     * the values of this enum are annotated with {@link PropertyValue}.
+     */
+    public static enum Vegetable {
+
+        /**
+         * Potatoes are starchy root vegetables native to the Americas. The
+         * tuber itself is edible, but other parts can be toxic.
+         *
+         * @see <a href=""https://en.wikipedia.org/wiki/Potato"">Potato (Wikipedia)</a>
+         */
+        POTATO,
+
+        /**
+         * Carrots are root vegetables, tapered in shape and generally orange
+         * in color.
+         *
+         * @see <a href=""https://en.wikipedia.org/wiki/Carrot"">Carrot (Wikipedia)</a>
+         */
+        CARROT
+
+    }
+
+    /**
+     * Example Guacamole property which parses String values as Fish constants.
+     */
+    private static final EnumGuacamoleProperty<Fish> FAVORITE_FISH = new EnumGuacamoleProperty<Fish>(Fish.class) {
+
+        @Override
+        public String getName() {
+            return ""favorite-fish"";
+        }
+
+    };
+
+    /**
+     * Verifies that EnumGuacamoleProperty correctly parses string values that
+     * are associated with their corresponding enum constants using the
+     * {@link PropertyValue} annotation.
+     *
+     * @throws GuacamoleException
+     *     If a valid test value is incorrectly recognized by parseValue() as
+     *     invalid.
+     */
+    @Test
+    public void testParseValue() throws GuacamoleException {
+        assertEquals(Fish.SALMON,   FAVORITE_FISH.parseValue(""salmon""));
+        assertEquals(Fish.TROUT,    FAVORITE_FISH.parseValue(""trout""));
+        assertEquals(Fish.MACKEREL, FAVORITE_FISH.parseValue(""mackerel""));
+        assertEquals(Fish.TUNA,     FAVORITE_FISH.parseValue(""tuna""));
+        assertEquals(Fish.SARDINE,  FAVORITE_FISH.parseValue(""sardine""));
+    }
+
+    /**
+     * Verifies that the absence of a property value (null) is parsed by
+     * EnumGuacamoleProperty as the absence of an enum constant (also null).
+     *
+     * @throws GuacamoleException
+     *     If a valid test value is incorrectly recognized by parseValue() as
+     *     invalid.
+     */
+    @Test
+    public void testParseNullValue() throws GuacamoleException {
+        assertNull(FAVORITE_FISH.parseValue(null));
+    }
+
+    /**
+     * Verifies that GuacamoleException is thrown when attempting to parse an
+     * invalid value, and that the error message contains a sorted list of all
+     * allowed values.
+     */
+    @Test
+    public void testParseInvalidValue() {
+        try {
+            FAVORITE_FISH.parseValue(""anchovy"");
+            fail(""Invalid EnumGuacamoleProperty values should fail to parse with an exception."");","[{'comment': 'Suggested change:\r\n`fail(""It isn\'t possible for anchovies to be anyone\'s favorite fish."");\r\n\r\n;-)', 'commenter': 'necouchman'}, {'comment': 'True.', 'commenter': 'mike-jumper'}]"
521,guacamole-docker/bin/start.sh,"@@ -363,24 +363,47 @@ END
         exit 1;
     fi
 
+    # Handle Docker secrets for LDAP
+    if [ -n ""$LDAP_SEARCH_BIND_DN_FILE"" ]; then
+        set_optional_property ""ldap-search-bind-dn"" ""$(cat $LDAP_SEARCH_BIND_DN_FILE)""
+    elif [ -n ""$LDAP_SEARCH_BIND_DN"" ]; then
+        set_optional_property ""ldap-search-bind-dn"" ""$LDAP_SEARCH_BIND_DN""
+    fi
+
+    if [ -n ""$LDAP_SEARCH_BIND_PASSWORD_FILE"" ]; then
+        set_optional_property ""ldap-search-bind-password"" ""$(cat $LDAP_SEARCH_BIND_PASSWORD_FILE)""
+    elif [ -n ""$LDAP_SEARCH_BIND_PASSWORD"" ]; then
+        set_optional_property ""ldap-search-bind-password"" ""$LDAP_SEARCH_BIND_PASSWORD""
+    fi
+
+    if [ -n ""$LDAP_USER_BASE_DN_FILE"" ]; then","[{'comment': ""Is there a particular reason to include the various DNs in the Docker secrets support? I understand for password, and possibly for username, but it doesn't seem like an LDAP DN is all that sensitive a value that it needs to be protected??"", 'commenter': 'necouchman'}]"
521,guacamole-docker/bin/start.sh,"@@ -394,6 +417,10 @@ END
     set_optional_property ""ldap-max-referral-hops""  ""$LDAP_MAX_REFERRAL_HOPS""
     set_optional_property ""ldap-operation-timeout""  ""$LDAP_OPERATION_TIMEOUT""
 
+    if [ -n ""$LDAP_SSL_CERT_FILE"" ]; then","[{'comment': ""I'm on the fence about this - I certainly don't have any problem supporting this functionality, but I'm not sure its entirely in scope of this particular change??"", 'commenter': 'necouchman'}]"
523,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/activeconnection/ActiveConnectionPermissionService.java,"@@ -82,21 +82,22 @@ public boolean hasPermission(ModeledAuthenticatedUser user,
         // Retrieve permissions only if allowed
         if (canReadPermissions(user, targetEntity)) {
 
-            // Only administrators may access active connections
-            boolean isAdmin = targetEntity.isAdministrator();
+            // Administrators may always access active connections
+            boolean isAdmin = targetEntity.isPrivileged();
 
             // Get all active connections
             Collection<ActiveConnectionRecord> records = tunnelService.getActiveConnections(user);
 
             // We have READ, and possibly DELETE, on all active connections
-            Set<ObjectPermission> permissions = new HashSet<ObjectPermission>();
+            Set<ObjectPermission> permissions = new HashSet<>();
             for (ActiveConnectionRecord record : records) {
 
                 // Add implicit READ
                 String identifier = record.getUUID().toString();
                 permissions.add(new ObjectPermission(ObjectPermission.Type.READ, identifier));
 
-                // If we're an admin, or the connection is ours, then we can DELETE
+                // If the target use is an admin, or the connection belongs to","[{'comment': '> If the target *user* is an admin...', 'commenter': 'necouchman'}, {'comment': 'Oops.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed as part of the comment update for privileged vs. admin.', 'commenter': 'mike-jumper'}]"
523,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/RelatedObjectSet.java,"@@ -141,7 +141,7 @@ private boolean canAlterRelation(Collection<String> identifiers)
             throws GuacamoleException {
 
         // System administrators may alter any relations","[{'comment': 'Not sure if this comment (and the others like it throughout this code) should be updated to say ""Privileged entities"" to cover both the user and privileged `UserContext` cases?  Or will this always be a `User` of some sort?', 'commenter': 'necouchman'}, {'comment': ""Sure - I'll look through and correct the cases that still imply that `isPrivileged()` indicates a system administrator."", 'commenter': 'mike-jumper'}, {'comment': 'I believe this is now fixed.', 'commenter': 'mike-jumper'}]"
523,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/ModeledUserContext.java,"@@ -141,15 +151,40 @@ public void init(ModeledAuthenticatedUser currentUser) {
         sharingProfileDirectory.init(currentUser);
         activeConnectionDirectory.init(currentUser);
 
+    }
+
+    /**
+     * Records that the user associated with this UserContext has logged in,
+     * creating a partial activity record. The resulting activity record will
+     * contain a start date only, with the end date being automatically
+     * populated when this UserContext is invalidated. If this function is
+     * invoked more than once for the same UserContext, only the first
+     * invocation has any effect. If this function is never invoked, no
+     * activity record will be recorded, including when this UserContext is
+     * invalidated.
+     */
+    public void recordUserLogin(){","[{'comment': 'Style nitpick...space between the `()` and the `{`', 'commenter': 'necouchman'}, {'comment': 'Oops++', 'commenter': 'mike-jumper'}, {'comment': 'Fixed by amending the relevant commit.', 'commenter': 'mike-jumper'}]"
527,extensions/guacamole-auth-cas/src/main/resources/guac-manifest.json,"@@ -13,7 +13,20 @@
         ""translations/de.json"",
         ""translations/en.json"",
         ""translations/ja.json"",
-        ""translations/ru.json""
-    ]
+        ""translations/ru.json"",
+        ""translations/zh.json""
+    ],
+
+    ""js"" : [
+        ""cas.min.js""
+    ],
+
+    ""css"" : [
+        ""cas.min.css""
+    ],
+
+    ""resources"" : {
+        ""templates/casTicketField.html"" : ""text/html""
+    }","[{'comment': 'Why is this being added?', 'commenter': 'mike-jumper'}]"
527,extensions/guacamole-auth-cas/src/main/resources/guac-manifest.json,"@@ -1,6 +1,6 @@
 {
 
-    ""guacamoleVersion"" : ""1.2.0"",
+    ""guacamoleVersion"" : ""1.3.0"",","[{'comment': ""I'm not sure this should be done as part of this change. It definitely needs to be done for the overall 1.3.0 release, but it seems out-of-scope, here."", 'commenter': 'necouchman'}]"
527,guacamole/src/main/webapp/translations/zh.json,"@@ -3,7 +3,6 @@
     ""NAME"" : ""简体中文"",
     
     ""APP"" : {
-","[{'comment': 'I think this blank line should remain there and not be removed - the rest of the sections (below) and other translations have these blank lines for readability.', 'commenter': 'necouchman'}, {'comment': '@XYUU - If you can add back this poor space, I think we can move forward with the merge.', 'commenter': 'necouchman'}, {'comment': ""Okay, I'll take the time to add these spaces."", 'commenter': 'XYUU'}]"
527,guacamole/src/main/webapp/translations/zh.json,"@@ -300,14 +319,129 @@
 
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""HELP_NO_USER_GROUPS"" : ""该用户当前不属于任何组。 展开此部分以添加组。"",
+	
         ""INFO_READ_ONLY"" : ""对不起，不能编辑此用户的账户。"",
+        ""INFO_NO_USER_GROUPS_AVAILABLE"" : ""没用可用的用户组."",
 
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""全部连接"",
         ""SECTION_HEADER_CONNECTIONS"" : ""连接"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""当前连接"",
         ""SECTION_HEADER_EDIT_USER""   : ""编辑用户"",
         ""SECTION_HEADER_PERMISSIONS"" : ""使用权限"",
-
+        ""SECTION_HEADER_USER_GROUPS""         : ""用户组"",
+	
         ""TEXT_CONFIRM_DELETE"" : ""将不能恢复已被删除的用户。确定要删除这个用户吗？""
 
+    },
+    
+        ""MANAGE_USER_GROUP"" : {","[{'comment': 'This has been indented one level too much...', 'commenter': 'necouchman'}]"
527,guacamole/src/main/webapp/translations/zh.json,"@@ -490,31 +649,40 @@
 
     },
 
+
+","[{'comment': ""I don't think we need the extra spaces, here - the original one was fine :-)."", 'commenter': 'necouchman'}]"
530,guacamole/src/main/webapp/app/form/controllers/redirectFieldController.js,"@@ -18,16 +18,26 @@
  */
 
 /**
- * Config block which registers openid-specific field types.
+ * Controller for the redirect field, which redirects the user to the provided
+ * URL.
  */
-angular.module('guacOpenID').config(['formServiceProvider',
-        function guacOpenIDConfig(formServiceProvider) {
+angular.module('form').controller('redirectFieldController', ['$scope','$window',
+    function redirectFieldController($scope,$window) {
 
-    // Define field for token from OpenID service
-    formServiceProvider.registerFieldType(""GUAC_OPENID_TOKEN"", {
-        templateUrl : 'app/ext/guac-openid/templates/openidTokenField.html',
-        controller  : 'guacOpenIDController',
-        module      : 'guacOpenID'
-    });
+    /**
+     * Redirect the user to the provided URL.
+     */
+    $window.location.href = $scope.field.redirectUrl;
+    
+    /**
+     * Return the text that should be displayed to the user while the redirect
+     * is taking place.
+     * 
+     * @return {String}
+     *     The text to display for the user during the redirect.
+     */
+    $scope.getRedirectMsg = function getRedirctMsg() {
+        return $scope.field.redirectMsg;
+    };","[{'comment': ""As `field.redirectMsg` is already on the scope, it's possible to reference that directly rather than via a dedicated function."", 'commenter': 'mike-jumper'}]"
530,guacamole-ext/src/main/java/org/apache/guacamole/form/RedirectField.java,"@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.form;
+
+import java.net.URI;
+
+/**
+ * A Guacamole field that redirects a user to another page.
+ */
+public class RedirectField extends Field {
+
+    /**
+     * The encoded URL of the redirect.
+     */
+    private final URI redirectUrl;
+    
+    /**
+     * The message that will be displayed for the user during the redirect
+     * process.  This will be processed through Guacamole's translation system.
+     */
+    private final String redirectMsg;
+
+    /**
+     * Creates a new field which facilitates redirection of the user
+     * to another page.
+     *
+     * @param name
+     *     The name of this field.
+     * 
+     * @param redirectUrl
+     *     The URL to which the user should be redirected.
+     * 
+     * @param redirectMsg
+     *     The message to display during the redirect, which will be processed
+     *     through Guacamole's translation system.
+     */
+    public RedirectField(String name, URI redirectUrl, String redirectMsg) {
+
+        // Init base field properties
+        super(name, Field.Type.REDIRECT);
+
+        // Store the URL to which the user will be redirected.
+        this.redirectUrl = redirectUrl;
+        this.redirectMsg = redirectMsg;
+
+    }
+
+    /**
+     * Returns the URL of the redirect.
+     * 
+     * @return
+     *     The URL of the redirect.
+     */
+    public String getRedirectUrl() {
+        return redirectUrl.toString();
+    }
+    
+    /**
+     * Returns the message that will be displayed for the user while the
+     * redirect takes place.
+     * 
+     * @return
+     *     The message to display for the user.
+     */
+    public String getRedirectMsg() {
+        return redirectMsg;
+    }","[{'comment': 'I think:\r\n\r\n* As this will be a part of the public extension API, it would be better to not abbreviate ""message"" as ""msg"".\r\n* It would be better to leverage `TranslatableMessage` for the translatable message rather than just `String`, as the semantics surrounding `TranslatableMessage` are more explicit and variable substitution is inherently supported.\r\n\r\nIf you agree with both of the above, I suggest simply implementing `Translatable` and its `getTranslatableMessage()` function.', 'commenter': 'mike-jumper'}, {'comment': ""Totally good with this, just might need a little guidance on the best way to leverage this in a `Field` situation.  Based on the above note, the `redirectMsg` (now `redirectMessage`) variable is directly available in the scope.  But, if I move over to `Translatable` and `getTranslatableMessage()`, what's the best way to rework the AngularJS side such that this message will be properly displayed and run through the translation system?  I'm trying to follow examples in the existing code, so maybe I'll figure it out..."", 'commenter': 'necouchman'}, {'comment': 'I think I figured it out...', 'commenter': 'necouchman'}]"
530,guacamole-ext/src/main/java/org/apache/guacamole/form/RedirectField.java,"@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.form;
+
+import java.net.URI;
+
+/**
+ * A Guacamole field that redirects a user to another page.
+ */
+public class RedirectField extends Field {
+
+    /**
+     * The encoded URL of the redirect.","[{'comment': 'What do you mean by encoded?', 'commenter': 'mike-jumper'}]"
530,guacamole-ext/src/main/java/org/apache/guacamole/form/RedirectField.java,"@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.form;
+
+import java.net.URI;
+
+/**
+ * A Guacamole field that redirects a user to another page.
+ */
+public class RedirectField extends Field {
+
+    /**
+     * The encoded URL of the redirect.
+     */
+    private final URI redirectUrl;
+    
+    /**
+     * The message that will be displayed for the user during the redirect
+     * process.  This will be processed through Guacamole's translation system.
+     */
+    private final String redirectMsg;
+
+    /**
+     * Creates a new field which facilitates redirection of the user
+     * to another page.
+     *
+     * @param name
+     *     The name of this field.
+     * 
+     * @param redirectUrl
+     *     The URL to which the user should be redirected.
+     * 
+     * @param redirectMsg
+     *     The message to display during the redirect, which will be processed
+     *     through Guacamole's translation system.
+     */
+    public RedirectField(String name, URI redirectUrl, String redirectMsg) {
+
+        // Init base field properties
+        super(name, Field.Type.REDIRECT);
+
+        // Store the URL to which the user will be redirected.
+        this.redirectUrl = redirectUrl;
+        this.redirectMsg = redirectMsg;
+
+    }
+
+    /**
+     * Returns the URL of the redirect.","[{'comment': '""The URL of the redirect"" reads a little unclear to me.\r\n\r\nEarlier, in the constructor, you use the wording ""the URL to which the user should be redirected"", which is quite clear. Perhaps that would be better here?', 'commenter': 'mike-jumper'}]"
530,guacamole/src/main/webapp/app/form/templates/redirectField.html,"@@ -0,0 +1,8 @@
+<div class=""redirect-field-container"">
+    <div class=""redirect-field"">
+        <p ng-show=""redirectMessage""
+           translate=""{{redirectMessage.key}}""
+           translate-values=""{{redirectMessage.variables}}"">","[{'comment': ""1. Does `redirectMessage` here need to be `field.redirectMessage`?\r\n2. The getter on the Java side for this is `getTranslatableMessage()`, which would be serialized within the JSON as `translatableMessage` unless overridden by an annotation. I think this will need to either be referenced as-is (`translatableMessage`) or annotated such that it's exposed as `redirectMessage`."", 'commenter': 'mike-jumper'}]"
530,guacamole-ext/src/main/java/org/apache/guacamole/form/Field.java,"@@ -122,6 +122,12 @@
          * and protocols which leverage it.
          */
         public static String TERMINAL_COLOR_SCHEME = ""TERMINAL_COLOR_SCHEME"";
+        
+        /**
+         * A redirect field whose value is an encoded URL to which the user
+         * will be redirected.
+         */
+        public static String REDIRECT = ""REDIRECT"";","[{'comment': 'I think we messed up in the past within this class, but this should be `final`.', 'commenter': 'mike-jumper'}]"
530,extensions/guacamole-auth-openid/src/main/resources/transformToken.js,"@@ -1,34 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * ""License""); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-/**
- * Before AngularJS routing takes effect, reformat the URL fragment
- * from the format used by OpenID Connect (""#param1=value1&param2=value2&..."")
- * to the format used by AngularJS (""#/?param1=value1&param2=value2&..."") such
- * that the client side of Guacamole's authentication system will automatically
- * forward the ""id_token"" value for server-side validation.
- * 
- * Note that not all OpenID identity providers will include the ""id_token""
- * parameter in the first position; it may occur after several other parameters
- * within the fragment.
- */
-(function guacOpenIDTransformToken() {
-    if (/^#(?![?\/])(.*&)?id_token=/.test(location.hash))
-        location.hash = '/?' + location.hash.substring(1);
-})();","[{'comment': 'Is this no longer needed?', 'commenter': 'mike-jumper'}, {'comment': ""For some reason I remember that you worked on a way to do this in the base code.  I cannot remember where, but I'll try to dig up the JIRA issue for it..."", 'commenter': 'necouchman'}, {'comment': ""Okay, I think I was confusing it with something else (more generic handling of URL parameters in Guacamole Client), so I've restored this file along with the relevant pieces of `pom.xml` and `guac-manifest.json` for the OpenID extension."", 'commenter': 'necouchman'}]"
530,extensions/guacamole-auth-openid/src/main/resources/guac-manifest.json,"@@ -17,14 +17,6 @@
 
     ""js"" : [
         ""openid.min.js""
-    ],
-
-    ""css"" : [
-        ""openid.min.css""
-    ],
-
-    ""resources"" : {
-        ""templates/openidTokenField.html"" : ""text/html""
-    }
+    ]","[{'comment': 'With the template and CSS going away, are similar changes needed for the OpenID `pom.xml`?\r\n\r\nThe CAS `pom.xml` shows the JS/CSS minification and AngularJS template caching removed. For OpenID, it makes sense that JS minification would stick around, but what about the rest?', 'commenter': 'mike-jumper'}, {'comment': 'Ah, I guess template caching can go away, and I can strip out the CSS minification bits.', 'commenter': 'necouchman'}]"
531,guacamole-docker/bin/start.sh,"@@ -205,6 +205,32 @@ END
         ""mysql-user-required"" \
         ""$MYSQL_USER_REQUIRED""
 
+    set_optional_property \
+        ""mysql-ssl-mode""  \
+        ""$MYSQL_SSL_MODE""
+
+    set_optional_property        \
+        ""mysql-ssl-trust-store""  \
+        ""$MYSQL_SSL_TRUST_STORE""
+
+    # For SSL trust store password, check secrets, first, then standard env variable
+    if [ -n ""$MYSQL_SSL_TRUST_PASSWORD_FILE"" ]; then
+        set_property ""mysql-ssl-trust-password"" `cat $MYSQL_SSL_TRUST_PASSWORD_FILE`","[{'comment': 'The `$MYSQL_SSL_TRUST_PASSWORD_FILE` variable will need to be quoted in case it expands to a value containing whitespace, as does backtick-quoted command (in case the command outputs a value containing whitespace). For example:\r\n\r\n    ""`cat ""$FOO""`""\r\n\r\nSame for the other invocations.', 'commenter': 'mike-jumper'}]"
534,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -159,11 +159,10 @@
      *     The URL to send to the SAML IdP as the Client Identifier.
      *
      * @throws GuacamoleException
-     *     If guacamole.properties cannot be parsed, or if the
-     *     property is missing.
+     *     If guacamole.properties cannot be parsed.
      */
     private URI getEntityId() throws GuacamoleException {
-        return environment.getRequiredProperty(SAML_ENTITY_ID);
+        return environment.getProperty(SAML_ENTITY_ID);","[{'comment': ""It looks like `URIGuacamoleProperty` was not written to handle `null` values, and a `NullPointerException` is thrown in the case that this property is actually missing.\r\n\r\nI think you'll have to add a `null` check within `parseValue()` of `URIGuacamoleProperty`, either as part of this or part of [GUACAMOLE-678](https://issues.apache.org/jira/browse/GUACAMOLE-678)."", 'commenter': 'mike-jumper'}, {'comment': 'Okay, re-opened GUACAMOLE-678 and did a pull request for that one.', 'commenter': 'necouchman'}]"
546,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/ActivityRecordSet.java,"@@ -56,6 +56,24 @@
      *      If an error occurs while retrieving the records within this set.
      */
     Collection<RecordType> asCollection() throws GuacamoleException;
+    
+    /**
+     * Returns records within this set for the item having the specified
+     * identifier as a standard Collection.
+     *
+     * @param identifier
+     *     The identifier of the underlying item that the collection
+     *     should be limited to.
+     * 
+     * @return
+     *     A collection containing records within this set for the specified
+     *     identifier.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while retrieving the records within this set.
+     */
+    Collection<RecordType> asCollection(String identifier)
+            throws GuacamoleException;","[{'comment': 'A couple things:\r\n\r\n* To continue maintaining backward compatibility, default implementations need to be provided for new functions added to existing interfaces within guacamole-ext.\r\n* As defined, this will be ambiguous as to which type of object the identifier refers to. The records within the collection may point to multiple types of objects. For example, a connection record points to both a user and a connection, and may also point to a sharing profile.\r\n* The general pattern for `ActivityRecordSet` is a set of functions which can be layered on top of each other by virtue of those functions each returning `ActivityRecordSet`, similar to the various ""builder"" objects we see in JAX-RS. Keeping with that pattern, I think this would be best implemented not as new version of `asCollection()`, but as some other function that allows the set to be narrowed to records containing a particular object having a particular identifier.\r\n\r\n   I could imagine a new version of `contains()` which accepts an `Identifiable` rather than a `String`, or perhaps multiple `contains()` for `Connection`, `User`, `SharingProfile`, etc.', 'commenter': 'mike-jumper'}, {'comment': 'Another possibility could be to add something like `getConnectionHistory()` and `getUserHistory()` (returning `ActivityRecordSet` like their `UserContext` versions) to `Connection` and `User` respectively, deprecating the old `getHistory()`.\r\n\r\nThat seems clean but would also lend itself well to default implementations (could just wrap `getHistory()` in some sort of basic `ActivityRecordSet` implementation).', 'commenter': 'mike-jumper'}, {'comment': 'ok', 'commenter': 'necouchman'}, {'comment': 'Okay, I have taken a wild stab at this - let me know how it looks, now.', 'commenter': 'necouchman'}]"
546,guacamole/src/main/java/org/apache/guacamole/rest/history/HistoryResource.java,"@@ -86,8 +93,9 @@ public HistoryResource(UserContext userContext) {
      *     If an error occurs while retrieving the connection history.
      */
     @GET
-    @Path(""connections"")
+    @Path(""connections{p:/?}{identifier : ([0-9]+)?}"")
     public List<APIConnectionRecord> getConnectionHistory(
+            @PathParam(""identifier"") String identifier,","[{'comment': ""Beware that not all identifiers are numeric. That said, I don't think this is the best place to add this. I think it would be better to continue using the existing per-connection endpoint for connection-specific history searches, but attempt to refactor `HistoryResource` such that it can be used both at the global level and per-connection / per-user."", 'commenter': 'mike-jumper'}, {'comment': 'Ah, okay.  I think I misunderstood your response to my question in Slack - I thought you were saying the existing API endpoint should be removed in favor of the common `history` endpoint that is already filter-able.', 'commenter': 'necouchman'}]"
546,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/User.java,"@@ -103,7 +103,26 @@
      *     If an error occurs while reading the history of this user, or if
      *     permission is denied.
      */
+    @Deprecated","[{'comment': 'The context of this deprecation needs to be documented within the JavaDoc as well.', 'commenter': 'mike-jumper'}, {'comment': ""We'll have to be careful here:\r\n\r\n* As written, deprecated or not, an implementation of `User` will still be required to implement the older `getHistory()` function.\r\n* Providing a default implementation of `getHistory()` which leverages `getUserHistory()` would allow things to behave as expected, but then older extensions which implement only `getHistory()` will fail.\r\n* Providing default implementations of _both_ which each point at the other would would technically work, but would make implementing `User` dangerous. An extension that fails to implement either function would compile without any warning or error, yet invoking either function would result in infinite recursion.\r\n\r\nThe way we worked around this for similar changes to `Connectable` was to provide a default implementation only for the deprecated function at the library level, but override that internally with an identical interface specific to the web application that provides default implementations of both.\r\n\r\nFinding some way to achieve this purely through enhancements to `ActivityRecordSet` could avoid the above."", 'commenter': 'mike-jumper'}, {'comment': ""Well, I've tried to take care of this, but not 100% certain if I succeeded or not. Could you review and let me know if there is something, here, that still needs to be addressed?"", 'commenter': 'necouchman'}, {'comment': 'Sure thing.', 'commenter': 'mike-jumper'}, {'comment': ""OK - I haven't reviewed the meat of this, but the issue with the interface is still there. I think I can explain a bit better and in more depth.\r\n\r\nThe API issue is that we're adding a new function to a Java interface, in this case `User`. Consider a Java class defined within a Guacamole extension like:\r\n\r\n```java\r\npublic class ExampleUser implements User {\r\n\r\n    @Override\r\n    public ActivityRecordSet<ActivityRecord> getUserHistory() {\r\n        // STUB\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe above class will not compile because it does not implement the deprecated `getHistory()` function. This is problematic, because it seems unreasonable to require developers to implement deprecated functions that should no longer be used. Ideally, they should implement only the current functions and be OK.\r\n\r\nJava 8 provides for this with default implementations. If the interface provides a default implementation for `getHistory()`, then implementations need not provide that function:\r\n\r\n```java\r\npublic interface User {\r\n\r\n    ...\r\n\r\n    default List<? extends ActivityRecord> getHistory() throws GuacamoleException {\r\n        return new ArrayList<>(getUserHistory().toCollection());\r\n    }\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\nSo ... problem solved? Nope, because we need to maintain backward compatibility, as well. Unless additional steps are taken, an attempt to use an extension built for 1.2.0, 1.1.0, etc. may fail against 1.3.0 because a class implementing `User` does not provide `getUserHistory()` - the new function.\r\n\r\nAh! But then we can just provide defaults for both, right?\r\n\r\n```java\r\npublic interface User {\r\n\r\n    ...\r\n\r\n    default List<? extends ActivityRecord> getHistory() throws GuacamoleException {\r\n        return new ArrayList<>(getUserHistory().toCollection());\r\n    }\r\n\r\n    ActivityRecordSet<ActivityRecord> getUserHistory() throws GuacamoleException {\r\n        return new SomeSortOfSimpleActivityRecordSet<>(getHistory());\r\n    }\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n_Now_ problem solved? Almost. The above would work, and would solve all compatibility issues, but we lose the benefit of having a compiler yell at us if a needed function is unimplemented. Worse still: failing to implement at least one of those functions would result in a stack overflow when the webapp invokes `getUserHistory()`.\r\n\r\nIt is possible to solve this, but it involves:\r\n\r\n* Providing a default only for the deprecated function within guacamole-ext. (See [the current `Connectable` interface within guacamole-ext](https://github.com/apache/guacamole-client/blob/0091bb1aea14c567c8166f0ed8eadf7c31b6bd6e/guacamole-ext/src/main/java/org/apache/guacamole/net/auth/Connectable.java))\r\n* Within the webapp, copying `User` entirely and providing a default _for both_. (See [the current, internal `Connectable` interface within the webapp](https://github.com/apache/guacamole-client/blob/0091bb1aea14c567c8166f0ed8eadf7c31b6bd6e/guacamole/src/main/java/org/apache/guacamole/net/auth/Connectable.java))\r\n\r\nThat would allow old extensions to continue to work, with new extensions intending to build against the new API getting the expected compile-time errors, but makes things difficult to maintain until the deprecated things are removed.\r\n\r\nOverall, the type of change that results in this is replacing one function with another. For `Connectable`, there was no choice at all. If a sensible set of changes can accomplish what we need here (without replacing one function of an interface with another), then the complexity can be avoided."", 'commenter': 'mike-jumper'}, {'comment': ""Okay, so what if the `default` implementations of these methods throw a `GuacamoleUnsupportedException()` exception, which is what several of the implementations of `User` do, anyway? Then, any classes wishing to implement have to provide actual implementations of those methods, and can choose which they choose to implement?\r\n\r\nThat seems too simple, so there must be some case I'm not thinking of that would not be covered by this?"", 'commenter': 'necouchman'}, {'comment': ""At first, my impression was that there are a couple issues with that approach:\r\n\r\n1. If an implementation of `User` or `Connection` does not support history tracking, it should return an empty `List` or empty `ActivityRecordSet` (depending on which history function we're talking about). Throwing an exception will cause any associated REST API call to fail with an error.\r\n2. If the `default` version of the _new_ function (`getUserHistory()`) does not point back to the old function (`getHistory()`), then an extension for an older version of Guacamole that implemented the old function will mysteriously cease to function.\r\n\r\n*BUT:*\r\n\r\nPerhaps this can work well if the REST API itself handles `GuacamoleUnsupportedException`, relying on that to indicate whether the older function should be invoked?"", 'commenter': 'mike-jumper'}, {'comment': 'Okay, so I could either do that, or just write `default` implementations in `User` that return `List<ActivityRecord>` (`getHistory()`) and `ActivityRecordSet<ActivityRecord>` (`getUserHistory()`). Is there a situations where the default implementation returning empty sets would cause issues?', 'commenter': 'necouchman'}, {'comment': 'If we have something like:\r\n\r\n```java\r\npublic interface User {\r\n\r\n    ...\r\n\r\n    @Deprecated\r\n    default List<? extends ActivityRecord> getHistory() throws GuacamoleException {\r\n        return Collections.emptyList();\r\n    }\r\n\r\n    ActivityRecordSet<ActivityRecord> getUserHistory() throws GuacamoleException {\r\n         return new SomeSortOfSimpleActivityRecordSet<>(getHistory());\r\n    }\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\nThen we end up with:\r\n\r\n| Extension implements... | Result |\r\n| -------------- | ------ |\r\n| Only `getHistory()` (older extension) | Webapp invokes `getUserHistory()` which calls `getHistory()` by default and works as expected. |\r\n| Only `getUserHistory()` (newer extension) | Webapp invokes `getUserHistory()` which works as expected. If an older extension decorates `User` objects and attempts to do something with `getHistory()`, it will not have any effect and may behave as if history is unimplemented. |\r\n| Both (masochistic extension) | All calls to history-related functions work as expected. |\r\n| Neither | Calls to either `getUserHistory()` or `getHistory()` have the same result: empty set of records |\r\n\r\nThat seems OK except for the case of inter-extension calling of the older `getHistory()` function.', 'commenter': 'mike-jumper'}, {'comment': '> Okay, so I could either do that, or just write `default` implementations in `User` that return `List<ActivityRecord>` (`getHistory()`) and `ActivityRecordSet<ActivityRecord>` (`getUserHistory()`). Is there a situations where the default implementation returning empty sets would cause issues?\r\n\r\nFor something like:\r\n\r\n```java\r\npublic interface User {\r\n\r\n    ...\r\n\r\n    @Deprecated\r\n    default List<? extends ActivityRecord> getHistory() throws GuacamoleException {\r\n        return Collections.emptyList();\r\n    }\r\n\r\n    ActivityRecordSet<ActivityRecord> getUserHistory() throws GuacamoleException {\r\n         return new SimpleActivityRecordSet<>();\r\n    }\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\nWe end up with:\r\n\r\n| Extension implements... | Result |\r\n| -------------- | ------ |\r\n| Only `getHistory()` (older extension) | Webapp invokes `getUserHistory()` which returns an empty set, despite `getHistory()` doing otherwise. |\r\n| Only `getUserHistory()` (newer extension) | Webapp invokes `getUserHistory()` which works as expected. If an older extension decorates `User` objects and attempts to do something with `getHistory()`, it will not have any effect and may behave as if history is unimplemented. |\r\n| Both (masochistic extension) | All calls to history-related functions work as expected. |\r\n| Neither | Calls to either `getUserHistory()` or `getHistory()` have the same result: empty set of records |\r\n\r\nThat ends up not working well because older extensions would cease being compatible (they would function differently with 1.3.0 than the version of Guacamole they were written for).', 'commenter': 'mike-jumper'}]"
546,guacamole/src/main/java/org/apache/guacamole/rest/connection/ConnectionResource.java,"@@ -150,18 +149,16 @@ public ConnectionResource(@Assisted UserContext userContext,
      * @throws GuacamoleException
      *     If an error occurs while retrieving the connection history.
      */
-    @GET
     @Path(""history"")
-    public List<APIConnectionRecord> getConnectionHistory()
+    public ConnectionHistoryResource getConnectionHistory()
             throws GuacamoleException {
 
-        // Retrieve the requested connection's history
-        List<APIConnectionRecord> apiRecords = new ArrayList<APIConnectionRecord>();
-        for (ConnectionRecord record : connection.getHistory())
-            apiRecords.add(new APIConnectionRecord(record));
-
-        // Return the converted history
-        return apiRecords;
+        try {
+            return new ConnectionHistoryResource(connection.getConnectionHistory());
+        }
+        catch (GuacamoleUnsupportedException e) {
+            return new ConnectionHistoryResource(new SimpleActivityRecordSet<>());
+        }","[{'comment': ""Unfortunately, this will break backward compatibility with extensions written for 1.2.0 and older, as those extensions will not implement `getConnectionHistory()`. Though they may implement `getHistory()`, that will not be called here, and older extensions will instead behave as if history is not supported.\r\n\r\nI think I see what you're aiming at here, though, and I hadn't considered the `getHistory()` wrapping `getConnectionHistory()` approach.\r\n\r\nIf:\r\n\r\n* The older `getHistory()` defaults to calling the newer `getUserHistory()` / `getConnectionHistory()`\r\n* The newer `getUserHistory()` / `getConnectionHistory()` defaults to throwing `GuacamoleUnsupportedException`\r\n* The behavior of newer `getUserHistory()` / `getConnectionHistory()` is specifically documented as throwing `GuacamoleUnsupportedException` if unimplemented, and that the older, deprecated `getHistory()` function should be tried instead if this occurs.\r\n\r\nThen the webapp could handle things by:\r\n\r\n1. Invoking the newer function.\r\n2. If that fails with `GuacamoleUnsupportedException`, assume older API and invoke the older function.\r\n3. If _that_ fails, assume no history support and use empty set.\r\n\r\nAnd decorating extensions would also behave correctly, as invocations of the older `getHistory()` would function as expected, while newer invocations of `getUserHistory()` / `getConnectionHistory()` would know to handle `GuacamoleUnsupportedException`.\r\n\r\nAm I missing something? Does this solve everything?"", 'commenter': 'mike-jumper'}, {'comment': ""Yeah, I think I'm finally starting to get my brain around handling all of the compatibility across implementations. I see what you're saying, and I'll take a shot at tweaking it to your suggestion, here, and punching up the documentation to cover it.\r\n\r\nI _think_ that covers all the scenarios, but I'll also try to go over possibilities in my mind and make sure there aren't any corner cases that haven't been considered that would fail in such a scenario."", 'commenter': 'necouchman'}, {'comment': ""Okay, I've worked through this - not entirely sure how well I've done. I hit some issues with the `List<? extends ConnectionRecord>` and converting that to `List<ConnectionRecord>`. I ended up with the loops you see, here, now - not sure if there's a more elegant way to do that translation from `? extends RecordType` to just `RecordType`? I tried various adjustments to the types of methods and such in the classes, and I couldn't really do much without breaking compatibility.\r\n\r\nAlso, the `HistoryResource` class in `rest/history` pulls history from `UserContext`, whereas the `ConnectionResource` and `UserResource` classes in `rest/connection` and `rest/user` pull history from `Connection` and `User`, and I'm not sure if there are any modifications needed to the `HistoryResource` class or anything in the `UserContext` interfaces or classes that need to be tweaked to handle these changes?"", 'commenter': 'necouchman'}, {'comment': ""> Okay, I've worked through this - not entirely sure how well I've done. I hit some issues with the `List<? extends ConnectionRecord>` and converting that to `List<ConnectionRecord>`. I ended up with the loops you see, here, now - not sure if there's a more elegant way to do that translation from `? extends RecordType` to just `RecordType`? ...\r\n\r\nCan you point to the specific part of the code where you're encountering trouble? I don't think there should be any need to convert.\r\n\r\n> Also, the `HistoryResource` class in `rest/history` pulls history from `UserContext`, whereas the `ConnectionResource` and `UserResource` classes in `rest/connection` and `rest/user` pull history from `Connection` and `User`, and I'm not sure if there are any modifications needed to the `HistoryResource` class or anything in the `UserContext` interfaces or classes that need to be tweaked to handle these changes?\r\n\r\nAre you referring to whether the code that pulls directly from `UserContext` needs to add special handling for `GuacamoleUnsupportedException`?"", 'commenter': 'mike-jumper'}, {'comment': ""> Can you point to the specific part of the code where you're encountering trouble? I don't think there should be any need to convert.\r\n\r\nSee comment below: https://github.com/apache/guacamole-client/pull/546#discussion_r513709095\r\n\r\n> Are you referring to whether the code that pulls directly from UserContext needs to add special handling for GuacamoleUnsupportedException?\r\n\r\nCorrect, or whether `UserContext` itself needs to take that into account at all."", 'commenter': 'necouchman'}, {'comment': 'I agree that it would make sense to be consistent in the handling of `GuacamoleUnsupportedException` and provide the same functionality there, as well. It could make things easier for developers that may well use the same code to drive both.', 'commenter': 'mike-jumper'}]"
546,guacamole/src/main/java/org/apache/guacamole/rest/connection/ConnectionResource.java,"@@ -150,18 +153,26 @@ public ConnectionResource(@Assisted UserContext userContext,
      * @throws GuacamoleException
      *     If an error occurs while retrieving the connection history.
      */
-    @GET
+    @SuppressWarnings(""deprecation"")
     @Path(""history"")
-    public List<APIConnectionRecord> getConnectionHistory()
+    public ConnectionHistoryResource getConnectionHistory()
             throws GuacamoleException {
 
-        // Retrieve the requested connection's history
-        List<APIConnectionRecord> apiRecords = new ArrayList<APIConnectionRecord>();
-        for (ConnectionRecord record : connection.getHistory())
-            apiRecords.add(new APIConnectionRecord(record));
-
-        // Return the converted history
-        return apiRecords;
+        try {
+            return new ConnectionHistoryResource(connection.getConnectionHistory());
+        }
+        catch (GuacamoleUnsupportedException e) {
+            try {
+                List<ConnectionRecord> history = Collections.emptyList();
+                for (ConnectionRecord record : connection.getHistory()) {
+                    history.add(record);
+                }
+                return new ConnectionHistoryResource(new SimpleActivityRecordSet<>(history));
+            }
+            catch (GuacamoleUnsupportedException ex) {
+                return new ConnectionHistoryResource(new SimpleActivityRecordSet<>());
+            }
+        }","[{'comment': ""This is the area that I'm talking about in terms of the conversion.  So, what I initially tried to do was:\r\n```\r\ntry {\r\n    return new ConnectionHistoryResource(connection.getConnectionHistory());\r\n}\r\ncatch (GuacamoleUnsupportedException e) {\r\n    try {\r\n        return new ConnectionHistoryResource(new SimpleActivityRecordSet<ConnectionRecord>(connection.getHistory()));\r\n    }\r\n    catch (GuacamoleUnsupportedException ex) {\r\n        return new ConnectionHistoryResource(new SimpleActivityRecordSet<>());\r\n    }\r\n}\r\n```\r\nHowever, when I do that, I get a compile error:\r\n\r\n    incompatible types: List<CAP#1> cannot be converted to List<ConnectionRecord>\r\n\r\nThis appears to be because the return type of `getHistory()` is `List<? extends ConnectionRecord>` whereas the input type of `SimpleActivityRecordSet()` is `ActivityRecord`.  For some reason that `? extends` causes it a bunch of heartache."", 'commenter': 'necouchman'}, {'comment': 'Ah, I see what you\'re saying. It\'s a rather confusing aspect of Java generics. Consider if this was possible:\r\n\r\n```java\r\nList<FancyThing> a = new ArrayList<>();\r\nList<? extends Thing> b = a; // This is completely OK\r\nList<Thing> c = b; // This shouldn\'t be allowed because ...\r\nc.add(new Thing()); // ... this breaks the contract of List<FancyThing>\r\n```\r\n\r\nSuddenly, that `List` that\'s expected to contain only fancy things contains a non-fancy thing, breaking the contract of the type. Declaring something as `List<Thing>` is saying ""a list of `Thing` or any subclass of `Thing`"". Declaring something as `List<? extends Thing>` is saying ""a list of **an unspecified subclass of `Thing`**"".\r\n\r\nFor the approach here with `SimpleActivityRecordSet`:\r\n\r\n* There is a convenient way to turn `List<? extends T>` into `List<T>`, [`Collections.unmodifiableList()`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableList-java.util.List-).\r\n* If you\'re adding a convenience constructor to `SimpleActivityRecordSet()` that accepts a list of records, you should probably use `List<? extends RecordType>` for the parameter so that it can accept any `List` having usable elements. This is what `ArrayList` does, presumably for the same reason: https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#ArrayList-java.util.Collection-', 'commenter': 'mike-jumper'}, {'comment': ""...unless the intent is that `SimpleActivityRecordSet` will be backed by the provided `List`, in which case `List<RecordType>` **is** correct. This is what is done with `SimpleDirectory`: https://guacamole.apache.org/doc/guacamole-ext/org/apache/guacamole/net/auth/simple/SimpleDirectory.html#SimpleDirectory-java.util.Collection-\r\n\r\nI would suggest that the type be `Collection<RecordType>`, though, for API's sake."", 'commenter': 'mike-jumper'}]"
546,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/connection/ConnectionService.java,"@@ -411,28 +411,16 @@ protected ConnectionRecord getObjectInstance(ConnectionRecordModel model) {
             ModeledConnection connection) throws GuacamoleException {
 
         String identifier = connection.getIdentifier();
-
-        // Retrieve history only if READ permission is granted
-        if (hasObjectPermission(user, identifier, ObjectPermission.Type.READ)) {","[{'comment': 'Can you clarify why the explicit check for ""READ"" permission is no longer needed?', 'commenter': 'mike-jumper'}]"
546,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/UserService.java,"@@ -581,13 +581,9 @@ protected ActivityRecord getObjectInstance(ActivityRecordModel model) {
             ModeledUser user) throws GuacamoleException {
 
         String username = user.getIdentifier();
-
-        // Retrieve history only if READ permission is granted
-        if (hasObjectPermission(authenticatedUser, username, ObjectPermission.Type.READ))
-            return getObjectInstances(userRecordMapper.select(username));","[{'comment': 'Same here - why remove the check?', 'commenter': 'mike-jumper'}]"
546,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/resources/org/apache/guacamole/auth/jdbc/connection/ConnectionRecordMapper.xml,"@@ -108,28 +108,35 @@
         LEFT JOIN guacamole_user       ON guacamole_connection_history.user_id       = guacamole_user.user_id
 
         <!-- Search terms -->
-        <foreach collection=""terms"" item=""term""
-                 open=""WHERE "" separator="" AND "">
-            (
-
-                guacamole_connection_history.user_id IN (
-                    SELECT user_id
-                    FROM guacamole_user
-                    WHERE POSITION(#{term.term,jdbcType=VARCHAR} IN username) > 0
-                )
+        <where>
+            
+            <if test=""identifier != null"">
+                guacamole_connection_history.connection_id = #{identifier,jdbcType=VARCHAR}
+            </if>
+            
+            <foreach collection=""terms"" item=""term"" separator="" AND "">","[{'comment': 'Will the `AND` be automatically inserted here between `guacamole_connection_history.connection_id = ...` and `(term1) AND (term2) AND (term3) AND ...`?', 'commenter': 'mike-jumper'}]"
546,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/resources/org/apache/guacamole/auth/jdbc/user/UserRecordMapper.xml,"@@ -105,25 +105,32 @@
         FROM guacamole_user_history
 
         <!-- Search terms -->
-        <foreach collection=""terms"" item=""term""
-                 open=""WHERE "" separator="" AND "">
-            (
-
-                guacamole_user_history.user_id IN (
-                    SELECT user_id
-                    FROM guacamole_user
-                    JOIN guacamole_entity ON guacamole_user.entity_id = guacamole_entity.entity_id
-                    WHERE
-                            POSITION(#{term.term,jdbcType=VARCHAR} IN guacamole_entity.name) > 0
-                        AND guacamole_entity.type = 'USER'),
-                )
-
-                <if test=""term.startDate != null and term.endDate != null"">
-                    OR start_date BETWEEN #{term.startDate,jdbcType=TIMESTAMP} AND #{term.endDate,jdbcType=TIMESTAMP}
-                </if>
+        <where>
+            
+            <if test=""username != null"">
+                guacamole_entity.name = #{username,jdbcType=VARCHAR}","[{'comment': ""I don't see where `guacamole_entity` is joined in here. Should this be against `guacamole_user_history.username`?"", 'commenter': 'mike-jumper'}]"
546,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/ActivityRecordSet.java,"@@ -56,6 +58,19 @@
      *      If an error occurs while retrieving the records within this set.
      */
     Collection<RecordType> asCollection() throws GuacamoleException;
+    
+    /**
+     * Returns all records within this set as a list
+     * 
+     * @return
+     *     A list containing all records in this set.
+     * 
+     * @throws GuacamoleException 
+     *     If an error occurs while retrieving the records within this set.
+     */
+    default List<RecordType> asList() throws GuacamoleException {
+        return new ArrayList<>(asCollection());
+    }","[{'comment': ""I'm not sure about the benefit of an `asList()` function outside our own need for a convenient way to implement the now-deprecated functions. Perhaps this shouldn't be part of the API? Will the benefit of this function survive the eventual removal of the deprecated functions?"", 'commenter': 'mike-jumper'}]"
548,guacamole-docker/bin/start.sh,"@@ -591,6 +591,18 @@ END
     ln -s /opt/guacamole/duo/guacamole-auth-*.jar   ""$GUACAMOLE_EXT""
 }
 
+##
+## Adds properties to guacamole.properties which configure the header
+## authentication provider.
+##
+associate_header() {
+    # Update config file
+    set_optional_property   ""http-auth-header""                 ""$HTTP_AUTH_HEADER""","[{'comment': 'Nitpick, but can we remove some of the extra spaces, here?', 'commenter': 'necouchman'}, {'comment': 'Done.  See commit 8be628a.  I did another force-push since a fixup commit made the most sense for this.', 'commenter': 'jsf9k'}]"
550,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -197,6 +197,9 @@ public ExprNode generateQuery(ExprNode filter,
      * @param searchHop
      *     The current level of referral depth for this search, used for
      *     limiting the maximum depth to which referrals can go.
+     * 
+     * @param relevantAttributes
+     *     The attribute(s) relevant to return in this search.","[{'comment': 'Reading through the body of this function, it is intentional behavior that `null` may be used to indicate that all attributes are relevant. That should be documented here.', 'commenter': 'mike-jumper'}, {'comment': 'You are right, I will add the clarification as you pointed because is relevant!', 'commenter': 'echu2013'}]"
550,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/ObjectQueryService.java,"@@ -197,6 +197,10 @@ public ExprNode generateQuery(ExprNode filter,
      * @param searchHop
      *     The current level of referral depth for this search, used for
      *     limiting the maximum depth to which referrals can go.
+     * 
+     * @param relevantAttributes
+     *     The attribute(s) relevant to return for this search,
+	 *     if all available should be returned pass null as value.","[{'comment': '1. Please correct the alignment here. It looks like a tab character may have snuck in.\r\n2. Documentation should describe the nature/meaning of things, rather than commanding the developer to do a specific thing under specific circumstances. The first half of the documentation for this parameter looks good, but the latter half switches over from descriptive to imperative. I think we should maintain the established descriptive phrasing (for example: ""or null if all attributes should be returned"").', 'commenter': 'mike-jumper'}]"
550,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/group/UserGroupService.java,"@@ -208,13 +208,21 @@ private ExprNode getGroupSearchFilter() throws GuacamoleException {
             }
         }
 
+        // Gather all attributes relevant for a group
+        ArrayList<String> groupAttributes = new ArrayList<String>();","[{'comment': '1. The size of the required backing array can be anticipated here. This will work as-is, but unnecessarily relies on automatic array resizing or sufficiently-large defaults.\r\n2. Unless code consuming this relies on the object being an `ArrayList`, the type declared for the variable should be kept minimal, presumably `List<String>` or `Collection<String>`.', 'commenter': 'mike-jumper'}]"
550,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/group/UserGroupService.java,"@@ -208,13 +208,21 @@ private ExprNode getGroupSearchFilter() throws GuacamoleException {
             }
         }
 
+        // Gather all attributes relevant for a group
+        ArrayList<String> groupAttributes = new ArrayList<String>();
+        groupAttributes.add(confService.getMemberAttribute());
+        confService.getGroupNameAttributes().forEach(
+                       attribute -> groupAttributes.add(attribute)
+                       );","[{'comment': 'Why not `addAll()`?\r\n\r\nAnd what if one of the attribute names within `confService.getGroupNameAttributes()` is equal to `confService.getMemberAttribute()`? Will the duplicate attribute cause any problems for the search?', 'commenter': 'mike-jumper'}]"
552,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/MySQLAuthenticationProviderModule.java,"@@ -95,7 +95,7 @@ public MySQLAuthenticationProviderModule(MySQLEnvironment environment)
         File trustStore = environment.getMySQLSSLTrustStore();
         if (trustStore != null)
             driverProperties.setProperty(""trustCertificateKeyStoreUrl"",
-                    trustStore.getAbsolutePath());
+                    String.valueOf(trustStore.toURI()));","[{'comment': ""Instead of `String.valueOf()` it seems like it would be better to use the `URI` class's `toString()` method, here.  It's possible that's already what `String.valueOf()` does under the hood, but seems like a more direct reference to it would be better."", 'commenter': 'necouchman'}]"
554,guacamole-docker/bin/start.sh,"@@ -659,9 +659,15 @@ associate_header() {
 ##
 start_guacamole() {
 
+    # User-only writable CATALINA_BASE
+    export CATALINA_BASE=$GUACAMOLE_HOME/tomcat","[{'comment': ""I don't think `CATALINA_BASE` should be a subdirectory of `GUACAMOLE_HOME`. The contents and purpose of `GUACAMOLE_HOME` are dictated by the webapp. It contains specific things in a specific structure and shouldn't be used as a general-purpose storage location."", 'commenter': 'mike-jumper'}, {'comment': ""Thank you very much for your feedback @mike-jumper 👍\r\nYou're right, I modified accordingly."", 'commenter': 'benrubson'}]"
554,guacamole-docker/bin/start.sh,"@@ -659,9 +659,15 @@ associate_header() {
 ##
 start_guacamole() {
 
+    # User-only writable CATALINA_BASE
+    export CATALINA_BASE=$GUACAMOLE_HOME/tomcat
+    for dir in logs temp webapps work; do
+        mkdir -p $CATALINA_BASE/$dir
+    done
+    cp -R /usr/local/tomcat/conf $CATALINA_BASE","[{'comment': 'Will a symbolic link not work in this case?', 'commenter': 'mike-jumper'}, {'comment': ""Well, it would work.\r\nBut at least one other PR plans to modify the configuration : #489.\r\nLet's then keep it writable 👍"", 'commenter': 'benrubson'}]"
556,guacamole-docker/bin/start.sh,"@@ -438,6 +438,7 @@ END
     set_optional_property ""ldap-user-search-filter"" ""$LDAP_USER_SEARCH_FILTER""
     set_optional_property ""ldap-config-base-dn""     ""$LDAP_CONFIG_BASE_DN""
     set_optional_property ""ldap-group-base-dn""      ""$LDAP_GROUP_BASE_DN""
+    set_optional_property ""ldap-member-attribute-type""   ""$LDAP_MEMBER_ATTRIBUTE_TYPE""","[{'comment': 'Probably makes sense to line up the spacing on these lines so that the final column all starts in the same place.', 'commenter': 'necouchman'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -82,11 +79,13 @@ public CASAuthenticatedUser authenticateUser(Credentials credentials)
         if (request != null) {
             String ticket = request.getParameter(CASTicketField.PARAMETER_NAME);
             if (ticket != null) {
-                Map<String, String> tokens = ticketService.validateTicket(ticket, credentials);
+                CASAuthenticatedUser authenticatedUser =
+                    ticketService.validateTicket(ticket, credentials);
                 String username = credentials.getUsername();
                 if (username != null) {
-                    CASAuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
-                    authenticatedUser.init(username, credentials, tokens);
+                    Map<String, String> tokens = authenticatedUser.getTokens();
+                    Set<String> effectiveGroups = authenticatedUser.getEffectiveUserGroups();
+                    authenticatedUser.init(username, credentials, tokens, effectiveGroups);","[{'comment': ""I'm not sure this is going to work as intended. I think the direction is good, but, I believe that when you call `getTokens()` and `getEffectiveUserGroups()` prior to the `init()` call, you're going to get empty sets. The `init()` call needs to happen in the `validateTicket()` method prior to returning the user (see below)."", 'commenter': 'necouchman'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -122,16 +134,42 @@
             }
             
             // Convert remaining attributes that have values to Strings
+            String groupAttribute = confService.getGroupAttribute();
+            // Use cas-member-attribute to retrieve and set group memberships
+            String groupDnFormat = confService.getGroupDnFormat();
+            String groupTemplate = """";
+            if (groupDnFormat != null) {
+                // if CAS is backended to LDAP, groups come in as RFC4514 DN
+                // syntax.  If cas-group-dn-format is set, this strips
+                // an entry such as ""CN=Foo,OU=Bar,DC=example,DC=com"" to
+                // ""Foo""
+                groupTemplate = groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)"");
+                // the underlying parser aggregates all instances of the same
+                // attribute, so we need to be able to parse them out
+                groupTemplate=groupTemplate+"",*\\s*"";
+            } else {
+               groupTemplate = ""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+,*\\s*)"";
+            }
+            Pattern pattern = Pattern.compile(groupTemplate);
+
             for (Entry <String, Object> attr : ticketAttrs.entrySet()) {
                 String tokenName = TokenName.canonicalize(attr.getKey(),
                         CAS_ATTRIBUTE_TOKEN_PREFIX);
                 Object value = attr.getValue();
-                if (value != null)
+                if (value != null) {
                     tokens.put(tokenName, value.toString());
+                    if (attr.getKey().equals(groupAttribute)) {
+                        String valueWithoutBrackets = value.toString().substring(1,value.toString().length()-1);
+                        Matcher matcher = pattern.matcher(valueWithoutBrackets);
+                        while (matcher.find()) {
+                            effectiveGroups.add(matcher.group(1));
+                        }
+                    }
+                }","[{'comment': 'I feel like this could be cleaned up a little more.  The `value.toString()` method gets called a couple of times, so might be worth assigning that  to a `String` at the top of this `if()` statement. On the other hand, `valueWithoutBrackets` is only ever used once, within the `Matcher`, so seems like that could be removed and just put the `String.substring()`, etc., into the `pattern.matcher()` call directly.', 'commenter': 'necouchman'}, {'comment': 'These two changes are in the latest commits, value.toString() is assigned to a String variable and the substring expression is used directly in the call to pattern.matcher(). Thanks for the suggested code improvements.', 'commenter': 'doctorfree'}, {'comment': 'Thanks for identifying this. I moved the initialization of the CAS authenticated user object into validateTicket as you suggest.', 'commenter': 'doctorfree'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -122,16 +134,42 @@
             }
             
             // Convert remaining attributes that have values to Strings
+            String groupAttribute = confService.getGroupAttribute();
+            // Use cas-member-attribute to retrieve and set group memberships
+            String groupDnFormat = confService.getGroupDnFormat();
+            String groupTemplate = """";
+            if (groupDnFormat != null) {
+                // if CAS is backended to LDAP, groups come in as RFC4514 DN
+                // syntax.  If cas-group-dn-format is set, this strips
+                // an entry such as ""CN=Foo,OU=Bar,DC=example,DC=com"" to
+                // ""Foo""
+                groupTemplate = groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)"");
+                // the underlying parser aggregates all instances of the same
+                // attribute, so we need to be able to parse them out
+                groupTemplate=groupTemplate+"",*\\s*"";
+            } else {
+               groupTemplate = ""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+,*\\s*)"";
+            }
+            Pattern pattern = Pattern.compile(groupTemplate);
+
             for (Entry <String, Object> attr : ticketAttrs.entrySet()) {
                 String tokenName = TokenName.canonicalize(attr.getKey(),
                         CAS_ATTRIBUTE_TOKEN_PREFIX);
                 Object value = attr.getValue();
-                if (value != null)
+                if (value != null) {
                     tokens.put(tokenName, value.toString());
+                    if (attr.getKey().equals(groupAttribute)) {
+                        String valueWithoutBrackets = value.toString().substring(1,value.toString().length()-1);
+                        Matcher matcher = pattern.matcher(valueWithoutBrackets);
+                        while (matcher.find()) {
+                            effectiveGroups.add(matcher.group(1));
+                        }
+                    }
+                }
             }
 
-            return tokens;
-
+            CASAuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
+            return authenticatedUser;","[{'comment': ""If this is where the `CASAuthenticatedUser` object is being generated, I think it probably makes sense to call the `init()` method, here, prior to returning it, with all of the relevant data we've just generated through the ticket validation process?"", 'commenter': 'necouchman'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -34,13 +34,16 @@
 import org.apache.guacamole.auth.cas.ticket.TicketValidationService;
 import org.apache.guacamole.auth.cas.user.CASAuthenticatedUser;
 import org.apache.guacamole.language.TranslatableMessage;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Service providing convenience functions for the CAS AuthenticationProvider
  * implementation.
  */
 public class AuthenticationProviderService {
 
+    private static final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);","[{'comment': 'Please add JavaDoc.', 'commenter': 'mike-jumper'}, {'comment': ""Please ensure there are blanks clearly separating one documented declaration from another. Convention dictates that there should also be a blank line separating such things for the sake of readability. It's odd to read through a class and see something like:\r\n\r\n```java\r\nprivate class Lake {\r\n\r\n    private int lakeId;\r\n    /**\r\n     * Total number of fish.\r\n     */\r\n    private int fishCount;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\nInstead, something like the following would be more readable:\r\n\r\n```java\r\nprivate class Lake {\r\n\r\n    /**\r\n     * The unique ID associated with this lake in the database.\r\n     */\r\n    private int lakeId;\r\n\r\n    /**\r\n     * Total number of fish.\r\n     */\r\n    private int fishCount;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n"", 'commenter': 'mike-jumper'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/CASGuacamoleProperties.java,"@@ -68,5 +69,30 @@ private CASGuacamoleProperties() {}
         public String getName() { return ""cas-clearpass-key""; }
 
     };
+  
+    /**
+     * The attribute used for group membership
+     * example:  memberOf  (case sensitive)
+     */","[{'comment': 'This reads unclearly to me. At first glance, it looks like ""(case sensitive)"" is part of the example attribute value. JavaDoc convention also dictates that periods must be used.\r\n\r\nPerhaps something more like:\r\n\r\n```java\r\n/**\r\n * The name of the attribute used for group membership, such as ""memberOf"".\r\n * This attribute is case sensitive.\r\n */', 'commenter': 'mike-jumper'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/CASGuacamoleProperties.java,"@@ -68,5 +69,30 @@ private CASGuacamoleProperties() {}
         public String getName() { return ""cas-clearpass-key""; }
 
     };
+  
+    /**
+     * The attribute used for group membership
+     * example:  memberOf  (case sensitive)
+     */
+    public static final StringGuacamoleProperty CAS_GROUP_ATTRIBUTE =
+            new StringGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""cas-group-attribute""; }
+
+    };
 
+    /**
+     * The attribute used for group DN Format
+     * such as CN=%s,OU=myou,DC=example,DC=com  (case sensitive)
+     * used to strip all but %s.  This is only necessary when
+     * CAS backend is LDAP. 
+     */","[{'comment': ""I'm not sure this is correct. How is the format an attribute?"", 'commenter': 'mike-jumper'}, {'comment': 'Modified the comment in latest commits to clarify this. Thanks for identifying this unclear comment.', 'commenter': 'doctorfree'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -85,4 +85,40 @@ public PrivateKey getClearpassKey() throws GuacamoleException {
         return environment.getProperty(CASGuacamoleProperties.CAS_CLEARPASS_KEY);
     }
 
+    /**
+     * Returns the attribute used to determine group memberships
+     * in CAS, or null if not defined.
+     *
+     * @return
+     *     The attribute name used to determine group memberships in CAS,
+     *     null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getGroupAttribute() throws GuacamoleException {
+        return environment.getProperty(CASGuacamoleProperties.CAS_GROUP_ATTRIBUTE);
+    }
+
+    /**
+     * Returns the attribute used to format group DN's
+     * in CAS, or null if not defined.  If CAS is backed by LDAP, it will
+     * return an LDAP DN, such as CN=foo,OU=bar,DC=example,DC=com.
+     * This attribute may be set to CN=%s,OU=bar,DC=example,DC=com and given
+     * the example above, would result in a group called ""foo.""  CAS backed
+     * by something other than LDAP (such as a database) would likely not 
+     * need this.
+     *
+     * @return
+     *     The attribute name","[{'comment': 'JavaDoc convention dictates that there needs to be a period at the end of this.', 'commenter': 'mike-jumper'}, {'comment': 'Added the period', 'commenter': 'doctorfree'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -85,4 +85,40 @@ public PrivateKey getClearpassKey() throws GuacamoleException {
         return environment.getProperty(CASGuacamoleProperties.CAS_CLEARPASS_KEY);
     }
 
+    /**
+     * Returns the attribute used to determine group memberships
+     * in CAS, or null if not defined.
+     *
+     * @return
+     *     The attribute name used to determine group memberships in CAS,
+     *     null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getGroupAttribute() throws GuacamoleException {
+        return environment.getProperty(CASGuacamoleProperties.CAS_GROUP_ATTRIBUTE);
+    }
+
+    /**
+     * Returns the attribute used to format group DN's
+     * in CAS, or null if not defined.  If CAS is backed by LDAP, it will
+     * return an LDAP DN, such as CN=foo,OU=bar,DC=example,DC=com.
+     * This attribute may be set to CN=%s,OU=bar,DC=example,DC=com and given
+     * the example above, would result in a group called ""foo.""  CAS backed
+     * by something other than LDAP (such as a database) would likely not 
+     * need this.","[{'comment': ""As above, I'm not sure this is correct. How is the format itself an attribute?"", 'commenter': 'mike-jumper'}, {'comment': ""I'd also like to point out that the line wrapping is a bit wonky here. We normally wrap our comments at 80 columns, but here the pattern of wrapping is inconsistent."", 'commenter': 'mike-jumper'}, {'comment': 'Clarified the comment and fixed line wrapping', 'commenter': 'doctorfree'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -81,14 +93,13 @@
      *     password values in.
      *
      * @return
-     *     A Map all of tokens for the user parsed from attributes returned
-     *     by the CAS server.
+     *     The CASAuthenticatedUser instance returned by the CAS server.","[{'comment': 'I think this needs to be clarified. The CAS server is not returning an instance of the `CASAuthenticatedUser` class to us.', 'commenter': 'mike-jumper'}, {'comment': 'Latest commits should resolve this and an instance of CASAuthenticatedUser should be returned now', 'commenter': 'doctorfree'}, {'comment': 'I\'m not sure this actually addresses Mike\'s comment, here.  Mike is pointing out that it is inaccurate to say that the ""CASAuthenticatedUser instance returned by the CAS server"", because the CAS server is not returning a `CASAuthenticatedUser` instance - in fact, the CAS server does not know anything about the `CASAuthenticatedUser` class.  So, a more accurate comment would be:\r\n\r\n> A CASAuthenticatedUser instance containing the ticket data returned by the CAS server.\r\n\r\nSince the ticket _is_ what the CAS server returns.', 'commenter': 'necouchman'}, {'comment': ' Committed the suggested JavaDoc change to the description of the return value. However, my latest commits are not showing up here after rebasing on staging/1.3.0 so maybe I need to go back to git school.', 'commenter': 'doctorfree'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -122,16 +134,42 @@
             }
             
             // Convert remaining attributes that have values to Strings
+            String groupAttribute = confService.getGroupAttribute();
+            // Use cas-member-attribute to retrieve and set group memberships
+            String groupDnFormat = confService.getGroupDnFormat();
+            String groupTemplate = """";
+            if (groupDnFormat != null) {
+                // if CAS is backended to LDAP, groups come in as RFC4514 DN
+                // syntax.  If cas-group-dn-format is set, this strips
+                // an entry such as ""CN=Foo,OU=Bar,DC=example,DC=com"" to
+                // ""Foo""
+                groupTemplate = groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)"");
+                // the underlying parser aggregates all instances of the same
+                // attribute, so we need to be able to parse them out
+                groupTemplate=groupTemplate+"",*\\s*"";
+            } else {
+               groupTemplate = ""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+,*\\s*)"";
+            }
+            Pattern pattern = Pattern.compile(groupTemplate);","[{'comment': 'What if the DN format contains a character that has special meaning to `Pattern.compile()`?', 'commenter': 'mike-jumper'}, {'comment': 'This is the only feedback I have not yet addressed in commits. I am not sure if this is a problem or, if it is, how best to address it. I will look into this later this week if I have time. Please feel free to suggest or advise on best approach.', 'commenter': 'doctorfree'}, {'comment': ""I'm not 100% certain if this will work, but, based on this page:\r\n\r\nhttps://www.baeldung.com/java-regexp-escape-char\r\n\r\nIt looks like the `\\Q` and `\\E` special characters can be used to escape anything between them. So it might be possible to use those around the value of the `groupDnFormat` String to automatically escape anything within that ??"", 'commenter': 'necouchman'}, {'comment': 'Although best practices would prohibit special characters in the DN it does not guarantee that. I believe your suggested use of \\Q and \\E to escape any special characters in the stripped DN is a good idea. Can we simply use the Pattern.quote() method as follows:\r\n\r\ngroupTemplate = Pattern.quote(groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\\\(\\\\)\\\\-\\\\.\\\\s+]+)""));\r\n\r\nOr am I mistaken about where to escape the stripped DN?', 'commenter': 'doctorfree'}, {'comment': ""@mike-jumper Thoughts, here? RegEx still causes my mind to twist in ways I didn't think were possible...\r\n\r\n![image](https://user-images.githubusercontent.com/4706000/99840624-e5e4b280-2b3a-11eb-98fb-c6f7f3dabbcf.png)\r\n"", 'commenter': 'necouchman'}, {'comment': 'Welp:\r\n\r\n> It looks like the `\\Q` and `\\E` special characters can be used to escape anything between them. So it might be possible to use those around the value of the `groupDnFormat` String to automatically escape anything within that ??\r\n\r\nNope - that would be unsafe. What if the value of `groupDnFormat` were `""\\E.*\\Q""`?\r\n\r\n> Can we simply use the `Pattern.quote()` method as follows:\r\n>\r\n>     groupTemplate = Pattern.quote(groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)""));\r\n\r\nNot quite - that would escape the regex used as the replacement, as well. I think you have the right idea. Perhaps:\r\n\r\n```java\r\ngroupTemplate = Pattern.quote(groupDnFormat).replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)"");\r\n```\r\n\r\nBUT:\r\n\r\n* Definitely have some [Leaning Toothpick Syndrome](https://en.wikipedia.org/wiki/Leaning_toothpick_syndrome) going on with that regex. It\'s really tough to validate in the current context. Probably best to move that to a constant that can be separately documented, understood, and verified... that way this magic turns into something like: `Pattern.quote(groupDnFormat).replace(""%s"", REGEX_THAT_WE_KNOW_IS_CORRECT)`\r\n* I\'m not 100% sure the regex _is_ correct ... depending on what it\'s supposed to match against (which I\'m also not 100% sure of). Perhaps any added documentation will clarify that and allow for easier review.', 'commenter': 'mike-jumper'}, {'comment': 'Also ... what if the DN format needs to contain a literal ""%s""?', 'commenter': 'mike-jumper'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/user/CASAuthenticatedUser.java,"@@ -50,6 +51,11 @@
      */
     private Map<String, String> tokens;
 
+    /**
+     * The unique identifiers of all user groups which a user is a member of.","[{'comment': 'I think you mean ""this user"" here.', 'commenter': 'mike-jumper'}, {'comment': 'Corrected. Yes, it should have been ""this user""', 'commenter': 'doctorfree'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/ticket/TicketValidationService.java,"@@ -122,16 +134,44 @@
             }
             
             // Convert remaining attributes that have values to Strings
+            String groupAttribute = confService.getGroupAttribute();
+            // Use cas-member-attribute to retrieve and set group memberships
+            String groupDnFormat = confService.getGroupDnFormat();
+            String groupTemplate = """";
+            if (groupDnFormat != null) {
+                // if CAS is backended to LDAP, groups come in as RFC4514 DN
+                // syntax.  If cas-group-dn-format is set, this strips
+                // an entry such as ""CN=Foo,OU=Bar,DC=example,DC=com"" to
+                // ""Foo""
+                groupTemplate = groupDnFormat.replace(""%s"",""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+)"");
+                // the underlying parser aggregates all instances of the same
+                // attribute, so we need to be able to parse them out
+                groupTemplate=groupTemplate+"",*\\s*"";
+            } else {
+               groupTemplate = ""([A-Za-z0-9_\\(\\)\\-\\.\\s+]+,*\\s*)"";
+            }","[{'comment': ""* Please don't cuddle the `if/else` tags.\r\n* `groupTemplate` line has a 3 space indent."", 'commenter': 'necouchman'}]"
563,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -82,13 +83,9 @@ public CASAuthenticatedUser authenticateUser(Credentials credentials)
         if (request != null) {
             String ticket = request.getParameter(CASTicketField.PARAMETER_NAME);
             if (ticket != null) {
-                Map<String, String> tokens = ticketService.validateTicket(ticket, credentials);
-                String username = credentials.getUsername();
-                if (username != null) {
-                    CASAuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
-                    authenticatedUser.init(username, credentials, tokens);
-                    return authenticatedUser;
-                }
+                CASAuthenticatedUser authenticatedUser =
+                    ticketService.validateTicket(ticket, credentials);
+                return authenticatedUser;","[{'comment': 'Maybe just `return ticketService.validateTicket(ticket, credentials);` here?', 'commenter': 'necouchman'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/user/AuthenticatedUser.java,"@@ -53,8 +56,9 @@
      * @param credentials
      *     The credentials provided when this user was authenticated.
      */
-    public void init(String username, Credentials credentials) {
+    public void init(String username, Credentials credentials, Set<String> effectiveGroups) {","[{'comment': 'If adding a new parameter, that parameter needs to be documented within the JavaDoc.', 'commenter': 'mike-jumper'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/user/AuthenticatedUser.java,"@@ -43,6 +44,8 @@
      */
     private Credentials credentials;
 
+    private Set<String> effectiveGroups;","[{'comment': 'Please document.', 'commenter': 'mike-jumper'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -132,9 +108,79 @@ public String processUsername(String token) throws GuacamoleException {
             logger.debug(""Malformed claim within received JWT."", e);
         }
 
+
+	return claims;
+    }
+
+    /**
+     * Validates and parses the given ID token, returning the username contained
+     * therein, as defined by the username claim type given in
+     * guacamole.properties. If the username claim type is missing or the ID
+     * token is invalid, null is returned.
+     *
+     * @param token
+     *     The ID token to validate and parse.
+     *
+     * @return
+     *     The username contained within the given ID token, or null if the ID
+     *     token is not valid or the username claim type is missing,
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties could not be parsed.
+     */
+    public String processUsername(String token) throws GuacamoleException {
+        String usernameClaim = confService.getUsernameClaimType();
+
+        JwtClaims claims = validateToken(token);
+
+        if ( null != claims ) {
+            try {
+                // Pull username from claims
+                String username = claims.getStringClaimValue(usernameClaim);
+                if (username != null)
+                    return username;
+            }
+            catch (MalformedClaimException e) {
+                logger.info(""Rejected OpenID token with malformed claim: {}"", e.getMessage());
+                logger.debug(""Malformed claim within received JWT."", e);
+            }
+
+            // Warn if username was not present in token, as it likely means
+            // the system is not set up correctly
+            logger.warn(""Username claim \""{}\"" missing from token. Perhaps the ""
+                    + ""OpenID scope and/or username claim type are ""
+                    + ""misconfigured?"", usernameClaim);
+        }
+
         // Could not retrieve username from JWT
         return null;
-
     }
 
+    public Set<String> processGroups(String token) throws GuacamoleException {","[{'comment': 'Please document.', 'commenter': 'mike-jumper'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -55,24 +59,7 @@
     @Inject
     private NonceService nonceService;
 
-    /**
-     * Validates and parses the given ID token, returning the username contained
-     * therein, as defined by the username claim type given in
-     * guacamole.properties. If the username claim type is missing or the ID
-     * token is invalid, null is returned.
-     *
-     * @param token
-     *     The ID token to validate and parse.
-     *
-     * @return
-     *     The username contained within the given ID token, or null if the ID
-     *     token is not valid or the username claim type is missing,
-     *
-     * @throws GuacamoleException
-     *     If guacamole.properties could not be parsed.
-     */
-    public String processUsername(String token) throws GuacamoleException {
-
+    private JwtClaims validateToken(String token) throws GuacamoleException {","[{'comment': 'Please document.', 'commenter': 'mike-jumper'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -132,9 +108,79 @@ public String processUsername(String token) throws GuacamoleException {
             logger.debug(""Malformed claim within received JWT."", e);
         }
 
+
+	return claims;
+    }
+
+    /**
+     * Validates and parses the given ID token, returning the username contained
+     * therein, as defined by the username claim type given in
+     * guacamole.properties. If the username claim type is missing or the ID
+     * token is invalid, null is returned.
+     *
+     * @param token
+     *     The ID token to validate and parse.
+     *
+     * @return
+     *     The username contained within the given ID token, or null if the ID
+     *     token is not valid or the username claim type is missing,
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties could not be parsed.
+     */
+    public String processUsername(String token) throws GuacamoleException {
+        String usernameClaim = confService.getUsernameClaimType();
+
+        JwtClaims claims = validateToken(token);","[{'comment': ""With `validateToken()` being called within both `processUsername()` and `processGroups()`, I'm concerned about repeating that work. Perhaps things should be restructured such that this is not called twice?"", 'commenter': 'mike-jumper'}, {'comment': ""At first I tough of maintaining a `synchronizedSet` of valid JWT (via `claims.getJwtId()`) in `validateToken(String)` and bypassing the whole validation if the JWT id was part of the Set.\r\nHowever, as every JWT has its own lifespan, it would involved lots of housekeeping of a time-based cache.\r\nAnd being able to call `getJwtId()` to search in the already validated Set means that most of the validation process has been done (create the `JwtConsumer` and calling `processToClaims()` the be able to get the `jit` claim).\r\nMy bet is that it's not worth it."", 'commenter': 'mildis'}, {'comment': '@mike-jumper Should I mark this one solved ?', 'commenter': 'mildis'}, {'comment': 'Any reason to not just pass the `JwtClaims` in for `processUsername()` and `processGroups()` rather than repeatedly processing the token?', 'commenter': 'mike-jumper'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -132,9 +108,79 @@ public String processUsername(String token) throws GuacamoleException {
             logger.debug(""Malformed claim within received JWT."", e);
         }
 
+
+	return claims;
+    }
+
+    /**
+     * Validates and parses the given ID token, returning the username contained
+     * therein, as defined by the username claim type given in
+     * guacamole.properties. If the username claim type is missing or the ID
+     * token is invalid, null is returned.
+     *
+     * @param token
+     *     The ID token to validate and parse.
+     *
+     * @return
+     *     The username contained within the given ID token, or null if the ID
+     *     token is not valid or the username claim type is missing,
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties could not be parsed.
+     */
+    public String processUsername(String token) throws GuacamoleException {
+        String usernameClaim = confService.getUsernameClaimType();
+
+        JwtClaims claims = validateToken(token);
+
+        if ( null != claims ) {
+            try {
+                // Pull username from claims
+                String username = claims.getStringClaimValue(usernameClaim);
+                if (username != null)
+                    return username;
+            }
+            catch (MalformedClaimException e) {
+                logger.info(""Rejected OpenID token with malformed claim: {}"", e.getMessage());
+                logger.debug(""Malformed claim within received JWT."", e);
+            }
+
+            // Warn if username was not present in token, as it likely means
+            // the system is not set up correctly
+            logger.warn(""Username claim \""{}\"" missing from token. Perhaps the ""
+                    + ""OpenID scope and/or username claim type are ""
+                    + ""misconfigured?"", usernameClaim);
+        }
+
         // Could not retrieve username from JWT
         return null;
-
     }
 
+    public Set<String> processGroups(String token) throws GuacamoleException {
+        String groupsClaim = confService.getGroupsClaimType();
+
+        JwtClaims claims = validateToken(token);
+
+        if ( null != claims ) {
+            try {
+                // Pull groups from claims
+                List<String> oidcGroups = claims.getStringListClaimValue(groupsClaim);
+                if (oidcGroups != null && !oidcGroups.isEmpty())
+                    return Collections.unmodifiableSet(new HashSet<>(oidcGroups));
+            }   
+            catch (MalformedClaimException e) {
+                logger.info(""Rejected OpenID token with malformed claim: {}"", e.getMessage());
+                logger.debug(""Malformed claim within received JWT."", e);
+            }
+
+            // Warn if groups was not present in token, as it likely means
+            // the system is not set up correctly
+            logger.warn(""Groups claim \""{}\"" missing from token. Perhaps the ""
+                    + ""OpenID scope and/or groups claim type are ""
+                    + ""misconfigured?"", groupsClaim);","[{'comment': 'Is expected/standard that a groups claim of some kind will always be present?\r\n\r\nThe warning for the username claim is always there because things are seriously broken if there is no username, but if a groups claim may not be present under normal, unbroken circumstances, then the conditions surrounding this warning may need to be different.', 'commenter': 'mike-jumper'}, {'comment': 'This can be configured on the oidc implementation side.  For example, in Keycloak you can configure it to just return the email and username in the token.\r\n\r\nEdit: We may just need to introduce a configuration options that lists out what the expected claims are, and put this method call behind that.', 'commenter': 'tworcester'}, {'comment': ""Not sure that adding a new configuration option is the way to go.\r\nAs a sysadmin, I would either rely on basic scopes and add the groups claim to the profile scope or create a dedicated 'groups' scope which would add the groups claim to the ID token when requested."", 'commenter': 'mildis'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -132,9 +124,89 @@ public String processUsername(String token) throws GuacamoleException {
             logger.debug(""Malformed claim within received JWT."", e);
         }
 
+	return claims;","[{'comment': 'Please correct the indentation here. The Guacamole source uses 4 spaces for each level and no tabs.', 'commenter': 'mike-jumper'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/AuthenticationProviderService.java,"@@ -91,13 +93,19 @@ public AuthenticatedUser authenticateUser(Credentials credentials)
             throws GuacamoleException {
 
         String username = null;
+        Set<String> groups = null;
 
         // Validate OpenID token in request, if present, and derive username
         HttpServletRequest request = credentials.getRequest();
         if (request != null) {
             String token = request.getParameter(TokenField.PARAMETER_NAME);
-            if (token != null)
-                username = tokenService.processUsername(token);
+            if (token != null) {
+                JwtClaims claims = tokenService.validateToken(token);
+                if ( null != claims ) {","[{'comment': ""A couple of issues with this one line:\r\n* From a style perspective, there are extra spaces: `if (null != claims)`\r\n* I'm not sure why the sudden switch to putting `null` as the first part of the condition - generally throughout the code we put the variable, first."", 'commenter': 'necouchman'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -132,9 +122,85 @@ public String processUsername(String token) throws GuacamoleException {
             logger.debug(""Malformed claim within received JWT."", e);
         }
 
+        return claims;
+    }
+
+    /**
+     * Parses the given JwtClaims, returning the username contained
+     * therein, as defined by the username claim type given in
+     * guacamole.properties. If the username claim type is missing or 
+     * is invalid, null is returned.
+     *
+     * @param claims
+     *     A valid JwtClaims to extract the username from.
+     *
+     * @return
+     *     The username contained within the given JwtClaims, or null if the
+     *     claim is not valid or the username claim type is missing,
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties could not be parsed.
+     */
+    public String processUsername(JwtClaims claims) throws GuacamoleException {
+        String usernameClaim = confService.getUsernameClaimType();
+
+        if ( null != claims ) {","[{'comment': 'Similar to above comment:\r\n* Remove extra spaces\r\n* Re-order the comparison', 'commenter': 'necouchman'}, {'comment': 'Done.', 'commenter': 'mildis'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -132,9 +122,85 @@ public String processUsername(String token) throws GuacamoleException {
             logger.debug(""Malformed claim within received JWT."", e);
         }
 
+        return claims;
+    }
+
+    /**
+     * Parses the given JwtClaims, returning the username contained
+     * therein, as defined by the username claim type given in
+     * guacamole.properties. If the username claim type is missing or 
+     * is invalid, null is returned.
+     *
+     * @param claims
+     *     A valid JwtClaims to extract the username from.
+     *
+     * @return
+     *     The username contained within the given JwtClaims, or null if the
+     *     claim is not valid or the username claim type is missing,
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties could not be parsed.
+     */
+    public String processUsername(JwtClaims claims) throws GuacamoleException {
+        String usernameClaim = confService.getUsernameClaimType();
+
+        if ( null != claims ) {
+            try {
+                // Pull username from claims
+                String username = claims.getStringClaimValue(usernameClaim);
+                if (username != null)
+                    return username;
+            }
+            catch (MalformedClaimException e) {
+                logger.info(""Rejected OpenID token with malformed claim: {}"", e.getMessage());
+                logger.debug(""Malformed claim within received JWT."", e);
+            }
+
+            // Warn if username was not present in token, as it likely means
+            // the system is not set up correctly
+            logger.warn(""Username claim \""{}\"" missing from token. Perhaps the ""
+                    + ""OpenID scope and/or username claim type are ""
+                    + ""misconfigured?"", usernameClaim);
+        }
+
         // Could not retrieve username from JWT
         return null;
-
     }
 
+    /**
+     * Parses the given JwtClaims, returning the groups contained
+     * therein, as defined by the groups claim type given in
+     * guacamole.properties. If the groups claim type is missing or
+     * is invalid, an empty set is returned.
+     *
+     * @param claims
+     *     A valid JwtClaims to extract groups from.
+     *
+     * @return
+     *     A Set of String representing the groups the user is member of
+     *     from the OpenID provider point of view, or an empty Set if
+     *     claim is not valid or the groups claim type is missing,
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties could not be parsed.
+     */
+    public Set<String> processGroups(JwtClaims claims) throws GuacamoleException {
+        String groupsClaim = confService.getGroupsClaimType();
+
+        if ( null != claims ) {","[{'comment': 'And here...', 'commenter': 'necouchman'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -88,12 +89,12 @@ public String processUsername(String token) throws GuacamoleException {
                 .setVerificationKeyResolver(resolver)
                 .build();
 
-        try {
+        JwtClaims claims = null;","[{'comment': 'The logic:\r\n\r\n```java\r\nJwtClaims claims = null;\r\ntry {\r\n    claims = somethingElse;\r\n    doProcessing(claims);\r\n    doMoreProcessing(claims);\r\n}\r\ncatch (VariousExceptions e) {\r\n   logger.debug(""Yikes."", e);\r\n}\r\n\r\nreturn claims;\r\n```\r\n\r\nis dangerous because `claims` might become non-null yet still fail processing. This function would then effectively pretend to have succeeded, authenticating a user that is not actually properly authenticated.\r\n\r\nConsider:\r\n\r\n1. `claims` is initialized to `null`\r\n2. `claims` is set to the result of `jwtConsumer.processToClaims(token)`\r\n3. The call to `claims.getStringClaimValue()` fails with `MalformedClaimException`\r\n4. Details of the exception are logged, but code just falls through to `return claims`, incorrectly returning a non-null value.\r\n\r\nEven if the logic can be massaged to avoid this, or it can be shown that the above specific circumstance cannot occur, it\'s dangerous to maintain this form as it would be too easy for future changes in this area to introduce such a problem.\r\n\r\nI recommend adopting the same form as used below in `processUsername()` - returning `claims` _only_ at the end of the `try`, with the final part of the function being the `return null` for what is then known to be a pure failure case.', 'commenter': 'mike-jumper'}]"
564,extensions/guacamole-auth-openid/src/main/java/org/apache/guacamole/auth/openid/token/TokenValidationService.java,"@@ -55,24 +59,24 @@
     @Inject
     private NonceService nonceService;
 
+    private static final String MSG_REJECTED_TOKEN = ""Rejected OpenID token with malformed claim: {}"";
+    private static final String MSG_MALFORMED_CLAIM = ""Malformed claim within received JWT."";","[{'comment': ""What's the reasoning behind moving these log messages into constants?\r\n\r\nI'm wary of this because:\r\n\r\n* The usage of `MSG_REJECTED_TOKEN` must be aware of the fact that it uses parameter substitution with `{}` (as well as the context of that `{}`). Likewise, the usage of `MSG_MALFORMED_CLAIM` must be aware that parameter substitution is _not_ used.\r\n* The constants seem unlikely to be reused.\r\n* The human-readable message can sometimes be useful when reading the source, as they provide context, but they are no longer readily readable in the vicinity of the relevant code."", 'commenter': 'mike-jumper'}, {'comment': 'The rational is that multiple occurences of the same String should be ""factorized"" so it is all consistent throughout its use.\r\nI can revert the previous state if you prefer.', 'commenter': 'mildis'}]"
565,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/resources/translations/fr.json,"@@ -1,27 +1,113 @@
 {
 
-    ""LOGIN"" : {
+  ""LOGIN"" : {","[{'comment': 'Indentation has been heavily modified, here. In general the Guacamole code uses four space indentations, so this will need to be corrected throughout these proposed changes. Style should match was is existing within the project.', 'commenter': 'necouchman'}, {'comment': 'Indentation fixed.', 'commenter': 'letiemble'}]"
565,extensions/guacamole-auth-totp/src/main/resources/translations/fr.json,"@@ -0,0 +1,34 @@
+{
+
+    ""DATA_SOURCE_TOTP"" : {
+        ""NAME"" : ""TOTP TFA Backend""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_GUAC_TOTP"" : """"
+    },
+
+    ""TOTP"" : {
+
+        ""ACTION_HIDE_DETAILS"" : ""Masquer"",
+        ""ACTION_SHOW_DETAILS"" : ""Montrer"",
+
+        ""FIELD_HEADER_ALGORITHM""  : ""Algorithme:"",
+        ""FIELD_HEADER_DIGITS""     : ""Chiffres:"",
+        ""FIELD_HEADER_INTERVAL""   : ""Intervalle:"",
+        ""FIELD_HEADER_SECRET_KEY"" : ""Clé secrète:"",
+
+        ""FIELD_PLACEHOLDER_CODE"" : ""Code d'authentification"",
+
+        ""INFO_CODE_REQUIRED""       : ""Veuillez entrer le code d'authentification pour vérifier votre identité."",
+        ""INFO_ENROLL_REQUIRED""     : ""L'authentification multi-facteurs a été activée pour votre compte."",
+        ""INFO_VERIFICATION_FAILED"" : ""La vérification a échoué. Veuillez réessayer."",
+
+        ""HELP_ENROLL_BARCODE"" : ""Pour terminer votre processus d'inscription, scannez le code-barre ci-dessous avec l'application deux-facteurs sur votre téléphone ou votre appareil"",
+        ""HELP_ENROLL_VERIFY""  : ""Après avoir scanné le code-barre, saisissez les {DIGITS} chiffres du code d'authentification affichés pour terminer votre inscription."",","[{'comment': 'A small thing, but I believe these items should be ordered alphabetically, so the `HELP_` items should above the `INFO_` items.', 'commenter': 'necouchman'}, {'comment': 'I have used the same order that I found in English file for easier comparison. If order is important, all translations files need to be updated...', 'commenter': 'letiemble'}]"
565,guacamole/src/main/webapp/translations/fr.json,"@@ -4,6 +4,9 @@
 
     ""APP"" : {
 
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""${project.version}"",","[{'comment': 'These two lines should *not* be included in the French translation file.', 'commenter': 'necouchman'}, {'comment': 'Keys removed.', 'commenter': 'letiemble'}]"
573,guacamole/src/main/webapp/app/auth/service/authenticationService.js,"@@ -394,5 +407,45 @@ angular.module('auth').factory('authenticationService', ['$injector',
 
     };
 
+    /**
+     * This function accepts a callback function and stores it in an array of 
+     * functions that will be run before page reload when a user logout is triggered.
+     * 
+     * @param {Function} handlerFunction(resolve, reject)
+     *     The function that we want to run as a callback to the logout event
+     *     The function MUST call either resolve('reason') (success callback) or 
+     *     reject('reason') (failure callback).  This will allow you to do async 
+     *     operations inside the handlerFunction and only trigger success/failure 
+     *     when your operations are finished.
+     *     
+     */
+    service.registerLogoutHandler = function registerLogoutHandler(handlerFunction) {
+        logoutHandlers.push(handlerFunction)
+    }
+
+    /**
+     * This private function transforms all of the registered logout handlers into 
+     * promises which will allow the use of $q.all() or Promise.all() to ensure that 
+     * each handler is activated.
+     */
+    let getLogoutHandlerPromises = function getLogoutHandlerPromises() {
+        let promises = [];
+
+        for (x in logoutHandlers) {
+            let handlerFunction = logoutHandlers[x];
+            promises.push(
+                $q((resolve, reject) => {","[{'comment': ""Unfortunately, we can't use arrow expressions or `let` within the Guacamole source for compatibility. We'll need to rely on the more traditional `var` and `function`."", 'commenter': 'mike-jumper'}]"
573,guacamole/src/main/webapp/app/auth/service/authenticationService.js,"@@ -394,5 +407,45 @@ angular.module('auth').factory('authenticationService', ['$injector',
 
     };
 
+    /**
+     * This function accepts a callback function and stores it in an array of 
+     * functions that will be run before page reload when a user logout is triggered.
+     * 
+     * @param {Function} handlerFunction(resolve, reject)
+     *     The function that we want to run as a callback to the logout event
+     *     The function MUST call either resolve('reason') (success callback) or 
+     *     reject('reason') (failure callback).  This will allow you to do async 
+     *     operations inside the handlerFunction and only trigger success/failure 
+     *     when your operations are finished.
+     *     
+     */
+    service.registerLogoutHandler = function registerLogoutHandler(handlerFunction) {
+        logoutHandlers.push(handlerFunction)
+    }
+
+    /**
+     * This private function transforms all of the registered logout handlers into 
+     * promises which will allow the use of $q.all() or Promise.all() to ensure that 
+     * each handler is activated.
+     */
+    let getLogoutHandlerPromises = function getLogoutHandlerPromises() {
+        let promises = [];
+
+        for (x in logoutHandlers) {
+            let handlerFunction = logoutHandlers[x];
+            promises.push(
+                $q((resolve, reject) => {
+                    try {
+                        handlerFunction(resolve, reject);
+                    } catch (e) {
+                        reject(e);
+                    }","[{'comment': ""Won't an object thrown within a promise handler implicitly reject the promise with that object?"", 'commenter': 'mike-jumper'}]"
573,guacamole/src/main/webapp/app/auth/service/authenticationService.js,"@@ -68,6 +69,17 @@ angular.module('auth').factory('authenticationService', ['$injector',
      */
     var AUTH_STORAGE_KEY = 'GUAC_AUTH';
 
+    /**
+     * List of Logout handlers that are ensured to be run before this service
+     * forces the page to be reloaded.
+     * 
+     * Warning: If a handler has a page reload or redirect in it this can cause
+     * handlers not to be run.
+     * 
+     * @type Array of Angular promises","[{'comment': 'This should be `@type Promise[]` or `@type Promise.<WhateverItResolvesWith>[]` if the type of resolution is known. See: https://github.com/apache/guacamole-client/blob/0091bb1aea14c567c8166f0ed8eadf7c31b6bd6e/guacamole/src/main/webapp/app/rest/services/schemaService.js#L45', 'commenter': 'mike-jumper'}]"
573,guacamole/src/main/webapp/app/auth/service/authenticationService.js,"@@ -394,5 +407,45 @@ angular.module('auth').factory('authenticationService', ['$injector',
 
     };
 
+    /**
+     * This function accepts a callback function and stores it in an array of 
+     * functions that will be run before page reload when a user logout is triggered.
+     * 
+     * @param {Function} handlerFunction(resolve, reject)
+     *     The function that we want to run as a callback to the logout event
+     *     The function MUST call either resolve('reason') (success callback) or 
+     *     reject('reason') (failure callback).  This will allow you to do async 
+     *     operations inside the handlerFunction and only trigger success/failure 
+     *     when your operations are finished.
+     *     ","[{'comment': ""What's this blank line about? ;)"", 'commenter': 'mike-jumper'}]"
573,guacamole/src/main/webapp/app/auth/service/authenticationService.js,"@@ -394,5 +407,45 @@ angular.module('auth').factory('authenticationService', ['$injector',
 
     };
 
+    /**
+     * This function accepts a callback function and stores it in an array of 
+     * functions that will be run before page reload when a user logout is triggered.
+     * 
+     * @param {Function} handlerFunction(resolve, reject)
+     *     The function that we want to run as a callback to the logout event
+     *     The function MUST call either resolve('reason') (success callback) or 
+     *     reject('reason') (failure callback).  This will allow you to do async 
+     *     operations inside the handlerFunction and only trigger success/failure 
+     *     when your operations are finished.","[{'comment': 'There is a handy and specific JSDoc syntax for callback functions:\r\n\r\nhttps://jsdoc.app/tags-param.html#callback-functions', 'commenter': 'mike-jumper'}]"
573,guacamole/src/main/webapp/app/auth/service/authenticationService.js,"@@ -394,5 +407,45 @@ angular.module('auth').factory('authenticationService', ['$injector',
 
     };
 
+    /**
+     * This function accepts a callback function and stores it in an array of 
+     * functions that will be run before page reload when a user logout is triggered.","[{'comment': 'I recommend avoiding the temptation to document all functions as ""This function ..."" and instead write as if that has already been said. This is the general convention for documenting function behavior, and is the convention we follow elsewhere.\r\n\r\nFor example, instead of:\r\n\r\n```js\r\n/**\r\n * This function accepts a duration and beeps for that amount of time.\r\n *\r\n * @param {Number} duration\r\n *     The number of milliseconds that the beep should last.\r\n */\r\nvar beep = function beep(duration) {\r\n   ...\r\n};\r\n```\r\n\r\nUse:\r\n\r\n```js\r\n/**\r\n * Beeps for the specified amount of time.\r\n *\r\n * @param {Number} duration\r\n *     The number of milliseconds that the beep should last.\r\n */\r\nvar beep = function beep(duration) {\r\n   ...\r\n};\r\n```', 'commenter': 'mike-jumper'}]"
573,guacamole/src/main/webapp/app/auth/service/authenticationService.js,"@@ -394,5 +407,45 @@ angular.module('auth').factory('authenticationService', ['$injector',
 
     };
 
+    /**
+     * This function accepts a callback function and stores it in an array of 
+     * functions that will be run before page reload when a user logout is triggered.
+     * 
+     * @param {Function} handlerFunction(resolve, reject)
+     *     The function that we want to run as a callback to the logout event
+     *     The function MUST call either resolve('reason') (success callback) or 
+     *     reject('reason') (failure callback).  This will allow you to do async 
+     *     operations inside the handlerFunction and only trigger success/failure 
+     *     when your operations are finished.
+     *     
+     */
+    service.registerLogoutHandler = function registerLogoutHandler(handlerFunction) {
+        logoutHandlers.push(handlerFunction)
+    }
+
+    /**
+     * This private function transforms all of the registered logout handlers into 
+     * promises which will allow the use of $q.all() or Promise.all() to ensure that 
+     * each handler is activated.
+     */
+    let getLogoutHandlerPromises = function getLogoutHandlerPromises() {
+        let promises = [];
+
+        for (x in logoutHandlers) {","[{'comment': '`x` here is implicitly global.', 'commenter': 'mike-jumper'}]"
576,extensions/guacamole-auth-json/README.md,"@@ -0,0 +1,189 @@
+guacamole-auth-json
+===================
+
+guacamole-auth-json is an authentication extension for [Apache
+Guacamole](http://guacamole.apache.org/) which authenticates users using JSON
+which has been signed using **HMAC/SHA-256** and encrypted with **128-bit AES
+in CBC mode**. This JSON contains all information describing the user being
+authenticated, as well as any connections they have access to.
+
+Configuring Guacamole to accept encrypted JSON
+----------------------------------------------
+
+To verify and decrypt the received signed and encrypted JSON, a secret key must
+be generated which will be shared by both the Guacamole server and systems that
+will generate the JSON data. As guacamole-auth-json uses 128-bit AES, this key
+must be 128 bits.
+
+An easy way of generating such a key is to echo a passphrase through the
+""md5sum"" utility. This is the technique OpenSSL itself uses to generate 128-bit
+keys from passphrases. For example:
+
+    $ echo -n ""ThisIsATest"" | md5sum
+    4c0b569e4c96df157eee1b65dd0e4d41  -
+
+The generated key must then be saved within `guacamole.properties` as the full
+32-digit hex value using the `json-secret-key` property:
+
+    json-secret-key: 4c0b569e4c96df157eee1b65dd0e4d41
+
+JSON format
+-----------
+
+The general format of the JSON (prior to being encrypted, signed, and sent to
+Guacamole), is as follows:
+
+    {
+
+        ""username"" : ""arbitraryUsername"",
+        ""expires"" : TIMESTAMP,
+        ""connections"" : {
+
+            ""Connection Name"" : {
+                ""protocol"" : ""PROTOCOL"",
+                ""parameters"" : {
+                    ""name1"" : ""value1"",
+                    ""name2"" : ""value2"",
+                    ...
+                }
+            },
+
+            ...
+
+        }
+
+    }
+
+where `TIMESTAMP` is a standard UNIX epoch timestamp with millisecond
+resolution (the number of milliseconds since midnight of January 1, 1970 UTC)
+and `PROTOCOL` is the internal name of any of Guacamole's supported protocols,
+such as `vnc`, `rdp`, or `ssh`.
+
+The JSON will cease to be accepted as valid after the server time passes the
+timestamp. If no timestamp is specified, the data will not expire.
+
+The top-level JSON object which must be submitted to Guacamole has the
+following properties:
+
+Property name | Type     | Description
+--------------|----------|------------
+`username`    | `string` | The unique username of the user authenticated by the JSON. If the user is anonymous, this should be the empty string (`""""`).
+`expires`     | `number` | The absolute time after which the JSON should no longer be accepted, even if the signature is valid, as a standard UNIX epoch timestamp with millisecond resolution (the number of milliseconds since midnight of January 1, 1970 UTC).
+`connections` | `object` | The set of connections which should be exposed to the user by their corresponding, unique names. If no connections will be exposed to the user, this can simply be an empty object (`{}`).
+
+Each normal connection defined within each submitted JSON object has the
+following properties:
+
+Property name | Type     | Description
+--------------|----------|------------
+`id`          | `string` | An optional opaque value which uniquely identifies this connection across all other connections which may be active at any given time. This property is only required if you wish to allow the connection to be shared or shadowed.
+`protocol`    | `string` | The internal name of a supported protocol, such as `vnc`, `rdp`, or `ssh`.
+`parameters`  | `object` | An object representing the connection parameter name/value pairs to apply to the connection, as documented in the [Guacamole manual](https://guacamole.apache.org/doc/gug/configuring-guacamole.html#connection-configuration).
+
+Connections which share or shadow other connections use a `join` property
+instead of a `protocol` property, where `join` contains the value of the `id`
+property of the connection being joined:
+
+Property name | Type     | Description
+--------------|----------|------------
+`id`          | `string` | An optional opaque value which uniquely identifies this connection across all other connections which may be active at any given time. This property is only required if you wish to allow the connection to be shared or shadowed. (Yes, a connection which shadows another connection may itself be shadowed.)
+`join`        | `string` | The opaque ID given within the `id` property of the connection being joined (shared / shadowed).
+`parameters`  | `object` | An object representing the connection parameter name/value pairs to apply to the connection, as documented in the [Guacamole manual](https://guacamole.apache.org/doc/gug/configuring-guacamole.html#connection-configuration). Most of the connection configuration is inherited from the connection being joined. In general, the only property relevant to joining connections is `read-only`.
+
+If a connection is configured to join another connection, that connection will
+only be usable if the connection being joined is currently active. If two
+connections are established having the same `id` value, only the last
+connection will be joinable using the given `id`.
+
+Generating encrypted JSON
+-------------------------
+
+To authenticate a user with the above JSON format, the JSON must be both signed
+and encrypted using the same 128-bit secret key specified with the
+`json-secret-key` within `guacamole.properties`:
+
+1. Generate JSON in the format described above
+2. Sign the JSON using the secret key (the same 128-bit key stored within
+   `guacamole.properties` with the `json-secret-key` property) with
+   **HMAC/SHA-256**. Prepend the binary result of the signing process to the
+   plaintext JSON that was signed.
+3. Encrypt the result of (2) above using **AES in CBC mode**, with the initial
+   vector (IV) set to all zero bytes.
+4. Encode the encrypted result using base64.
+5. POST the encrypted result to the `/api/tokens` REST endpoint as the value of
+   an HTTP parameter named `data` (or include it in the URL of any Guacamole
+   page as a query parameter named `data`).","[{'comment': ""I'm not sure if it's worth noting, here, or not, that query parameters are (more) limited in the amount of data they can accept (versus POSTing HTTP parameters), so if the size of the JSON data is sufficiently large the GET query parameter method may not work. I ran into this when writing the SAML module. It may be too much detail for this, just popped into my mind."", 'commenter': 'necouchman'}, {'comment': 'How large did the parameter need to be to run into that limit?', 'commenter': 'mike-jumper'}, {'comment': ""Hmmm...I'm not sure I ever nailed it down when doing that - just knew that trying to push the SAML metadata back in via a `GET` request didn't work. It seems like it is something that is configurable, and that Tomcat has a default 8K limit for the request URL as a whole, so it's probably fairly large. Maybe it's not a big deal.."", 'commenter': 'necouchman'}, {'comment': 'Would it be better if I pull the original `README.md` out of these changes and then revisit documenting query parameter limits in the guacamole-manual version of the same?', 'commenter': 'mike-jumper'}, {'comment': ""Nah, let's just keep the README for now and we can address it if someone stumbles across it, and/or in the documentation."", 'commenter': 'necouchman'}]"
576,extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/AuthenticationProviderService.java,"@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.json.user.AuthenticatedUser;
+import org.apache.guacamole.auth.json.user.UserContext;
+import org.apache.guacamole.auth.json.user.UserData;
+import org.apache.guacamole.auth.json.user.UserDataService;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInvalidCredentialsException;
+
+/**
+ * Service providing convenience functions for the JSONAuthenticationProvider.
+ */
+public class AuthenticationProviderService {
+
+    /**
+     * Service for deriving Guacamole extension API data from UserData objects.
+     */
+    @Inject
+    private UserDataService userDataService;
+
+    /**
+     * Provider for AuthenticatedUser objects.
+     */
+    @Inject
+    private Provider<AuthenticatedUser> authenticatedUserProvider;
+
+    /**
+     * Provider for UserContext objects.
+     */
+    @Inject
+    private Provider<UserContext> userContextProvider;
+
+    /**
+     * Returns an AuthenticatedUser representing the user authenticated by the
+     * given credentials.
+     *
+     * @param credentials
+     *     The credentials to use for authentication.
+     *
+     * @return
+     *     An AuthenticatedUser representing the user authenticated by the
+     *     given credentials.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while authenticating the user, or if access is
+     *     denied.
+     */
+    public AuthenticatedUser authenticateUser(Credentials credentials)
+            throws GuacamoleException {
+
+        // Pull UserData from credentials, if possible
+        UserData userData = userDataService.fromCredentials(credentials);
+        if (userData == null)
+            throw new GuacamoleInvalidCredentialsException(""Permission denied."", CredentialsInfo.EMPTY);
+
+        // Produce AuthenticatedUser associated with derived UserData
+        AuthenticatedUser authenticatedUser = authenticatedUserProvider.get();
+        authenticatedUser.init(credentials, userData);
+        return authenticatedUser;
+
+    }
+
+    /**
+     * Returns a UserContext object initialized with data accessible to the
+     * given AuthenticatedUser.
+     *
+     * @param authenticatedUser
+     *     The AuthenticatedUser to retrieve data for.
+     *
+     * @return
+     *     A UserContext object initialized with data accessible to the given
+     *     AuthenticatedUser.
+     *
+     * @throws GuacamoleException
+     *     If the UserContext cannot be created due to an error.
+     */
+    public UserContext getUserContext(org.apache.guacamole.net.auth.AuthenticatedUser authenticatedUser)
+            throws GuacamoleException {
+
+        // The JSONAuthenticationProvider only provides data for users it has
+        // authenticated itself
+        if (!(authenticatedUser instanceof AuthenticatedUser))
+            return null;","[{'comment': 'If I\'m reading this code/comment correctly, it is probably worth mentioning in the documentation - either the `README.md` file within this extension, or whatever GUG chapter is generated for this later (or both) - that, by design, this module will essentially not ""stack"" with other authentication modules.', 'commenter': 'necouchman'}, {'comment': 'It can stack. For example, if you submit JSON like:\r\n\r\n```json\r\n{\r\n    ""username"" : ""guacadmin""\r\n}\r\n```\r\n\r\nthat would be sufficient for the database authentication to accept the user as ""guacadmin"".\r\n\r\nThe JSON extension simply won\'t attempt to provide _data_ (a `UserContext`) for a user that it hasn\'t authenticated, as its data comes from the JSON. If there isn\'t any JSON, then the JSON extension has no data to provide.', 'commenter': 'mike-jumper'}, {'comment': 'Ah, okay, that makes sense. Thanks for the clarification.', 'commenter': 'necouchman'}]"
576,extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/CryptoService.java,"@@ -0,0 +1,215 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json;
+
+import java.security.InvalidAlgorithmParameterException;
+import java.security.InvalidKeyException;
+import java.security.Key;
+import java.security.NoSuchAlgorithmException;
+import javax.crypto.BadPaddingException;
+import javax.crypto.Cipher;
+import javax.crypto.IllegalBlockSizeException;
+import javax.crypto.Mac;
+import javax.crypto.NoSuchPaddingException;
+import javax.crypto.SecretKey;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+
+/**
+ * Service for handling cryptography-related operations, such as decrypting
+ * encrypted data.
+ */
+public class CryptoService {
+
+    /**
+     * The length of all signatures, in bytes.
+     */
+    public static final int SIGNATURE_LENGTH = 32;
+
+    /**
+     * The name of the key generation algorithm used for decryption.
+     */
+    private static final String DECRYPTION_KEY_GENERATION_ALGORITHM_NAME = ""AES"";
+
+    /**
+     * The name of the cipher transformation that should be used to decrypt any
+     * String provided to decrypt().
+     */
+    private static final String DECRYPTION_CIPHER_NAME = ""AES/CBC/PKCS5Padding"";
+
+    /**
+     * The name of the key generation algorithm used for verifying signatures.
+     */
+    private static final String SIGNATURE_KEY_GENERATION_ALGORITHM_NAME = ""HmacSHA256"";
+
+    /**
+     * The name of the MAC algorithm used for verifying signatures.
+     */
+    private static final String SIGNATURE_MAC_ALGORITHM_NAME = ""HmacSHA256"";
+
+    /**
+     * IV which is all null bytes (all binary zeroes). Usually, using a null IV
+     * is a horrible idea. As our plaintext will always be prepended with the
+     * HMAC signature of the rest of the message, we are effectively using the
+     * HMAC signature itself as the IV. For our purposes, where the encrypted
+     * value becomes an authentication token, this is OK.
+     */
+    private static final IvParameterSpec NULL_IV = new IvParameterSpec(new byte[] {
+        0, 0, 0, 0, 0, 0, 0, 0,
+        0, 0, 0, 0, 0, 0, 0, 0
+    });
+
+    /**
+     * Creates a new key suitable for decryption using the provided raw key
+     * bytes. The algorithm used to generate this key is dictated by
+     * DECRYPTION_KEY_GENERATION_ALGORITHM_NAME and must match the algorithm
+     * used by decrypt().
+     *
+     * @param keyBytes
+     *     The raw bytes from which the encryption/decryption key should be
+     *     generated.
+     *
+     * @return
+     *     A new key suitable for encryption or decryption, generated from the
+     *     given bytes.
+     */
+    public SecretKey createEncryptionKey(byte[] keyBytes) {
+        return new SecretKeySpec(keyBytes, DECRYPTION_KEY_GENERATION_ALGORITHM_NAME);
+    }
+
+    /**
+     * Creates a new key suitable for signature verification using the provided
+     * raw key bytes. The algorithm used to generate this key is dictated by
+     * SIGNATURE_KEY_GENERATION_ALGORITHM_NAME and must match the algorithm
+     * used by sign().
+     *
+     * @param keyBytes
+     *     The raw bytes from which the signature verification key should be
+     *     generated.
+     *
+     * @return
+     *     A new key suitable for signature verification, generated from the
+     *     given bytes.
+     */
+    public SecretKey createSignatureKey(byte[] keyBytes) {
+        return new SecretKeySpec(keyBytes, SIGNATURE_KEY_GENERATION_ALGORITHM_NAME);
+    }
+
+    /**
+     * Decrypts the given ciphertext using the provided key, returning the
+     * resulting plaintext. If any error occurs during decryption at all, a
+     * GuacamoleException is thrown. The IV used for the decryption process is
+     * a null IV (all binary zeroes).
+     *
+     * @param key
+     *     The key to use to decrypt the provided ciphertext.
+     *
+     * @param cipherText
+     *     The ciphertext to decrypt.
+     *
+     * @return
+     *     The plaintext which results from decrypting the ciphertext with the
+     *     provided key.
+     *
+     * @throws GuacamoleException
+     *     If any error at all occurs during decryption.
+     */
+    public byte[] decrypt(Key key, byte[] cipherText) throws GuacamoleException {
+
+        try {
+
+            // Init cipher for descryption using secret key
+            Cipher cipher = Cipher.getInstance(DECRYPTION_CIPHER_NAME);
+            cipher.init(Cipher.DECRYPT_MODE, key, NULL_IV);
+
+            // Perform decryption
+            return cipher.doFinal(cipherText);
+
+        }
+
+        // Rethrow all decryption failures identically
+        catch (InvalidAlgorithmParameterException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (NoSuchAlgorithmException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (NoSuchPaddingException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (InvalidKeyException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (IllegalBlockSizeException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (BadPaddingException e) {
+            throw new GuacamoleServerException(e);
+        }","[{'comment': 'Any reason not to use the multi-catch, here?', 'commenter': 'necouchman'}, {'comment': ""Sure - I'll switch instances of this over to multi-catch."", 'commenter': 'mike-jumper'}]"
576,extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/CryptoService.java,"@@ -0,0 +1,215 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json;
+
+import java.security.InvalidAlgorithmParameterException;
+import java.security.InvalidKeyException;
+import java.security.Key;
+import java.security.NoSuchAlgorithmException;
+import javax.crypto.BadPaddingException;
+import javax.crypto.Cipher;
+import javax.crypto.IllegalBlockSizeException;
+import javax.crypto.Mac;
+import javax.crypto.NoSuchPaddingException;
+import javax.crypto.SecretKey;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleServerException;
+
+/**
+ * Service for handling cryptography-related operations, such as decrypting
+ * encrypted data.
+ */
+public class CryptoService {
+
+    /**
+     * The length of all signatures, in bytes.
+     */
+    public static final int SIGNATURE_LENGTH = 32;
+
+    /**
+     * The name of the key generation algorithm used for decryption.
+     */
+    private static final String DECRYPTION_KEY_GENERATION_ALGORITHM_NAME = ""AES"";
+
+    /**
+     * The name of the cipher transformation that should be used to decrypt any
+     * String provided to decrypt().
+     */
+    private static final String DECRYPTION_CIPHER_NAME = ""AES/CBC/PKCS5Padding"";
+
+    /**
+     * The name of the key generation algorithm used for verifying signatures.
+     */
+    private static final String SIGNATURE_KEY_GENERATION_ALGORITHM_NAME = ""HmacSHA256"";
+
+    /**
+     * The name of the MAC algorithm used for verifying signatures.
+     */
+    private static final String SIGNATURE_MAC_ALGORITHM_NAME = ""HmacSHA256"";
+
+    /**
+     * IV which is all null bytes (all binary zeroes). Usually, using a null IV
+     * is a horrible idea. As our plaintext will always be prepended with the
+     * HMAC signature of the rest of the message, we are effectively using the
+     * HMAC signature itself as the IV. For our purposes, where the encrypted
+     * value becomes an authentication token, this is OK.
+     */
+    private static final IvParameterSpec NULL_IV = new IvParameterSpec(new byte[] {
+        0, 0, 0, 0, 0, 0, 0, 0,
+        0, 0, 0, 0, 0, 0, 0, 0
+    });
+
+    /**
+     * Creates a new key suitable for decryption using the provided raw key
+     * bytes. The algorithm used to generate this key is dictated by
+     * DECRYPTION_KEY_GENERATION_ALGORITHM_NAME and must match the algorithm
+     * used by decrypt().
+     *
+     * @param keyBytes
+     *     The raw bytes from which the encryption/decryption key should be
+     *     generated.
+     *
+     * @return
+     *     A new key suitable for encryption or decryption, generated from the
+     *     given bytes.
+     */
+    public SecretKey createEncryptionKey(byte[] keyBytes) {
+        return new SecretKeySpec(keyBytes, DECRYPTION_KEY_GENERATION_ALGORITHM_NAME);
+    }
+
+    /**
+     * Creates a new key suitable for signature verification using the provided
+     * raw key bytes. The algorithm used to generate this key is dictated by
+     * SIGNATURE_KEY_GENERATION_ALGORITHM_NAME and must match the algorithm
+     * used by sign().
+     *
+     * @param keyBytes
+     *     The raw bytes from which the signature verification key should be
+     *     generated.
+     *
+     * @return
+     *     A new key suitable for signature verification, generated from the
+     *     given bytes.
+     */
+    public SecretKey createSignatureKey(byte[] keyBytes) {
+        return new SecretKeySpec(keyBytes, SIGNATURE_KEY_GENERATION_ALGORITHM_NAME);
+    }
+
+    /**
+     * Decrypts the given ciphertext using the provided key, returning the
+     * resulting plaintext. If any error occurs during decryption at all, a
+     * GuacamoleException is thrown. The IV used for the decryption process is
+     * a null IV (all binary zeroes).
+     *
+     * @param key
+     *     The key to use to decrypt the provided ciphertext.
+     *
+     * @param cipherText
+     *     The ciphertext to decrypt.
+     *
+     * @return
+     *     The plaintext which results from decrypting the ciphertext with the
+     *     provided key.
+     *
+     * @throws GuacamoleException
+     *     If any error at all occurs during decryption.
+     */
+    public byte[] decrypt(Key key, byte[] cipherText) throws GuacamoleException {
+
+        try {
+
+            // Init cipher for descryption using secret key
+            Cipher cipher = Cipher.getInstance(DECRYPTION_CIPHER_NAME);
+            cipher.init(Cipher.DECRYPT_MODE, key, NULL_IV);
+
+            // Perform decryption
+            return cipher.doFinal(cipherText);
+
+        }
+
+        // Rethrow all decryption failures identically
+        catch (InvalidAlgorithmParameterException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (NoSuchAlgorithmException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (NoSuchPaddingException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (InvalidKeyException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (IllegalBlockSizeException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (BadPaddingException e) {
+            throw new GuacamoleServerException(e);
+        }
+
+    }
+
+    /**
+     * Signs the given arbitrary data using the provided key, returning the
+     * resulting signature. If any error occurs during signing at all, a
+     * GuacamoleException is thrown.
+     *
+     * @param key
+     *     The key to use to sign the provided data.
+     *
+     * @param data
+     *     The arbitrary data to sign.
+     *
+     * @return
+     *     The signature which results from signing the arbitrary data with the
+     *     provided key.
+     *
+     * @throws GuacamoleException
+     *     If any error at all occurs during signing.
+     */
+    public byte[] sign(Key key, byte[] data) throws GuacamoleException {
+
+        try {
+
+            // Init MAC for signing using secret key
+            Mac mac = Mac.getInstance(SIGNATURE_MAC_ALGORITHM_NAME);
+            mac.init(key);
+
+            // Sign provided data
+            return mac.doFinal(data);
+
+        }
+
+        // Rethrow all signature failures identically
+        catch (NoSuchAlgorithmException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (InvalidKeyException e) {
+            throw new GuacamoleServerException(e);
+        }
+        catch (IllegalStateException e) {
+            throw new GuacamoleServerException(e);
+        }","[{'comment': 'And here?', 'commenter': 'necouchman'}]"
576,extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/RequestValidationService.java,"@@ -0,0 +1,102 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json;
+
+import com.google.inject.Inject;
+import java.util.ArrayList;
+import java.util.Collection;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.guacamole.GuacamoleException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.security.web.util.matcher.IpAddressMatcher;
+
+/**
+ * Service for testing the validity of received HTTP requests.
+ */
+public class RequestValidationService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(RequestValidationService.class);","[{'comment': 'I think the `Logger` implementations in most other classes are also `static` - any reason this deviates from that practice?', 'commenter': 'necouchman'}, {'comment': ""No reason - older code was all over the place with `static` vs. not for `Logger`. I'll switch this over to `static`."", 'commenter': 'mike-jumper'}]"
576,extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/user/UserDataService.java,"@@ -0,0 +1,373 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json.user;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import com.google.inject.Singleton;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import javax.servlet.http.HttpServletRequest;
+import javax.xml.bind.DatatypeConverter;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.json.ConfigurationService;
+import org.apache.guacamole.auth.json.CryptoService;
+import org.apache.guacamole.auth.json.RequestValidationService;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.User;
+import org.apache.guacamole.net.auth.permission.ObjectPermissionSet;
+import org.apache.guacamole.net.auth.simple.SimpleDirectory;
+import org.apache.guacamole.net.auth.simple.SimpleObjectPermissionSet;
+import org.apache.guacamole.net.auth.simple.SimpleUser;
+import org.codehaus.jackson.map.ObjectMapper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Service for deriving Guacamole extension API data from UserData objects.
+ */
+@Singleton
+public class UserDataService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(UserDataService.class);","[{'comment': 'As with other class above, any reason this should or should not be `static`, in keeping consistency with other Guacamole code? I have no particular preference, just wondering.', 'commenter': 'necouchman'}, {'comment': 'I agree we should maintain coding standards regarding that, and that new code should use the established `private static final` practice for `Logger` instances.', 'commenter': 'mike-jumper'}]"
576,extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/user/UserDataService.java,"@@ -0,0 +1,373 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json.user;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import com.google.inject.Singleton;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import javax.servlet.http.HttpServletRequest;
+import javax.xml.bind.DatatypeConverter;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.json.ConfigurationService;
+import org.apache.guacamole.auth.json.CryptoService;
+import org.apache.guacamole.auth.json.RequestValidationService;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.User;
+import org.apache.guacamole.net.auth.permission.ObjectPermissionSet;
+import org.apache.guacamole.net.auth.simple.SimpleDirectory;
+import org.apache.guacamole.net.auth.simple.SimpleObjectPermissionSet;
+import org.apache.guacamole.net.auth.simple.SimpleUser;
+import org.codehaus.jackson.map.ObjectMapper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Service for deriving Guacamole extension API data from UserData objects.
+ */
+@Singleton
+public class UserDataService {
+
+    /**
+     * Logger for this class.
+     */
+    private final Logger logger = LoggerFactory.getLogger(UserDataService.class);
+
+    /**
+     * ObjectMapper for deserializing UserData objects.
+     */
+    private static final ObjectMapper mapper = new ObjectMapper();
+
+    /**
+     * Blacklist of single-use user data objects which have already been used.
+     */
+    private final UserDataBlacklist blacklist = new UserDataBlacklist();","[{'comment': 'Any thoughts/feelings about avoiding use of the term ""blacklist"", both here and as the name of the `UserDataBlacklist` class?\r\n\r\nhttps://thenextweb.com/dd/2020/07/13/linux-kernel-will-no-longer-use-terms-blacklist-and-slave/\r\n\r\nI\'m not one to get overly worked up about this one way or the other, and it is certainly still broadly-used in the computing realm in ways that don\'t necessarily have racial meaning or implication; on the other hand, given the history of the term and, as noted in the page above, the fact that there are some movements to try to move away from that, maybe we should do the same?', 'commenter': 'necouchman'}, {'comment': 'Sure. Regardless of these words\' origins, regardless of intent, we should not continue to assign negative connotations to ""black"".', 'commenter': 'mike-jumper'}]"
578,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AbstractGuacamoleTunnelService.java,"@@ -201,87 +201,54 @@ protected abstract void release(RemoteAuthenticatedUser user,
             ModeledConnectionGroup connectionGroup);
 
     /**
-     * Returns a guacamole configuration containing the protocol and parameters
-     * from the given connection. If the ID of an active connection is
-     * provided, that connection will be joined instead of starting a new
-     * primary connection. If tokens are used in the connection parameter
-     * values, credentials from the given user will be substituted
-     * appropriately.
-     *
-     * @param user
-     *     The user whose credentials should be used if necessary.
+     * Returns a GuacamoleConfiguration which connects to the given connection.
+     * If the connection ID of an active is provided, that active connection
+     * will be joined rather than establishing an entirely new connection. If
+     * a sharing profile is provided, the parameters associated with that
+     * sharing profile will be used to define the access provided to the user
+     * accessing the shared connection. If tokens are used in the connection
+     * parameter values of the sharing profile, credentials from the given user
+     * will be substituted appropriately.","[{'comment': 'A couple of minor issues with the wording, here:\r\n* This makes it sounds like tokens will only be substituted for sharing profiles and not for normal connections. But, looking at the code, it looks like this is true of either case?\r\n* It also makes it sound like tokens would only apply to credentials? But this would be true of any connection parameter or token (date/time, LDAP attributes, etc.), correct?', 'commenter': 'necouchman'}, {'comment': 'Right - that wording is wrong as of commit 1210d5624c4eb173417cab8358eca4cc3b6c0ebe (which deprecated the `StandardTokens` class). This function used to perform token substitution, but no longer needs to and hasn\'t since that commit.\r\n\r\nI\'ve now removed that ""If tokens are used ..."" sentence.', 'commenter': 'mike-jumper'}]"
578,guacamole-common/pom.xml,"@@ -57,14 +57,14 @@
     <build>
         <plugins>
 
-            <!-- Written for 1.6 -->
+            <!-- Written for 1.8 -->","[{'comment': '<snif, snif>\r\n\r\nAlas, poor Java 6.', 'commenter': 'necouchman'}, {'comment': '😿 ', 'commenter': 'mike-jumper'}]"
578,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AbstractGuacamoleTunnelService.java,"@@ -201,87 +201,52 @@ protected abstract void release(RemoteAuthenticatedUser user,
             ModeledConnectionGroup connectionGroup);
 
     /**
-     * Returns a guacamole configuration containing the protocol and parameters
-     * from the given connection. If the ID of an active connection is
-     * provided, that connection will be joined instead of starting a new
-     * primary connection. If tokens are used in the connection parameter
-     * values, credentials from the given user will be substituted
-     * appropriately.
-     *
-     * @param user
-     *     The user whose credentials should be used if necessary.
+     * Returns a GuacamoleConfiguration which connects to the given connection.
+     * If the connection ID of an active is provided, that active connection","[{'comment': '> If the connection ID of an active *connection* is provided\r\n\r\nAlthough, the term ""active connection"" is used several times in rapid succession, so maybe:\r\n\r\n> If the ID of an active connection is provided\r\n\r\nwould make it a little more succinct.', 'commenter': 'necouchman'}, {'comment': 'Sure. Change made via rebase.', 'commenter': 'mike-jumper'}]"
578,guacamole-common/src/main/java/org/apache/guacamole/protocol/GuacamoleConfiguration.java,"@@ -103,15 +102,34 @@ public void setConnectionID(String connectionID) {
 
     /**
      * Returns the name of the protocol to be used.
-     * @return The name of the protocol to be used.
+     *
+     * @return
+     *     The name of the protocol to be used.
      */
     public String getProtocol() {
         return protocol;
     }
 
     /**
-     * Sets the name of the protocol to be used.
-     * @param protocol The name of the protocol to be used.
+     * Sets the name of the protocol to be used. If no connection is being
+     * joined (a new connection is being established), this value must be set.
+     *
+     * <p>If a connection is being joined, <strong>this value should still be
+     * set</strong> to ensure that protocol-specific responses like the
+     * ""required"" and ""argv"" instructions  can be understood in their proper","[{'comment': 'Extra space slipped in here...', 'commenter': 'necouchman'}, {'comment': 'Removed via rebase.', 'commenter': 'mike-jumper'}]"
578,guacamole/src/main/webapp/app/rest/services/tunnelService.js,"@@ -79,6 +79,36 @@ angular.module('rest').factory('tunnelService', ['$injector',
 
     };
 
+    /**
+     * Makes a request to the REST API to retrieve the underlying protocol of
+     * the connection associated with a particular tunnel, returning a promise
+     * that provides a @link{Protocol} object if successful.
+     *
+     * @param {String} tunnel
+     *     The UUID of the tunnel associated with the Guacamole connection
+     *     whose underlying protocol is being retrieved.
+     *
+     * @returns {Promise.<Protocol>}
+     *     A promise which will resolve with a @link{Protocol} object upon
+     *     success.
+     */
+    service.getProtocol = function getProtocol(tunnel) {
+
+        // Build HTTP parameters set
+        var httpParameters = {
+            token : authenticationService.getCurrentToken()
+        };
+
+        // Retrieve all associated sharing profiles","[{'comment': ""Copy pasta? Don't think this one is retrieving sharing profiles..."", 'commenter': 'necouchman'}, {'comment': 'Yep. Fixed via rebase.', 'commenter': 'mike-jumper'}]"
579,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/AuthenticationProviderService.java,"@@ -34,13 +34,20 @@
 import org.apache.guacamole.auth.cas.ticket.TicketValidationService;
 import org.apache.guacamole.auth.cas.user.CASAuthenticatedUser;
 import org.apache.guacamole.language.TranslatableMessage;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Service providing convenience functions for the CAS AuthenticationProvider
  * implementation.
  */
 public class AuthenticationProviderService {
 
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+","[{'comment': ""Is there a reason for adding the logger? It doesn't look like there were any code additions for actual logging??"", 'commenter': 'necouchman'}, {'comment': ""I don't believe so - I think this crept in from 7b8dc36644be90f5ddb90e4d7835e062475421ea. I'll recheck and remove."", 'commenter': 'mike-jumper'}]"
579,extensions/guacamole-auth-cas/src/main/java/org/apache/guacamole/auth/cas/conf/ConfigurationService.java,"@@ -85,4 +91,102 @@ public PrivateKey getClearpassKey() throws GuacamoleException {
         return environment.getProperty(CASGuacamoleProperties.CAS_CLEARPASS_KEY);
     }
 
+    /**
+     * Returns the CAS attribute that should be used to determine group
+     * memberships in CAS, such as ""memberOf"". If no attribute has been
+     * specified, null is returned.
+     *
+     * @return
+     *     The attribute name used to determine group memberships in CAS,
+     *     null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If guacamole.properties cannot be parsed.
+     */
+    public String getGroupAttribute() throws GuacamoleException {
+        return environment.getProperty(CASGuacamoleProperties.CAS_GROUP_ATTRIBUTE);
+    }
+
+    /**
+     * Returns the format that CAS is expected to use for its group names, such
+     * as {@link GroupFormat#PLAIN} (simple plain-text names) or
+     * {@link GroupFormat#LDAP} (fully-qualified LDAP DNs). If not specified,
+     * PLAIN is used by default.
+     *
+     * @return
+     *     The format that CAS is expected to use for its group names.
+     *
+     * @throws GuacamoleException
+     *     If the format specified within guacamole.properties is not valid.
+     */
+    public GroupFormat getGroupFormat() throws GuacamoleException {
+        return environment.getProperty(CASGuacamoleProperties.CAS_GROUP_FORMAT, GroupFormat.PLAIN);
+    }
+
+    /**
+     * Returns the base DN that all LDAP-formatted CAS groups must reside
+     * beneath. Any groups that are not beneath this base DN should be ignored.
+     * If no such base DN is provided, the tree structure of the ancestors of
+     * LDAP-formatted CAS groups should not be considered.","[{'comment': 'This seems slightly confusing as to what the practical outcome of this is. If the ""tree structure of the ancestors...should not be considered"", does that effectively mean that all groups will be allowed or all will be ignored?', 'commenter': 'necouchman'}, {'comment': 'That all groups will be allowed.\r\n\r\nFor example, if `cas-group-format` is `ldap` and CAS returns the following groups:\r\n\r\n* `cn=group1,ou=groups,dc=foo,dc=example,dc=net`\r\n* `cn=group2,ou=groups,dc=bar,dc=example,dc=net`\r\n* `cn=group3,ou=groups,dc=baz,dc=example,dc=net`\r\n\r\nThen, by default, the user will be considered a member of ""group1"", ""group2"", and ""group3"". However, if `cas-group-ldap-base-dn` is set to `dc=bar,dc=example,dc=net`, they will only be considered a member of ""group2"".', 'commenter': 'mike-jumper'}]"
581,guacamole-docker/bin/start.sh,"@@ -687,6 +687,18 @@ END
     ln -s /opt/guacamole/cas/guacamole-auth-*.jar   ""$GUACAMOLE_EXT""
 }
 
+##
+## Adds properties to guacamole.properties which configure the json
+## authentication provider.
+##
+associate_json() {
+    # Update config file
+    set_optional_property ""json-secret-key""         ""$JSON_SECRET_KEY""","[{'comment': ""Is this an optional property? Isn't this required if the JSON extension is used?"", 'commenter': 'necouchman'}, {'comment': 'Good catch. should be fixed now. ', 'commenter': 'BojanZelic'}]"
581,guacamole-docker/bin/start.sh,"@@ -687,6 +687,18 @@ END
     ln -s /opt/guacamole/cas/guacamole-auth-*.jar   ""$GUACAMOLE_EXT""
 }
 
+##
+## Adds properties to guacamole.properties which configure the json
+## authentication provider.
+##
+associate_json() {
+    # Update config file
+    set_property ""json-secret-key""                 ""$JSON_SECRET_KEY""","[{'comment': 'While we\'re at it, should we also make the optional property ""json-trusted-networks"" available, here?', 'commenter': 'necouchman'}, {'comment': ""Good point, that property wasn't documented and I wasn't aware it existed. Should be fixed now"", 'commenter': 'BojanZelic'}]"
586,extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/conf/ConfigurationService.java,"@@ -327,5 +329,38 @@ public RadiusAuthenticationProtocol getRadiusEAPTTLSInnerProtocol()
         return authProtocol;
         
     }
+    
+    /**
+     * Returns the InetAddress containing the NAS IP address that should be
+     * used to identify this RADIUS client when communicating with the RADIUS
+     * server. If no explicit configuration of this property is defined
+     * in guacamole.properties, it falls back to attempting to determine the
+     * IP address using Java's built-in mechanisms for querying local addresses.
+     * 
+     * @return
+     *     The InetAddress corresponding to the NAS IP address specified in
+     *     guacamole.properties, or the IP determined by querying the address
+     *     of the server on which Guacamole is running.
+     * 
+     * @throws GuacamoleException 
+     *     If guacamole.properties cannot be parsed, or if the InetAddress
+     *     for the NAS IP cannot be read or determined from the system.
+     */
+    public InetAddress getRadiusNasIp() throws GuacamoleException {
+        try {
+            String nasIpStr = environment.getProperty(RadiusGuacamoleProperties.RADIUS_NAS_IP);
+            
+            // If property is specified and non-empty, attempt to return converted address.
+            if (!(nasIpStr == null == nasIpStr.isEmpty()))","[{'comment': ""```java\r\nnasIpStr == null == nasIpStr.isEmpty()\r\n```\r\n\r\nThis _really_ bent my mind for a bit, until I realized that the last `== nasIpStr.isEmpty()` bit is comparing against the boolean result of `nasIpStr == null`.\r\n\r\nWon't this throw a `NullPointerException` when evaluating `nasIpStr.isEmpty()` if `nasIpStr` is null? Why not just good ol' `nasIpStr != null && !nasIpStr.isEmpty()`?"", 'commenter': 'mike-jumper'}, {'comment': ""It's a lot less of a mind-bender if you start with the assumption that I made a typo and `==` should have actually been `&&` :rofl: "", 'commenter': 'necouchman'}]"
595,guacamole/src/main/java/org/apache/guacamole/GuacamoleServletContextListener.java,"@@ -78,33 +121,47 @@ public void contextInitialized(ServletContextEvent servletContextEvent) {
             throw new RuntimeException(e);
         }
 
+        // NOTE: The superclass implementation of contextInitialized() is
+        // expected invoke getInjector(), hence the need to call AFTER setting","[{'comment': '*to invoke', 'commenter': 'necouchman'}, {'comment': 'Oops. Fixed via rebase.', 'commenter': 'mike-jumper'}]"
595,guacamole/src/main/java/org/apache/guacamole/rest/RequestSizeFilter.java,"@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import javax.inject.Inject;
+import javax.inject.Singleton;
+import javax.ws.rs.container.ContainerRequestContext;
+import javax.ws.rs.container.ContainerRequestFilter;
+import javax.ws.rs.container.ResourceInfo;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.ext.Provider;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.properties.LongGuacamoleProperty;
+
+/**
+ * Filter which restricts REST API requests to a particular maximum size.
+ */
+@Singleton
+@Provider
+public class RequestSizeFilter implements ContainerRequestFilter {
+
+    /**
+     * Informs the RequestSizeFilter to NOT enforce its request size limits on
+     * requests serviced by the annotated method.
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    public static @interface DoNotLimit {}
+
+    /**
+     * The default maximum number of bytes to accept within the entity body of
+     * any particular REST request.
+     */
+    private final long DEFAULT_MAX_REQUEST_SIZE = 2097152;","[{'comment': ""Is there a reason why this size was chosen? I've not issue with it, just curious as to the rationale."", 'commenter': 'necouchman'}, {'comment': ""My initial thinking was that something on the order of a few MB would be a reasonable default covering most cases, and my gut suggested 2 MB. I checked against the defaults of similar components, particularly Tomcat, and found that this matched up:\r\n\r\n* The default `maxPostSize` of Tomcat's HTTP connector is 2 MB.\r\n* Nginx' default request size limit is 1 MB."", 'commenter': 'mike-jumper'}, {'comment': 'Okay. Is this something that is going to be configurable? I think the 1MB limit in Nginx tends to be problematic for large file uploads into Guacamole Client - I suspect this is also going to limit those uploads??', 'commenter': 'necouchman'}, {'comment': '> Is this something that is going to be configurable?\r\n\r\nYep - with the `api-max-request-size` property that is part of these changes.\r\n\r\n> I think the 1MB limit in Nginx tends to be problematic for large file uploads into Guacamole Client - I suspect this is also going to limit those uploads??\r\n\r\nNope, this will specifically not affect uploads, which are annotated with `@RequestSizeFilter.DoNotLimit`. When a user configures their reverse proxy to not limit requests, file uploads of any size will work, while all other requests would still be limited by Guacamole.\r\n\r\n(See PR description 😉)', 'commenter': 'mike-jumper'}, {'comment': 'Ah, shoot, sorry about that - missed both those things!', 'commenter': 'necouchman'}, {'comment': 'Wow, just a few lines below this, too - and I even recall reviewing that last time around...', 'commenter': 'necouchman'}]"
604,extensions/guacamole-auth-ldap/src/main/resources/guac-manifest.json,"@@ -12,6 +12,7 @@
     ""translations"" : [
         ""translations/de.json"",
         ""translations/en.json"",
+        ""translations/ko.json"",","[{'comment': ""You added this line, here, but the commit is missing the `guacamole-auth-ldap/src/main/resources/translations/ko.json` file. Maybe it didn't get added to the commit?"", 'commenter': 'necouchman'}, {'comment': 'ko.json is not needed on there. \r\nI added does line because, because de.json is also in guac-manifest.json even there is no de.json.\r\n\r\nIf de.json line is  also need to removed I will remove ko.json', 'commenter': 'OctopusET'}]"
604,extensions/guacamole-auth-totp/src/main/resources/translations/ko.json,"@@ -0,0 +1,34 @@
+{
+
+    ""DATA_SOURCE_TOTP"" : {
+        ""NAME"" : ""TOTP TFA Backend""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_GUAC_TOTP"" : """"
+    },","[{'comment': 'Similar to RADIUS extension, you can remove this from the Korean translation, as there is no translation being done.', 'commenter': 'necouchman'}]"
604,extensions/guacamole-auth-radius/src/main/resources/translations/ko.json,"@@ -0,0 +1,12 @@
+{
+
+    ""DATA_SOURCE_RADIUS"" : {
+        ""NAME"" : ""RADIUS Backend""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_GUAC_RADIUS_STATE""              : """",
+        ""FIELD_HEADER_RADIUSCHALLENGE""                : """"
+    }
+
+}","[{'comment': 'It looks to me like you can leave this entire file out, as there is no Korean translation being done, here.', 'commenter': 'necouchman'}, {'comment': '""Backend"" can be translated, but writing in english is better. So, I will remove ko.json and restore guac.manifest.json', 'commenter': 'OctopusET'}]"
604,guacamole/src/main/webapp/translations/ko.json,"@@ -0,0 +1,1008 @@
+{
+    
+    ""NAME"" : ""Korean"",
+    
+    ""APP"" : {
+
+        ""ACTION_ACKNOWLEDGE""        : ""확인"",
+        ""ACTION_CANCEL""             : ""취소"",
+        ""ACTION_CLONE""              : ""복제"",
+        ""ACTION_CONTINUE""           : ""계속"",
+        ""ACTION_DELETE""             : ""삭제"",
+        ""ACTION_DELETE_SESSIONS""    : ""세션 종료"",
+        ""ACTION_DOWNLOAD""           : ""다운로드"",
+        ""ACTION_LOGIN""              : ""로그인"",
+        ""ACTION_LOGOUT""             : ""로그아웃"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""연결"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""기본 설정"",
+        ""ACTION_MANAGE_SETTINGS""    : ""세팅"",
+        ""ACTION_MANAGE_SESSIONS""    : ""활성화된 세션"",
+        ""ACTION_MANAGE_USERS""       : ""사용자"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""그룹"",
+        ""ACTION_NAVIGATE_BACK""      : ""뒤로가기"",
+        ""ACTION_NAVIGATE_HOME""      : ""홈"",
+        ""ACTION_SAVE""               : ""저장"",
+        ""ACTION_SEARCH""             : ""검색"",
+        ""ACTION_SHARE""              : ""공유"",
+        ""ACTION_UPDATE_PASSWORD""    : ""패스워드 업데이트"",
+        ""ACTION_VIEW_HISTORY""       : ""히스토리"",
+
+        ""DIALOG_HEADER_ERROR"" : ""에러"",
+
+        ""ERROR_PAGE_UNAVAILABLE""  : ""에러가 발생해 동작이 완료될 수 없습니다. 문제가 계속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_PASSWORD_BLANK""    : ""패스워드는 공백이 될 수 없습니다."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""패스워드가 일치하지 않습니다."",
+        
+        ""FIELD_HEADER_PASSWORD""       : ""패스워드:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""패스워드 재입력:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""필터"",
+
+        ""FORMAT_DATE_TIME_PRECISE"" : ""yyyy-MM-dd HH:mm:ss"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""현재 {USERS} 사용자에 의해 사용중입니다.}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""익명"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{초} minute{분} hour{시} day{일} other{}}"",
+        ""TEXT_UNTRANSLATED"" : ""{MESSAGE}""
+
+    },
+
+    ""CLIENT"" : {
+
+        ""ACTION_ACKNOWLEDGE""               : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_CANCEL""                    : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""지우기"",
+        ""ACTION_CONTINUE""                  : ""@:APP.ACTION_CONTINUE"",
+        ""ACTION_DISCONNECT""                : ""연결 해제"",
+        ""ACTION_LOGOUT""                    : ""@:APP.ACTION_LOGOUT"",
+        ""ACTION_NAVIGATE_BACK""             : ""@:APP.ACTION_NAVIGATE_BACK"",
+        ""ACTION_NAVIGATE_HOME""             : ""@:APP.ACTION_NAVIGATE_HOME"",
+        ""ACTION_RECONNECT""                 : ""다시 연결"",
+        ""ACTION_SAVE_FILE""                 : ""@:APP.ACTION_SAVE"",
+        ""ACTION_SHARE""                     : ""@:APP.ACTION_SHARE"",
+        ""ACTION_UPLOAD_FILES""              : ""파일 업로드"",
+
+        ""DIALOG_HEADER_CONNECTING""       : ""연결 중"",
+        ""DIALOG_HEADER_CONNECTION_ERROR"" : ""연결 오류"",
+        ""DIALOG_HEADER_DISCONNECTED""     : ""연결 끊김"",
+
+        ""ERROR_CLIENT_201""     : ""서버 사용량이 많아 연결이 종료되었습니다. 몇 분 후에 다시 시도하십시요."",
+        ""ERROR_CLIENT_202""     : ""원격 데스크톱이 응답하는데 너무 오래걸려서 Guacamole 서버가 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_CLIENT_203""     : ""원격 데스크톱 서버에 오류가 발생해서 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_CLIENT_207""     : ""원격 데스크톱 서버에 현재 연결할 수 없습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_208""     : ""원격 데스크톱 서버를 현재 사용 할 수 없습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_209""     : ""다른 연결과 충돌해서 원격 데스크톱 서버가 연결을 닫았습니다. 나중에 다시 시도하십시오."",
+        ""ERROR_CLIENT_20A""     : ""원격 데스크톱이 비활성화 상태로 보이기 때문에 서버 연결을 닫았습니다. 원치 않거나 예기치 않은 경우, 시스템 관리자에게 문의하거나 시스템 세팅을 확인하십시오."",
+        ""ERROR_CLIENT_20B""     : ""원격 데스크톱 서버가 강제로 연결을 끊었습니다. 원치 않거나 예기치 않은 경우, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_301""     : ""로그인이 실패했습니다. 다시 연결한 다음 다시 시도하십시오"",
+        ""ERROR_CLIENT_303""     : ""원격 데스크톱 서버가 이 연결에 대한 액세스를 거부했습니다. 액세스 권한이 필요하면, 시스템 관리자에게 계정 액세스 권한을 부여하도록 요청하거나 시스템 설정을 확인하십시오."",
+        ""ERROR_CLIENT_308""     : ""브라우저에서 연결이 끊긴 것처럼 보일 정도로 오랫동안 응답이 없었기 때문에 Guacamole 서버가 연결을 닫았습니다. 이는 보통 불안정한 무선 신호나 단지 네트워크의 느린 속도같은 네트워크 문제로 일어납니다. 네트워크 상태를 확인 후에 다시 시도 하십시오."", 
+        ""ERROR_CLIENT_31D""     : ""개별 사용자의 동시 연결 사용 제한을 초과했기 때문에 Guacamole 서버가 이 연결에 대한 액세스를 거부했습니다. 하나 이상의 연결을 닫고 다시 시도 하십시오."",
+        ""ERROR_CLIENT_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+        ""ERROR_TUNNEL_201""     : ""활성 연결이 너무 많기 때문에 Guacamole 서버에서 이 연결 시도를 거부했습니다. 잠시 후에 다시 시도하십시오"",
+        ""ERROR_TUNNEL_202""     : ""서버 응답시간이 너무 길어 연결을 닫았습니다. 이것은 보통 불안정한 무선 신호나, 네트워크의 느린 속도같은 네트워크의 문제입니다. 네트워크 연결을 확인해 주시거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_TUNNEL_203""     : ""서버에 오류가 발생해서 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_TUNNEL_204""     : ""요청한 연결이 존재하지 않습니다. 연결 이름을 확인하고 다시 시도하십시오"",
+        ""ERROR_TUNNEL_205""     : ""이 연결은 현재 사용 중이며 이 연결에 대한 동시 액세스가 허용되지 않습니다. 나중에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_207""     : ""Guacamole 서버에 현재 접근할 수 없습니다. 네트워크 상태를 확인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_208""     : ""Guacamole 서버가 연결을 허용하지 않습니다. 네트워크 상태를 확인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_301""     : ""로그인하지 않았기 때문에, 이 연결에 접근할 수 있는 권한이 없습니다. 로그인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_303""     : ""이 연결에 접근할 수 있는 권한이 없습니다. 접근 권한이 필요하다면, 허가 사용자 목록에 당신을 추가하도록 시스템 관리자에게 요청하거나 시스템 설정을 확인하십시오."",
+        ""ERROR_TUNNEL_308""     : ""브라우저에서 연결이 끊긴 것처럼 보일 정도로 오랫동안 응답이 없었기 때문에 Guacamole server가 연결을 닫았습니다. 이는 보통 불안정한 무선 신호나 단지 네트워크의 느린 속도같은 네트워크 문제로 일어납니다. 네트워크 상태를 확인 후에 다시 시도 하십시오"",
+        ""ERROR_TUNNEL_31D""     : ""개별 사용자의 동시 연결 사용 제한을 초과했기 때문에 Guacamole server가 이 연결에 대한 액세스를 거부하고 있습니다. 하나 이상의 연결을 닫고 다시 시도하십시오."",
+        ""ERROR_TUNNEL_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+        ""ERROR_UPLOAD_100""     : ""파일 전송이 지원되지 않거나 활성화되지 않았습니다. 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_UPLOAD_201""     : ""현재 너무 많은 파일이 전송되고 있습니다. 기존 전송이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_202""     : ""원격 데스크톱 서버가 응답하는 데 너무 오래 걸리기 때문에 파일을 전송할 수 없습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_UPLOAD_203""     : ""전송하는 동안 원격 데스크톱 서버에 오류가 발생했습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_UPLOAD_204""     : ""파일 전송 대상이 없습니다. 대상이 있는지 확인하고 다시 시도하십시오."",
+        ""ERROR_UPLOAD_205""     : ""파일 전송 대상이 현재 잠겨 있습니다. 진행 중인 작업이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_301""     : ""로그인하지 않았기 때문에 이 파일을 업로드할 권한이 없습니다. 로그인 한 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_303""     : ""이 파일을 업로드 할 권한이 없습니다. 액세스가 필요한 경우 시스템 설정을 확인하거나 시스템 관리자에게 확인하십시오."",
+        ""ERROR_UPLOAD_308""     : ""파일 전송이 중단되었습니다. 이는 일반적으로 무선 신호가 불안정하거나 네트워크 속도가 매우 느린 것과 같은 네트워크 문제로 인해 발생합니다. 네트워크를 확인하고 다시 시도하십시오."",
+        ""ERROR_UPLOAD_31D""     : ""현재 너무 많은 파일이 전송되고 있습니다. 기존 전송이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HELP_CLIPBOARD""           : ""Guacamole에서 복사하거나 잘라낸 텍스트가 여기에 표시됩니다. 텍스트 변경 사항은 원격 클립보드에 직접 적용됩니다."",
+        ""HELP_INPUT_METHOD_NONE""   : ""사용중인 입력 방법이 없습니다. 키보드 입력은 연결된 물리적 키보드에서 받아들여집니다."",
+        ""HELP_INPUT_METHOD_OSK""    : ""내장된 Guacamole 화상 키보드의 입력을 표시하고 허용합니다. 화상 키보드는 다른 방법으로는 불가능할 수 있는 키 조합을 입력할 수 있습니다. (Ctrl-Alt-Del 등)"",
+        ""HELP_INPUT_METHOD_TEXT""   : ""텍스트 입력을 허용하고, 입력된 텍스트를 바탕으로 키보드 이벤트를 에뮬레이트 합니다. 이것은 물리적 키보드가 없는 휴대폰과 같은 장치에 필요합니다."",
+        ""HELP_MOUSE_MODE""          : ""터치와 관련하여 원격 마우스가 어떻게 동작하는지 결정합니다."",
+        ""HELP_MOUSE_MODE_ABSOLUTE"" : ""탭하여 클릭합니다. 클릭은 터치 위치에서 발생합니다."",
+        ""HELP_MOUSE_MODE_RELATIVE"" : ""드래그하여 마우스 포인터를 움직이고 탭하여 클릭합니다. 클릭은 마우스 포인터 위치에서 발생합니다."",
+        ""HELP_SHARE_LINK""          : ""현재 연결이 공유되고 있으며, 다음 링크를 가진 사람이라면 누구나 접근할 수 있습니다:"",
+        ""INFO_CONNECTION_SHARED"" : ""이 연결은 이제 공유됩니다."",
+        ""INFO_NO_FILE_TRANSFERS"" : ""파일 전송이 없습니다."",
+
+        ""NAME_INPUT_METHOD_NONE""   : ""없음"",
+        ""NAME_INPUT_METHOD_OSK""    : ""화상 키보드"",
+        ""NAME_INPUT_METHOD_TEXT""   : ""텍스트 입력"",
+        ""NAME_KEY_CTRL""            : ""Ctrl"",
+        ""NAME_KEY_ALT""             : ""Alt"",
+        ""NAME_KEY_ESC""             : ""Esc"",
+        ""NAME_KEY_TAB""             : ""Tab"",
+        ""NAME_MOUSE_MODE_ABSOLUTE"" : ""터치 스크린"",
+        ""NAME_MOUSE_MODE_RELATIVE"" : ""터치 패드"",
+
+        ""SECTION_HEADER_CLIPBOARD""      : ""클립보드"",
+        ""SECTION_HEADER_DEVICES""        : ""장치"",
+        ""SECTION_HEADER_DISPLAY""        : ""디스플레이"",
+        ""SECTION_HEADER_FILE_TRANSFERS"" : ""파일 전송"",
+        ""SECTION_HEADER_INPUT_METHOD""   : ""입력 방법"",
+        ""SECTION_HEADER_MOUSE_MODE""     : ""마우스 에뮬레이션 모드"",
+
+        ""TEXT_ZOOM_AUTO_FIT""              : ""브라우저 창에 자동으로 맞춤"",
+        ""TEXT_CLIENT_STATUS_IDLE""         : ""유휴 상태."",
+        ""TEXT_CLIENT_STATUS_CONNECTING""   : ""Guacamole에 연결 중..."",
+        ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""연결이 끊어졌습니다."",
+        ""TEXT_CLIENT_STATUS_UNSTABLE""     : ""Guacamole 서버에 대한 네트워크 연결이 불안정합니다."",
+        ""TEXT_CLIENT_STATUS_WAITING""      : ""Guacamole에 연결됐습니다. 응답을 기다리는 중..."",
+        ""TEXT_RECONNECT_COUNTDOWN""        : ""다시 연결하는 중 {REMAINING}초..."",
+        ""TEXT_FILE_TRANSFER_PROGRESS""     : ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}"",
+
+        ""URL_OSK_LAYOUT"" : ""layouts/en-us-qwerty.json""","[{'comment': ""I think this should probably be omitted if it isn't changing the on-screen keyboard layout from the default English translation."", 'commenter': 'necouchman'}, {'comment': 'Right, removed.', 'commenter': 'OctopusET'}]"
604,guacamole/src/main/webapp/translations/ko.json,"@@ -0,0 +1,843 @@
+{
+
+    ""NAME"" : ""Korean"",
+
+    ""APP"" : {
+
+        ""ACTION_ACKNOWLEDGE""        : ""확인"",
+        ""ACTION_CANCEL""             : ""취소"",
+        ""ACTION_CLONE""              : ""복제"",
+        ""ACTION_CONTINUE""           : ""계속"",
+        ""ACTION_DELETE""             : ""삭제"",
+        ""ACTION_DELETE_SESSIONS""    : ""세션 종료"",
+        ""ACTION_DOWNLOAD""           : ""다운로드"",
+        ""ACTION_LOGIN""              : ""로그인"",
+        ""ACTION_LOGOUT""             : ""로그아웃"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""연결"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""기본 설정"",
+        ""ACTION_MANAGE_SETTINGS""    : ""세팅"",
+        ""ACTION_MANAGE_SESSIONS""    : ""활성화된 세션"",
+        ""ACTION_MANAGE_USERS""       : ""사용자"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""그룹"",
+        ""ACTION_NAVIGATE_BACK""      : ""뒤로가기"",
+        ""ACTION_NAVIGATE_HOME""      : ""홈"",
+        ""ACTION_SAVE""               : ""저장"",
+        ""ACTION_SEARCH""             : ""검색"",
+        ""ACTION_SHARE""              : ""공유"",
+        ""ACTION_UPDATE_PASSWORD""    : ""패스워드 업데이트"",
+        ""ACTION_VIEW_HISTORY""       : ""히스토리"",
+
+        ""DIALOG_HEADER_ERROR"" : ""에러"",
+
+        ""ERROR_PAGE_UNAVAILABLE""  : ""에러가 발생해 동작이 완료될 수 없습니다. 문제가 계속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_PASSWORD_BLANK""    : ""패스워드는 공백이 될 수 없습니다."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""패스워드가 일치하지 않습니다."",
+
+        ""FIELD_HEADER_PASSWORD""       : ""패스워드:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""패스워드 재입력:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""필터"",
+
+        ""FORMAT_DATE_TIME_PRECISE"" : ""yyyy-MM-dd HH:mm:ss"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""현재 {USERS} 사용자에 의해 사용중입니다.}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""익명"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{초} minute{분} hour{시} day{일} other{}}"",
+        ""TEXT_UNTRANSLATED"" : ""{MESSAGE}""
+
+    },
+
+    ""CLIENT"" : {
+
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""지우기"",
+        ""ACTION_DISCONNECT""                : ""연결 해제"",
+        ""ACTION_RECONNECT""                 : ""다시 연결"",
+        ""ACTION_UPLOAD_FILES""              : ""파일 업로드"",
+
+        ""DIALOG_HEADER_CONNECTING""       : ""연결 중"",
+        ""DIALOG_HEADER_CONNECTION_ERROR"" : ""연결 오류"",
+        ""DIALOG_HEADER_DISCONNECTED""     : ""연결 끊김"",
+
+        ""ERROR_CLIENT_201""     : ""서버 사용량이 많아 연결이 종료되었습니다. 몇 분 후에 다시 시도하십시요."",
+        ""ERROR_CLIENT_202""     : ""원격 데스크톱이 응답하는데 너무 오래걸려서 Guacamole 서버가 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_CLIENT_203""     : ""원격 데스크톱 서버에 오류가 발생해서 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_CLIENT_207""     : ""원격 데스크톱 서버에 현재 연결할 수 없습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_208""     : ""원격 데스크톱 서버를 현재 사용 할 수 없습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_209""     : ""다른 연결과 충돌해서 원격 데스크톱 서버가 연결을 닫았습니다. 나중에 다시 시도하십시오."",
+        ""ERROR_CLIENT_20A""     : ""원격 데스크톱이 비활성화 상태로 보이기 때문에 서버 연결을 닫았습니다. 원치 않거나 예기치 않은 경우, 시스템 관리자에게 문의하거나 시스템 세팅을 확인하십시오."",
+        ""ERROR_CLIENT_20B""     : ""원격 데스크톱 서버가 강제로 연결을 끊었습니다. 원치 않거나 예기치 않은 경우, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_301""     : ""로그인이 실패했습니다. 다시 연결한 다음 다시 시도하십시오"",
+        ""ERROR_CLIENT_303""     : ""원격 데스크톱 서버가 이 연결에 대한 액세스를 거부했습니다. 액세스 권한이 필요하면, 시스템 관리자에게 계정 액세스 권한을 부여하도록 요청하거나 시스템 설정을 확인하십시오."",
+        ""ERROR_CLIENT_308""     : ""브라우저에서 연결이 끊긴 것처럼 보일 정도로 오랫동안 응답이 없었기 때문에 Guacamole 서버가 연결을 닫았습니다. 이는 보통 불안정한 무선 신호나 단지 네트워크의 느린 속도같은 네트워크 문제로 일어납니다. 네트워크 상태를 확인 후에 다시 시도 하십시오."", 
+        ""ERROR_CLIENT_31D""     : ""개별 사용자의 동시 연결 사용 제한을 초과했기 때문에 Guacamole 서버가 이 연결에 대한 액세스를 거부했습니다. 하나 이상의 연결을 닫고 다시 시도 하십시오."",
+        ""ERROR_CLIENT_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+        ""ERROR_TUNNEL_201""     : ""활성 연결이 너무 많기 때문에 Guacamole 서버에서 이 연결 시도를 거부했습니다. 잠시 후에 다시 시도하십시오"",
+        ""ERROR_TUNNEL_202""     : ""서버 응답시간이 너무 길어 연결을 닫았습니다. 이것은 보통 불안정한 무선 신호나, 네트워크의 느린 속도같은 네트워크의 문제입니다. 네트워크 연결을 확인해 주시거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_TUNNEL_203""     : ""서버에 오류가 발생해서 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_TUNNEL_204""     : ""요청한 연결이 존재하지 않습니다. 연결 이름을 확인하고 다시 시도하십시오"",
+        ""ERROR_TUNNEL_205""     : ""이 연결은 현재 사용 중이며 이 연결에 대한 동시 액세스가 허용되지 않습니다. 나중에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_207""     : ""Guacamole 서버에 현재 접근할 수 없습니다. 네트워크 상태를 확인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_208""     : ""Guacamole 서버가 연결을 허용하지 않습니다. 네트워크 상태를 확인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_301""     : ""로그인하지 않았기 때문에, 이 연결에 접근할 수 있는 권한이 없습니다. 로그인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_303""     : ""이 연결에 접근할 수 있는 권한이 없습니다. 접근 권한이 필요하다면, 허가 사용자 목록에 당신을 추가하도록 시스템 관리자에게 요청하거나 시스템 설정을 확인하십시오."",
+        ""ERROR_TUNNEL_308""     : ""브라우저에서 연결이 끊긴 것처럼 보일 정도로 오랫동안 응답이 없었기 때문에 Guacamole server가 연결을 닫았습니다. 이는 보통 불안정한 무선 신호나 단지 네트워크의 느린 속도같은 네트워크 문제로 일어납니다. 네트워크 상태를 확인 후에 다시 시도 하십시오"",
+        ""ERROR_TUNNEL_31D""     : ""개별 사용자의 동시 연결 사용 제한을 초과했기 때문에 Guacamole server가 이 연결에 대한 액세스를 거부하고 있습니다. 하나 이상의 연결을 닫고 다시 시도하십시오."",
+        ""ERROR_TUNNEL_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+        ""ERROR_UPLOAD_100""     : ""파일 전송이 지원되지 않거나 활성화되지 않았습니다. 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_UPLOAD_201""     : ""현재 너무 많은 파일이 전송되고 있습니다. 기존 전송이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_202""     : ""원격 데스크톱 서버가 응답하는 데 너무 오래 걸리기 때문에 파일을 전송할 수 없습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_UPLOAD_203""     : ""전송하는 동안 원격 데스크톱 서버에 오류가 발생했습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_UPLOAD_204""     : ""파일 전송 대상이 없습니다. 대상이 있는지 확인하고 다시 시도하십시오."",
+        ""ERROR_UPLOAD_205""     : ""파일 전송 대상이 현재 잠겨 있습니다. 진행 중인 작업이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_301""     : ""로그인하지 않았기 때문에 이 파일을 업로드할 권한이 없습니다. 로그인 한 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_303""     : ""이 파일을 업로드 할 권한이 없습니다. 액세스가 필요한 경우 시스템 설정을 확인하거나 시스템 관리자에게 확인하십시오."",
+        ""ERROR_UPLOAD_308""     : ""파일 전송이 중단되었습니다. 이는 일반적으로 무선 신호가 불안정하거나 네트워크 속도가 매우 느린 것과 같은 네트워크 문제로 인해 발생합니다. 네트워크를 확인하고 다시 시도하십시오."",
+        ""ERROR_UPLOAD_31D""     : ""현재 너무 많은 파일이 전송되고 있습니다. 기존 전송이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+
+        ""HELP_CLIPBOARD""           : ""Guacamole에서 복사하거나 잘라낸 텍스트가 여기에 표시됩니다. 텍스트 변경 사항은 원격 클립보드에 직접 적용됩니다."",
+        ""HELP_INPUT_METHOD_NONE""   : ""사용중인 입력 방법이 없습니다. 키보드 입력은 연결된 물리적 키보드에서 받아들여집니다."",
+        ""HELP_INPUT_METHOD_OSK""    : ""내장된 Guacamole 화상 키보드의 입력을 표시하고 허용합니다. 화상 키보드는 다른 방법으로는 불가능할 수 있는 키 조합을 입력할 수 있습니다. (Ctrl-Alt-Del 등)"",
+        ""HELP_INPUT_METHOD_TEXT""   : ""텍스트 입력을 허용하고, 입력된 텍스트를 바탕으로 키보드 이벤트를 에뮬레이트 합니다. 이것은 물리적 키보드가 없는 휴대폰과 같은 장치에 필요합니다."",
+        ""HELP_MOUSE_MODE""          : ""터치와 관련하여 원격 마우스가 어떻게 동작하는지 결정합니다."",
+        ""HELP_MOUSE_MODE_ABSOLUTE"" : ""탭하여 클릭합니다. 클릭은 터치 위치에서 발생합니다."",
+        ""HELP_MOUSE_MODE_RELATIVE"" : ""드래그하여 마우스 포인터를 움직이고 탭하여 클릭합니다. 클릭은 마우스 포인터 위치에서 발생합니다."",
+        ""HELP_SHARE_LINK""          : ""현재 연결이 공유되고 있으며, 다음 링크를 가진 사람이라면 누구나 접근할 수 있습니다:"",
+        ""INFO_CONNECTION_SHARED"" : ""이 연결은 이제 공유됩니다."",
+        ""INFO_NO_FILE_TRANSFERS"" : ""파일 전송이 없습니다."",
+
+        ""NAME_INPUT_METHOD_NONE""   : ""없음"",
+        ""NAME_INPUT_METHOD_OSK""    : ""화상 키보드"",
+        ""NAME_INPUT_METHOD_TEXT""   : ""텍스트 입력"",
+        ""NAME_KEY_CTRL""            : ""Ctrl"",
+        ""NAME_KEY_ALT""             : ""Alt"",
+        ""NAME_KEY_ESC""             : ""Esc"",
+        ""NAME_KEY_TAB""             : ""Tab"",
+        ""NAME_MOUSE_MODE_ABSOLUTE"" : ""터치 스크린"",
+        ""NAME_MOUSE_MODE_RELATIVE"" : ""터치 패드"",
+
+        ""SECTION_HEADER_CLIPBOARD""      : ""클립보드"",
+        ""SECTION_HEADER_DEVICES""        : ""장치"",
+        ""SECTION_HEADER_DISPLAY""        : ""디스플레이"",
+        ""SECTION_HEADER_FILE_TRANSFERS"" : ""파일 전송"",
+        ""SECTION_HEADER_INPUT_METHOD""   : ""입력 방법"",
+        ""SECTION_HEADER_MOUSE_MODE""     : ""마우스 에뮬레이션 모드"",
+
+        ""TEXT_ZOOM_AUTO_FIT""              : ""브라우저 창에 자동으로 맞춤"",
+        ""TEXT_CLIENT_STATUS_IDLE""         : ""유휴 상태."",
+        ""TEXT_CLIENT_STATUS_CONNECTING""   : ""Guacamole에 연결 중..."",
+        ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""연결이 끊어졌습니다."",
+        ""TEXT_CLIENT_STATUS_UNSTABLE""     : ""Guacamole 서버에 대한 네트워크 연결이 불안정합니다."",
+        ""TEXT_CLIENT_STATUS_WAITING""      : ""Guacamole에 연결됐습니다. 응답을 기다리는 중..."",
+        ""TEXT_RECONNECT_COUNTDOWN""        : ""다시 연결하는 중 {REMAINING}초..."",
+        ""TEXT_FILE_TRANSFER_PROGRESS""     : ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}""
+    },
+
+    ""COLOR_SCHEME"" : {
+
+        ""ACTION_HIDE_DETAILS"" : ""숨기기"",
+        ""ACTION_SHOW_DETAILS"" : ""표시"",
+
+        ""FIELD_HEADER_BACKGROUND"" : ""배경색"",
+        ""FIELD_HEADER_FOREGROUND"" : ""전경색"",
+
+        ""FIELD_OPTION_CUSTOM"" : ""사용자 지정..."",
+
+        ""SECTION_HEADER_DETAILS"" : ""세부 정보:""
+
+    },
+
+    ""DATA_SOURCE_DEFAULT"" : {
+        ""NAME"" : ""기본 (XML)""
+    },
+
+    ""FORM"" : {
+
+        ""FIELD_PLACEHOLDER_DATE"" : ""YYYY-MM-DD"",
+        ""FIELD_PLACEHOLDER_TIME"" : ""HH:MM:SS"",
+
+        ""HELP_SHOW_PASSWORD"" : ""클릭하여 패스워드 표시"",
+        ""HELP_HIDE_PASSWORD"" : ""클릭하여 패스워드 숨기기""
+
+    },
+
+    ""HOME"" : {
+
+        ""INFO_NO_RECENT_CONNECTIONS"" : ""최근 연결이 없습니다."",
+
+        ""PASSWORD_CHANGED"" : ""패스워드가 변경되었습니다."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""    : ""모든 연결"",
+        ""SECTION_HEADER_RECENT_CONNECTIONS"" : ""최근 연결""
+
+    },
+
+    ""LIST"" : {
+
+        ""TEXT_ANONYMOUS_USER"" : ""익명""
+
+    },
+
+    ""LOGIN"": {
+
+        ""ERROR_INVALID_LOGIN"" : ""잘못된 로그인"",
+
+        ""FIELD_HEADER_USERNAME"" : ""사용자 이름"",
+        ""FIELD_HEADER_PASSWORD"" : ""패스워드""
+
+    },
+
+    ""MANAGE_CONNECTION"" : {
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""연결 삭제"",
+
+        ""FIELD_HEADER_LOCATION"" : ""위치:"",
+        ""FIELD_HEADER_NAME""     : ""이름:"",
+        ""FIELD_HEADER_PROTOCOL"" : ""프로토콜:"",
+
+        ""INFO_CONNECTION_DURATION_UNKNOWN"" : ""--"",
+        ""INFO_CONNECTION_ACTIVE_NOW""       : ""현재 활성화"",
+        ""INFO_CONNECTION_NOT_USED""         : ""이 연결은 아직 사용되지 않았습니다."",
+
+        ""SECTION_HEADER_EDIT_CONNECTION"" : ""연결 편집"",
+        ""SECTION_HEADER_HISTORY""         : ""사용 기록"",
+        ""SECTION_HEADER_PARAMETERS""      : ""매개변수"",
+        ""TABLE_HEADER_HISTORY_USERNAME""   : ""사용자 이름"",
+        ""TABLE_HEADER_HISTORY_START""      : ""시작 시간"",
+        ""TABLE_HEADER_HISTORY_DURATION""   : ""기간"",
+        ""TABLE_HEADER_HISTORY_REMOTEHOST"" : ""원격 호스트"",
+
+        ""TEXT_CONFIRM_DELETE""   : ""연결을 삭제한 후에는 복원할 수 없습니다. 이 연결을 삭제하겠습니까?"",
+
+    },
+
+    ""MANAGE_CONNECTION_GROUP"" : {
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""연결 그룹 삭제"",
+
+        ""FIELD_HEADER_LOCATION"" : ""위치:"",
+        ""FIELD_HEADER_NAME""     : ""이름:"",
+        ""FIELD_HEADER_TYPE""     : ""타입:"",
+
+        ""NAME_TYPE_BALANCING""       : ""부하 분산"",
+        ""NAME_TYPE_ORGANIZATIONAL""  : ""조직"",
+
+        ""SECTION_HEADER_EDIT_CONNECTION_GROUP"" : ""연결 그룹 편집"",
+
+        ""TEXT_CONFIRM_DELETE"" : ""연결 그룹을 삭제한 후에는 복원할 수 없습니다. 이 연결 그룹을 삭제하겠습니까?""
+
+    },
+
+    ""MANAGE_SHARING_PROFILE"" : {
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""공유 프로필 삭제"",
+
+        ""FIELD_HEADER_NAME""               : ""이름:"",
+        ""FIELD_HEADER_PRIMARY_CONNECTION"" : ""기본 연결:"",
+
+        ""SECTION_HEADER_EDIT_SHARING_PROFILE"" : ""공유 프로필 편집"",
+        ""SECTION_HEADER_PARAMETERS""           : ""매개 변수"",
+
+        ""TEXT_CONFIRM_DELETE"" : ""공유 프로필을 삭제한 후에는 복원할 수 없습니다. 이 공유 프로필을 삭제하겠습니까?""
+
+    },
+
+    ""MANAGE_USER"" : {
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""사용자 삭제"",
+
+        ""FIELD_HEADER_ADMINISTER_SYSTEM""             : ""관리자 시스템"",
+        ""FIELD_HEADER_CHANGE_OWN_PASSWORD""           : ""자신의 패스워드 변경:"",
+        ""FIELD_HEADER_CREATE_NEW_USERS""              : ""새로운 사용자 생성:"",
+        ""FIELD_HEADER_CREATE_NEW_USER_GROUPS""        : ""새로운 사용자 그룹 생성:"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTIONS""        : ""새로운 연결 생성"",
+        ""FIELD_HEADER_CREATE_NEW_CONNECTION_GROUPS""  : ""새로운 연결 그룹 생성:"",
+        ""FIELD_HEADER_CREATE_NEW_SHARING_PROFILES""   : ""새로운 공유 프로파일 생성"",
+        ""FIELD_HEADER_USERNAME""                      : ""사용자 이름:"",
+
+        ""HELP_NO_USER_GROUPS"" : ""이 사용자는 현재 어떤 그룹에도 속하지 않습니다. 그룹을 추가하려면이 섹션을 확장하십시오."",
+
+        ""INFO_READ_ONLY""                : ""죄송합니다.이 사용자 계정은 수정할 수 없습니다."",
+        ""INFO_NO_USER_GROUPS_AVAILABLE"" : ""사용 가능한 그룹이 없습니다."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""     : ""모든 연결"",
+        ""SECTION_HEADER_CONNECTIONS""         : ""연결"",
+        ""SECTION_HEADER_CURRENT_CONNECTIONS"" : ""현재 연결"",
+        ""SECTION_HEADER_EDIT_USER""           : ""사용자 편집"",
+        ""SECTION_HEADER_PERMISSIONS""         : ""권한"",
+        ""SECTION_HEADER_USER_GROUPS""         : ""그룹"",
+
+        ""TEXT_CONFIRM_DELETE"" : ""사용자를 삭제한 후에는 복원 할 수 없습니다. 이 사용자를 삭제 하시겠습니까?""
+
+    },
+
+    ""MANAGE_USER_GROUP"" : {
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""그룹 삭제"",
+
+        ""FIELD_HEADER_USER_GROUP_NAME""               : ""그룹 이름:"",
+
+
+        ""HELP_NO_USER_GROUPS""        : ""이 그룹은 현재 어떤 그룹에도 소속되지 않았습니다. 이 섹션을 확장하여 그룹을 추가하십시오."",
+        ""HELP_NO_MEMBER_USER_GROUPS"" : ""이 그룹은 현재 어떤 그룹도 포함하고 있지 않습니다. 이 섹션을 확장하여 그룹을 추가하십시오."",
+        ""HELP_NO_MEMBER_USERS""       : ""이 그룹은 어떤 사용자도 포함 하고 있지 않습니다. 이 섹션을 확장하여 사용자를 추가하십시오. "",
+
+        ""INFO_READ_ONLY""                : ""이 그룹은 편집할 수 없습니다."",
+        ""INFO_NO_USERS_AVAILABLE""       : ""사용가능한 사용자가 없습니다."",
+
+        ""SECTION_HEADER_EDIT_USER_GROUP""     : ""그룹 편집"",
+        ""SECTION_HEADER_MEMBER_USERS""        : ""맴버 사용자"",
+        ""SECTION_HEADER_MEMBER_USER_GROUPS""  : ""맴버 그룹"",
+        ""SECTION_HEADER_USER_GROUPS""         : ""상위 그룹"",
+
+        ""TEXT_CONFIRM_DELETE"" : ""그룹을 삭제한 후에는 복원 할 수 없습니다. 이 그룹을 삭제 하시겠습니까?""
+
+    },
+
+    ""PROTOCOL_KUBERNETES"" : {
+
+        ""FIELD_HEADER_BACKSPACE""       : ""Backspace 키 전송:"",
+        ""FIELD_HEADER_CA_CERT""         : ""인증 기관 인증서:"",
+        ""FIELD_HEADER_CLIENT_CERT""     : ""클라이언트 인증서:"",
+        ""FIELD_HEADER_CLIENT_KEY""      : ""클라이언트 키:"",
+        ""FIELD_HEADER_COLOR_SCHEME""    : ""색상 구성표:"",
+        ""FIELD_HEADER_CONTAINER""       : ""컨테이너 이름 :"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH""  : ""자동으로 레코드 경로 생성 :"",
+        ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""자동으로 typescript 경로 생성 :"",
+        ""FIELD_HEADER_EXEC_COMMAND""    : ""명령어 (exec):"",
+        ""FIELD_HEADER_FONT_NAME""       : ""글꼴 이름 :"",
+        ""FIELD_HEADER_FONT_SIZE""       : ""글꼴 크기 :"",
+        ""FIELD_HEADER_HOSTNAME""        : ""호스트 이름 :"",
+        ""FIELD_HEADER_IGNORE_CERT""     : ""서버 인증서 무시 :"",
+        ""FIELD_HEADER_NAMESPACE""       : ""네임 스페이스 :"",
+        ""FIELD_HEADER_POD""             : ""파드 (Pod) 이름:"",
+        ""FIELD_HEADER_PORT""            : ""포트:"",
+        ""FIELD_HEADER_READ_ONLY""       : ""읽기 전용:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""마우스 제외:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""그래픽/스트림 제외:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""키 이벤트 포함:"",
+        ""FIELD_HEADER_RECORDING_NAME""  : ""레코드 이름:"",
+        ""FIELD_HEADER_RECORDING_PATH""  : ""레코드 경로:"",
+        ""FIELD_HEADER_SCROLLBACK""      : ""스크롤 백 (scrollback) 최대 크기:"",
+        ""FIELD_HEADER_TYPESCRIPT_NAME"" : ""Typescript 이름:"",
+        ""FIELD_HEADER_TYPESCRIPT_PATH"" : ""Typescript 경로:"",
+        ""FIELD_HEADER_USE_SSL""         : ""SSL/TLS 사용"",
+
+        ""FIELD_OPTION_BACKSPACE_8""     : ""Backspace (Ctrl-H)"",
+        ""FIELD_OPTION_BACKSPACE_127""   : ""Delete (Ctrl-?)"",
+
+        ""FIELD_OPTION_COLOR_SCHEME_BLACK_WHITE"" : ""흰색 바탕에 검정색"",
+        ""FIELD_OPTION_COLOR_SCHEME_GRAY_BLACK""  : ""검은색 바탕에 회색"",
+        ""FIELD_OPTION_COLOR_SCHEME_GREEN_BLACK"" : ""검은색 바탕에 녹색"",
+        ""FIELD_OPTION_COLOR_SCHEME_WHITE_BLACK"" : ""검은색 바탕에 흰색"",
+
+        ""FIELD_OPTION_FONT_SIZE_8""     : ""8"",
+        ""FIELD_OPTION_FONT_SIZE_9""     : ""9"",
+        ""FIELD_OPTION_FONT_SIZE_10""    : ""10"",
+        ""FIELD_OPTION_FONT_SIZE_11""    : ""11"",
+        ""FIELD_OPTION_FONT_SIZE_12""    : ""12"",
+        ""FIELD_OPTION_FONT_SIZE_14""    : ""14"",
+        ""FIELD_OPTION_FONT_SIZE_18""    : ""18"",
+        ""FIELD_OPTION_FONT_SIZE_24""    : ""24"",
+        ""FIELD_OPTION_FONT_SIZE_30""    : ""30"",
+        ""FIELD_OPTION_FONT_SIZE_36""    : ""36"",
+        ""FIELD_OPTION_FONT_SIZE_48""    : ""48"",
+        ""FIELD_OPTION_FONT_SIZE_60""    : ""60"",
+        ""FIELD_OPTION_FONT_SIZE_72""    : ""72"",
+        ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
+
+        ""NAME"" : ""Kubernetes"",
+        ""SECTION_HEADER_AUTHENTICATION"" : ""인증"",
+        ""SECTION_HEADER_BEHAVIOR""       : ""터미널 동작"",
+        ""SECTION_HEADER_CONTAINER""      : ""컨테이너"",
+        ""SECTION_HEADER_DISPLAY""        : ""디스플레이"",
+        ""SECTION_HEADER_RECORDING""      : ""스크린 레코드"",
+        ""SECTION_HEADER_TYPESCRIPT""     : ""Typescript (텍스트 세션 레코드)"",
+        ""SECTION_HEADER_NETWORK""        : ""네트워크""
+
+    },
+
+    ""PROTOCOL_RDP"" : {
+
+        ""FIELD_HEADER_CLIENT_NAME""     : ""클라이언트 이름:"",
+        ""FIELD_HEADER_COLOR_DEPTH""     : ""색심도:"",
+        ""FIELD_HEADER_CONSOLE""         : ""관리자 콘솔:"",
+        ""FIELD_HEADER_CONSOLE_AUDIO""   : ""콘솔 내 오디오 지원:"",
+        ""FIELD_HEADER_CREATE_DRIVE_PATH"" : ""드라이브 자동 생성:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""레코드 경로 자동 생성:"",
+        ""FIELD_HEADER_DISABLE_AUDIO""   : ""오디오 비활성화:"",
+        ""FIELD_HEADER_DISABLE_AUTH""    : ""인증 비활성화:"",
+        ""FIELD_HEADER_DISABLE_COPY""    : ""원격 데스크톱으로 부터의 복사 비활성화:"",
+        ""FIELD_HEADER_DISABLE_DOWNLOAD"" : ""파일 다운로드 비활성화:"",
+        ""FIELD_HEADER_DISABLE_PASTE""   : ""클라이언트로 부터의 붙여넣기 비활성화:"",
+        ""FIELD_HEADER_DISABLE_UPLOAD""   : ""파일 업로드 비활성화:"",
+        ""FIELD_HEADER_DOMAIN""          : ""도메인:"",
+        ""FIELD_HEADER_DPI""             : ""해상도 (DPI):"",
+        ""FIELD_HEADER_DRIVE_NAME""       : ""드라이브 이름:"",
+        ""FIELD_HEADER_DRIVE_PATH""       : ""드라이브 주소:"",
+        ""FIELD_HEADER_ENABLE_AUDIO_INPUT""         : ""오디오 입력 활성화 (마이크):"",
+        ""FIELD_HEADER_ENABLE_DESKTOP_COMPOSITION"" : ""바탕화면 구성 활성화 (Aero):"",
+        ""FIELD_HEADER_ENABLE_DRIVE""               : ""드라이브 활성화:"",
+        ""FIELD_HEADER_ENABLE_FONT_SMOOTHING""      : ""글꼴 다듬기 활성화 (ClearType):"",
+        ""FIELD_HEADER_ENABLE_FULL_WINDOW_DRAG""    : ""전체 창 끌기 활성화:"",
+        ""FIELD_HEADER_ENABLE_MENU_ANIMATIONS""     : ""메뉴 에니메이션 활성화:"",
+        ""FIELD_HEADER_DISABLE_BITMAP_CACHING""     : ""비트맵 캐싱 비활성화:"",
+        ""FIELD_HEADER_DISABLE_OFFSCREEN_CACHING""  : ""화면 밖 캐싱 비활성화:"",
+        ""FIELD_HEADER_DISABLE_GLYPH_CACHING""      : ""문자 모양 캐싱 비활성화:"",
+        ""FIELD_HEADER_ENABLE_PRINTING""            : ""프린팅 활성화:"",
+        ""FIELD_HEADER_ENABLE_SFTP""     : ""SFTP 활성화:"",
+        ""FIELD_HEADER_ENABLE_THEMING""             : ""테마 활성화:"",
+        ""FIELD_HEADER_ENABLE_TOUCH""               : ""멀티 터치 활성화:"",
+        ""FIELD_HEADER_ENABLE_WALLPAPER""           : ""바탕화면 활성화:"",
+        ""FIELD_HEADER_FORCE_LOSSLESS""             : ""무손실 압축 강제:"",
+        ""FIELD_HEADER_GATEWAY_DOMAIN""   : ""도메인:"",
+        ""FIELD_HEADER_GATEWAY_HOSTNAME"" : ""호스트 이름:"",
+        ""FIELD_HEADER_GATEWAY_PASSWORD"" : ""패스워드:"",
+        ""FIELD_HEADER_GATEWAY_PORT""     : ""포트:"",
+        ""FIELD_HEADER_GATEWAY_USERNAME"" : ""사용자 이름:"",
+        ""FIELD_HEADER_HEIGHT""          : ""높이:"",
+        ""FIELD_HEADER_HOSTNAME""        : ""호스트 이름:"",
+        ""FIELD_HEADER_IGNORE_CERT""     : ""서버 인증서 무시:"",
+        ""FIELD_HEADER_INITIAL_PROGRAM"" : ""시작 프로그램:"",
+        ""FIELD_HEADER_LOAD_BALANCE_INFO"" : ""부하분산 정보/쿠키:"",
+        ""FIELD_HEADER_PASSWORD""        : ""패스워드:"",
+        ""FIELD_HEADER_PORT""            : ""포트:"",
+        ""FIELD_HEADER_PRINTER_NAME""    : ""리디렉션 프린터 문서:"",
+        ""FIELD_HEADER_PRECONNECTION_BLOB"" : ""Preconnection BLOB (VM ID):"",
+        ""FIELD_HEADER_PRECONNECTION_ID""   : ""RDP 소스 ID:"",
+        ""FIELD_HEADER_READ_ONLY""      : ""읽기 전용:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""마우스 제외:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""그래픽/스트림 제외:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""키 이벤트 포함:"",
+        ""FIELD_HEADER_RECORDING_NAME"" : ""레코드 이름:"",
+        ""FIELD_HEADER_RECORDING_PATH"" : ""레코드 경로:"",
+        ""FIELD_HEADER_RESIZE_METHOD"" : ""Resize 메서드:"",
+        ""FIELD_HEADER_REMOTE_APP_ARGS"" : ""매개 변수:"",
+        ""FIELD_HEADER_REMOTE_APP_DIR""  : ""작업 디렉터리:"",
+        ""FIELD_HEADER_REMOTE_APP""      : ""프로그램:"",
+        ""FIELD_HEADER_SECURITY""        : ""안전 모드:"",
+        ""FIELD_HEADER_SERVER_LAYOUT""   : ""자판 배열:"",
+        ""FIELD_HEADER_SFTP_DIRECTORY""             : ""기본 업로드 디렉토리:"",
+        ""FIELD_HEADER_SFTP_DISABLE_DOWNLOAD""      : ""파일 다운로드 비활성화:"",
+        ""FIELD_HEADER_SFTP_HOST_KEY""              : ""호스트 공개 키 (Base64):"",
+        ""FIELD_HEADER_SFTP_HOSTNAME""              : ""호스트 이름:"",
+        ""FIELD_HEADER_SFTP_SERVER_ALIVE_INTERVAL"" : ""SFTP keepalive 간격:"",
+        ""FIELD_HEADER_SFTP_PASSPHRASE""            : ""암호 (Passphrase):"",
+        ""FIELD_HEADER_SFTP_PASSWORD""              : ""암호 (Password):"",
+        ""FIELD_HEADER_SFTP_PORT""                  : ""포트:"",
+        ""FIELD_HEADER_SFTP_PRIVATE_KEY""           : ""개인 키:"",
+        ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""        : ""루트 디렉토리 파일 브라우저:"",
+        ""FIELD_HEADER_SFTP_DISABLE_UPLOAD""        : ""파일 업로드 비활성화:"",
+        ""FIELD_HEADER_SFTP_USERNAME""              : ""사용자 이름:"",
+        ""FIELD_HEADER_STATIC_CHANNELS"" : ""스태틱 채널 이름:"",
+        ""FIELD_HEADER_TIMEZONE""        : ""시간대:"",
+        ""FIELD_HEADER_USERNAME""        : ""사용자 이름:"",
+        ""FIELD_HEADER_WIDTH""           : ""너비:"",
+        ""FIELD_HEADER_WOL_BROADCAST_ADDR"" : ""WoL 패킷의 브로드케스트 주소:"",
+        ""FIELD_HEADER_WOL_MAC_ADDR""       : ""원격 호스트 MAC 어드레스"",
+        ""FIELD_HEADER_WOL_SEND_PACKET""    : ""WoL 패킷 전송:"",
+        ""FIELD_HEADER_WOL_WAIT_TIME""      : ""호스트 부트 대기 시간:"",
+
+
+        ""FIELD_OPTION_COLOR_DEPTH_16""    : ""로우 컬러 (16-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_24""    : ""트루 컬러 (24-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_32""    : ""트루 컬러 (32-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_8""     : ""256 color"",
+
+        ""FIELD_OPTION_RESIZE_METHOD_DISPLAY_UPDATE"" : ""\""디스플레이 업데이트\"" 가상 채널 (RDP 8.1+)"",
+        ""FIELD_OPTION_RESIZE_METHOD_RECONNECT""      : ""다시 연결"",
+
+        ""FIELD_OPTION_SECURITY_ANY""   : ""Any"",
+        ""FIELD_OPTION_SECURITY_NLA""   : ""NLA (네트워크 수준 인증)"",
+        ""FIELD_OPTION_SECURITY_RDP""   : ""RDP 암호화"",
+        ""FIELD_OPTION_SECURITY_TLS""   : ""TLS 암호화"",
+        ""FIELD_OPTION_SECURITY_VMCONNECT"" : ""Hyper-V / VMConnect"",
+
+        ""FIELD_OPTION_SERVER_LAYOUT_DE_CH_QWERTZ"" : ""Swiss German (Qwertz)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_DE_DE_QWERTZ"" : ""German (Qwertz)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_EN_GB_QWERTY"" : ""UK English (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_EN_US_QWERTY"" : ""US English (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_ES_ES_QWERTY"" : ""Spanish (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_ES_LATAM_QWERTY"" : ""Latin American (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_FAILSAFE""     : ""Unicode"",
+        ""FIELD_OPTION_SERVER_LAYOUT_FR_BE_AZERTY"" : ""Belgian French (Azerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_FR_CH_QWERTZ"" : ""Swiss French (Qwertz)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_FR_FR_AZERTY"" : ""French (Azerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_HU_HU_QWERTZ"" : ""Hungarian (Qwertz)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_IT_IT_QWERTY"" : ""Italian (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_JA_JP_QWERTY"" : ""Japanese (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_PT_BR_QWERTY"" : ""Portuguese Brazilian (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_SV_SE_QWERTY"" : ""Swedish (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_DA_DK_QWERTY"" : ""Danish (Qwerty)"",
+        ""FIELD_OPTION_SERVER_LAYOUT_TR_TR_QWERTY"" : ""Turkish-Q (Qwerty)"",
+
+        ""NAME"" : ""RDP"",
+
+        ""SECTION_HEADER_AUTHENTICATION""     : ""인증"",
+        ""SECTION_HEADER_BASIC_PARAMETERS""   : ""기본 설정"",
+        ""SECTION_HEADER_CLIPBOARD""          : ""클립보드"",
+        ""SECTION_HEADER_DEVICE_REDIRECTION"" : ""디바이스 리디렉션"",
+        ""SECTION_HEADER_DISPLAY""            : ""디스플레이"",
+        ""SECTION_HEADER_GATEWAY""            : ""원격 데스크톱 게이트웨이"",
+        ""SECTION_HEADER_LOAD_BALANCING""     : ""부하 분산 (Load Balancing)"",
+        ""SECTION_HEADER_NETWORK""            : ""네트워크"",
+        ""SECTION_HEADER_PERFORMANCE""        : ""성능"",
+        ""SECTION_HEADER_PRECONNECTION_PDU""  : ""Preconnection PDU / Hyper-V"",
+        ""SECTION_HEADER_RECORDING""          : ""스크린 레코드"",
+        ""SECTION_HEADER_REMOTEAPP""          : ""리모트 앱"",
+        ""SECTION_HEADER_SFTP""               : ""SFTP"",
+        ""SECTION_HEADER_WOL""                : ""Wake-on-LAN (WoL)""
+
+    },
+
+    ""PROTOCOL_SSH"" : {
+
+        ""FIELD_HEADER_BACKSPACE""    : ""<Backspace> 키가 보내는 문자:"",
+        ""FIELD_HEADER_COLOR_SCHEME"" : ""색상 구성표:"",
+        ""FIELD_HEADER_COMMAND""      : ""명령 실행:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""레코드 경로 자동 생성:"",
+        ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""Typescript 경로 자동 생성:"",
+        ""FIELD_HEADER_DISABLE_COPY""  : ""터미널에서 복사 비활성화:"",
+        ""FIELD_HEADER_DISABLE_PASTE"" : ""클라이언트에서 붙여넣기 비활성화:"",
+        ""FIELD_HEADER_FONT_NAME""     : ""글꼴 이름:"",
+        ""FIELD_HEADER_FONT_SIZE""     : ""글꼴 크기:"",
+        ""FIELD_HEADER_ENABLE_SFTP""   : ""SFTP 활성화:"",
+        ""FIELD_HEADER_HOST_KEY""      : ""공개 호스트 키 (Base64):"",
+        ""FIELD_HEADER_HOSTNAME""      : ""호스트 이름:"",
+        ""FIELD_HEADER_LOCALE""        : ""언어/지역 ($LANG):"",
+        ""FIELD_HEADER_USERNAME""      : ""사용자 이름:"",
+        ""FIELD_HEADER_PASSWORD""      : ""암호 (Password):"",
+        ""FIELD_HEADER_PASSPHRASE""    : ""암호 (Passphrase):"",
+        ""FIELD_HEADER_PORT""          : ""포트:"",
+        ""FIELD_HEADER_PRIVATE_KEY""   : ""개인 키 (Private Key):"",
+        ""FIELD_HEADER_SCROLLBACK""    : ""최대 스크롤 백 사이즈:"",
+        ""FIELD_HEADER_READ_ONLY""     : ""읽기 전용:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""마우스 제외:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""그래픽/스트림 제외:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""키 이벤트 포함:"",
+        ""FIELD_HEADER_RECORDING_NAME"" : ""레코드 이름:"",
+        ""FIELD_HEADER_RECORDING_PATH"" : ""레코드 경로:"",
+        ""FIELD_HEADER_SERVER_ALIVE_INTERVAL"" : ""서버 keepalive 간격:"",
+        ""FIELD_HEADER_SFTP_DISABLE_DOWNLOAD"" : ""파일 다운로드 비활성화:"",
+        ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""   : ""루트 디렉토리 파일 브라우저:"",
+        ""FIELD_HEADER_SFTP_DISABLE_UPLOAD""   : ""파일 업로드 비활성화:"",
+        ""FIELD_HEADER_TERMINAL_TYPE""   : ""터미널 타입:"",
+        ""FIELD_HEADER_TIMEZONE""        : ""시간대 ($TZ):"",
+        ""FIELD_HEADER_TYPESCRIPT_NAME"" : ""Typescript 이름:"",
+        ""FIELD_HEADER_TYPESCRIPT_PATH"" : ""Typescript 경로:"",
+        ""FIELD_HEADER_WOL_BROADCAST_ADDR"" : ""WoL 패킷의 브로드케스트 주소:"",
+        ""FIELD_HEADER_WOL_MAC_ADDR""       : ""원격 호스트 MAC 어드레스:"",
+        ""FIELD_HEADER_WOL_SEND_PACKET""    : ""WoL 패킷 전송:"",
+        ""FIELD_HEADER_WOL_WAIT_TIME""      : ""호스트 부트 대기 시간:"",
+
+        ""FIELD_OPTION_BACKSPACE_8""     : ""Backspace (Ctrl-H)"",
+        ""FIELD_OPTION_BACKSPACE_127""   : ""Delete (Ctrl-?)"",
+
+        ""FIELD_OPTION_COLOR_SCHEME_BLACK_WHITE"" : ""흰색 바탕에 검정색"",
+        ""FIELD_OPTION_COLOR_SCHEME_GRAY_BLACK""  : ""검은색 바탕에 회색"",
+        ""FIELD_OPTION_COLOR_SCHEME_GREEN_BLACK"" : ""검은색 바탕에 녹색"",
+        ""FIELD_OPTION_COLOR_SCHEME_WHITE_BLACK"" : ""검은색 바탕에 흰색"",
+
+        ""FIELD_OPTION_FONT_SIZE_8""     : ""8"",
+        ""FIELD_OPTION_FONT_SIZE_9""     : ""9"",
+        ""FIELD_OPTION_FONT_SIZE_10""    : ""10"",
+        ""FIELD_OPTION_FONT_SIZE_11""    : ""11"",
+        ""FIELD_OPTION_FONT_SIZE_12""    : ""12"",
+        ""FIELD_OPTION_FONT_SIZE_14""    : ""14"",
+        ""FIELD_OPTION_FONT_SIZE_18""    : ""18"",
+        ""FIELD_OPTION_FONT_SIZE_24""    : ""24"",
+        ""FIELD_OPTION_FONT_SIZE_30""    : ""30"",
+        ""FIELD_OPTION_FONT_SIZE_36""    : ""36"",
+        ""FIELD_OPTION_FONT_SIZE_48""    : ""48"",
+        ""FIELD_OPTION_FONT_SIZE_60""    : ""60"",
+        ""FIELD_OPTION_FONT_SIZE_72""    : ""72"",
+        ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
+
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+
+        ""NAME"" : ""SSH"",
+
+        ""SECTION_HEADER_AUTHENTICATION"" : ""인증"",
+        ""SECTION_HEADER_BEHAVIOR""       : ""터미널 동작"",
+        ""SECTION_HEADER_CLIPBOARD""      : ""클립보드"",
+        ""SECTION_HEADER_DISPLAY""        : ""디스플레이"",
+        ""SECTION_HEADER_NETWORK""        : ""네트워크"",
+        ""SECTION_HEADER_RECORDING""      : ""스크린 레코드"",
+        ""SECTION_HEADER_SESSION""        : ""세션 / 환경"",
+        ""SECTION_HEADER_TYPESCRIPT""     : ""Typescript (텍스트 세션 레코드)"",
+        ""SECTION_HEADER_SFTP""           : ""SFTP"",
+        ""SECTION_HEADER_WOL""            : ""Wake-on-LAN (WoL)""
+
+    },
+
+    ""PROTOCOL_TELNET"" : {
+        ""FIELD_HEADER_BACKSPACE""      : ""Backspace 키 전송:"",
+        ""FIELD_HEADER_COLOR_SCHEME""   : ""색상 구성표:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""레코드 경로 자동 생성:"",
+        ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""Typescript 경로 자동 생성:"",
+        ""FIELD_HEADER_DISABLE_COPY""   : ""터미널에서 복사 비활성화:"",
+        ""FIELD_HEADER_DISABLE_PASTE""  : ""클라이언트에서 붙여넣기 비활성화:"",
+        ""FIELD_HEADER_FONT_NAME""      : ""글꼴 이름:"",
+        ""FIELD_HEADER_FONT_SIZE""      : ""글꼴 크기:"",
+        ""FIELD_HEADER_HOSTNAME""       : ""호스트 이름:"",
+        ""FIELD_HEADER_LOGIN_FAILURE_REGEX"" : ""로그인 실패 정규식:"",
+        ""FIELD_HEADER_LOGIN_SUCCESS_REGEX"" : ""로그인 성공 정규식:"",
+        ""FIELD_HEADER_USERNAME""       : ""사용자 이름:"",
+        ""FIELD_HEADER_USERNAME_REGEX"" : ""사용자 이름 정규식:"",
+        ""FIELD_HEADER_PASSWORD""       : ""패스워드:"",
+        ""FIELD_HEADER_PASSWORD_REGEX"" : ""패스워드 정규식:"",
+        ""FIELD_HEADER_PORT""           : ""포트:"",
+        ""FIELD_HEADER_READ_ONLY""      : ""읽기 전용:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""마우스 제외:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""그래픽/스트림 제외:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""키 이벤트 포함:"",
+        ""FIELD_HEADER_RECORDING_NAME"" : ""레코드 이름:"",
+        ""FIELD_HEADER_RECORDING_PATH"" : ""레코드 경로:"",
+        ""FIELD_HEADER_SCROLLBACK""     : ""스크롤 백 (scrollback) 최대 크기:"",
+        ""FIELD_HEADER_TERMINAL_TYPE""   : ""터미널 타입:"",
+        ""FIELD_HEADER_TYPESCRIPT_NAME"" : ""Typescript 이름:"",
+        ""FIELD_HEADER_TYPESCRIPT_PATH"" : ""Typescript 경로:"",
+        ""FIELD_HEADER_WOL_BROADCAST_ADDR"" : ""WoL 패킷의 브로드캐스트 주소:"",
+        ""FIELD_HEADER_WOL_MAC_ADDR""       : ""원격 호스트 MAC 주소:"",
+        ""FIELD_HEADER_WOL_SEND_PACKET""    : ""WoL 패킷 전송:"",
+        ""FIELD_HEADER_WOL_WAIT_TIME""      : ""호스트 부트 대기 시간:"",
+
+        ""FIELD_OPTION_BACKSPACE_8""     : ""Backspace (Ctrl-H)"",
+        ""FIELD_OPTION_BACKSPACE_127""   : ""Delete (Ctrl-?)"",
+
+        ""FIELD_OPTION_COLOR_SCHEME_BLACK_WHITE"" : ""흰색 바탕에 검정색"",
+        ""FIELD_OPTION_COLOR_SCHEME_GRAY_BLACK""  : ""검은색 바탕에 회색"",
+        ""FIELD_OPTION_COLOR_SCHEME_GREEN_BLACK"" : ""검은색 바탕에 녹색"",
+        ""FIELD_OPTION_COLOR_SCHEME_WHITE_BLACK"" : ""검은색 바탕에 흰색"",
+
+        ""FIELD_OPTION_FONT_SIZE_8""     : ""8"",
+        ""FIELD_OPTION_FONT_SIZE_9""     : ""9"",
+        ""FIELD_OPTION_FONT_SIZE_10""    : ""10"",
+        ""FIELD_OPTION_FONT_SIZE_11""    : ""11"",
+        ""FIELD_OPTION_FONT_SIZE_12""    : ""12"",
+        ""FIELD_OPTION_FONT_SIZE_14""    : ""14"",
+        ""FIELD_OPTION_FONT_SIZE_18""    : ""18"",
+        ""FIELD_OPTION_FONT_SIZE_24""    : ""24"",
+        ""FIELD_OPTION_FONT_SIZE_30""    : ""30"",
+        ""FIELD_OPTION_FONT_SIZE_36""    : ""36"",
+        ""FIELD_OPTION_FONT_SIZE_48""    : ""48"",
+        ""FIELD_OPTION_FONT_SIZE_60""    : ""60"",
+        ""FIELD_OPTION_FONT_SIZE_72""    : ""72"",
+        ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
+
+        ""FIELD_OPTION_TERMINAL_TYPE_ANSI""           : ""ansi"",
+        ""FIELD_OPTION_TERMINAL_TYPE_LINUX""          : ""linux"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT100""          : ""vt100"",
+        ""FIELD_OPTION_TERMINAL_TYPE_VT220""          : ""vt220"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM""          : ""xterm"",
+        ""FIELD_OPTION_TERMINAL_TYPE_XTERM_256COLOR"" : ""xterm-256color"",
+
+        ""NAME"" : ""Telnet"",
+
+        ""SECTION_HEADER_AUTHENTICATION"" : ""인증"",
+        ""SECTION_HEADER_BEHAVIOR""       : ""터미널 동작"",
+        ""SECTION_HEADER_CLIPBOARD""      : ""클립보드"",
+        ""SECTION_HEADER_DISPLAY""        : ""디스플레이"",
+        ""SECTION_HEADER_RECORDING""      : ""스크린 레코드"",
+        ""SECTION_HEADER_TYPESCRIPT""     : ""Typescript (텍스트 세션 레코드)"",
+        ""SECTION_HEADER_NETWORK""        : ""네트워크"",
+        ""SECTION_HEADER_WOL""            : ""Wake-on-LAN (WoL)""
+
+    },
+
+    ""PROTOCOL_VNC"" : {
+        ""FIELD_HEADER_AUDIO_SERVERNAME"" : ""오디오 서버 이름:"",
+        ""FIELD_HEADER_CLIPBOARD_ENCODING"" : ""인코딩:"",
+        ""FIELD_HEADER_COLOR_DEPTH""      : ""색심도:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""레코드 경로 자동 생성:"",
+        ""FIELD_HEADER_CURSOR""           : ""커서:"",
+        ""FIELD_HEADER_DEST_HOST""        : ""대상 호스트:"",
+        ""FIELD_HEADER_DEST_PORT""        : ""대상 포트:"",
+        ""FIELD_HEADER_DISABLE_COPY""     : ""데스크톱에서 복사 비활성화:"",
+        ""FIELD_HEADER_DISABLE_PASTE""    : ""클라이언트에서 붙여넣기 비활성화:"",
+        ""FIELD_HEADER_ENABLE_AUDIO""     : ""오디오 활성화:"",
+        ""FIELD_HEADER_ENABLE_SFTP""      : ""SFTP 활성화:"",
+        ""FIELD_HEADER_FORCE_LOSSLESS""   : ""무손실 압축 강제:"",
+        ""FIELD_HEADER_HOSTNAME""         : ""호스트 이름:"",
+        ""FIELD_HEADER_USERNAME""         : ""사용자 이름:"",
+        ""FIELD_HEADER_PASSWORD""         : ""패스워드:"",
+        ""FIELD_HEADER_PORT""             : ""포트:"",
+        ""FIELD_HEADER_READ_ONLY""        : ""읽기 전용:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_MOUSE""  : ""마우스 제외:"",
+        ""FIELD_HEADER_RECORDING_EXCLUDE_OUTPUT"" : ""그래픽/스트림 제외:"",
+        ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""키 이벤트 포함:"",
+        ""FIELD_HEADER_RECORDING_NAME"" : ""레코드 이름:"",
+        ""FIELD_HEADER_RECORDING_PATH"" : ""레코드 경로:"",
+        ""FIELD_HEADER_SFTP_DIRECTORY""             : ""기본 업로드 디렉터리:"",
+        ""FIELD_HEADER_SFTP_DISABLE_DOWNLOAD""      : ""파일 다운로드 비활성화:"",
+        ""FIELD_HEADER_SFTP_HOST_KEY""              : ""공개 호스트 키 (Base64):"",
+        ""FIELD_HEADER_SFTP_HOSTNAME""              : ""호스트 이름:"",
+        ""FIELD_HEADER_SFTP_SERVER_ALIVE_INTERVAL"" : ""SFTP 유지 간격:"",
+        ""FIELD_HEADER_SFTP_PASSPHRASE""            : ""암호 (Passphrase):"",
+        ""FIELD_HEADER_SFTP_PASSWORD""              : ""암호 (Password):"",
+        ""FIELD_HEADER_SFTP_PORT""                  : ""포트:"",
+        ""FIELD_HEADER_SFTP_PRIVATE_KEY""           : ""개인 키:"",
+        ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""        : ""파일 브라우저 루트 디렉터리:"",
+        ""FIELD_HEADER_SFTP_DISABLE_UPLOAD""        : ""파일 업로드 비활성화:"",
+        ""FIELD_HEADER_SFTP_USERNAME""              : ""사용자 이름:"",
+        ""FIELD_HEADER_SWAP_RED_BLUE""    : ""red/blue 컴포넌트 스왑:"",
+        ""FIELD_HEADER_WOL_BROADCAST_ADDR"" : ""WoL 패킷 브로드캐스트 주소:"",
+        ""FIELD_HEADER_WOL_MAC_ADDR""       : ""원격 호스트 MAC 주소:"",
+        ""FIELD_HEADER_WOL_SEND_PACKET""    : ""WoL 패킷 전송:"",
+        ""FIELD_HEADER_WOL_WAIT_TIME""      : ""호스트 부트 대기 시간:"",
+
+        ""FIELD_OPTION_COLOR_DEPTH_8""     : ""256 color"",
+        ""FIELD_OPTION_COLOR_DEPTH_16""    : ""로우 컬러 (16-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_24""    : ""트루 컬러 (24-bit)"",
+        ""FIELD_OPTION_COLOR_DEPTH_32""    : ""트루 컬러 (32-bit)"",
+
+        ""FIELD_OPTION_CURSOR_LOCAL""  : ""로컬"",
+        ""FIELD_OPTION_CURSOR_REMOTE"" : ""원격"",
+
+        ""FIELD_OPTION_CLIPBOARD_ENCODING_CP1252""    : ""CP1252"",
+        ""FIELD_OPTION_CLIPBOARD_ENCODING_ISO8859_1"" : ""ISO 8859-1"",
+        ""FIELD_OPTION_CLIPBOARD_ENCODING_UTF_8""     : ""UTF-8"",
+        ""FIELD_OPTION_CLIPBOARD_ENCODING_UTF_16""    : ""UTF-16"",
+
+        ""NAME"" : ""VNC"",
+
+        ""SECTION_HEADER_AUDIO""          : ""오디오"",
+        ""SECTION_HEADER_AUTHENTICATION"" : ""인증"",
+        ""SECTION_HEADER_CLIPBOARD""      : ""클립보드"",
+        ""SECTION_HEADER_DISPLAY""        : ""디스플레이"",
+        ""SECTION_HEADER_NETWORK""        : ""네트워크"",
+        ""SECTION_HEADER_RECORDING""      : ""스크린 레코드"",
+        ""SECTION_HEADER_REPEATER""       : ""VNC 리피터"",
+        ""SECTION_HEADER_SFTP""           : ""SFTP"",
+        ""SECTION_HEADER_WOL""            : ""Wake-on-LAN (WoL)""
+
+    },
+
+    ""SETTINGS"" : {
+
+        ""SECTION_HEADER_SETTINGS"" : ""설정""
+
+    },
+
+    ""SETTINGS_CONNECTION_HISTORY"" : {
+
+
+        ""FILENAME_HISTORY_CSV"" : ""history.csv"",
+
+        ""HELP_CONNECTION_HISTORY"" : ""과거 연결 기록은 여기에 나열되며 열 헤더 (column header)를 클릭하여 정렬할 수 있습니다. 특정 기록을 검색하려면, 필터 문자열을 입력하고 \""검색\""을 클릭하십시오. 제공된 필터 문자열과 일치하는 기록만 나열됩니다."",
+
+        ""INFO_CONNECTION_DURATION_UNKNOWN"" : ""--"",
+        ""INFO_NO_HISTORY""                  : ""일치하는 기록 없음"",
+
+        ""TABLE_HEADER_SESSION_CONNECTION_NAME"" : ""연결 이름"",
+        ""TABLE_HEADER_SESSION_DURATION""        : ""기간"",
+        ""TABLE_HEADER_SESSION_REMOTEHOST""      : ""원격 호스트"",
+        ""TABLE_HEADER_SESSION_STARTDATE""       : ""시작 시간"",
+        ""TABLE_HEADER_SESSION_USERNAME""        : ""사용자 이름"",","[{'comment': 'Extra comma needs to be removed.', 'commenter': 'necouchman'}]"
604,guacamole/src/main/webapp/translations/ko.json,"@@ -0,0 +1,843 @@
+{
+
+    ""NAME"" : ""Korean"",
+
+    ""APP"" : {
+
+        ""ACTION_ACKNOWLEDGE""        : ""확인"",
+        ""ACTION_CANCEL""             : ""취소"",
+        ""ACTION_CLONE""              : ""복제"",
+        ""ACTION_CONTINUE""           : ""계속"",
+        ""ACTION_DELETE""             : ""삭제"",
+        ""ACTION_DELETE_SESSIONS""    : ""세션 종료"",
+        ""ACTION_DOWNLOAD""           : ""다운로드"",
+        ""ACTION_LOGIN""              : ""로그인"",
+        ""ACTION_LOGOUT""             : ""로그아웃"",
+        ""ACTION_MANAGE_CONNECTIONS"" : ""연결"",
+        ""ACTION_MANAGE_PREFERENCES"" : ""기본 설정"",
+        ""ACTION_MANAGE_SETTINGS""    : ""세팅"",
+        ""ACTION_MANAGE_SESSIONS""    : ""활성화된 세션"",
+        ""ACTION_MANAGE_USERS""       : ""사용자"",
+        ""ACTION_MANAGE_USER_GROUPS"" : ""그룹"",
+        ""ACTION_NAVIGATE_BACK""      : ""뒤로가기"",
+        ""ACTION_NAVIGATE_HOME""      : ""홈"",
+        ""ACTION_SAVE""               : ""저장"",
+        ""ACTION_SEARCH""             : ""검색"",
+        ""ACTION_SHARE""              : ""공유"",
+        ""ACTION_UPDATE_PASSWORD""    : ""패스워드 업데이트"",
+        ""ACTION_VIEW_HISTORY""       : ""히스토리"",
+
+        ""DIALOG_HEADER_ERROR"" : ""에러"",
+
+        ""ERROR_PAGE_UNAVAILABLE""  : ""에러가 발생해 동작이 완료될 수 없습니다. 문제가 계속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_PASSWORD_BLANK""    : ""패스워드는 공백이 될 수 없습니다."",
+        ""ERROR_PASSWORD_MISMATCH"" : ""패스워드가 일치하지 않습니다."",
+
+        ""FIELD_HEADER_PASSWORD""       : ""패스워드:"",
+        ""FIELD_HEADER_PASSWORD_AGAIN"" : ""패스워드 재입력:"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""필터"",
+
+        ""FORMAT_DATE_TIME_PRECISE"" : ""yyyy-MM-dd HH:mm:ss"",
+
+        ""INFO_ACTIVE_USER_COUNT"" : ""현재 {USERS} 사용자에 의해 사용중입니다.}."",
+
+        ""TEXT_ANONYMOUS_USER""   : ""익명"",
+        ""TEXT_HISTORY_DURATION"" : ""{VALUE} {UNIT, select, second{초} minute{분} hour{시} day{일} other{}}"",
+        ""TEXT_UNTRANSLATED"" : ""{MESSAGE}""
+
+    },
+
+    ""CLIENT"" : {
+
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""지우기"",
+        ""ACTION_DISCONNECT""                : ""연결 해제"",
+        ""ACTION_RECONNECT""                 : ""다시 연결"",
+        ""ACTION_UPLOAD_FILES""              : ""파일 업로드"",
+
+        ""DIALOG_HEADER_CONNECTING""       : ""연결 중"",
+        ""DIALOG_HEADER_CONNECTION_ERROR"" : ""연결 오류"",
+        ""DIALOG_HEADER_DISCONNECTED""     : ""연결 끊김"",
+
+        ""ERROR_CLIENT_201""     : ""서버 사용량이 많아 연결이 종료되었습니다. 몇 분 후에 다시 시도하십시요."",
+        ""ERROR_CLIENT_202""     : ""원격 데스크톱이 응답하는데 너무 오래걸려서 Guacamole 서버가 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_CLIENT_203""     : ""원격 데스크톱 서버에 오류가 발생해서 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_CLIENT_207""     : ""원격 데스크톱 서버에 현재 연결할 수 없습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_208""     : ""원격 데스크톱 서버를 현재 사용 할 수 없습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_209""     : ""다른 연결과 충돌해서 원격 데스크톱 서버가 연결을 닫았습니다. 나중에 다시 시도하십시오."",
+        ""ERROR_CLIENT_20A""     : ""원격 데스크톱이 비활성화 상태로 보이기 때문에 서버 연결을 닫았습니다. 원치 않거나 예기치 않은 경우, 시스템 관리자에게 문의하거나 시스템 세팅을 확인하십시오."",
+        ""ERROR_CLIENT_20B""     : ""원격 데스크톱 서버가 강제로 연결을 끊었습니다. 원치 않거나 예기치 않은 경우, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_CLIENT_301""     : ""로그인이 실패했습니다. 다시 연결한 다음 다시 시도하십시오"",
+        ""ERROR_CLIENT_303""     : ""원격 데스크톱 서버가 이 연결에 대한 액세스를 거부했습니다. 액세스 권한이 필요하면, 시스템 관리자에게 계정 액세스 권한을 부여하도록 요청하거나 시스템 설정을 확인하십시오."",
+        ""ERROR_CLIENT_308""     : ""브라우저에서 연결이 끊긴 것처럼 보일 정도로 오랫동안 응답이 없었기 때문에 Guacamole 서버가 연결을 닫았습니다. 이는 보통 불안정한 무선 신호나 단지 네트워크의 느린 속도같은 네트워크 문제로 일어납니다. 네트워크 상태를 확인 후에 다시 시도 하십시오."", 
+        ""ERROR_CLIENT_31D""     : ""개별 사용자의 동시 연결 사용 제한을 초과했기 때문에 Guacamole 서버가 이 연결에 대한 액세스를 거부했습니다. 하나 이상의 연결을 닫고 다시 시도 하십시오."",
+        ""ERROR_CLIENT_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+        ""ERROR_TUNNEL_201""     : ""활성 연결이 너무 많기 때문에 Guacamole 서버에서 이 연결 시도를 거부했습니다. 잠시 후에 다시 시도하십시오"",
+        ""ERROR_TUNNEL_202""     : ""서버 응답시간이 너무 길어 연결을 닫았습니다. 이것은 보통 불안정한 무선 신호나, 네트워크의 느린 속도같은 네트워크의 문제입니다. 네트워크 연결을 확인해 주시거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_TUNNEL_203""     : ""서버에 오류가 발생해서 연결을 닫았습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_TUNNEL_204""     : ""요청한 연결이 존재하지 않습니다. 연결 이름을 확인하고 다시 시도하십시오"",
+        ""ERROR_TUNNEL_205""     : ""이 연결은 현재 사용 중이며 이 연결에 대한 동시 액세스가 허용되지 않습니다. 나중에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_207""     : ""Guacamole 서버에 현재 접근할 수 없습니다. 네트워크 상태를 확인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_208""     : ""Guacamole 서버가 연결을 허용하지 않습니다. 네트워크 상태를 확인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_301""     : ""로그인하지 않았기 때문에, 이 연결에 접근할 수 있는 권한이 없습니다. 로그인 후에 다시 시도하십시오."",
+        ""ERROR_TUNNEL_303""     : ""이 연결에 접근할 수 있는 권한이 없습니다. 접근 권한이 필요하다면, 허가 사용자 목록에 당신을 추가하도록 시스템 관리자에게 요청하거나 시스템 설정을 확인하십시오."",
+        ""ERROR_TUNNEL_308""     : ""브라우저에서 연결이 끊긴 것처럼 보일 정도로 오랫동안 응답이 없었기 때문에 Guacamole server가 연결을 닫았습니다. 이는 보통 불안정한 무선 신호나 단지 네트워크의 느린 속도같은 네트워크 문제로 일어납니다. 네트워크 상태를 확인 후에 다시 시도 하십시오"",
+        ""ERROR_TUNNEL_31D""     : ""개별 사용자의 동시 연결 사용 제한을 초과했기 때문에 Guacamole server가 이 연결에 대한 액세스를 거부하고 있습니다. 하나 이상의 연결을 닫고 다시 시도하십시오."",
+        ""ERROR_TUNNEL_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+        ""ERROR_UPLOAD_100""     : ""파일 전송이 지원되지 않거나 활성화되지 않았습니다. 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+        ""ERROR_UPLOAD_201""     : ""현재 너무 많은 파일이 전송되고 있습니다. 기존 전송이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_202""     : ""원격 데스크톱 서버가 응답하는 데 너무 오래 걸리기 때문에 파일을 전송할 수 없습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_UPLOAD_203""     : ""전송하는 동안 원격 데스크톱 서버에 오류가 발생했습니다. 다시 시도하거나 시스템 관리자에게 문의하십시오."",
+        ""ERROR_UPLOAD_204""     : ""파일 전송 대상이 없습니다. 대상이 있는지 확인하고 다시 시도하십시오."",
+        ""ERROR_UPLOAD_205""     : ""파일 전송 대상이 현재 잠겨 있습니다. 진행 중인 작업이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_301""     : ""로그인하지 않았기 때문에 이 파일을 업로드할 권한이 없습니다. 로그인 한 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_303""     : ""이 파일을 업로드 할 권한이 없습니다. 액세스가 필요한 경우 시스템 설정을 확인하거나 시스템 관리자에게 확인하십시오."",
+        ""ERROR_UPLOAD_308""     : ""파일 전송이 중단되었습니다. 이는 일반적으로 무선 신호가 불안정하거나 네트워크 속도가 매우 느린 것과 같은 네트워크 문제로 인해 발생합니다. 네트워크를 확인하고 다시 시도하십시오."",
+        ""ERROR_UPLOAD_31D""     : ""현재 너무 많은 파일이 전송되고 있습니다. 기존 전송이 완료될 때까지 기다린 후 다시 시도하십시오."",
+        ""ERROR_UPLOAD_DEFAULT"" : ""Guacamole 서버 내에서 내부 오류가 발생해서 연결이 종료되었습니다. 문제가 지속되면, 시스템 관리자에게 문의하거나 시스템 로그를 확인하십시오."",
+
+
+        ""HELP_CLIPBOARD""           : ""Guacamole에서 복사하거나 잘라낸 텍스트가 여기에 표시됩니다. 텍스트 변경 사항은 원격 클립보드에 직접 적용됩니다."",
+        ""HELP_INPUT_METHOD_NONE""   : ""사용중인 입력 방법이 없습니다. 키보드 입력은 연결된 물리적 키보드에서 받아들여집니다."",
+        ""HELP_INPUT_METHOD_OSK""    : ""내장된 Guacamole 화상 키보드의 입력을 표시하고 허용합니다. 화상 키보드는 다른 방법으로는 불가능할 수 있는 키 조합을 입력할 수 있습니다. (Ctrl-Alt-Del 등)"",
+        ""HELP_INPUT_METHOD_TEXT""   : ""텍스트 입력을 허용하고, 입력된 텍스트를 바탕으로 키보드 이벤트를 에뮬레이트 합니다. 이것은 물리적 키보드가 없는 휴대폰과 같은 장치에 필요합니다."",
+        ""HELP_MOUSE_MODE""          : ""터치와 관련하여 원격 마우스가 어떻게 동작하는지 결정합니다."",
+        ""HELP_MOUSE_MODE_ABSOLUTE"" : ""탭하여 클릭합니다. 클릭은 터치 위치에서 발생합니다."",
+        ""HELP_MOUSE_MODE_RELATIVE"" : ""드래그하여 마우스 포인터를 움직이고 탭하여 클릭합니다. 클릭은 마우스 포인터 위치에서 발생합니다."",
+        ""HELP_SHARE_LINK""          : ""현재 연결이 공유되고 있으며, 다음 링크를 가진 사람이라면 누구나 접근할 수 있습니다:"",
+        ""INFO_CONNECTION_SHARED"" : ""이 연결은 이제 공유됩니다."",
+        ""INFO_NO_FILE_TRANSFERS"" : ""파일 전송이 없습니다."",
+
+        ""NAME_INPUT_METHOD_NONE""   : ""없음"",
+        ""NAME_INPUT_METHOD_OSK""    : ""화상 키보드"",
+        ""NAME_INPUT_METHOD_TEXT""   : ""텍스트 입력"",
+        ""NAME_KEY_CTRL""            : ""Ctrl"",
+        ""NAME_KEY_ALT""             : ""Alt"",
+        ""NAME_KEY_ESC""             : ""Esc"",
+        ""NAME_KEY_TAB""             : ""Tab"",
+        ""NAME_MOUSE_MODE_ABSOLUTE"" : ""터치 스크린"",
+        ""NAME_MOUSE_MODE_RELATIVE"" : ""터치 패드"",
+
+        ""SECTION_HEADER_CLIPBOARD""      : ""클립보드"",
+        ""SECTION_HEADER_DEVICES""        : ""장치"",
+        ""SECTION_HEADER_DISPLAY""        : ""디스플레이"",
+        ""SECTION_HEADER_FILE_TRANSFERS"" : ""파일 전송"",
+        ""SECTION_HEADER_INPUT_METHOD""   : ""입력 방법"",
+        ""SECTION_HEADER_MOUSE_MODE""     : ""마우스 에뮬레이션 모드"",
+
+        ""TEXT_ZOOM_AUTO_FIT""              : ""브라우저 창에 자동으로 맞춤"",
+        ""TEXT_CLIENT_STATUS_IDLE""         : ""유휴 상태."",
+        ""TEXT_CLIENT_STATUS_CONNECTING""   : ""Guacamole에 연결 중..."",
+        ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""연결이 끊어졌습니다."",
+        ""TEXT_CLIENT_STATUS_UNSTABLE""     : ""Guacamole 서버에 대한 네트워크 연결이 불안정합니다."",
+        ""TEXT_CLIENT_STATUS_WAITING""      : ""Guacamole에 연결됐습니다. 응답을 기다리는 중..."",
+        ""TEXT_RECONNECT_COUNTDOWN""        : ""다시 연결하는 중 {REMAINING}초..."",
+        ""TEXT_FILE_TRANSFER_PROGRESS""     : ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}""
+    },
+
+    ""COLOR_SCHEME"" : {
+
+        ""ACTION_HIDE_DETAILS"" : ""숨기기"",
+        ""ACTION_SHOW_DETAILS"" : ""표시"",
+
+        ""FIELD_HEADER_BACKGROUND"" : ""배경색"",
+        ""FIELD_HEADER_FOREGROUND"" : ""전경색"",
+
+        ""FIELD_OPTION_CUSTOM"" : ""사용자 지정..."",
+
+        ""SECTION_HEADER_DETAILS"" : ""세부 정보:""
+
+    },
+
+    ""DATA_SOURCE_DEFAULT"" : {
+        ""NAME"" : ""기본 (XML)""
+    },
+
+    ""FORM"" : {
+
+        ""FIELD_PLACEHOLDER_DATE"" : ""YYYY-MM-DD"",
+        ""FIELD_PLACEHOLDER_TIME"" : ""HH:MM:SS"",
+
+        ""HELP_SHOW_PASSWORD"" : ""클릭하여 패스워드 표시"",
+        ""HELP_HIDE_PASSWORD"" : ""클릭하여 패스워드 숨기기""
+
+    },
+
+    ""HOME"" : {
+
+        ""INFO_NO_RECENT_CONNECTIONS"" : ""최근 연결이 없습니다."",
+
+        ""PASSWORD_CHANGED"" : ""패스워드가 변경되었습니다."",
+
+        ""SECTION_HEADER_ALL_CONNECTIONS""    : ""모든 연결"",
+        ""SECTION_HEADER_RECENT_CONNECTIONS"" : ""최근 연결""
+
+    },
+
+    ""LIST"" : {
+
+        ""TEXT_ANONYMOUS_USER"" : ""익명""
+
+    },
+
+    ""LOGIN"": {
+
+        ""ERROR_INVALID_LOGIN"" : ""잘못된 로그인"",
+
+        ""FIELD_HEADER_USERNAME"" : ""사용자 이름"",
+        ""FIELD_HEADER_PASSWORD"" : ""패스워드""
+
+    },
+
+    ""MANAGE_CONNECTION"" : {
+
+        ""DIALOG_HEADER_CONFIRM_DELETE"" : ""연결 삭제"",
+
+        ""FIELD_HEADER_LOCATION"" : ""위치:"",
+        ""FIELD_HEADER_NAME""     : ""이름:"",
+        ""FIELD_HEADER_PROTOCOL"" : ""프로토콜:"",
+
+        ""INFO_CONNECTION_DURATION_UNKNOWN"" : ""--"",
+        ""INFO_CONNECTION_ACTIVE_NOW""       : ""현재 활성화"",
+        ""INFO_CONNECTION_NOT_USED""         : ""이 연결은 아직 사용되지 않았습니다."",
+
+        ""SECTION_HEADER_EDIT_CONNECTION"" : ""연결 편집"",
+        ""SECTION_HEADER_HISTORY""         : ""사용 기록"",
+        ""SECTION_HEADER_PARAMETERS""      : ""매개변수"",
+        ""TABLE_HEADER_HISTORY_USERNAME""   : ""사용자 이름"",
+        ""TABLE_HEADER_HISTORY_START""      : ""시작 시간"",
+        ""TABLE_HEADER_HISTORY_DURATION""   : ""기간"",
+        ""TABLE_HEADER_HISTORY_REMOTEHOST"" : ""원격 호스트"",
+
+        ""TEXT_CONFIRM_DELETE""   : ""연결을 삭제한 후에는 복원할 수 없습니다. 이 연결을 삭제하겠습니까?"",","[{'comment': 'Extra comma needs to be removed.', 'commenter': 'necouchman'}]"
606,doc/licenses/apache-commons-codec-1.15/README,"@@ -0,0 +1,8 @@
+Apache Commons Codec (http://commons.apache.org/proper/commons-codec/)
+-----------------------------------------------------------------------
+
+    Version: 1.15
+    From: 'Apache Software Foundation' (http://www.apache.org)","[{'comment': 'How much do we care about using the HTTPS version of the Apache URL? I ask because the NOTICE file for this version was updated with that URL...', 'commenter': 'necouchman'}, {'comment': ""Sure - I can update this where it occurs real quick.\r\n\r\nThe URL within `NOTICE` was updated only because it's a verbatim copy of the `NOTICE` provided by the library, but `http://www.apache.org/` redirects to `https://www.apache.org/`. Makes sense to follow that intent."", 'commenter': 'mike-jumper'}]"
606,extensions/guacamole-auth-radius/pom.xml,"@@ -150,14 +146,15 @@
             <version>1.1.5</version>
             <exclusions>
 
-                <exclusion>
-                    <groupId>org.slf4j</groupId>
-                    <artifactId>slf4j-api</artifactId>
-                </exclusion>","[{'comment': ""I don't think you're going to be able to remove this - I think this causes the error I commented about with the conflict in SLF4J."", 'commenter': 'necouchman'}, {'comment': ""Ah, you're completely right. SLF4J is being pulled into the extension, causing an identity crisis with the version in the webapp."", 'commenter': 'mike-jumper'}]"
606,extensions/guacamole-auth-cas/pom.xml,"@@ -51,13 +51,7 @@
         <dependency>
             <groupId>org.jasig.cas.client</groupId>
             <artifactId>cas-client-core</artifactId>
-            <version>3.4.1</version>
-            <exclusions>
-                <exclusion>
-                    <groupId>org.slf4j</groupId>
-                    <artifactId>slf4j-api</artifactId>
-                </exclusion>
-            </exclusions>","[{'comment': 'Seeing similar issues in the CAS module with errors related to slf4j.', 'commenter': 'necouchman'}]"
611,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -59,17 +68,87 @@
      */
     private GuacamoleProtocolVersion protocolVersion =
             GuacamoleProtocolVersion.VERSION_1_0_0;
-    
+
+    /**
+     * Parses the given ""error"" instruction, throwing a GuacamoleException that
+     * corresponds to its status code and message.
+     *
+     * @param instruction
+     *     The ""error"" instruction to parse.
+     *
+     * @throws GuacamoleException
+     *     A GuacamoleException that corresponds to the status code and message
+     *     present within the given ""error"" instruction.
+     */
+    private static void handleReceivedError(GuacamoleInstruction instruction)
+            throws GuacamoleException {
+
+        GuacamoleStatus status;
+
+        // Consider all error instructions without a corresponding status code
+        // to be server errors
+        List<String> args = instruction.getArgs();
+        if (args.size() < 2) {
+            logger.debug(""Received \""error\"" instruction without status code."");
+            status = GuacamoleStatus.SERVER_ERROR;
+        }
+
+        else {
+
+            // Parse the status code from the received error instruction
+            int statusCode;
+            try {
+                statusCode = Integer.parseInt(args.get(1));
+            }
+            catch (NumberFormatException e) {
+                logger.debug(""Received \""error\"" instruction with non-numeric status code."", e);
+                return;","[{'comment': 'Are you sure ignoring the instruction is the right thing to do here? This arguably represents a completely corrupt connection that should be aborted outright. Just my opinion, of course...', 'commenter': 'holograph'}, {'comment': ""Good catch! That's copy-pasta. That `return` definitely should not be there."", 'commenter': 'mike-jumper'}, {'comment': 'Corrected via refactor and rebase.', 'commenter': 'mike-jumper'}]"
611,guacamole-common/src/main/java/org/apache/guacamole/protocol/ConfiguredGuacamoleSocket.java,"@@ -59,17 +68,83 @@
      */
     private GuacamoleProtocolVersion protocolVersion =
             GuacamoleProtocolVersion.VERSION_1_0_0;
-    
+
+    /**
+     * Parses the given ""error"" instruction, throwing a GuacamoleException that
+     * corresponds to its status code and message.
+     *
+     * @param instruction
+     *     The ""error"" instruction to parse.
+     *
+     * @throws GuacamoleException
+     *     A GuacamoleException that corresponds to the status code and message
+     *     present within the given ""error"" instruction.
+     */
+    private static void handleReceivedError(GuacamoleInstruction instruction)
+            throws GuacamoleException {
+
+        // Provide reasonable default error message for invalid ""error""
+        // instructions that fail to provide one
+        String message = ""Internal error within guacd / protocol handling."";
+
+        // Consider all error instructions without a corresponding status code
+        // to be server errors
+        GuacamoleStatus status = GuacamoleStatus.SERVER_ERROR;
+
+        // Parse human-readable message from ""error"" instruction, warning if no
+        // message was given
+        List<String> args = instruction.getArgs();
+        if (args.size() >= 1)
+            message = args.get(0);
+        else
+            logger.debug(""Received \""error\"" instruction no corresponding message."");","[{'comment': 'instruction _with_ no corresponding message?', 'commenter': 'necouchman'}, {'comment': ""Whoops. I've updated the message to be less caveman and rebased."", 'commenter': 'mike-jumper'}]"
613,guacamole-common-js/src/main/webapp/modules/Mouse.js,"@@ -503,16 +425,355 @@ Guacamole.Mouse.State = function State(template) {
 
 };
 
+/**
+ * All mouse buttons that may be represented by a
+ * {@link Guacamole.Mouse.State}. 
+ *
+ * @readonly
+ * @enum
+ */
+Guacamole.Mouse.State.Buttons = {
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * left mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    LEFT : 'left',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * middle mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    MIDDLE : 'middle',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * right mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    RIGHT : 'right',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * up mouse button (the fourth mouse button, clicked when the mouse scroll
+     * wheel is scrolled up).
+     *
+     * @constant
+     * @type {String}
+     */
+    UP : 'up',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * down mouse button (the fifth mouse button, clicked when the mouse scroll
+     * wheel is scrolled up).
+     *
+     * @constant
+     * @type {String}
+     */
+    DOWN : 'down'
+
+};
+
+/**
+ * Base event type for all mouse events. The mouse producing the event may be
+ * the user's local mouse (as with {@link Guacamole.Mouse}) or an emulated
+ * mouse (as with {@link Guacamole.Mouse.Touchpad}).
+ *
+ * @constructor
+ * @augments Guacamole.Event.DOMEvent
+ * @param {String} type
+ *     The type name of the event (""mousedown"", ""mouseup"", etc.)
+ *
+ * @param {Guacamole.Mouse.State} state
+ *     The current mouse state.
+ *     
+ * @param {Event|Event[]} [events=[]]
+ *     The DOM events that are related to this event, if any.
+ */
+Guacamole.Mouse.Event = function MouseEvent(type, state, events) {
+
+    Guacamole.Event.DOMEvent.call(this, type, events);
+
+    /**
+     * The name of the event handler used by the Guacamole JavaScript API for
+     * this event prior to the migration to Guacamole.Event.Target.
+     *
+     * @private
+     * @constant
+     * @type {String}
+     */
+    var legacyHandlerName = 'on' + this.type;
+
+    /**
+     * The current mouse state at the time this event was fired.
+     *
+     * @type {Guacamole.Mouse.State}
+     */
+    this.state = state;
+
+    /**
+     * @inheritdoc
+     */
+    this.invokeLegacyHandler = function invokeLegacyHandler(target) {
+        if (target[legacyHandlerName]) {
+
+            this.preventDefault();
+            this.stopPropagation();
+
+            target[legacyHandlerName](this.state);
+
+        }
+    };
+
+};
+
+/**
+ * An object which can dispatch {@link Guacamole.Mouse.Event} objects
+ * representing mouse events. These mouse events may be produced from an actual
+ * mouse device (as with {@link Guacamole.Mouse}), from an emulated mouse
+ * device (as with {@link Guacamole.Mouse.Touchpad}, or may be programmatically
+ * generated (using functions like [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+ * [press()]{@link Guacamole.Mouse.Event.Target#press}, and
+ * [release()]{@link Guacamole.Mouse.Event.Target#release}).
+ * 
+ * @constructor
+ * @augments Guacamole.Event.Target
+ */
+Guacamole.Mouse.Event.Target = function MouseEventTarget() {
+
+    Guacamole.Event.Target.call(this);
+
+    /**
+     * The current mouse state. The properties of this state are updated when
+     * mouse events fire. This state object is also passed in as a parameter to
+     * the handler of any mouse events.
+     *
+     * @type {Guacamole.Mouse.State}
+     */
+    this.currentState = new Guacamole.Mouse.State();
+
+    /**
+     * Fired whenever a mouse button is effectively pressed. Depending on the
+     * object dispatching the event, this can be due to a true mouse button
+     * press ({@link Guacamole.Mouse}), an emulated mouse button press from a
+     * touch gesture ({@link Guacamole.Mouse.Touchpad} and
+     * {@link Guacamole.Mouse.Touchscreen}), or may be programmatically
+     * generated through [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * [press()]{@link Guacamole.Mouse.Event.Target#press}, or
+     * [click()]{@link Guacamole.Mouse.Event.Target#click}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mousedown
+     * @param {Guacamole.Mouse.Event} event
+     *     The mousedown event that was fired.
+     */
+","[{'comment': ""I'm assuming that these are just for documentation purposes, with the `@event` tag, but just wanted to make sure that it's expected that there isn't any actual code being documented, here?"", 'commenter': 'necouchman'}, {'comment': ""Yep, that's correct. These will be picked up by JSDoc and documented as events."", 'commenter': 'mike-jumper'}]"
613,guacamole-common-js/src/main/webapp/modules/Mouse.js,"@@ -503,16 +425,355 @@ Guacamole.Mouse.State = function State(template) {
 
 };
 
+/**
+ * All mouse buttons that may be represented by a
+ * {@link Guacamole.Mouse.State}. 
+ *
+ * @readonly
+ * @enum
+ */
+Guacamole.Mouse.State.Buttons = {
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * left mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    LEFT : 'left',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * middle mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    MIDDLE : 'middle',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * right mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    RIGHT : 'right',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * up mouse button (the fourth mouse button, clicked when the mouse scroll
+     * wheel is scrolled up).
+     *
+     * @constant
+     * @type {String}
+     */
+    UP : 'up',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * down mouse button (the fifth mouse button, clicked when the mouse scroll
+     * wheel is scrolled up).
+     *
+     * @constant
+     * @type {String}
+     */
+    DOWN : 'down'
+
+};
+
+/**
+ * Base event type for all mouse events. The mouse producing the event may be
+ * the user's local mouse (as with {@link Guacamole.Mouse}) or an emulated
+ * mouse (as with {@link Guacamole.Mouse.Touchpad}).
+ *
+ * @constructor
+ * @augments Guacamole.Event.DOMEvent
+ * @param {String} type
+ *     The type name of the event (""mousedown"", ""mouseup"", etc.)
+ *
+ * @param {Guacamole.Mouse.State} state
+ *     The current mouse state.
+ *     
+ * @param {Event|Event[]} [events=[]]
+ *     The DOM events that are related to this event, if any.
+ */
+Guacamole.Mouse.Event = function MouseEvent(type, state, events) {
+
+    Guacamole.Event.DOMEvent.call(this, type, events);
+
+    /**
+     * The name of the event handler used by the Guacamole JavaScript API for
+     * this event prior to the migration to Guacamole.Event.Target.
+     *
+     * @private
+     * @constant
+     * @type {String}
+     */
+    var legacyHandlerName = 'on' + this.type;
+
+    /**
+     * The current mouse state at the time this event was fired.
+     *
+     * @type {Guacamole.Mouse.State}
+     */
+    this.state = state;
+
+    /**
+     * @inheritdoc
+     */
+    this.invokeLegacyHandler = function invokeLegacyHandler(target) {
+        if (target[legacyHandlerName]) {
+
+            this.preventDefault();
+            this.stopPropagation();
+
+            target[legacyHandlerName](this.state);
+
+        }
+    };
+
+};
+
+/**
+ * An object which can dispatch {@link Guacamole.Mouse.Event} objects
+ * representing mouse events. These mouse events may be produced from an actual
+ * mouse device (as with {@link Guacamole.Mouse}), from an emulated mouse
+ * device (as with {@link Guacamole.Mouse.Touchpad}, or may be programmatically
+ * generated (using functions like [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+ * [press()]{@link Guacamole.Mouse.Event.Target#press}, and
+ * [release()]{@link Guacamole.Mouse.Event.Target#release}).
+ * 
+ * @constructor
+ * @augments Guacamole.Event.Target
+ */
+Guacamole.Mouse.Event.Target = function MouseEventTarget() {
+
+    Guacamole.Event.Target.call(this);
+
+    /**
+     * The current mouse state. The properties of this state are updated when
+     * mouse events fire. This state object is also passed in as a parameter to
+     * the handler of any mouse events.
+     *
+     * @type {Guacamole.Mouse.State}
+     */
+    this.currentState = new Guacamole.Mouse.State();
+
+    /**
+     * Fired whenever a mouse button is effectively pressed. Depending on the
+     * object dispatching the event, this can be due to a true mouse button
+     * press ({@link Guacamole.Mouse}), an emulated mouse button press from a
+     * touch gesture ({@link Guacamole.Mouse.Touchpad} and
+     * {@link Guacamole.Mouse.Touchscreen}), or may be programmatically
+     * generated through [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * [press()]{@link Guacamole.Mouse.Event.Target#press}, or
+     * [click()]{@link Guacamole.Mouse.Event.Target#click}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mousedown
+     * @param {Guacamole.Mouse.Event} event
+     *     The mousedown event that was fired.
+     */
+
+    /**
+     * Fired whenever a mouse button is effectively released. Depending on the
+     * object dispatching the event, this can be due to a true mouse button
+     * release ({@link Guacamole.Mouse}), an emulated mouse button release from
+     * a touch gesture ({@link Guacamole.Mouse.Touchpad} and
+     * {@link Guacamole.Mouse.Touchscreen}), or may be programmatically
+     * generated through [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * [release()]{@link Guacamole.Mouse.Event.Target#release}, or
+     * [click()]{@link Guacamole.Mouse.Event.Target#click}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mouseup
+     * @param {Guacamole.Mouse.Event} event
+     *     The mouseup event that was fired.
+     */
+
+    /**
+     * Fired whenever the mouse pointer is effectively moved. Depending on the
+     * object dispatching the event, this can be due to true mouse movement
+     * ({@link Guacamole.Mouse}), emulated mouse movement from
+     * a touch gesture ({@link Guacamole.Mouse.Touchpad} and
+     * {@link Guacamole.Mouse.Touchscreen}), or may be programmatically
+     * generated through [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * or [move()]{@link Guacamole.Mouse.Event.Target#move}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mousemove
+     * @param {Guacamole.Mouse.Event} event
+     *     The mousemove event that was fired.
+     */
+
+    /**
+     * Fired whenever the mouse pointer leaves the boundaries of the element
+     * being monitored for interaction. This will only ever be automatically
+     * fired due to movement of an actual mouse device via
+     * {@link Guacamole.Mouse} unless programmatically generated through
+     * [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * or [out()]{@link Guacamole.Mouse.Event.Target#out}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mouseout
+     * @param {Guacamole.Mouse.Event} event
+     *     The mouseout event that was fired.
+     */
+
+    /**
+     * Presses the given mouse button, if it isn't already pressed. Valid
+     * button names are defined by {@link Guacamole.Mouse.State.Buttons} and
+     * correspond to the button-related properties of
+     * {@link Guacamole.Mouse.State}.
+     *
+     * @fires Guacamole.Mouse.Event.Target#mousedown
+     *
+     * @param {String} button
+     *     The name of the mouse button to release, as defined by
+     *     {@link Guacamole.Mouse.State.Buttons}.
+     *
+     * @param {Event|Event[]} [events=[]]
+     *     The DOM events that are related to the mouse button press, if any.
+     */
+    this.press = function press(button, events) {
+        if (!this.currentState[button]) {
+            this.currentState[button] = true;
+            this.dispatch(new Guacamole.Mouse.Event('mousedown', this.currentState, events));
+        }
+    };
+
+    /**
+     * Releases the given mouse button, if it isn't already released. Valid
+     * button names are defined by {@link Guacamole.Mouse.State.Buttons} and
+     * correspond to the button-related properties of
+     * {@link Guacamole.Mouse.State}.
+     *
+     * @fires Guacamole.Mouse.Event.Target#mouseup
+     *
+     * @param {String} button
+     *     The name of the mouse button to release, as defined by
+     *     {@link Guacamole.Mouse.State.Buttons}.
+     *
+     * @param {Event|Event[]} [events=[]]
+     *     The DOM events related to the mouse button release, if any.
+     */
+    this.release = function release(button, events) {
+        if (this.currentState[button]) {
+            this.currentState[button] = false;
+            this.dispatch(new Guacamole.Mouse.Event('mouseup', this.currentState, events));
+        }
+    };
+
+    /**
+     * Clicks (presses and releases) the given mouse button. Valid button
+     * names are defined by {@link Guacamole.Mouse.State.Buttons} and
+     * correspond to the button-related properties of
+     * {@link Guacamole.Mouse.State}.
+     *
+     * @fires Guacamole.Mouse.Event.Target#mousedown
+     * @fires Guacamole.Mouse.Event.Target#mouseup
+     *
+     * @param {String} button
+     *     The name of the mouse button to release, as defined by","[{'comment': 'The name of the mouse button to _click_, I think?', 'commenter': 'necouchman'}]"
613,guacamole-common-js/src/main/webapp/modules/Mouse.js,"@@ -503,16 +425,355 @@ Guacamole.Mouse.State = function State(template) {
 
 };
 
+/**
+ * All mouse buttons that may be represented by a
+ * {@link Guacamole.Mouse.State}. 
+ *
+ * @readonly
+ * @enum
+ */
+Guacamole.Mouse.State.Buttons = {
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * left mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    LEFT : 'left',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * middle mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    MIDDLE : 'middle',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * right mouse button.
+     *
+     * @constant
+     * @type {String}
+     */
+    RIGHT : 'right',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * up mouse button (the fourth mouse button, clicked when the mouse scroll
+     * wheel is scrolled up).
+     *
+     * @constant
+     * @type {String}
+     */
+    UP : 'up',
+
+    /**
+     * The name of the {@link Guacamole.Mouse.State} property representing the
+     * down mouse button (the fifth mouse button, clicked when the mouse scroll
+     * wheel is scrolled up).
+     *
+     * @constant
+     * @type {String}
+     */
+    DOWN : 'down'
+
+};
+
+/**
+ * Base event type for all mouse events. The mouse producing the event may be
+ * the user's local mouse (as with {@link Guacamole.Mouse}) or an emulated
+ * mouse (as with {@link Guacamole.Mouse.Touchpad}).
+ *
+ * @constructor
+ * @augments Guacamole.Event.DOMEvent
+ * @param {String} type
+ *     The type name of the event (""mousedown"", ""mouseup"", etc.)
+ *
+ * @param {Guacamole.Mouse.State} state
+ *     The current mouse state.
+ *     
+ * @param {Event|Event[]} [events=[]]
+ *     The DOM events that are related to this event, if any.
+ */
+Guacamole.Mouse.Event = function MouseEvent(type, state, events) {
+
+    Guacamole.Event.DOMEvent.call(this, type, events);
+
+    /**
+     * The name of the event handler used by the Guacamole JavaScript API for
+     * this event prior to the migration to Guacamole.Event.Target.
+     *
+     * @private
+     * @constant
+     * @type {String}
+     */
+    var legacyHandlerName = 'on' + this.type;
+
+    /**
+     * The current mouse state at the time this event was fired.
+     *
+     * @type {Guacamole.Mouse.State}
+     */
+    this.state = state;
+
+    /**
+     * @inheritdoc
+     */
+    this.invokeLegacyHandler = function invokeLegacyHandler(target) {
+        if (target[legacyHandlerName]) {
+
+            this.preventDefault();
+            this.stopPropagation();
+
+            target[legacyHandlerName](this.state);
+
+        }
+    };
+
+};
+
+/**
+ * An object which can dispatch {@link Guacamole.Mouse.Event} objects
+ * representing mouse events. These mouse events may be produced from an actual
+ * mouse device (as with {@link Guacamole.Mouse}), from an emulated mouse
+ * device (as with {@link Guacamole.Mouse.Touchpad}, or may be programmatically
+ * generated (using functions like [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+ * [press()]{@link Guacamole.Mouse.Event.Target#press}, and
+ * [release()]{@link Guacamole.Mouse.Event.Target#release}).
+ * 
+ * @constructor
+ * @augments Guacamole.Event.Target
+ */
+Guacamole.Mouse.Event.Target = function MouseEventTarget() {
+
+    Guacamole.Event.Target.call(this);
+
+    /**
+     * The current mouse state. The properties of this state are updated when
+     * mouse events fire. This state object is also passed in as a parameter to
+     * the handler of any mouse events.
+     *
+     * @type {Guacamole.Mouse.State}
+     */
+    this.currentState = new Guacamole.Mouse.State();
+
+    /**
+     * Fired whenever a mouse button is effectively pressed. Depending on the
+     * object dispatching the event, this can be due to a true mouse button
+     * press ({@link Guacamole.Mouse}), an emulated mouse button press from a
+     * touch gesture ({@link Guacamole.Mouse.Touchpad} and
+     * {@link Guacamole.Mouse.Touchscreen}), or may be programmatically
+     * generated through [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * [press()]{@link Guacamole.Mouse.Event.Target#press}, or
+     * [click()]{@link Guacamole.Mouse.Event.Target#click}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mousedown
+     * @param {Guacamole.Mouse.Event} event
+     *     The mousedown event that was fired.
+     */
+
+    /**
+     * Fired whenever a mouse button is effectively released. Depending on the
+     * object dispatching the event, this can be due to a true mouse button
+     * release ({@link Guacamole.Mouse}), an emulated mouse button release from
+     * a touch gesture ({@link Guacamole.Mouse.Touchpad} and
+     * {@link Guacamole.Mouse.Touchscreen}), or may be programmatically
+     * generated through [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * [release()]{@link Guacamole.Mouse.Event.Target#release}, or
+     * [click()]{@link Guacamole.Mouse.Event.Target#click}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mouseup
+     * @param {Guacamole.Mouse.Event} event
+     *     The mouseup event that was fired.
+     */
+
+    /**
+     * Fired whenever the mouse pointer is effectively moved. Depending on the
+     * object dispatching the event, this can be due to true mouse movement
+     * ({@link Guacamole.Mouse}), emulated mouse movement from
+     * a touch gesture ({@link Guacamole.Mouse.Touchpad} and
+     * {@link Guacamole.Mouse.Touchscreen}), or may be programmatically
+     * generated through [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * or [move()]{@link Guacamole.Mouse.Event.Target#move}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mousemove
+     * @param {Guacamole.Mouse.Event} event
+     *     The mousemove event that was fired.
+     */
+
+    /**
+     * Fired whenever the mouse pointer leaves the boundaries of the element
+     * being monitored for interaction. This will only ever be automatically
+     * fired due to movement of an actual mouse device via
+     * {@link Guacamole.Mouse} unless programmatically generated through
+     * [dispatch()]{@link Guacamole.Mouse.Event.Target#dispatch},
+     * or [out()]{@link Guacamole.Mouse.Event.Target#out}.
+     *
+     * @event Guacamole.Mouse.Event.Target#mouseout
+     * @param {Guacamole.Mouse.Event} event
+     *     The mouseout event that was fired.
+     */
+
+    /**
+     * Presses the given mouse button, if it isn't already pressed. Valid
+     * button names are defined by {@link Guacamole.Mouse.State.Buttons} and
+     * correspond to the button-related properties of
+     * {@link Guacamole.Mouse.State}.
+     *
+     * @fires Guacamole.Mouse.Event.Target#mousedown
+     *
+     * @param {String} button
+     *     The name of the mouse button to release, as defined by","[{'comment': 'The name of the mouse button to _press_, perhaps?', 'commenter': 'necouchman'}]"
615,guacamole-docker/bin/start.sh,"@@ -594,6 +594,46 @@ END
 
 }
 
+## Adds properties to guacamole.properties which select the SAML
+## authentication provider, and configure it to connect to the specified SAML
+## provider.
+##
+associate_saml() {
+
+    # Verify required parameters are present
+    if [ -z ""$SAML_IDP_METADATA_URL"" ]
+    then
+        cat <<END
+FATAL: Missing required environment variables
+-------------------------------------------------------------------------------
+If using an openid authentication, you must provide each of the following
+environment variables:
+
+    SAML_IDP_METADATA_URL           The URI of the XML metadata file that from the SAML Identity
+                                    Provider
+END
+        exit 1;
+    fi
+
+    # Update config file
+    set_property          ""saml-idp-metadata-url""            ""$SAML_IDP_METADATA_URL""
+    set_optional_property ""saml-idp-url""                     ""$SAML_IDP_URL""
+    set_optional_property ""saml-entity-id""                   ""$SAML_ENTITY_ID""
+	set_optional_property ""saml-callback-url""                ""$SAML_CALLBACK_URL""","[{'comment': 'Spacing is slightly off from here down.', 'commenter': 'tworcester'}]"
615,guacamole-docker/bin/start.sh,"@@ -594,6 +594,46 @@ END
 
 }
 
+## Adds properties to guacamole.properties which select the SAML
+## authentication provider, and configure it to connect to the specified SAML
+## provider.
+##
+associate_saml() {
+
+    # Verify required parameters are present
+    if [ -z ""$SAML_IDP_METADATA_URL"" ]
+    then
+        cat <<END
+FATAL: Missing required environment variables
+-------------------------------------------------------------------------------
+If using an openid authentication, you must provide each of the following
+environment variables:
+
+    SAML_IDP_METADATA_URL           The URI of the XML metadata file that from the SAML Identity
+                                    Provider
+END
+        exit 1;
+    fi
+
+    # Update config file
+    set_property          ""saml-idp-metadata-url""            ""$SAML_IDP_METADATA_URL""
+    set_optional_property ""saml-idp-url""                     ""$SAML_IDP_URL""
+    set_optional_property ""saml-entity-id""                   ""$SAML_ENTITY_ID""
+    set_optional_property ""saml-callback-url""                ""$SAML_CALLBACK_URL""
+    set_optional_property ""saml-strict""                      ""$SAML_STRICT""
+    set_optional_property ""saml-debug""                       ""$SAML_DEBUG""
+    set_optional_property ""saml-compress-request""            ""$SAML_COMPRESS_REQUEST""
+    set_optional_property ""saml-compress-response""           ""$SAML_COMPRESS_RESPONSE""
+    set_optional_property ""saml-group-attribute""             ""SAML_GROUP_ATTRIBUTE""","[{'comment': 'should be:\r\n\r\n```suggestion\r\n    set_optional_property ""saml-group-attribute""             ""$SAML_GROUP_ATTRIBUTE""\r\n```', 'commenter': 'petzsch'}, {'comment': 'Nice catch!', 'commenter': 'tworcester'}]"
615,guacamole-docker/bin/build-guacamole.sh,"@@ -165,6 +165,21 @@ if [ -f extensions/guacamole-auth-duo/target/*.tar.gz ]; then
         ""*.jar""
 fi
 
+#
+# Copy Saml auth extension if it was built
+#
+
+if [ -f extensions/guacamole-auth-saml/target/*.tar.gz ]; then
+    mkdir -p ""$DESTINATION/saml""
+    tar -xzf extensions/guacamole-auth-saml/target/*.tar.gz \
+        -C ""$DESTINATION/duo/""                             \","[{'comment': ""> I've just been testing the changes and for some reason the .jar file for saml is not present in the docker image:\r\n\r\nYou are copying it to the wrong directory.  Copy paste error from the one above it ;)"", 'commenter': 'tworcester'}, {'comment': '```suggestion\r\n        -C ""$DESTINATION/saml/""                             \\\r\n```', 'commenter': 'petzsch'}]"
615,guacamole-docker/bin/start.sh,"@@ -594,6 +594,46 @@ END
 
 }
 
+## Adds properties to guacamole.properties which select the SAML
+## authentication provider, and configure it to connect to the specified SAML
+## provider.
+##
+associate_saml() {
+
+    # Verify required parameters are present
+    if [ -z ""$SAML_IDP_METADATA_URL"" ]
+    then
+        cat <<END
+FATAL: Missing required environment variables
+-------------------------------------------------------------------------------
+If using an openid authentication, you must provide each of the following","[{'comment': 'Oops: ""SAML"", not ""OpenID"".', 'commenter': 'mike-jumper'}, {'comment': 'fixed :)', 'commenter': 'jbpaux'}]"
615,guacamole-docker/bin/start.sh,"@@ -594,6 +594,46 @@ END
 
 }
 
+## Adds properties to guacamole.properties which select the SAML
+## authentication provider, and configure it to connect to the specified SAML
+## provider.
+##
+associate_saml() {
+
+    # Verify required parameters are present
+    if [ -z ""$SAML_IDP_METADATA_URL"" ]
+    then
+        cat <<END
+FATAL: Missing required environment variables
+-------------------------------------------------------------------------------
+If using an openid authentication, you must provide each of the following
+environment variables:
+
+    SAML_IDP_METADATA_URL           The URI of the XML metadata file that from the SAML Identity
+                                    Provider
+END
+        exit 1;
+    fi
+
+    # Update config file
+    set_property          ""saml-idp-metadata-url""            ""$SAML_IDP_METADATA_URL""","[{'comment': ""I think this has to be optional, as well, unfortunately. Only the SAML support itself is going to be able to accurately sanity check these variables.\r\n\r\nIt's possible for the `saml-idp-metadata-url` property to be omitted, and the required values instead provided through individual properties (like `saml-entity-id` and `saml-callback-url`), and it's also possible to specify `saml-idp-metadata-url` _and_ individual properties to make up for any information not included in the XML pointed to by that URL."", 'commenter': 'mike-jumper'}, {'comment': ""I've put it optional :)"", 'commenter': 'jbpaux'}]"
615,guacamole-docker/bin/start.sh,"@@ -594,6 +594,46 @@ END
 
 }
 
+## Adds properties to guacamole.properties which select the SAML
+## authentication provider, and configure it to connect to the specified SAML
+## provider.
+##","[{'comment': 'Please correct the style of this comment to match:\r\n\r\n```\r\n##\r\n## This somewhat JavaDoc-like format that we\'ve adopted for documenting shell\r\n## script functions.\r\n##\r\n```\r\n\r\nrather than:\r\n\r\n```\r\n## This, which is missing the leading JavaDoc-like ""opening"" blank line\r\n##\r\n```\r\n\r\nYou\'re just missing that initial empty `##` line.', 'commenter': 'mike-jumper'}, {'comment': 'done', 'commenter': 'jbpaux'}]"
615,guacamole-docker/bin/start.sh,"@@ -830,6 +870,12 @@ if [ -n ""$OPENID_AUTHORIZATION_ENDPOINT"" ]; then
     INSTALLED_AUTH=""$INSTALLED_AUTH openid""
 fi
 
+# Use SAML if specified
+if [ -n ""$SAML_IDP_METADATA_URL"" ]; then","[{'comment': 'This check will need to be more complicated, since the `saml-idp-metadata-url` property can be omitted entirely so long as the required information is given with other properties.\r\n\r\nOverall, the user needs either `saml-idp-metadata-url`, or `saml-entity-id` and `saml-callback-url`, or a combination of these if the metadata XML is incomplete.', 'commenter': 'mike-jumper'}, {'comment': ""> [...]if the metadata XML is incomplete\r\n\r\nThat will be hard to check from within a bash script as I would need to parse the content of saml-idp-metadata-url to check for what is missing and if it is present in the other variables.\r\n\r\nCan't really say when I will get to this. If someone else wants to make the needed changes and needs permissions on my fork, simply let me know."", 'commenter': 'petzsch'}, {'comment': ""I wouldn't recommend making things that complex or attempting to duplicate the logic that the extension itself will be using.\r\n\r\nI think it would be far better to just relax the logic a bit and consider the presence of any of those environment variables sufficient to enable SAML, rather than actually parse the XML."", 'commenter': 'mike-jumper'}, {'comment': ""I've implemented the logic."", 'commenter': 'jbpaux'}]"
615,guacamole-docker/bin/build-guacamole.sh,"@@ -165,6 +165,21 @@ if [ -f extensions/guacamole-auth-duo/target/*.tar.gz ]; then
         ""*.jar""
 fi
 
+#
+# Copy Saml auth extension if it was built
+#
+
+if [ -f extensions/guacamole-auth-saml/target/*.tar.gz ]; then
+    mkdir -p ""$DESTINATION/saml""
+    tar -xzf extensions/guacamole-auth-saml/target/*.tar.gz \
+        -C ""$DESTINATION/saml/""                             \
+        --wildcards                                        \
+        --no-anchored                                      \
+        --no-wildcards-match-slash                         \
+        --strip-components=1                               \
+        ""*.jar""
+fi
+","[{'comment': 'I believe this may no longer be necessary due to the restructuring of the SSO extensions (CAS, OpenID, and SAML) into a single .tar.gz as of 1.4.0:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/aa99b4bc8a511a0f96466d16de2c88af9befea83/guacamole-docker/bin/build-guacamole.sh#L113-L122\r\n\r\nCan you rebase and recheck against the latest?', 'commenter': 'mike-jumper'}]"
620,guacamole/src/main/frontend/src/app/auth/service/authenticationService.js,"@@ -252,6 +252,24 @@ angular.module('auth').factory('authenticationService', ['$injector',
 
     };
 
+    /**
+     * Makes a request to revoke an authentication token using the token REST
+     * API endpoint, returning a promise succeeds only if the token was","[{'comment': '_that_ succeeds?', 'commenter': 'necouchman'}, {'comment': 'Oops.', 'commenter': 'mike-jumper'}, {'comment': ""There's a second occurrence of this in the documentation of the function that this was copied from. I've corrected both in a fresh commit."", 'commenter': 'mike-jumper'}]"
642,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLEnvironment.java,"@@ -178,8 +179,10 @@ public PasswordPolicy getPasswordPolicy() {
 
     /**
      * Returns the MySQL driver that will be used to talk to the MySQL-compatible
-     * database server hosting the Guacamole Client database.  If unspecified
-     * a default value of MySQL will be used.
+     * database server hosting the Guacamole database. If unspecified, the
+     * installed MySQL driver will be automatically detected by inspecting the
+     * classes available an the classpath. If automatic detection fails, the","[{'comment': 'Perhaps ""in the classpath""?', 'commenter': 'necouchman'}, {'comment': 'Whoopsies', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'mike-jumper'}]"
642,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLEnvironment.java,"@@ -189,10 +192,30 @@ public PasswordPolicy getPasswordPolicy() {
      *     If guacamole.properties cannot be parsed.
      */
     public MySQLDriver getMySQLDriver() throws GuacamoleException {
-        return getProperty(
-            MySQLGuacamoleProperties.MYSQL_DRIVER,
-            DEFAULT_DRIVER
-        );
+
+        // Use any explicitly-specified driver
+        MySQLDriver driver = getProperty(MySQLGuacamoleProperties.MYSQL_DRIVER);
+        if (driver != null)
+            return driver;
+
+        // Attempt autodetection based on presence of JDBC driver within
+        // classpath...
+
+        if (MySQLDriver.MARIADB.isInstalled()) {
+            logger.info(""Installed JDBC driver for MySQL/MariaDB detected as \""MariaDB Connector/J\""."");
+            return MySQLDriver.MARIADB;
+        }
+
+        if (MySQLDriver.MYSQL.isInstalled()) {
+            logger.info(""Installed JDBC driver for MySQL/MariaDB detected as \""MySQL Connector/J\""."");
+            return MySQLDriver.MYSQL;
+        }
+
+        // Fallback to MySQL Connector/J if nothing can be found
+        logger.warn(""JDBC driver for MySQL/MariaDB couuld not be detected ""
+                + ""and might not be installed. Assuming MySQL Connector/J..."");
+        return FALLBACK_DEFAULT_DRIVER;","[{'comment': ""If we reach the this fallback point, doesn't it mean that the MySQLDriver.MySQL has already not been found? Should we really fall back to something we already are reasonably certain doesn't exist, or would it be better to throw an exception here that tells the admin the driver is missing?"", 'commenter': 'necouchman'}, {'comment': ""Yeah - if neither of the previous attempts succeed, then there really isn't anything else to try. It would make more sense to throw an exception here and bail out.\r\n\r\nI'll add that."", 'commenter': 'mike-jumper'}, {'comment': 'OK - this will now throw an exception if no relevant driver can be found.', 'commenter': 'mike-jumper'}]"
643,guacamole-docker/README.md,"@@ -163,6 +163,63 @@ The process for doing this via the `mysql` utility included with MySQL is
 documented in
 [the Guacamole manual](http://guacamole.apache.org/doc/gug/jdbc-auth.html#jdbc-auth-mysql).
 
+Deploying Guacamole with SQLServer authentication
+--------------------------------------------------
+
+    docker run --name some-guacamole --link some-guacd:guacd \
+        --link some-sqlserver:sqlserver      \
+        -e SQLSERVER_DATABASE=guacamole_db  \
+        -e SQLSERVER_USER=guacamole_user    \
+        -e SQLSERVER_PASSWORD=some_password \
+        -e SQLSERVER_DATABASE_FILE=/run/secrets/<secret_name> \
+        -e SQLSERVER_USER_FILE=/run/secrets/<secret_name> \
+        -e SQLSERVER_PASSWORD_FILE=/run/secrets/<secret_name> \
+        -d -p 8080:8080 guacamole/guacamole
+
+Linking Guacamole to SQLServer requires three environment variables. If any of
+these environment variables are omitted, you will receive an error message, and
+the image will stop:
+
+1. `SQLSERVER_DATABASE` - The name of the database to use for Guacamole
+   authentication.
+2. `SQLSERVER_USER` - The user that Guacamole will use to connect to SQLServer.
+3. `SQLSERVER_PASSWORD` - The password that Guacamole will provide when
+   connecting to SQLServer as `SQLSERVER_USER`.
+4. `SQLSERVER_DATABASE_FILE` - The path of the docker secret containing the name
+   of database to use for Guacamole authentication.
+5. `SQLSERVER_USER_FILE` - The path of the docker secret containing the name of
+   the user that Guacamole will use to connect to SQLServer.
+6. `SQLSERVER_PASSWORD_FILE` - The path of the docker secret containing the
+   password that Guacamole will provide when connecting to SQLServer as
+   `SQLSERVER_USER.","[{'comment': 'I think this section is a bit confusing, as it says that SQLServer authentication ""requires three variable"" and goes on to list 6. I know you copied the sections above, for MySQL and PostgreSQL, and those need to be separately reviewed and reworked, but it seems like it may make more sense to leave lines 179-187 as-is, and then put a break, and say something like, ""Alternatively, if you want to store database credentials using Docker secrets, the following three variables are required and replace the previous three:"", and then list the three _FILE variables.', 'commenter': 'necouchman'}, {'comment': ""Yes you're right, I was just following the other examples. I've updated the text with your instructions."", 'commenter': 'jbpaux'}]"
643,guacamole-docker/bin/start.sh,"@@ -403,6 +403,142 @@ END
 
 }
 
+# Print error message regarding missing required variables for SQLServer authentication
+sqlserver_missing_vars() {
+    cat <<END
+FATAL: Missing required environment variables
+-------------------------------------------------------------------------------
+If using a SQLServer database, you must provide each of the following
+environment variables or their corresponding Docker secrets by appending _FILE
+to the environment variable, and setting the value to the path of the
+corresponding secret:
+
+    SQLSERVER_USER     The user to authenticate as when connecting to
+                       SQLServer.
+
+    SQLSERVER_PASSWORD The password to use when authenticating with SQLServer
+                       as SQLSERVER_USER.
+
+    SQLSERVER_DATABASE The name of the SQLServer database to use for Guacamole
+                       authentication.","[{'comment': ""Similar to the documentation section, above, this should also probably be reworked to take into account using either these three variables or the `_FILE` versions for Docker secret support. Again, I know it matches the Postgres and MySQL versions, so those should be reworked later, but since we're adding these, here, I think it makes sense to do it correctly."", 'commenter': 'necouchman'}, {'comment': ""Updated too, hopefully it's ok."", 'commenter': 'jbpaux'}]"
643,guacamole-docker/bin/start.sh,"@@ -23,7 +23,7 @@
 ##
 ## Automatically configures and starts Guacamole under Tomcat. Guacamole's
 ## guacamole.properties file will be automatically generated based on the
-## linked database container (either MySQL or PostgreSQL) and the linked guacd
+## linked database container (either MySQL,PostgreSQL or SQLServer) and the linked guacd","[{'comment': '#NitPick, but missing a space, here, after the comma...', 'commenter': 'necouchman'}, {'comment': 'done :)', 'commenter': 'jbpaux'}]"
648,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/conf/JacksonLDAPConfiguration.java,"@@ -0,0 +1,428 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap.conf;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import static com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import org.apache.directory.api.ldap.model.filter.ExprNode;
+import org.apache.directory.api.ldap.model.message.AliasDerefMode;
+import org.apache.directory.api.ldap.model.name.Dn;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.properties.GuacamoleProperty;
+
+/**
+ * LDAPConfiguration implementation that is annotated for deserialization by
+ * Jackson.
+ */
+public class JacksonLDAPConfiguration implements LDAPConfiguration {
+
+    /**
+     * The regular expressions that match all users that should be routed to
+     * the LDAP server represented by this configuration.
+     */
+    @JsonProperty(""match-usernames"")
+    @JsonFormat(with = ACCEPT_SINGLE_VALUE_AS_ARRAY)
+    private List<Pattern> matchUsernames;
+    
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_HOSTNAME}. If
+     * not set within the YAML, this will be null.
+     */
+    @JsonProperty(""hostname"")
+    private String hostname;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_PORT}. If not
+     * set within the YAML, this will be null.
+     */
+    @JsonProperty(""port"")
+    private Integer port;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_USERNAME_ATTRIBUTES}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""username-attribute"")
+    @JsonFormat(with = ACCEPT_SINGLE_VALUE_AS_ARRAY)
+    private List<String> usernameAttributes;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_USER_BASE_DN}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""user-base-dn"")
+    private String userBaseDn;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_CONFIG_BASE_DN}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""config-base-dn"")
+    private String configBaseDn;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_GROUP_BASE_DN}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""group-base-dn"")
+    private String groupBaseDn;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_GROUP_NAME_ATTRIBUTES}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""group-name-attribute"")
+    @JsonFormat(with = ACCEPT_SINGLE_VALUE_AS_ARRAY)
+    private List<String> groupNameAttributes;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_SEARCH_BIND_DN}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""search-bind-dn"")
+    private String searchBindDn;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_SEARCH_BIND_PASSWORD}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""search-bind-password"")
+    private String searchBindPassword;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_ENCRYPTION_METHOD}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""encryption-method"")
+    private String encryptionMethod;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_MAX_SEARCH_RESULTS}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""max-search-results"")
+    private Integer maxSearchResults;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_DEREFERENCE_ALIASES}.
+     * If not set within the YAML, this will be null.
+     */
+    @JsonProperty(""dereference-aliases"")
+    private String dereferenceAliases;
+
+    /**
+     * The raw YAML value of {@link LDAPGuacamoleProperties#LDAP_DEREFERENCE_ALIASES}.
+     * If not set within the YAML, this will be null.
+     */","[{'comment': 'Some Copy Pasta - this should be `LDAPGuacamoleProperties#LDAP_FOLLOW_REFERRALS`, methinks.', 'commenter': 'necouchman'}, {'comment': 'Whoops, yes - fixed via rebase. 🍝', 'commenter': 'mike-jumper'}]"
648,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/conf/LDAPConfiguration.java,"@@ -0,0 +1,323 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ldap.conf;
+
+import java.util.List;
+import org.apache.directory.api.ldap.model.filter.ExprNode;
+import org.apache.directory.api.ldap.model.message.AliasDerefMode;
+import org.apache.directory.api.ldap.model.name.Dn;
+import org.apache.guacamole.GuacamoleException;
+
+/**
+ * Configuration information defining how a particular LDAP server should be
+ * queried.
+ */
+public interface LDAPConfiguration {
+
+    /**
+     * Tests whether this LDAPConfiguration applies to the user having the
+     * given username. If the configuration applies, the username that should
+     * be used to derive the user's DN is returned.
+     *
+     * @param username
+     *     The username to test.
+     *
+     * @return
+     *     The username that should be used to derive this user's DN, or null
+     *     if the configuration does not apply.
+     *
+     * @throws GuacamoleException
+     *     If an error prevents testing against this configuration.
+     */
+    String appliesTo(String username) throws GuacamoleException;
+    
+    /**
+     * Returns the hostname or IP address of the LDAP server.
+     *
+     * @return
+     *     The hostname or IP address of the LDAP server.
+     *
+     * @throws GuacamoleException
+     *     If the hostname or IP address of the LDAP server cannot be
+     *     retrieved.
+     */
+    String getServerHostname() throws GuacamoleException;
+
+    /**
+     * Returns the port of the LDAP server. The default value depends on which
+     * encryption method is being used. For unencrypted LDAP and STARTTLS, this
+     * will be 389. For LDAPS (LDAP over SSL) this will be 636.
+     *
+     * @return
+     *     The port of the LDAP server.
+     *
+     * @throws GuacamoleException
+     *     If the port of the LDAP server cannot be retrieved.
+     */
+    int getServerPort() throws GuacamoleException;
+
+    /**
+     * Returns all username attributes which should be used to query and bind
+     * users using the LDAP directory.
+     *
+     * @return
+     *     The username attributes which should be used to query and bind users
+     *     using the LDAP directory.
+     *
+     * @throws GuacamoleException
+     *     If the username attributes cannot be retrieved.
+     */
+    List<String> getUsernameAttributes() throws GuacamoleException;
+
+    /**
+     * Returns the base DN under which all Guacamole users will be stored
+     * within the LDAP directory.
+     *
+     * @return
+     *     The base DN under which all Guacamole users will be stored within
+     *     the LDAP directory.
+     *
+     * @throws GuacamoleException
+     *     If the user base DN cannot be retrieved.
+     */
+    Dn getUserBaseDN() throws GuacamoleException;
+
+    /**
+     * Returns the base DN under which all Guacamole configurations
+     * (connections) will be stored within the LDAP directory. If Guacamole
+     * configurations will not be stored within LDAP, null is returned.
+     *
+     * @return
+     *     The base DN under which all Guacamole configurations will be stored
+     *     within the LDAP directory, or null if no Guacamole configurations
+     *     will be stored within the LDAP directory.
+     *
+     * @throws GuacamoleException
+     *     If the configuration base DN cannot be retrieved.
+     */
+    Dn getConfigurationBaseDN() throws GuacamoleException;
+
+    /**
+     * Returns all attributes which should be used to determine the unique
+     * identifier of each user group.
+     *
+     * @return
+     *     The attributes which should be used to determine the unique
+     *     identifier of each group.
+     *
+     * @throws GuacamoleException
+     *     If the group name attributes cannot be retrieved.
+     */
+    List<String> getGroupNameAttributes() throws GuacamoleException;
+
+    /**
+     * Returns the base DN under which all Guacamole role based access control
+     * (RBAC) groups will be stored within the LDAP directory. If RBAC will not
+     * be used, null is returned.
+     *
+     * @return
+     *     The base DN under which all Guacamole RBAC groups will be stored
+     *     within the LDAP directory, or null if RBAC will not be used.
+     *
+     * @throws GuacamoleException
+     *     If the group base DN cannot be retrieved.
+     */
+    Dn getGroupBaseDN() throws GuacamoleException;
+
+    /**
+     * Returns the login that should be used when searching for the DNs of users
+     * attempting to authenticate. If no such search should be performed, null
+     * is returned.
+     *
+     * @return
+     *     The DN that should be used when searching for the DNs of users
+     *     attempting to authenticate, or null if no such search should be
+     *     performed.
+     *
+     * @throws GuacamoleException
+     *     If the search bind DN cannot be retrieved.
+     */
+    String getSearchBindDN() throws GuacamoleException;
+
+    /**
+     * Returns the password that should be used when binding to the LDAP server
+     * using the DN returned by getSearchBindDN(). If no password should be
+     * used, null is returned.
+     *
+     * @return
+     *     The password that should be used when binding to the LDAP server
+     *     using the DN returned by getSearchBindDN(), or null if no password
+     *     should be used.
+     *
+     * @throws GuacamoleException
+     *     If the search bind password cannot be retrieved.
+     */
+    String getSearchBindPassword() throws GuacamoleException;
+
+    /**
+     * Returns the encryption method that should be used when connecting to the
+     * LDAP server.
+     *
+     * @return
+     *     The encryption method that should be used when connecting to the
+     *     LDAP server.
+     *
+     * @throws GuacamoleException
+     *     If the encryption method cannot be retrieved.
+     */
+    EncryptionMethod getEncryptionMethod() throws GuacamoleException;
+
+    /**
+     * Returns maximum number of results a LDAP query can return.
+     *
+     * @return
+     *     The maximum number of results a LDAP query can return.
+     *
+     * @throws GuacamoleException
+     *     If the maximum number of results cannot be retrieved.
+     */
+    int getMaxResults() throws GuacamoleException;
+
+    /**
+     * Returns whether or not LDAP aliases will be dereferenced.
+     *
+     * @return
+     *     The LDAP alias dereferencing mode.
+     *
+     * @throws GuacamoleException
+     *     If the LDAP alias dereferencing mode cannot be retrieved.
+     */
+    AliasDerefMode getDereferenceAliases() throws GuacamoleException;
+
+    /**
+     * Returns whether referrals should be automatically followed.
+     *
+     * @return
+     *     Whether referrals should be followed.
+     *
+     * @throws GuacamoleException
+     *     If the configuration information determining whether LDAP referrals
+     *     should be followed cannot be retrieved.
+     */
+    boolean getFollowReferrals() throws GuacamoleException;
+
+    /**
+     * Returns the maximum number of referral hops to follow.
+     *
+     * @return
+     *     The maximum number of referral hops to follow.
+     *
+     * @throws GuacamoleException
+     *     If the maximum number of referral hops cannot be retrieved.
+     */
+    int getMaxReferralHops() throws GuacamoleException;
+
+    /**
+     * Returns the search filter that should be used when querying the
+     * LDAP server for Guacamole users.
+     *
+     * @return
+     *     The search filter that should be used when querying the
+     *     LDAP server for users that are valid in Guacamole.
+     *
+     * @throws GuacamoleException
+     *     If the user search filter cannot be retrieved.
+     */
+    ExprNode getUserSearchFilter() throws GuacamoleException;
+
+    /**
+     * Returns the search filter that should be used when querying the
+     * LDAP server for Guacamole groups.
+     *
+     * @return
+     *     The search filter that should be used when querying the
+     *     LDAP server for groups that are valid in Guacamole.
+     *
+     * @throws GuacamoleException
+     *     If the group search filter cannot be retrieved.
+     */
+    ExprNode getGroupSearchFilter() throws GuacamoleException;
+
+    /**
+     * Returns the maximum number of milliseconds to wait for a response when
+     * communicating with the LDAP server.
+     *
+     * @return
+     *     The maximum number of milliseconds to wait for responses from the
+     *     LDAP server.
+     *
+     * @throws GuacamoleException
+     *     If the LDAP network timeout cannot be retrieved.
+     */
+    int getNetworkTimeout() throws GuacamoleException;
+
+    /**
+     * Returns the maximum number of seconds to wait for LDAP operations.
+     *
+     * @return
+     *     The maximum number of seconds to wait for LDAP operations.
+     *
+     * @throws GuacamoleException
+     *     If the LDAP operation timeout cannot be retrieved.
+     */
+    int getOperationTimeout() throws GuacamoleException;
+
+    /**
+     * Returns names of any LDAP user attributes that should be made available
+     * as parameter tokens.
+     *
+     * @return
+     *     A list of all LDAP user attributes that should be made available as
+     *     parameter tokens.
+     *
+     * @throws GuacamoleException
+     *     If the names of the LDAP user attributes to be exposed as parameter
+     *     tokens cannot be retrieved.
+     */
+    List<String> getAttributes() throws GuacamoleException;
+    
+    /**
+     * Returns the name of the LDAP attribute used to enumerate members in a
+     * group.
+     * 
+     * @return
+     *     The name of the LDAP attribute to use to enumerate
+     *     members in a group.
+     * 
+     * @throws GuacamoleException
+     *     If the group member attribute cannot be retrieved.
+     */
+    String getMemberAttribute() throws GuacamoleException;
+
+    /**
+     * Returns whether the LDAP attribute used to enumerate members in a group
+     * specifies a UID or DN.
+     *
+     * @return
+     *     The type of data contained in the LDAP attribute used to enumerate
+     *     members in a group/","[{'comment': ""I'm more accustomed to ending sentences with periods. ;-)"", 'commenter': 'necouchman'}, {'comment': 'I believe this latest rebase should be more to your liking/ ;-)', 'commenter': 'mike-jumper'}]"
650,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/MySQLAuthenticationProviderModule.java,"@@ -87,9 +87,12 @@ public MySQLAuthenticationProviderModule(MySQLEnvironment environment)
         driverProperties.setProperty(""sslMode"", sslMode.getDriverValue());
         
         // For compatibility, set legacy useSSL property when SSL is disabled.
-        if (sslMode == MySQLSSLMode.DISABLED)
+        if (sslMode == MySQLSSLMode.DISABLED) {
             driverProperties.setProperty(""useSSL"", ""false"");
-        
+        } else {","[{'comment': 'Please don\'t ""cuddle"" the braces here with the `else` statement. Should be:\r\n```\r\n}\r\nelse {\r\n```\r\n\r\nYou don\'t even need the braces at all, but not so concerned about that.', 'commenter': 'necouchman'}]"
650,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/MySQLAuthenticationProviderModule.java,"@@ -89,7 +89,9 @@ public MySQLAuthenticationProviderModule(MySQLEnvironment environment)
         // For compatibility, set legacy useSSL property when SSL is disabled.","[{'comment': 'One more minor change request - can you update this comment so that it covers both cases (enabled and disabled).', 'commenter': 'necouchman'}]"
653,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/acs/AuthenticationSession.java,"@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml.acs;
+
+/**
+ * Representation of an in-progress SAML authentication attempt.
+ */
+public class AuthenticationSession {
+
+    /**
+     * The absolute point in time after which this authentication session is
+     * invalid. This value is a UNIX epoch timestamp, as may be returned by
+     * {@link System#currentTimeMillis()}.
+     */
+    private final long expirationTimestamp;
+
+    /**
+     * The request ID of the SAML request associated with the authentication
+     * attempt.
+     */
+    private final String requestId;
+
+    /**
+     * The identity asserted by the SAML IdP, or null if authentication has not
+     * yet completed successfully.
+     */
+    private AssertedIdentity identity = null;
+
+    /**
+     * Creates a new AuthenticationSession representing an in-progress SAML
+     * authentication attempt.
+     *
+     * @param requestId
+     *     The request ID of the SAML request associated with the
+     *     authentication attempt.
+     *
+     * @param expires
+     *     The number of milliseconds that may elapse before this session must
+     *     be considered invalid.
+     */
+    public AuthenticationSession(String requestId, long expires) {
+        this.expirationTimestamp = System.currentTimeMillis() + expires;
+        this.requestId = requestId;
+    }
+
+    /**
+     * Returns whether this authentication session is still valid (has not yet
+     * expired). If an identity has been asserted by the SAML IdP, this
+     * considers also whether the SAML response asserting that identity has
+     * expired.
+     *
+     * @return
+     *     true if this authentication session is still valid, false if it has
+     *     expired.
+     */
+    public boolean isValid() {
+        return System.currentTimeMillis() < expirationTimestamp
+                && (identity == null || identity.isValid());","[{'comment': ""So, the session is considered valid if it has not, yet, expired, and the identity is null? That is, it is valid if authentication is still in progress? Just want to make sure that's what is intended..."", 'commenter': 'necouchman'}, {'comment': 'Yep - exactly. If no identity has yet been asserted, the only factor in session validity is whether Guacamole itself still considers the session valid. Once an identity has been asserted, then both Guacamole and the SAML response are taken into account.', 'commenter': 'mike-jumper'}]"
653,extensions/guacamole-auth-saml/src/main/java/org/apache/guacamole/auth/saml/AuthenticationProviderService.java,"@@ -21,71 +21,51 @@
 
 import com.google.inject.Inject;
 import com.google.inject.Provider;
-import com.onelogin.saml2.authn.AuthnRequest;
-import com.onelogin.saml2.authn.SamlResponse;
-import com.onelogin.saml2.exception.SettingsException;
-import com.onelogin.saml2.exception.ValidationError;
-import com.onelogin.saml2.settings.Saml2Settings;
-import java.io.IOException;
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
 import javax.servlet.http.HttpServletRequest;
-import javax.ws.rs.core.UriBuilder;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.xpath.XPathExpressionException;
-import org.apache.guacamole.auth.saml.conf.ConfigurationService;
 import org.apache.guacamole.auth.saml.user.SAMLAuthenticatedUser;
 import org.apache.guacamole.GuacamoleException;
-import org.apache.guacamole.GuacamoleServerException;
+import org.apache.guacamole.auth.saml.acs.AssertedIdentity;
+import org.apache.guacamole.auth.saml.acs.AuthenticationSessionManager;
+import org.apache.guacamole.auth.saml.acs.SAMLService;
 import org.apache.guacamole.form.Field;
 import org.apache.guacamole.form.RedirectField;
 import org.apache.guacamole.language.TranslatableMessage;
 import org.apache.guacamole.net.auth.AuthenticatedUser;
 import org.apache.guacamole.net.auth.Credentials;
 import org.apache.guacamole.net.auth.credentials.CredentialsInfo;
 import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
-import org.apache.guacamole.token.TokenName;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.xml.sax.SAXException;
 
 /**
- * Class that provides services for use by the SAMLAuthenticationProvider class.
+ * Service that authenticates Guacamole users by processing the responses of
+ * SAML identity providers.
  */
 public class AuthenticationProviderService {
 
     /**
-     * Logger for this class.
+     * The name of the query parameter that identifies an active authentication
+     * session (in-progress SAML authentication attempt).
      */
-    private static final Logger logger = LoggerFactory.getLogger(AuthenticationProviderService.class);
+    public static final String AUTH_SESSION_QUERY_PARAM = ""state"";
 
     /**
-     * Service for retrieving SAML configuration information.
+     * Provider for AuthenticatedUser objects.
      */
     @Inject
-    private ConfigurationService confService;
+    private Provider<SAMLAuthenticatedUser> authenticatedUserProvider;
 
     /**
-     * Provider for AuthenticatedUser objects.
+     * Manager of active SAML authentication attempts.
      */
     @Inject
-    private Provider<SAMLAuthenticatedUser> authenticatedUserProvider;
-    
+    private AuthenticationSessionManager authManager;","[{'comment': ""This is a complete #NitPick, but this is called `authManager`, here, and `sessionManager` in the `SAMLService` class - unless there's a compelling reason for naming them differently, might be best to keep them the same?"", 'commenter': 'necouchman'}, {'comment': ""That's fair - I think this naming is from an earlier stage in the refactor. I'll update it to be consistent."", 'commenter': 'mike-jumper'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
656,extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java,"@@ -228,7 +228,7 @@ private UserLDAPConfiguration getLDAPConfiguration(String username,
             }
 
             // Attempt bind (authentication)
-            LdapNetworkConnection ldapConnection = ldapService.bindAs(config, bindDn.getName(), password);
+            LdapNetworkConnection ldapConnection = ldapService.bindAs(config, bindDn.getName(), (password == null || password.isEmpty()) ? config.getSearchBindPassword() : password);","[{'comment': ""In this context, `password` is the password provided by the user during login, not the search bind password. The search bind password should definitely not be used as a fallback for a user's login attempt, which would potentially allow a user to successfully authenticate despite not providing a valid password.\r\n\r\nThe only place that the search bind password should be pulled is in the context of the search bind DN (within `getUserBindDn()`). This should already be the case:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/262643b2930aad5b6dc31df75cb928577b6a99a8/extensions/guacamole-auth-ldap/src/main/java/org/apache/guacamole/auth/ldap/AuthenticationProviderService.java#L131-L133"", 'commenter': 'mike-jumper'}]"
658,guacamole-docker/bin/start.sh,"@@ -710,6 +710,17 @@ associate_json() {
     ln -s /opt/guacamole/json/guacamole-auth-*.jar ""$GUACAMOLE_EXT""
 }
 
+##
+## Adds properties to guacamole.process wich configure other","[{'comment': 'Some typos here:\r\n\r\n* ""guacamole.properties""\r\n* ""which""', 'commenter': 'mike-jumper'}]"
658,guacamole-docker/bin/start.sh,"@@ -710,6 +710,17 @@ associate_json() {
     ln -s /opt/guacamole/json/guacamole-auth-*.jar ""$GUACAMOLE_EXT""
 }
 
+##
+## Adds properties to guacamole.process wich configure other
+## options","[{'comment': 'I think ""other options"" is a bit too vague here. It\'s unclear from reading the documentation for `associate_other()` exactly which configuration properties are in scope of the function. If the idea is that `associate_other()` covers any properties that are not tied to a specific extension, then I think that should be specified here.\r\n\r\nAlternatively, there is already a section devoted to the few options that do not relate to an extension:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/c143c7cb5c73bcae51a4576c3bbe7d1d76ef7620/guacamole-docker/bin/start.sh#L794-L796\r\n\r\nSimply placing the relevant call to `set_optional_property()` there may be better and simpler.', 'commenter': 'mike-jumper'}]"
658,guacamole-docker/bin/start.sh,"@@ -873,6 +884,9 @@ if [ -n ""$JSON_SECRET_KEY"" ]; then
     associate_json
 fi
 
+# Associate other keys","[{'comment': 'What is meant by ""keys"" here?', 'commenter': 'mike-jumper'}]"
666,guacamole/src/main/frontend/src/app/index/filters/escapeFilter.js,"@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A filter for transforming an object into an array of all non-inherited","[{'comment': 'Copypasta from the other filter? ;)', 'commenter': 'mike-jumper'}, {'comment': 'yum.', 'commenter': 'necouchman'}, {'comment': 'Fixed via rebase.', 'commenter': 'necouchman'}]"
668,guacamole-common-js/src/main/webapp/modules/Client.js,"@@ -1824,3 +1844,31 @@ Guacamole.Client.DefaultTransferFunction = {
     }
 
 };
+
+/**
+ * A list of possible messages that can be sent by the server and displayed to
+ * the client.
+ * 
+ * @type {!Object.<string, number>}
+ */
+Guacamole.Client.Message = {
+    
+    /**
+     * A client message that indicates that a user has joined an existing
+     * connection. This message xpects a single additional argument - the","[{'comment': 'Typo: `xpects`', 'commenter': 'jmuehlner'}, {'comment': ""That's the hip (read: lazy SMS) way to spell it.\r\n\r\nFixd."", 'commenter': 'necouchman'}]"
668,guacamole/src/main/frontend/src/app/client/directives/guacClientMessage.js,"@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Directive which displays a message for the client.
+ */
+angular.module('client').directive('guacClientMessage', [function guacClientMessage() {
+
+    return {
+        restrict: 'E',
+        replace: true,
+        scope: {
+
+            /**
+             * The message to display to the client.
+             * 
+             * @type {!ManagedClientMessage}
+             */
+            message : '='
+
+        },
+
+        templateUrl: 'app/client/templates/guacClientMessage.html',
+        
+        controller: ['$scope', '$injector', '$element',
+                function guacClientMessageController($scope, $injector, $element) {
+            
+            const ManagedClientMessage = $injector.get('ManagedClientMessage');
+            
+            /**
+             * Uses the msgcode to retrieve the correct translation key for
+             * the client message.
+             * 
+             * @returns {string}
+             */
+            $scope.getMessageKey = function getMessageKey() {
+                
+                let msgString = ""DEFAULT"";
+                if (Object.values(Guacamole.Client.Message).includes($scope.message.msgcode))
+                    msgString = Object.keys(Guacamole.Client.Message).find(key => Guacamole.Client.Message[key] === $scope.message.msgcode);
+                
+                return ""CLIENT.CLIENT_MESSAGE_"" + msgString.toUpperCase();
+            };
+            
+            /**
+             * Returns a set of key/value object pairs that represent the
+             * arguments provided as part of the message in the form
+             * ARGS[0] = value.
+             * 
+             * @returns {Object}
+             */
+            $scope.getMessageArgs = function getMessageArgs() {
+                return $scope.message.args.reduce(","[{'comment': ""I know why you're doing this, but it would probably be useful for posterity to add a comment here about _why_ this is here."", 'commenter': 'jmuehlner'}, {'comment': 'Added some more comment to that - hopefully that clarifies it enough?', 'commenter': 'necouchman'}, {'comment': 'That is a bit more clear - though I wonder consider quoting the value `""ARGS[0]""` just to make it extra super clear that it\'s a string. I know object values in javascript have to be strings anyway, but making it explicitly clear never hurts.\r\n\r\nIt might be even more clear if you used a format for these keys that doesn\'t look like an array index, like `""ARGS_0""` or something, just to make it even more obvious that they\'re strings.\r\n', 'commenter': 'jmuehlner'}, {'comment': ""That's a really good idea - I've changed it to be what you said, just ARGS_<INT>, as I agree that makes it easier to identify that we're not actually dealing with an array at that point."", 'commenter': 'necouchman'}]"
668,guacamole/src/main/frontend/src/app/client/directives/guacClientMessage.js,"@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Directive which displays a message for the client.
+ */
+angular.module('client').directive('guacClientMessage', [function guacClientMessage() {
+
+    return {
+        restrict: 'E',
+        replace: true,
+        scope: {
+
+            /**
+             * The message to display to the client.
+             * 
+             * @type {!ManagedClientMessage}
+             */
+            message : '='
+
+        },
+
+        templateUrl: 'app/client/templates/guacClientMessage.html',
+        
+        controller: ['$scope', '$injector', '$element',
+                function guacClientMessageController($scope, $injector, $element) {
+            
+            const ManagedClientMessage = $injector.get('ManagedClientMessage');","[{'comment': ""It's a minor nitpick, but when injecting dependencies like this, we usually have a comment at the top of the block like \r\n\r\n```\r\n// Required types\r\nconst HappyGuacType = $injector.get('HappyGuacType');\r\n```\r\n\r\nWe should keep doing that, for consistency."", 'commenter': 'jmuehlner'}, {'comment': 'Added.', 'commenter': 'necouchman'}]"
668,guacamole/src/main/frontend/src/app/client/types/ManagedClientMessage.js,"@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Provides the ManagedClientMessage class used for messages displayed in
+ * a ManagedClient.
+ */
+angular.module('client').factory('ManagedClientMessage', [function defineManagedClientMessage() {
+
+    /**
+     * Object which represents a message to be displayed to a Guacamole client.
+     *
+     * @constructor
+     * @param {ManagedClientMessage|Object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     ManagedClientMessage.
+     */
+    var ManagedClientMessage = function ManagedClientMessage(template) {
+
+        // Use empty object by default
+        template = template || {};
+
+        /**
+         * The message code sent by the server that will be used to locate the
+         * message within the Guacamole translation framework.
+         */
+        this.msgcode = template.msgcode;
+        
+        /**
+         * Any arguments that should be passed through the translation system
+         * and displayed as part of the message.
+         */
+        this.args = template.args;","[{'comment': 'Type annotations here would make this easier to understand. (And match other type classes 😄)', 'commenter': 'jmuehlner'}]"
668,guacamole/src/main/java/org/apache/guacamole/tunnel/TunnelRequestService.java,"@@ -340,6 +340,11 @@ public GuacamoleTunnel createTunnel(TunnelRequest request)
         GuacamoleSession session = authenticationService.getGuacamoleSession(authToken);
         AuthenticatedUser authenticatedUser = session.getAuthenticatedUser();
         UserContext userContext = session.getUserContext(authProviderIdentifier);
+        
+        // Attempt to get the user's name and set it for the tunnel client.
+        String name = authenticatedUser.getCredentials().getName();","[{'comment': 'This should instead be `authenticatedUser.getIdentifier()`, which is always the identity of the user regardless of whether their credentials include their username. I think this may have been meant as `authenticatedUser.getCredentials().getUsername()`, which will _often_ return the same value but is not guaranteed to do so.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed via rebase.', 'commenter': 'necouchman'}]"
668,guacamole-common-js/src/main/webapp/modules/Client.js,"@@ -687,6 +687,20 @@ Guacamole.Client = function(tunnel) {
      *     A status object which describes the error.
      */
     this.onerror = null;
+    
+    /**
+     * Fired when a message is received from the remote tunnel and needs to be
+     * displayed to the user.
+     * 
+     * @event
+     * @param {!number} msgcode
+     *     A status code sent by the remote server that indicates the message
+     *     that should be displayed to the client.
+     * @param {string[]} args
+     *     An array of arguments that can be added to the message that will be
+     *     displayed to the client. 
+     */","[{'comment': 'I think this should be documented more along the lines of receiving a message indicating some sort of arbitrary event or state change, not necessarily something that _needs_ to or _will_ be displayed to the user.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed via rebase.', 'commenter': 'necouchman'}]"
668,guacamole-common-js/src/main/webapp/modules/Client.js,"@@ -1824,3 +1844,31 @@ Guacamole.Client.DefaultTransferFunction = {
     }
 
 };
+
+/**
+ * A list of possible messages that can be sent by the server and displayed to
+ * the client.
+ * 
+ * @type {!Object.<string, number>}
+ */
+Guacamole.Client.Message = {
+    
+    /**
+     * A client message that indicates that a user has joined an existing
+     * connection. This message expects a single additional argument - the
+     * name of the user who has joined the connection.
+     * 
+     * @type {!number}
+     */
+    ""JOINED"": 0x0001,
+    
+    /**
+     * A client message that indicates that a user has left an existing
+     * connection. This message expects a single additional argument - the
+     * name of the user who has left the connection.
+     * 
+     * @type {!number}
+     */
+    ""LEFT"": 0x0002","[{'comment': 'I suggest renaming these to `USER_JOINED` and `USER_LEFT` to (1) align with the `GUAC_MESSAGE_USER_JOINED` and `GUAC_MESSAGE_USER_LEFT` constants and (2) clarify the context of the event.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed via rebase.', 'commenter': 'necouchman'}]"
668,guacamole/src/main/frontend/src/app/client/directives/guacClientMessage.js,"@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Directive which displays a message for the client.
+ */
+angular.module('client').directive('guacClientMessage', [function guacClientMessage() {
+
+    return {
+        restrict: 'E',
+        replace: true,
+        scope: {
+
+            /**
+             * The message to display to the client.
+             * 
+             * @type {!ManagedClientMessage}
+             */
+            message : '='
+
+        },
+
+        templateUrl: 'app/client/templates/guacClientMessage.html',
+        
+        controller: ['$scope', '$injector', '$element',
+                function guacClientMessageController($scope, $injector, $element) {
+            
+            // Required types
+            const ManagedClientMessage = $injector.get('ManagedClientMessage');
+            
+            /**
+             * Uses the msgcode to retrieve the correct translation key for
+             * the client message.
+             * 
+             * @returns {string}
+             */
+            $scope.getMessageKey = function getMessageKey() {
+                
+                let msgString = ""DEFAULT"";
+                if (Object.values(Guacamole.Client.Message).includes($scope.message.msgcode))
+                    msgString = Object.keys(Guacamole.Client.Message).find(key => Guacamole.Client.Message[key] === $scope.message.msgcode);
+                
+                return ""CLIENT.CLIENT_MESSAGE_"" + msgString.toUpperCase();","[{'comment': 'This should probably be a call to [`translationStringService.canonicalize()`](https://github.com/apache/guacamole-client/blob/165bd413c0ab9c55b0c0e3614fcb829ef5f8ca95/guacamole/src/main/frontend/src/app/locale/services/translationStringService.js#L28-L42).', 'commenter': 'mike-jumper'}, {'comment': 'Added a commit to fix this, plus update the translation strings in the `en.json` file with the updated names.', 'commenter': 'necouchman'}]"
668,guacamole-common-js/src/main/webapp/modules/Client.js,"@@ -1824,3 +1845,31 @@ Guacamole.Client.DefaultTransferFunction = {
     }
 
 };
+
+/**
+ * A list of possible messages that can be sent by the server for processing
+ * by the client.
+ * 
+ * @type {!Object.<string, number>}
+ */
+Guacamole.Client.Message = {
+    
+    /**
+     * A client message that indicates that a user has joined an existing
+     * connection. This message expects a single additional argument - the
+     * name of the user who has joined the connection.
+     * 
+     * @type {!number}
+     */
+    ""GUAC_MESSAGE_USER_JOINED"": 0x0001,","[{'comment': ""These should probably be `USER_JOINED`, etc. rather than `GUAC_MESSAGE_USER_JOINED`. There's no need to namespace what's already given via `Guacamole.Client.Message`."", 'commenter': 'mike-jumper'}, {'comment': 'Okay - it just makes locating the correct translation key a bit less elegant ;-)', 'commenter': 'necouchman'}, {'comment': 'Updated via rebase.', 'commenter': 'necouchman'}]"
668,guacamole/src/main/frontend/src/app/client/directives/guacClientMessage.js,"@@ -0,0 +1,87 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Directive which displays a message for the client.
+ */
+angular.module('client').directive('guacClientMessage', [function guacClientMessage() {
+
+    return {
+        restrict: 'E',
+        replace: true,
+        scope: {
+
+            /**
+             * The message to display to the client.
+             * 
+             * @type {!ManagedClientMessage}
+             */
+            message : '='
+
+        },
+
+        templateUrl: 'app/client/templates/guacClientMessage.html',
+        
+        controller: ['$scope', '$injector', '$element',
+                function guacClientMessageController($scope, $injector, $element) {
+            
+            // Required types
+            const ManagedClientMessage = $injector.get('ManagedClientMessage');
+            
+            // Required services
+            var translationStringService = $injector.get('translationStringService');
+            
+            /**
+             * Uses the msgcode to retrieve the correct translation key for
+             * the client message.
+             * 
+             * @returns {string}
+             */
+            $scope.getMessageKey = function getMessageKey() {
+                
+                let msgString = ""GUAC_MESSAGE_DEFAULT"";
+                if (Object.values(Guacamole.Client.Message).includes($scope.message.msgcode))
+                    msgString = Object.keys(Guacamole.Client.Message).find(key => Guacamole.Client.Message[key] === $scope.message.msgcode);
+                
+                return translationStringService.canonicalize('CLIENT.' + msgString);","[{'comment': ""I believe this will transform `CLIENT.` into `CLIENT_`. To add the `CLIENT` namespace, you'd need to instead:\r\n\r\n```js\r\n'CLIENT.' + translationStringService.canonicalize(msgString)\r\n```\r\n\r\nbut you'll probably want something more like:\r\n\r\n```js\r\n'CLIENT.MESSAGE_' + translationStringService.canonicalize(msgString)\r\n```\r\n\r\nassuming the keys within `Guacamole.Client.Message` are `USER_JOINED`, etc."", 'commenter': 'mike-jumper'}, {'comment': 'Fixed via rebase.', 'commenter': 'necouchman'}]"
669,guacamole-common-js/src/main/webapp/modules/Client.js,"@@ -1699,11 +1692,63 @@ Guacamole.Client = function(tunnel) {
             tunnel.sendMessage(""nop"");
         }, 5000);
 
-        setState(STATE_WAITING);
+        setState(Guacamole.Client.State.WAITING);
     };
 
 };
 
+/**
+ * All possible Guacamole Client states.
+ * 
+ * @type {!Object.<string, number>}
+ */
+Guacamole.Client.State = {
+    
+    /**
+     * The client is idle, with no active connection.
+     * 
+     * @type number","[{'comment': 'I believe this (and the others) needs to be: `@type {!number}`\r\n\r\nSee: https://jsdoc.app/tags-type.html', 'commenter': 'mike-jumper'}, {'comment': 'Okay, should be fixed.', 'commenter': 'necouchman'}]"
671,extensions/guacamole-auth-ldap/pom.xml,"@@ -51,7 +51,21 @@
         <dependency>
             <groupId>org.apache.directory.api</groupId>
             <artifactId>api-all</artifactId>
-            <version>2.0.1</version>
+            <version>2.1.0</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>org.apache.mina</groupId>
+                    <artifactId>mina-core</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+
+        <!-- Override version of Apache Mina specified by Apache Director API","[{'comment': '*Directory', 'commenter': 'necouchman'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
681,extensions/guacamole-display-statistics/src/main/resources/directives/guacClientStatistics.js,"@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive which displays one or more Guacamole clients in an evenly-tiled","[{'comment': 'Might be better to re-word this as ""displays statistics for one or more Guacamole Clients"" - to clarify it\'s not displaying actual clients, but the statistics associated with them.', 'commenter': 'necouchman'}, {'comment': ""Oops - that's some unfinished copy pasta for sure. I'll fix."", 'commenter': 'mike-jumper'}]"
681,extensions/guacamole-display-statistics/src/main/resources/directives/guacClientStatistics.js,"@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A directive which displays one or more Guacamole clients in an evenly-tiled
+ * view. The number of rows and columns used for the arrangement of tiles is
+ * automatically determined by the number of clients present.
+ */
+angular.module('client').directive('guacClientStatistics', [function guacClientStatistics() {
+
+    const directive = {
+        restrict: 'E',
+        templateUrl: 'app/ext/display-stats/templates/guacClientStatistics.html',
+    };
+
+    directive.scope = {
+
+        /**
+         * The group of Guacamole clients that should be displayed in an","[{'comment': 'As above - maybe clarify this is statistics for clients, not actual clients.', 'commenter': 'necouchman'}]"
694,Dockerfile,"@@ -62,6 +62,9 @@ ARG GID=1001
 RUN groupadd --gid $GID guacamole
 RUN useradd --system --create-home --shell /usr/sbin/nologin --uid $UID --gid $GID guacamole
 
+# allow guacamole user to import certificates into default java keystore file cacerts
+run chown guacamole /usr/local/openjdk-8/jre/lib/security/cacerts && chmod +w /usr/local/openjdk-8/jre/lib/security/cacerts ","[{'comment': ""I don't think this should be done. Should something go awry in the web application, this would extend the malicious potential of that to installing certificates.\r\n\r\nThe limited-privilege user that runs the webapp shouldn't be able to alter certs."", 'commenter': 'mike-jumper'}, {'comment': ""i don't like that solution either because of the same security reasons you mentioned. \r\n\r\nTo sum up my finding about java and ceritifcates:\r\n- Only a keystorefile can be used as a certificate source within java. \r\n- You can't load a single cert file into you application\r\n- Importing into default keystore file for unprivileged users is not possible by default\r\n\r\nA solution that only affects the container and provides sufficient security is not possible as far as I can assume: \r\n- You can't run multiple CMD/ENTRYPOINT-commands within a dockerfile with different users\r\n- Importing certifcates with RUN-Commands is nonsense since this would be done while building the image (and not starting a container)\r\n\r\nA possible solution would be:\r\n- create a new keystore file with all the necessary certs \r\n- make the file read only after creating and importing\r\n- merge it on the fly within the application with the system wide keystore (maybe with [https://github.com/1and1/CompositeJKS](https://github.com/1and1/CompositeJKS))\r\n\r\nBut since this topic only affects containers and the approach above requires some changes to the application itself I don't know if it should be done like that.\r\n\r\n\r\n"", 'commenter': 'sirux88'}, {'comment': ""@mike-jumper:\r\nI reviewed all the stuff once again and came to the conclusion that there's a easier and more overall solution.\r\nIt ended up in [allow-jsk-usage](https://github.com/sirux88/guacamole-client/tree/allow-jsk-usage)\r\n\r\nI would suggest closing this topic as well as the JIRA issue and creating new ones.\r\nPlease give me a short hint if this is fine for you. \r\nI'll then do all the steps"", 'commenter': 'sirux88'}, {'comment': ""@sirux88 did you create a new PR for that new allow-jsk-usage ? I'm interested by this feature but cant find anything related to the announcement you made here."", 'commenter': 'daftaupe'}, {'comment': ""Since the maintainers never gave some feedback on this I haven't created a PR.\r\n\r\nSince contributing is, at least in my eyes, not that easy within in this project I'm not really interested in doing so. \r\n\r\nIf you want to feel free to copy my approach and put a PR on this yourself"", 'commenter': 'sirux88'}, {'comment': ""That's fair - sorry for being so unresponsive on this and other PRs."", 'commenter': 'mike-jumper'}, {'comment': ""@sirux88 since there's an answer from @mike-jumper, are you going to keep on working on the PR ?"", 'commenter': 'daftaupe'}, {'comment': ""Sorry but no @daftaupe I'll close this PR and will not open a new one. Reasons are the same as above and without any offense to anyone mike's comment is not an answer to the question it is an excuse.\r\n\r\nYour options are:\r\n1) You could use the `startup.sh` from my branch [allow-jsk-usage](https://github.com/sirux88/guacamole-client/tree/allow-jsk-usage) and mount it into your container. Then set the appropriate environment variables and use your own keystore file. \r\n2) Copy my approach and open a new PR on yourself\r\n3) There's another PR that deals with loading custom keystore files #805. The PR's reason is different but the solution may fit for your needs aswell. \r\n\r\n"", 'commenter': 'sirux88'}, {'comment': ""thanks @sirux88 I'll think about what is the best option."", 'commenter': 'daftaupe'}]"
695,guacamole/src/main/frontend/src/translations/en.json,"@@ -62,6 +62,7 @@
         ""ACTION_CANCEL""                    : ""@:APP.ACTION_CANCEL"",
         ""ACTION_CLEAR_CLIENT_MESSAGES""     : ""Clear"",
         ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""Clear"",
+        ""ACTION_FULLSCREEN""                : ""Fullscreen"",","[{'comment': 'I think this should be down below `ACTION_DISCONNECT` by Alphabetical order?', 'commenter': 'necouchman'}]"
695,guacamole/src/main/frontend/src/app/client/services/guacFullscreen.js,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A service for providing true fullscreen and keyboard lock support.
+ * Keyboard lock is currently only supported by Chromium based browsers
+ * (Edge >= V79, Chrome >= V68 and Opera >= V55)
+ */
+angular.module('client').factory('guacFullscreen', ['$injector',
+
+    
+    function guacFullscreen($injector) {","[{'comment': 'Looking at other services, from a style perspective I think you can remove the space between the `angular...` line and the `function...` line, and then indent the function line one more. For example, see:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/d1faaa9605c5eef668da8bf84279d7a88cad5af7/guacamole/src/main/frontend/src/app/client/services/guacClientManager.js#L20-L25', 'commenter': 'necouchman'}, {'comment': ""It's not always done the same coding style. I tried to align it to your example"", 'commenter': 'sirux88'}]"
695,guacamole/src/main/frontend/src/app/client/services/guacFullscreen.js,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A service for providing true fullscreen and keyboard lock support.
+ * Keyboard lock is currently only supported by Chromium based browsers
+ * (Edge >= V79, Chrome >= V68 and Opera >= V55)
+ */
+angular.module('client').factory('guacFullscreen', ['$injector',
+
+    
+    function guacFullscreen($injector) {
+        
+        var service = {};
+
+        // toggles current fullscreen mode (off if on, on if off)
+        service.toggleFullscreenMode = function toggleFullscreenMode(){
+            if(!service.isInFullscreenMode()){
+                service.setFullscreenMode(true);
+            }else{
+                service.setFullscreenMode(false);
+            }
+        }
+
+        // check is browser in true fullscreen mode
+        service.isInFullscreenMode=function isInFullscreenMode(){
+            return document.fullscreenElement;
+        }
+
+        // set fullscreen mode
+        service.setFullscreenMode = function setFullscreenMode(state) {
+            if(document.fullscreenEnabled){
+                
+                if(state && !service.isInFullscreenMode()) document.documentElement.requestFullscreen().then(navigator.keyboard.lock()); 
+                else if(!state && service.isInFullscreenMode()) document.exitFullscreen().then(navigator.keyboard.unlock()); ","[{'comment': 'These lines are long enough that it probably makes sense to not try to do one-liners, here, and, instead, put the `document..` part on its own line.\r\n\r\nAlso, please put spaces between the `if` and the opening parenthesis.', 'commenter': 'necouchman'}]"
695,guacamole/src/main/frontend/src/app/client/services/guacFullscreen.js,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A service for providing true fullscreen and keyboard lock support.
+ * Keyboard lock is currently only supported by Chromium based browsers
+ * (Edge >= V79, Chrome >= V68 and Opera >= V55)
+ */
+angular.module('client').factory('guacFullscreen', ['$injector',
+
+    
+    function guacFullscreen($injector) {
+        
+        var service = {};
+
+        // toggles current fullscreen mode (off if on, on if off)
+        service.toggleFullscreenMode = function toggleFullscreenMode(){
+            if(!service.isInFullscreenMode()){
+                service.setFullscreenMode(true);
+            }else{
+                service.setFullscreenMode(false);
+            }
+        }","[{'comment': ""* Please put spaces between parenthesis and brackets.\r\n* Please put spaces between the `if` and its opening parenthesis, and between the `else` and its bracket.\r\n* Please don't cuddle the `else` clause with the closing bracket above it."", 'commenter': 'necouchman'}]"
695,guacamole/src/main/frontend/src/app/client/services/guacFullscreen.js,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A service for providing true fullscreen and keyboard lock support.
+ * Keyboard lock is currently only supported by Chromium based browsers
+ * (Edge >= V79, Chrome >= V68 and Opera >= V55)
+ */
+angular.module('client').factory('guacFullscreen', ['$injector',
+
+    
+    function guacFullscreen($injector) {
+        
+        var service = {};
+
+        // toggles current fullscreen mode (off if on, on if off)
+        service.toggleFullscreenMode = function toggleFullscreenMode(){
+            if(!service.isInFullscreenMode()){
+                service.setFullscreenMode(true);
+            }else{
+                service.setFullscreenMode(false);
+            }
+        }
+
+        // check is browser in true fullscreen mode
+        service.isInFullscreenMode=function isInFullscreenMode(){","[{'comment': 'Spaces around the equals sign, and between `()` and `{`', 'commenter': 'necouchman'}]"
695,guacamole/src/main/frontend/src/app/client/services/guacFullscreen.js,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A service for providing true fullscreen and keyboard lock support.
+ * Keyboard lock is currently only supported by Chromium based browsers
+ * (Edge >= V79, Chrome >= V68 and Opera >= V55)
+ */
+angular.module('client').factory('guacFullscreen', ['$injector',
+
+    
+    function guacFullscreen($injector) {
+        
+        var service = {};
+
+        // toggles current fullscreen mode (off if on, on if off)
+        service.toggleFullscreenMode = function toggleFullscreenMode(){
+            if(!service.isInFullscreenMode()){
+                service.setFullscreenMode(true);
+            }else{
+                service.setFullscreenMode(false);
+            }
+        }
+
+        // check is browser in true fullscreen mode
+        service.isInFullscreenMode=function isInFullscreenMode(){
+            return document.fullscreenElement;
+        }
+
+        // set fullscreen mode
+        service.setFullscreenMode = function setFullscreenMode(state) {
+            if(document.fullscreenEnabled){","[{'comment': 'Spaces between `if` and `(` and between `)` and `{`', 'commenter': 'necouchman'}]"
695,guacamole/src/main/frontend/src/app/client/controllers/clientController.js,"@@ -44,7 +44,7 @@ angular.module('client').controller('clientController', ['$scope', '$routeParams
     const requestService         = $injector.get('requestService');
     const tunnelService          = $injector.get('tunnelService');
     const userPageService        = $injector.get('userPageService');
-
+    const guacFullscreen         = $injector.get('guacFullscreen');","[{'comment': 'Nitpick, but could you put this service in alphabetical order with the ones above it, and then keep the space below this before the next code comment?', 'commenter': 'necouchman'}, {'comment': 'This is fairly important, IMHO. Maintaining alphabetical order for things like `#include`, `import`, blocks of retrievals from the AngularJS `$injector`, etc. helps avoid merge conflicts.', 'commenter': 'mike-jumper'}, {'comment': 'done', 'commenter': 'sirux88'}]"
698,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/connection/ConnectionRecordMapper.java,"@@ -19,113 +19,9 @@
 
 package org.apache.guacamole.auth.jdbc.connection;
 
-import java.util.Collection;
-import java.util.List;
-import org.apache.guacamole.auth.jdbc.base.ActivityRecordSearchTerm;
-import org.apache.guacamole.auth.jdbc.base.ActivityRecordSortPredicate;
-import org.apache.ibatis.annotations.Param;
-import org.apache.guacamole.auth.jdbc.user.UserModel;
+import org.apache.guacamole.auth.jdbc.base.ActivityRecordMapper;
 
 /**
  * Mapper for connection record objects.
  */
-public interface ConnectionRecordMapper {
-
-    /**
-     * Returns a collection of all connection records associated with the
-     * connection having the given identifier.
-     *
-     * @param identifier
-     *     The identifier of the connection whose records are to be retrieved.
-     *
-     * @return
-     *     A collection of all connection records associated with the
-     *     connection having the given identifier. This collection will be
-     *     empty if no such connection exists.
-     */
-    List<ConnectionRecordModel> select(@Param(""identifier"") String identifier);
-
-    /**
-     * Inserts the given connection record.
-     *
-     * @param record
-     *     The connection record to insert.
-     *
-     * @return
-     *     The number of rows inserted.
-     */
-    int insert(@Param(""record"") ConnectionRecordModel record);
-
-    /**
-     * Searches for up to <code>limit</code> connection records that contain
-     * the given terms, sorted by the given predicates, regardless of whether
-     * the data they are associated with is is readable by any particular user.
-     * This should only be called on behalf of a system administrator. If
-     * records are needed by a non-administrative user who must have explicit
-     * read rights, use {@link searchReadable()} instead.
-     *
-     * @param identifier
-     *     The optional connection identifier to which records should be limited,
-     *     or null if all records should be retrieved.
-     * 
-     * @param terms
-     *     The search terms that must match the returned records.
-     *
-     * @param sortPredicates
-     *     A list of predicates to sort the returned records by, in order of
-     *     priority.
-     *
-     * @param limit
-     *     The maximum number of records that should be returned.
-     *
-     * @return
-     *     The results of the search performed with the given parameters.
-     */
-    List<ConnectionRecordModel> search(@Param(""identifier"") String identifier,
-            @Param(""terms"") Collection<ActivityRecordSearchTerm> terms,
-            @Param(""sortPredicates"") List<ActivityRecordSortPredicate> sortPredicates,
-            @Param(""limit"") int limit);
-
-    /**
-     * Searches for up to <code>limit</code> connection records that contain
-     * the given terms, sorted by the given predicates. Only records that are
-     * associated with data explicitly readable by the given user will be
-     * returned. If records are needed by a system administrator (who, by
-     * definition, does not need explicit read rights), use {@link search()}
-     * instead.
-     *
-     * @param identifier
-     *     The optional connection identifier for which records should be
-     *     retrieved, or null if all readable records should be retrieved.
-     * 
-     * @param user
-     *    The user whose permissions should determine whether a record is
-     *    returned.
-     *
-     * @param terms
-     *     The search terms that must match the returned records.
-     *
-     * @param sortPredicates
-     *     A list of predicates to sort the returned records by, in order of
-     *     priority.
-     *
-     * @param limit
-     *     The maximum number of records that should be returned.
-     *
-     * @param effectiveGroups
-     *     The identifiers of all groups that should be taken into account
-     *     when determining the permissions effectively granted to the user. If
-     *     no groups are given, only permissions directly granted to the user
-     *     will be used.
-     *
-     * @return
-     *     The results of the search performed with the given parameters.
-     */
-    List<ConnectionRecordModel> searchReadable(@Param(""identifier"") String identifier,
-            @Param(""user"") UserModel user,
-            @Param(""terms"") Collection<ActivityRecordSearchTerm> terms,
-            @Param(""sortPredicates"") List<ActivityRecordSortPredicate> sortPredicates,
-            @Param(""limit"") int limit,
-            @Param(""effectiveGroups"") Collection<String> effectiveGroups);
-
-}
+public interface ConnectionRecordMapper extends ActivityRecordMapper<ConnectionRecordModel> {}","[{'comment': 'If all the functionality is being moved to `ActivityRecordMapper`, should this interface be deprecated? Or will that cause other down-stream impacts?', 'commenter': 'necouchman'}, {'comment': ""There would be no downstream impact as it's not a part of the public API (these mappers are internal pieces of the database auth implementation). I don't think we can remove it, though, as MyBatis needs to be able to determine with XML mapping file corresponds to which mapper."", 'commenter': 'mike-jumper'}]"
698,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/UserRecordMapper.java,"@@ -19,124 +19,10 @@
 
 package org.apache.guacamole.auth.jdbc.user;
 
-import java.util.Collection;
-import java.util.List;
+import org.apache.guacamole.auth.jdbc.base.ActivityRecordMapper;
 import org.apache.guacamole.auth.jdbc.base.ActivityRecordModel;
-import org.apache.guacamole.auth.jdbc.base.ActivityRecordSearchTerm;
-import org.apache.guacamole.auth.jdbc.base.ActivityRecordSortPredicate;
-import org.apache.ibatis.annotations.Param;
 
 /**
  * Mapper for user login activity records.
  */
-public interface UserRecordMapper {
-
-    /**
-     * Returns a collection of all user login records associated with the user
-     * having the given username.
-     *
-     * @param username
-     *     The username of the user whose login records are to be retrieved.
-     *
-     * @return
-     *     A collection of all user login records associated with the user
-     *     having the given username. This collection will be empty if no such
-     *     user exists.
-     */
-    List<ActivityRecordModel> select(@Param(""username"") String username);
-
-    /**
-     * Inserts the given user login record.
-     *
-     * @param record
-     *     The user login record to insert.
-     *
-     * @return
-     *     The number of rows inserted.
-     */
-    int insert(@Param(""record"") ActivityRecordModel record);
-
-    /**
-     * Updates the given user login record.
-     *
-     * @param record
-     *     The user login record to update.
-     *
-     * @return
-     *     The number of rows updated.
-     */
-    int update(@Param(""record"") ActivityRecordModel record);
-
-    /**
-     * Searches for up to <code>limit</code> user login records that contain
-     * the given terms, sorted by the given predicates, regardless of whether
-     * the data they are associated with is is readable by any particular user.
-     * This should only be called on behalf of a system administrator. If
-     * records are needed by a non-administrative user who must have explicit
-     * read rights, use {@link searchReadable()} instead.
-     *
-     * @param username
-     *     The optional username to which records should be limited, or null
-     *     if all records should be retrieved.
-     * 
-     * @param terms
-     *     The search terms that must match the returned records.
-     *
-     * @param sortPredicates
-     *     A list of predicates to sort the returned records by, in order of
-     *     priority.
-     *
-     * @param limit
-     *     The maximum number of records that should be returned.
-     *
-     * @return
-     *     The results of the search performed with the given parameters.
-     */
-    List<ActivityRecordModel> search(@Param(""username"") String username,
-            @Param(""terms"") Collection<ActivityRecordSearchTerm> terms,
-            @Param(""sortPredicates"") List<ActivityRecordSortPredicate> sortPredicates,
-            @Param(""limit"") int limit);
-
-    /**
-     * Searches for up to <code>limit</code> user login records that contain
-     * the given terms, sorted by the given predicates. Only records that are
-     * associated with data explicitly readable by the given user will be
-     * returned. If records are needed by a system administrator (who, by
-     * definition, does not need explicit read rights), use {@link search()}
-     * instead.
-     *
-     * @param username
-     *     The optional username to which records should be limited, or null
-     *     if all readable records should be retrieved.
-     * 
-     * @param user
-     *     The user whose permissions should determine whether a record is
-     *     returned.
-     *
-     * @param terms
-     *     The search terms that must match the returned records.
-     *
-     * @param sortPredicates
-     *     A list of predicates to sort the returned records by, in order of
-     *     priority.
-     *
-     * @param limit
-     *     The maximum number of records that should be returned.
-     *
-     * @param effectiveGroups
-     *     The identifiers of all groups that should be taken into account
-     *     when determining the permissions effectively granted to the user. If
-     *     no groups are given, only permissions directly granted to the user
-     *     will be used.
-     *
-     * @return
-     *     The results of the search performed with the given parameters.
-     */
-    List<ActivityRecordModel> searchReadable(@Param(""username"") String username,
-            @Param(""user"") UserModel user,
-            @Param(""terms"") Collection<ActivityRecordSearchTerm> terms,
-            @Param(""sortPredicates"") List<ActivityRecordSortPredicate> sortPredicates,
-            @Param(""limit"") int limit,
-            @Param(""effectiveGroups"") Collection<String> effectiveGroups);
-
-}
+public interface UserRecordMapper extends ActivityRecordMapper<ActivityRecordModel> {}","[{'comment': 'As with `ConnectionRecordMapper`, should this be deprecated?', 'commenter': 'necouchman'}]"
698,extensions/guacamole-history-recording-storage/src/main/java/org/apache/guacamole/history/connection/HistoryConnectionRecord.java,"@@ -0,0 +1,309 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.history.connection;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.net.MalformedURLException;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.apache.guacamole.io.GuacamoleReader;
+import org.apache.guacamole.io.ReaderGuacamoleReader;
+import org.apache.guacamole.language.TranslatableMessage;
+import org.apache.guacamole.net.auth.ActivityLog;
+import org.apache.guacamole.net.auth.ConnectionRecord;
+import org.apache.guacamole.net.auth.DelegatingConnectionRecord;
+import org.apache.guacamole.net.auth.FileActivityLog;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * ConnectionRecord implementation that automatically defines ActivityLogs for
+ * files that relate to the wrapped record.
+ */
+public class HistoryConnectionRecord extends DelegatingConnectionRecord {
+
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(HistoryConnectionRecord.class);
+
+    /**
+     * The namespace for URL UUIDs as defined by RFC 4122.
+     */
+    private static final UUID UUID_NAMESPACE_URL = UUID.fromString(""6ba7b811-9dad-11d1-80b4-00c04fd430c8"");
+
+    /**
+     * The filename suffix of typescript timing files.
+     */
+    private static final String TIMING_FILE_SUFFIX = "".timing"";
+
+    /**
+     * The default directory to search for associated session recordings, if
+     * not overridden with the ""recording-search-path"" property.
+     */
+    private static final File DEFAULT_RECORDING_SEARCH_PATH = new File(""/var/lib/guacamole/recordings"");
+
+    /**
+     * The directory to search for associated session recordings. By default,
+     * ""/var/lib/guacamole/recordings"" will be used.
+     */
+    private static final FileGuacamoleProperty RECORDING_SEARCH_PATH = new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() {
+            return ""recording-search-path"";
+        }
+
+    };
+
+    /**
+     * The recording file associated with the wrapped connection record. This
+     * may be a single file or a directory that may contain any number of
+     * relevant recordings.
+     */
+    private final File recording;
+
+    /**
+     * Creates a new HistoryConnectionRecord that wraps the given
+     * ConnectionRecord, automatically associating ActivityLogs based on
+     * related files (session recordings, typescripts, etc.).
+     *
+     * @param record
+     *     The ConnectionRecord to wrap.
+     *
+     * @throws GuacamoleException
+     *     If the configured path for stored recordings cannot be read.
+     */
+    public HistoryConnectionRecord(ConnectionRecord record) throws GuacamoleException {
+        super(record);
+
+        Environment environment = LocalEnvironment.getInstance();
+        File recordingPath = environment.getProperty(RECORDING_SEARCH_PATH,
+                DEFAULT_RECORDING_SEARCH_PATH);
+
+        String uuid = record.getUUID().toString();
+        File recordingFile = new File(recordingPath, uuid);
+        this.recording = recordingFile.canRead() ? recordingFile : null;
+
+    }
+
+    /**
+     * Returns whether the given file appears to be a Guacamole session
+     * recording. As there is no standard extension for session recordings,
+     * this is determined by attempting to read a single Guacamole instruction
+     * from the file.
+     *
+     * @param file
+     *     The file to test.
+     *
+     * @return
+     *     true if the file appears to be a Guacamole session recording, false
+     *     otherwise.
+     */
+    private boolean isSessionRecording(File file) {
+
+        try (Reader reader = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8)) {
+
+            GuacamoleReader guacReader = new ReaderGuacamoleReader(reader);
+            if (guacReader.readInstruction() != null)
+                return true;
+
+        }
+        catch (GuacamoleException e) {
+            logger.debug(""File \""{}\"" does not appear to be a session ""
+                    + ""recording, as it could not be parsed as Guacamole ""
+                    + ""protocol data."", file, e);
+        }
+        catch (IOException e) {
+            logger.warn(""Possible session recording \""{}\"" could not be ""
+                    + ""identified as it cannot be read: {}"", file, e.getMessage());
+            logger.debug(""Possible session recording \""{}\"" could not be read."", file, e);
+        }
+
+        return false;
+
+    }
+
+    /**
+     * Returns whether the given file appears to be a typescript (text
+     * recording of a terminal session). As there is no standard extension for
+     * session recordings, this is determined by testing whether there is an
+     * associated timing file. Guacamole will always include a timing file for
+     * its typescripts.
+     *
+     * @param file
+     *     The file to test.
+     *
+     * @return
+     *     true if the file appears to be a typescript, false otherwise.
+     */
+    private boolean isTypescript(File file) {
+        return new File(file.getAbsolutePath() + TIMING_FILE_SUFFIX).exists();
+    }
+
+    /**
+     * Returns whether the given file appears to be a typescript timing file.
+     * Typescript timing files have the standard extension "".timing"".
+     *
+     * @param file
+     *     The file to test.
+     *
+     * @return
+     *     true if the file appears to be a typescript timing file, false
+     *     otherwise.
+     */
+    private boolean isTypescriptTiming(File file) {
+        return file.getName().endsWith(TIMING_FILE_SUFFIX);
+    }
+
+    /**
+     * Returns the type of session recording or log contained within the given
+     * file by inspecting its name and contents.
+     *
+     * @param file
+     *     The file to test.
+     *
+     * @return
+     *     The type of session recording or log contained within the given
+     *     file, or null if this cannot be determined.","[{'comment': ""Is this true - that `null` will be returned if the type cannot be determined? It looks to me like `ActivityLog.Type.SERVER_LOG` will be returned? Looking at the below code fro `ActivityLog`, that doesn't look to be `null`?"", 'commenter': 'necouchman'}, {'comment': ""No, you're right - it will not currently return `null` under any circumstance. I defined explicit meaning and handling for `null` here to ensure that the caller does not assume that this will always be the case. While the function will currently never return `null`, that's due to an implementation detail of the function and not some inherent property of what the function does."", 'commenter': 'mike-jumper'}]"
698,extensions/guacamole-history-recording-storage/src/main/java/org/apache/guacamole/history/connection/HistoryConnectionRecord.java,"@@ -0,0 +1,309 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.history.connection;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.net.MalformedURLException;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.environment.Environment;
+import org.apache.guacamole.environment.LocalEnvironment;
+import org.apache.guacamole.io.GuacamoleReader;
+import org.apache.guacamole.io.ReaderGuacamoleReader;
+import org.apache.guacamole.language.TranslatableMessage;
+import org.apache.guacamole.net.auth.ActivityLog;
+import org.apache.guacamole.net.auth.ConnectionRecord;
+import org.apache.guacamole.net.auth.DelegatingConnectionRecord;
+import org.apache.guacamole.net.auth.FileActivityLog;
+import org.apache.guacamole.properties.FileGuacamoleProperty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * ConnectionRecord implementation that automatically defines ActivityLogs for
+ * files that relate to the wrapped record.
+ */
+public class HistoryConnectionRecord extends DelegatingConnectionRecord {
+
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(HistoryConnectionRecord.class);
+
+    /**
+     * The namespace for URL UUIDs as defined by RFC 4122.
+     */
+    private static final UUID UUID_NAMESPACE_URL = UUID.fromString(""6ba7b811-9dad-11d1-80b4-00c04fd430c8"");
+
+    /**
+     * The filename suffix of typescript timing files.
+     */
+    private static final String TIMING_FILE_SUFFIX = "".timing"";
+
+    /**
+     * The default directory to search for associated session recordings, if
+     * not overridden with the ""recording-search-path"" property.
+     */
+    private static final File DEFAULT_RECORDING_SEARCH_PATH = new File(""/var/lib/guacamole/recordings"");
+
+    /**
+     * The directory to search for associated session recordings. By default,
+     * ""/var/lib/guacamole/recordings"" will be used.
+     */
+    private static final FileGuacamoleProperty RECORDING_SEARCH_PATH = new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() {
+            return ""recording-search-path"";
+        }
+
+    };
+
+    /**
+     * The recording file associated with the wrapped connection record. This
+     * may be a single file or a directory that may contain any number of
+     * relevant recordings.
+     */
+    private final File recording;
+
+    /**
+     * Creates a new HistoryConnectionRecord that wraps the given
+     * ConnectionRecord, automatically associating ActivityLogs based on
+     * related files (session recordings, typescripts, etc.).
+     *
+     * @param record
+     *     The ConnectionRecord to wrap.
+     *
+     * @throws GuacamoleException
+     *     If the configured path for stored recordings cannot be read.
+     */
+    public HistoryConnectionRecord(ConnectionRecord record) throws GuacamoleException {
+        super(record);
+
+        Environment environment = LocalEnvironment.getInstance();
+        File recordingPath = environment.getProperty(RECORDING_SEARCH_PATH,
+                DEFAULT_RECORDING_SEARCH_PATH);
+
+        String uuid = record.getUUID().toString();
+        File recordingFile = new File(recordingPath, uuid);
+        this.recording = recordingFile.canRead() ? recordingFile : null;
+
+    }
+
+    /**
+     * Returns whether the given file appears to be a Guacamole session
+     * recording. As there is no standard extension for session recordings,
+     * this is determined by attempting to read a single Guacamole instruction
+     * from the file.
+     *
+     * @param file
+     *     The file to test.
+     *
+     * @return
+     *     true if the file appears to be a Guacamole session recording, false
+     *     otherwise.
+     */
+    private boolean isSessionRecording(File file) {
+
+        try (Reader reader = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8)) {
+
+            GuacamoleReader guacReader = new ReaderGuacamoleReader(reader);
+            if (guacReader.readInstruction() != null)
+                return true;
+
+        }
+        catch (GuacamoleException e) {
+            logger.debug(""File \""{}\"" does not appear to be a session ""
+                    + ""recording, as it could not be parsed as Guacamole ""
+                    + ""protocol data."", file, e);
+        }
+        catch (IOException e) {
+            logger.warn(""Possible session recording \""{}\"" could not be ""
+                    + ""identified as it cannot be read: {}"", file, e.getMessage());
+            logger.debug(""Possible session recording \""{}\"" could not be read."", file, e);
+        }
+
+        return false;
+
+    }
+
+    /**
+     * Returns whether the given file appears to be a typescript (text
+     * recording of a terminal session). As there is no standard extension for
+     * session recordings, this is determined by testing whether there is an
+     * associated timing file. Guacamole will always include a timing file for
+     * its typescripts.
+     *
+     * @param file
+     *     The file to test.
+     *
+     * @return
+     *     true if the file appears to be a typescript, false otherwise.
+     */
+    private boolean isTypescript(File file) {
+        return new File(file.getAbsolutePath() + TIMING_FILE_SUFFIX).exists();
+    }
+
+    /**
+     * Returns whether the given file appears to be a typescript timing file.
+     * Typescript timing files have the standard extension "".timing"".
+     *
+     * @param file
+     *     The file to test.
+     *
+     * @return
+     *     true if the file appears to be a typescript timing file, false
+     *     otherwise.
+     */
+    private boolean isTypescriptTiming(File file) {
+        return file.getName().endsWith(TIMING_FILE_SUFFIX);
+    }
+
+    /**
+     * Returns the type of session recording or log contained within the given
+     * file by inspecting its name and contents.
+     *
+     * @param file
+     *     The file to test.
+     *
+     * @return
+     *     The type of session recording or log contained within the given
+     *     file, or null if this cannot be determined.
+     */
+    private ActivityLog.Type getType(File file) {
+
+        if (isSessionRecording(file))
+            return ActivityLog.Type.GUACAMOLE_SESSION_RECORDING;
+
+        if (isTypescript(file))
+            return ActivityLog.Type.TYPESCRIPT;
+
+        if (isTypescriptTiming(file))
+            return ActivityLog.Type.TYPESCRIPT_TIMING;
+
+        return ActivityLog.Type.SERVER_LOG;
+
+    }
+
+    /**
+     * Returns a new ActivityLog instance representing the session recording or
+     * log contained within the given file. If the type of recording/log cannot
+     * be determined, or if the file is unreadable, null is returned.
+     *
+     * @param file
+     *     The file to produce an ActivityLog instance for.
+     *
+     * @return
+     *     A new ActivityLog instance representing the recording/log contained
+     *     within the given file, or null if the file is unreadable or cannot
+     *     be identified.
+     */
+    private ActivityLog getActivityLog(File file) {
+
+        // Verify file can actually be read
+        if (!file.canRead()) {
+            logger.warn(""Ignoring file \""{}\"" relevant to connection history ""
+                    + ""record as it cannot be read."", file);
+            return null;
+        }
+
+        // Determine type of recording/log by inspecting file
+        ActivityLog.Type logType = getType(file);
+        if (logType == null) {
+            logger.warn(""Recording/log type of \""{}\"" cannot be determined."", file);
+            return null;
+        }","[{'comment': 'It looks to me like `getType()` will never return `null`, so this should actually never be `null`? See comment above about return value.', 'commenter': 'necouchman'}]"
698,guacamole/src/main/frontend/src/app/rest/types/ActivityLog.js,"@@ -0,0 +1,89 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service which defines the ActivityLog class.
+ */
+angular.module('rest').factory('ActivityLog', [function defineActivityLog() {
+
+    /**
+     * The object returned by REST API calls when representing the a log or","[{'comment': '`the a log`', 'commenter': 'necouchman'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
698,guacamole/src/main/frontend/src/app/rest/types/ConnectionHistoryEntry.js,"@@ -38,6 +38,23 @@ angular.module('rest').factory('ConnectionHistoryEntry', [function defineConnect
         // Use empty object by default
         template = template || {};
 
+        /**
+         * An arbitrary unique identifier that uniquely identifies this record","[{'comment': 'It would be odd to have a unique identifier that did not uniquely identify this record.', 'commenter': 'necouchman'}, {'comment': 'I agree this sounds pretty redundant, but I also think it\'s important to highlight the specific scope of the identifier\'s uniqueness. I\'ll reword to ""arbitrary identifier that uniquely identifies"".', 'commenter': 'mike-jumper'}]"
698,guacamole/src/main/java/org/apache/guacamole/rest/history/APIActivityRecord.java,"@@ -55,6 +58,30 @@
      */
     private final boolean active;
 
+    /**
+     * The unique identifier assigned to this record, or null if this record
+     * has no such identifier.
+     */
+    private final String identifier;
+    
+    /**
+     * A UUID uniquely identifies this record, or null if no such unique","[{'comment': '`UUID` _that_ `uniquely identifies`....although, given my earlier comment even that could be redundant...', 'commenter': 'necouchman'}, {'comment': 'Oops - I\'ll add that ""that"".\r\n\r\nI think ""uniquely identifies"" should remain, as it is specifically this record that is uniquely identified. The value _should_ be unique relative to all possible UUIDs, but the specification for the record UUIDs given by `getUUID()` of `ActivityRecord` allows some wiggle room here so long as it\'s at least unique relative to other records in the same set.', 'commenter': 'mike-jumper'}]"
698,guacamole/src/main/java/org/apache/guacamole/rest/history/ActivityLogResource.java,"@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest.history;
+
+import javax.ws.rs.GET;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.Response.ResponseBuilder;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.net.auth.ActivityLog;
+
+/**
+ * A REST resource which exposes the contents of a given ActivityLog.
+ */
+public class ActivityLogResource {
+
+    /**
+     * The ActivityLog whose contents are being exposed.
+     */
+    private final ActivityLog log;
+
+    /**
+     * Creates a new ActivityRecordSetResource which exposes the records within
+     * the given ActivityRecordSet.","[{'comment': 'Yum....copy pasta? I think this is an `ActivityLogResource` exposing the given `ActivityLog`?', 'commenter': 'necouchman'}, {'comment': 'Yup - definitely copypasta.', 'commenter': 'mike-jumper'}]"
698,guacamole/src/main/java/org/apache/guacamole/rest/history/ActivityLogResource.java,"@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest.history;
+
+import javax.ws.rs.GET;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.Response.ResponseBuilder;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.net.auth.ActivityLog;
+
+/**
+ * A REST resource which exposes the contents of a given ActivityLog.
+ */
+public class ActivityLogResource {
+
+    /**
+     * The ActivityLog whose contents are being exposed.
+     */
+    private final ActivityLog log;
+
+    /**
+     * Creates a new ActivityRecordSetResource which exposes the records within
+     * the given ActivityRecordSet.
+     *
+     * @param log
+     *     The ActivityLog whose contents should be exposed.
+     */
+    public ActivityLogResource(ActivityLog log) {
+        this.log = log;
+    }
+
+    /**
+     * Returns the raw contents of the underlying ActivityLog. If the size of
+     * the ActivityLog is known, this size is included as the ""Content-Length""
+     * of the response.
+     *
+     * @return
+     *     A Response containing the raw contents of the underlying
+     *     ActivityLog.
+     *
+     * @throws GuacamoleException
+     *     If an error prevents retrieving the content of the log or its size.
+     */
+    @GET
+    public Response getContents() throws GuacamoleException {
+
+        // Build base response exposing the raw contents of the underlying log
+        ResponseBuilder response = Response.ok(log.getContent(),
+                log.getType().getContentType());
+
+        // Include size, if knopwn","[{'comment': 'Silent ""p""?', 'commenter': 'necouchman'}, {'comment': 'Nah, this one is a loud ""p"", and it must be spoken with as much volume and enunciation as possible.\r\n\r\nAlso yes. I\'ll pfix this...', 'commenter': 'mike-jumper'}]"
698,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ActivityRecordMapper.java,"@@ -0,0 +1,147 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.base;
+
+import java.util.Collection;
+import java.util.List;
+import org.apache.guacamole.auth.jdbc.user.UserModel;
+import org.apache.ibatis.annotations.Param;
+
+/**
+ * Common interface for mapping activity records.
+ *
+ * @param <ModelType>
+ *     The type of model object representing the activity records mapped by
+ *     this mapper.
+ */
+public interface ActivityRecordMapper<ModelType> {
+
+    /**
+     * Inserts the given activity record.
+     *
+     * @param record
+     *     The activity record to insert.
+     *
+     * @return
+     *     The number of rows inserted.
+     */
+    int insert(@Param(""record"") ModelType record);
+
+    /**
+     * Updates the given activity record in the database, assigning an end
+     * date. No column of the existing activity record is updated except for
+     * the end date. If the record does not actually exist, this operation has
+     * no effect.
+     *
+     * @param record
+     *     The activity record to update.
+     *
+     * @return
+     *     The number of rows updated.
+     */
+    int updateEndDate(@Param(""record"") ModelType record);
+
+    /**
+     * Searches for up to <code>limit</code> activity records that contain
+     * the given terms, sorted by the given predicates, regardless of whether
+     * the data they are associated with is is readable by any particular user.","[{'comment': 'One is will suffice.', 'commenter': 'necouchman'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
698,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ActivityRecordMapper.java,"@@ -0,0 +1,147 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.base;
+
+import java.util.Collection;
+import java.util.List;
+import org.apache.guacamole.auth.jdbc.user.UserModel;
+import org.apache.ibatis.annotations.Param;
+
+/**
+ * Common interface for mapping activity records.
+ *
+ * @param <ModelType>
+ *     The type of model object representing the activity records mapped by
+ *     this mapper.
+ */
+public interface ActivityRecordMapper<ModelType> {
+
+    /**
+     * Inserts the given activity record.
+     *
+     * @param record
+     *     The activity record to insert.
+     *
+     * @return
+     *     The number of rows inserted.
+     */
+    int insert(@Param(""record"") ModelType record);
+
+    /**
+     * Updates the given activity record in the database, assigning an end
+     * date. No column of the existing activity record is updated except for
+     * the end date. If the record does not actually exist, this operation has
+     * no effect.
+     *
+     * @param record
+     *     The activity record to update.
+     *
+     * @return
+     *     The number of rows updated.
+     */
+    int updateEndDate(@Param(""record"") ModelType record);
+
+    /**
+     * Searches for up to <code>limit</code> activity records that contain
+     * the given terms, sorted by the given predicates, regardless of whether
+     * the data they are associated with is is readable by any particular user.
+     * This should only be called on behalf of a system administrator. If
+     * records are needed by a non-administrative user who must have explicit
+     * read rights, use {@link searchReadable()} instead.
+     *
+     * @param identifier
+     *     The optional identifier of the object whose history is being
+     *     retrieved, or null if records related to any such object should be
+     *     retrieved.
+     *
+     * @param recordIdentifier
+     *     The identifier of the specific history record to retrieve, if not
+     *     all matching records. Search terms, etc. will still be applied to
+     *     the single record.
+     *
+     * @param terms
+     *     The search terms that must match the returned records.
+     *
+     * @param sortPredicates
+     *     A list of predicates to sort the returned records by, in order of
+     *     priority.
+     *
+     * @param limit
+     *     The maximum number of records that should be returned.","[{'comment': ""Are there any special values that should be documented, here - 0 for no limit, or limits that won't be effective past a certain number?"", 'commenter': 'necouchman'}, {'comment': 'Nope - a limit value must always be supplied and will be enforced.', 'commenter': 'mike-jumper'}]"
698,guacamole/src/main/java/org/apache/guacamole/rest/history/ActivityLogResource.java,"@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest.history;
+
+import javax.ws.rs.GET;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.Response.ResponseBuilder;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.net.auth.ActivityLog;
+
+/**
+ * A REST resource which exposes the contents of a given ActivityLog.
+ */
+public class ActivityLogResource {
+
+    /**
+     * The ActivityLog whose contents are being exposed.
+     */
+    private final ActivityLog log;
+
+    /**
+     * Creates a new ActivityLogSetResource which exposes the records within
+     * the given ActivityLogSet.","[{'comment': '`ActivityLogSetResource` -> `ActivityLogResource`\r\n`ActivityLogSet` -> `ActivityLog`', 'commenter': 'necouchman'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
717,guacamole-docker/README.md,"@@ -55,31 +55,31 @@ Deploying Guacamole with PostgreSQL authentication
 --------------------------------------------------
 
     docker run --name some-guacamole --link some-guacd:guacd \
-        --link some-postgres:postgres      \
-        -e POSTGRES_DATABASE=guacamole_db  \
-        -e POSTGRES_USER=guacamole_user    \
-        -e POSTGRES_PASSWORD=some_password \
-        -e POSTGRES_DATABASE_FILE=/run/secrets/<secret_name> \
-        -e POSTGRES_USER_FILE=/run/secrets/<secret_name> \
-        -e POSTGRES_PASSWORD_FILE=/run/secrets/<secret_name> \
+        --link some-postgresql:postgresql      \","[{'comment': ""This particular line may actually need to not be changed - my guess is that `postgres` is the default name of the container for PostgreSQL databases. Also, this doesn't really match up to any `guacamole.properties` entries.\r\n\r\n@mike-jumper Thoughts on this one?"", 'commenter': 'necouchman'}, {'comment': ""Yes, I've hesitated too when doing the changes but I thought it may be less error-prone if everything is named postresql instead of postgres only for the link. I can revert this part if you prefer.\r\nWhat about the username variable ?"", 'commenter': 'jbpaux'}, {'comment': '> This particular line may actually need to not be changed ... Thoughts on this one?\r\n\r\nHm ... I\'m not sure off-hand. Most of my Docker deployments have been docker-compose for a while, and I recall someone mentioning that Docker had deprecated `--link`.\r\n\r\nI think the ""postgresql"" part is used by Docker to generate environment variables, and so would need to match whatever the container uses.', 'commenter': 'mike-jumper'}, {'comment': ""Originally, the `POSTGRES_*` prefix was chosen despite the property names to match the similar environment variables used by Docker's official `postgres` container. Aligning things universally with properties makes sense and would allow some automation for setting properties (via the environment properties feature).\r\n\r\nThere will be pain for anyone using the old variables. If we do this, it's probably worth adding compatibility for the `POSTGRES_` prefix and `--postgres` option."", 'commenter': 'mike-jumper'}, {'comment': '`--link` is deprecated according to this [Legacy Container links](https://docs.docker.com/network/links/) but it\'s still working.  No sure how many people are using it.\r\nIf it should be removed, it should be removed in another issue/PR.\r\n\r\nThe `--link some-postgresql:postgresql ` means that environment variables for the ports are generated using the `<name>_PORT_<port>_<protocol>` format where `<name>` is the name of the last part of the link (`postgresql`) for us but `postgres` before my change.\r\n\r\nWe can add compatibility for older environment variable names but at some point it will be removed and will break for some people, maybe it\'s ""easier"" to add it in compatibility change when the image will be released so people can see it explicitely. They\'ll need to do this change at some point if we want to align everything.\r\n\r\nIf we don\'t want to align everything, we must solve the otherway and rename the few environment variables using `POSTGRESQL_*` to `POSTGRES_*` because it doesn\'t make sense to have some using one syntax and other using the other.', 'commenter': 'jbpaux'}, {'comment': ""Yes `--link` is deprecated but can still be used. If you want to remove them I guess it will be done in another issue/PR. See more on [Legacy container links](https://docs.docker.com/network/links/). The environment variables related to the link are generated from the last part of the `--link mypostgres:postgres` which results in `<name>_PORT_<port>_<protocol>` variable and `<name>_NAME` variable. So in our case `postgres`. In the PR I've renamed it too so it's consistent with other variable names but it's just to make it prettier.\r\n\r\nFor the other variables, renaming them from `POSTGRES_` to `POSTGRESSQL_` will of course break current deployment. If needed we can have both but I can imagine it will be removed one day and it will cause the same issue. It would maybe be easier to point it in the release notes that the variables changed their names and need to be changed in docker compose etc.\r\nHow do you want to move forward on it ?"", 'commenter': 'jbpaux'}, {'comment': '@jbpaux I agree that removing link is different in scope from this, so no need to worry about that.\r\n\r\nFor the renaming, I would think something simple at the beginning of the script that checks for the old variables and assigns the values to the new variables would probably work? That way the remaining checks, here, would only have to consider a single set of variables - the ""correctly"" named ones.', 'commenter': 'necouchman'}, {'comment': ""I did it, it's long but should work as expected 😅"", 'commenter': 'jbpaux'}]"
717,guacamole-docker/bin/start.sh,"@@ -251,40 +251,97 @@ environment variables or their corresponding Docker secrets by appending _FILE
 to the environment variable, and setting the value to the path of the
 corresponding secret:
 
-    POSTGRES_USER      The user to authenticate as when connecting to
+    POSTGRESQL_USER      The user to authenticate as when connecting to
                        PostgreSQL.
 
-    POSTGRES_PASSWORD  The password to use when authenticating with PostgreSQL
-                       as POSTGRES_USER.
+    POSTGRESQL_PASSWORD  The password to use when authenticating with PostgreSQL
+                       as POSTGRESQL_USER.
 
-    POSTGRES_DATABASE  The name of the PostgreSQL database to use for Guacamole
+    POSTGRESQL_DATABASE  The name of the PostgreSQL database to use for Guacamole
                        authentication.
 END
     exit 1;
 }
 
+## Provide backward compatibility on POSTGRES_* environment variables
+## In case of new deployment, please use POSTGRESQL_* equivalent variables.
+if [ -n ""$POSTGRES_HOSTNAME"" ]; then
+    POSTGRESQL_HOSTNAME=$POSTGRES_HOSTNAME;
+fi
+if [ -n ""$POSTGRES_PORT"" ]; then
+    POSTGRESQL_PORT=$POSTGRES_PORT;
+fi
+if [ -n ""$POSTGRES_DATABASE"" ]; then
+    POSTGRESQL_DATABASE=$POSTGRES_DATABASE;
+fi
+if [ -n ""$POSTGRES_DATABASE_FILE"" ]; then
+    POSTGRESQL_DATABASE=$POSTGRES_DATABASE_FILE;
+fi
+if [ -n ""$POSTGRES_USER_FILE"" ]; then
+    POSTGRESQL_USER_FILE=$POSTGRES_USER_FILE;
+fi
+if [ -n ""$POSTGRES_USER"" ]; then
+    POSTGRESQL_USER=$POSTGRES_USER;
+fi
+if [ -n ""$POSTGRES_PASSWORD_FILE"" ]; then
+    POSTGRESQL_PASSWORD_FILE=$POSTGRES_PASSWORD_FILE;
+fi
+if [ -n ""$POSTGRES_PASSWORD"" ]; then
+    POSTGRESQL_PASSWORD=$POSTGRES_PASSWORD;
+fi
+if [ -n ""$POSTGRES_ABSOLUTE_MAX_CONNECTIONS"" ]; then
+    POSTGRESQL_ABSOLUTE_MAX_CONNECTIONS=$POSTGRES_ABSOLUTE_MAX_CONNECTIONS;
+fi
+if [ -n ""$POSTGRES_DEFAULT_MAX_CONNECTIONS"" ]; then
+    POSTGRESQL_DEFAULT_MAX_CONNECTIONS=$POSTGRES_DEFAULT_MAX_CONNECTIONS;
+fi
+if [ -n ""$POSTGRES_DEFAULT_MAX_GROUP_CONNECTIONS"" ]; then
+    POSTGRESQL_DEFAULT_MAX_GROUP_CONNECTIONS=$POSTGRES_DEFAULT_MAX_GROUP_CONNECTIONS;
+fi
+if [ -n ""$POSTGRES_DEFAULT_MAX_CONNECTIONS_PER_USER"" ]; then
+    POSTGRESQL_DEFAULT_MAX_CONNECTIONS_PER_USER=$POSTGRES_DEFAULT_MAX_CONNECTIONS_PER_USER;
+fi
+if [ -n ""$POSTGRES_DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER"" ]; then
+    POSTGRESQL_DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER=$POSTGRES_DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER;
+fi
+if [ -n ""$POSTGRES_DEFAULT_STATEMENT_TIMEOUT"" ]; then
+    POSTGRESQL_DEFAULT_STATEMENT_TIMEOUT=$POSTGRES_DEFAULT_STATEMENT_TIMEOUT;
+fi
+if [ -n ""$POSTGRES_USER_REQUIRED"" ]; then
+    POSTGRESQL_USER_REQUIRED=$POSTGRES_USER_REQUIRED;
+fi
+if [ -n ""$POSTGRES_SOCKET_TIMEOUT"" ]; then
+    POSTGRESQL_SOCKET_TIMEOUT=$POSTGRES_SOCKET_TIMEOUT;
+fi
+if [ -n ""$POSTGRES_SSL_KEY_PASSWORD_FILE"" ]; then
+    POSTGRESQL_SSL_KEY_PASSWORD_FILE=$POSTGRES_SSL_KEY_PASSWORD_FILE;
+fi
+if [ -n ""$POSTGRES_SSL_KEY_PASSWORD"" ]; then
+    POSTGRESQL_SSL_KEY_PASSWORD=$POSTGRES_SSL_KEY_PASSWORD;
+fi","[{'comment': 'This is lengthy indeed. I think it would be better here to:\r\n\r\n1. Leverage indirect references so we can use a loop and not copy/paste the same `if` block repeatedly.\r\n2. Add a warning message about the deprecation and recommend migration.\r\n\r\nFor example:\r\n\r\n```bash\r\nfor VAR_BASE in \\\r\n    HOSTNAME PORT \\\r\n    DATABASE USER PASSWORD \\\r\n    DATABASE_FILE USER_FILE PASSWORD_FILE \\\r\n    ...; do\r\n\r\n        OLD_VAR=""POSTGRES_$VAR_BASE""\r\n        NEW_VAR=""POSTGRESQL_$VAR_BASE""\r\n\r\n        if [ -n ""${!OLD_VAR}"" ]; then\r\n            printf -v ""$NEW_VAR"" ""%s"" ""${!OLD_VAR}""\r\n            echo ""Some warning about new vs. old...""\r\n        fi\r\n\r\ndone', 'commenter': 'mike-jumper'}, {'comment': ""I thought of that but do we assume `printf -v` is available ? `/bin/sh` is used and I wasn't sure it was ok."", 'commenter': 'jbpaux'}, {'comment': 'What happened when you tested against the `/bin/sh` present in the Docker container?', 'commenter': 'mike-jumper'}, {'comment': 'Just had a look on it.\r\n`/bin/sh` is a link to `/bin/dash`, not `/bin/bash`\r\nLaunching the script as is throw an error `/opt/guacamole/bin/start.sh: 337: Bad substitution` corresponding to this line:\r\n```bash\r\n        if [ -n ""${!OLD_VAR}"" ]; then\r\n```\r\n\r\nIt\'s working fine when using `/bin/bash` instead.\r\nSo I\'m wondering if we should switch to `/bin/bash` as it\'s available or find another method.', 'commenter': 'jbpaux'}, {'comment': 'any comment @mike-jumper ?', 'commenter': 'jbpaux'}, {'comment': 'up ? @mike-jumper ', 'commenter': 'jbpaux'}, {'comment': 'Whoops - hey there, @jbpaux.\r\n\r\nIf `/bin/bash` is already available, then that seems by far the best solution. Really anything that avoids having to manually list each mapping of old/new var would be really nice. To me, the important thing is to avoid having such a large, manually-maintained list of ifs.', 'commenter': 'mike-jumper'}, {'comment': ""Ok, so here we go I switched to `/bin/bash`. I also think it's better to make the list dynamic."", 'commenter': 'jbpaux'}]"
717,guacamole-docker/bin/start.sh,"@@ -251,40 +251,97 @@ environment variables or their corresponding Docker secrets by appending _FILE
 to the environment variable, and setting the value to the path of the
 corresponding secret:
 
-    POSTGRES_USER      The user to authenticate as when connecting to
+    POSTGRESQL_USER      The user to authenticate as when connecting to
                        PostgreSQL.
 
-    POSTGRES_PASSWORD  The password to use when authenticating with PostgreSQL
-                       as POSTGRES_USER.
+    POSTGRESQL_PASSWORD  The password to use when authenticating with PostgreSQL
+                       as POSTGRESQL_USER.
 
-    POSTGRES_DATABASE  The name of the PostgreSQL database to use for Guacamole
+    POSTGRESQL_DATABASE  The name of the PostgreSQL database to use for Guacamole
                        authentication.","[{'comment': 'Beware that these have become misaligned with the addition of the QL.', 'commenter': 'mike-jumper'}, {'comment': 'No sure I understand what need to be changed here. Can you be more explicit ? Thank you @mike-jumper :)', 'commenter': 'jbpaux'}, {'comment': 'The indented following lines should be aligned with the lines above, but that\'s no longer the case with the addition of the extra ""QL"" in the variable name. \r\n\r\nSo the following lines, like ""authentication."", should all be indented by 2 additional characters so that they line up again.', 'commenter': 'jmuehlner'}, {'comment': ""Oh ok I see and fixed. :) Should be good now. I'll tackle the guacamole-manual after that to reflect the changes."", 'commenter': 'jbpaux'}]"
730,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/HistoryTrackingConnectionDirectory.java,"@@ -0,0 +1,85 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordMapper;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.User;
+
+/**
+ * A connection directory that returns HistoryTrackingConnection-wrapped connections
+ * when queried.
+ */
+public class HistoryTrackingConnectionDirectory extends DelegatingDirectory<Connection> {","[{'comment': 'This should instead extend `DecoratingDirectory`.\r\n\r\nThe `update()` function of `Directory` needs to receive the same object returned by `get()` of that `Directory` implementation. If a decorated `Directory` returns a different object from `get()`, it needs to unwrap that object and return the original within `update()`. The `DecoratingDirectory` convenience object does that for you.', 'commenter': 'mike-jumper'}, {'comment': 'Done.', 'commenter': 'jmuehlner'}]"
730,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/HistoryTrackingUserContext.java,"@@ -0,0 +1,74 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordMapper;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingUserContext;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.UserContext;
+
+/**
+ * DelegatingUserContext implementation which writes connection history records
+ * when connections are established and closed.
+ */
+public class HistoryTrackingUserContext extends DelegatingUserContext {
+
+    /**
+     * The remote host that the user associated with the user context
+     * connected from.
+     */
+    private final String remoteHost;
+
+    /**
+     * The connection record mapper to use when writing history entries for
+     * established connections.
+     */
+    private final ConnectionRecordMapper connectionRecordMapper;
+
+    /**
+     * Creates a new HistoryTrackingUserContext which wraps the given
+     * UserContext, allowing for tracking of connection history external to
+     * this authentication provider.
+     *
+     * @param userContext
+     *     The UserContext to wrap.
+     *
+     * @param string
+     *
+     * @param connectionRecordMapper
+     *     The mapper to use when writing connection history entries to the DB.
+     */
+    public HistoryTrackingUserContext(UserContext userContext, String remoteHost, ConnectionRecordMapper connectionRecordMapper) {
+        super(userContext);
+
+        this.remoteHost = remoteHost;
+        this.connectionRecordMapper = connectionRecordMapper;
+    }
+
+    @Override
+    public Directory<Connection> getConnectionDirectory() throws GuacamoleException {
+        return new HistoryTrackingConnectionDirectory(
+                super.getConnectionDirectory(), this.self(),","[{'comment': 'Why `super` for `getConnectionDirectory()` but `this` for `self()`? Why not just `getConnectionDirectory()` and `self()`?', 'commenter': 'mike-jumper'}, {'comment': 'Sure', 'commenter': 'jmuehlner'}, {'comment': 'Well, I mean, I still need `super` or my stack will overflow.', 'commenter': 'jmuehlner'}, {'comment': 'Ah, right right right ...', 'commenter': 'mike-jumper'}]"
730,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/connection/ModeledConnection.java,"@@ -505,4 +506,13 @@ public boolean isFailoverOnly() {
         return getModel().isFailoverOnly();
     }
 
+    /**
+     * Returns the JDBC environment associated with this connection.
+     *
+     * @return the JDBC environment associated with this connection.
+     */
+    public JDBCEnvironment gEnvironment() {
+        return this.environment;
+    }","[{'comment': 'Is this called anywhere? If not, this should be removed. If it is, then:\r\n\r\n1. Please format the JavaDoc to match the formatting used elsewhere (new line after `@return`, sentence case for the info that follows, indented).\r\n2. This should be `getEnvironment()`.', 'commenter': 'mike-jumper'}, {'comment': ""Oh, oops. Did not mean to include this. I'll remove."", 'commenter': 'jmuehlner'}]"
730,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLGuacamoleProperties.java,"@@ -202,79 +202,92 @@ private PostgreSQLGuacamoleProperties() {}
         public String getName() { return ""postgresql-default-max-group-connections-per-user""; }
 
     };
-    
+
     /**
      * The SSL mode that should be used by the JDBC driver when making
      * connections to the remote server.  By default SSL will be attempted but
      * plain-text will be allowed if SSL fails.
      */
     public static final EnumGuacamoleProperty<PostgreSQLSSLMode> POSTGRESQL_SSL_MODE =
             new EnumGuacamoleProperty<PostgreSQLSSLMode>(PostgreSQLSSLMode.class) {
-        
+
         @Override
         public String getName() { return ""postgresql-ssl-mode""; }
-        
+
     };
-    
+
     /**
      * The client SSL certificate file used by the JDBC driver to make the
      * SSL connection.
      */
     public static final FileGuacamoleProperty POSTGRESQL_SSL_CERT_FILE =
             new FileGuacamoleProperty() {
-             
+
         @Override
         public String getName() { return ""postgresql-ssl-cert-file""; }
-                
+
     };
-    
+
     /**
      * The client SSL private key file used by the JDBC driver to make the
      * SSL connection.
      */
     public static final FileGuacamoleProperty POSTGRESQL_SSL_KEY_FILE =
             new FileGuacamoleProperty() {
-    
+
         @Override
         public String getName() { return ""postgresql-ssl-key-file""; }
-        
+
     };
-    
+
     /**
      * The client SSL root certificate file used by the JDBC driver to validate
      * certificates when making the SSL connection.
      */
     public static final FileGuacamoleProperty POSTGRESQL_SSL_ROOT_CERT_FILE =
             new FileGuacamoleProperty() {
-        
+
         @Override
         public String getName() { return ""postgresql-ssl-root-cert-file""; }
-        
+
     };
-    
+
     /**
      * The password of the SSL private key used by the JDBC driver to make
      * the SSL connection to the PostgreSQL server.
      */
     public static final StringGuacamoleProperty POSTGRESQL_SSL_KEY_PASSWORD =
             new StringGuacamoleProperty() {
-        
+
         @Override
         public String getName() { return ""postgresql-ssl-key-password""; }
-        
+
     };
-    
+
     /**
      * Whether or not to automatically create accounts in the PostgreSQL
      * database for users who successfully authenticate through another
      * extension. By default users will not be automatically created.
      */
     public static final BooleanGuacamoleProperty POSTGRESQL_AUTO_CREATE_ACCOUNTS =
             new BooleanGuacamoleProperty() {
-                
+
         @Override
         public String getName() { return ""postgresql-auto-create-accounts""; }
-                
+
     };
-    
+
+    /**
+     * Whether or not to track connection history for connections that do not originate
+     * from within the Postgres database. By default, external connection history will be
+     * tracked.
+     */
+    public static final BooleanGuacamoleProperty POSTGRESQL_TRACK_EXTERNAL_CONNECTION_HISTORY =
+            new BooleanGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""postgres-track-external-connection-history""; }","[{'comment': 'This should be `postgresql-*` for consistency.', 'commenter': 'mike-jumper'}]"
730,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/UserContext.java,"@@ -103,7 +103,7 @@ public interface UserContext {
      * connections and their configurations, but only as allowed by the
      * permissions given to the user.
      *
-     * @return A Directory whose operations are bound by the permissions of 
+     * @return A Directory whose operations are bound by the permissions of","[{'comment': 'Why is this file modified?', 'commenter': 'mike-jumper'}, {'comment': ""It shouldn't be! Un-modified."", 'commenter': 'jmuehlner'}]"
730,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/HistoryTrackingTunnel.java,"@@ -0,0 +1,72 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc;
+
+import java.util.Date;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordMapper;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordModel;
+import org.apache.guacamole.net.DelegatingGuacamoleTunnel;
+import org.apache.guacamole.net.GuacamoleTunnel;
+
+/**
+ * Tunnel implementation which automatically writes an end date for the
+ * provided connection history record model using the provided connection
+ * history mapper, when the tunnel is closed.
+ */
+public class HistoryTrackingTunnel extends DelegatingGuacamoleTunnel {
+
+    /**
+     * The connection for which this tunnel was established.
+     */
+    private final ConnectionRecordMapper connectionRecordMapper;
+
+    /**
+     * The user for which this tunnel was established.
+     */
+    private final ConnectionRecordModel connectionRecordModel;
+
+    /**
+     * Creates a new HistoryTrackingTunnel that wraps the given tunnel,
+     * automatically setting the end date for the provided connection history records,
+     * using the provided connection history record mapper.
+     */","[{'comment': 'Parameter documentation?', 'commenter': 'necouchman'}, {'comment': 'Oops, added!', 'commenter': 'jmuehlner'}]"
730,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/HistoryTrackingUserContext.java,"@@ -0,0 +1,74 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordMapper;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingUserContext;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.UserContext;
+
+/**
+ * DelegatingUserContext implementation which writes connection history records
+ * when connections are established and closed.
+ */
+public class HistoryTrackingUserContext extends DelegatingUserContext {
+
+    /**
+     * The remote host that the user associated with the user context
+     * connected from.
+     */
+    private final String remoteHost;
+
+    /**
+     * The connection record mapper to use when writing history entries for
+     * established connections.
+     */
+    private final ConnectionRecordMapper connectionRecordMapper;
+
+    /**
+     * Creates a new HistoryTrackingUserContext which wraps the given
+     * UserContext, allowing for tracking of connection history external to
+     * this authentication provider.
+     *
+     * @param userContext
+     *     The UserContext to wrap.
+     *
+     * @param string","[{'comment': 'Looks like this identifies the type of parameter instead of the name, and is missing a description.', 'commenter': 'necouchman'}, {'comment': 'Yep, my bad. Fixed now.', 'commenter': 'jmuehlner'}]"
730,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/HistoryTrackingConnection.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc;
+
+import java.util.Date;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordMapper;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordModel;
+import org.apache.guacamole.net.GuacamoleTunnel;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.net.auth.User;
+import org.apache.guacamole.protocol.GuacamoleClientInformation;
+
+/**
+ * Connection implementation that creates a history record when the connection
+ * is established, and returns a HistoryTrackingTunnel to automatically set the
+ * end date when the connection is closed.
+ */
+public class HistoryTrackingConnection extends DelegatingConnection {
+
+    /**
+     * The current Guacamole user.
+     */
+    private final User currentUser;
+
+    /**
+     * The remote host that the user connected from.
+     */
+    private final String remoteHost;
+
+    /**
+     * The connection record mapper to use when writing history entries for
+     * established connections.
+     */
+    private final ConnectionRecordMapper connectionRecordMapper;
+
+    /**
+     * Creates a new HistoryConnection that wraps the given connection,
+     * automatically creating a history record when the connection is
+     * established, and returning a HistoryTrackingTunnel to set the end
+     * date on the history entry when the connection is closed.
+     *
+     * @param currentUser
+     *     The current Guacamole user.
+     *
+     * @param remoteHost
+     *     The remote host that the user connected from.
+     *
+     * @param connection
+     *     The connection to wrap.
+     *
+     * @param connectionRecordMapper
+     *     The connection record mapper that will be used to write the connection history records.
+     */
+    public HistoryTrackingConnection(User currentUser, String remoteHost, Connection connection, ConnectionRecordMapper connectionRecordMapper) {
+        super(connection);
+
+        this.currentUser = currentUser;
+        this.remoteHost = remoteHost;
+        this.connectionRecordMapper = connectionRecordMapper;
+    }
+
+    @Override
+    public GuacamoleTunnel connect(GuacamoleClientInformation info,
+            Map<String, String> tokens) throws GuacamoleException {
+
+        // Connect to the tunnel before writing the history entry, in case it fails
+        GuacamoleTunnel tunnel = super.connect(info, tokens);
+
+        // Create a connection record model, starting at the current date/time
+        ConnectionRecordModel connectionRecordModel = new ConnectionRecordModel();
+        connectionRecordModel.setStartDate(new Date());
+
+        // Set the user information
+        connectionRecordModel.setUsername(this.currentUser.getIdentifier());
+        connectionRecordModel.setRemoteHost(this.remoteHost);
+
+        // Set the connection information
+        connectionRecordModel.setConnectionName(this.getDelegateConnection().getName());
+
+        // Insert the connection history record to mark the start of this connection
+        connectionRecordMapper.insert(connectionRecordModel);
+
+        return new HistoryTrackingTunnel(
+                tunnel, this.connectionRecordMapper, connectionRecordModel);
+    }
+
+    /**
+     * Get the Connection wrapped by this HistoryTrackingConnection.
+     *
+     * @return The wrapped Connection.","[{'comment': 'Please format per convention (newline following `@return`, indent relevant documentation block).', 'commenter': 'mike-jumper'}, {'comment': 'Fixed.', 'commenter': 'jmuehlner'}]"
730,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/HistoryTrackingConnection.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc;
+
+import java.util.Date;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordMapper;
+import org.apache.guacamole.auth.jdbc.connection.ConnectionRecordModel;
+import org.apache.guacamole.net.GuacamoleTunnel;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.net.auth.User;
+import org.apache.guacamole.protocol.GuacamoleClientInformation;
+
+/**
+ * Connection implementation that creates a history record when the connection
+ * is established, and returns a HistoryTrackingTunnel to automatically set the
+ * end date when the connection is closed.
+ */
+public class HistoryTrackingConnection extends DelegatingConnection {
+
+    /**
+     * The current Guacamole user.
+     */
+    private final User currentUser;
+
+    /**
+     * The remote host that the user connected from.
+     */
+    private final String remoteHost;
+
+    /**
+     * The connection record mapper to use when writing history entries for
+     * established connections.
+     */
+    private final ConnectionRecordMapper connectionRecordMapper;
+
+    /**
+     * Creates a new HistoryConnection that wraps the given connection,
+     * automatically creating a history record when the connection is
+     * established, and returning a HistoryTrackingTunnel to set the end
+     * date on the history entry when the connection is closed.
+     *
+     * @param currentUser
+     *     The current Guacamole user.
+     *
+     * @param remoteHost
+     *     The remote host that the user connected from.
+     *
+     * @param connection
+     *     The connection to wrap.
+     *
+     * @param connectionRecordMapper
+     *     The connection record mapper that will be used to write the connection history records.
+     */
+    public HistoryTrackingConnection(User currentUser, String remoteHost, Connection connection, ConnectionRecordMapper connectionRecordMapper) {
+        super(connection);
+
+        this.currentUser = currentUser;
+        this.remoteHost = remoteHost;
+        this.connectionRecordMapper = connectionRecordMapper;
+    }
+
+    @Override
+    public GuacamoleTunnel connect(GuacamoleClientInformation info,
+            Map<String, String> tokens) throws GuacamoleException {
+
+        // Connect to the tunnel before writing the history entry, in case it fails
+        GuacamoleTunnel tunnel = super.connect(info, tokens);
+
+        // Create a connection record model, starting at the current date/time
+        ConnectionRecordModel connectionRecordModel = new ConnectionRecordModel();
+        connectionRecordModel.setStartDate(new Date());
+
+        // Set the user information
+        connectionRecordModel.setUsername(this.currentUser.getIdentifier());
+        connectionRecordModel.setRemoteHost(this.remoteHost);
+
+        // Set the connection information
+        connectionRecordModel.setConnectionName(this.getDelegateConnection().getName());
+
+        // Insert the connection history record to mark the start of this connection
+        connectionRecordMapper.insert(connectionRecordModel);","[{'comment': 'This should happen before `super.connect()` such that `HISTORY_UUID` can be injected as a parameter token:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/b256250720386198273122af551d4d17ce850276/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AbstractGuacamoleTunnelService.java#L463-L465\r\n\r\nIf the above is done, then history records for connections from other extensions may be automatically associated with session recordings. If not, the only history records for connections from the JDBC extension will be able to do this.\r\n\r\nThe UUID is generated from the primary key ID of the inserted history record:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/b256250720386198273122af551d4d17ce850276/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ModeledActivityRecord.java#L114-L128\r\n\r\nhttps://github.com/apache/guacamole-client/blob/b256250720386198273122af551d4d17ce850276/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/connection/ModeledConnectionRecord.java#L46\r\n', 'commenter': 'mike-jumper'}, {'comment': 'Good catch - fixed.', 'commenter': 'jmuehlner'}, {'comment': ""Looks good, but I think you'll still need to manually inject `HISTORY_UUID` here via `tokens`."", 'commenter': 'mike-jumper'}, {'comment': 'Oops yeah, lemme do that.', 'commenter': 'jmuehlner'}, {'comment': ""Ok, it's done."", 'commenter': 'jmuehlner'}]"
734,doc/guacamole-branding-example/guac-manifest.json,"@@ -29,6 +29,7 @@
     },
     
     ""translations"" : [
-        ""translations/en.json""
+        ""translations/en.json"",
+		""translations/fr.json""","[{'comment': ""Two issues, here:\r\n1. Please make sure you use 4-space tabs, in keeping with the standards of the rest of the code.\r\n2. You added the fr.json entry, here, but there is no fr.json file added to this. There's no reason to add entries if you're not going to add the translation file."", 'commenter': 'necouchman'}]"
734,guacamole/src/main/frontend/src/translations/fr.json,"@@ -4,14 +4,18 @@
 
     ""APP"" : {
 
+        ""NAME""    : ""Apache Guacamole"",
+        ""VERSION"" : ""${project.version}"",","[{'comment': 'These two items should not be re-defined in the non-English translation.', 'commenter': 'necouchman'}]"
734,guacamole/src/main/frontend/src/translations/fr.json,"@@ -207,7 +215,7 @@
 
         ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
 
-        ""ERROR_INVALID_LOGIN"" : ""Identifiant Incorrect"",
+        ""ERROR_INVALID_LOGIN"" : ""Identifiant ou mot de passe incorrect"",","[{'comment': ""I'm not sure that this should be translated to an invalid password - this may not always be a password failure. For example, if you are using SSO, Duo, or TOTP, the login failure could occur in something other than a user password. This may be misleading??"", 'commenter': 'necouchman'}]"
734,extensions/guacamole-auth-json/src/main/resources/translations/fr.json,"@@ -0,0 +1,7 @@
+{
+
+    ""DATA_SOURCE_JSON"" : {
+        ""NAME"" : ""JSON""","[{'comment': 'Is this the correct French translation for this? Or just a copy of the English translation?', 'commenter': 'necouchman'}]"
734,extensions/guacamole-auth-ldap/src/main/resources/translations/fr.json,"@@ -0,0 +1,7 @@
+{
+
+    ""DATA_SOURCE_LDAP"" : {
+        ""NAME"" : ""LDAP""","[{'comment': 'Same, here - is this the French translation, or just a copy of the English one?', 'commenter': 'necouchman'}]"
734,extensions/guacamole-auth-radius/src/main/resources/translations/fr.json,"@@ -0,0 +1,13 @@
+{
+
+    ""DATA_SOURCE_RADIUS"" : {
+        ""NAME"" : ""RADIUS Backend""
+    },
+
+    ""LOGIN"" : {
+        ""FIELD_HEADER_GUAC_RADIUS_CHALLENGE_RESPONSE"" : """",
+        ""FIELD_HEADER_GUAC_RADIUS_STATE""              : """",","[{'comment': 'No need to include empty translations.', 'commenter': 'necouchman'}]"
734,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-base/src/main/resources/translations/fr.json,"@@ -1,7 +1,26 @@
 {
 
+    ""DATA_SOURCE_CAS"" : {
+        ""NAME"" : ""CAS SSO Backend""
+    },
+
+    ""DATA_SOURCE_OPENID"" : {
+        ""NAME"" : ""OpenID SSO Backend""
+    },
+
+    ""DATA_SOURCE_SAML"" : {
+        ""NAME"" : ""SAML SSO Backend""
+    },
+
     ""LOGIN"" : {
-        ""INFO_IDP_REDIRECT_PENDING"" : ""Veuillez patienter, redirection vers le fournisseur d'identité...""
+        ""FIELD_HEADER_ID_TOKEN""      : """",
+        ""FIELD_HEADER_STATE""         : """",
+        ""FIELD_HEADER_TICKET""        : """",","[{'comment': 'You can leave out empty strings.', 'commenter': 'necouchman'}]"
736,extensions/guacamole-vault/modules/guacamole-vault-base/src/main/java/org/apache/guacamole/vault/util/FieldParsingUtil.java,"@@ -0,0 +1,163 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.util;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+
+/**
+ * A set of utility methods for parsing field values for records retrieved
+ * from vaults.
+ */
+public class FieldParsingUtil {
+
+    /**
+     * A pattern for matching a down-level logon name containing a Windows
+     * domain and username - e.g. domain\\user. For more information, see
+     * https://docs.microsoft.com/en-us/windows/win32/secauthn/user-name-formats#down-level-logon-name
+     */
+    private static final Pattern DOWN_LEVEL_LOGON_NAME_PATTERN = Pattern.compile(
+            ""(?<domain>[^@\\\\]+)\\\\(?<username>[^@\\\\]+)"");
+
+    /**
+     * A pattern for matching a user principal name containing a Windows
+     * domain and username - e.g. user@domain. For more information, see
+     * https://docs.microsoft.com/en-us/windows/win32/secauthn/user-name-formats#user-principal-name
+     */
+    private static final  Pattern USER_PRINCIPAL_NAME_PATTERN = Pattern.compile(
+            ""(?<username>[^@\\\\]+)@(?<domain>[^@\\\\]+)"");
+
+    /**
+     * A class representating the result of attempting to split a username from
+     * a vault into a Windows domain and username. The username field will always
+     * be set, but if no domain was extracted, the domain field will be null.
+     */
+    public static class DomainAndUsername {
+
+        /**
+         * The username associated with the potential Windows domain/username
+         * value. If no domain is found, the username field will contain the
+         * entire value as read from the vault.
+         */
+        private final String username;
+
+        /**
+         * The dinaun associated with the potential Windows domain/username
+         * value. If no domain is found, this will be null.
+         */
+        private final String domain;
+
+        /**
+         * Create a DomainAndUsername record with no associated domain.
+         *
+         * @param username
+         *     The username, which should be the entire value as extracted
+         *     from the vault.
+         */
+        private DomainAndUsername(@NonNull String username) {
+            this.username = username;
+            this.domain = null;
+        }
+
+        /**
+         * Create a DomainAndUsername record with a username and a domain.
+         *
+         * @param username
+         *     The username portion of the field value from the vault.
+         *
+         * @param domain
+         *     The domain portion of the field value from the vault.
+         */
+        private DomainAndUsername(
+                @NonNull String username, @NonNull String domain) {
+            this.username = username;
+            this.domain = domain;
+        }
+
+        /**
+         * Return the value of the username as extracted from the vault field.
+         * If the domain is null, this will be the entire field value.
+         *
+         * @return
+         *     The username value as extracted from the vault field.
+         */
+        public String getUsername() {
+            return username;
+        }
+
+        /**
+         * Return the value of the domain as extracted from the vault field.
+         * If this is null, it means that no domain was found in the vault field.
+         *
+         * @return
+         *     The domain value as extracted from the vault field.
+         */
+        public String getDomain() {
+            return domain;
+        }
+
+        /**
+         * Return true if a domain was found in the vault field, false otherwise.
+         *
+         * @return
+         */
+        public boolean hasDomain() {
+            return this.domain != null;
+        }
+
+    }
+
+    /**
+     * Strip off a Windows domain from the provided username, if one is
+     * present. For example: ""DOMAIN\\user"" or ""user@DOMAIN"" will both
+     * be stripped to just ""user"". Note: neither the '@' or '\\' characters
+     * are valid in Windows usernames.
+     *
+     * @param vaultField
+     *     The raw field value as retrieved from the vault. This might contain
+     *     a Windows domain.
+     *
+     * @return
+     *     The provided username with the Windows domain stripped off, if one
+     *     is present.
+     */
+    public static DomainAndUsername splitWindowsUsernameFromDomain(String vaultField) {
+
+        // If it's the down-level logon format, return the extracted username and domain
+        Matcher downLevelLogonMatcher = DOWN_LEVEL_LOGON_NAME_PATTERN.matcher(vaultField);
+        if (downLevelLogonMatcher.matches())
+            return new DomainAndUsername(
+                    downLevelLogonMatcher.group(""username""),
+                    downLevelLogonMatcher.group(""domain""));
+
+        // If it's the user principal format, return the extracted username and domain
+        Matcher userPrincipalMatcher = USER_PRINCIPAL_NAME_PATTERN.matcher(vaultField);
+        if (userPrincipalMatcher.matches())
+            return new DomainAndUsername(
+                    userPrincipalMatcher.group(""username""),
+                    userPrincipalMatcher.group(""domain""));
+
+        // If none of the expected formats matched, return the username with do domain
+        return new DomainAndUsername(vaultField);
+
+    }","[{'comment': 'Rather than establish a general parsing utility class for all future parsing needs, I suggest instead just defining `DomainAndUsername` and let it do-one-thing-and-do-it-well. ie:\r\n\r\n`DomainAndUsername.split(someFieldValue)`\r\n\r\nrather than:\r\n\r\n`FieldParsingUtil.DomainAndUsername` and `FieldParsingUtil.splitWindowsUsernameFromDomain(someFieldValue)`.', 'commenter': 'mike-jumper'}, {'comment': 'Sure', 'commenter': 'jmuehlner'}, {'comment': ""It's done."", 'commenter': 'jmuehlner'}]"
736,extensions/guacamole-vault/modules/guacamole-vault-base/src/test/java/org/apache/guacamole/vault/util/FieldParsingUtilTest.java,"@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.util;
+
+import org.apache.guacamole.vault.util.FieldParsingUtil.DomainAndUsername;
+import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.List;
+
+/**
+ * Class to test methods in the QCParser utility class.
+ */
+public class FieldParsingUtilTest {
+
+    /**
+     * Verify that the splitWindowsUsernameFromDomain() method correctly strips Windows
+     * domains from provided usernames that include them, and does not modify
+     * usernames that do not have Windows domains.
+     */
+    @Test
+    public void testSplitWindowsUsernameFromDomain() {
+
+        DomainAndUsername usernameAndDomain;
+
+        // If no Windows domain is present in the provided field, the username should
+        // contain the entire field, and no domain should be returned
+        usernameAndDomain = FieldParsingUtil.splitWindowsUsernameFromDomain(""bob"");
+        assertEquals(usernameAndDomain.getUsername(), ""bob"");
+        assertFalse(usernameAndDomain.hasDomain());
+
+        // It should parse down-level logon name style domains
+        usernameAndDomain = FieldParsingUtil.splitWindowsUsernameFromDomain(""localhost\\bob"");
+        assertEquals(""bob"", usernameAndDomain.getUsername(), ""bob"");
+        assertTrue(usernameAndDomain.hasDomain());
+        assertEquals(""localhost"", usernameAndDomain.getDomain());
+
+        // It should parse user principal name style domains
+        usernameAndDomain = FieldParsingUtil.splitWindowsUsernameFromDomain(""bob@localhost"");
+        assertEquals(""bob"", usernameAndDomain.getUsername(), ""bob"");
+        assertTrue(usernameAndDomain.hasDomain());
+        assertEquals(""localhost"", usernameAndDomain.getDomain());
+
+        // It should not match if there are an invalid number of seperators
+        List<String> invalidSeperators = List.of(","[{'comment': 'separator*', 'commenter': 'mike-jumper'}]"
736,extensions/guacamole-vault/modules/guacamole-vault-base/src/main/java/org/apache/guacamole/vault/secret/DomainAndUsername.java,"@@ -0,0 +1,157 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.secret;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import javax.annotation.Nonnull;
+
+/**
+ * A class that implements to attempts to split a username from a vault into a
+ * Windows domain and username, and stores the result of this operation.","[{'comment': '> A class that implements to attempts to split a username ...\r\n\r\n""Implements to attempts"" sounds odd to me, but either way - this class is a representation of a Windows username, no? It does have a convenience method for splitting a username, but the class itself is the representation of a username and optional domain, not specifically a domain+username parser.', 'commenter': 'mike-jumper'}, {'comment': 'Lemme reword the comment (and rename the class) to make things a bit clearer.', 'commenter': 'jmuehlner'}, {'comment': 'How does this look?', 'commenter': 'jmuehlner'}, {'comment': 'Looks much better.', 'commenter': 'mike-jumper'}]"
736,extensions/guacamole-vault/modules/guacamole-vault-base/src/main/java/org/apache/guacamole/vault/util/FieldParsingUtil.java,"@@ -0,0 +1,163 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.util;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+
+/**
+ * A set of utility methods for parsing field values for records retrieved
+ * from vaults.
+ */
+public class FieldParsingUtil {","[{'comment': 'With `DomainAndUsername` now existing on its own, this class should be deleted.', 'commenter': 'mike-jumper'}, {'comment': 'Ack, sorry. I thought I had done that.', 'commenter': 'jmuehlner'}]"
736,extensions/guacamole-vault/modules/guacamole-vault-base/src/main/java/org/apache/guacamole/vault/secret/WindowsUsername.java,"@@ -0,0 +1,156 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.secret;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import javax.annotation.Nonnull;
+
+/**
+ * A class representing a Windows username, which may optionally also include
+ * a domain. This class can be used to parse the username and domain out of a
+ * username from a vault.
+ */
+public class WindowsUsername {
+
+    /**
+     * A pattern for matching a down-level logon name containing a Windows
+     * domain and username - e.g. domain\\user. For more information, see
+     * https://docs.microsoft.com/en-us/windows/win32/secauthn/user-name-formats#down-level-logon-name
+     */
+    private static final Pattern DOWN_LEVEL_LOGON_NAME_PATTERN = Pattern.compile(
+            ""(?<domain>[^@\\\\]+)\\\\(?<username>[^@\\\\]+)"");
+
+    /**
+     * A pattern for matching a user principal name containing a Windows
+     * domain and username - e.g. user@domain. For more information, see
+     * https://docs.microsoft.com/en-us/windows/win32/secauthn/user-name-formats#user-principal-name
+     */
+    private static final  Pattern USER_PRINCIPAL_NAME_PATTERN = Pattern.compile(
+            ""(?<username>[^@\\\\]+)@(?<domain>[^@\\\\]+)"");
+
+    /**
+     * The username associated with the potential Windows domain/username
+     * value. If no domain is found, the username field will contain the
+     * entire value as read from the vault.
+     */
+    private final String username;
+
+    /**
+     * The dinaun associated with the potential Windows domain/username
+     * value. If no domain is found, this will be null.
+     */
+    private final String domain;
+
+    /**
+     * Create a WindowsUsername record with no associated domain.
+     *
+     * @param username
+     *     The username, which should be the entire value as extracted
+     *     from the vault.
+     */
+    private WindowsUsername(@Nonnull String username) {
+        this.username = username;
+        this.domain = null;
+    }
+
+    /**
+     * Create a WindowsUsername record with a username and a domain.
+     *
+     * @param username
+     *     The username portion of the field value from the vault.
+     *
+     * @param domain
+     *     The domain portion of the field value from the vault.
+     */
+    private WindowsUsername(
+            @Nonnull String username, @Nonnull String domain) {
+        this.username = username;
+        this.domain = domain;
+    }
+
+    /**
+     * Return the value of the username as extracted from the vault field.
+     * If the domain is null, this will be the entire field value.
+     *
+     * @return
+     *     The username value as extracted from the vault field.
+     */
+    public String getUsername() {
+        return username;
+    }
+
+    /**
+     * Return the value of the domain as extracted from the vault field.
+     * If this is null, it means that no domain was found in the vault field.
+     *
+     * @return
+     *     The domain value as extracted from the vault field.
+     */
+    public String getDomain() {
+        return domain;
+    }
+
+    /**
+     * Return true if a domain was found in the vault field, false otherwise.
+     *
+     * @return
+     */","[{'comment': 'Oops - missing the description here.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed!', 'commenter': 'jmuehlner'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -153,24 +180,82 @@ private void addRecordTokens(Map<String, Future<String>> tokens, String prefix,
 
     }
 
+    /**
+     * Search for a KSM configuration attribute, recursing up the connection group tree
+     * until a connection group with the appropriate attribute is found. If the KSM config
+     * is found, it will be returned. If not, null will be returned.
+     *
+     * @param userContext
+     *     The userContext associated with the connection or connection group.
+     *
+     * @param connectable
+     *     A connection or connection group for which the tokens are being replaced.
+     *
+     * @return
+     *     The value of the KSM configuration attribute if found in the tree, null otherwise.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while attempting to retrieve the KSM config attribute.
+     */
+    private String getConnectionGroupKsmConfig(
+            UserContext userContext, Connectable connectable) throws GuacamoleException {
+
+        // Check to make sure it's a usable type before proceeding
+        if (
+                !(connectable instanceof Connection)
+                && !(connectable instanceof ConnectionGroup)) {
+            logger.warn(
+                    ""Unsupported Connectable type: {}; skipping KSM config lookup."",
+                    connectable.getClass());
+            return null;
+        }
+
+        // For connections, start searching the parent group for the KSM config
+        // For connection groups, start searching the group directly
+        String parentIdentifier = (connectable instanceof Connection)
+                ? ((Connection) connectable).getParentIdentifier()
+                : ((ConnectionGroup) connectable).getIdentifier();
+
+        Directory<ConnectionGroup> connectionGroupDirectory = userContext.getConnectionGroupDirectory();
+        while (connectionGroupDirectory.getIdentifiers().contains(parentIdentifier)) {
+
+            // Fetch the parent group
+            ConnectionGroup group = connectionGroupDirectory.get(parentIdentifier);","[{'comment': '`getIdentifiers()` can be a heavy function, as it lists everything. Instead, since `get()` will return `null` if there is no such object, we should just call `get()` directly.', 'commenter': 'mike-jumper'}, {'comment': 'Good call - will do.', 'commenter': 'jmuehlner'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -56,280 +45,87 @@
 @Singleton
 public class KsmClient {
 
-    /**
-     * Logger for this class.
-     */
-    private static final Logger logger = LoggerFactory.getLogger(KsmClient.class);
-
     /**
      * Service for retrieving configuration information.
      */
     @Inject
     private KsmConfigurationService confService;
 
     /**
-     * Service for retrieving data from records.
+     * Factory for creating KSM cache instances for particular KSM configs.
      */
     @Inject
-    private KsmRecordService recordService;
-
-    /**
-     * The publicly-accessible URL for Keeper's documentation covering Keeper
-     * notation.
-     */
-    private static final String KEEPER_NOTATION_DOC_URL =
-            ""https://docs.keeper.io/secrets-manager/secrets-manager/about/keeper-notation"";
-
-    /**
-     * The regular expression that Keeper notation must match to be related to
-     * file retrieval. As the Keeper SDK provides mutually-exclusive for
-     * retrieving secret values and files via notation, the notation must first
-     * be tested to determine whether it refers to a file.
-     */
-    private static final Pattern KEEPER_FILE_NOTATION = Pattern.compile(""^(keeper://)?[^/]*/file/.+"");
-
-    /**
-     * The maximum amount of time that an entry will be stored in the cache
-     * before being refreshed, in milliseconds.
-     */
-    private static final long CACHE_INTERVAL = 5000;
-
-    /**
-     * Read/write lock which guards access to all cached data, including the
-     * timestamp recording the last time the cache was refreshed. Readers of
-     * the cache must first acquire (and eventually release) the read lock, and
-     * writers of the cache must first acquire (and eventually release) the
-     * write lock.
-     */
-    private final ReadWriteLock cacheLock = new ReentrantReadWriteLock();
-
-    /**
-     * The timestamp that the cache was last refreshed, in milliseconds, as
-     * returned by System.currentTimeMillis(). This value is automatically
-     * updated if {@link #validateCache()} refreshes the cache. This value must
-     * not be accessed without {@link #cacheLock} acquired appropriately.
-     */
-    private volatile long cacheTimestamp = 0;
+    private KsmCacheFactory ksmCacheFactory;
 
     /**
-     * The full cached set of secrets last retrieved from Keeper Secrets
-     * Manager. This value is automatically updated if {@link #validateCache()}
-     * refreshes the cache. This value must not be accessed without
-     * {@link #cacheLock} acquired appropriately.
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM cache instances.
+     * The `null` entry in this Map is associated with the KSM configuration parsed
+     * from the guacamole.properties config file.
      */
-    private KeeperSecrets cachedSecrets = null;
+    private final Map<String, KsmCache> ksmCacheMap = new HashMap<>();
 
     /**
-     * All records retrieved from Keeper Secrets Manager, where each key is the
-     * UID of the corresponding record. The contents of this Map are
-     * automatically updated if {@link #validateCache()} refreshes the cache.
-     * This Map must not be accessed without {@link #cacheLock} acquired
-     * appropriately.
-     */
-    private final Map<String, KeeperRecord> cachedRecordsByUid = new HashMap<>();
-
-    /**
-     * All records retrieved from Keeper Secrets Manager, where each key is the
-     * hostname or IP address of the corresponding record. The hostname or IP
-     * address of a record is determined by {@link Hosts} fields, thus a record
-     * may be associated with multiple hosts. If a record is associated with
-     * multiple hosts, there will be multiple references to that record within
-     * this Map. The contents of this Map are automatically updated if
-     * {@link #validateCache()} refreshes the cache. This Map must not be
-     * accessed without {@link #cacheLock} acquired appropriately. Before using
-     * a value from this Map, {@link #cachedAmbiguousHosts} must first be
-     * checked to verify that there is indeed only one record associated with
-     * that host.
-     */
-    private final Map<String, KeeperRecord> cachedRecordsByHost = new HashMap<>();
-
-    /**
-     * The set of all hostnames or IP addresses that are associated with
-     * multiple records, and thus cannot uniquely identify a record. The
-     * contents of this Set are automatically updated if
-     * {@link #validateCache()} refreshes the cache. This Set must not be
-     * accessed without {@link #cacheLock} acquired appropriately.This Set
-     * must be checked before using a value retrieved from
-     * {@link #cachedRecordsByHost}.
-     */
-    private final Set<String> cachedAmbiguousHosts = new HashSet<>();
-
-    /**
-     * All records retrieved from Keeper Secrets Manager, where each key is the
-     * username of the corresponding record. The username of a record is
-     * determined by {@link Login} fields, thus a record may be associated with
-     * multiple users. If a record is associated with multiple users, there
-     * will be multiple references to that record within this Map. The contents
-     * of this Map are automatically updated if {@link #validateCache()}
-     * refreshes the cache. This Map must not be accessed without
-     * {@link #cacheLock} acquired appropriately. Before using a value from
-     * this Map, {@link #cachedAmbiguousUsernames} must first be checked to
-     * verify that there is indeed only one record associated with that user.
-     */
-    private final Map<String, KeeperRecord> cachedRecordsByUsername = new HashMap<>();
-
-    /**
-     * The set of all usernames that are associated with multiple records, and
-     * thus cannot uniquely identify a record. The contents of this Set are
-     * automatically updated if {@link #validateCache()} refreshes the cache.
-     * This Set must not be accessed without {@link #cacheLock} acquired
-     * appropriately.This Set must be checked before using a value retrieved
-     * from {@link #cachedRecordsByUsername}.
-     */
-    private final Set<String> cachedAmbiguousUsernames = new HashSet<>();
-
-    /**
-     * Validates that all cached data is current with respect to
-     * {@link #CACHE_INTERVAL}, refreshing data from the server as needed.
+     * Create and return a KSM cache for the provided KSM config if not already
+     * present in the cache map, the existing cache entry.
      *
-     * @throws GuacamoleException
-     *     If an error occurs preventing the cached data from being refreshed.
-     */
-    private void validateCache() throws GuacamoleException {
-
-        long currentTime = System.currentTimeMillis();
-
-        // Perform a read-only check that the cache has actually expired before
-        // continuing
-        cacheLock.readLock().lock();
-        try {
-            if (currentTime - cacheTimestamp < CACHE_INTERVAL)
-                return;
-        }
-        finally {
-            cacheLock.readLock().unlock();
-        }
-
-        cacheLock.writeLock().lock();
-        try {
-
-            // Cache may have been updated since the read-only check. Re-verify
-            // that the cache has expired before continuing with a full refresh
-            if (currentTime - cacheTimestamp < CACHE_INTERVAL)
-                return;
-
-            // Attempt to pull all records first, allowing that operation to
-            // succeed/fail BEFORE we clear out the last cached success
-            KeeperSecrets secrets = SecretsManager.getSecrets(confService.getSecretsManagerOptions());
-            List<KeeperRecord> records = secrets.getRecords();
-
-            // Store all secrets within cache
-            cachedSecrets = secrets;
-
-            // Clear unambiguous cache of all records by UID
-            cachedRecordsByUid.clear();
-
-            // Clear cache of host-based records
-            cachedAmbiguousHosts.clear();
-            cachedRecordsByHost.clear();
-
-            // Clear cache of login-based records
-            cachedAmbiguousUsernames.clear();
-            cachedRecordsByUsername.clear();
-
-            // Store all records, sorting each into host-based and login-based
-            // buckets
-            records.forEach(record -> {
-
-                // Store based on UID ...
-                cachedRecordsByUid.put(record.getRecordUid(), record);
-
-                // ... and hostname/address
-                String hostname = recordService.getHostname(record);
-                addRecordForHost(record, hostname);
-
-                // Store based on username ONLY if no hostname (will otherwise
-                // result in ambiguous entries for servers tied to identical
-                // accounts)
-                if (hostname == null)
-                    addRecordForLogin(record, recordService.getUsername(record));
-
-            });
-
-            // Cache has been refreshed
-            this.cacheTimestamp = System.currentTimeMillis();
-
-        }
-        finally {
-            cacheLock.writeLock().unlock();
-        }
-
-    }
-
-    /**
-     * Associates the given record with the given hostname. The hostname may be
-     * null. Both {@link #cachedRecordsByHost} and {@link #cachedAmbiguousHosts}
-     * are updated appropriately. The write lock of {@link #cacheLock} must
-     * already be acquired before invoking this function.
+     * @param ksmConfig
+     *     The base-64 encoded JSON KSM config blob associated with the cache entry.
+     *     If an associated entry does not already exist, it will be created using
+     *     this configuration.
      *
-     * @param record
-     *     The record to associate with the hosts in the given field.
+     * @return
+     *     A KSM cache for the provided KSM config if not already present in the
+     *     cache map, otherwise the existing cache entry.
      *
-     * @param hostname
-     *     The hostname/address that the given record should be associated
-     *     with. This may be null.
+     * @throws GuacamoleException
+     *     If an error occurs while creating the KSM cache.
      */
-    private void addRecordForHost(KeeperRecord record, String hostname) {
+    private KsmCache createCacheIfNeeded(@Nullable String ksmConfig)","[{'comment': 'If abstracting things as a cache: I suggest renaming to `getCache()` and letting the creation aspect of this be an internal concern.\r\n\r\nThat said, I think perhaps this should instead be abstracted at the `KsmClient` level. If the idea is that a particular connection might retrieve secrets using a different KSM config, I think it would make more sense for each config produce a dedicated, separate `KsmClient` singleton, rather than swapping out the internal cache of that client based on which config is in use.', 'commenter': 'mike-jumper'}, {'comment': ""That's fair - refactored to work that way instead. How does this look?"", 'commenter': 'jmuehlner'}, {'comment': 'I think this looks much better.', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -56,280 +45,87 @@
 @Singleton
 public class KsmClient {
 
-    /**
-     * Logger for this class.
-     */
-    private static final Logger logger = LoggerFactory.getLogger(KsmClient.class);
-
     /**
      * Service for retrieving configuration information.
      */
     @Inject
     private KsmConfigurationService confService;
 
     /**
-     * Service for retrieving data from records.
+     * Factory for creating KSM cache instances for particular KSM configs.
      */
     @Inject
-    private KsmRecordService recordService;
-
-    /**
-     * The publicly-accessible URL for Keeper's documentation covering Keeper
-     * notation.
-     */
-    private static final String KEEPER_NOTATION_DOC_URL =
-            ""https://docs.keeper.io/secrets-manager/secrets-manager/about/keeper-notation"";
-
-    /**
-     * The regular expression that Keeper notation must match to be related to
-     * file retrieval. As the Keeper SDK provides mutually-exclusive for
-     * retrieving secret values and files via notation, the notation must first
-     * be tested to determine whether it refers to a file.
-     */
-    private static final Pattern KEEPER_FILE_NOTATION = Pattern.compile(""^(keeper://)?[^/]*/file/.+"");
-
-    /**
-     * The maximum amount of time that an entry will be stored in the cache
-     * before being refreshed, in milliseconds.
-     */
-    private static final long CACHE_INTERVAL = 5000;
-
-    /**
-     * Read/write lock which guards access to all cached data, including the
-     * timestamp recording the last time the cache was refreshed. Readers of
-     * the cache must first acquire (and eventually release) the read lock, and
-     * writers of the cache must first acquire (and eventually release) the
-     * write lock.
-     */
-    private final ReadWriteLock cacheLock = new ReentrantReadWriteLock();
-
-    /**
-     * The timestamp that the cache was last refreshed, in milliseconds, as
-     * returned by System.currentTimeMillis(). This value is automatically
-     * updated if {@link #validateCache()} refreshes the cache. This value must
-     * not be accessed without {@link #cacheLock} acquired appropriately.
-     */
-    private volatile long cacheTimestamp = 0;
+    private KsmCacheFactory ksmCacheFactory;
 
     /**
-     * The full cached set of secrets last retrieved from Keeper Secrets
-     * Manager. This value is automatically updated if {@link #validateCache()}
-     * refreshes the cache. This value must not be accessed without
-     * {@link #cacheLock} acquired appropriately.
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM cache instances.
+     * The `null` entry in this Map is associated with the KSM configuration parsed
+     * from the guacamole.properties config file.
      */
-    private KeeperSecrets cachedSecrets = null;
+    private final Map<String, KsmCache> ksmCacheMap = new HashMap<>();
 
     /**
-     * All records retrieved from Keeper Secrets Manager, where each key is the
-     * UID of the corresponding record. The contents of this Map are
-     * automatically updated if {@link #validateCache()} refreshes the cache.
-     * This Map must not be accessed without {@link #cacheLock} acquired
-     * appropriately.
-     */
-    private final Map<String, KeeperRecord> cachedRecordsByUid = new HashMap<>();
-
-    /**
-     * All records retrieved from Keeper Secrets Manager, where each key is the
-     * hostname or IP address of the corresponding record. The hostname or IP
-     * address of a record is determined by {@link Hosts} fields, thus a record
-     * may be associated with multiple hosts. If a record is associated with
-     * multiple hosts, there will be multiple references to that record within
-     * this Map. The contents of this Map are automatically updated if
-     * {@link #validateCache()} refreshes the cache. This Map must not be
-     * accessed without {@link #cacheLock} acquired appropriately. Before using
-     * a value from this Map, {@link #cachedAmbiguousHosts} must first be
-     * checked to verify that there is indeed only one record associated with
-     * that host.
-     */
-    private final Map<String, KeeperRecord> cachedRecordsByHost = new HashMap<>();
-
-    /**
-     * The set of all hostnames or IP addresses that are associated with
-     * multiple records, and thus cannot uniquely identify a record. The
-     * contents of this Set are automatically updated if
-     * {@link #validateCache()} refreshes the cache. This Set must not be
-     * accessed without {@link #cacheLock} acquired appropriately.This Set
-     * must be checked before using a value retrieved from
-     * {@link #cachedRecordsByHost}.
-     */
-    private final Set<String> cachedAmbiguousHosts = new HashSet<>();
-
-    /**
-     * All records retrieved from Keeper Secrets Manager, where each key is the
-     * username of the corresponding record. The username of a record is
-     * determined by {@link Login} fields, thus a record may be associated with
-     * multiple users. If a record is associated with multiple users, there
-     * will be multiple references to that record within this Map. The contents
-     * of this Map are automatically updated if {@link #validateCache()}
-     * refreshes the cache. This Map must not be accessed without
-     * {@link #cacheLock} acquired appropriately. Before using a value from
-     * this Map, {@link #cachedAmbiguousUsernames} must first be checked to
-     * verify that there is indeed only one record associated with that user.
-     */
-    private final Map<String, KeeperRecord> cachedRecordsByUsername = new HashMap<>();
-
-    /**
-     * The set of all usernames that are associated with multiple records, and
-     * thus cannot uniquely identify a record. The contents of this Set are
-     * automatically updated if {@link #validateCache()} refreshes the cache.
-     * This Set must not be accessed without {@link #cacheLock} acquired
-     * appropriately.This Set must be checked before using a value retrieved
-     * from {@link #cachedRecordsByUsername}.
-     */
-    private final Set<String> cachedAmbiguousUsernames = new HashSet<>();
-
-    /**
-     * Validates that all cached data is current with respect to
-     * {@link #CACHE_INTERVAL}, refreshing data from the server as needed.
+     * Create and return a KSM cache for the provided KSM config if not already
+     * present in the cache map, the existing cache entry.
      *
-     * @throws GuacamoleException
-     *     If an error occurs preventing the cached data from being refreshed.
-     */
-    private void validateCache() throws GuacamoleException {
-
-        long currentTime = System.currentTimeMillis();
-
-        // Perform a read-only check that the cache has actually expired before
-        // continuing
-        cacheLock.readLock().lock();
-        try {
-            if (currentTime - cacheTimestamp < CACHE_INTERVAL)
-                return;
-        }
-        finally {
-            cacheLock.readLock().unlock();
-        }
-
-        cacheLock.writeLock().lock();
-        try {
-
-            // Cache may have been updated since the read-only check. Re-verify
-            // that the cache has expired before continuing with a full refresh
-            if (currentTime - cacheTimestamp < CACHE_INTERVAL)
-                return;
-
-            // Attempt to pull all records first, allowing that operation to
-            // succeed/fail BEFORE we clear out the last cached success
-            KeeperSecrets secrets = SecretsManager.getSecrets(confService.getSecretsManagerOptions());
-            List<KeeperRecord> records = secrets.getRecords();
-
-            // Store all secrets within cache
-            cachedSecrets = secrets;
-
-            // Clear unambiguous cache of all records by UID
-            cachedRecordsByUid.clear();
-
-            // Clear cache of host-based records
-            cachedAmbiguousHosts.clear();
-            cachedRecordsByHost.clear();
-
-            // Clear cache of login-based records
-            cachedAmbiguousUsernames.clear();
-            cachedRecordsByUsername.clear();
-
-            // Store all records, sorting each into host-based and login-based
-            // buckets
-            records.forEach(record -> {
-
-                // Store based on UID ...
-                cachedRecordsByUid.put(record.getRecordUid(), record);
-
-                // ... and hostname/address
-                String hostname = recordService.getHostname(record);
-                addRecordForHost(record, hostname);
-
-                // Store based on username ONLY if no hostname (will otherwise
-                // result in ambiguous entries for servers tied to identical
-                // accounts)
-                if (hostname == null)
-                    addRecordForLogin(record, recordService.getUsername(record));
-
-            });
-
-            // Cache has been refreshed
-            this.cacheTimestamp = System.currentTimeMillis();
-
-        }
-        finally {
-            cacheLock.writeLock().unlock();
-        }
-
-    }
-
-    /**
-     * Associates the given record with the given hostname. The hostname may be
-     * null. Both {@link #cachedRecordsByHost} and {@link #cachedAmbiguousHosts}
-     * are updated appropriately. The write lock of {@link #cacheLock} must
-     * already be acquired before invoking this function.
+     * @param ksmConfig
+     *     The base-64 encoded JSON KSM config blob associated with the cache entry.
+     *     If an associated entry does not already exist, it will be created using
+     *     this configuration.
      *
-     * @param record
-     *     The record to associate with the hosts in the given field.
+     * @return
+     *     A KSM cache for the provided KSM config if not already present in the
+     *     cache map, otherwise the existing cache entry.
      *
-     * @param hostname
-     *     The hostname/address that the given record should be associated
-     *     with. This may be null.
+     * @throws GuacamoleException
+     *     If an error occurs while creating the KSM cache.
      */
-    private void addRecordForHost(KeeperRecord record, String hostname) {
+    private KsmCache createCacheIfNeeded(@Nullable String ksmConfig)
+            throws GuacamoleException {
 
-        if (hostname == null)
-            return;
-
-        KeeperRecord existing = cachedRecordsByHost.putIfAbsent(hostname, record);
-        if (existing != null && record != existing)
-            cachedAmbiguousHosts.add(hostname);
+        // If a cache already exists for the provided config, use it
+        KsmCache ksmCache = ksmCacheMap.get(ksmConfig);
+        if (ksmCache != null)
+            return ksmCache;
 
+        // Create and store a new KSM cache instance for the provided KSM config blob
+        SecretsManagerOptions options = confService.getSecretsManagerOptions(ksmConfig);
+        ksmCache = ksmCacheFactory.create(options);
+        ksmCacheMap.put(ksmConfig, ksmCache);
+        return ksmCache;","[{'comment': 'Is this threadsafe?', 'commenter': 'mike-jumper'}, {'comment': 'uh, no.', 'commenter': 'jmuehlner'}, {'comment': 'Switched to using a concurrent map, which also required some refactoring around the way that properties are handled. Let me know what you think.', 'commenter': 'jmuehlner'}, {'comment': 'Looks good - even in the case that `get()` returns `null` for two interleaved calls and two `KsmClient` instances get created, only one of those instances will win, everything requesting an instance will end up with the same instance, and the constructor that gets arguably unnecessarily invoked is very low overhead.', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/conf/KsmAttributeService.java,"@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.conf;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
+import org.apache.guacamole.form.Form;
+import org.apache.guacamole.form.MultilineField;
+import org.apache.guacamole.vault.conf.VaultAttributeService;
+
+import com.google.inject.Singleton;
+
+/**
+ * A service that exposes KSM-specific attributes, allowing setting KSM
+ * configuration through the admin interface.
+ */
+@Singleton
+public class KsmAttributeService implements VaultAttributeService {
+
+    /**
+     * The name of the attribute which can contain a KSM configuration blob
+     * associated with a connection group.
+     */
+    public static final String KSM_CONFIGURATION_ATTRIBUTE = ""ksm-config"";
+
+    /**
+     * All attributes related to configuring the KSM vault on a
+     * per-connection-group basis.
+     */
+    public static final Form KSM_CONFIGURATION_FORM = new Form(""ksm-config"",
+            Arrays.asList(new MultilineField(KSM_CONFIGURATION_ATTRIBUTE)));","[{'comment': ""What do people think: should this be a `MultilineField` or a `TextField`? The base-64 encoded JSON configuration blob won't have any newlines in it, so this is what it looks like in practice:\r\n\r\n![image](https://user-images.githubusercontent.com/4633119/177383816-4c83ddfc-cf61-4c6f-97e7-8fd528fafdcd.png)\r\n"", 'commenter': 'jmuehlner'}, {'comment': ""If it's going to just expand like that, anyway, maybe just a standard `TextField`?"", 'commenter': 'necouchman'}, {'comment': 'Yeah, I think this is probably better.\r\n![image](https://user-images.githubusercontent.com/4633119/177387961-b287c4c6-3339-4953-a701-ff2d61aa9c40.png)\r\n', 'commenter': 'jmuehlner'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-base/src/main/java/org/apache/guacamole/vault/user/VaultUserContext.java,"@@ -398,9 +418,14 @@ protected void addTokens(Connection connection, Map<String, String> tokens)
 
         // Substitute tokens producing secret names, retrieving and storing
         // those secrets as parameter tokens
-        tokens.putAll(resolve(getTokens(confService.getTokenMapping(), filter,
-                config, new TokenFilter(tokens))));
+        tokens.putAll(resolve(getTokens(connection, confService.getTokenMapping(),
+                filter, config, new TokenFilter(tokens))));
 
     }
 
+    @Override
+    public Collection<Form> getConnectionGroupAttributes() {
+        return attributeService.getConnectionGroupAttributes();","[{'comment': 'This will need to use the result of invoking `super.getConnectionGroupAttributes()` as a basis or the connection group attributes of other extensions will be masked by these new attributes.', 'commenter': 'mike-jumper'}, {'comment': 'Good catch - fixed.', 'commenter': 'jmuehlner'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -203,14 +215,14 @@ private void validateCache() throws GuacamoleException {
         cacheLock.writeLock().lock();
         try {
 
-            // Cache may have been updated since the read-only check. Re-verify
+            // Client may have been updated since the read-only check. Re-verify","[{'comment': 'Cache*', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -246,7 +258,7 @@ private void validateCache() throws GuacamoleException {
 
             });
 
-            // Cache has been refreshed
+            // Client has been refreshed","[{'comment': 'Cache*', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -60,6 +76,53 @@ public class KsmSecretService implements VaultSecretService {
     @Inject
     private KsmConfigurationService confService;
 
+    /**
+     * Factory for creating KSM client instances.
+     */
+    @Inject
+    private KsmClientFactory ksmClientFactory;
+
+    /**
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM client instances.
+     * The `null` entry in this Map is associated with the KSM configuration parsed","[{'comment': ""I think this is incorrect / from an older version of this code: there can't be a `null` entry in this `Map` as it's a `ConcurrentHashMap`."", 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -60,6 +76,53 @@ public class KsmSecretService implements VaultSecretService {
     @Inject
     private KsmConfigurationService confService;
 
+    /**
+     * Factory for creating KSM client instances.
+     */
+    @Inject
+    private KsmClientFactory ksmClientFactory;
+
+    /**
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM client instances.
+     * The `null` entry in this Map is associated with the KSM configuration parsed
+     * from the guacamole.properties config file. A distinct KSM client will exist for
+     * every KSM config.
+     */
+    private final ConcurrentMap<String, KsmClient> ksmClientMap = new ConcurrentHashMap<>();
+
+    /**
+     * Create and return a KSM cache for the provided KSM config if not already","[{'comment': 'client*', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -60,6 +76,53 @@ public class KsmSecretService implements VaultSecretService {
     @Inject
     private KsmConfigurationService confService;
 
+    /**
+     * Factory for creating KSM client instances.
+     */
+    @Inject
+    private KsmClientFactory ksmClientFactory;
+
+    /**
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM client instances.
+     * The `null` entry in this Map is associated with the KSM configuration parsed
+     * from the guacamole.properties config file. A distinct KSM client will exist for
+     * every KSM config.
+     */
+    private final ConcurrentMap<String, KsmClient> ksmClientMap = new ConcurrentHashMap<>();
+
+    /**
+     * Create and return a KSM cache for the provided KSM config if not already
+     * present in the cache map, otherwise return the existing cache entry.","[{'comment': 'client*', 'commenter': 'mike-jumper'}, {'comment': ""Shouldn't this be client map and client entry?"", 'commenter': 'mike-jumper'}, {'comment': 'Ugh, yes. I _think_ I got them all now.', 'commenter': 'jmuehlner'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -60,6 +76,53 @@ public class KsmSecretService implements VaultSecretService {
     @Inject
     private KsmConfigurationService confService;
 
+    /**
+     * Factory for creating KSM client instances.
+     */
+    @Inject
+    private KsmClientFactory ksmClientFactory;
+
+    /**
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM client instances.
+     * The `null` entry in this Map is associated with the KSM configuration parsed
+     * from the guacamole.properties config file. A distinct KSM client will exist for
+     * every KSM config.
+     */
+    private final ConcurrentMap<String, KsmClient> ksmClientMap = new ConcurrentHashMap<>();
+
+    /**
+     * Create and return a KSM cache for the provided KSM config if not already
+     * present in the cache map, otherwise return the existing cache entry.
+     *
+     * @param ksmConfig
+     *     The base-64 encoded JSON KSM config blob associated with the cache entry.
+     *     If an associated entry does not already exist, it will be created using
+     *     this configuration.
+     *
+     * @return
+     *     A KSM cache for the provided KSM config if not already present in the","[{'comment': 'client*', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-base/src/main/java/org/apache/guacamole/vault/user/VaultUserContext.java,"@@ -398,9 +421,19 @@ protected void addTokens(Connection connection, Map<String, String> tokens)
 
         // Substitute tokens producing secret names, retrieving and storing
         // those secrets as parameter tokens
-        tokens.putAll(resolve(getTokens(confService.getTokenMapping(), filter,
-                config, new TokenFilter(tokens))));
+        tokens.putAll(resolve(getTokens(connection, confService.getTokenMapping(),
+                filter, config, new TokenFilter(tokens))));
+
+    }
+
+    @Override
+    public Collection<Form> getConnectionGroupAttributes() {
 
+        // Add any custom attributes to any previously defined attributes
+        return Stream.concat(
+                super.getConnectionGroupAttributes().stream(),
+                attributeService.getConnectionGroupAttributes().stream()
+        ).collect(Collectors.toUnmodifiableList());","[{'comment': '`Collectors.toUnmodifiableList()` is only available in JDK 10+.', 'commenter': 'mike-jumper'}, {'comment': 'Oops! Good catch. Fixed.', 'commenter': 'jmuehlner'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -60,6 +76,51 @@ public class KsmSecretService implements VaultSecretService {
     @Inject
     private KsmConfigurationService confService;
 
+    /**
+     * Factory for creating KSM client instances.
+     */
+    @Inject
+    private KsmClientFactory ksmClientFactory;
+
+    /**
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM client instances.
+     * A distinct KSM client will exist for every KSM config.
+     */
+    private final ConcurrentMap<String, KsmClient> ksmClientMap = new ConcurrentHashMap<>();
+
+    /**
+     * Create and return a KSM client for the provided KSM config if not already
+     * present in the cache map, otherwise return the existing cache entry.
+     *
+     * @param ksmConfig
+     *     The base-64 encoded JSON KSM config blob associated with the cache entry.
+     *     If an associated entry does not already exist, it will be created using
+     *     this configuration.
+     *
+     * @return
+     *     A KSM client for the provided KSM config if not already present in the
+     *     cache map, otherwise the existing cache entry.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while creating the KSM client.
+     */
+    private KsmClient getClient(@Nonnull String ksmConfig)
+            throws GuacamoleException {
+
+        // If a cache already exists for the provided config, use it","[{'comment': 'client*', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -60,6 +76,51 @@ public class KsmSecretService implements VaultSecretService {
     @Inject
     private KsmConfigurationService confService;
 
+    /**
+     * Factory for creating KSM client instances.
+     */
+    @Inject
+    private KsmClientFactory ksmClientFactory;
+
+    /**
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM client instances.
+     * A distinct KSM client will exist for every KSM config.
+     */
+    private final ConcurrentMap<String, KsmClient> ksmClientMap = new ConcurrentHashMap<>();
+
+    /**
+     * Create and return a KSM client for the provided KSM config if not already
+     * present in the cache map, otherwise return the existing cache entry.
+     *
+     * @param ksmConfig
+     *     The base-64 encoded JSON KSM config blob associated with the cache entry.
+     *     If an associated entry does not already exist, it will be created using
+     *     this configuration.
+     *
+     * @return
+     *     A KSM client for the provided KSM config if not already present in the
+     *     cache map, otherwise the existing cache entry.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while creating the KSM client.
+     */
+    private KsmClient getClient(@Nonnull String ksmConfig)
+            throws GuacamoleException {
+
+        // If a cache already exists for the provided config, use it
+        KsmClient ksmClient = ksmClientMap.get(ksmConfig);
+        if (ksmClient != null)
+            return ksmClient;
+
+        // Create and store a new KSM cache instance for the provided KSM config blob","[{'comment': 'client*', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -60,6 +76,51 @@ public class KsmSecretService implements VaultSecretService {
     @Inject
     private KsmConfigurationService confService;
 
+    /**
+     * Factory for creating KSM client instances.
+     */
+    @Inject
+    private KsmClientFactory ksmClientFactory;
+
+    /**
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM client instances.
+     * A distinct KSM client will exist for every KSM config.
+     */
+    private final ConcurrentMap<String, KsmClient> ksmClientMap = new ConcurrentHashMap<>();
+
+    /**
+     * Create and return a KSM client for the provided KSM config if not already
+     * present in the cache map, otherwise return the existing cache entry.
+     *
+     * @param ksmConfig
+     *     The base-64 encoded JSON KSM config blob associated with the cache entry.
+     *     If an associated entry does not already exist, it will be created using
+     *     this configuration.
+     *
+     * @return
+     *     A KSM client for the provided KSM config if not already present in the
+     *     cache map, otherwise the existing cache entry.","[{'comment': 'Should each of these references to the cache map, entry, etc. be s/cache/client/?', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -60,6 +76,51 @@ public class KsmSecretService implements VaultSecretService {
     @Inject
     private KsmConfigurationService confService;
 
+    /**
+     * Factory for creating KSM client instances.
+     */
+    @Inject
+    private KsmClientFactory ksmClientFactory;
+
+    /**
+     * A map of base-64 encoded JSON KSM config blobs to associated KSM client instances.
+     * A distinct KSM client will exist for every KSM config.
+     */
+    private final ConcurrentMap<String, KsmClient> ksmClientMap = new ConcurrentHashMap<>();
+
+    /**
+     * Create and return a KSM client for the provided KSM config if not already
+     * present in the cache map, otherwise return the existing cache entry.
+     *
+     * @param ksmConfig
+     *     The base-64 encoded JSON KSM config blob associated with the cache entry.
+     *     If an associated entry does not already exist, it will be created using
+     *     this configuration.
+     *
+     * @return
+     *     A KSM client for the provided KSM config if not already present in the
+     *     cache map, otherwise the existing cache entry.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while creating the KSM client.
+     */
+    private KsmClient getClient(@Nonnull String ksmConfig)
+            throws GuacamoleException {
+
+        // If a cache already exists for the provided config, use it
+        KsmClient ksmClient = ksmClientMap.get(ksmConfig);
+        if (ksmClient != null)
+            return ksmClient;
+
+        // Create and store a new KSM cache instance for the provided KSM config blob
+        SecretsManagerOptions options = confService.getSecretsManagerOptions(ksmConfig);
+        ksmClient = ksmClientFactory.create(options);
+        KsmClient prevClient = ksmClientMap.putIfAbsent(ksmConfig, ksmClient);
+
+        // If the cache was already set before this thread got there, use the existing one","[{'comment': 'client*', 'commenter': 'mike-jumper'}]"
739,extensions/guacamole-vault/modules/guacamole-vault-base/src/main/java/org/apache/guacamole/vault/conf/VaultAttributeService.java,"@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.conf;
+
+import java.util.Collection;
+
+import org.apache.guacamole.form.Form;
+
+/**
+ * A service that exposes attributes for the admin UI, specific to the vault
+ * implementation. Any vault implementation will need to expose the attributes
+ * necessary for that implementation.
+ */
+public interface VaultAttributeService {
+
+    /**
+     * Return all custom connection group attributes to be exposed through the
+     * admin UI for the current vault implementation.
+     *
+     * @return
+     *     All custom connection group attributes to be exposed through the
+     *     admin UI for the current vault implementation.
+     *","[{'comment': 'Please remove this trailing blank line.', 'commenter': 'mike-jumper'}]"
741,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -329,6 +366,69 @@ public int getAuthenticationTimeout() throws GuacamoleException {
         return environment.getProperty(SAML_AUTH_TIMEOUT, 5);
     }
 
+    /**
+     * Returns the file containing the x509 certificate to use when signing
+     * requests to the SAML IdP. If the property is not set, null will be
+     * returned.
+     *
+     * @return
+     *     The file containing the x509 certificate to use when signing
+     *     requests to the SAML IdP, or null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If the authentication timeout cannot be parsed.","[{'comment': 'X.509 certificate*', 'commenter': 'mike-jumper'}]"
741,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -329,6 +366,69 @@ public int getAuthenticationTimeout() throws GuacamoleException {
         return environment.getProperty(SAML_AUTH_TIMEOUT, 5);
     }
 
+    /**
+     * Returns the file containing the x509 certificate to use when signing
+     * requests to the SAML IdP. If the property is not set, null will be
+     * returned.
+     *
+     * @return
+     *     The file containing the x509 certificate to use when signing
+     *     requests to the SAML IdP, or null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If the authentication timeout cannot be parsed.
+     */
+    public File getCertificateFile() throws GuacamoleException {
+        return environment.getProperty(SAML_X509_CERT_PATH);
+    }
+
+    /**
+     * Returns the file containing the private key to use when signing
+     * requests to the SAML IdP. If the property is not set, null will be
+     * returned.
+     *
+     * @return
+     *     The file containing the private key to use when signing
+     *     requests to the SAML IdP, or null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If the authentication timeout cannot be parsed.","[{'comment': 'private key file*', 'commenter': 'mike-jumper'}]"
741,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -329,6 +366,69 @@ public int getAuthenticationTimeout() throws GuacamoleException {
         return environment.getProperty(SAML_AUTH_TIMEOUT, 5);
     }
 
+    /**
+     * Returns the file containing the x509 certificate to use when signing
+     * requests to the SAML IdP. If the property is not set, null will be
+     * returned.
+     *
+     * @return
+     *     The file containing the x509 certificate to use when signing
+     *     requests to the SAML IdP, or null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If the authentication timeout cannot be parsed.
+     */
+    public File getCertificateFile() throws GuacamoleException {
+        return environment.getProperty(SAML_X509_CERT_PATH);
+    }
+
+    /**
+     * Returns the file containing the private key to use when signing
+     * requests to the SAML IdP. If the property is not set, null will be
+     * returned.
+     *
+     * @return
+     *     The file containing the private key to use when signing
+     *     requests to the SAML IdP, or null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If the authentication timeout cannot be parsed.
+     */
+    public File getPrivateKeyFile() throws GuacamoleException {
+        return environment.getProperty(SAML_PRIVATE_KEY_PATH);
+    }
+
+    /**
+     * Returns the contents of a small file, such as a private key or certificate into
+     * a String. If the file does not exist, or cannot be read for any reason, a warning
+     * will be logged and null will be returned.
+     *
+     * @param file
+     *     The file to read into a string.
+     *
+     * @param name
+     *     A human-readable name for the file, to be used when formatting log messages.
+     *
+     * @return
+     *     The contents of the file having the given path, or null if the file does not
+     *     exist or cannot be read.
+     */
+    private String readFileContentsIntoString(File file, String name) {
+
+        // Attempt to read the file directly into a String
+        try {
+            return new String(Files.readAllBytes(file.toPath()), StandardCharsets.UTF_8);
+        }
+
+        // If the file cannot be read, log a warning and treat it as if it does not exist
+        catch (IOException e) {
+            logger.warn(""{} \""{}\"" could not be read."", name, file);","[{'comment': 'We should log the exception message here, as well, so that the admin can see the nature of the failure. For example:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/754e9649f1fa0ba225ee42b56ded64bc283d17df/guacamole/src/main/java/org/apache/guacamole/tunnel/InterceptedStreamMap.java#L71-L74', 'commenter': 'mike-jumper'}]"
741,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -329,6 +366,69 @@ public int getAuthenticationTimeout() throws GuacamoleException {
         return environment.getProperty(SAML_AUTH_TIMEOUT, 5);
     }
 
+    /**
+     * Returns the file containing the x509 certificate to use when signing
+     * requests to the SAML IdP. If the property is not set, null will be
+     * returned.
+     *
+     * @return
+     *     The file containing the x509 certificate to use when signing
+     *     requests to the SAML IdP, or null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If the authentication timeout cannot be parsed.
+     */
+    public File getCertificateFile() throws GuacamoleException {
+        return environment.getProperty(SAML_X509_CERT_PATH);
+    }
+
+    /**
+     * Returns the file containing the private key to use when signing
+     * requests to the SAML IdP. If the property is not set, null will be
+     * returned.
+     *
+     * @return
+     *     The file containing the private key to use when signing
+     *     requests to the SAML IdP, or null if not defined.
+     *
+     * @throws GuacamoleException
+     *     If the authentication timeout cannot be parsed.
+     */
+    public File getPrivateKeyFile() throws GuacamoleException {
+        return environment.getProperty(SAML_PRIVATE_KEY_PATH);
+    }
+
+    /**
+     * Returns the contents of a small file, such as a private key or certificate into
+     * a String. If the file does not exist, or cannot be read for any reason, a warning
+     * will be logged and null will be returned.
+     *
+     * @param file
+     *     The file to read into a string.
+     *
+     * @param name
+     *     A human-readable name for the file, to be used when formatting log messages.
+     *
+     * @return
+     *     The contents of the file having the given path, or null if the file does not
+     *     exist or cannot be read.
+     */
+    private String readFileContentsIntoString(File file, String name) {
+
+        // Attempt to read the file directly into a String
+        try {
+            return new String(Files.readAllBytes(file.toPath()), StandardCharsets.UTF_8);
+        }
+
+        // If the file cannot be read, log a warning and treat it as if it does not exist
+        catch (IOException e) {
+            logger.warn(""{} \""{}\"" could not be read."", name, file);
+            logger.debug(""{} \""{}\"" could not be read."", name, file, e);
+            return null;","[{'comment': ""Should this instead be fatal, ultimately causing the call to `getSamlSettings()` to fail if required files can't be read?"", 'commenter': 'mike-jumper'}, {'comment': ""Should it? They're not required properties."", 'commenter': 'jmuehlner'}, {'comment': ""They're not required, yes, but when the admin _does_ specify them, they're declaring that they want the SAML messages to be signed/encrypted using that key. If the admin explicitly requests that messages be signed/encrypted with a particular key, but that key can't be read, I think we should fail outright rather than fall back to sending unsigned/unencrypted messages."", 'commenter': 'mike-jumper'}, {'comment': 'Required now.', 'commenter': 'jmuehlner'}]"
741,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/conf/ConfigurationService.java,"@@ -161,6 +174,30 @@ public class ConfigurationService {
                 
     };
 
+    /**
+     * The file containing the x509 cert to use when signing or encrypting
+     * requests to the SAML IdP.
+     */
+    private static final FileGuacamoleProperty SAML_X509_CERT_PATH =
+            new FileGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""saml-x509-cert-path""; }
+
+    };
+
+    /**
+     * The file containing the private to use when signing or encrypting","[{'comment': 'private key*', 'commenter': 'mike-jumper'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-base/src/main/java/org/apache/guacamole/vault/user/VaultDirectoryService.java,"@@ -0,0 +1,140 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.user;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.net.auth.ActiveConnection;
+import org.apache.guacamole.net.auth.Connection;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.SharingProfile;
+import org.apache.guacamole.net.auth.User;
+import org.apache.guacamole.net.auth.UserGroup;
+
+/**
+ * A service that allows a vault implementation to override the directory
+ * for any entity that a user context may return.
+ */
+public interface VaultDirectoryService {
+
+    /**
+     * Given an existing User Directory, return a new Directory for
+     * this vault implementation.
+     *
+     * @return
+     *     A new User Directory based on the provided Directory.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while creating the Directory.
+     */
+    default Directory<User> getUserDirectory(","[{'comment': 'With all functions here having `default` implementations, this `interface` feels like it should be an `abstract class`.', 'commenter': 'mike-jumper'}, {'comment': 'Sure', 'commenter': 'jmuehlner'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration
+     *     attribute parsing/validation should be performed.
+     *
+     * @throws GuacamoleException
+     *     If the KSM_CONFIGURATION_ATTRIBUTE is set, but fails to validate as
+     *     either a KSM one-time-token, or a KSM base64-encoded JSON config blob.
+     */
+    public void processAttributes(Attributes entity) throws GuacamoleException {
+
+        // By default, if the KSM config attribute isn't being set, pass the
+        // provided attributes through without any changes
+        Map<String, String> attributes = entity.getAttributes();
+
+        // Get the value of the KSM config attribute in the provided map
+        String ksmConfigValue = attributes.get(
+                KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);
+
+        // Check if the attribute is set to a non-empty value
+        if (ksmConfigValue != null && !ksmConfigValue.trim().isEmpty()) {
+
+            // If it's already base-64-encoded, it's a KSM configuration blob,
+            // so validate it immediately
+            if(isBase64(ksmConfigValue)) {","[{'comment': 'Please include a space between `if` and `(`.', 'commenter': 'mike-jumper'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/resources/translations/en.json,"@@ -6,7 +6,10 @@
 
     ""CONNECTION_GROUP_ATTRIBUTES"" : {
         ""SECTION_HEADER_KSM_CONFIG"" : ""Keeper Secrets Manager"",
-        ""FIELD_HEADER_KSM_CONFIG""   : ""KSM Service Configuration ""
+        ""FIELD_HEADER_KSM_CONFIG""   : ""KSM Service Configuration "",
+
+        ""ERROR_INVALID_KSM_CONFIG_BLOB"": ""Invalid KSM config blob provided"",
+        ""ERROR_INVALID_KSM_ONE_TIME_TOKEN"": ""Invalid KSM one-time token provided""","[{'comment': 'I think we should make these a bit more friendly and helpful, so that the admin has a good idea what has failed and how to resolve. ie: ""The provided base64-encoded KSM configuration blob is not valid. Please verify that you have copied the entire blob."" or ""The provided configuration is not a valid KSM one-time token or base64-encoded configuration blob. Please verify ... etc.""', 'commenter': 'mike-jumper'}, {'comment': 'Sure.', 'commenter': 'jmuehlner'}, {'comment': 'How do these look?', 'commenter': 'jmuehlner'}, {'comment': 'These look much better.', 'commenter': 'mike-jumper'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration","[{'comment': 'What do you mean by ""attributes-enable"" entity?', 'commenter': 'mike-jumper'}, {'comment': 'Oops, was supposed to be `enabled`', 'commenter': 'jmuehlner'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration
+     *     attribute parsing/validation should be performed.
+     *
+     * @throws GuacamoleException
+     *     If the KSM_CONFIGURATION_ATTRIBUTE is set, but fails to validate as
+     *     either a KSM one-time-token, or a KSM base64-encoded JSON config blob.
+     */
+    public void processAttributes(Attributes entity) throws GuacamoleException {
+
+        // By default, if the KSM config attribute isn't being set, pass the
+        // provided attributes through without any changes
+        Map<String, String> attributes = entity.getAttributes();
+
+        // Get the value of the KSM config attribute in the provided map
+        String ksmConfigValue = attributes.get(
+                KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);
+
+        // Check if the attribute is set to a non-empty value
+        if (ksmConfigValue != null && !ksmConfigValue.trim().isEmpty()) {
+
+            // If it's already base-64-encoded, it's a KSM configuration blob,
+            // so validate it immediately
+            if(isBase64(ksmConfigValue)) {
+
+                // Attempt to validate the config as a base64-econded KSM config blob
+                try {
+                    KsmConfig.parseKsmConfig(ksmConfigValue);
+
+                    // If it validates, the entity can be returned as-is
+                    return;
+                }
+
+                catch (GuacamoleException exception) {
+
+                    // If the parsing attempt fails, throw a translatable error for display
+                    // on the frontend
+                    throw new TranslatableGuacamoleClientException(
+                            ""Invalid base64-encoded JSON KSM config provided for ""
+                            + KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE + "" attribute"",
+                            ""CONNECTION_GROUP_ATTRIBUTES.ERROR_INVALID_KSM_CONFIG_BLOB"");
+                }
+            }
+
+            else {","[{'comment': 'This `else` is superfluous as the related `if` is terminal. This function can be made a bit more readable by removing this and thus shedding one level of nesting.', 'commenter': 'mike-jumper'}, {'comment': 'Good call.', 'commenter': 'jmuehlner'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration
+     *     attribute parsing/validation should be performed.
+     *
+     * @throws GuacamoleException
+     *     If the KSM_CONFIGURATION_ATTRIBUTE is set, but fails to validate as
+     *     either a KSM one-time-token, or a KSM base64-encoded JSON config blob.
+     */
+    public void processAttributes(Attributes entity) throws GuacamoleException {
+
+        // By default, if the KSM config attribute isn't being set, pass the
+        // provided attributes through without any changes
+        Map<String, String> attributes = entity.getAttributes();
+
+        // Get the value of the KSM config attribute in the provided map
+        String ksmConfigValue = attributes.get(
+                KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);
+
+        // Check if the attribute is set to a non-empty value
+        if (ksmConfigValue != null && !ksmConfigValue.trim().isEmpty()) {
+
+            // If it's already base-64-encoded, it's a KSM configuration blob,
+            // so validate it immediately
+            if(isBase64(ksmConfigValue)) {
+
+                // Attempt to validate the config as a base64-econded KSM config blob
+                try {
+                    KsmConfig.parseKsmConfig(ksmConfigValue);
+
+                    // If it validates, the entity can be returned as-is
+                    return;
+                }
+
+                catch (GuacamoleException exception) {
+
+                    // If the parsing attempt fails, throw a translatable error for display
+                    // on the frontend
+                    throw new TranslatableGuacamoleClientException(
+                            ""Invalid base64-encoded JSON KSM config provided for ""
+                            + KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE + "" attribute"",
+                            ""CONNECTION_GROUP_ATTRIBUTES.ERROR_INVALID_KSM_CONFIG_BLOB"");","[{'comment': ""As there's an associated cause (`exception`), we should use the constructor variation that includes the cause:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/8772207a7583e0152581a6edd866e1b4d1783b1e/guacamole-ext/src/main/java/org/apache/guacamole/language/TranslatableGuacamoleClientException.java#L95"", 'commenter': 'mike-jumper'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration
+     *     attribute parsing/validation should be performed.
+     *
+     * @throws GuacamoleException
+     *     If the KSM_CONFIGURATION_ATTRIBUTE is set, but fails to validate as
+     *     either a KSM one-time-token, or a KSM base64-encoded JSON config blob.
+     */
+    public void processAttributes(Attributes entity) throws GuacamoleException {
+
+        // By default, if the KSM config attribute isn't being set, pass the
+        // provided attributes through without any changes
+        Map<String, String> attributes = entity.getAttributes();
+
+        // Get the value of the KSM config attribute in the provided map
+        String ksmConfigValue = attributes.get(
+                KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);
+
+        // Check if the attribute is set to a non-empty value
+        if (ksmConfigValue != null && !ksmConfigValue.trim().isEmpty()) {
+
+            // If it's already base-64-encoded, it's a KSM configuration blob,
+            // so validate it immediately
+            if(isBase64(ksmConfigValue)) {
+
+                // Attempt to validate the config as a base64-econded KSM config blob
+                try {
+                    KsmConfig.parseKsmConfig(ksmConfigValue);
+
+                    // If it validates, the entity can be returned as-is","[{'comment': ""This doesn't make sense to me:\r\n1. But we're not returning anything.\r\n2. What entity?"", 'commenter': 'mike-jumper'}, {'comment': ""Good catch on it not returning anything - I'll fix that.\r\n\r\nThe entity is `entity` - the `Attributes` instance that's passed into `processAttributes()`. I thought that was relatively clear?"", 'commenter': 'jmuehlner'}, {'comment': 'Is it still unclear?', 'commenter': 'jmuehlner'}, {'comment': '> Good catch on it not returning anything - I\'ll fix that.\r\n> \r\n> The entity is `entity` - the `Attributes` instance that\'s passed into `processAttributes()`. I thought that was relatively clear?\r\n\r\nI think I just got hung up on ""entity"" being how the DB refers to the common base representation of a user / user group.\r\n\r\n> Is it still unclear?\r\n\r\nI think this looks good now.', 'commenter': 'mike-jumper'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration
+     *     attribute parsing/validation should be performed.
+     *
+     * @throws GuacamoleException
+     *     If the KSM_CONFIGURATION_ATTRIBUTE is set, but fails to validate as
+     *     either a KSM one-time-token, or a KSM base64-encoded JSON config blob.
+     */
+    public void processAttributes(Attributes entity) throws GuacamoleException {
+
+        // By default, if the KSM config attribute isn't being set, pass the
+        // provided attributes through without any changes
+        Map<String, String> attributes = entity.getAttributes();
+
+        // Get the value of the KSM config attribute in the provided map
+        String ksmConfigValue = attributes.get(
+                KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);
+
+        // Check if the attribute is set to a non-empty value
+        if (ksmConfigValue != null && !ksmConfigValue.trim().isEmpty()) {
+
+            // If it's already base-64-encoded, it's a KSM configuration blob,
+            // so validate it immediately
+            if(isBase64(ksmConfigValue)) {
+
+                // Attempt to validate the config as a base64-econded KSM config blob
+                try {
+                    KsmConfig.parseKsmConfig(ksmConfigValue);
+
+                    // If it validates, the entity can be returned as-is
+                    return;
+                }
+
+                catch (GuacamoleException exception) {
+
+                    // If the parsing attempt fails, throw a translatable error for display
+                    // on the frontend
+                    throw new TranslatableGuacamoleClientException(
+                            ""Invalid base64-encoded JSON KSM config provided for ""
+                            + KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE + "" attribute"",
+                            ""CONNECTION_GROUP_ATTRIBUTES.ERROR_INVALID_KSM_CONFIG_BLOB"");
+                }
+            }
+
+            else {
+
+                try {
+
+                    // Create an initially empty storage to be populated using the one-time token
+                    InMemoryStorage storage = new InMemoryStorage();
+
+                    // Populate the in-memory storage using the one-time-token
+                    SecretsManager.initializeStorage(storage, ksmConfigValue, null);
+
+                    // Create an options object using the values we extracted from the one-time token
+                    SecretsManagerOptions options = new SecretsManagerOptions(
+                        storage, null,
+                        configurationService.getAllowUnverifiedCertificate());
+
+                    // Attempt to fetch secrets using the options we created. This will both validate
+                    // that the configuration works, and potentially populate missing fields that the
+                    // initializeStorage() call did not set.
+                    SecretsManager.getSecrets(options);
+
+                    // Create a map to store the extracted values from the KSM storage
+                    Map<String, String> configMap = new HashMap<>();
+
+                    // Go through all the expected fields, extract from the KSM storage,
+                    // and write to the newly created map
+                    EXPECTED_KSM_FIELDS.forEach(configKey -> {
+
+                        // Only write the value into the new map if non-null
+                        String value = storage.getString(configKey);
+                        if (value != null)
+                            configMap.put(configKey, value);
+
+                    });
+
+                    // JSON-encode the value, and then base64 encode that to get the format
+                    // that KSM would expect
+                    String jsonString = new ObjectMapper().writeValueAsString(configMap);","[{'comment': 'Best practices for Jackson suggest using a singleton `ObjectMapper`.', 'commenter': 'mike-jumper'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration
+     *     attribute parsing/validation should be performed.
+     *
+     * @throws GuacamoleException
+     *     If the KSM_CONFIGURATION_ATTRIBUTE is set, but fails to validate as
+     *     either a KSM one-time-token, or a KSM base64-encoded JSON config blob.
+     */
+    public void processAttributes(Attributes entity) throws GuacamoleException {
+
+        // By default, if the KSM config attribute isn't being set, pass the
+        // provided attributes through without any changes
+        Map<String, String> attributes = entity.getAttributes();
+
+        // Get the value of the KSM config attribute in the provided map
+        String ksmConfigValue = attributes.get(
+                KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);
+
+        // Check if the attribute is set to a non-empty value
+        if (ksmConfigValue != null && !ksmConfigValue.trim().isEmpty()) {
+
+            // If it's already base-64-encoded, it's a KSM configuration blob,
+            // so validate it immediately
+            if(isBase64(ksmConfigValue)) {
+
+                // Attempt to validate the config as a base64-econded KSM config blob
+                try {
+                    KsmConfig.parseKsmConfig(ksmConfigValue);
+
+                    // If it validates, the entity can be returned as-is
+                    return;
+                }
+
+                catch (GuacamoleException exception) {
+
+                    // If the parsing attempt fails, throw a translatable error for display
+                    // on the frontend
+                    throw new TranslatableGuacamoleClientException(
+                            ""Invalid base64-encoded JSON KSM config provided for ""
+                            + KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE + "" attribute"",
+                            ""CONNECTION_GROUP_ATTRIBUTES.ERROR_INVALID_KSM_CONFIG_BLOB"");
+                }
+            }
+
+            else {
+
+                try {
+
+                    // Create an initially empty storage to be populated using the one-time token
+                    InMemoryStorage storage = new InMemoryStorage();
+
+                    // Populate the in-memory storage using the one-time-token
+                    SecretsManager.initializeStorage(storage, ksmConfigValue, null);
+
+                    // Create an options object using the values we extracted from the one-time token
+                    SecretsManagerOptions options = new SecretsManagerOptions(
+                        storage, null,
+                        configurationService.getAllowUnverifiedCertificate());
+
+                    // Attempt to fetch secrets using the options we created. This will both validate
+                    // that the configuration works, and potentially populate missing fields that the
+                    // initializeStorage() call did not set.
+                    SecretsManager.getSecrets(options);
+
+                    // Create a map to store the extracted values from the KSM storage
+                    Map<String, String> configMap = new HashMap<>();
+
+                    // Go through all the expected fields, extract from the KSM storage,
+                    // and write to the newly created map
+                    EXPECTED_KSM_FIELDS.forEach(configKey -> {
+
+                        // Only write the value into the new map if non-null
+                        String value = storage.getString(configKey);
+                        if (value != null)
+                            configMap.put(configKey, value);
+
+                    });
+
+                    // JSON-encode the value, and then base64 encode that to get the format
+                    // that KSM would expect
+                    String jsonString = new ObjectMapper().writeValueAsString(configMap);
+                    String base64EncodedJson = Base64.getEncoder().encodeToString(jsonString.getBytes());
+
+                    // Finally, try to parse the newly generated token as a KSM config. If this
+                    // works, the config should be fully functional
+                    KsmConfig.parseKsmConfig(base64EncodedJson);
+
+                    // Make a copy of the existing attributes, modifying just the value for
+                    // KSM_CONFIGURATION_ATTRIBUTE
+                    attributes = new HashMap<>(entity.getAttributes());","[{'comment': 'Why not `new HashMap<>(attributes)`? Re-invoking `getAttributes()` will result in any associated processing taking place again.', 'commenter': 'mike-jumper'}, {'comment': 'good call.', 'commenter': 'jmuehlner'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration
+     *     attribute parsing/validation should be performed.
+     *
+     * @throws GuacamoleException
+     *     If the KSM_CONFIGURATION_ATTRIBUTE is set, but fails to validate as
+     *     either a KSM one-time-token, or a KSM base64-encoded JSON config blob.
+     */
+    public void processAttributes(Attributes entity) throws GuacamoleException {
+
+        // By default, if the KSM config attribute isn't being set, pass the
+        // provided attributes through without any changes
+        Map<String, String> attributes = entity.getAttributes();
+
+        // Get the value of the KSM config attribute in the provided map
+        String ksmConfigValue = attributes.get(
+                KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);
+
+        // Check if the attribute is set to a non-empty value
+        if (ksmConfigValue != null && !ksmConfigValue.trim().isEmpty()) {
+
+            // If it's already base-64-encoded, it's a KSM configuration blob,
+            // so validate it immediately
+            if(isBase64(ksmConfigValue)) {
+
+                // Attempt to validate the config as a base64-econded KSM config blob
+                try {
+                    KsmConfig.parseKsmConfig(ksmConfigValue);
+
+                    // If it validates, the entity can be returned as-is
+                    return;
+                }
+
+                catch (GuacamoleException exception) {
+
+                    // If the parsing attempt fails, throw a translatable error for display
+                    // on the frontend
+                    throw new TranslatableGuacamoleClientException(
+                            ""Invalid base64-encoded JSON KSM config provided for ""
+                            + KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE + "" attribute"",
+                            ""CONNECTION_GROUP_ATTRIBUTES.ERROR_INVALID_KSM_CONFIG_BLOB"");
+                }
+            }
+
+            else {
+
+                try {
+
+                    // Create an initially empty storage to be populated using the one-time token
+                    InMemoryStorage storage = new InMemoryStorage();
+
+                    // Populate the in-memory storage using the one-time-token
+                    SecretsManager.initializeStorage(storage, ksmConfigValue, null);
+
+                    // Create an options object using the values we extracted from the one-time token
+                    SecretsManagerOptions options = new SecretsManagerOptions(
+                        storage, null,
+                        configurationService.getAllowUnverifiedCertificate());
+
+                    // Attempt to fetch secrets using the options we created. This will both validate
+                    // that the configuration works, and potentially populate missing fields that the
+                    // initializeStorage() call did not set.
+                    SecretsManager.getSecrets(options);
+
+                    // Create a map to store the extracted values from the KSM storage
+                    Map<String, String> configMap = new HashMap<>();
+
+                    // Go through all the expected fields, extract from the KSM storage,
+                    // and write to the newly created map
+                    EXPECTED_KSM_FIELDS.forEach(configKey -> {
+
+                        // Only write the value into the new map if non-null
+                        String value = storage.getString(configKey);
+                        if (value != null)
+                            configMap.put(configKey, value);
+
+                    });
+
+                    // JSON-encode the value, and then base64 encode that to get the format
+                    // that KSM would expect
+                    String jsonString = new ObjectMapper().writeValueAsString(configMap);
+                    String base64EncodedJson = Base64.getEncoder().encodeToString(jsonString.getBytes());
+
+                    // Finally, try to parse the newly generated token as a KSM config. If this
+                    // works, the config should be fully functional
+                    KsmConfig.parseKsmConfig(base64EncodedJson);
+
+                    // Make a copy of the existing attributes, modifying just the value for
+                    // KSM_CONFIGURATION_ATTRIBUTE
+                    attributes = new HashMap<>(entity.getAttributes());
+                    attributes.put(
+                            KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE, base64EncodedJson);
+
+                    // Set the newly updated attributes back to the original object
+                    entity.setAttributes(attributes);
+
+                }
+
+                // The KSM SDK only throws raw Exceptions, so we can't be more specific
+                catch (Exception exception) {
+
+                    // If the parsing attempt fails, throw a translatable error for display
+                    // on the frontend
+                    throw new TranslatableGuacamoleClientException(
+                            ""Invalid one-time KSM token provided for ""
+                            + KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE + "" attribute"",
+                            ""CONNECTION_GROUP_ATTRIBUTES.ERROR_INVALID_KSM_ONE_TIME_TOKEN"");","[{'comment': 'Here, too - the underlying exception should be included in the constructor as the cause.', 'commenter': 'mike-jumper'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService implements VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(
+            SecretsManager.KEY_HOSTNAME,
+            SecretsManager.KEY_CLIENT_ID,
+            SecretsManager.KEY_PRIVATE_KEY,
+            SecretsManager.KEY_CLIENT_KEY,
+            SecretsManager.KEY_APP_KEY,
+            SecretsManager.KEY_OWNER_PUBLIC_KEY,
+            SecretsManager.KEY_SERVER_PUBIC_KEY_ID
+    );
+
+    /**
+     * Return true if the provided input is a valid base64-encoded string,
+     * false otherwise.
+     *
+     * @param input
+     *     The string to check if base-64 encoded.
+     *
+     * @return
+     *     true if the provided input is a valid base64-encoded string,
+     *     false otherwise.
+     */
+    private static boolean isBase64(String input) {
+
+        try {
+            Base64.getDecoder().decode(input);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Given an attributes-enabled entity, check for the presence of the
+     * KSM_CONFIGURATION_ATTRIBUTE attribute. If it's set, check if it's a valid
+     * KSM one-time token. If so, attempt to translate it to a base-64-encoded
+     * json KSM config blob, and set it back to the provided entity.
+     * If it's already a KSM config blob, validate it as config blob. If either
+     * validation fails, a GuacamoleException will be thrown.
+     *
+     * @param entity
+     *     The attributes-enable entity for which the KSM configuration
+     *     attribute parsing/validation should be performed.
+     *
+     * @throws GuacamoleException
+     *     If the KSM_CONFIGURATION_ATTRIBUTE is set, but fails to validate as
+     *     either a KSM one-time-token, or a KSM base64-encoded JSON config blob.
+     */
+    public void processAttributes(Attributes entity) throws GuacamoleException {
+
+        // By default, if the KSM config attribute isn't being set, pass the
+        // provided attributes through without any changes
+        Map<String, String> attributes = entity.getAttributes();
+
+        // Get the value of the KSM config attribute in the provided map
+        String ksmConfigValue = attributes.get(
+                KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);
+
+        // Check if the attribute is set to a non-empty value
+        if (ksmConfigValue != null && !ksmConfigValue.trim().isEmpty()) {
+
+            // If it's already base-64-encoded, it's a KSM configuration blob,
+            // so validate it immediately
+            if(isBase64(ksmConfigValue)) {
+
+                // Attempt to validate the config as a base64-econded KSM config blob
+                try {
+                    KsmConfig.parseKsmConfig(ksmConfigValue);
+
+                    // If it validates, the entity can be returned as-is
+                    return;
+                }
+
+                catch (GuacamoleException exception) {
+
+                    // If the parsing attempt fails, throw a translatable error for display
+                    // on the frontend
+                    throw new TranslatableGuacamoleClientException(
+                            ""Invalid base64-encoded JSON KSM config provided for ""
+                            + KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE + "" attribute"",
+                            ""CONNECTION_GROUP_ATTRIBUTES.ERROR_INVALID_KSM_CONFIG_BLOB"");
+                }
+            }
+
+            else {
+
+                try {
+
+                    // Create an initially empty storage to be populated using the one-time token
+                    InMemoryStorage storage = new InMemoryStorage();
+
+                    // Populate the in-memory storage using the one-time-token
+                    SecretsManager.initializeStorage(storage, ksmConfigValue, null);
+
+                    // Create an options object using the values we extracted from the one-time token
+                    SecretsManagerOptions options = new SecretsManagerOptions(
+                        storage, null,
+                        configurationService.getAllowUnverifiedCertificate());
+
+                    // Attempt to fetch secrets using the options we created. This will both validate
+                    // that the configuration works, and potentially populate missing fields that the
+                    // initializeStorage() call did not set.
+                    SecretsManager.getSecrets(options);
+
+                    // Create a map to store the extracted values from the KSM storage
+                    Map<String, String> configMap = new HashMap<>();
+
+                    // Go through all the expected fields, extract from the KSM storage,
+                    // and write to the newly created map
+                    EXPECTED_KSM_FIELDS.forEach(configKey -> {
+
+                        // Only write the value into the new map if non-null
+                        String value = storage.getString(configKey);
+                        if (value != null)
+                            configMap.put(configKey, value);
+
+                    });
+
+                    // JSON-encode the value, and then base64 encode that to get the format
+                    // that KSM would expect
+                    String jsonString = new ObjectMapper().writeValueAsString(configMap);
+                    String base64EncodedJson = Base64.getEncoder().encodeToString(jsonString.getBytes());","[{'comment': ""This will use the platform's default charset, whatever that happens to be. We should instead explicitly specify UTF-8 (assuming that's the intent)."", 'commenter': 'mike-jumper'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/resources/translations/en.json,"@@ -6,7 +6,10 @@
 
     ""CONNECTION_GROUP_ATTRIBUTES"" : {
         ""SECTION_HEADER_KSM_CONFIG"" : ""Keeper Secrets Manager"",
-        ""FIELD_HEADER_KSM_CONFIG""   : ""KSM Service Configuration ""
+        ""FIELD_HEADER_KSM_CONFIG""   : ""KSM Service Configuration "",
+
+        ""ERROR_INVALID_KSM_CONFIG_BLOB"": ""The provided base64-encoded KSM configuration blob is not valid. Please ensure that you have copied the entire blob."",
+        ""ERROR_INVALID_KSM_ONE_TIME_TOKEN"": ""The provided configuration is not a valid KSM one-time token or base64-encoded configuration blob. Please ensure that you have copied the entire token value.""","[{'comment': 'Can you update to match the style of the existing JSON? (ie: spaces around `:`)', 'commenter': 'mike-jumper'}, {'comment': 'yes', 'commenter': 'jmuehlner'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,251 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService extends VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.","[{'comment': 'retrieving*', 'commenter': 'mike-jumper'}, {'comment': 'Oops I will fix.', 'commenter': 'jmuehlner'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,251 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService extends VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * A singleton Objectmapper for converting a Map to a JSON string when","[{'comment': 'ObjectMapper*', 'commenter': 'mike-jumper'}, {'comment': 'Uppercase ""M"" coming in hot.', 'commenter': 'jmuehlner'}]"
743,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -0,0 +1,251 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.language.TranslatableGuacamoleClientException;
+import org.apache.guacamole.net.auth.Attributes;
+import org.apache.guacamole.net.auth.ConnectionGroup;
+import org.apache.guacamole.net.auth.DelegatingDirectory;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.vault.ksm.conf.KsmAttributeService;
+import org.apache.guacamole.vault.ksm.conf.KsmConfig;
+import org.apache.guacamole.vault.ksm.conf.KsmConfigurationService;
+import org.apache.guacamole.vault.user.VaultDirectoryService;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.keepersecurity.secretsManager.core.InMemoryStorage;
+import com.keepersecurity.secretsManager.core.SecretsManager;
+import com.keepersecurity.secretsManager.core.SecretsManagerOptions;
+
+/**
+ * A KSM-specific vault directory service that wraps the connection group directory
+ * to enable automatic translation of KSM one-time tokens into base64-encoded JSON
+ * config bundles.
+ */
+public class KsmDirectoryService extends VaultDirectoryService {
+
+    /**
+     * Service for retreiving KSM configuration details.
+     */
+    @Inject
+    private KsmConfigurationService configurationService;
+
+    /**
+     * A singleton Objectmapper for converting a Map to a JSON string when
+     * generating a base64-encoded JSON KSM config blob.
+     */
+    private static final ObjectMapper objectMapper = new ObjectMapper();
+
+    /**
+     * All expected fields in the KSM configuration JSON blob.
+     */
+    private static final List<String> EXPECTED_KSM_FIELDS = Arrays.asList(","[{'comment': 'As this is intended to be immutable, I suggest wrapping this in `Collections.unmodifiableList(...)`.', 'commenter': 'mike-jumper'}, {'comment': 'Sure.', 'commenter': 'jmuehlner'}]"
746,guacamole/src/main/frontend/src/app/rest/services/tunnelService.js,"@@ -54,6 +54,15 @@ angular.module('rest').factory('tunnelService', ['$injector',
      */
     var DOWNLOAD_CLEANUP_WAIT = 5000;
 
+    /**
+     * The maximum size a chunk may be during uploadToStream()","[{'comment': 'Minor nitpick: Block comments should end in a period.\r\n\r\nAlso it would be really helpful if this specified what units this chunk size is in.', 'commenter': 'jmuehlner'}]"
746,guacamole/src/main/frontend/src/app/rest/services/tunnelService.js,"@@ -301,51 +310,73 @@ angular.module('rest').factory('tunnelService', ['$injector',
                 + '/' + encodeURIComponent(sanitizeFilename(file.name))
                 + '?token=' + encodeURIComponent(authenticationService.getCurrentToken());
 
-        var xhr = new XMLHttpRequest();
-
-        // Invoke provided callback if upload tracking is supported
-        if (progressCallback && xhr.upload) {
-            xhr.upload.addEventListener('progress', function updateProgress(e) {
-                progressCallback(e.loaded);
-            });
+        // Creates the chunk to be uploaded
+        const createChunk = (offset) => {","[{'comment': ""Even functions that are not exposed on the scope should have block comments just like any other.\r\n\r\nAlso, just from a readability perspective, it is a little odd to have a function called `createChunk` actually do the uploading as well. I think it'd be easier to understand what's going on here if `createChunk` returned a chunk, and then the caller recursively called `uploadChunk` again."", 'commenter': 'jmuehlner'}]"
746,guacamole/src/main/java/org/apache/guacamole/tunnel/InputStreamInterceptingFilter.java,"@@ -112,9 +112,8 @@ private void readNextBlob(InterceptedStream<InputStream> stream) {
             // End stream if no more data
             if (length == -1) {
 
-                // Close stream, send end if the stream is still valid
-                if (closeInterceptedStream(stream))
-                    sendEnd(stream.getIndex());
+                // Close stream
+                closeInterceptedStream(stream);","[{'comment': 'Why did you get rid of the ""end"" instruction here? ', 'commenter': 'jmuehlner'}, {'comment': ""The end instruction closes the writer, so without deleting that line, each subsequent chunk would just rewrite the previous. The stream is now closed when the upload is complete by ManagedFileUpload's stream state."", 'commenter': 'elijahnicpon'}, {'comment': 'Ah gotcha. One of the reasons that I brought this up is that the block comment for this function still specifies that the an ""end"" instruction will automatically be sent if the end of the InputStream is reached, which is no longer correct. The comment should be updated accordingly.', 'commenter': 'jmuehlner'}, {'comment': 'Thanks! Just committed the changes you requested.', 'commenter': 'elijahnicpon'}, {'comment': ""@elijahnicpon I'm not seeing where the `end` instruction is sent now that this `sendEnd()` call has been removed. I do see that `ManagedFileUpload` updates its own understanding of the stream state, but the associated stream will still be active and consuming resources within guacd until `end` is received.\r\n\r\nCan you point to where the relevant `end` instruction is sent from, if it will not be here?"", 'commenter': 'mike-jumper'}, {'comment': ""You're right. I could've sworn I traced that up but I definitely made a mistake there. Thanks!"", 'commenter': 'elijahnicpon'}]"
746,guacamole/src/main/frontend/src/app/rest/services/tunnelService.js,"@@ -301,51 +310,99 @@ angular.module('rest').factory('tunnelService', ['$injector',
                 + '/' + encodeURIComponent(sanitizeFilename(file.name))
                 + '?token=' + encodeURIComponent(authenticationService.getCurrentToken());
 
-        var xhr = new XMLHttpRequest();
-
-        // Invoke provided callback if upload tracking is supported
-        if (progressCallback && xhr.upload) {
-            xhr.upload.addEventListener('progress', function updateProgress(e) {
-                progressCallback(e.loaded);
-            });
-        }
-
-        // Resolve/reject promise once upload has stopped
-        xhr.onreadystatechange = function uploadStatusChanged() {
-
-            // Ignore state changes prior to completion
-            if (xhr.readyState !== 4)
-                return;
-
-            // Resolve if HTTP status code indicates success
-            if (xhr.status >= 200 && xhr.status < 300)
-                deferred.resolve();
-
-            // Parse and reject with resulting JSON error
-            else if (xhr.getResponseHeader('Content-Type') === 'application/json')
-                deferred.reject(new Error(angular.fromJson(xhr.responseText)));
-
-            // Warn of lack of permission of a proxy rejects the upload
-            else if (xhr.status >= 400 && xhr.status < 500)
-                deferred.reject(new Error({
-                    'type'       : Error.Type.STREAM_ERROR,
-                    'statusCode' : Guacamole.Status.Code.CLIENT_FORBIDDEN,
-                    'message'    : 'HTTP ' + xhr.status
-                }));
-
-            // Assume internal error for all other cases
-            else
-                deferred.reject(new Error({
-                    'type'       : Error.Type.STREAM_ERROR,
-                    'statusCode' : Guacamole.Status.Code.INTERNAL_ERROR,
-                    'message'    : 'HTTP ' + xhr.status
-                }));
+        /**
+         * Creates a chunk of the inputted file to be uploaded.
+         * 
+         * @param {Number} offset
+         *      The byte at which to begin the chunk. 
+         * 
+         * @return {File}
+         *      The file chunk created by this function.
+         */
+        const createChunk = (offset) => {
+            var chunkEnd = Math.min(offset + CHUNK_SIZE, file.size);
+            const chunk = file.slice(offset, chunkEnd);
+            return chunk;
+        };
+
+        /**
+         * POSTs the inputted chunks and recursively calls uploadHandler()
+         * until the upload is complete.
+         * 
+         * @param {File} chunk
+         *      The chunk to be uploaded to the stream.
+         * 
+         * @param {Number} offset
+         *      The byte at which the inputted chunk begins.
+         */ 
+        const uploadChunk = (chunk, offset) => {
+            var xhr = new XMLHttpRequest();
+            xhr.open('POST', url, true);
+
+            // Invoke provided callback if upload tracking is supported.
+            if (progressCallback && xhr.upload) {
+                xhr.upload.addEventListener('progress', function updateProgress(e) {
+                    progressCallback(e.loaded + offset);
+                });
+            };
+
+            // Continue to next chunk, resolve, or reject promise as appropriate
+            // once upload has stopped
+            xhr.onreadystatechange = function uploadStatusChanged() {
+
+                // Ignore state changes prior to completion.
+                if (xhr.readyState !== 4)
+                    return;
+
+                // Resolve if last chunk or begin next chunk if HTTP status
+                // code indicates success.
+                if (xhr.status >= 200 && xhr.status < 300) {
+                    offset += CHUNK_SIZE;
+
+                    if (offset < file.size)
+                        uploadHandler(offset);
+                    else
+                        deferred.resolve();
+                }
+
+                // Parse and reject with resulting JSON error
+                else if (xhr.getResponseHeader('Content-Type') === 'application/json')
+                    deferred.reject(new Error(angular.fromJson(xhr.responseText)));
+
+                // Warn of lack of permission of a proxy rejects the upload
+                else if (xhr.status >= 400 && xhr.status < 500)
+                    deferred.reject(new Error({
+                        'type': Error.Type.STREAM_ERROR,
+                        'statusCode': Guacamole.Status.Code.CLIENT_FORBIDDEN,
+                        'message': 'HTTP ' + xhr.status
+                    }));
+
+                // Assume internal error for all other cases
+                else
+                    deferred.reject(new Error({
+                        'type': Error.Type.STREAM_ERROR,
+                        'statusCode': Guacamole.Status.Code.INTERNAL_ERROR,
+                        'message': 'HTTP ' + xhr.status
+                    }));
+
+            };
+
+            // Perform upload
+            xhr.send(chunk);
+
+        };
 
+        /**
+         * Handler for the upload process. ","[{'comment': ""Please document the function such that the high-level use/purpose of the function is captured. Saying that `uploadHandler()` is a handler for the upload unfortunately doesn't provide much information."", 'commenter': 'mike-jumper'}, {'comment': 'Gotcha. Updated it to:\r\nHandles the recursive upload process. Each time it is called, a chunk is made with createChunk(), starting at the offset parameter. The chunk is then sent by uploadChunk(), which recursively calls this handler until the upload process is either completed and the promise is resolved, or fails and the promise is rejected. ', 'commenter': 'elijahnicpon'}]"
748,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/acs/SAMLService.java,"@@ -98,6 +116,9 @@ public URI createRequest() throws GuacamoleException {
             throw new GuacamoleServerException(""SAML IdP redirect could not ""
                     + ""be generated due to an error in the URI syntax: ""
                     + e.getMessage());
+        } catch (SettingsException e) {","[{'comment': ""Please use the same style as already established here (don't cuddle the `catch`)."", 'commenter': 'mike-jumper'}, {'comment': 'Sure', 'commenter': 'jmuehlner'}]"
748,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/acs/SAMLService.java,"@@ -98,6 +116,9 @@ public URI createRequest() throws GuacamoleException {
             throw new GuacamoleServerException(""SAML IdP redirect could not ""
                     + ""be generated due to an error in the URI syntax: ""
                     + e.getMessage());
+        } catch (SettingsException e) {
+            throw new GuacamoleServerException(""SAML Settings errors: ""","[{'comment': 'Is there a more explanative contextual message we can provide here beyond ""SAML Settings errors: ...""?', 'commenter': 'mike-jumper'}, {'comment': 'Sure, I dug into the source to find the situation where it would throw this error. Will update.', 'commenter': 'jmuehlner'}]"
748,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/acs/SAMLService.java,"@@ -99,6 +117,11 @@ public URI createRequest() throws GuacamoleException {
                     + ""be generated due to an error in the URI syntax: ""
                     + e.getMessage());
         }
+        catch (SettingsException e) {
+            throw new GuacamoleServerException(""Error while attempting to sign ""
+                    + ""request using provided private key / certificate: ""","[{'comment': 'Muuuuuuuch nicer.', 'commenter': 'mike-jumper'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/GuacamoleExceptionSupplier.java,"@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm;
+
+import org.apache.guacamole.GuacamoleException;
+
+/**
+ * A class that is basically equivalent to the standard Supplier class in
+ * Java, except that the get() function can throw GuacamoleException, which
+ * is impossible with any of the standard Java lambda type classes, since
+ * none of them can handle checked exceptions
+ */
+public abstract class GuacamoleExceptionSupplier<T> {","[{'comment': 'I really wish that java would provide some syntactical sugary magic that would do this for me, but alas, it needs to be done.\r\n\r\nNot sure if this has the right name, or is in the right place? Thoughts?', 'commenter': 'jmuehlner'}, {'comment': 'With no concrete bits at all, this should be an `interface`.', 'commenter': 'mike-jumper'}, {'comment': 'Also, please add JavaDoc for the type parameter `T`.', 'commenter': 'mike-jumper'}]"
751,guacamole/src/main/frontend/src/app/settings/directives/guacSettingsPreferences.js,"@@ -56,6 +58,27 @@ angular.module('settings').directive('guacSettingsPreferences', [function guacSe
                 }
             };
 
+            /**
+             * An action which closes the current dialog, and refreshes
+             * the user data on dialog close.
+             */
+            const ACKNOWLEDGE_ACTION_RELOAD = {
+                name        : 'SETTINGS_PREFERENCES.ACTION_ACKNOWLEDGE',
+                // Handle action
+                callback    : function acknowledgeCallback() {
+                    userService.getUser(dataSource, username)","[{'comment': 'This is to make sure that the updated value gets pulled if, for example, a one-time token gets rewritten into a config blob.', 'commenter': 'jmuehlner'}]"
751,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/JDBCAuthenticationProviderService.java,"@@ -159,13 +182,21 @@ else if (!databaseRestrictionsApplicable) {
 
     }
 
+    @Override
+    public ModeledUserContext getUserContext(AuthenticationProvider authenticationProvider,
+            AuthenticatedUser authenticatedUser) throws GuacamoleException {
+
+        // Do not force refresh unless updateUserContext is explicitly called
+        return getUserContext(authenticationProvider, authenticatedUser, false);
+    }
+
     @Override
     public UserContext updateUserContext(AuthenticationProvider authenticationProvider,
             UserContext context, AuthenticatedUser authenticatedUser,
             Credentials credentials) throws GuacamoleException {
 
-        // No need to update the context
-        return context;
+        // Force-refresh the user context
+        return getUserContext(authenticationProvider, authenticatedUser, true);","[{'comment': ""This is to ensure that the KSM config value saved on the user preferences screen is up to date. Without this, you'd have to log out and back in again before the correct value would be pulled (when doing token replacement on a connection)."", 'commenter': 'jmuehlner'}, {'comment': ""Is there a need for `forceRefresh`? `getUserContext()` of `AuthenticationProvider` is called at most once, and only during initial auth, with `updateUserContext()` being the function that's called repeatedly for established sessions."", 'commenter': 'mike-jumper'}, {'comment': ""Ah, I see. In that case it seems like the `authenticatedUser instanceof ModeledAuthenticatedUser` check in `retrieveUser` isn't really needed, yeah? I'll remove the flag and simplify."", 'commenter': 'jmuehlner'}, {'comment': ""> Ah, I see. In that case it seems like the `authenticatedUser instanceof ModeledAuthenticatedUser` check in `retrieveUser` isn't really needed, yeah?\r\n\r\nWell, _that_ check is needed as `authenticatedUser` is not guaranteed to be an implementation of `AuthenticatedUser` from this extension (`ModeledAuthenticatedUser`). If the user is authenticated by some other extension, such as LDAP or SAML, it'll be the `AuthenticatedUser` implementation from that extension."", 'commenter': 'mike-jumper'}, {'comment': ""I still don't get why that's needed, though. I mean, getting rid of that check just forces it to reload from the DB every time, which is what we want.\r\n\r\nThat check is what `forceRefresh` existed to specifically disable, which is what's needed to get the user context to actually refresh when `updateUserContext` is called."", 'commenter': 'jmuehlner'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/conf/KsmAttributeService.java,"@@ -36,28 +39,81 @@
 @Singleton
 public class KsmAttributeService implements VaultAttributeService {
 
+
+    @Inject
+    private KsmConfigurationService configurationService;","[{'comment': 'Please document.', 'commenter': 'mike-jumper'}]"
751,guacamole/src/main/frontend/webpack.config.js,"@@ -77,18 +77,6 @@ module.exports = {
         ]
     },
     optimization: {
-        minimizer: [
-
-            // Minify using Google Closure Compiler
-            new ClosureWebpackPlugin({ mode: 'STANDARD' }, {
-                languageIn: 'ECMASCRIPT_2020',
-                languageOut: 'ECMASCRIPT5',
-                compilationLevel: 'SIMPLE'
-            }),
-
-            new CssMinimizerPlugin()
-
-        ],","[{'comment': 'Why is this being removed?', 'commenter': 'mike-jumper'}, {'comment': ""Gah, sorry. It shouldn't be. I'll put it back."", 'commenter': 'jmuehlner'}]"
751,guacamole/src/main/frontend/src/app/settings/directives/guacSettingsPreferences.js,"@@ -56,6 +58,27 @@ angular.module('settings').directive('guacSettingsPreferences', [function guacSe
                 }
             };
 
+            /**
+             * An action which closes the current dialog, and refreshes
+             * the user data on dialog close.
+             */
+            const ACKNOWLEDGE_ACTION_RELOAD = {
+                name        : 'SETTINGS_PREFERENCES.ACTION_ACKNOWLEDGE',
+                // Handle action
+                callback    : function acknowledgeCallback() {
+                    userService.getUser(dataSource, username)
+                        .then(user => $scope.user = user)
+                        .then(guacNotification.showStatus(false))","[{'comment': 'As `guacNotification.showStatus(false)` is a direct function call and not a callback, this will be invoked immediately (rather than when the promise is resolved).', 'commenter': 'mike-jumper'}, {'comment': 'Beware missing semicolon here.', 'commenter': 'mike-jumper'}]"
751,guacamole/src/main/frontend/src/app/settings/directives/guacSettingsPreferences.js,"@@ -78,6 +101,26 @@ angular.module('settings').directive('guacSettingsPreferences', [function guacSe
              */
             $scope.preferences = preferenceService.preferences;
 
+            /**
+             * All available user attributes, as a mapping of form name to form
+             * object. The form object contains a name, as well as a Map of fields.
+             *
+             * The Map type is used here to maintain form/name uniqueness, as well as
+             * insertion order, to ensure a consistent UI experience.
+             *
+             * @type Map<String, Object>
+             */
+            $scope.attributeMap = new Map();","[{'comment': 'Does the build automatically polyfill this?', 'commenter': 'mike-jumper'}, {'comment': 'It does not. Is that a problem? This usage of the `Map` data structure looks pretty well supported, including in IE11.', 'commenter': 'jmuehlner'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/conf/KsmAttributeService.java,"@@ -36,28 +39,81 @@
 @Singleton
 public class KsmAttributeService implements VaultAttributeService {
 
+
+    @Inject
+    private KsmConfigurationService configurationService;
+
     /**
      * The name of the attribute which can contain a KSM configuration blob
-     * associated with a connection group.
+     * associated with either a connection group or user.
      */
     public static final String KSM_CONFIGURATION_ATTRIBUTE = ""ksm-config"";
 
     /**
      * All attributes related to configuring the KSM vault on a
-     * per-connection-group basis.
+     * per-connection-group or per-user basis.
      */
     public static final Form KSM_CONFIGURATION_FORM = new Form(""ksm-config"",
             Arrays.asList(new TextField(KSM_CONFIGURATION_ATTRIBUTE)));
 
     /**
-     * All KSM-specific connection group attributes, organized by form.
+     * All KSM-specific attributes for users or connection groups, organized by form.
      */
-    public static final Collection<Form> KSM_CONNECTION_GROUP_ATTRIBUTES =
+    public static final Collection<Form> KSM_ATTRIBUTES =
             Collections.unmodifiableCollection(Arrays.asList(KSM_CONFIGURATION_FORM));
 
+    /**
+     * The name of the attribute which can controls whether a KSM user configuration
+     * is enabled on a connection-by-connection basis.
+     */
+    public static final String KSM_USER_CONFIG_ENABLED_ATTRIBUTE = ""ksm-user-config-enabled"";
+
+    /**
+     * The string value used by KSM attributes to represent the boolean value ""true"".
+     */
+    public static final String TRUTH_VALUE = ""true"";
+
+    /**
+     * All attributes related to configuring the KSM vault on a per-connection basis.
+     */
+    public static final Form KSM_CONNECTION_FORM = new Form(""ksm-config"",
+            Arrays.asList(new BooleanField(KSM_USER_CONFIG_ENABLED_ATTRIBUTE, TRUTH_VALUE)));
+
+    /**
+     * All KSM-specific attributes for connections, organized by form.
+     */
+    public static final Collection<Form> KSM_CONNECTION_ATTRIBUTES =
+            Collections.unmodifiableCollection(Arrays.asList(KSM_CONNECTION_FORM));
+
+    @Override
+    public Collection<Form> getConnectionAttributes() {
+        return KSM_CONNECTION_ATTRIBUTES;
+    }
+
     @Override
     public Collection<Form> getConnectionGroupAttributes() {
-        return KSM_CONNECTION_GROUP_ATTRIBUTES;
+        return KSM_ATTRIBUTES;
+    }
+
+    @Override
+    public Collection<Form> getUserAttributes() {
+        return KSM_ATTRIBUTES;
+    }
+
+    @Override
+    public Collection<Form> getUserPreferenceAttributes() {
+
+        try {
+
+            // Expose the user attributes IFF user-level KSM configuration is enabled
+            return configurationService.getAllowUserConfig() ? KSM_ATTRIBUTES : Collections.emptyList();
+
+        } catch (GuacamoleException e) {","[{'comment': ""Please don't cuddle the `catch`: https://guacamole.apache.org/guac-style/#braces"", 'commenter': 'mike-jumper'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -595,6 +596,38 @@ public KeeperRecord getRecordByDomain(String domain) throws GuacamoleException {
      *     is invalid.
      */
     public Future<String> getSecret(String notation) throws GuacamoleException {
+        return getSecret(notation, null);
+    }
+
+    /**
+     * Returns the value of the secret stored within Keeper Secrets Manager and
+     * represented by the given Keeper notation. Keeper notation locates the
+     * value of a specific field, custom field, or file associated with a
+     * specific record. See: https://docs.keeper.io/secrets-manager/secrets-manager/about/keeper-notation
+     * If a fallbackFunction is provided, it will be invoked to generate
+     * a return value in the case where no secrest is found with the given","[{'comment': 'secret*', 'commenter': 'mike-jumper'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -304,6 +325,72 @@ private String getConnectionGroupKsmConfig(
 
     }
 
+    /**
+     * Returns true if user-level KSM configuration is enabled for the given
+     * Connectable, false otherwise.
+     *
+     * @param connectable
+     *     The connectable to check for whether user-level KSM configs are
+     *     enabled.
+     *
+     * @return
+     *     True if user-level KSM configuration is enabled for the given
+     *     Connectable, false otherwise.
+     */
+    private boolean isKsmUserConfigEnabled(Connectable connectable) {
+
+        // If it's a connection, user-level config is enabled IFF the appropriate
+        // attribute is set to true
+        if (connectable instanceof Connection)
+            return KsmAttributeService.TRUTH_VALUE.equals(((Connection) connectable).getAttributes().get(
+                KsmAttributeService.KSM_USER_CONFIG_ENABLED_ATTRIBUTE));
+
+        // KSM token replacement is not enabled for balancing groups, so for
+        // now, user-level KSM configs will be explicitly disabled.
+        // TODO: If token replacement is implemented for balancing groups,
+        // implement this functionality for them as well.
+        return false;","[{'comment': ""It is available for balancing groups, but only the tokens that don't depend on connection parameter values (ie: explicitly mapped tokens from the YAML)."", 'commenter': 'mike-jumper'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -304,6 +325,72 @@ private String getConnectionGroupKsmConfig(
 
     }
 
+    /**
+     * Returns true if user-level KSM configuration is enabled for the given
+     * Connectable, false otherwise.
+     *
+     * @param connectable
+     *     The connectable to check for whether user-level KSM configs are
+     *     enabled.
+     *
+     * @return
+     *     True if user-level KSM configuration is enabled for the given
+     *     Connectable, false otherwise.
+     */
+    private boolean isKsmUserConfigEnabled(Connectable connectable) {
+
+        // If it's a connection, user-level config is enabled IFF the appropriate
+        // attribute is set to true
+        if (connectable instanceof Connection)
+            return KsmAttributeService.TRUTH_VALUE.equals(((Connection) connectable).getAttributes().get(
+                KsmAttributeService.KSM_USER_CONFIG_ENABLED_ATTRIBUTE));
+
+        // KSM token replacement is not enabled for balancing groups, so for
+        // now, user-level KSM configs will be explicitly disabled.
+        // TODO: If token replacement is implemented for balancing groups,
+        // implement this functionality for them as well.
+        return false;
+
+    }
+
+    /**
+     * Return the KSM config blob for the current user IFF user KSM configs
+     * are enabled globally, and are enabled for the given connectable. If no
+     * KSM config exists for the given user or KSM configs are not enabled,
+     * null will be returned.
+     *
+     * @param userContext
+     *    The user context from which the current user should be fetched.
+     *
+     * @param connectable
+     *    The connectable to which the connection is being established. This
+     *    is the conneciton which will be checked to see if user KSM configs
+     *    are enabled.
+     *
+     * @return
+     *    The base64 encoded KSM config blob for the current user if one
+     *    exists, and if user KSM configs are enabled globally and for the
+     *    provided connectable.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while attempting to fetch the KSM config.
+     */
+    private String getUserKSMConfig(
+            UserContext userContext, Connectable connectable) throws GuacamoleException {
+
+        // Check if user KSM configs are enabled globally, and for the given connectable
+        if (confService.getAllowUserConfig() && isKsmUserConfigEnabled(connectable))
+
+            // Return the user-specific KSM config, if one exists
+            return userContext.self().getAttributes().get(
+                    KsmAttributeService.KSM_CONFIGURATION_ATTRIBUTE);","[{'comment': 'The blank line separating the `return` from the controlling `if` makes this difficult to read as being related.', 'commenter': 'mike-jumper'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -314,77 +401,85 @@ public Map<String, Future<String>> getTokens(UserContext userContext, Connectabl
         // Attempt to find a KSM config for this connection or group
         String ksmConfig = getConnectionGroupKsmConfig(userContext, connectable);
 
-        // Get a client instance for this KSM config
-        KsmClient ksm = getClient(ksmConfig);
-
-        // Retrieve and define server-specific tokens, if any
-        String hostname = parameters.get(""hostname"");
-        if (hostname != null && !hostname.isEmpty())
-            addRecordTokens(tokens, ""KEEPER_SERVER_"",
-                    ksm.getRecordByHost(filter.filter(hostname)));
-
-        // Tokens specific to RDP
-        if (""rdp"".equals(config.getProtocol())) {
-
-            // Retrieve and define gateway server-specific tokens, if any
-            String gatewayHostname = parameters.get(""gateway-hostname"");
-            if (gatewayHostname != null && !gatewayHostname.isEmpty())
-                addRecordTokens(tokens, ""KEEPER_GATEWAY_"",
-                        ksm.getRecordByHost(filter.filter(gatewayHostname)));
-
-            // Retrieve and define domain tokens, if any
-            String domain = parameters.get(""domain"");
-            String filteredDomain = null;
-            if (domain != null && !domain.isEmpty()) {
-                filteredDomain = filter.filter(domain);
-                addRecordTokens(tokens, ""KEEPER_DOMAIN_"",
-                        ksm.getRecordByDomain(filteredDomain));
+        // Create a list containing just the global / connection group config
+        List<KsmClient> ksmClients = new ArrayList<>(2);
+        ksmClients.add(getClient(ksmConfig));
+
+        // Only use the user-specific KSM config if explicitly enabled in the global
+        // configuration, AND for the specific connectable being connected to
+        String userKsmConfig = getUserKSMConfig(userContext, connectable);
+        if (userKsmConfig != null && !userKsmConfig.trim().isEmpty())
+            ksmClients.add(0, getClient(userKsmConfig));
+
+        // Iterate through the KSM clients, processing using the user-specific
+        // config first (if it exists), to ensure that any admin-defined values
+        // will override the user-speicifc values","[{'comment': 'specific*', 'commenter': 'mike-jumper'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -314,77 +401,85 @@ public Map<String, Future<String>> getTokens(UserContext userContext, Connectabl
         // Attempt to find a KSM config for this connection or group
         String ksmConfig = getConnectionGroupKsmConfig(userContext, connectable);
 
-        // Get a client instance for this KSM config
-        KsmClient ksm = getClient(ksmConfig);
-
-        // Retrieve and define server-specific tokens, if any
-        String hostname = parameters.get(""hostname"");
-        if (hostname != null && !hostname.isEmpty())
-            addRecordTokens(tokens, ""KEEPER_SERVER_"",
-                    ksm.getRecordByHost(filter.filter(hostname)));
-
-        // Tokens specific to RDP
-        if (""rdp"".equals(config.getProtocol())) {
-
-            // Retrieve and define gateway server-specific tokens, if any
-            String gatewayHostname = parameters.get(""gateway-hostname"");
-            if (gatewayHostname != null && !gatewayHostname.isEmpty())
-                addRecordTokens(tokens, ""KEEPER_GATEWAY_"",
-                        ksm.getRecordByHost(filter.filter(gatewayHostname)));
-
-            // Retrieve and define domain tokens, if any
-            String domain = parameters.get(""domain"");
-            String filteredDomain = null;
-            if (domain != null && !domain.isEmpty()) {
-                filteredDomain = filter.filter(domain);
-                addRecordTokens(tokens, ""KEEPER_DOMAIN_"",
-                        ksm.getRecordByDomain(filteredDomain));
+        // Create a list containing just the global / connection group config
+        List<KsmClient> ksmClients = new ArrayList<>(2);
+        ksmClients.add(getClient(ksmConfig));
+
+        // Only use the user-specific KSM config if explicitly enabled in the global
+        // configuration, AND for the specific connectable being connected to
+        String userKsmConfig = getUserKSMConfig(userContext, connectable);
+        if (userKsmConfig != null && !userKsmConfig.trim().isEmpty())
+            ksmClients.add(0, getClient(userKsmConfig));
+
+        // Iterate through the KSM clients, processing using the user-specific
+        // config first (if it exists), to ensure that any admin-defined values
+        // will override the user-speicifc values
+        Iterator<KsmClient> ksmIterator = ksmClients.iterator();
+        while (ksmIterator.hasNext()) {
+
+            KsmClient ksm = ksmIterator.next();
+
+            // Retrieve and define server-specific tokens, if any
+            String hostname = parameters.get(""hostname"");
+            if (hostname != null && !hostname.isEmpty())
+                addRecordTokens(tokens, ""KEEPER_SERVER_"",
+                        ksm.getRecordByHost(filter.filter(hostname)));
+
+            // Tokens specific to RDP
+            if (""rdp"".equals(config.getProtocol())) {
+                // Retrieve and define domain tokens, if any
+                String domain = parameters.get(""domain"");
+                String filteredDomain = null;
+                if (domain != null && !domain.isEmpty()) {
+                    filteredDomain = filter.filter(domain);
+                    addRecordTokens(tokens, ""KEEPER_DOMAIN_"",
+                            ksm.getRecordByDomain(filteredDomain));
+                }
+
+                // Retrieve and define gateway domain tokens, if any
+                String gatewayDomain = parameters.get(""gateway-domain"");
+                String filteredGatewayDomain = null;
+                if (gatewayDomain != null && !gatewayDomain.isEmpty()) {
+                    filteredGatewayDomain = filter.filter(gatewayDomain);
+                    addRecordTokens(tokens, ""KEEPER_GATEWAY_DOMAIN_"",
+                            ksm.getRecordByDomain(filteredGatewayDomain));
+                }
+
+                // If domain matching is disabled for user records,
+                // explicitly set the domains to null when storing
+                // user records to enable username-only matching
+                if (!confService.getMatchUserRecordsByDomain()) {
+                    filteredDomain = null;
+                    filteredGatewayDomain = null;
+                }
+
+                // Retrieve and define user-specific tokens, if any
+                String username = parameters.get(""username"");
+                if (username != null && !username.isEmpty())
+                    addRecordTokens(tokens, ""KEEPER_USER_"",
+                            ksm.getRecordByLogin(filter.filter(username),
+                            filteredDomain));
+
+                // Retrieve and define gateway user-specific tokens, if any
+                String gatewayUsername = parameters.get(""gateway-username"");
+                if (gatewayUsername != null && !gatewayUsername.isEmpty())
+                    addRecordTokens(tokens, ""KEEPER_GATEWAY_USER_"",
+                            ksm.getRecordByLogin(
+                                filter.filter(gatewayUsername),
+                                filteredGatewayDomain));
             }
 
-            // Retrieve and define gateway domain tokens, if any
-            String gatewayDomain = parameters.get(""gateway-domain"");
-            String filteredGatewayDomain = null;
-            if (gatewayDomain != null && !gatewayDomain.isEmpty()) {
-                filteredGatewayDomain = filter.filter(gatewayDomain);
-                addRecordTokens(tokens, ""KEEPER_GATEWAY_DOMAIN_"",
-                        ksm.getRecordByDomain(filteredGatewayDomain));
-            }
+            else {
 
-            // If domain matching is disabled for user records,
-            // explicitly set the domains to null when storing
-            // user records to enable username-only matching
-            if (!confService.getMatchUserRecordsByDomain()) {
-                filteredDomain = null;
-                filteredGatewayDomain = null;
+                // Retrieve and define user-specific tokens, if any
+                // NOTE that non-RDP connections do not have a domain
+                // field in the connection parameters, so the domain
+                // will always be null
+                String username = parameters.get(""username"");
+                if (username != null && !username.isEmpty())
+                    addRecordTokens(tokens, ""KEEPER_USER_"",
+                            ksm.getRecordByLogin(filter.filter(username), null));","[{'comment': 'Given the increasing complexity of this function `getTokens()`, I think the portion currently within a loop (the portion that adds all relevant tokens from a particular `KsmClient`) would make more sense as its own function.', 'commenter': 'mike-jumper'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmConnection.java,"@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.user;
+
+import java.util.List;
+import java.util.Map;
+
+import org.apache.guacamole.net.auth.DelegatingConnection;
+import org.apache.guacamole.net.auth.Connection;
+
+import com.google.common.collect.Maps;
+
+/**
+ * A Connection that explicitly adds a blank entry for any defined
+ * KSM connection attributes.","[{'comment': ""This is empirically correct, but will not make much sense to someone who doesn't already know that this is required for attribute fields to appear within the connection editor. I suggest noting that high-level purpose of this class, not just the low-level implementation of that purpose."", 'commenter': 'mike-jumper'}]"
751,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/user/KsmDirectoryService.java,"@@ -222,6 +231,36 @@ public void processAttributes(Attributes entity) throws GuacamoleException {
 
     }
 
+    @Override
+    public Directory<Connection> getConnectionDirectory(
+            Directory<Connection> underlyingDirectory) throws GuacamoleException {
+
+        // A Connection directory that will intercept add and update calls to
+        // validate KSM configurations, and translate one-time-tokens, if possible","[{'comment': 'Does it? I see interception of `add()` and `update()` overrides happening below with `getUserDirectory()`, but not here.', 'commenter': 'mike-jumper'}, {'comment': 'Nope, this documentation is completely wrong. I will update it.', 'commenter': 'jmuehlner'}]"
751,guacamole/src/main/frontend/src/app/settings/directives/guacSettingsPreferences.js,"@@ -197,7 +240,84 @@ angular.module('settings').directive('guacSettingsPreferences', [function guacSe
 
             };
 
+
+            /**
+             * Saves the current user, displaying an acknowledgement message if
+             * saving was successful, or an error if the save failed.
+             */
+            $scope.saveUser = function saveUser() {
+                return userService.saveUser(dataSource, $scope.user)
+                    .then(() =>  guacNotification.showStatus({
+                        text    : {
+                            key : 'SETTINGS_PREFERENCES.INFO_PREFERENCE_ATTRIBUTES_CHANGED'
+                        },
+
+                        // Reload the user on successful save in case any attributes changed
+                        actions : [ ACKNOWLEDGE_ACTION_RELOAD ]
+                    }),
+                    guacNotification.SHOW_REQUEST_ERROR);
+            };
+
+            // Fetch the user record
+            userService.getUser(dataSource, username).then(function saveUserData(user) {
+                $scope.user = user;
+            })
+
+            // Get all datasources that are available for this user
+            authenticationService.getAvailableDataSources().forEach(function loadAttributesForDataSource(dataSource) {
+
+                // Fetch all user attribute forms defined for the datasource
+                schemaService.getUserPreferenceAttributes(dataSource).then(function saveAttributes(attributes) {
+
+                    // Iterate through all attribute forms
+                    attributes.forEach(function addAttribute(attributeForm) {
+
+                        // If the form with the retrieved name already exists
+                        if ($scope.attributeMap.has(attributeForm.name)) {
+                            const existingFields = $scope.attributeMap.get(attributeForm.name).fields;
+
+                            // Add each field to the existing list for this form
+                            attributeForm.fields.forEach(function addAllFieldsToExistingMap(field) {
+                                existingFields.set(field.name, field);
+                            })
+                        }
+
+                        else {
+
+                            // Create a new entry for the form
+                            $scope.attributeMap.set(attributeForm.name, {
+                                name: attributeForm.name,
+
+                                // With the field array from the API converted into a Map
+                                fields: attributeForm.fields.reduce(
+                                    function addFieldToMap(currentFieldMap, field) {
+                                        currentFieldMap.set(field.name, field);
+                                        return currentFieldMap;
+                                    }, new Map()
+                                )
+
+                            })
+                        }
+
+                    });
+
+                    // Re-generate the attributes array every time
+                    $scope.attributes = Array.of(...$scope.attributeMap.values()).map(function convertFieldsToArray(formObject) {","[{'comment': 'We should verify that this gets polyfilled, as well.', 'commenter': 'mike-jumper'}]"
751,guacamole/src/main/frontend/src/app/settings/directives/guacSettingsPreferences.js,"@@ -197,7 +240,84 @@ angular.module('settings').directive('guacSettingsPreferences', [function guacSe
 
             };
 
+
+            /**
+             * Saves the current user, displaying an acknowledgement message if
+             * saving was successful, or an error if the save failed.
+             */
+            $scope.saveUser = function saveUser() {
+                return userService.saveUser(dataSource, $scope.user)
+                    .then(() =>  guacNotification.showStatus({
+                        text    : {
+                            key : 'SETTINGS_PREFERENCES.INFO_PREFERENCE_ATTRIBUTES_CHANGED'
+                        },
+
+                        // Reload the user on successful save in case any attributes changed
+                        actions : [ ACKNOWLEDGE_ACTION_RELOAD ]
+                    }),
+                    guacNotification.SHOW_REQUEST_ERROR);
+            };
+
+            // Fetch the user record
+            userService.getUser(dataSource, username).then(function saveUserData(user) {
+                $scope.user = user;
+            })
+
+            // Get all datasources that are available for this user
+            authenticationService.getAvailableDataSources().forEach(function loadAttributesForDataSource(dataSource) {
+
+                // Fetch all user attribute forms defined for the datasource
+                schemaService.getUserPreferenceAttributes(dataSource).then(function saveAttributes(attributes) {","[{'comment': ""This crosses wires a bit. We're editing and saving the user object for only a single data source, but are aggregating the attributes from _all_ data sources, which is technically incorrect since those data sources aren't declaring those attributes.\r\n\r\nIf we are only editing a single user object from a single data source, then we shouldn't be pulling attributes from all data sources; we should pull attributes from that single data source. If we are editing the user object across multiple data sources, then we would need to maintain each of those objects separately, at least internally here, so that they can be independently saved."", 'commenter': 'mike-jumper'}]"
751,guacamole/src/main/frontend/src/translations/en.json,"@@ -942,6 +943,7 @@
         ""HELP_UPDATE_PASSWORD""      : ""If you wish to change your password, enter your current password and the desired new password below, and click \""Update Password\"". The change will take effect immediately."",
 
         ""INFO_PASSWORD_CHANGED"" : ""Password changed."",
+        ""INFO_PREFERENCE_ATTRIBUTES_CHANGED"" : ""User attributes saved."",","[{'comment': 'For something like a user preference screen, the confirmatory message should be more user-facing. As-written, this will only make sense to a Guacamole developer who is aware of attributes, not to a Guacamole user who is just trying to save their preferences.', 'commenter': 'mike-jumper'}]"
751,guacamole/src/main/java/org/apache/guacamole/rest/schema/SchemaResource.java,"@@ -77,6 +77,26 @@ public Collection<Form> getUserAttributes() throws GuacamoleException {
 
     }
 
+    /**
+     * Retrieves the possible user preference attributes of a user object.
+     *
+     * @return
+     *     A collection of forms which describe the possible preference attributes of a
+     *     user object.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while retrieving the possible attributes.
+     */
+    @GET
+    @Path(""userPreferenceAttributes"")
+    public Collection<Form> getUserAttrigetUserPreferenceAttributesbutes()","[{'comment': 'Two function names got smooshed together here.', 'commenter': 'mike-jumper'}]"
751,guacamole/src/main/java/org/apache/guacamole/rest/user/UserResource.java,"@@ -145,9 +150,51 @@ public UserHistoryResource getUserHistory()
     @Override
     public void updateObject(APIUser modifiedObject) throws GuacamoleException {
 
-        // A user may not use this endpoint to modify himself
-        if (userContext.self().getIdentifier().equals(modifiedObject.getUsername()))
-            throw new GuacamoleSecurityException(""Permission denied."");
+        User currentUser = userContext.self();
+
+        // A user may not use this endpoint to modify themself, except in the case
+        // that they are modifying one of the user attributes explicitly exposed
+        // in the user preferences form
+        if (currentUser.getIdentifier().equals(modifiedObject.getUsername())) {
+
+            // A user may not use this endpoint to update their password
+            if (currentUser.getPassword() != null)
+                throw new GuacamoleSecurityException(
+                        ""Permission denied. The password update endpoint must""
+                        + "" be used to change the current user's password."");
+
+            // All attributes exposed in the preferences forms
+            Set<String> preferenceAttributes = (
+                    userContext.getUserPreferenceAttributes().stream()
+                    .flatMap(form -> form.getFields().stream().map(
+                            field -> field.getName())))
+                    .collect(Collectors.toSet());
+
+            // Go through every attribute value and check if it's changed
+            Iterator<String> keyIterator = modifiedObject.getAttributes().keySet().iterator();
+            while(keyIterator.hasNext()) {
+
+                String key = keyIterator.next();
+                String newValue = modifiedObject.getAttributes().get(key);
+
+                // If it's not a preference attribute, editing is not allowed
+                if (!preferenceAttributes.contains(key)) {
+
+                    String currentValue = currentUser.getAttributes().get(key);
+
+                    // If the value of the attribute has been modified
+                    if (
+                            !(currentValue == null && newValue == null) && (
+                                (currentValue == null && newValue != null) ||
+                                !currentValue.equals(newValue)
+                            )
+                    )
+                        throw new GuacamoleSecurityException(
+                            ""Permission denied. Only user preference attributes""
+                            + "" can be modified for the current user."");
+                }
+            }
+        }","[{'comment': ""This is already provided in principle via `filterAttributes()` on `DirectoryObjectTranslator`:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/754e9649f1fa0ba225ee42b56ded64bc283d17df/guacamole/src/main/java/org/apache/guacamole/rest/directory/DirectoryObjectTranslator.java#L119-L135\r\n\r\nwhich is already invoked for every received user object for update:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/754e9649f1fa0ba225ee42b56ded64bc283d17df/guacamole/src/main/java/org/apache/guacamole/rest/user/UserObjectTranslator.java#L58-L66\r\n\r\nTo that end:\r\n\r\n* I think we should leverage the existing `filterAttributes()`.\r\n* Won't the existing `filterAttributes()` call filter out anything that isn't declared as a user attribute here?\r\n\r\nI wonder if perhaps the existing call to `filterAttributes()` should (1) consider whether the user is attempting to modify themselves and (2) filter based on user preference attributes instead of user attributes in that case."", 'commenter': 'mike-jumper'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -250,13 +291,38 @@ private void validateCache() throws GuacamoleException {
                 String hostname = recordService.getHostname(record);
                 addRecordForHost(record, hostname);
 
+                // ... and domain
+                String domain = recordService.getDomain(record);
+                addRecordForDomain(record, domain);
+
+                // Fetch the username
+                String username = recordService.getUsername(record);
+
+                // If domains should be split out from usernames
+                if (username != null && confService.getSplitWindowsUsernames()) {
+
+                    // Attempt to split the domain of the username
+                    WindowsUsername usernameAndDomain = (
+                            WindowsUsername.splitWindowsUsernameFromDomain(username));
+
+                    if (usernameAndDomain.hasDomain()) {
+
+                        // Update the username if a domain has been stripped off
+                        username = usernameAndDomain.getUsername();","[{'comment': ""This probably should have been done before, even if we weren't using the domain here."", 'commenter': 'jmuehlner'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -179,6 +188,30 @@ public class KsmClient {
      */
     private final Set<String> cachedAmbiguousUsernames = new HashSet<>();
 
+    /**
+     * All records retrieved from Keeper Secrets Manager, where each key is the
+     * domain of the corresponding record. The domain of a record is
+     * determined by {@link Login} fields, thus a record may be associated with
+     * multiple users. If a record is associated with multiple users, there","[{'comment': 'domains* x2', 'commenter': 'mike-jumper'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -179,6 +188,30 @@ public class KsmClient {
      */
     private final Set<String> cachedAmbiguousUsernames = new HashSet<>();
 
+    /**
+     * All records retrieved from Keeper Secrets Manager, where each key is the
+     * domain of the corresponding record. The domain of a record is
+     * determined by {@link Login} fields, thus a record may be associated with
+     * multiple users. If a record is associated with multiple users, there
+     * will be multiple references to that record within this Map. The contents
+     * of this Map are automatically updated if {@link #validateCache()}
+     * refreshes the cache. This Map must not be accessed without
+     * {@link #cacheLock} acquired appropriately. Before using a value from
+     * this Map, {@link #cachedAmbiguousDomains} must first be checked to
+     * verify that there is indeed only one record associated with that user.","[{'comment': 'domain*', 'commenter': 'mike-jumper'}, {'comment': 'gah the copypasta', 'commenter': 'jmuehlner'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -179,6 +188,30 @@ public class KsmClient {
      */
     private final Set<String> cachedAmbiguousUsernames = new HashSet<>();
 
+    /**
+     * All records retrieved from Keeper Secrets Manager, where each key is the
+     * domain of the corresponding record. The domain of a record is
+     * determined by {@link Login} fields, thus a record may be associated with
+     * multiple users. If a record is associated with multiple users, there
+     * will be multiple references to that record within this Map. The contents
+     * of this Map are automatically updated if {@link #validateCache()}
+     * refreshes the cache. This Map must not be accessed without
+     * {@link #cacheLock} acquired appropriately. Before using a value from
+     * this Map, {@link #cachedAmbiguousDomains} must first be checked to
+     * verify that there is indeed only one record associated with that user.
+     */
+    private final Map<String, KeeperRecord> cachedRecordsByDomain = new HashMap<>();
+
+    /**
+     * The set of all domains that are associated with multiple records, and
+     * thus cannot uniquely identify a record. The contents of this Set are
+     * automatically updated if {@link #validateCache()} refreshes the cache.
+     * This Set must not be accessed without {@link #cacheLock} acquired
+     * appropriately.This Set must be checked before using a value retrieved","[{'comment': 'Please add a space between the period and the beginning of the new sentence that follows.', 'commenter': 'mike-jumper'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -250,13 +291,38 @@ private void validateCache() throws GuacamoleException {
                 String hostname = recordService.getHostname(record);
                 addRecordForHost(record, hostname);
 
+                // ... and domain
+                String domain = recordService.getDomain(record);
+                addRecordForDomain(record, domain);
+
+                // Fetch the username
+                String username = recordService.getUsername(record);
+
+                // If domains should be split out from usernames
+                if (username != null && confService.getSplitWindowsUsernames()) {
+
+                    // Attempt to split the domain of the username
+                    WindowsUsername usernameAndDomain = (
+                            WindowsUsername.splitWindowsUsernameFromDomain(username));","[{'comment': 'A couple points:\r\n\r\n* Should this be abstracted away such that the caller need not concern themselves with whether they need to manually split domain from username?\r\n* As currently written, `username` will be one of the following:\r\n  * The raw username containing the domain, which will not match the split username and domain that would be part of the connection parameters.\r\n  * The split username (with the domain stored in a custom field of the record), which will ambiguously match any user with that username regardless of domain.\r\n\r\nI think we need to somehow take this into account and ensure that indexed usernames include the domain, and it would be good if the caller need not manually know whether they need to handle the splitting.', 'commenter': 'mike-jumper'}, {'comment': 'What caller are you referring to, specifically?', 'commenter': 'jmuehlner'}, {'comment': 'This extension.', 'commenter': 'mike-jumper'}, {'comment': 'Ah, yes good call. The functionality was a bit goofed, but it should be better now. The `KEEPER_USER_` tokens will now ALSO match on domain (if configured to do so. false by default). \r\n\r\nThe behavior seems a lot more sane now - let me know what you think.', 'commenter': 'jmuehlner'}, {'comment': 'This definitely looks much better.', 'commenter': 'mike-jumper'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/UserDomain.java,"@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.secret;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+/**
+ * A class intended for use as a key in KSM user record client cache. This
+ * class contains both a username and a password. When identifying a KSM
+ * record using token syntax like ""KEEPER_USER_*"", the user record will
+ * actually be identified by both the user and domain, if the appropriate
+ * settings are enabled.
+ */
+class UserDomain {
+
+    /**
+     * The username associated with the user record.
+     * This field should never be null.
+     */
+    private final String username;
+
+    /**
+     * The domain associated with the user record.
+     * This field can be null.
+     */
+    private final String domain;
+
+    /**
+     * Create a new UserDomain instance with the provided username and
+     * domain. The domain may be null, but the username should never be.
+     *
+     * @param username
+     *    The username to create the UserDomain instance with. This should
+     *    never be null.
+     *
+     * @param domain
+     *    The domain to create the UserDomain instance with. This can be null.
+     */
+    UserDomain(@Nonnull String username, @Nullable String domain) {
+        this.username = username;
+        this.domain = domain;
+    }
+
+    @Override
+    public int hashCode() {
+
+        final int prime = 31;
+
+        int result = 1;
+        result = prime * result + ((domain == null) ? 0 : domain.hashCode());
+        result = prime * result + ((username == null) ? 0 : username.hashCode());
+
+        return result;
+
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+
+        // Check if the other object is this exact object
+        if (this == obj)
+            return true;
+
+        // Check if the other object is null
+        if (obj == null)
+            return false;
+
+        // Check if the other object is also a UserDomain
+        if (getClass() != obj.getClass())
+            return false;
+
+        // If it is a UserDomain, it must have the same username...
+        UserDomain other = (UserDomain) obj;
+        if (username == null) {
+            if (other.username != null)
+                return false;
+        } else if (!username.equals(other.username))
+            return false;
+
+        // .. and the same domain
+        if (domain == null) {
+            if (other.domain != null)
+                return false;
+        } else if (!domain.equals(other.domain))
+            return false;
+
+        return true;","[{'comment': 'I _think_ Java no longer requires quite this level of comparison boilerplate:\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#equals-java.lang.Object-java.lang.Object-\r\n\r\nOnce we know both sides are a `UserDomain`, I think this can be simplified to something like:\r\n\r\n```java\r\nreturn Objects.equals(username, other.username) && Objects.equals(domain, other.domain);\r\n```', 'commenter': 'mike-jumper'}, {'comment': 'Hallelujah! I shall switch it.', 'commenter': 'jmuehlner'}, {'comment': ""While I'm at it, I also switched to the simplified `Objects.hashCode` method."", 'commenter': 'jmuehlner'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/UserDomain.java,"@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.secret;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+/**
+ * A class intended for use as a key in KSM user record client cache. This
+ * class contains both a username and a password. When identifying a KSM
+ * record using token syntax like ""KEEPER_USER_*"", the user record will
+ * actually be identified by both the user and domain, if the appropriate
+ * settings are enabled.
+ */
+class UserDomain {","[{'comment': 'Reading this class name, I initially thought this represented the domain of a user. Initially, I thought ""perhaps this should be `DomainUser`, in line with AD terminology), but these are not necessarily always AD users...\r\n\r\nPerhaps `UserLogin` would make more sense?', 'commenter': 'mike-jumper'}, {'comment': 'Yeah, that would probably make more sense.', 'commenter': 'jmuehlner'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -338,12 +332,57 @@ public Map<String, Future<String>> getTokens(UserContext userContext, Connectabl
                 addRecordTokens(tokens, ""KEEPER_GATEWAY_"",
                         ksm.getRecordByHost(filter.filter(gatewayHostname)));
 
+            // Retrieve and define domain tokens, if any
+            String domain = parameters.get(""domain"");
+            String filteredDomain = null;
+            if (domain != null && !domain.isEmpty()) {
+                filteredDomain = filter.filter(domain);
+                addRecordTokens(tokens, ""KEEPER_DOMAIN_"",
+                        ksm.getRecordByDomain(filteredDomain));
+            }
+
+            // Retrieve and define gateway domain tokens, if any
+            String gatewayDomain = parameters.get(""gateway-domain"");
+            String filteredGatewayDomain = null;
+            if (gatewayDomain != null && !gatewayDomain.isEmpty()) {
+                filteredGatewayDomain = filter.filter(gatewayDomain);
+                addRecordTokens(tokens, ""KEEPER_GATEWAY_DOMAIN_"",
+                        ksm.getRecordByDomain(filteredGatewayDomain));
+            }
+
+            // If domain matching is disabled for user records,
+            // explicitly set the domains to null when storing
+            // user records to enable username-only matching
+            if (!confService.getMatchUserRecordsByDomain()) {
+                filteredDomain = null;
+                filteredGatewayDomain = null;
+            }
+
+            // Retrieve and define user-specific tokens, if any
+            String username = parameters.get(""username"");
+            if (username != null && !username.isEmpty())
+                addRecordTokens(tokens, ""KEEPER_USER_"",
+                        ksm.getRecordByLogin(filter.filter(username),
+                        filteredDomain));
+
             // Retrieve and define gateway user-specific tokens, if any
             String gatewayUsername = parameters.get(""gateway-username"");
             if (gatewayUsername != null && !gatewayUsername.isEmpty())
                 addRecordTokens(tokens, ""KEEPER_GATEWAY_USER_"",
-                        ksm.getRecordByLogin(filter.filter(gatewayUsername)));
-
+                        ksm.getRecordByLogin(
+                            filter.filter(gatewayUsername),
+                            filteredGatewayDomain));
+
+        } else {","[{'comment': ""Please don't cuddle the else: https://guacamole.apache.org/guac-style/#braces"", 'commenter': 'mike-jumper'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -399,32 +497,75 @@ public KeeperRecord getRecordByHost(String hostname) throws GuacamoleException {
     }
 
     /**
-     * Returns the record associated with the given username. If no such record
-     * exists, or there are multiple such records, null is returned.
+     * Returns the record associated with the given username and domain. If no
+     * such record exists, or there are multiple such records, null is returned.
      *
      * @param username
      *     The username of the record to return.
      *
+     * @param domain
+     *     The domain of the record to return.","[{'comment': 'The meaning of null for this parameter should be documented.', 'commenter': 'mike-jumper'}, {'comment': ""Hmm, what specifically would you request that I add? All it means if this parameter is null is that it will fetch records for which the domain is null. It's just regular equality, nothing special."", 'commenter': 'jmuehlner'}, {'comment': ""I think just adding `..., which may be null.` or `..., or null if there is no domain.` would be sufficient. Otherwise, it sounds like a domain is always required, and it's unclear that `null` is an expected value if there is no domain."", 'commenter': 'mike-jumper'}, {'comment': 'Fair - added.', 'commenter': 'jmuehlner'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -236,12 +270,20 @@ private void validateCache() throws GuacamoleException {
             cachedRecordsByHost.clear();
 
             // Clear cache of login-based records
-            cachedAmbiguousUsernames.clear();
-            cachedRecordsByUsername.clear();
+            cachedAmbiguousUsers.clear();
+            cachedRecordsByUser.clear();
 
-            // Store all records, sorting each into host-based and login-based
-            // buckets
-            records.forEach(record -> {
+            // Clear cache of domain-based records
+            cachedAmbiguousDomains.clear();
+            cachedRecordsByDomain.clear();
+
+            // Store all records, sorting each into host-based, login-based,
+            // and domain-based buckets
+            Iterator<KeeperRecord> recordIterator = records.iterator();
+            while(recordIterator.hasNext()) {
+
+                // Go through records one at a time
+                KeeperRecord record = recordIterator.next();","[{'comment': 'Why did this switch from `forEach()` to an interator? Is there an advantage to the latter?', 'commenter': 'mike-jumper'}, {'comment': ""Because it can now throw a `GuacamoleException`, and you can't have a java lambda that throws a checked exception. My level of frustration with the whole java lambda ecosystem is quite high right now."", 'commenter': 'jmuehlner'}, {'comment': 'Ah, OK.', 'commenter': 'mike-jumper'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/UserLogin.java,"@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.vault.ksm.secret;
+
+import java.util.Objects;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+/**
+ * A class intended for use as a key in KSM user record client cache. This
+ * class contains both a username and a password. When identifying a KSM
+ * record using token syntax like ""KEEPER_USER_*"", the user record will
+ * actually be identified by both the user and domain, if the appropriate
+ * settings are enabled.
+ */
+class UserLogin {
+
+    /**
+     * The username associated with the user record.
+     * This field should never be null.
+     */
+    private final String username;
+
+    /**
+     * The domain associated with the user record.
+     * This field can be null.
+     */
+    private final String domain;
+
+    /**
+     * Create a new UserLogin instance with the provided username and
+     * domain. The domain may be null, but the username should never be.
+     *
+     * @param username
+     *    The username to create the UserLogin instance with. This should
+     *    never be null.
+     *
+     * @param domain
+     *    The domain to create the UserLogin instance with. This can be null.
+     */
+    UserLogin(@Nonnull String username, @Nullable String domain) {
+        this.username = username;
+        this.domain = domain;
+    }
+
+    @Override
+    public int hashCode() {
+
+        final int prime = 31;
+
+        int result = 1;
+        result = prime * result + Objects.hashCode(domain);
+        result = prime * result + Objects.hashCode(username);
+
+        return result;
+
+    }","[{'comment': ""> While I'm at it, I also switched to the simplified `Objects.hashCode` method.\r\n\r\nI think you can shorten things even further with [`Objects.hash()`](https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#hash-java.lang.Object...-):\r\n\r\n```java\r\nreturn Objects.hash(domain, username);\r\n```"", 'commenter': 'mike-jumper'}, {'comment': 'Sure', 'commenter': 'jmuehlner'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -250,13 +292,38 @@ private void validateCache() throws GuacamoleException {
                 String hostname = recordService.getHostname(record);
                 addRecordForHost(record, hostname);
 
-                // Store based on username ONLY if no hostname (will otherwise
-                // result in ambiguous entries for servers tied to identical
-                // accounts)
-                if (hostname == null)
-                    addRecordForLogin(record, recordService.getUsername(record));
+                // ... and domain
+                String domain = recordService.getDomain(record);
+                addRecordForDomain(record, domain);
+
+                // Get the username off of the record
+                String username = recordService.getUsername(record);
+
+                // If we have a username, and there isn't already a domain explicitly defined
+                if (username != null && domain == null
+                        && confService.getSplitWindowsUsernames()) {
 
-            });
+                    // Attempt to split out the domain of the username
+                    WindowsUsername usernameAndDomain = (
+                            WindowsUsername.splitWindowsUsernameFromDomain(username));
+
+                    // Use the username-split domain if not already set explicitly
+                    if (usernameAndDomain.hasDomain())
+                        domain = usernameAndDomain.getDomain();
+                        addRecordForDomain(record, domain);
+
+                }
+
+                // If domain matching is not enabled for user records,
+                // explicitly set all domains to null to allow matching
+                // on username only
+                if (!confService.getMatchUserRecordsByDomain())
+                    domain = null;
+
+                // Store the login by username and domain
+                addRecordForLogin(record, username, domain);","[{'comment': 'Given a record with a login like `DOMAIN\\Username`, no field named ""domain"", and with domain splitting and domain matching enabled, this looks like it will:\r\n\r\n1. Index that record as the username `DOMAIN\\Username`.\r\n2. Index that record again with the domain+username pair.\r\n\r\nIs that intended?\r\n\r\nMy thinking was that the intended behavior was:\r\n\r\n* Domain (if present) and username are pulled from the record. If splitting is enabled, that domain _might_ come from splitting the username, in which case the username will be missing the domain.\r\n* Records are indexed by domain (however that gets retrieved) and by either domain+username (if domain matching is enabled) or just username (if domain matching is not enabled).\r\n\r\nIf the above is true, then I\'d think it would be better to abstract this away beneath the record service, such that `getUsername()` and `getDomain()` retrieve what we are considering to be the record\'s username and domain, transparently taking splitting into account.', 'commenter': 'mike-jumper'}, {'comment': ""Where did you see it indexing by both the raw username, and domain+username? I only see a single call to `addRecordForLogin`, which should do either one of those depending on `getSplitWindowsUsernames()`.\r\n\r\nThere was a bug here where I didn't correctly remove the username from the domain if splitting is enabled, but that should be fixed now.\r\n\r\nEverything should be working the way you suggest above."", 'commenter': 'jmuehlner'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmSecretService.java,"@@ -338,12 +332,59 @@ public Map<String, Future<String>> getTokens(UserContext userContext, Connectabl
                 addRecordTokens(tokens, ""KEEPER_GATEWAY_"",
                         ksm.getRecordByHost(filter.filter(gatewayHostname)));
 
+            // Retrieve and define domain tokens, if any
+            String domain = parameters.get(""domain"");
+            String filteredDomain = null;
+            if (domain != null && !domain.isEmpty()) {
+                filteredDomain = filter.filter(domain);
+                addRecordTokens(tokens, ""{KEEPER_DOMAIN_"",","[{'comment': 'This should be `KEEPER_DOMAIN_`, not `{KEEPER_DOMAIN_`.', 'commenter': 'mike-jumper'}, {'comment': 'Oops!', 'commenter': 'jmuehlner'}]"
753,extensions/guacamole-vault/modules/guacamole-vault-ksm/src/main/java/org/apache/guacamole/vault/ksm/secret/KsmClient.java,"@@ -250,13 +292,40 @@ private void validateCache() throws GuacamoleException {
                 String hostname = recordService.getHostname(record);
                 addRecordForHost(record, hostname);
 
-                // Store based on username ONLY if no hostname (will otherwise
-                // result in ambiguous entries for servers tied to identical
-                // accounts)
-                if (hostname == null)
-                    addRecordForLogin(record, recordService.getUsername(record));","[{'comment': ""Oops, I realize that I completely removed this logic for no good reason. I'll restore it."", 'commenter': 'jmuehlner'}]"
766,Dockerfile,"@@ -58,6 +58,9 @@ RUN apt-get update -qq \
     && apt-get install -y xmlstarlet \
     && rm -rf /var/lib/apt/lists/*
 
+# # Install unzip for LOGBACK_LEVEL case","[{'comment': 'An extra `#` snuck in here.', 'commenter': 'mike-jumper'}]"
766,Dockerfile,"@@ -58,6 +58,9 @@ RUN apt-get update -qq \
     && apt-get install -y xmlstarlet \
     && rm -rf /var/lib/apt/lists/*
 
+# # Install unzip for LOGBACK_LEVEL case
+RUN apt-get update && apt-get install unzip","[{'comment': 'It would be better to combine this with the existing `apt-get` line above, which also already invokes `apt-get update`.', 'commenter': 'mike-jumper'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -147,6 +150,20 @@
 
     },
 
+    ""COLOR_SCHEME"" : {
+
+        ""ACTION_HIDE_DETAILS"" : ""Anzeigen"",
+        ""ACTION_SHOW_DETAILS"" : ""Ausblenden"",","[{'comment': 'Something got wrong in line 155 and 156? Show details mean ""Anzeigen"" and Hide ""Ausblenden"" or not?', 'commenter': 'IT-Experte'}, {'comment': ""Yeah you're right. I swap both"", 'commenter': 'sirux88'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -470,7 +565,7 @@
         ""SECTION_HEADER_DEVICE_REDIRECTION"" : ""Geräteumleitung"",
         ""SECTION_HEADER_DISPLAY""            : ""Bildschirm"",
         ""SECTION_HEADER_GATEWAY""            : ""Remote Desktop Gateway"",
-        ""SECTION_HEADER_LOAD_BALANCING""     : ""Load Balancing"",
+        ""SECTION_HEADER_LOAD_BALANCING""     : ""Lastausgleich"",","[{'comment': 'Maybe it\'s a better translation; ""Lastverteilung""', 'commenter': 'IT-Experte'}, {'comment': 'Yeah, seems better to me aswell', 'commenter': 'sirux88'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -487,27 +582,39 @@
         ""FIELD_HEADER_COMMAND""      : ""Befehl ausführen:"",
         ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Bildschirmaufzeichnungspfad automatisch erzeugen:"",
         ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""Textaufzeichnungspfad automatisch erzeugen:"",
+        ""FIELD_HEADER_DISABLE_COPY""  : ""Kopieren vom Terminal deaktivieren:"",","[{'comment': 'Shorter is better; ""Kopieren deaktivieren""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -487,27 +582,39 @@
         ""FIELD_HEADER_COMMAND""      : ""Befehl ausführen:"",
         ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Bildschirmaufzeichnungspfad automatisch erzeugen:"",
         ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""Textaufzeichnungspfad automatisch erzeugen:"",
+        ""FIELD_HEADER_DISABLE_COPY""  : ""Kopieren vom Terminal deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_PASTE"" : ""Einfügen vom Client deaktivieren:"",","[{'comment': 'Shorter is better; ""Einfügen deaktivieren:""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -563,6 +670,8 @@
         ""FIELD_HEADER_COLOR_SCHEME""   : ""Farbschema:"",
         ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Bildschirmaufzeichnungspfad automatisch erzeugen:"",
         ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""Textaufzeichnungspfad automatisch erzeugen:"",
+        ""FIELD_HEADER_DISABLE_COPY""   : ""Kopieren vom Terminal deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_PASTE""  : ""Einfügen vom Client deaktivieren:"",","[{'comment': 'Shorter is better; ""Einfügen deaktivieren:""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -563,6 +670,8 @@
         ""FIELD_HEADER_COLOR_SCHEME""   : ""Farbschema:"",
         ""FIELD_HEADER_CREATE_RECORDING_PATH"" : ""Bildschirmaufzeichnungspfad automatisch erzeugen:"",
         ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""Textaufzeichnungspfad automatisch erzeugen:"",
+        ""FIELD_HEADER_DISABLE_COPY""   : ""Kopieren vom Terminal deaktivieren:"",","[{'comment': 'Shorter is better; ""Kopieren deaktivieren""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -638,8 +753,11 @@
         ""FIELD_HEADER_CURSOR""           : ""Cursor:"",
         ""FIELD_HEADER_DEST_HOST""        : ""Ziel Host:"",
         ""FIELD_HEADER_DEST_PORT""        : ""Ziel Port:"",
+        ""FIELD_HEADER_DISABLE_COPY""   : ""Kopieren vom Terminal deaktivieren:"",","[{'comment': 'Shorter is better; ""Kopieren deaktivieren""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -638,8 +753,11 @@
         ""FIELD_HEADER_CURSOR""           : ""Cursor:"",
         ""FIELD_HEADER_DEST_HOST""        : ""Ziel Host:"",
         ""FIELD_HEADER_DEST_PORT""        : ""Ziel Port:"",
+        ""FIELD_HEADER_DISABLE_COPY""   : ""Kopieren vom Terminal deaktivieren:"",
+        ""FIELD_HEADER_DISABLE_PASTE""  : ""Einfügen vom Client deaktivieren:"",","[{'comment': 'Shorter is better; ""Einfügen deaktivieren:""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -651,16 +769,23 @@
         ""FIELD_HEADER_RECORDING_NAME"" : ""Aufzeichnungsname:"",
         ""FIELD_HEADER_RECORDING_PATH"" : ""Aufzeichnungspfad:"",
         ""FIELD_HEADER_SFTP_DIRECTORY""             : ""Standard Uploadverzeichnis:"",
+        ""FIELD_HEADER_SFTP_DISABLE_DOWNLOAD""      : ""Dateidownload deaktivieren:"",
         ""FIELD_HEADER_SFTP_HOST_KEY""              : ""Öffentlicher Schlüssel des Host (Base64):"",
         ""FIELD_HEADER_SFTP_HOSTNAME""              : ""Hostname:"",
-        ""FIELD_HEADER_SFTP_ROOT_DIRECTORY"": ""SFTP-Wurzelverzeichnis:"",
         ""FIELD_HEADER_SFTP_SERVER_ALIVE_INTERVAL"" : ""SFTP keepalive Intervall:"",
-        ""FIELD_HEADER_SFTP_PASSPHRASE""  : ""Passphrase:"",
-        ""FIELD_HEADER_SFTP_PASSWORD""    : ""Passwort:"",
-        ""FIELD_HEADER_SFTP_PORT""        : ""Port:"",
-        ""FIELD_HEADER_SFTP_PRIVATE_KEY"" : ""Privater Schlüssel:"",
-        ""FIELD_HEADER_SFTP_USERNAME""    : ""Benutzername:"",
+        ""FIELD_HEADER_SFTP_PASSPHRASE""            : ""Passphrase:"",
+        ""FIELD_HEADER_SFTP_PASSWORD""              : ""Passwort:"",
+        ""FIELD_HEADER_SFTP_PORT""                  : ""Port:"",
+        ""FIELD_HEADER_SFTP_PRIVATE_KEY""           : ""Privater Schlüssel:"",
+        ""FIELD_HEADER_SFTP_ROOT_DIRECTORY""        : ""SFTP-Wurzelverzeichnis:"",
+        ""FIELD_HEADER_SFTP_DISABLE_UPLOAD""        : ""Disable file upload:"",","[{'comment': 'Translation ""Hochladen Deaktivieren""', 'commenter': 'IT-Experte'}, {'comment': 'added the proposal', 'commenter': 'sirux88'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -117,6 +120,10 @@
         ""INFO_CONNECTION_SHARED"" : ""Diese Verbindung wird nun geteilt."",
         ""INFO_NO_FILE_TRANSFERS"" : ""Keine Dateiübertragungen."",
 
+        ""MESSAGE_DEFAULT""      : """",
+        ""MESSAGE_USER_JOINED""  : ""Benutzer {ARGS_1} ist der Verbindung beigetreten."",
+        ""MESSAGE_USER_LEFT""    : ""Benutzer {ARGS_1} hat die Verbindung verlassen"",","[{'comment': '@IT-Experte:\r\nI translated these additional strings since my initial commit', 'commenter': 'sirux88'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -361,7 +382,60 @@
         ""TEXT_CONFIRM_DELETE"" : ""Dieser Löschvorgang ist unumkehrbar. Möchten Sie diese Benutzergruppe wirklich löschen?""
 
     },
-    
+
+    ""PLAYER"" : {
+
+        ""INFO_LOADING_RECORDING"" : ""Die Aufnahme wird momentan geladen. Bitte warten..."",","[{'comment': 'A suggestion for shorter text: ""Aufnahme wird geladen. Bitte warten...""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -361,7 +382,60 @@
         ""TEXT_CONFIRM_DELETE"" : ""Dieser Löschvorgang ist unumkehrbar. Möchten Sie diese Benutzergruppe wirklich löschen?""
 
     },
-    
+
+    ""PLAYER"" : {
+
+        ""INFO_LOADING_RECORDING"" : ""Die Aufnahme wird momentan geladen. Bitte warten..."",
+        ""INFO_SEEK_IN_PROGRESS""  : ""Spule zu gewünschten Stelle. Bitte warten...""
+
+    },
+
+    ""PROTOCOL_KUBERNETES"" : {
+
+        ""FIELD_HEADER_BACKSPACE""       : ""Rücktaste sendet:"",
+        ""FIELD_HEADER_CA_CERT""         : ""Zertifikate der Zertifizierungsstelle:"",
+        ""FIELD_HEADER_CLIENT_CERT""     : ""Client Zertifikat:"",
+        ""FIELD_HEADER_CLIENT_KEY""      : ""Client Schlüssel:"",
+        ""FIELD_HEADER_COLOR_SCHEME""    : ""Farbschema:"",
+        ""FIELD_HEADER_CONTAINER""       : ""Container Name:"",
+        ""FIELD_HEADER_CREATE_RECORDING_PATH""  : ""Aufname-Pfad automatisch erstellen:"",
+        ""FIELD_HEADER_CREATE_TYPESCRIPT_PATH"" : ""Typescript-Pfad automatisch erstellen:"",
+        ""FIELD_HEADER_EXEC_COMMAND""    : ""Befehl (exec):"",","[{'comment': 'A suggestion: ""Befehl ausführen (exec)""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -399,6 +480,7 @@
         ""FIELD_HEADER_IGNORE_CERT""     : ""Serverzertifikat ignorieren:"",
         ""FIELD_HEADER_INITIAL_PROGRAM"" : ""Startprogramme:"",
         ""FIELD_HEADER_LOAD_BALANCE_INFO"" : ""Lastverteilungs-Info/Cookie:"",
+        ""FIELD_HEADER_NORMALIZE_CLIPBOARD"" : ""Zeilenende:"",","[{'comment': 'It has to do with the character on the clipboard? ""Zwischenablage normalisieren / Zeilenumbruch""', 'commenter': 'IT-Experte'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -21,12 +22,14 @@
         ""ACTION_MANAGE_USER_GROUPS"" : ""Gruppen"",
         ""ACTION_NAVIGATE_BACK""      : ""Zurück"",
         ""ACTION_NAVIGATE_HOME""      : ""Startseite"",
+        ""ACTION_PAUSE""              : ""Pause"",
+        ""ACTION_PLAY""               : ""Abspielen"",
         ""ACTION_SAVE""               : ""Speichern"",
         ""ACTION_SEARCH""             : ""Suche"",
         ""ACTION_SHARE""              : ""Teilen"",
         ""ACTION_UPDATE_PASSWORD""    : ""Passwort aktualisieren"",
         ""ACTION_VIEW_HISTORY""       : ""Verlauf"",
-
+        ""ACTION_VIEW_RECORDING""     : ""Ansicht"",","[{'comment': 'Can you add a space below this line?', 'commenter': 'necouchman'}, {'comment': 'done', 'commenter': 'sirux88'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -446,21 +538,28 @@
         ""FIELD_OPTION_SECURITY_RDP""   : ""RDP Verschlüsselung"",
         ""FIELD_OPTION_SECURITY_TLS""   : ""TLS Verschlüsselung"",
 
-        ""FIELD_OPTION_SERVER_LAYOUT_DA_DK_QWERTY"": ""Dänisch (Qwerty)"",","[{'comment': 'Any particular reason this was re-organized and moved down below? I think it should still be at the top?', 'commenter': 'necouchman'}, {'comment': 'It should be on top yes.\nBut since it is down on `en.json` I aligned it to keep comparing easier.\n\nIf you want I move it up on both `en.json` and `de.json`\n\n', 'commenter': 'sirux88'}, {'comment': 'Sure, that would be fine if you want to fix it in both locations.', 'commenter': 'necouchman'}, {'comment': 'I fixed it in all languages where it was present.', 'commenter': 'sirux88'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -580,9 +693,15 @@
         ""FIELD_HEADER_RECORDING_INCLUDE_KEYS""   : ""Tastendrücke aufzeichnen:"",
         ""FIELD_HEADER_RECORDING_NAME"" : ""Aufzeichnungsname:"",
         ""FIELD_HEADER_RECORDING_PATH"" : ""Aufzeichnungspfad:"",
+","[{'comment': ""I think this extra space can be removed - the rest of the `FIELD_HEADER` items don't seem to be broken up?"", 'commenter': 'necouchman'}, {'comment': 'I removed it. Rest seems fine yeah', 'commenter': 'sirux88'}]"
767,guacamole/src/main/frontend/src/translations/de.json,"@@ -759,19 +889,21 @@
         ""FIELD_HEADER_PASSWORD_OLD""       : ""Aktuelles Passwort:"",
         ""FIELD_HEADER_PASSWORD_NEW""       : ""Neues Passwort:"",
         ""FIELD_HEADER_PASSWORD_NEW_AGAIN"" : ""Passwort wiederholen:"",
+        ""FIELD_HEADER_TIMEZONE""           : ""Zeitzone:"",
         ""FIELD_HEADER_USERNAME""           : ""Benutzername:"",
         
         ""HELP_DEFAULT_INPUT_METHOD"" : ""Die Standardeingabemethode bestimmt wie Tastaturereignisse an Guacamole weitergeleitet werden. Eine Änderung dieser Einstellung kann erforderlich sein, wenn ein mobiles Gerät verwendet wird oder bei der Eingabe durch einen IME. Dieses Verhalten kann im Menü innerhalb der Guacamole Verbindung geändert werden."",
         ""HELP_DEFAULT_MOUSE_MODE""   : ""Der Standard Mausemulationsmodus bestimmt wie sich die entfernte Maus bei Touchpad Berührungen verhält. Dieses Verhalten kann im Menü innerhalb der Guacamole Verbindung geändert werden."",
         ""HELP_INPUT_METHOD_NONE""    : ""@:CLIENT.HELP_INPUT_METHOD_NONE"",
         ""HELP_INPUT_METHOD_OSK""     : ""@:CLIENT.HELP_INPUT_METHOD_OSK"",
         ""HELP_INPUT_METHOD_TEXT""    : ""@:CLIENT.HELP_INPUT_METHOD_TEXT"",
-        ""HELP_LANGUAGE""             : ""Um die Spracheinstellungen von Guacamole zu ändern,  wählen Sie eine der verfügbaren Sprachen."",
+        ""HELP_LOCALE""             : ""Um die Spracheinstellungen von Guacamole zu ändern,  wählen Sie eine der verfügbaren Sprachen."",","[{'comment': 'Maybe add one space to line up this `:` with the other lines above/below?', 'commenter': 'necouchman'}, {'comment': 'Done', 'commenter': 'sirux88'}]"
778,guacamole/src/main/frontend/src/app/storage/services/localStorageService.js,"@@ -119,25 +140,56 @@ angular.module('storage').provider('localStorageService', [function localStorage
         }
         catch (ignore) {}
 
-        // Pull and parse value from internal storage, if present
+        // Pull from internal storage, if present
         var data = storedItems[key];
         if (data)
-            return JSON.parse(data);
+            return data;
 
         // No value defined for given key
         return null;
 
     };
 
+    /**
+     * Retrieves the JSON-serialized value currently stored within localStorage
+     * for the item having the given key. If access to localStorage is not
+     * provided/implemented by the browser, the item is retrieved from
+     * internal, in-memory storage. The retrieved value is automatically
+     * deserialized from JSON prior to being returned.
+     *
+     * @param {String} key
+     *     The arbitrary, unique key of the item to retrieve from localStorage.
+     *
+     * @returns {Object}
+     *     The value stored within localStorage under the given key,
+     *     automatically deserialized from JSON, or null if no such item is
+     *     present.
+     */
+    provider.getJsonItem = function getJsonItem(key) {","[{'comment': 'Rather than alter the behavior of `getItem()`/`setItem()` and provide new functions that duplicate the original behavior (thus requiring code using these functions to be updated), I suggest maintaining the established behavior for those functions and defining new functions for the new behavior, such as `getStringItem()`/`setStringItem()`.\r\n\r\nAlternatively, the established `getItem()`/`setItem()` should work as intended regardless of whether the provided data is a full object or just a string.', 'commenter': 'mike-jumper'}, {'comment': ""Oh yeah, having the existing methods just handle both is a much better idea. I'll do that."", 'commenter': 'jmuehlner'}]"
778,guacamole/src/main/frontend/src/app/auth/service/authenticationService.js,"@@ -84,12 +84,7 @@ angular.module('auth').factory('authenticationService', ['$injector',
             return cachedResult;
 
         // Return explicit null if no auth data is currently stored
-        var data = localStorageService.getItem(AUTH_STORAGE_KEY);
-        if (!data)
-            return null;
-
-        // Update cache and return retrieved auth result
-        return (cachedResult = new AuthenticationResult(data));
+        return null;","[{'comment': ""As this function will now only return the in-memory cached auth result provided via `setAuthenticationResult()`, we should note this in the function's docs, as well as the fact that `setAuthenticationResult()` will be called automatically upon page load."", 'commenter': 'mike-jumper'}, {'comment': 'Will do', 'commenter': 'jmuehlner'}]"
778,guacamole/src/main/frontend/src/app/auth/service/authenticationService.js,"@@ -115,9 +111,10 @@ angular.module('auth').factory('authenticationService', ['$injector',
             // Always store in cache
             cachedResult = data;
 
-            // Persist result past tab/window closure ONLY if not anonymous
+            // Persist auth token past tab/window closure ONLY if not anonymous
             if (data.username !== AuthenticationResult.ANONYMOUS_USERNAME)
-                localStorageService.setItem(AUTH_STORAGE_KEY, data);
+                localStorageService.setItem(
+                        AUTH_TOKEN_STORAGE_KEY, data.authToken);","[{'comment': 'I think we should document that:\r\n\r\n* Only the auth token is persisted locally, while the rest of the auth result is cached only in memory.\r\n* The rest of the authentication result can be obtained by reauthenticating with the persisted token, which can be retrieved with `getCurrentToken()`.', 'commenter': 'mike-jumper'}, {'comment': 'Done', 'commenter': 'jmuehlner'}]"
778,guacamole/src/main/frontend/src/app/storage/services/localStorageService.js,"@@ -119,10 +122,18 @@ angular.module('storage').provider('localStorageService', [function localStorage
         }
         catch (ignore) {}
 
-        // Pull and parse value from internal storage, if present
+        // Pull from internal storage, if present
         var data = storedItems[key];
-        if (data)
-            return JSON.parse(data);
+        if (data) {
+
+            // Serialize to JSON if possible
+            try {
+                return JSON.stringify(value);
+            } catch (ignore) {}","[{'comment': ""I think you mean `JSON.parse()` here, but I also don't think we should attempt to parse values that we expect may not be JSON, as doing so introduces ambiguity (a value intended to be stored as a string may happen to also be valid JSON).\r\n\r\nWe could universally store everything as JSON, in which case a string would just be stored as a JSON string, or we could provide functions that are specifically intended for storage/retrieval of only string values."", 'commenter': 'mike-jumper'}, {'comment': ""A raw string isn't a valid JSON-parseable value, so that won't be quite so simple. I'll just make string-specific versions of these functions to clear up any ambiguity. "", 'commenter': 'jmuehlner'}, {'comment': ""> A raw string isn't a valid JSON-parseable value, ...\r\n\r\nIsn't it? I get:\r\n\r\n![Stringifying and parsing the JavaScript string 'foo'](https://user-images.githubusercontent.com/4632905/204666024-f49e770b-b5f8-4495-9465-a2178a8cd671.png)\r\n"", 'commenter': 'mike-jumper'}, {'comment': ""Err, yeah. I'm not sure what was going on when I tested that earlier."", 'commenter': 'jmuehlner'}, {'comment': 'Well, that was a bunch of ado about nothing. Removed my changes to this service.', 'commenter': 'jmuehlner'}]"
780,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/activeconnection/ActiveConnectionDirectory.java,"@@ -44,34 +44,40 @@ public class ActiveConnectionDirectory extends RestrictedObject
 
     @Override
     public ActiveConnection get(String identifier) throws GuacamoleException {
+        validateUserAccess();","[{'comment': ""I don't really love having to call this everywhere, but I'm not sure of a better / more elegant way to do this."", 'commenter': 'jmuehlner'}, {'comment': 'What about a `RestrictedDirectory` base class?', 'commenter': 'mike-jumper'}, {'comment': ""That sounds like a good idea - I'll give it a try!"", 'commenter': 'jmuehlner'}, {'comment': 'Ok, how does this look?', 'commenter': 'jmuehlner'}, {'comment': ""Looks much more DRY, I'd say."", 'commenter': 'mike-jumper'}]"
780,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/pom.xml,"@@ -94,6 +94,12 @@
             <artifactId>guice</artifactId>
         </dependency>
 
+        <!-- Guice Assisted Inject Extension -->
+        <dependency>","[{'comment': ""I need this in order to create `AccessEnforcingDelegatingTunnel` instances. Since the `DelegatingGuacamoleTunnel` requires the wrapped tunnel at creation time, I can't use the same `Provider` + init method approach used elsewhere."", 'commenter': 'jmuehlner'}]"
780,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AbstractGuacamoleTunnelService.java,"@@ -736,7 +778,10 @@ public GuacamoleTunnel getGuacamoleTunnel(RemoteAuthenticatedUser user,
                 user, definition.getActiveConnection(), definition.getSharingProfile());
 
         // Connect to shared connection described by the created record
-        GuacamoleTunnel tunnel = assignGuacamoleTunnel(connectionRecord, info, tokens, false);
+        GuacamoleTunnel tunnel = assignGuacamoleTunnel(
+                connectionRecord, userService.retrieveAuthenticatedUser(
+                    user.getAuthenticationProvider(), user.getCredentials()),
+                info, tokens, false);","[{'comment': 'Why re-retrieve the `AuthenticatedUser`?', 'commenter': 'mike-jumper'}]"
780,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/RestrictedDirectory.java,"@@ -0,0 +1,132 @@
+package org.apache.guacamole.auth.jdbc.base;
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.util.Collection;
+import java.util.Set;
+
+import javax.annotation.Nonnull;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.auth.jdbc.user.ModeledUser;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.Identifiable;
+
+/**
+ * A directory that will wrap another provided directory, and automatically
+ * perform user access window restrictions before every directory operation,
+ * delegating the operation itself to the wrapped directory.
+ *
+ * If the user access check fails, an exception will be thrown to block access
+ * to the wrapped directory.
+ */
+public class RestrictedDirectory<T extends Identifiable> implements Directory<T> {
+
+    /**
+     * The user whose access window restrictions are being applied to the
+     * wrapped directory.
+     */
+    private ModeledAuthenticatedUser currentUser;
+
+    /**
+     * The wrapped directory to which all operations will be delegated.
+     */
+    private Directory<T> wrappedDirectory;
+
+    /**
+     * Create a new RestrictedDirectory that will automatically enforce user
+     * access window restrictions for all directory operations, delegating the
+     * results of the operations to the wrapped directory.
+     *
+     * @param wrappedDirectory;
+     *     The directory to delegate all directory operations to.
+     *
+     * @param user
+     *     The user whose access window restrictions will be applied to the
+     *     directory.
+     */
+    public RestrictedDirectory(
+            @Nonnull Directory<T> wrappedDirectory,
+            @Nonnull ModeledAuthenticatedUser currentUser) {
+
+        this.currentUser = currentUser;
+        this.wrappedDirectory = wrappedDirectory;
+    }
+
+    @Override
+    public T get(String identifier) throws GuacamoleException {
+        validateUserAccess();
+        return wrappedDirectory.get(identifier);
+    }
+
+    @Override
+    public Collection<T> getAll(Collection<String> identifiers) throws GuacamoleException {
+        validateUserAccess();
+        return wrappedDirectory.getAll(identifiers);
+    }
+
+    @Override
+    public Set<String> getIdentifiers() throws GuacamoleException {
+        validateUserAccess();
+        return wrappedDirectory.getIdentifiers();
+    }
+
+    @Override
+    public void add(T object) throws GuacamoleException {
+        validateUserAccess();
+        wrappedDirectory.add(object);
+    }
+
+    @Override
+    public void update(T object) throws GuacamoleException {
+        validateUserAccess();
+        wrappedDirectory.update(object);
+    }
+
+    @Override
+    public void remove(String identifier) throws GuacamoleException {
+        validateUserAccess();
+        wrappedDirectory.remove(identifier);
+    }
+
+    /**
+     * Validate that the current user is within a valid access time window
+     * and not disabled. If the user account is disabled or not within a
+     * valid access window, a GuacamoleUnauthorizedException will be thrown.
+     *
+     * @throws GuacamoleException
+     *     If the user is outside of a valid access window, the user is
+     *     disabled, or an error occurs while trying to determine access time
+     *     restriction configuration.
+     */
+    protected void validateUserAccess() throws GuacamoleException {
+
+        // If the user is outside of a valid access time window or disabled,
+        // throw an exception to immediately log them out
+        ModeledUser modeledUser = currentUser.getUser();
+        if (
+                !modeledUser.isAccountAccessible()
+                || !modeledUser.isAccountValid()
+                || modeledUser.isDisabled()
+        )
+            throw new GuacamoleUnauthorizedException(""Permission Denied."");","[{'comment': 'Except for perhaps `isDisabled()`, which is supposed to behave as if the user does not exist, I think we should use `TranslatableGuacamoleUnauthorizedException` and the user-facing messages created for this purpose:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/6c43611f5198a18cfaf582fcbc1fbcfb1efbda1f/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/JDBCAuthenticationProviderService.java#L113-L123', 'commenter': 'mike-jumper'}]"
780,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/RestrictedDirectory.java,"@@ -0,0 +1,132 @@
+package org.apache.guacamole.auth.jdbc.base;
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.util.Collection;
+import java.util.Set;
+
+import javax.annotation.Nonnull;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.auth.jdbc.user.ModeledUser;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.Identifiable;
+
+/**
+ * A directory that will wrap another provided directory, and automatically
+ * perform user access window restrictions before every directory operation,
+ * delegating the operation itself to the wrapped directory.
+ *
+ * If the user access check fails, an exception will be thrown to block access
+ * to the wrapped directory.
+ */
+public class RestrictedDirectory<T extends Identifiable> implements Directory<T> {","[{'comment': 'May save some trouble to `extend DelegatingDirectory<T>`.', 'commenter': 'mike-jumper'}]"
780,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AccessEnforcingDelegatingTunnel.java,"@@ -0,0 +1,196 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.tunnel;
+
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.annotation.Nonnull;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.auth.jdbc.user.ModeledUser;
+import org.apache.guacamole.auth.jdbc.user.UserService;
+import org.apache.guacamole.io.GuacamoleReader;
+import org.apache.guacamole.net.DelegatingGuacamoleTunnel;
+import org.apache.guacamole.net.GuacamoleTunnel;
+import org.apache.guacamole.protocol.FilteredGuacamoleReader;
+import org.apache.guacamole.protocol.GuacamoleFilter;
+import org.apache.guacamole.protocol.GuacamoleInstruction;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.inject.Inject;
+import com.google.inject.assistedinject.Assisted;
+import com.google.inject.assistedinject.AssistedInject;
+
+/**
+ * A tunnel implementation that enforces access window restriction for the
+ * provided ModeledUser, throwing a GuacamoleUnauthorizedException if the
+ * user's configured access window has closed, or if the user has become
+ * disabled. All other tunnel implementation is delegated to the underlying
+ * tunnel object.
+ */
+public class AccessEnforcingDelegatingTunnel extends DelegatingGuacamoleTunnel {
+
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(
+            AccessEnforcingDelegatingTunnel.class);
+
+    /**
+     * The number of milliseconds between subsequent refreshes of the user
+     * from the DB.
+     */
+    private static final long USER_MODEL_REFRESH_INTERVAL = 10000;
+
+    /**
+     * The user who's access window restrictions should be applied for the
+     * wrapped tunnel.
+     */
+    private final AtomicReference<ModeledUser> user;
+
+    /**
+     * A thread that will continously refresh the user
+     */
+    private final Thread userRefreshThread;
+
+    /**
+     * A service to use for refreshing the user from the DB.
+     */
+    @Inject
+    private UserService userService;
+
+    /**
+     * Create a new tunnel that will enforce the access window restrictions of
+     * the provided user, during usage of the provided tunnel.
+     *
+     * @param tunnel
+     *     The tunnel to delegate to.
+     *
+     * @param modeledAuthenticatedUser
+     *     The user whose access restrictions should be applied.
+     *
+     */
+    @AssistedInject
+    public AccessEnforcingDelegatingTunnel(
+            @Nonnull @Assisted GuacamoleTunnel tunnel,
+            @Nonnull @Assisted ModeledAuthenticatedUser modeledAuthenticatedUser) {
+
+        super(tunnel);
+        this.user = new AtomicReference<>(modeledAuthenticatedUser.getUser());
+
+        this.userRefreshThread = new Thread(() -> {
+            while (true) {
+
+                try {
+
+                    // Fetch an up-to-date user record from the DB to ensure
+                    // that any access restrictions modified while this tunnel
+                    // is open will be taken into account
+                    this.user.set(userService.retrieveUser(
+                        modeledAuthenticatedUser.getAuthenticationProvider(),
+                        modeledAuthenticatedUser));","[{'comment': ""I think this might cause problems at scale if we're executing a SQL query every 10 seconds for every connection across every user. It should instead occur once across all logged-in users (ie: at the `AuthenticationProvider` level), presumably at most once per minute."", 'commenter': 'mike-jumper'}]"
780,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/tunnel/AccessEnforcingDelegatingTunnel.java,"@@ -0,0 +1,196 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.tunnel;
+
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.annotation.Nonnull;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleUnauthorizedException;
+import org.apache.guacamole.auth.jdbc.user.ModeledAuthenticatedUser;
+import org.apache.guacamole.auth.jdbc.user.ModeledUser;
+import org.apache.guacamole.auth.jdbc.user.UserService;
+import org.apache.guacamole.io.GuacamoleReader;
+import org.apache.guacamole.net.DelegatingGuacamoleTunnel;
+import org.apache.guacamole.net.GuacamoleTunnel;
+import org.apache.guacamole.protocol.FilteredGuacamoleReader;
+import org.apache.guacamole.protocol.GuacamoleFilter;
+import org.apache.guacamole.protocol.GuacamoleInstruction;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.inject.Inject;
+import com.google.inject.assistedinject.Assisted;
+import com.google.inject.assistedinject.AssistedInject;
+
+/**
+ * A tunnel implementation that enforces access window restriction for the
+ * provided ModeledUser, throwing a GuacamoleUnauthorizedException if the
+ * user's configured access window has closed, or if the user has become
+ * disabled. All other tunnel implementation is delegated to the underlying
+ * tunnel object.
+ */
+public class AccessEnforcingDelegatingTunnel extends DelegatingGuacamoleTunnel {
+
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(
+            AccessEnforcingDelegatingTunnel.class);
+
+    /**
+     * The number of milliseconds between subsequent refreshes of the user
+     * from the DB.
+     */
+    private static final long USER_MODEL_REFRESH_INTERVAL = 10000;
+
+    /**
+     * The user who's access window restrictions should be applied for the
+     * wrapped tunnel.
+     */
+    private final AtomicReference<ModeledUser> user;
+
+    /**
+     * A thread that will continously refresh the user
+     */
+    private final Thread userRefreshThread;
+
+    /**
+     * A service to use for refreshing the user from the DB.
+     */
+    @Inject
+    private UserService userService;
+
+    /**
+     * Create a new tunnel that will enforce the access window restrictions of
+     * the provided user, during usage of the provided tunnel.
+     *
+     * @param tunnel
+     *     The tunnel to delegate to.
+     *
+     * @param modeledAuthenticatedUser
+     *     The user whose access restrictions should be applied.
+     *
+     */
+    @AssistedInject
+    public AccessEnforcingDelegatingTunnel(
+            @Nonnull @Assisted GuacamoleTunnel tunnel,
+            @Nonnull @Assisted ModeledAuthenticatedUser modeledAuthenticatedUser) {
+
+        super(tunnel);
+        this.user = new AtomicReference<>(modeledAuthenticatedUser.getUser());
+
+        this.userRefreshThread = new Thread(() -> {
+            while (true) {
+
+                try {
+
+                    // Fetch an up-to-date user record from the DB to ensure
+                    // that any access restrictions modified while this tunnel
+                    // is open will be taken into account
+                    this.user.set(userService.retrieveUser(
+                        modeledAuthenticatedUser.getAuthenticationProvider(),
+                        modeledAuthenticatedUser));
+                }
+
+                // If an error occurs while trying to fetch the updated user,
+                // log the warning / exception and stop the refresh thread
+                catch (GuacamoleException e) {
+
+                    logger.warn(
+                            ""Aborting user refresh thread due to error: {}"",
+                            e.getMessage());
+                    logger.debug(
+                            ""Exception caught while attempting to refresh user."", e);
+
+                    return;
+                }
+
+                try {
+
+                    // Wait a bit before refreshing the user record again
+                    Thread.sleep(USER_MODEL_REFRESH_INTERVAL);
+                }
+
+                // If interrupted by the tunnel, exit immediately
+                catch (InterruptedException e) {
+                    return;
+                }
+            }
+        });
+    }
+
+    @Override
+    public GuacamoleReader acquireReader() {
+
+        // Start periodically refreshing the user record
+        userRefreshThread.start();
+
+        // Filter received instructions, checking if the user's login
+        // is still valid for each one. If the login is invalid,
+        // log them out immediately and close the tunnel.
+        return new FilteredGuacamoleReader(
+            super.acquireReader(),
+            new GuacamoleFilter() {","[{'comment': 'Rather than override `acquireReader()`, etc., it would be better to override `getSocket()` and use a `FilteredGuacamoleSocket`. The same filter implementation could be used for both reads and writes.', 'commenter': 'mike-jumper'}]"
780,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/ModeledUserContext.java,"@@ -27,8 +27,10 @@
 import com.google.inject.Provider;
 import java.util.Collection;
 import java.util.Date;
+","[{'comment': 'Are we intentionally separating imports, now?', 'commenter': 'necouchman'}, {'comment': ""No, this wasn't an intentional change. I'll remove it."", 'commenter': 'jmuehlner'}]"
780,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/UserContext.java,"@@ -40,6 +40,23 @@ public interface UserContext {
      */
     User self();
 
+    /**
+     * Returns true if the session for the User associated with this user
+     * context is valid, or false otherwise. If the session is not valid, no
+     * user context actions may be peformed.","[{'comment': 'I don\'t think we should commit to ""no user context actions may be performed"", as that would require more strict enforcement where we test `isValid()` before every action. I suggest instead only specifying that the user\'s session will be terminated by the web application.\r\n\r\nIt may also be useful to note here that the web application currently tests session validity every minute, though implementations should not rely on any particular schedule except that invalid sessions can be expected to be terminated in a reasonably timely manner.', 'commenter': 'mike-jumper'}, {'comment': 'That makes sense - how does this look?', 'commenter': 'jmuehlner'}, {'comment': 'Much better - LGTM!', 'commenter': 'mike-jumper'}]"
783,.gitignore,"@@ -1,2 +1,3 @@
 *~
 target/
+.vscode/","[{'comment': ""Adding .gitignore entries is fine, I'm just not sure it should be part of this change."", 'commenter': 'necouchman'}, {'comment': 'I can remove this from the pull request', 'commenter': 'aleitner'}]"
783,guacamole/src/main/java/org/apache/guacamole/rest/user/UserResource.java,"@@ -150,6 +150,10 @@ public void updateObject(APIUser modifiedObject) throws GuacamoleException {
             throw e;
         }
 
+        /* Force updateObject to save the timezone when it is empty */
+        if (modifiedObject.getAttributes().get(""timezone"") == null)
+            modifiedObject.getAttributes().put(""timezone"", """");
+","[{'comment': ""As mentioned on the Jira issue, I'm curious why setting an empty string is required or preferable to having a `null` or non-existent value? It doesn't look like this change provides any functionality based on that, just changes it to an empty string? Why?"", 'commenter': 'necouchman'}, {'comment': ""Upon saving the User preferences when the timezone is set to be empty, User Resource's `updateObject` get's called. This leads to the UserObjectTranslator performing a filter on the user object. The user object has attributes on it and any attributes that are `null` get filtered out. Meaning anything that has a `null` value does not get updated. Setting the attribute as an empty string will prevent the `timezone` attribute from being filtered out and thus allows a `timezone` to be set to empty."", 'commenter': 'aleitner'}, {'comment': ""Hmmm...it's possible that this is a bug, then, in the setting process, that needs to be corrected - IIRC, attributes that are null should be removed completely if they exist, not ignored. So, I suspect some amount of fixing is indeed needed, here; however, I'm not sure that changing from `null` to an empty string is the best way to accomplish this - without looking at things in detail, it seems like this just ignores the underlying problem and works around it rather than actually fixing it.\r\n\r\nI very well could be mistaken, though..."", 'commenter': 'necouchman'}, {'comment': 'The alternative that I can think of would be to have the empty timezone be represented as an empty string rather than null on the javascript side', 'commenter': 'aleitner'}, {'comment': 'Yeah, I agree this shouldn\'t be done this way:\r\n1. Within Guacamole object attributes, there is a distinction between `null` (unset) and `""""` (set to empty string). They are both distinct, legitimate values. Setting to `null` typically is used to delete an attribute.\r\n2. The generic REST endpoint for attributes should definitely not be aware of the particular needs of any one attribute. It should just shuttle the data around.\r\n\r\nI think we need to establish exactly why this attribute doesn\'t get cleared out and correct _that_. It may be that the JS for the timezone field isn\'t properly submitting its value, or it may be that the database isn\'t properly handling those received attribute values.', 'commenter': 'mike-jumper'}, {'comment': 'Okay I tackled the root of the problem and allowed the ability to save nulls', 'commenter': 'aleitner'}]"
783,guacamole/src/main/java/org/apache/guacamole/rest/directory/DirectoryObjectTranslator.java,"@@ -145,8 +145,8 @@ public Map<String, String> filterAttributes(Collection<Form> schema,
                 String attributeValue = attributes.get(attributeName);
 
                 // Include attribute value within filtered map only if
-                // (1) defined and (2) present within provided map
-                if (attributeValue != null)
+                // present within provided map
+                if (attributes.containsKey(attributeName))","[{'comment': 'Suggest `attributeValue != null || attributes.containsKey(attributeName)` to avoid the double lookup except where necessary.', 'commenter': 'mike-jumper'}]"
794,guacamole-docker/bin/start.sh,"@@ -1164,6 +1174,16 @@ if [ -n ""$API_SESSION_TIMEOUT"" ]; then
     associate_apisessiontimeout
 fi
 
+# Maximum number of bytes to accept within the entity body of any particular HTTP request
+set_optional_property ""api-max-request-size"" ""$API_MAX_REQUEST_SIZE""
+
+# A comma-separated whitelist of language keys to allow as display language 
+# choices within the Guacamole interface
+set_optional_property ""allowed-languages"" ""$ALLOWED_LANGUAGES""
+
+set_optional_property ""enable-environment-properties"" ""$ENABLE_ENVIRONMENT_PROPERTIES""","[{'comment': 'This should probably have a comment associated with it.', 'commenter': 'necouchman'}, {'comment': 'Missed that comment.\r\nFixed.\r\n', 'commenter': 'ronansalmon'}]"
794,guacamole-docker/bin/start.sh,"@@ -1064,6 +1069,11 @@ fi
 set_property ""guacd-hostname"" ""$GUACD_HOSTNAME""
 set_property ""guacd-port""     ""$GUACD_PORT""
 
+# A comma-separated list of the identifiers of authentication providers that
+# should be allowed to fail internally without aborting the authentication process
+set_property ""skip-if-unavailable""     ""$SKIP_IF_UNAVAILABLE""","[{'comment': ""Shouldn't this be `set_optional_property`? Using `set_property` will put an empty string in there or possibly other unexpected results if it isn't present."", 'commenter': 'necouchman'}, {'comment': 'makes sense! ', 'commenter': 'ronansalmon'}]"
794,guacamole-docker/bin/start.sh,"@@ -1164,6 +1174,19 @@ if [ -n ""$API_SESSION_TIMEOUT"" ]; then
     associate_apisessiontimeout
 fi
 
+# Maximum number of bytes to accept within the entity body of any particular HTTP request
+set_optional_property ""api-max-request-size"" ""$API_MAX_REQUEST_SIZE""
+
+# A comma-separated whitelist of language keys to allow as display language ","[{'comment': 'I would suggest changing this to:\r\n`A comma-separated list of language keys to allow...`', 'commenter': 'necouchman'}, {'comment': 'ok\r\n', 'commenter': 'ronansalmon'}]"
797,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-base/src/main/java/org/apache/guacamole/auth/sso/IdentifierGenerator.java,"@@ -0,0 +1,106 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.sso;
+
+import com.google.common.io.BaseEncoding;
+import com.google.inject.Singleton;
+import java.math.BigInteger;
+import java.security.SecureRandom;
+
+/**
+ * Generator of unique and unpredictable identifiers. Each generated identifier
+ * is an arbitrary, random string produced using a cryptographically-secure
+ * random number generator.
+ */
+@Singleton
+public class IdentifierGenerator {
+
+    /**
+     * Cryptographically-secure random number generator for generating unique
+     * identifiers.
+     */
+    private final SecureRandom secureRandom = new SecureRandom();
+
+    /**
+     * Generates a unique and unpredictable identifier. Each identifier is at
+     * least 256-bit and produced using a cryptographically-secure random
+     * number generator. The identifier may contain characters that differ only
+     * in case.
+     *
+     * @return
+     *     A unique and unpredictable identifier with at least 256 bits of
+     *     entropy.
+     */
+    public String generateIdentifier() {
+        return generateIdentifier(256);
+    }
+
+    /**
+     * Generates a unique and unpredictable identifier having at least the
+     * given number of bits of entropy. The resulting identifier may have more
+     * than the number of bits required. The identifier may contain characters
+     * that differ only in case.
+     *
+     * @param minBits
+     *     The number of bits of entropy that the identifier should contain.
+     *
+     * @return
+     *     A unique and unpredictable identifier with at least the given number
+     *     of bits of entropy.
+     */
+    public String generateIdentifier(int minBits) {
+        return generateIdentifier(minBits, true);
+    }
+
+    /**
+     * Generates a unique and unpredictable identifier having at least the
+     * given number of bits of entropy. The resulting identifier may have more
+     * than the number of bits required. The identifier may contain characters
+     * that differ only in case.
+     *
+     * @param minBits
+     *     The number of bits of entropy that the identifier should contain.
+     *
+     * @param caseSensitive
+     *     Whether identifiers are permitted to contain characters that vary
+     *     by case. If false, all characters that may vary by case will be
+     *     lowercase, and the generated identifier will be longer.
+     *
+     * @return
+     *     A unique and unpredictable identifier with at least the given number
+     *     of bits of entropy.
+     */
+    public String generateIdentifier(int minBits, boolean caseSensitive) {
+
+        // Generate a base64 identifier if we're allowed to vary by case
+        if (caseSensitive) {
+            int minBytes = (minBits + 23) / 24 * 3; // Round up to nearest multiple of 3 bytes, as base64 encodes blocks of 3 bytes at a time
+            byte[] bytes = new byte[minBytes];
+            secureRandom.nextBytes(bytes);
+            return BaseEncoding.base64().encode(bytes);
+        }
+
+        // Generate base32 identifiers if we cannot vary by case
+        minBits = (minBits + 4) / 5 * 5; // Round up to nearest multiple of 5 bites, as base32 encodes 5 bits at a time","[{'comment': '`bites`?', 'commenter': 'jmuehlner'}, {'comment': ""Oops ... bits*\r\n\r\nI'll fix that."", 'commenter': 'mike-jumper'}]"
797,guacamole/src/main/frontend/src/app/auth/service/authenticationService.js,"@@ -18,25 +18,46 @@
  */
 
 /**
- * A service for authenticating a user against the REST API.
+ * A service for authenticating a user against the REST API. Invoking the
+ * authenticate() or login() functions of this service","[{'comment': 'It looks like the second half of this sentence is missing?', 'commenter': 'jmuehlner'}, {'comment': 'Whoops - looks like I', 'commenter': 'mike-jumper'}]"
797,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/resources/guac-manifest.json,"@@ -0,0 +1,35 @@
+{
+
+    ""guacamoleVersion"" : ""1.5.0"",
+
+    ""name""      : ""SSL Authentication Extension"",
+    ""namespace"" : ""ssl"",
+
+    ""authProviders"" : [
+        ""org.apache.guacamole.auth.ssl.SSLAuthenticationProvider""
+    ],
+
+    ""css"" : [
+        ""styles/sso-providers.css""
+    ],
+
+    ""js"" : [ ""ssl.min.js"" ],
+
+    ""html"" : [
+        ""html/sso-providers.html"",","[{'comment': ""What is `sso-providers.html`? I don't see this file anywhere."", 'commenter': 'jmuehlner'}, {'comment': 'Ah - that\'s inherited from the ""guacamole-auth-sso-base"" project: https://github.com/apache/guacamole-client/blob/78c084be6568ae2ae8097daddb1cbf94903df060/extensions/guacamole-auth-sso/modules/guacamole-auth-sso-base/src/main/resources/html/sso-providers.html', 'commenter': 'mike-jumper'}, {'comment': 'Ahhhh right', 'commenter': 'jmuehlner'}]"
797,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/resources/guac-manifest.json,"@@ -0,0 +1,35 @@
+{
+
+    ""guacamoleVersion"" : ""1.5.0"",
+
+    ""name""      : ""SSL Authentication Extension"",
+    ""namespace"" : ""ssl"",
+
+    ""authProviders"" : [
+        ""org.apache.guacamole.auth.ssl.SSLAuthenticationProvider""
+    ],
+
+    ""css"" : [
+        ""styles/sso-providers.css""
+    ],
+
+    ""js"" : [ ""ssl.min.js"" ],
+
+    ""html"" : [
+        ""html/sso-providers.html"",
+        ""html/sso-provider-ssl.html""
+    ],
+
+    ""translations"" : [
+        ""translations/ca.json"",","[{'comment': ""Where are all these translations? I don't see any of these files (even `en.json`) in the `guacamole-auth-sso-ssl` package."", 'commenter': 'jmuehlner'}, {'comment': 'These also are inherited from ""guacamole-auth-sso-base"": https://github.com/apache/guacamole-client/tree/78c084be6568ae2ae8097daddb1cbf94903df060/extensions/guacamole-auth-sso/modules/guacamole-auth-sso-base/src/main/resources/translations', 'commenter': 'mike-jumper'}]"
797,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/resources/guac-manifest.json,"@@ -0,0 +1,35 @@
+{
+
+    ""guacamoleVersion"" : ""1.5.0"",
+
+    ""name""      : ""SSL Authentication Extension"",
+    ""namespace"" : ""ssl"",
+
+    ""authProviders"" : [
+        ""org.apache.guacamole.auth.ssl.SSLAuthenticationProvider""
+    ],
+
+    ""css"" : [
+        ""styles/sso-providers.css""","[{'comment': ""Where is this file? I don't see it anywhere."", 'commenter': 'jmuehlner'}, {'comment': 'This, too, is inherited from ""guacamole-auth-sso-base"": https://github.com/apache/guacamole-client/blob/78c084be6568ae2ae8097daddb1cbf94903df060/extensions/guacamole-auth-sso/modules/guacamole-auth-sso-base/src/main/resources/styles/sso-providers.css', 'commenter': 'mike-jumper'}]"
797,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/java/org/apache/guacamole/auth/ssl/SSLAuthenticationSessionManager.java,"@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ssl;
+
+import com.google.inject.Singleton;
+import org.apache.guacamole.auth.sso.AuthenticationSessionManager;
+
+/**
+ * Manager service that temporarily stores SSL/TLS authentication attempts
+ * while the authentication flow is underway.
+ */
+@Singleton
+public class SSLAuthenticationSessionManager
+        extends AuthenticationSessionManager<SSLAuthenticationSession> {
+
+    /**
+     * Returns the identity asserted by the external SSL termination service at
+     * the end of the authentication process represented by the authentication
+     * session with the given identifier. If there is no such authentication
+     * session, or no valid identity has been asserted for that session, null
+     * is returned.
+     *
+     * @param identifier
+     *     The unique string returned by the call to defer(). For convenience,
+     *     this value may safely be null.
+     *
+     * @return
+     *     The identity asserted by the external SSL termination service at the
+     *     end of the authentication process represented by the authentication
+     *     session the the given identifier, or null if there is no such","[{'comment': '`session the the given identifer` -> `session with the given identifier`?', 'commenter': 'necouchman'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
797,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/java/org/apache/guacamole/auth/ssl/SSLAuthenticationProvider.java,"@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ssl;
+
+import org.apache.guacamole.auth.sso.SSOAuthenticationProvider;
+
+/**
+ * Guacamole authentication backend which authenticates users using SSL/TLS
+ * client authentication provided by some external SSL termination system. This
+ * SSL termination system must be configured to provide access to this same
+ * instance of Guacamole and must have both a wildcard certificate and wildcard
+ * DNS. No storage for connections is provided - only authentication. Storage
+ * must be provided by some other extension.
+ */","[{'comment': ""Is this kind of requirement - wildcard certificate and wildcard DNS - normal or best-practice for web applications that do certificate-based authentication? I've used a view x509 certificate-based authentication systems in the past, and never noticed redirects to random sub-domains, but it's been a while, so maybe this is something new to combat more recent attacks?\r\n\r\nAre there not other ways to prevent caching and/or force logouts that would require the certificate to re-presented to Guacamole?"", 'commenter': 'necouchman'}, {'comment': 'My research hasn\'t revealed any, but I would be very happy to hear of a better approach.\r\n\r\nThe current approach with wildcard certificates and wildcard DNS is rooted in what I encountered while researching how PIV/CAC auth could be implemented. I had access to:\r\n\r\n* A subset of the set of NIST PIV test cards.\r\n* A USB card reader.\r\n* https://secure.login.gov/login/piv_cac as a real-world example of what a good PIV/CAC auth flow can be.\r\n\r\nFrom the above, I observed:\r\n\r\n* Browsers cache credentials from X.509 certificates. Initially, I had hoped to work around this by checking SSL session IDs, but that was not sufficient - these were _new_ sessions established with cached credentials.\r\n* There is no way for anything not directly handling the SSL/TLS communication to force any sort of behavior with respect to smart cards.\r\n* Behavior of an SSL/TLS connection is tied to the domain. It\'s not possible to require SSL client auth for only a path beneath a domain, because this negotiation occurs when the SSL connection is established and before anything like the HTTP request path would be available.\r\n* The `login.gov` site appears to leverage randomly-generated hostnames and wildcard DNS to ensure that clicking the ""Insert your PIV/CAC"" button always produces a fresh prompt for your card. This occurs through a series of redirects that are not visible unless you take a look at browser dev tools:\r\n\r\n  1. User visits https://secure.login.gov/login/piv_cac\r\n  2. User clicks ""Insert your PIV/CAC""\r\n  3. Internally, a request is issued to `https://secure.login.gov/login/present_piv_cac`\r\n  4. That request is redirected to `https://XXXX.pivcac.prod.login.gov/?nonce=NONCE&...` where `XXXX` is a 4-character random subdomain and `NONCE` is a lengthy, unique nonce value.\r\n  5. _Only_ the request to `XXXX.pivcac.prod.login.gov` requests SSL/TLS auth. It then redirects back to the original domain and includes a lengthy token in the query parameters of the redirect URL.\r\n  6. The result of auth is obtained through using that token and reported to the user.\r\n\r\n  While I _believe_ the `login.gov` site does things this way for the same reason I did (to ensure the user is guaranteed a fresh auth attempt), I can find no supporting documentation for this sort of requirement, including for established smart card auth solutions that purport to support PIV/CAC.', 'commenter': 'mike-jumper'}, {'comment': ""Okay, if that's the accepted way, that's fine - I've not ever implemented a SSL certificate authentication system, so I'm not familiar with the details, but sounds like that is best practice."", 'commenter': 'necouchman'}, {'comment': ""> Okay, if that's the accepted way, that's fine ...\r\n\r\nWell, it's the way that I determined `login.gov` was using, and the only way I can think of that would ensure there is no caching of credentials, but I have not found any documentation explicitly supporting that approach.\r\n\r\nThe fact that you've not dealt with similar in your own use of X.509 auth, and that no other SSO system leveraging X.509 via the browser appears to be documented as doing the same, concerns me that I may have overengineered this ... but then again, I'm reasonably confident this is what `login.gov` is doing."", 'commenter': 'mike-jumper'}, {'comment': ""Sounds good. My main concern is for those who may not have quite so broad control of DNS systems, or have DNS and/or SSL Certificate Admins who frown upon wildcard subdomains (not that I have any experience with those types of DNS admins...), and how they might implement such a system. But, that's probably a small contingent of folks who would be implementing this type of authentication."", 'commenter': 'necouchman'}]"
797,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/java/org/apache/guacamole/auth/ssl/SSLClientAuthenticationResource.java,"@@ -0,0 +1,414 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.ssl;
+
+import com.google.inject.Inject;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.net.URI;
+import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
+import java.security.Principal;
+import java.security.cert.CertificateException;
+import java.security.cert.CertificateFactory;
+import java.security.cert.X509Certificate;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import javax.naming.InvalidNameException;
+import javax.naming.ldap.LdapName;
+import javax.naming.ldap.Rdn;
+import javax.ws.rs.GET;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.HeaderParam;
+import javax.ws.rs.Path;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.HttpHeaders;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.UriBuilder;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleResourceNotFoundException;
+import org.apache.guacamole.auth.ssl.conf.ConfigurationService;
+import org.apache.guacamole.auth.sso.NonceService;
+import org.apache.guacamole.auth.sso.SSOResource;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * REST API resource that allows the user to retrieve an opaque state value
+ * representing their identity as determined by SSL/TLS client authentication.
+ * The opaque value may represent a valid identity or an authentication
+ * failure, and must be resubmitted within a normal Guacamole authentication
+ * request to finalize the authentication process.
+ */
+public class SSLClientAuthenticationResource extends SSOResource {
+
+    /**
+     * The string value that the SSL termination service uses for its client
+     * verification header to represent that the client certificate has been
+     * verified.
+     */
+    private static final String CLIENT_VERIFIED_HEADER_SUCCESS_VALUE = ""SUCCESS"";
+
+    /**
+     * The string value that the SSL termination service uses for its client
+     * verification header to represent that the client certificate is absent.
+     */
+    private static final String CLIENT_VERIFIED_HEADER_NONE_VALUE = ""NONE"";
+
+    /**
+     * The string prefix that the SSL termination service uses for its client
+     * verification header to represent that the client certificate has failed
+     * validation. The error message describing the nature of the failure is
+     * provided by the SSL termination service after this prefix.
+     */
+    private static final String CLIENT_VERIFIED_HEADER_FAILED_PREFIX = ""FAILED:"";
+
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(SSLClientAuthenticationResource.class);
+
+    /**
+     * Service for retrieving configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Session manager for generating and maintaining unique tokens to
+     * represent the authentication flow of a user who has only partially
+     * authenticated. Here, these tokens represent a user that has been
+     * validated by SSL termination and allow the Guacamole instance that
+     * doesn't require SSL/TLS authentication to retrieve the user's identity
+     * and complete the authentication process.
+     */
+    @Inject
+    private SSLAuthenticationSessionManager sessionManager;
+
+    /**
+     * Service for validating and generating unique nonce values. Here, these
+     * nonces are used specifically for generating unique domains.
+     */
+    @Inject
+    private NonceService subdomainNonceService;
+
+    /**
+     * Retrieves a single value from the HTTP header having the given name. If
+     * there are multiple HTTP headers present with this name, the first
+     * matching header in the request is used. If there are no such headers in
+     * the request, null is returned.
+     *
+     * @param headers
+     *     The HTTP headers present in the request.
+     *
+     * @param name
+     *     The name of the header to retrieve.
+     *
+     * @return
+     *     The first value of the HTTP header having the given name, or null if
+     *     there is no such header.
+     */
+    private String getHeader(HttpHeaders headers, String name) {
+
+        List<String> values = headers.getRequestHeader(name);
+        if (values.isEmpty())
+            return null;
+
+        return values.get(0);
+
+    }
+
+    /**
+     * Decodes the provided URL-encoded string as UTF-8, returning the result.
+     *
+     * @param value
+     *     The URL-encoded string to decode.
+     *
+     * @return
+     *     The decoded string.
+     *
+     * @throws GuacamoleException
+     *     If the provided value is not a value URL-encoded string.
+     */
+    private byte[] decode(String value) throws GuacamoleException {
+        try {
+            return URLDecoder.decode(value, StandardCharsets.UTF_8.name())
+                    .getBytes(StandardCharsets.UTF_8);
+        }
+        catch (IllegalArgumentException e) {
+            throw new GuacamoleClientException(""Invalid URL-encoded value."", e);
+        }
+        catch (UnsupportedEncodingException e) {
+            // This should never happen, as UTF-8 is a standard charset that
+            // the JVM is required to support
+            throw new UnsupportedOperationException(""Unexpected lack of UTF-8 support."", e);
+        }
+    }
+
+    /**
+     * Extracts a user's username from the provided LDAP DN. If specific","[{'comment': ""I realize that LDAP DNs and Certificate Subject Names are in the same format, but is this function really extracting the username from a LDAP DN, or is it extracting the username from a certificate Subject name? Or does the distinction really matter and I'm just being pedantic?"", 'commenter': 'necouchman'}, {'comment': ""It's a fair point. I'll rephrase to note that this extracts the username from the subject name of an X.509 certificate, which is expected to be in the format of an LDAP DN."", 'commenter': 'mike-jumper'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
797,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/java/org/apache/guacamole/auth/ssl/SSLClientAuthenticationResource.java,"@@ -0,0 +1,415 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.guacamole.auth.ssl;
+
+import com.google.inject.Inject;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.net.URI;
+import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
+import java.security.Principal;
+import java.security.cert.CertificateException;
+import java.security.cert.CertificateFactory;
+import java.security.cert.X509Certificate;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import javax.naming.InvalidNameException;
+import javax.naming.ldap.LdapName;
+import javax.naming.ldap.Rdn;
+import javax.ws.rs.GET;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.HeaderParam;
+import javax.ws.rs.Path;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.HttpHeaders;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.UriBuilder;
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleResourceNotFoundException;
+import org.apache.guacamole.auth.ssl.conf.ConfigurationService;
+import org.apache.guacamole.auth.sso.NonceService;
+import org.apache.guacamole.auth.sso.SSOResource;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * REST API resource that allows the user to retrieve an opaque state value
+ * representing their identity as determined by SSL/TLS client authentication.
+ * The opaque value may represent a valid identity or an authentication
+ * failure, and must be resubmitted within a normal Guacamole authentication
+ * request to finalize the authentication process.
+ */
+public class SSLClientAuthenticationResource extends SSOResource {
+
+    /**
+     * The string value that the SSL termination service uses for its client
+     * verification header to represent that the client certificate has been
+     * verified.
+     */
+    private static final String CLIENT_VERIFIED_HEADER_SUCCESS_VALUE = ""SUCCESS"";
+
+    /**
+     * The string value that the SSL termination service uses for its client
+     * verification header to represent that the client certificate is absent.
+     */
+    private static final String CLIENT_VERIFIED_HEADER_NONE_VALUE = ""NONE"";
+
+    /**
+     * The string prefix that the SSL termination service uses for its client
+     * verification header to represent that the client certificate has failed
+     * validation. The error message describing the nature of the failure is
+     * provided by the SSL termination service after this prefix.
+     */
+    private static final String CLIENT_VERIFIED_HEADER_FAILED_PREFIX = ""FAILED:"";
+
+    /**
+     * Logger for this class.
+     */
+    private static final Logger logger = LoggerFactory.getLogger(SSLClientAuthenticationResource.class);
+
+    /**
+     * Service for retrieving configuration information.
+     */
+    @Inject
+    private ConfigurationService confService;
+
+    /**
+     * Session manager for generating and maintaining unique tokens to
+     * represent the authentication flow of a user who has only partially
+     * authenticated. Here, these tokens represent a user that has been
+     * validated by SSL termination and allow the Guacamole instance that
+     * doesn't require SSL/TLS authentication to retrieve the user's identity
+     * and complete the authentication process.
+     */
+    @Inject
+    private SSLAuthenticationSessionManager sessionManager;
+
+    /**
+     * Service for validating and generating unique nonce values. Here, these
+     * nonces are used specifically for generating unique domains.
+     */
+    @Inject
+    private NonceService subdomainNonceService;
+
+    /**
+     * Retrieves a single value from the HTTP header having the given name. If
+     * there are multiple HTTP headers present with this name, the first
+     * matching header in the request is used. If there are no such headers in
+     * the request, null is returned.
+     *
+     * @param headers
+     *     The HTTP headers present in the request.
+     *
+     * @param name
+     *     The name of the header to retrieve.
+     *
+     * @return
+     *     The first value of the HTTP header having the given name, or null if
+     *     there is no such header.
+     */
+    private String getHeader(HttpHeaders headers, String name) {
+
+        List<String> values = headers.getRequestHeader(name);
+        if (values.isEmpty())
+            return null;
+
+        return values.get(0);
+
+    }
+
+    /**
+     * Decodes the provided URL-encoded string as UTF-8, returning the result.
+     *
+     * @param value
+     *     The URL-encoded string to decode.
+     *
+     * @return
+     *     The decoded string.
+     *
+     * @throws GuacamoleException
+     *     If the provided value is not a value URL-encoded string.","[{'comment': '`is not a valid URL-encoded string`?', 'commenter': 'necouchman'}, {'comment': 'Ah, yep - oops.', 'commenter': 'mike-jumper'}]"
798,guacamole/src/main/java/org/apache/guacamole/rest/auth/HashTokenSessionMap.java,"@@ -209,11 +209,7 @@ public GuacamoleSession get(String authToken) {
             return null;
 
         // Update the last access time and return the GuacamoleSession
-        GuacamoleSession session = sessionMap.get(authToken);
-        if (session != null)
-            session.access();
-
-        return session;
+        return sessionMap.get(authToken);","[{'comment': ""I'm guessing the comment, here, needs to be updated, as well - while it isn't specifically called out, I'm guessing the point is that we no longer want to actually update the session access time when checking the token, because the session has actually been idle?"", 'commenter': 'necouchman'}, {'comment': 'Yep - good catch.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
806,guacamole/src/main/frontend/src/app/clipboard/templates/guacClipboard.html,"@@ -1,4 +1,4 @@
-<div>
+<div id=""clipboard-settings"">","[{'comment': 'The CSS rules added to `clipboard.css` look correct, however this duplicates the ID already present within the menu:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/a25fa1c98235c96c1b0d84904434d2d3ba00e7e5/guacamole/src/main/frontend/src/app/client/templates/client.html#L103-L110', 'commenter': 'mike-jumper'}, {'comment': ""Whoops. I got hyper focused on editing the clipboard directive and didn't check the client's id"", 'commenter': 'aleitner'}]"
809,guacamole/src/main/frontend/src/app/import/directives/connectionImportErrors.js,"@@ -0,0 +1,234 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/* global _ */","[{'comment': '?', 'commenter': 'necouchman'}]"
809,guacamole/src/main/frontend/src/app/import/controllers/importConnectionsController.js,"@@ -0,0 +1,760 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/* global _ */","[{'comment': 'Something new, different, extra?', 'commenter': 'necouchman'}]"
809,doc/licenses/core-util-is-1.0.3/README,"@@ -0,0 +1,7 @@
+core-util-is (https://github.com/isaacs/core-util-is)
+---------------------------------------------
+
+    Version: 1.0.3
+    From: 'isaacs' (https://github.com/isaacs)","[{'comment': 'According to the license, this should be ""Node.js contributors"".', 'commenter': 'mike-jumper'}]"
809,doc/licenses/csv-6.2.5/dep-coordinates.txt,"@@ -0,0 +1,2 @@
+csv:6.2.5
+csv-parse:5.3.3","[{'comment': 'csv-parse v5.3.3 is part of csv v6.2.5?', 'commenter': 'mike-jumper'}, {'comment': 'Yep', 'commenter': 'jmuehlner'}]"
809,doc/licenses/csv-6.2.5/README,"@@ -0,0 +1,7 @@
+node-csv (https://github.com/adaltas/node-csv)
+---------------------------------------------
+
+    Version: 6.2.5
+    From: 'adaltas' (https://github.com/adaltas)","[{'comment': 'This should be ""Adaltas"", apparently the name of a company.', 'commenter': 'mike-jumper'}, {'comment': '> Initial review of just the additional bundled dependency licenses:\r\n> \r\n> * Some of the names of the copyright holders (`From: ...`) need to be corrected to align with the copyright holders declared by the license.\r\n> * Some of the references to `.../LICENSE` need to be corrected to the name of the bundled license file (`.../LICENSE.md`, `.../license.md`, etc.).\r\n\r\nOof, sorry about all the mistakes. These should all be fixed now.', 'commenter': 'jmuehlner'}]"
809,doc/licenses/events-3.3.0/README,"@@ -0,0 +1,7 @@
+events (https://github.com/browserify/events)
+---------------------------------------------
+
+    Version: 3.3.0
+    From: 'browserify' (https://github.com/browserify)","[{'comment': 'According to the license, this should be ""Joyent, Inc. and other Node contributors.""', 'commenter': 'mike-jumper'}]"
809,doc/licenses/ieee754-1.2.1/README,"@@ -0,0 +1,7 @@
+ieee754 (https://github.com/feross/ieee754)
+---------------------------------------------
+
+    Version: 1.2.1
+    From: 'Feross Aboukhadijeh' (https://github.com/feross)","[{'comment': 'According to the license, copyright on this is from ""Fair Oaks Labs, Inc."".', 'commenter': 'mike-jumper'}]"
809,doc/licenses/process-nextick-args-2.0.1/README,"@@ -0,0 +1,8 @@
+process-nextick-args (https://github.com/calvinmetcalf/process-nextick-args)
+---------------------------------------------
+
+    Version: 2.0.1
+    From: 'Calvin Metcalf' (https://github.com/calvinmetcalf)
+    License(s):
+        MIT (bundled/process-nextick-args-2.0.1/LICENSE)","[{'comment': 'The bundled file is actually `license.md`.', 'commenter': 'mike-jumper'}]"
809,doc/licenses/readable-stream-2.3.7/README,"@@ -0,0 +1,8 @@
+readable-stream (https://github.com/nodejs/readable-stream)
+---------------------------------------------
+
+    Version: 2.3.7
+    From: 'Node.js' (https://github.com/nodejs)","[{'comment': 'According to the license, this should be ""Node.js contributors, Joyent, Inc., and other Node contributors"".', 'commenter': 'mike-jumper'}]"
809,doc/licenses/setimmediate-1.0.5/README,"@@ -0,0 +1,8 @@
+setImmediate.js (https://github.com/YuzuJS/setImmediate)
+---------------------------------------------
+
+    Version: 1.0.5
+    From: 'Yuzu (by Barnes & Noble Education)' (https://github.com/YuzuJS)
+    License(s):
+        MIT (bundled/setimmediate-1.0.5/LICENSE)","[{'comment': 'The bundled file is actually `LICENSE.txt`.', 'commenter': 'mike-jumper'}]"
809,doc/licenses/stream-browserify-2.0.2/README,"@@ -0,0 +1,8 @@
+stream-browserify (https://github.com/browserify/stream-browserify)
+---------------------------------------------
+
+    Version: 2.0.2
+    From: 'browserify' (https://github.com/browserify)","[{'comment': 'From the license, this should be ""James Halliday"".', 'commenter': 'mike-jumper'}]"
809,doc/licenses/string_decoder-1.1.1/README,"@@ -0,0 +1,8 @@
+string_decoder (https://github.com/nodejs/string_decoder)
+---------------------------------------------
+
+    Version: 1.1.1
+    From: 'Node.js' (https://github.com/nodejs)","[{'comment': 'According to the license, this should be ""Node.js contributors, Joyent, Inc., and other Node contributors"".', 'commenter': 'mike-jumper'}]"
809,doc/licenses/timers-browserify-2.0.12/README,"@@ -0,0 +1,8 @@
+timers-browserify (https://github.com/browserify/timers-browserify)
+---------------------------------------------
+
+    Version: 2.0.12
+    From: 'browserify' (https://github.com/browserify)","[{'comment': 'According to the license, this should be ""J. Ryan Stinnett"".', 'commenter': 'mike-jumper'}]"
809,doc/licenses/timers-browserify-2.0.12/README,"@@ -0,0 +1,8 @@
+timers-browserify (https://github.com/browserify/timers-browserify)
+---------------------------------------------
+
+    Version: 2.0.12
+    From: 'browserify' (https://github.com/browserify)
+    License(s):
+        MIT (bundled/timers-browserify-2.0.12/LICENSE)","[{'comment': 'The bundled file is actually `LICENSE.md`.', 'commenter': 'mike-jumper'}]"
809,guacamole/src/main/java/org/apache/guacamole/rest/jsonpatch/APIPatchOutcome.java,"@@ -0,0 +1,110 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.rest.jsonpatch;
+
+import org.apache.guacamole.rest.jsonpatch.APIPatch.Operation;
+
+/**
+ * A successful outcome associated with a particular patch within a JSON Patch
+ * request. The outcome contains the operation requested by the original patch,
+ * the path from the original patch, and the identifier of the object corresponding
+ * to the value from the original patch.
+ *
+ * The purpose of this class is to present a relatively lightweight outcome for
+ * the user who submitted the Patch request. Rather than including the full
+ * contents of the value, only the identifier is included, allowing the user to
+ * determine the identifier of any newly-created objects as part of the request.
+ *
+ */
+public class APIPatchOutcome {
+
+    /**
+     * The requested operation for the patch corresponding to this outcome.
+     */
+    private final Operation op;
+
+    /**
+     * The identifier for the value in patch corresponding to this outcome.
+     * If the value in the patch was null, this identifier should also be null.
+     */
+    private String identifier;
+
+    /**
+     * The path for the patch corresponding to this outcome.
+     */
+    private final String path;
+
+    /**
+     * Create an outcome associated with a submitted patch, as part of a JSON
+     * patch API request.
+     *
+     * @param op
+     * @param identifier
+     * @param path","[{'comment': 'Looks like these parameters are missing documentation?', 'commenter': 'necouchman'}]"
809,guacamole/src/main/java/org/apache/guacamole/rest/directory/DirectoryResource.java,"@@ -386,46 +417,210 @@ public Map<String, ExternalType> getObjects(
 
     /**
      * Applies the given object patches, updating the underlying directory
-     * accordingly. This operation currently only supports deletion of objects
-     * through the ""remove"" patch operation. The path of each patch operation is
-     * of the form ""/ID"" where ID is the identifier of the object being
-     * modified.
+     * accordingly. This operation supports addition and removal of objects
+     * through the ""add"" and ""remove"" patch operation. The path of each patch
+     * operation is of the form ""/ID"" where ID is the identifier of the object
+     * being modified. In the case of object creation, the identifier is
+     * ignored, as the identifier will be automatically provided. This operation
+     * is atomic.
      *
      * @param patches
      *     The patches to apply for this request.
      *
      * @throws GuacamoleException
-     *     If an error occurs while deleting the objects.
+     *     If an error occurs while adding, updating, or removing objects.
+     *
+     * @return
+     *     A response describing the outcome of each patch. Only the identifier
+     *     of each patched object will be included in the response, not the
+     *     full object.
      */
     @PATCH
-    public void patchObjects(List<APIPatch<String>> patches)
+    public APIPatchResponse patchObjects(List<APIPatch<ExternalType>> patches)
             throws GuacamoleException {
 
-        // Apply each operation specified within the patch
-        for (APIPatch<String> patch : patches) {
+        // An outcome for each patch included in the request. This list
+        // may include both success and failure responses, though the
+        // presense of any failure would indicated that the entire","[{'comment': 'presense -> presence\r\n\r\n?', 'commenter': 'necouchman'}]"
809,guacamole/src/main/java/org/apache/guacamole/rest/directory/DirectoryResource.java,"@@ -386,46 +417,210 @@ public Map<String, ExternalType> getObjects(
 
     /**
      * Applies the given object patches, updating the underlying directory
-     * accordingly. This operation currently only supports deletion of objects
-     * through the ""remove"" patch operation. The path of each patch operation is
-     * of the form ""/ID"" where ID is the identifier of the object being
-     * modified.
+     * accordingly. This operation supports addition and removal of objects
+     * through the ""add"" and ""remove"" patch operation. The path of each patch
+     * operation is of the form ""/ID"" where ID is the identifier of the object
+     * being modified. In the case of object creation, the identifier is
+     * ignored, as the identifier will be automatically provided. This operation
+     * is atomic.
      *
      * @param patches
      *     The patches to apply for this request.
      *
      * @throws GuacamoleException
-     *     If an error occurs while deleting the objects.
+     *     If an error occurs while adding, updating, or removing objects.
+     *
+     * @return
+     *     A response describing the outcome of each patch. Only the identifier
+     *     of each patched object will be included in the response, not the
+     *     full object.
      */
     @PATCH
-    public void patchObjects(List<APIPatch<String>> patches)
+    public APIPatchResponse patchObjects(List<APIPatch<ExternalType>> patches)
             throws GuacamoleException {
 
-        // Apply each operation specified within the patch
-        for (APIPatch<String> patch : patches) {
+        // An outcome for each patch included in the request. This list
+        // may include both success and failure responses, though the
+        // presense of any failure would indicated that the entire
+        // request has failed and no changes have been made.
+        List<APIPatchOutcome> patchOutcomes = new ArrayList<>();
 
-            // Only remove is supported
-            if (patch.getOp() != APIPatch.Operation.remove)
-                throw new GuacamoleUnsupportedException(""Only the \""remove\"" ""
-                        + ""operation is supported."");
+        // Perform all requested operations atomically
+        directory.tryAtomically(new AtomicDirectoryOperation<InternalType>() {
 
-            // Retrieve and validate path
-            String path = patch.getPath();
-            if (!path.startsWith(""/""))
-                throw new GuacamoleClientException(""Patch paths must start with \""/\""."");
+            @Override
+            public void executeOperation(boolean atomic, Directory<InternalType> directory)
+                    throws GuacamoleException {
+
+                // If the underlying directory implentation does not support
+                // atomic operations, abort the patch operation. This REST
+                // endpoint requires that operations be performed atomically.
+                if (!atomic)
+                    throw new GuacamoleUnsupportedException(
+                            ""Atomic operations are not supported. "" +
+                            ""The patch cannot be executed."");
+
+                // Keep a list of all objects that have been successfully
+                // added or removed
+                Collection<InternalType> addedObjects = new ArrayList<>();
+                Collection<String> removedIdentifiers = new ArrayList<>();
+
+                // A list of all responses associated with the successful
+                // creation of new objects
+                List<APIPatchOutcome> creationSuccesses = new ArrayList<>();
+
+                // True if any operation in the patch failed. Any failure will
+                // fail the request, though won't result in immediate stoppage
+                // since more errors may yet be uncovered.
+                boolean failed = false;
+
+                // Apply each operation specified within the patch
+                for (APIPatch<ExternalType> patch : patches) {
+
+                    // Retrieve and validate path
+                    String path = patch.getPath();
+                    if (!path.startsWith(""/""))
+                        throw new GuacamoleClientException(""Patch paths must start with \""/\""."");
+
+                    if(patch.getOp() == APIPatch.Operation.add) {","[{'comment': 'I hesitate to question this at all, because I know you know what you\'re doing, but i""ll throw a couple of things out there - feel free to ignore them if you\'ve already considered and have reasons for doing this the way you have it written, here...\r\n* Throughout this section, there are multiple calls to `patch.getOp()`. I don\'t know what the cost is in terms of doing that versus assigning the value to a variable and checking throughout this section? Maybe it\'s negligible, and doesn\'t matter, and it makes sense to keep it this way? Or maybe it occupies more memory than it\'s worth and the cost of doing it this way is less than going the variable route?\r\n* I know there are only two operations here (three if you count the catch-all at the end), but any reason to go `if/else` rather than a `switch()` statement?', 'commenter': 'necouchman'}]"
809,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/JDBCDirectory.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.jdbc.base;
+
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.net.auth.AtomicDirectoryOperation;
+import org.apache.guacamole.net.auth.Directory;
+import org.apache.guacamole.net.auth.Identifiable;
+import org.mybatis.guice.transactional.Transactional;
+
+/**
+ * An implementation of Directory that uses database transactions to guarantee
+ * atomicity for any operations supplied to tryAtomically().
+ */","[{'comment': ""Does this implementation, coupled with the fact that it is used elsewhere, mean that all JDBC operations will be attempted atomically? And does that have any potential adverse impacts from a performance perspective, particularly when you have multiple people accessing the Guacamole UI, starting and stopping connections, which will involve DB reads to retrieve connection data and DB writes for history entries, etc.\r\n\r\nSorry if that's a stupid or obvious question..."", 'commenter': 'necouchman'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -5,7 +5,7 @@
     ""APP"" : {
 
         ""NAME""    : ""Apache Guacamole"",
-        ""VERSION"" : ""${project.version}"",
+        ""VERSION"" : ""1.5.0"",","[{'comment': 'Any reason this is being set statically, here?', 'commenter': 'necouchman'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -183,6 +183,79 @@
 
     },
 
+    ""IMPORT"": {
+        
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+
+        ""BUTTON_CANCEL"": ""Cancel"",
+        ""BUTTON_CLEAR"": ""Clear"",
+        ""BUTTON_IMPORT"": ""Import Connections"",
+
+        ""CONNECTIONS_IMPORTED_SUCCESS"": ""{NUMBER} connections imported successfully."",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"": ""Success"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HEADER"": ""Connection Import"",
+
+        ""HELP_HEADER"": ""Connection Import File Format"",
+
+        ""HELP_FILE_TYPE_HEADER"": ""File Types"",
+        ""HELP_FILE_TYPE_DESCRIPTION"" : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created."",
+
+        ""HELP_CSV_HEADER"": ""CSV Format"",
+        ""HELP_CSV_DESCRIPTION"": ""A connection import CSV file has one connection record per row. Each column will specify a connection field. At minimum the connection name and protocol must be specified."",
+        ""HELP_CSV_MORE_DETAILS"": ""The CSV header for each row specifies the connection field. The connection group ID that the connection should be imported into may be directly specified with \""parentIdentifier\"", or the path to the parent group may be specified using \""group\"" as shown below. In most cases, there should be no conflict between fields, but if needed, an \"" (attribute)\"" or \"" (parameter)\"" suffix may be added to disambiguate. Lists of user or user group identifiers must be semicolon-seperated.¹"",
+
+        ""HELP_JSON_HEADER"": ""JSON Format"",
+        ""HELP_JSON_DESCRIPTION"": ""A connection import JSON file is a list of connection objects. At minimum the connection name and protocol must be specified in each connection object."",
+        ""HELP_JSON_MORE_DETAILS"": ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+
+        ""HELP_YAML_HEADER"": ""YAML Format"",
+        ""HELP_YAML_DESCRIPTION"": ""A connection import YAML file is a list of connection objects with exactly the same structure as the JSON format."",
+        
+        ""HELP_SEMICOLON_FOOTNOTE"": ""If present, semicolons can be escaped with a backslash, e.g. \""first\\\\;last\"""",
+
+        ""ERROR_AMBIGUOUS_CSV_HEADER"": 
+            ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
+        ""ERROR_ARRAY_REQUIRED"": 
+            ""The provided file must contain a list of connections"",
+        ""ERROR_DUPLICATE_CSV_HEADER"": 
+            ""Duplicate CSV Header: {HEADER}"",
+        ""ERROR_EMPTY_FILE"": ""The provided file is empty"",
+        ""ERROR_INVALID_CSV_HEADER"": 
+            ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
+        ""ERROR_INVALID_GROUP"": ""No group matching \""{GROUP}\"" found"",
+        ""ERROR_INVALID_FILE_TYPE"": 
+            ""Unsupported file type: \""{TYPE}\"""",
+        ""ERROR_INVALID_USER_IDENTIFIERS"":
+            ""Users not found: {IDENTIFIER_LIST}"",
+        ""ERROR_INVALID_USER_GROUP_IDENTIFIERS"":
+            ""User Groups not found: {IDENTIFIER_LIST}"",
+        ""ERROR_NO_FILE_SUPPLIED"": ""Please select a file to import"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP"":
+            ""Both group and parentIdentifier may be not specified at the same time"",
+        ""ERROR_REQUIRED_PROTOCOL"": 
+            ""No connection protocol found in the provided file"",
+        ""ERROR_REQUIRED_NAME"": 
+            ""No connection name found in the provided file"",
+
+        ""ERROR_FILE_SINGLE_ONLY"": ""Please upload only a single file at a time"",
+
+        ""TABLE_HEADER_NAME"" : ""Name"",
+        ""TABLE_HEADER_PROTOCOL"" : ""Protocol"",
+        ""TABLE_HEADER_ERRORS"" : ""Errors"",
+        ""TABLE_HEADER_ROW_NUMBER"": ""Row #"",
+
+        ""UPLOAD_FILE_TYPES"": ""CSV, JSON, or YAML"",
+        ""UPLOAD_HELP_LINK"": ""View Format Tips"",
+        ""UPLOAD_DROP_TITLE"": ""Drop a File Here"",
+        ""UPLOAD_BROWSE_LINK"": ""Browse for File""
+        
+    },","[{'comment': ""Seems like the style, here, doesn't match the other sections, in a couple of ways:\r\n* Generally things are organized alphabetically, and so `ERROR_` should be between `DIALOG_` and `FIELD_`.\r\n* There are several line breaks here between the key and value pairs."", 'commenter': 'necouchman'}]"
809,guacamole/src/main/java/org/apache/guacamole/rest/APIError.java,"@@ -21,6 +21,8 @@
 
 import java.util.Collection;
 import java.util.Collections;
+import java.util.List;
+","[{'comment': 'Extra line.', 'commenter': 'necouchman'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -183,6 +183,79 @@
 
     },
 
+    ""IMPORT"": {
+        
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+
+        ""BUTTON_CANCEL"": ""Cancel"",
+        ""BUTTON_CLEAR"": ""Clear"",
+        ""BUTTON_IMPORT"": ""Import Connections"",","[{'comment': 'The prefix for actions that may be taken, button or not, is `ACTION_`. Here, for generic actions like ""Cancel"" and ""Clear"", they should be defined at the `APP` level and then referenced.', 'commenter': 'mike-jumper'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -183,6 +183,79 @@
 
     },
 
+    ""IMPORT"": {
+        
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+
+        ""BUTTON_CANCEL"": ""Cancel"",
+        ""BUTTON_CLEAR"": ""Clear"",
+        ""BUTTON_IMPORT"": ""Import Connections"",
+
+        ""CONNECTIONS_IMPORTED_SUCCESS"": ""{NUMBER} connections imported successfully."",","[{'comment': 'You\'ll need to use pluralization here so that ""connection"" vs. ""connections"" is chosen appropriately based on the value of `NUMBER`.', 'commenter': 'mike-jumper'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -183,6 +183,79 @@
 
     },
 
+    ""IMPORT"": {
+        
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+
+        ""BUTTON_CANCEL"": ""Cancel"",
+        ""BUTTON_CLEAR"": ""Clear"",
+        ""BUTTON_IMPORT"": ""Import Connections"",
+
+        ""CONNECTIONS_IMPORTED_SUCCESS"": ""{NUMBER} connections imported successfully."",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"": ""Success"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HEADER"": ""Connection Import"",","[{'comment': 'The name of this key needs to be more specific to the meaning of the string, not just `HEADER`. Assuming this is for a section of a page, the prefix should also be `SECTION_HEADER_`.', 'commenter': 'mike-jumper'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -183,6 +183,79 @@
 
     },
 
+    ""IMPORT"": {
+        
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+
+        ""BUTTON_CANCEL"": ""Cancel"",
+        ""BUTTON_CLEAR"": ""Clear"",
+        ""BUTTON_IMPORT"": ""Import Connections"",
+
+        ""CONNECTIONS_IMPORTED_SUCCESS"": ""{NUMBER} connections imported successfully."",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"": ""Success"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HEADER"": ""Connection Import"",
+
+        ""HELP_HEADER"": ""Connection Import File Format"",","[{'comment': 'Same here - this needs to be more specific to the meaning of the string and use the established translation key prefixes.', 'commenter': 'mike-jumper'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -183,6 +183,79 @@
 
     },
 
+    ""IMPORT"": {
+        
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+
+        ""BUTTON_CANCEL"": ""Cancel"",
+        ""BUTTON_CLEAR"": ""Clear"",
+        ""BUTTON_IMPORT"": ""Import Connections"",
+
+        ""CONNECTIONS_IMPORTED_SUCCESS"": ""{NUMBER} connections imported successfully."",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"": ""Success"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HEADER"": ""Connection Import"",
+
+        ""HELP_HEADER"": ""Connection Import File Format"",
+
+        ""HELP_FILE_TYPE_HEADER"": ""File Types"",","[{'comment': '`SECTION_HEADER_...`?', 'commenter': 'mike-jumper'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -183,6 +183,79 @@
 
     },
 
+    ""IMPORT"": {
+        
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+
+        ""BUTTON_CANCEL"": ""Cancel"",
+        ""BUTTON_CLEAR"": ""Clear"",
+        ""BUTTON_IMPORT"": ""Import Connections"",
+
+        ""CONNECTIONS_IMPORTED_SUCCESS"": ""{NUMBER} connections imported successfully."",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"": ""Success"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HEADER"": ""Connection Import"",
+
+        ""HELP_HEADER"": ""Connection Import File Format"",
+
+        ""HELP_FILE_TYPE_HEADER"": ""File Types"",
+        ""HELP_FILE_TYPE_DESCRIPTION"" : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created."",
+
+        ""HELP_CSV_HEADER"": ""CSV Format"",
+        ""HELP_CSV_DESCRIPTION"": ""A connection import CSV file has one connection record per row. Each column will specify a connection field. At minimum the connection name and protocol must be specified."",
+        ""HELP_CSV_MORE_DETAILS"": ""The CSV header for each row specifies the connection field. The connection group ID that the connection should be imported into may be directly specified with \""parentIdentifier\"", or the path to the parent group may be specified using \""group\"" as shown below. In most cases, there should be no conflict between fields, but if needed, an \"" (attribute)\"" or \"" (parameter)\"" suffix may be added to disambiguate. Lists of user or user group identifiers must be semicolon-seperated.¹"",
+
+        ""HELP_JSON_HEADER"": ""JSON Format"",
+        ""HELP_JSON_DESCRIPTION"": ""A connection import JSON file is a list of connection objects. At minimum the connection name and protocol must be specified in each connection object."",
+        ""HELP_JSON_MORE_DETAILS"": ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+
+        ""HELP_YAML_HEADER"": ""YAML Format"",
+        ""HELP_YAML_DESCRIPTION"": ""A connection import YAML file is a list of connection objects with exactly the same structure as the JSON format."",
+        
+        ""HELP_SEMICOLON_FOOTNOTE"": ""If present, semicolons can be escaped with a backslash, e.g. \""first\\\\;last\"""",
+
+        ""ERROR_AMBIGUOUS_CSV_HEADER"": 
+            ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
+        ""ERROR_ARRAY_REQUIRED"": 
+            ""The provided file must contain a list of connections"",
+        ""ERROR_DUPLICATE_CSV_HEADER"": 
+            ""Duplicate CSV Header: {HEADER}"",
+        ""ERROR_EMPTY_FILE"": ""The provided file is empty"",
+        ""ERROR_INVALID_CSV_HEADER"": 
+            ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
+        ""ERROR_INVALID_GROUP"": ""No group matching \""{GROUP}\"" found"",
+        ""ERROR_INVALID_FILE_TYPE"": 
+            ""Unsupported file type: \""{TYPE}\"""",
+        ""ERROR_INVALID_USER_IDENTIFIERS"":
+            ""Users not found: {IDENTIFIER_LIST}"",
+        ""ERROR_INVALID_USER_GROUP_IDENTIFIERS"":
+            ""User Groups not found: {IDENTIFIER_LIST}"",
+        ""ERROR_NO_FILE_SUPPLIED"": ""Please select a file to import"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP"":
+            ""Both group and parentIdentifier may be not specified at the same time"",
+        ""ERROR_REQUIRED_PROTOCOL"": 
+            ""No connection protocol found in the provided file"",
+        ""ERROR_REQUIRED_NAME"": 
+            ""No connection name found in the provided file"",
+
+        ""ERROR_FILE_SINGLE_ONLY"": ""Please upload only a single file at a time"",
+
+        ""TABLE_HEADER_NAME"" : ""Name"",
+        ""TABLE_HEADER_PROTOCOL"" : ""Protocol"",
+        ""TABLE_HEADER_ERRORS"" : ""Errors"",
+        ""TABLE_HEADER_ROW_NUMBER"": ""Row #"",
+
+        ""UPLOAD_FILE_TYPES"": ""CSV, JSON, or YAML"",
+        ""UPLOAD_HELP_LINK"": ""View Format Tips"",
+        ""UPLOAD_DROP_TITLE"": ""Drop a File Here"",
+        ""UPLOAD_BROWSE_LINK"": ""Browse for File""","[{'comment': 'This is probably an `ACTION_`.', 'commenter': 'mike-jumper'}]"
809,guacamole/src/main/frontend/src/translations/en.json,"@@ -183,6 +183,79 @@
 
     },
 
+    ""IMPORT"": {
+        
+        ""ACTION_ACKNOWLEDGE""          : ""@:APP.ACTION_ACKNOWLEDGE"",
+
+        ""BUTTON_CANCEL"": ""Cancel"",
+        ""BUTTON_CLEAR"": ""Clear"",
+        ""BUTTON_IMPORT"": ""Import Connections"",
+
+        ""CONNECTIONS_IMPORTED_SUCCESS"": ""{NUMBER} connections imported successfully."",
+
+        ""DIALOG_HEADER_ERROR"" : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"": ""Success"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""HEADER"": ""Connection Import"",
+
+        ""HELP_HEADER"": ""Connection Import File Format"",
+
+        ""HELP_FILE_TYPE_HEADER"": ""File Types"",
+        ""HELP_FILE_TYPE_DESCRIPTION"" : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created."",
+
+        ""HELP_CSV_HEADER"": ""CSV Format"",
+        ""HELP_CSV_DESCRIPTION"": ""A connection import CSV file has one connection record per row. Each column will specify a connection field. At minimum the connection name and protocol must be specified."",
+        ""HELP_CSV_MORE_DETAILS"": ""The CSV header for each row specifies the connection field. The connection group ID that the connection should be imported into may be directly specified with \""parentIdentifier\"", or the path to the parent group may be specified using \""group\"" as shown below. In most cases, there should be no conflict between fields, but if needed, an \"" (attribute)\"" or \"" (parameter)\"" suffix may be added to disambiguate. Lists of user or user group identifiers must be semicolon-seperated.¹"",
+
+        ""HELP_JSON_HEADER"": ""JSON Format"",
+        ""HELP_JSON_DESCRIPTION"": ""A connection import JSON file is a list of connection objects. At minimum the connection name and protocol must be specified in each connection object."",
+        ""HELP_JSON_MORE_DETAILS"": ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+
+        ""HELP_YAML_HEADER"": ""YAML Format"",
+        ""HELP_YAML_DESCRIPTION"": ""A connection import YAML file is a list of connection objects with exactly the same structure as the JSON format."",
+        
+        ""HELP_SEMICOLON_FOOTNOTE"": ""If present, semicolons can be escaped with a backslash, e.g. \""first\\\\;last\"""",
+
+        ""ERROR_AMBIGUOUS_CSV_HEADER"": 
+            ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
+        ""ERROR_ARRAY_REQUIRED"": 
+            ""The provided file must contain a list of connections"",
+        ""ERROR_DUPLICATE_CSV_HEADER"": 
+            ""Duplicate CSV Header: {HEADER}"",
+        ""ERROR_EMPTY_FILE"": ""The provided file is empty"",
+        ""ERROR_INVALID_CSV_HEADER"": 
+            ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
+        ""ERROR_INVALID_GROUP"": ""No group matching \""{GROUP}\"" found"",
+        ""ERROR_INVALID_FILE_TYPE"": 
+            ""Unsupported file type: \""{TYPE}\"""",
+        ""ERROR_INVALID_USER_IDENTIFIERS"":
+            ""Users not found: {IDENTIFIER_LIST}"",
+        ""ERROR_INVALID_USER_GROUP_IDENTIFIERS"":
+            ""User Groups not found: {IDENTIFIER_LIST}"",
+        ""ERROR_NO_FILE_SUPPLIED"": ""Please select a file to import"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP"":
+            ""Both group and parentIdentifier may be not specified at the same time"",
+        ""ERROR_REQUIRED_PROTOCOL"": 
+            ""No connection protocol found in the provided file"",
+        ""ERROR_REQUIRED_NAME"": 
+            ""No connection name found in the provided file"",
+
+        ""ERROR_FILE_SINGLE_ONLY"": ""Please upload only a single file at a time"",
+
+        ""TABLE_HEADER_NAME"" : ""Name"",
+        ""TABLE_HEADER_PROTOCOL"" : ""Protocol"",
+        ""TABLE_HEADER_ERRORS"" : ""Errors"",
+        ""TABLE_HEADER_ROW_NUMBER"": ""Row #"",
+
+        ""UPLOAD_FILE_TYPES"": ""CSV, JSON, or YAML"",
+        ""UPLOAD_HELP_LINK"": ""View Format Tips"",
+        ""UPLOAD_DROP_TITLE"": ""Drop a File Here"",","[{'comment': 'This is probably a `HELP_`.', 'commenter': 'mike-jumper'}]"
817,guacamole/src/main/frontend/src/translations/cs.json,"@@ -123,8 +124,10 @@
         ""HELP_MOUSE_MODE_RELATIVE"" : ""Přetažením myši posuňte ukazatel myši a klepněte na tlačítko. Kliknutí nastane v místě ukazatele."",
         ""HELP_SHARE_LINK""          : ""Aktuální připojení je sdíleno a může k němu přistupovat kdokoli s následujícím {LINKS, plural, one{odkazem} other{odkazy}}:"",
 
-        ""INFO_CONNECTION_SHARED"" : ""Toto připojení je nyní sdíleno."",
-        ""INFO_NO_FILE_TRANSFERS"" : ""Žádné přenosy souborů."",
+        ""INFO_ANONYMOUS_USER_COUNT"" : ""Anonymní{COUNT, plural, one{} other{ (#)}}"",
+        ""INFO_CONNECTION_SHARED""    : ""Toto připojení je nyní sdíleno."",
+        ""INFO_NO_FILE_TRANSFERS""    : ""Žádné přenosy souborů."",
+        ""INFO_USER_COUNT""           : ""{USERNAME}{COUNT, plural, one{} other{ (#)}}"",","[{'comment': 'I think you can leave this line out, `INFO_USER_COUNT`, as there is no actual translation going on, here.', 'commenter': 'necouchman'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ModeledDirectoryObjectService.java,"@@ -387,25 +396,36 @@ public Collection<InternalType> retrieveObjects(ModeledAuthenticatedUser user,
             Collection<String> identifiers) throws GuacamoleException {
 
         // Ignore invalid identifiers
-        identifiers = filterIdentifiers(identifiers);
+        List<String> filteredIdentifiers = filterIdentifiers(identifiers);
 
         // Do not query if no identifiers given
-        if (identifiers.isEmpty())
+        if (filteredIdentifiers.isEmpty())
             return Collections.<InternalType>emptyList();
 
-        Collection<ModelType> objects;
+        int batchSize = environment.getDefaultBatchSize();
 
-        // Bypass permission checks if the user is privileged
-        if (user.isPrivileged())
-            objects = getObjectMapper().select(identifiers);
+        Collection<ModelType> allObjects = new ArrayList<>(filteredIdentifiers.size());
+
+        for (int startIndex = 0; startIndex < filteredIdentifiers.size(); startIndex += batchSize) {","[{'comment': ""A comment before this loop would be very handy for reader's to understand what's going on here. There's a lot of dense code that's understandable with some thinking, but at a glance it's not super obvious (at least not to me)."", 'commenter': 'jmuehlner'}, {'comment': ""That said, there's also probably easier ways to do this (splitting a list into chunks). Have a look at https://guava.dev/releases/19.0/api/docs/com/google/common/collect/Lists.html#partition(java.util.List,%20int) for example (the JDBC extensions already include guava as a dependency)."", 'commenter': 'jmuehlner'}, {'comment': 'I switched to a more functional map filter style of code', 'commenter': 'aleitner'}, {'comment': 'I do dig functional-style programming, but this still looks a little overly complex. Did you look into the function I mentioned above? All this IntStream + filter + map stuff looks like it could be replaced by\r\n\r\n```\r\n        Collection<ModelType> allObjects = Lists.partition(filteredIdentifiers, batchSize).stream()\r\n                .flatMap(chunk -> {\r\n                     ...\r\n```\r\n', 'commenter': 'jmuehlner'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/UserDirectory.java,"@@ -21,9 +21,11 @@
 
 
 import com.google.inject.Inject;
+","[{'comment': '?', 'commenter': 'jmuehlner'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/JDBCEnvironment.java,"@@ -67,6 +67,19 @@ public JDBCEnvironment() {
      */
     public abstract int getAbsoluteMaxConnections() throws GuacamoleException;
 
+    /**
+     * Returns the default maximum number of identifiers/parameters to be 
+     * included in a single batch when executing SQL statements.
+     *
+     * @return
+     *     The default maximum number of identifiers/parameters to be included 
+     *     in a single batch.
+     *
+     * @throws GuacamoleException
+     *     If an error occurs while retrieving the property.
+     */
+    public abstract int getDefaultBatchSize() throws GuacamoleException;","[{'comment': 'Is it the default batch size? Or is it just the batch size?', 'commenter': 'mike-jumper'}, {'comment': ""Yeah it's just the batch size"", 'commenter': 'aleitner'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ModeledDirectoryObjectService.java,"@@ -387,26 +398,38 @@ public Collection<InternalType> retrieveObjects(ModeledAuthenticatedUser user,
             Collection<String> identifiers) throws GuacamoleException {
 
         // Ignore invalid identifiers
-        identifiers = filterIdentifiers(identifiers);
+        List<String> filteredIdentifiers = filterIdentifiers(identifiers);
 
         // Do not query if no identifiers given
-        if (identifiers.isEmpty())
+        if (filteredIdentifiers.isEmpty())
             return Collections.<InternalType>emptyList();
 
-        Collection<ModelType> objects;
+        int batchSize = environment.getDefaultBatchSize();
 
-        // Bypass permission checks if the user is privileged
-        if (user.isPrivileged())
-            objects = getObjectMapper().select(identifiers);
+        boolean userIsPrivileged = user.isPrivileged();
+
+        // Process the filteredIdentifiers in batches using IntStream.range and flatMap
+        Collection<ModelType> allObjects = IntStream.range(0, filteredIdentifiers.size())
+                .filter(index -> index % batchSize == 0)","[{'comment': ""While I do like Java's fancy streams, this seems an inefficient way to generate the starting indices of batches. I think we should directly calculate the starting indices rather than doing a brute-force search through all indices."", 'commenter': 'mike-jumper'}, {'comment': '@mike-jumper see also the conversation regarding the use of https://guava.dev/releases/19.0/api/docs/com/google/common/collect/Lists.html#partition(java.util.List,%20int).', 'commenter': 'jmuehlner'}, {'comment': 'Updated to use `Lists.partition`', 'commenter': 'aleitner'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLEnvironment.java,"@@ -104,6 +104,12 @@ public class MySQLEnvironment extends JDBCEnvironment {
      * The default SSL mode for connecting to MySQL servers.
      */
     private final MySQLSSLMode DEFAULT_SSL_MODE = MySQLSSLMode.PREFERRED;
+    
+     /**
+     * The default maximum number of identifiers/parameters to be included in a 
+     * single batch when executing SQL statements.
+     */
+    private static final int DEFAULT_BATCH_SIZE = 2147483647;","[{'comment': 'Is there documentation that might be referenced here that shows `2147483647` is the relevant limit for both MySQL and MariaDB?', 'commenter': 'mike-jumper'}, {'comment': 'It looks like MySQL and MariaDB have a limitation on the maximum size of the SQL query, which is determined by the `max_allowed_packet` system variable. This variable defines the maximum packet size that the server can send or receive. I could change the code to using this value with some calculation to determine a batch size', 'commenter': 'aleitner'}, {'comment': 'The value 2147483647 represents the maximum signed integer value in MySQL and MariaDB, which can be used as the maximum allowed number of parameters in a single SQL query. However, the actual limit might depend on the specific version and configuration of the database system. Instead of referring to the maximum signed integer value, it could be more appropriate to reference the practical limits of MySQL and MariaDB in this context.', 'commenter': 'aleitner'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLEnvironment.java,"@@ -115,6 +115,12 @@ public class PostgreSQLEnvironment extends JDBCEnvironment {
      * The default value to use for SSL mode if none is explicitly configured.
      */
     private final PostgreSQLSSLMode DEFAULT_SSL_MODE = PostgreSQLSSLMode.PREFER;
+    
+    /*
+     * The default maximum number of identifiers/parameters to be included in a 
+     * single batch when executing SQL statements.
+     */
+    private static final int DEFAULT_BATCH_SIZE = 2147483647;","[{'comment': 'Is there documentation that might be referenced here that shows `2147483647` is the relevant limit for PostgreSQL?', 'commenter': 'mike-jumper'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-postgresql/src/main/java/org/apache/guacamole/auth/postgresql/conf/PostgreSQLGuacamoleProperties.java,"@@ -302,5 +302,17 @@ private PostgreSQLGuacamoleProperties() {}
         public String getName() { return ""postgresql-enforce-access-windows-for-active-sessions""; }
 
     };
+    
+    /**
+     * The maximum number of identifiers/parameters to be included in a single batch when
+     * executing SQL statements.
+     */
+    public static final IntegerGuacamoleProperty POSTGRES_BATCH_SIZE =
+            new IntegerGuacamoleProperty() {
+
+        @Override
+        public String getName() { return ""postgres-batch-size""; }
+
+    };","[{'comment': 'Please maintain established naming convention (`postgresql-*` for the property, `POSTGRESQL_*` for the constant).', 'commenter': 'mike-jumper'}, {'comment': 'Updated to be more consistent with naming conventions', 'commenter': 'aleitner'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-sqlserver/src/main/java/org/apache/guacamole/auth/sqlserver/conf/SQLServerEnvironment.java,"@@ -88,6 +88,12 @@ public class SQLServerEnvironment extends JDBCEnvironment {
      */
     public static final SQLServerDriver SQLSERVER_DEFAULT_DRIVER = SQLServerDriver.MICROSOFT_2005;
 
+    /**
+     * The default maximum number of identifiers/parameters to be included in a 
+     * single batch when executing SQL statements.
+     */
+    private static final int DEFAULT_BATCH_SIZE = 1000;","[{'comment': 'Is there documentation that might be referenced here that shows `1000` is the relevant limit for SQL Server?', 'commenter': 'mike-jumper'}]"
821,extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-mysql/src/main/java/org/apache/guacamole/auth/mysql/conf/MySQLEnvironment.java,"@@ -104,6 +104,20 @@ public class MySQLEnvironment extends JDBCEnvironment {
      * The default SSL mode for connecting to MySQL servers.
      */
     private final MySQLSSLMode DEFAULT_SSL_MODE = MySQLSSLMode.PREFERRED;
+    
+    /**
+     * The default maximum number of identifiers/parameters to be included in a 
+     * single batch when executing SQL statements for MySQL and MariaDB.
+     * 
+     * MySQL and MariaDB impose a limit on the maximum size of a query, 
+     * determined by the max_allowed_packet configuration variable. A value of 
+     * 1000 is chosen to accommodate the max_allowed_packet limit without 
+     * exceeding it.
+     *
+     * @see https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet
+     * @see https://mariadb.com/kb/en/server-system-variables/#max_allowed_packet
+     */
+    private static final int BATCH_SIZE = 1000;","[{'comment': 'As the default value for `*-batch-size`, this should be `DEFAULT_BATCH_SIZE`.', 'commenter': 'mike-jumper'}]"
826,guacamole-common-js/karma-ci.conf.js,"@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+module.exports = function(config) {
+  config.set({
+
+    // Discover and run jasmine tests
+    frameworks: ['jasmine'],
+
+    // Pattern matching all javascript source and tests
+    files: [
+      'src/**/*.js'
+    ],
+
+    // Run the tests once and exit
+    singleRun: true,
+
+    // Disable automatic test running on changed files
+    autoWatch: false,
+
+    // Use a headless firefox browser to run the tests
+    browsers: ['FirefoxHeadless'],
+    customLaunchers: {
+      'FirefoxHeadless': {
+        base: 'Firefox',
+        flags: [
+          '-headless'
+        ]
+      }
+    }
+
+  })
+}","[{'comment': 'Please add missing semicolons.', 'commenter': 'mike-jumper'}]"
826,guacamole-docker/bin/build-guacamole.sh,"@@ -43,10 +43,14 @@
 ##     to empty string. Can be set to ""lgpl-extensions"" to e.g. include
 ##     RADIUS authentication extension.
 ##
+## @param MAVEN_ARGUMENTS
+##     Any number of arbitrary extra arguments to be passed to maven.
+##
 
 BUILD_DIR=""$1""
 DESTINATION=""$2""
 BUILD_PROFILE=""$3""
+MAVEN_ARGUMENTS=""$4""","[{'comment': 'I\'m not sure if there is a better way to do this ... as it is you\'d have to invoke it like\r\n`build-guacamole.sh ""/tmp/some-path"" ""/opt/guacamole"" """" -DskipTests=false` if you wanted to not pass anything for `$BUILD_PROFILE`, but still pass something for `$MAVEN_ARGUMENTS` - inserting a dummy argument to pad out the argument count to make sure the maven arguments get to the right place. \r\n\r\nThoughts?', 'commenter': 'jmuehlner'}, {'comment': '`build-guacamole.sh` could leverage environment variables directly, using positional arguments only for `BUILD_DIR` and `DESTINATION`. That would leave us with `BUILD_PROFILE` and `MAVEN_ARGUMENTS` as build arguments that could be defined in the `Dockerfile`.\r\n\r\nGetting rid of `BUILD_PROFILE` and just using `MAVEN_ARGUMENTS` could make sense, too.', 'commenter': 'mike-jumper'}, {'comment': 'Seems reasonable to me.', 'commenter': 'jmuehlner'}]"
826,guacamole-common-js/pom.xml,"@@ -37,6 +37,23 @@
         <relativePath>../</relativePath>
     </parent>
 
+    <properties>
+
+        <!--
+        The location where temporary files should be stored for communicating
+        between karma and firefox. The default location, /tmp, does not work
+        if firefox is installed via snap.
+        -->
+        <firefox.temp.dir>${project.basedir}/.tmp</firefox.temp.dir>","[{'comment': 'I think this should go beneath `${project.build.directory}` instead of within the source tree.', 'commenter': 'mike-jumper'}, {'comment': 'sure', 'commenter': 'jmuehlner'}]"
827,guacamole-common-js/pom.xml,"@@ -114,27 +131,91 @@
                 </executions>
             </plugin>
 
-            <!-- Unit test using Jasmin and PhantomJS -->
+            <!-- Skip tests if configured to do so -->
             <plugin>
-                <groupId>com.github.searls</groupId>
-                <artifactId>jasmine-maven-plugin</artifactId>
-                <version>2.2</version>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>3.0.0</version>
+                <configuration>
+                    <skipTests>${skipTests}</skipTests>
+                </configuration>
+            </plugin>
+
+            <!-- Ensure the firefox temp directory exists -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
                 <executions>","[{'comment': 'Missing `<version>` for this plugin.', 'commenter': 'mike-jumper'}, {'comment': 'Oops - will fix.', 'commenter': 'jmuehlner'}]"
832,guacamole/src/main/frontend/src/app/rest/services/tunnelService.js,"@@ -96,20 +96,18 @@ angular.module('rest').factory('tunnelService', ['$injector',
      *     success.
      */
     service.getProtocol = function getProtocol(tunnel) {
-
-        // Build HTTP parameters set
-        var httpParameters = {
-            token : authenticationService.getCurrentToken()
-        };
-
+        // GUACAMOLE-956: replace http parameter with header | START
         // Retrieve the protocol details of the specified tunnel
         return requestService({
             method  : 'GET',
             url     : 'api/session/tunnels/' + encodeURIComponent(tunnel)
                         + '/protocol',
-            params  : httpParameters
-        });
+            headers: {
+                'Guacamole-Token': authenticationService.getCurrentToken(),
+            }
 
+        });
+        // GUACAMOLE-956: replace http parameter with header | END","[{'comment': ""Please don't bracket your changes in start/end comments noting the JIRA issue. It's better that the changes be just the changes themselves, plus any necessary documentation."", 'commenter': 'mike-jumper'}]"
832,guacamole/src/main/frontend/src/app/rest/services/tunnelService.js,"@@ -96,20 +96,18 @@ angular.module('rest').factory('tunnelService', ['$injector',
      *     success.
      */
     service.getProtocol = function getProtocol(tunnel) {
-
-        // Build HTTP parameters set
-        var httpParameters = {
-            token : authenticationService.getCurrentToken()
-        };
-
+        // GUACAMOLE-956: replace http parameter with header | START
         // Retrieve the protocol details of the specified tunnel
         return requestService({
             method  : 'GET',
             url     : 'api/session/tunnels/' + encodeURIComponent(tunnel)
                         + '/protocol',
-            params  : httpParameters
-        });
+            headers: {
+                'Guacamole-Token': authenticationService.getCurrentToken(),
+            }","[{'comment': 'Instead of manually including the `Guacamole-Token` header, it would be better to call `authenticationService.request()` which adds the header automatically. For example:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/d9bb38eb65dd7e2f5fd1b13fa108d9d19c7cab4a/guacamole/src/main/frontend/src/app/rest/services/tunnelService.js#L78-L81', 'commenter': 'mike-jumper'}, {'comment': '@mike-jumper Thank you so much for all the responses and tips. I have created a Jira for this. Will submit a new PR by following the suggestions. \r\n\r\nBest,\r\nAres', 'commenter': 'aresliharris'}, {'comment': 'Adding the Jira here: https://issues.apache.org/jira/browse/GUACAMOLE-1775', 'commenter': 'aresliharris'}]"
840,guacamole/src/main/frontend/src/app/import/controllers/importConnectionsController.js,"@@ -322,52 +318,6 @@ angular.module('import').controller('importConnectionsController', ['$scope', '$
         return $q.all({ ...userRequests, ...groupRequests });
     }
 
-    // Given a PATCH API response, create an array of patches to delete every
-    // entity created in the original request that generated this response
-    const createDeletionPatches = creationResponse =>","[{'comment': ""I removed all this rollback functionality because:\r\n* It would be very hard / impossible to effectively implement in some cases, like in the case of a connection being removed and then re-added to reset the permissions.\r\n* It would be unlikely to work anyway - if something like a create user or grant permission call fails, it's most likely because of the browser lost connection to the backend, or the backend experienced some sort of error. In that case, the subsequent calls to put things back the way they were wouldn't work anyway."", 'commenter': 'jmuehlner'}]"
840,guacamole/src/main/frontend/src/app/settings/templates/settingsConnections.html,"@@ -10,7 +10,7 @@
         <div class=""action-buttons"">
 
             <a class=""import-connections button""
-                ng-show=""canCreateConnections()""
+                ng-show=""canAdminister()""","[{'comment': 'Changed this to only show for administrators, due to the wide variety of permissions actually required to do the import.', 'commenter': 'jmuehlner'}]"
840,guacamole/src/main/frontend/src/images/question.svg,"@@ -0,0 +1,64 @@
+<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
+<svg
+   width=""64""
+   height=""64""
+   viewBox=""0 0 64 64""
+   version=""1.1""
+   id=""svg10""
+   sodipodi:docname=""question.svg""
+   inkscape:version=""1.1.2 (0a00cf5339, 2022-02-04)""
+   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
+   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
+   xmlns=""http://www.w3.org/2000/svg""
+   xmlns:svg=""http://www.w3.org/2000/svg"">
+  <defs
+     id=""defs14"" />
+  <sodipodi:namedview
+     id=""namedview12""
+     pagecolor=""#ffffff""
+     bordercolor=""#666666""
+     borderopacity=""1.0""
+     inkscape:pageshadow=""2""
+     inkscape:pageopacity=""0.0""
+     inkscape:pagecheckerboard=""0""
+     showgrid=""false""
+     inkscape:zoom=""8""
+     inkscape:cx=""38.5625""
+     inkscape:cy=""31.0625""
+     inkscape:window-width=""2048""
+     inkscape:window-height=""1025""
+     inkscape:window-x=""0""
+     inkscape:window-y=""28""
+     inkscape:window-maximized=""1""
+     inkscape:current-layer=""g8"" />
+  <g
+     style=""stroke-width:1.04766""
+     id=""g8"">
+    <g
+       style=""font-style:normal;font-weight:400;font-size:142.558px;line-height:100%;font-family:Sans;letter-spacing:0;word-spacing:0;fill:#000000;fill-opacity:1;stroke:none;stroke-width:3.20748px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1""
+       id=""g6"">
+      <path
+         d=""m 169.301,354.693 c -60.57527,-41.3594 -30.28763,-20.6797 0,0 z m -0.627,90.839 c -60.15727,-101.91873 -30.07863,-50.95937 0,0 z""
+         style=""font-style:normal;font-variant:normal;font-weight:900;font-stretch:normal;font-size:142.558px;line-height:100%;font-family:Roboto;-inkscape-font-specification:'Roboto Heavy';text-align:center;text-anchor:middle;fill:#000000;stroke-width:3.20748px""
+         transform=""matrix(0.3118,0,0,0.31173,-24.457,-91.229)""
+         aria-label=""!""
+         id=""path4""
+         sodipodi:nodetypes=""cccc"" />
+    </g>
+    <path
+       id=""path2540""
+       style=""fill:#000000""
+       d=""M 32,0.75 A 31.25,31.25 0 0 0 0.75,32 31.25,31.25 0 0 0 32,63.25 31.25,31.25 0 0 0 63.25,32 31.25,31.25 0 0 0 32,0.75 Z m 0,5 A 26.25,26.25 0 0 1 58.25,32 26.25,26.25 0 0 1 32,58.25 26.25,26.25 0 0 1 5.75,32 26.25,26.25 0 0 1 32,5.75 Z"" />
+    <text
+       xml:space=""preserve""
+       style=""font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none""
+       x=""17.083984""
+       y=""52.78125""
+       id=""text4900""><tspan
+         id=""tspan4898""
+         x=""17.083984""
+         y=""52.78125""
+         sodipodi:role=""line""
+         style=""font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:56px;font-family:sans-serif;-inkscape-font-specification:'sans-serif, Normal';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-east-asian:normal"">?</tspan></text>","[{'comment': 'Embedding the ""?"" as actual text will result in this SVG being dependent on the fonts installed on the user\'s system. It should instead be converted to a path.\r\n\r\nI\'d also recommend running it through `svgo` to trim down the size: https://www.npmjs.com/package/svgo', 'commenter': 'mike-jumper'}, {'comment': 'Good call - will do.', 'commenter': 'jmuehlner'}]"
840,guacamole/src/main/frontend/src/translations/en.json,"@@ -200,38 +200,52 @@
         ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",
         ""DIALOG_HEADER_SUCCESS"" : ""Success"",
 
-        ""ERROR_AMBIGUOUS_CSV_HEADER""     : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
-        ""ERROR_AMBIGUOUS_PARENT_GROUP""   : ""Both group and parentIdentifier may be not specified at the same time"",
-        ""ERROR_ARRAY_REQUIRED""           : ""The provided file must contain a list of connections"",
-        ""ERROR_DUPLICATE_CSV_HEADER""     : ""Duplicate CSV Header: {HEADER}"",
-        ""ERROR_EMPTY_FILE""               : ""The provided file is empty"",
-        ""ERROR_INVALID_CSV_HEADER""       : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
-        ""ERROR_INVALID_MIME_TYPE""        : ""Unsupported file type: \""{TYPE}\"""",
-        ""ERROR_DETECTED_INVALID_TYPE""    : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
-        ""ERROR_INVALID_GROUP""            : ""No group matching \""{GROUP}\"" found"",
-        ""ERROR_INVALID_GROUP_IDENTIFIER"" : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
-        ""ERROR_NO_FILE_SUPPLIED""         : ""Please select a file to import"",
-        ""ERROR_PARSE_FAILURE_CSV""        : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_JSON""       : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_YAML""       : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_REQUIRED_NAME""            : ""No connection name found in the provided file"",
-        ""ERROR_REQUIRED_PROTOCOL""        : ""No connection protocol found in the provided file"",
+        ""ERROR_AMBIGUOUS_CSV_HEADER""         : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP""       : ""Both group and parentIdentifier may be not specified at the same time"",
+        ""ERROR_ARRAY_REQUIRED""               : ""The provided file must contain a list of connections"",
+        ""ERROR_DETECTED_INVALID_TYPE""        : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
+        ""ERROR_DUPLICATE_CONNECTION_IN_FILE"" : ""Duplicate connection in file at \""{PATH}\"""",
+        ""ERROR_DUPLICATE_CSV_HEADER""         : ""Duplicate CSV Header: {HEADER}"",
+        ""ERROR_EMPTY_FILE""                   : ""The provided file is empty"",
+        ""ERROR_INVALID_CSV_HEADER""           : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
+        ""ERROR_INVALID_MIME_TYPE""            : ""Unsupported file type: \""{TYPE}\"""",
+        ""ERROR_INVALID_GROUP""                : ""No group matching \""{GROUP}\"" found"",
+        ""ERROR_INVALID_GROUP_IDENTIFIER""     : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
+        ""ERROR_NO_FILE_SUPPLIED""             : ""Please select a file to import"",
+        ""ERROR_PARSE_FAILURE_CSV""            : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_JSON""           : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_YAML""           : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_REJECT_UPDATE_CONNECTION""     : ""Disallowed update to existing connection at \""{PATH}\"""",","[{'comment': 'As written, this makes sense to me only in the context of an update, but:\r\n\r\n* A connection import isn\'t an update unless the ""Replace/Update ..."" box is checked.\r\n* This error doesn\'t occur if the ""Replace/Update"" box is checked.\r\n\r\nAssuming the name can be included, recommend rephrasing to: `""Connection \\""{NAME}\\"" already exists at \\""{PATH}\\"".""`', 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/translations/en.json,"@@ -200,38 +200,52 @@
         ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",
         ""DIALOG_HEADER_SUCCESS"" : ""Success"",
 
-        ""ERROR_AMBIGUOUS_CSV_HEADER""     : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
-        ""ERROR_AMBIGUOUS_PARENT_GROUP""   : ""Both group and parentIdentifier may be not specified at the same time"",
-        ""ERROR_ARRAY_REQUIRED""           : ""The provided file must contain a list of connections"",
-        ""ERROR_DUPLICATE_CSV_HEADER""     : ""Duplicate CSV Header: {HEADER}"",
-        ""ERROR_EMPTY_FILE""               : ""The provided file is empty"",
-        ""ERROR_INVALID_CSV_HEADER""       : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
-        ""ERROR_INVALID_MIME_TYPE""        : ""Unsupported file type: \""{TYPE}\"""",
-        ""ERROR_DETECTED_INVALID_TYPE""    : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
-        ""ERROR_INVALID_GROUP""            : ""No group matching \""{GROUP}\"" found"",
-        ""ERROR_INVALID_GROUP_IDENTIFIER"" : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
-        ""ERROR_NO_FILE_SUPPLIED""         : ""Please select a file to import"",
-        ""ERROR_PARSE_FAILURE_CSV""        : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_JSON""       : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_YAML""       : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_REQUIRED_NAME""            : ""No connection name found in the provided file"",
-        ""ERROR_REQUIRED_PROTOCOL""        : ""No connection protocol found in the provided file"",
+        ""ERROR_AMBIGUOUS_CSV_HEADER""         : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP""       : ""Both group and parentIdentifier may be not specified at the same time"",
+        ""ERROR_ARRAY_REQUIRED""               : ""The provided file must contain a list of connections"",
+        ""ERROR_DETECTED_INVALID_TYPE""        : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
+        ""ERROR_DUPLICATE_CONNECTION_IN_FILE"" : ""Duplicate connection in file at \""{PATH}\"""",
+        ""ERROR_DUPLICATE_CSV_HEADER""         : ""Duplicate CSV Header: {HEADER}"",
+        ""ERROR_EMPTY_FILE""                   : ""The provided file is empty"",
+        ""ERROR_INVALID_CSV_HEADER""           : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
+        ""ERROR_INVALID_MIME_TYPE""            : ""Unsupported file type: \""{TYPE}\"""",
+        ""ERROR_INVALID_GROUP""                : ""No group matching \""{GROUP}\"" found"",
+        ""ERROR_INVALID_GROUP_IDENTIFIER""     : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
+        ""ERROR_NO_FILE_SUPPLIED""             : ""Please select a file to import"",
+        ""ERROR_PARSE_FAILURE_CSV""            : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_JSON""           : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_YAML""           : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_REJECT_UPDATE_CONNECTION""     : ""Disallowed update to existing connection at \""{PATH}\"""",
+        ""ERROR_REQUIRED_NAME""                : ""No connection name found in the provided file"",
+        ""ERROR_REQUIRED_PROTOCOL""            : ""No connection protocol found in the provided file"",
 
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""FIELD_HEADER_REPLACE_CONNECTIONS"" : ""Replace/Update existing connections"",
+        ""FIELD_HEADER_REPLACE_PERMISSIONS"" : ""Reset permissions"",
+
+        ""FIELD_OPTION_DUPLICATE_REPLACE"" : ""Replace duplicates"",
+        ""FIELD_OPTION_DUPLICATE_IGNORE""  : ""Ignore duplicates"",
+        ""FIELD_OPTION_DUPLICATE_ERROR""   : ""Disallow duplicates"",
+
         ""HELP_CSV_DESCRIPTION""              : ""A connection import CSV file has one connection record per row. Each column will specify a connection field. At minimum the connection name and protocol must be specified."",
         ""HELP_CSV_EXAMPLE""                  : ""name,protocol,hostname,group,users,groups,guacd-encryption (attribute)\nconn1,vnc,conn1.web.com,ROOT,guac user 1;guac user 2,Connection 1 Users,none\nconn2,rdp,conn2.web.com,ROOT/Parent Group,guac user 1,,ssl\nconn3,ssh,conn3.web.com,ROOT/Parent Group/Child Group,guac user 2;guac user 3,,\nconn4,kubernetes,,,,,"",
         ""HELP_CSV_MORE_DETAILS""             : ""The CSV header for each row specifies the connection field. The connection group ID that the connection should be imported into may be directly specified with \""parentIdentifier\"", or the path to the parent group may be specified using \""group\"" as shown below. In most cases, there should be no conflict between fields, but if needed, an \"" (attribute)\"" or \"" (parameter)\"" suffix may be added to disambiguate. Lists of user or user group identifiers must be semicolon-separated.¹"",
-        ""HELP_FILE_TYPE_DESCRIPTION""        : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created."",
+        ""HELP_FILE_TYPE_DESCRIPTION""        : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created. Note that any existing connection permissions will not be removed for updated connections."",
         ""HELP_FILE_TYPE_HEADER""             : ""File Types"",
         ""HELP_JSON_DESCRIPTION""             : ""A connection import JSON file is a list of connection objects. At minimum the connection name and protocol must be specified in each connection object."",
         ""HELP_JSON_EXAMPLE""                 : ""[\n  \\{\n    \""name\"": \""conn1\"",\n    \""protocol\"": \""vnc\"",\n    \""parameters\"": \\{ \""hostname\"": \""conn1.web.com\"" \\},\n    \""parentIdentifier\"": \""ROOT\"",\n    \""users\"": [ \""guac user 1\"", \""guac user 2\"" ],\n    \""groups\"": [ \""Connection 1 Users\"" ],\n    \""attributes\"": \\{ \""guacd-encryption\"": \""none\"" \\}\n  \\},\n  \\{\n    \""name\"": \""conn2\"",\n    \""protocol\"": \""rdp\"",\n    \""parameters\"": \\{ \""hostname\"": \""conn2.web.com\"" \\},\n    \""group\"": \""ROOT/Parent Group\"",\n    \""users\"": [ \""guac user 1\"" ],\n    \""attributes\"": \\{ \""guacd-encryption\"": \""none\"" \\}\n  \\},\n  \\{\n    \""name\"": \""conn3\"",\n    \""protocol\"": \""ssh\"",\n    \""parameters\"": \\{ \""hostname\"": \""conn3.web.com\"" \\},\n    \""group\"": \""ROOT/Parent Group/Child Group\"",\n    \""users\"": [ \""guac user 2\"", \""guac user 3\"" ]\n  \\},\n  \\{\n    \""name\"": \""conn4\"",\n    \""protocol\"": \""kubernetes\""\n  \\}\n]"",
-        ""HELP_JSON_MORE_DETAILS""            :  ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+        ""HELP_JSON_MORE_DETAILS""            : ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+        ""HELP_REPLACE_CONNECTION_TITLE""     : ""Replacing existing connections"",
+        ""HELP_REPLACE_CONNECTION_CONTENT""   : ""Checking this box will allow existing connections to be updated, if an imported connection has the same name and parent group as an existing connection. If unchecked, attempts to update existing connections will be treated as an error."",","[{'comment': ""I'd recommend:\r\n\r\n> Entirely replace/update existing connections if their names and parent connection groups match the values in the provided file. If unchecked, attempting to import a connection with the same name and parent connection group of an existing connection will be considered an error."", 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/translations/en.json,"@@ -200,38 +200,52 @@
         ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",
         ""DIALOG_HEADER_SUCCESS"" : ""Success"",
 
-        ""ERROR_AMBIGUOUS_CSV_HEADER""     : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
-        ""ERROR_AMBIGUOUS_PARENT_GROUP""   : ""Both group and parentIdentifier may be not specified at the same time"",
-        ""ERROR_ARRAY_REQUIRED""           : ""The provided file must contain a list of connections"",
-        ""ERROR_DUPLICATE_CSV_HEADER""     : ""Duplicate CSV Header: {HEADER}"",
-        ""ERROR_EMPTY_FILE""               : ""The provided file is empty"",
-        ""ERROR_INVALID_CSV_HEADER""       : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
-        ""ERROR_INVALID_MIME_TYPE""        : ""Unsupported file type: \""{TYPE}\"""",
-        ""ERROR_DETECTED_INVALID_TYPE""    : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
-        ""ERROR_INVALID_GROUP""            : ""No group matching \""{GROUP}\"" found"",
-        ""ERROR_INVALID_GROUP_IDENTIFIER"" : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
-        ""ERROR_NO_FILE_SUPPLIED""         : ""Please select a file to import"",
-        ""ERROR_PARSE_FAILURE_CSV""        : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_JSON""       : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_YAML""       : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_REQUIRED_NAME""            : ""No connection name found in the provided file"",
-        ""ERROR_REQUIRED_PROTOCOL""        : ""No connection protocol found in the provided file"",
+        ""ERROR_AMBIGUOUS_CSV_HEADER""         : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP""       : ""Both group and parentIdentifier may be not specified at the same time"",
+        ""ERROR_ARRAY_REQUIRED""               : ""The provided file must contain a list of connections"",
+        ""ERROR_DETECTED_INVALID_TYPE""        : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
+        ""ERROR_DUPLICATE_CONNECTION_IN_FILE"" : ""Duplicate connection in file at \""{PATH}\"""",
+        ""ERROR_DUPLICATE_CSV_HEADER""         : ""Duplicate CSV Header: {HEADER}"",
+        ""ERROR_EMPTY_FILE""                   : ""The provided file is empty"",
+        ""ERROR_INVALID_CSV_HEADER""           : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
+        ""ERROR_INVALID_MIME_TYPE""            : ""Unsupported file type: \""{TYPE}\"""",
+        ""ERROR_INVALID_GROUP""                : ""No group matching \""{GROUP}\"" found"",
+        ""ERROR_INVALID_GROUP_IDENTIFIER""     : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
+        ""ERROR_NO_FILE_SUPPLIED""             : ""Please select a file to import"",
+        ""ERROR_PARSE_FAILURE_CSV""            : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_JSON""           : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_YAML""           : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_REJECT_UPDATE_CONNECTION""     : ""Disallowed update to existing connection at \""{PATH}\"""",
+        ""ERROR_REQUIRED_NAME""                : ""No connection name found in the provided file"",
+        ""ERROR_REQUIRED_PROTOCOL""            : ""No connection protocol found in the provided file"",
 
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""FIELD_HEADER_REPLACE_CONNECTIONS"" : ""Replace/Update existing connections"",
+        ""FIELD_HEADER_REPLACE_PERMISSIONS"" : ""Reset permissions"",
+
+        ""FIELD_OPTION_DUPLICATE_REPLACE"" : ""Replace duplicates"",
+        ""FIELD_OPTION_DUPLICATE_IGNORE""  : ""Ignore duplicates"",
+        ""FIELD_OPTION_DUPLICATE_ERROR""   : ""Disallow duplicates"",
+
         ""HELP_CSV_DESCRIPTION""              : ""A connection import CSV file has one connection record per row. Each column will specify a connection field. At minimum the connection name and protocol must be specified."",
         ""HELP_CSV_EXAMPLE""                  : ""name,protocol,hostname,group,users,groups,guacd-encryption (attribute)\nconn1,vnc,conn1.web.com,ROOT,guac user 1;guac user 2,Connection 1 Users,none\nconn2,rdp,conn2.web.com,ROOT/Parent Group,guac user 1,,ssl\nconn3,ssh,conn3.web.com,ROOT/Parent Group/Child Group,guac user 2;guac user 3,,\nconn4,kubernetes,,,,,"",
         ""HELP_CSV_MORE_DETAILS""             : ""The CSV header for each row specifies the connection field. The connection group ID that the connection should be imported into may be directly specified with \""parentIdentifier\"", or the path to the parent group may be specified using \""group\"" as shown below. In most cases, there should be no conflict between fields, but if needed, an \"" (attribute)\"" or \"" (parameter)\"" suffix may be added to disambiguate. Lists of user or user group identifiers must be semicolon-separated.¹"",
-        ""HELP_FILE_TYPE_DESCRIPTION""        : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created."",
+        ""HELP_FILE_TYPE_DESCRIPTION""        : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created. Note that any existing connection permissions will not be removed for updated connections."",
         ""HELP_FILE_TYPE_HEADER""             : ""File Types"",
         ""HELP_JSON_DESCRIPTION""             : ""A connection import JSON file is a list of connection objects. At minimum the connection name and protocol must be specified in each connection object."",
         ""HELP_JSON_EXAMPLE""                 : ""[\n  \\{\n    \""name\"": \""conn1\"",\n    \""protocol\"": \""vnc\"",\n    \""parameters\"": \\{ \""hostname\"": \""conn1.web.com\"" \\},\n    \""parentIdentifier\"": \""ROOT\"",\n    \""users\"": [ \""guac user 1\"", \""guac user 2\"" ],\n    \""groups\"": [ \""Connection 1 Users\"" ],\n    \""attributes\"": \\{ \""guacd-encryption\"": \""none\"" \\}\n  \\},\n  \\{\n    \""name\"": \""conn2\"",\n    \""protocol\"": \""rdp\"",\n    \""parameters\"": \\{ \""hostname\"": \""conn2.web.com\"" \\},\n    \""group\"": \""ROOT/Parent Group\"",\n    \""users\"": [ \""guac user 1\"" ],\n    \""attributes\"": \\{ \""guacd-encryption\"": \""none\"" \\}\n  \\},\n  \\{\n    \""name\"": \""conn3\"",\n    \""protocol\"": \""ssh\"",\n    \""parameters\"": \\{ \""hostname\"": \""conn3.web.com\"" \\},\n    \""group\"": \""ROOT/Parent Group/Child Group\"",\n    \""users\"": [ \""guac user 2\"", \""guac user 3\"" ]\n  \\},\n  \\{\n    \""name\"": \""conn4\"",\n    \""protocol\"": \""kubernetes\""\n  \\}\n]"",
-        ""HELP_JSON_MORE_DETAILS""            :  ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+        ""HELP_JSON_MORE_DETAILS""            : ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+        ""HELP_REPLACE_CONNECTION_TITLE""     : ""Replacing existing connections"",
+        ""HELP_REPLACE_CONNECTION_CONTENT""   : ""Checking this box will allow existing connections to be updated, if an imported connection has the same name and parent group as an existing connection. If unchecked, attempts to update existing connections will be treated as an error."",
+        ""HELP_REPLACE_PERMISSION_TITLE""     : ""Replacing connection permissions"",
+        ""HELP_REPLACE_PERMISSION_CONTENT""   : ""If replacement of existing connections is enabled, checking this box will allow full replacement of connection permissions. If checked, access permission will only be granted to users and groups specified in the import file for this connection. If unchecked, specified users and groups will be granted access in addition to any existing permissions."",","[{'comment': ""I'd recommend:\r\n\r\n> Fully reset the permissions granted for all connections in the provided file to the permissions specified in that file. If no permissions are specified, all relevant connection permissions will be revoked. If unchecked, existing permissions are preserved, and any permissions specified in the file will be added."", 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/app/import/controllers/importConnectionsController.js,"@@ -688,9 +637,42 @@ angular.module('import').controller('importConnectionsController', ['$scope', '$
     };
 
     /**
-     * The name of the file that's currently being uploaded, or has yet to
-     * be imported, if any.
+     * Display a modal with the given title and text keys.
+     *
+     * @param {String} titleKey
+     *     The translation key to use for the title of the modal.
+     *
+     * @param {String} contentKey
+     *     The translation key to use for the text contents of the modal.
      */
-    $scope.fileName = null;
+    const showModal = (titleKey, contentKey) => guacNotification.showStatus({
+
+        // The provided modal contents
+        title: titleKey,
+        text: { key: contentKey },
+
+        // Add a button to hide the modal
+        actions    : [{
+            name      : 'IMPORT.ACTION_ACKNOWLEDGE',
+            callback  : () => guacNotification.showStatus(false)
+        }]
+
+    });
+
+    /**
+     * Display a modal with information about the existing connection
+     * replacement option.
+     */
+    $scope.showConnectionReplaceHelp = () => showModal(
+            'IMPORT.HELP_REPLACE_CONNECTION_TITLE',
+            'IMPORT.HELP_REPLACE_CONNECTION_CONTENT');
+
+    /**
+     * Display a modal with information about the existing connection permission
+     * replacement option.
+     */
+    $scope.showPermissionReplaceHelp = () => showModal(
+            'IMPORT.HELP_REPLACE_PERMISSION_TITLE',
+            'IMPORT.HELP_REPLACE_PERMISSION_CONTENT');","[{'comment': 'What about showing this information as a tooltip visible on hover (such as with the `title` attribute), rather than a modal dialog?', 'commenter': 'mike-jumper'}, {'comment': 'Yeah, that works. I was worried that the text might be too much for a tooltip, but it doesn\'t look too bad, actually.\r\n<img width=""1211"" alt=""image"" src=""https://user-images.githubusercontent.com/4633119/233444194-1336de22-e02e-4439-a479-af4790baec32.png"">\r\n', 'commenter': 'jmuehlner'}]"
840,guacamole/src/main/java/org/apache/guacamole/rest/directory/DirectoryResource.java,"@@ -590,7 +591,56 @@ public void executeOperation(boolean atomic, Directory<InternalType> directory)
 
                     }
 
-                    // Append each identifier to the list, to be removed atomically
+                    else if (op == APIPatch.Operation.replace) {
+
+                        // The identifier of the object to be replaced
+                        String identifier = path.substring(1);
+
+                        InternalType original = null;
+
+                        try {
+
+                            // Fetch the object to be updated
+                            original = directory.get(identifier);","[{'comment': '`get()` has its own success/failure event type that should be dispatched separately from `update()`. See:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/05c675bb215111643fc1213f661b07867a98aeb0/guacamole/src/main/java/org/apache/guacamole/rest/directory/DirectoryResource.java#L747-L757', 'commenter': 'mike-jumper'}, {'comment': ""Ok, I've updated it. I think this is the right logic now - if an attempt is made to replace a non-existant object, it will now log both a GET and UPDATE failure event."", 'commenter': 'jmuehlner'}, {'comment': ""If a user attempts to update a single connection via the non-batch REST API, but that connection does not exist, they'll currently get a `GET` failure event but no `UPDATE` failure event (the attempt to update doesn't occur because the retrieval failed). Do you think these changes should match that behavior, or that the REST API changes that are part of GUACAMOLE-1224 should be modified to ensure both are fired?"", 'commenter': 'mike-jumper'}, {'comment': ""Hmm, it seems to me that a failed attempt to update a record (even if it's because it doesn't exist), should trigger an UPDATE failure event. What do you think?"", 'commenter': 'jmuehlner'}, {'comment': ""Yeah, I agree. There'd otherwise be no context for failures in audit logs."", 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/java/org/apache/guacamole/rest/directory/DirectoryResource.java,"@@ -590,7 +591,56 @@ public void executeOperation(boolean atomic, Directory<InternalType> directory)
 
                     }
 
-                    // Append each identifier to the list, to be removed atomically
+                    else if (op == APIPatch.Operation.replace) {
+
+                        // The identifier of the object to be replaced
+                        String identifier = path.substring(1);
+
+                        InternalType original = null;
+
+                        try {
+
+                            // Fetch the object to be updated
+                            original = directory.get(identifier);
+                            
+                            // Apply the changes to the original object
+                            translator.applyExternalChanges(
+                                    original, patch.getValue());
+
+                            // Update the directory
+                            directory.update(original);
+
+                            replacedObjects.add(original);","[{'comment': 'If the requested object does not exist, `original` will be `null` here.', 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/app/import/types/ParseResult.js,"@@ -65,10 +69,19 @@ angular.module('import').factory('ParseResult', [function defineParseResult() {
          */
         this.groups = template.users || {};
 
+        /**
+         * A map of connection index within the patch array, to connection group
+         * path for that connection, of the form ""ROOT/Parent/Child"".
+         *
+         * @type {Object.<String, String>}
+         */
+        this.groupPaths = template.groupPaths || {};
+
         /**
          * An array of errors encountered while parsing the corresponding
-         * connection (at the same array index). Each connection should have a
-         * an array of errors. If empty, no errors occurred for this connection.
+         * connection (at the same array index in the patches array). Each 
+         * connection should have a an array of errors. If empty, no errors","[{'comment': '""a an array"" -> ""an array""', 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/app/import/types/ConnectionImportConfig.js,"@@ -0,0 +1,103 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service which defines the ConnectionImportConfig class.
+ */
+angular.module('import').factory('ConnectionImportConfig', [
+        function defineConnectionImportConfig() {
+
+    /**
+     * A representation of any user-specified configuration when
+     * batch-importing connections.
+     *
+     * @constructor
+     * @param {ConnectionImportConfig|Object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     ConnectionImportConfig.
+     */
+    const ConnectionImportConfig = function ConnectionImportConfig(template) {
+
+        // Use empty object by default
+        template = template || {};
+
+        /**
+         * The mode for handling connections that match existing connections.
+         *
+         * @type ConnectionImportConfig.ReplaceConnectionMode
+         */
+        this.replaceConnectionMode = template.replaceConnectionMode
+                || ConnectionImportConfig.ReplaceConnectionMode.REJECT;
+
+        /**
+         * The mode for handling permissions on existing connections that are
+         * being updated. Only meaningful if the importer is configured to
+         * replace existing connections.
+         *
+         * @type ConnectionImportConfig.ExistingPermissionMode
+         */
+        this.existingPermissionMode = template.existingPermissionMode
+                || ConnectionImportConfig.ExistingPermissionMode.ADD;
+
+    };
+
+    /**
+     * Valid modes for the behavior of the importer when attempts are made to
+     * update existing connections.
+     */
+    ConnectionImportConfig.ReplaceConnectionMode = {
+
+        /**
+         * Any attempt to update existing connections will cause the entire 
+         * import to be rejected with an error.
+         */
+        REJECT : ""REJECT"",
+
+        /**
+         * Replace/update any existing connections.
+         */
+        REPLACE : ""REPLACE""
+
+    };
+
+    /**
+     * Valid modes for the behavior of the importer with respect to connection
+     * permissions when existing connections are being replaced.
+     */
+    ConnectionImportConfig.ExistingPermissionMode = {
+
+        /**
+         * Any new permissions specified in the imported connection will be
+         * added to the existing connection, without removing any existing
+         * permissions.
+         */
+        ADD : ""ADD"",
+
+        /**
+         * Any existing permissions will be removed, ensuring that only the
+         * users or groups specified in the import file will be granted to the
+         * replaced connection after import.
+         */
+        REPLACE : ""REPLACE""","[{'comment': 'Recommend renaming `ADD` to `PRESERVE` so that the mode is consistently worded from the same perspective (an action performed upon existing permissions).\r\n\r\nTo me, `REPLACE` makes sense as an ""existing permission mode"" (we\'re replacing existing permissions), but not `ADD` (we\'re not adding existing permissions).', 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/app/import/types/ConnectionImportConfig.js,"@@ -0,0 +1,103 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service which defines the ConnectionImportConfig class.
+ */
+angular.module('import').factory('ConnectionImportConfig', [
+        function defineConnectionImportConfig() {
+
+    /**
+     * A representation of any user-specified configuration when
+     * batch-importing connections.
+     *
+     * @constructor
+     * @param {ConnectionImportConfig|Object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     ConnectionImportConfig.
+     */
+    const ConnectionImportConfig = function ConnectionImportConfig(template) {
+
+        // Use empty object by default
+        template = template || {};
+
+        /**
+         * The mode for handling connections that match existing connections.
+         *
+         * @type ConnectionImportConfig.ReplaceConnectionMode
+         */
+        this.replaceConnectionMode = template.replaceConnectionMode
+                || ConnectionImportConfig.ReplaceConnectionMode.REJECT;
+
+        /**
+         * The mode for handling permissions on existing connections that are
+         * being updated. Only meaningful if the importer is configured to
+         * replace existing connections.
+         *
+         * @type ConnectionImportConfig.ExistingPermissionMode
+         */
+        this.existingPermissionMode = template.existingPermissionMode
+                || ConnectionImportConfig.ExistingPermissionMode.ADD;
+
+    };
+
+    /**
+     * Valid modes for the behavior of the importer when attempts are made to
+     * update existing connections.
+     */
+    ConnectionImportConfig.ReplaceConnectionMode = {","[{'comment': 'Similar to `ExistingPermissionMode`, I suggest renaming this to `ExistingConnectionMode`.', 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/app/import/types/ConnectionImportConfig.js,"@@ -0,0 +1,103 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service which defines the ConnectionImportConfig class.
+ */
+angular.module('import').factory('ConnectionImportConfig', [
+        function defineConnectionImportConfig() {
+
+    /**
+     * A representation of any user-specified configuration when
+     * batch-importing connections.
+     *
+     * @constructor
+     * @param {ConnectionImportConfig|Object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     ConnectionImportConfig.
+     */
+    const ConnectionImportConfig = function ConnectionImportConfig(template) {
+
+        // Use empty object by default
+        template = template || {};
+
+        /**
+         * The mode for handling connections that match existing connections.
+         *
+         * @type ConnectionImportConfig.ReplaceConnectionMode
+         */
+        this.replaceConnectionMode = template.replaceConnectionMode
+                || ConnectionImportConfig.ReplaceConnectionMode.REJECT;
+
+        /**
+         * The mode for handling permissions on existing connections that are
+         * being updated. Only meaningful if the importer is configured to
+         * replace existing connections.
+         *
+         * @type ConnectionImportConfig.ExistingPermissionMode
+         */
+        this.existingPermissionMode = template.existingPermissionMode
+                || ConnectionImportConfig.ExistingPermissionMode.ADD;
+
+    };
+
+    /**
+     * Valid modes for the behavior of the importer when attempts are made to
+     * update existing connections.","[{'comment': ""I don't think we should presume the intent to update. I suggest:\r\n\r\n> Valid modes for the behavior of the importer when an imported connection already exists."", 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/app/import/types/ConnectionImportConfig.js,"@@ -0,0 +1,103 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Service which defines the ConnectionImportConfig class.
+ */
+angular.module('import').factory('ConnectionImportConfig', [
+        function defineConnectionImportConfig() {
+
+    /**
+     * A representation of any user-specified configuration when
+     * batch-importing connections.
+     *
+     * @constructor
+     * @param {ConnectionImportConfig|Object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     ConnectionImportConfig.
+     */
+    const ConnectionImportConfig = function ConnectionImportConfig(template) {
+
+        // Use empty object by default
+        template = template || {};
+
+        /**
+         * The mode for handling connections that match existing connections.
+         *
+         * @type ConnectionImportConfig.ReplaceConnectionMode
+         */
+        this.replaceConnectionMode = template.replaceConnectionMode
+                || ConnectionImportConfig.ReplaceConnectionMode.REJECT;
+
+        /**
+         * The mode for handling permissions on existing connections that are
+         * being updated. Only meaningful if the importer is configured to
+         * replace existing connections.
+         *
+         * @type ConnectionImportConfig.ExistingPermissionMode
+         */
+        this.existingPermissionMode = template.existingPermissionMode
+                || ConnectionImportConfig.ExistingPermissionMode.ADD;
+
+    };
+
+    /**
+     * Valid modes for the behavior of the importer when attempts are made to
+     * update existing connections.
+     */
+    ConnectionImportConfig.ReplaceConnectionMode = {
+
+        /**
+         * Any attempt to update existing connections will cause the entire 
+         * import to be rejected with an error.","[{'comment': ""Here, too, I don't think we should presume the intent to update. I suggest instead:\r\n\r\n> Connections that have the same name and parent group as an existing connection will cause the entire import to be rejected with an error."", 'commenter': 'mike-jumper'}]"
840,guacamole/src/main/frontend/src/app/import/templates/connectionImport.html,"@@ -38,6 +38,28 @@ <h2>{{'IMPORT.SECTION_HEADER_CONNECTION_IMPORT' | translate}}</h2>
 
         </div>
 
+        <ul class=""import-config"">
+            <li>
+                <input type=""checkbox""
+                    id=""existing-connection-mode"" ng-model=""importConfig.existingConnectionMode""
+                    ng-true-value=""'REPLACE'"" ng-false-value=""'REJECT'"" />
+                <label for=""existing-connection-mode"">
+                    {{'IMPORT.FIELD_HEADER_EXISTING_CONNECTION_MODE' | translate}}
+                </label>
+                <span title=""{{'IMPORT.HELP_EXISTING_CONNECTION_MODE' | translate}}"" class=""help""></span>","[{'comment': 'This should be `ng-attr-title` to avoid there being a point where the attribute is populated with the raw Angular expression. For example:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/165bd413c0ab9c55b0c0e3614fcb829ef5f8ca95/guacamole/src/main/frontend/src/app/player/templates/player.html#L17\r\n\r\nSame below with the other `title` attribute.', 'commenter': 'mike-jumper'}, {'comment': 'Good call! Will do.', 'commenter': 'jmuehlner'}]"
840,guacamole/src/main/frontend/src/translations/en.json,"@@ -200,38 +200,50 @@
         ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",
         ""DIALOG_HEADER_SUCCESS"" : ""Success"",
 
-        ""ERROR_AMBIGUOUS_CSV_HEADER""     : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
-        ""ERROR_AMBIGUOUS_PARENT_GROUP""   : ""Both group and parentIdentifier may be not specified at the same time"",
-        ""ERROR_ARRAY_REQUIRED""           : ""The provided file must contain a list of connections"",
-        ""ERROR_DUPLICATE_CSV_HEADER""     : ""Duplicate CSV Header: {HEADER}"",
-        ""ERROR_EMPTY_FILE""               : ""The provided file is empty"",
-        ""ERROR_INVALID_CSV_HEADER""       : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
-        ""ERROR_INVALID_MIME_TYPE""        : ""Unsupported file type: \""{TYPE}\"""",
-        ""ERROR_DETECTED_INVALID_TYPE""    : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
-        ""ERROR_INVALID_GROUP""            : ""No group matching \""{GROUP}\"" found"",
-        ""ERROR_INVALID_GROUP_IDENTIFIER"" : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
-        ""ERROR_NO_FILE_SUPPLIED""         : ""Please select a file to import"",
-        ""ERROR_PARSE_FAILURE_CSV""        : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_JSON""       : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_YAML""       : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_REQUIRED_NAME""            : ""No connection name found in the provided file"",
-        ""ERROR_REQUIRED_PROTOCOL""        : ""No connection protocol found in the provided file"",
+        ""ERROR_AMBIGUOUS_CSV_HEADER""         : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP""       : ""Both group and parentIdentifier may be not specified at the same time"",
+        ""ERROR_ARRAY_REQUIRED""               : ""The provided file must contain a list of connections"",
+        ""ERROR_DETECTED_INVALID_TYPE""        : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
+        ""ERROR_DUPLICATE_CONNECTION_IN_FILE"" : ""Duplicated connection \""{NAME}\"" at \""{PATH}\"" in import file"",
+        ""ERROR_DUPLICATE_CSV_HEADER""         : ""Duplicate CSV Header: {HEADER}"",
+        ""ERROR_EMPTY_FILE""                   : ""The provided file is empty"",
+        ""ERROR_INVALID_CSV_HEADER""           : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
+        ""ERROR_INVALID_MIME_TYPE""            : ""Unsupported file type: \""{TYPE}\"""",
+        ""ERROR_INVALID_GROUP""                : ""No group matching \""{GROUP}\"" found"",
+        ""ERROR_INVALID_GROUP_IDENTIFIER""     : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
+        ""ERROR_NO_FILE_SUPPLIED""             : ""Please select a file to import"",
+        ""ERROR_PARSE_FAILURE_CSV""            : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_JSON""           : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_YAML""           : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_REJECT_UPDATE_CONNECTION""     : ""Connection \""{NAME}\"" already exists at \""{PATH}\"""",
+        ""ERROR_REQUIRED_NAME""                : ""No connection name found in the provided file"",
+        ""ERROR_REQUIRED_PROTOCOL""            : ""No connection protocol found in the provided file"",
 
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""FIELD_HEADER_EXISTING_CONNECTION_MODE"" : ""Replace/Update existing connections"",
+        ""FIELD_HEADER_EXISTING_PERMISSION_MODE"" : ""Reset permissions"",
+
+        ""FIELD_OPTION_DUPLICATE_REPLACE"" : ""Replace duplicates"",
+        ""FIELD_OPTION_DUPLICATE_IGNORE""  : ""Ignore duplicates"",
+        ""FIELD_OPTION_DUPLICATE_ERROR""   : ""Disallow duplicates"",
+
         ""HELP_CSV_DESCRIPTION""              : ""A connection import CSV file has one connection record per row. Each column will specify a connection field. At minimum the connection name and protocol must be specified."",
         ""HELP_CSV_EXAMPLE""                  : ""name,protocol,hostname,group,users,groups,guacd-encryption (attribute)\nconn1,vnc,conn1.web.com,ROOT,guac user 1;guac user 2,Connection 1 Users,none\nconn2,rdp,conn2.web.com,ROOT/Parent Group,guac user 1,,ssl\nconn3,ssh,conn3.web.com,ROOT/Parent Group/Child Group,guac user 2;guac user 3,,\nconn4,kubernetes,,,,,"",
         ""HELP_CSV_MORE_DETAILS""             : ""The CSV header for each row specifies the connection field. The connection group ID that the connection should be imported into may be directly specified with \""parentIdentifier\"", or the path to the parent group may be specified using \""group\"" as shown below. In most cases, there should be no conflict between fields, but if needed, an \"" (attribute)\"" or \"" (parameter)\"" suffix may be added to disambiguate. Lists of user or user group identifiers must be semicolon-separated.¹"",
-        ""HELP_FILE_TYPE_DESCRIPTION""        : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created."",
+        ""HELP_FILE_TYPE_DESCRIPTION""        : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created. Note that any existing connection permissions will not be removed for updated connections."",","[{'comment': '> ... Note that any existing connection permissions will not be removed for updated connections.\r\n\r\nWe should probably add `unless ""Reset permissions"" is checked`.', 'commenter': 'mike-jumper'}, {'comment': 'Also good call - also will do.', 'commenter': 'jmuehlner'}]"
840,guacamole/src/main/frontend/src/translations/en.json,"@@ -200,38 +200,50 @@
         ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",
         ""DIALOG_HEADER_SUCCESS"" : ""Success"",
 
-        ""ERROR_AMBIGUOUS_CSV_HEADER""     : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
-        ""ERROR_AMBIGUOUS_PARENT_GROUP""   : ""Both group and parentIdentifier may be not specified at the same time"",
-        ""ERROR_ARRAY_REQUIRED""           : ""The provided file must contain a list of connections"",
-        ""ERROR_DUPLICATE_CSV_HEADER""     : ""Duplicate CSV Header: {HEADER}"",
-        ""ERROR_EMPTY_FILE""               : ""The provided file is empty"",
-        ""ERROR_INVALID_CSV_HEADER""       : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
-        ""ERROR_INVALID_MIME_TYPE""        : ""Unsupported file type: \""{TYPE}\"""",
-        ""ERROR_DETECTED_INVALID_TYPE""    : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
-        ""ERROR_INVALID_GROUP""            : ""No group matching \""{GROUP}\"" found"",
-        ""ERROR_INVALID_GROUP_IDENTIFIER"" : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
-        ""ERROR_NO_FILE_SUPPLIED""         : ""Please select a file to import"",
-        ""ERROR_PARSE_FAILURE_CSV""        : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_JSON""       : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_PARSE_FAILURE_YAML""       : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
-        ""ERROR_REQUIRED_NAME""            : ""No connection name found in the provided file"",
-        ""ERROR_REQUIRED_PROTOCOL""        : ""No connection protocol found in the provided file"",
+        ""ERROR_AMBIGUOUS_CSV_HEADER""         : ""Ambiguous CSV Header \""{HEADER}\"" could be either a connection attribute or parameter"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP""       : ""Both group and parentIdentifier may be not specified at the same time"",
+        ""ERROR_ARRAY_REQUIRED""               : ""The provided file must contain a list of connections"",
+        ""ERROR_DETECTED_INVALID_TYPE""        : ""Unsupported file type. Please make sure the file is valid CSV, JSON, or YAML."",
+        ""ERROR_DUPLICATE_CONNECTION_IN_FILE"" : ""Duplicated connection \""{NAME}\"" at \""{PATH}\"" in import file"",
+        ""ERROR_DUPLICATE_CSV_HEADER""         : ""Duplicate CSV Header: {HEADER}"",
+        ""ERROR_EMPTY_FILE""                   : ""The provided file is empty"",
+        ""ERROR_INVALID_CSV_HEADER""           : ""Invalid CSV Header \""{HEADER}\"" is neither an attribute or parameter"",
+        ""ERROR_INVALID_MIME_TYPE""            : ""Unsupported file type: \""{TYPE}\"""",
+        ""ERROR_INVALID_GROUP""                : ""No group matching \""{GROUP}\"" found"",
+        ""ERROR_INVALID_GROUP_IDENTIFIER""     : ""No connection group with identifier \""{IDENTIFIER}\"" found"",
+        ""ERROR_NO_FILE_SUPPLIED""             : ""Please select a file to import"",
+        ""ERROR_PARSE_FAILURE_CSV""            : ""Please make sure your file is valid CSV. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_JSON""           : ""Please make sure your file is valid JSON. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_YAML""           : ""Please make sure your file is valid YAML. Parsing failed with error \""{ERROR}\"". "",
+        ""ERROR_REJECT_UPDATE_CONNECTION""     : ""Connection \""{NAME}\"" already exists at \""{PATH}\"""",
+        ""ERROR_REQUIRED_NAME""                : ""No connection name found in the provided file"",
+        ""ERROR_REQUIRED_PROTOCOL""            : ""No connection protocol found in the provided file"",
 
         ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
 
+        ""FIELD_HEADER_EXISTING_CONNECTION_MODE"" : ""Replace/Update existing connections"",
+        ""FIELD_HEADER_EXISTING_PERMISSION_MODE"" : ""Reset permissions"",
+
+        ""FIELD_OPTION_DUPLICATE_REPLACE"" : ""Replace duplicates"",
+        ""FIELD_OPTION_DUPLICATE_IGNORE""  : ""Ignore duplicates"",
+        ""FIELD_OPTION_DUPLICATE_ERROR""   : ""Disallow duplicates"",","[{'comment': 'Are these values used?', 'commenter': 'mike-jumper'}, {'comment': 'Err... nope', 'commenter': 'jmuehlner'}]"
846,guacamole-ext/src/main/java/org/apache/guacamole/net/auth/AuthenticationProvider.java,"@@ -247,5 +247,42 @@ UserContext redecorate(UserContext decorated, UserContext context,
      * shutting down.
      */
     void shutdown();
+
+    /**
+     * Called when the overall authentication attempt failed, despite a
+     * successful authentication or decoration for this authentication provider.
+     * Implementations may add custom behavior here - by default this method
+     * does not do anything.
+     *
+     * @param authenticatedUser
+     *      The user who successfully authenticated with this authentication
+     *      provider.
+     *
+     * @param credentials
+     *     The credentials which were most recently submitted for the given
+     *     AuthenticatedUser. These are not guaranteed to be the same as the
+     *     credentials associated with the AuthenticatedUser object, which are
+     *     the credentials provided when the user originally authenticated.
+     */
+    default void notifyAuthenticationFailure(
+                AuthenticatedUser authenticatedUser, Credentials credentials) {};
+
+    /**
+     * Called when the overall authentication attempt succeeded.
+     * Implementations may add custom behavior here - by default this method
+     * does not do anything.
+     *
+     * @param authenticatedUser
+     *      The user who successfully authenticated with this authentication
+     *      provider.
+     *
+     * @param credentials
+     *     The credentials which were most recently submitted for the given
+     *     AuthenticatedUser. These are not guaranteed to be the same as the
+     *     credentials associated with the AuthenticatedUser object, which are
+     *     the credentials provided when the user originally authenticated.
+     */
+    default void notifyAuthenticationSuccess(
+                AuthenticatedUser authenticatedUser, Credentials credentials) {};","[{'comment': 'Why this vs. the existing `AuthenticationSuccessEvent` and `AuthenticationFailureEvent`?', 'commenter': 'mike-jumper'}, {'comment': 'Sure, that works. How does this look?', 'commenter': 'jmuehlner'}, {'comment': 'Better, but I meant why not use a `Listener` and the existing auth events vs. adding analogous methods to `AuthenticationProvider`?', 'commenter': 'mike-jumper'}, {'comment': ""I had some ideas when I was first working on this that it was important that failures should only be reported to auth providers that had actually succeeded, but that turned out to not really matter for this feature - and it's pretty easy for auth providers to keep track of that manually if required. \r\n\r\nI've switched over to the standard `Listener` approach now. Much simpler."", 'commenter': 'jmuehlner'}]"
846,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/AuthenticationEventListener.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml;
+
+import com.google.inject.Inject;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.saml.acs.SAMLAuthenticationSessionManager;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationSuccessEvent;
+import org.apache.guacamole.net.event.listener.Listener;
+
+/**
+ * A Listener that will reactivate or invalidate SAML auth sessions depending on
+ * overall auth success or failure.
+ */
+public class AuthenticationEventListener implements Listener {
+
+    /**
+     * Manager of active SAML authentication attempts.
+     *
+     * Requires static injection due to the fact that the webapp just calls the
+     * constructor directly when creating new Listeners. The instances will not
+     * be constructed by guice.
+     */
+    @Inject
+    private static SAMLAuthenticationSessionManager sessionManager;","[{'comment': ""Doing static injection is not my preference, but I think it's better than trying to rig up some sort of system by which the webapp has to figure out the correct way to construct each `Listener` class depending on whether the particular extension would like to construct it via guice or the normal constructor method."", 'commenter': 'jmuehlner'}]"
846,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-base/src/main/java/org/apache/guacamole/auth/sso/AuthenticationSessionManager.java,"@@ -97,9 +149,21 @@ public String generateInvalid() {
      *     value was returned by defer().
      */
     public T resume(String identifier) {
-
         if (identifier != null) {
-            T session = sessions.remove(identifier);
+             T session = sessions.get(identifier);","[{'comment': 'Indentation seems to have gotten wonky here (misaligned by one space).', 'commenter': 'mike-jumper'}]"
846,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-base/src/main/java/org/apache/guacamole/auth/sso/AuthenticationSessionManager.java,"@@ -97,9 +149,21 @@ public String generateInvalid() {
      *     value was returned by defer().
      */
     public T resume(String identifier) {
-
         if (identifier != null) {
-            T session = sessions.remove(identifier);
+             T session = sessions.get(identifier);
+
+            // If this session is already pending, invalidate and return null
+            if (pendingSessions.contains(identifier)) {
+                invalidateSession(identifier);
+                return null;
+            }
+
+            // Otherwise, mark the session as pending. NOTE: Unless explicitly
+            // removed from pending status via a call to reactivateSession(),
+            // the next attempt to resume this session will fail
+            else
+                pendingSessions.add(identifier);","[{'comment': 'Though the underlying collections are threadsafe, this access pattern is not. The intent appears to be that, given two separate calls to `resume(""someValue"")`, the first call succeeds and returns a non-null session while the second call returns `null`, but this may not happen. Consider:\r\n\r\n| Thread 1                                              | Thread 2                      |\r\n| ----------------------------------------------------- | ------------------------------------------------------ |\r\n|`resume(""someValue"")`||\r\n|                                                       | `resume(""someValue"")`                                  |\r\n| `if (identifier != null) {` (true)                    |                              |\r\n|                                                       | `if (identifier != null) {` (true)  |\r\n| `T session = sessions.get(identifier);`               |                                                        |\r\n|                                                       | `T session = sessions.get(identifier);`                |\r\n| `if (pendingSessions.contains(identifier)) {` (false) |                                                        |\r\n|                                                       |  `if (pendingSessions.contains(identifier)) {` (false) |\r\n| `pendingSessions.add(identifier);`                    |  |\r\n|                                                       | `pendingSessions.add(identifier);`                   |\r\n| `if (session != null && session.isValid())` (true)    |  |\r\n|                                                       | `if (session != null && session.isValid())` (true)  |\r\n| `return session;`                                     |  |\r\n|                                                       | `return session;`   |\r\n', 'commenter': 'mike-jumper'}, {'comment': ""Oops, my bad. Yeah that's not going to work. I've updated it and this issue should be fixed now."", 'commenter': 'jmuehlner'}]"
846,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/AuthenticationEventListener.java,"@@ -0,0 +1,70 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.saml;
+
+import com.google.inject.Inject;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.saml.acs.SAMLAuthenticationSessionManager;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationSuccessEvent;
+import org.apache.guacamole.net.event.listener.Listener;
+
+/**
+ * A Listener that will reactivate or invalidate SAML auth sessions depending on
+ * overall auth success or failure.
+ */
+public class AuthenticationEventListener implements Listener {
+
+    /**
+     * Manager of active SAML authentication attempts.
+     *
+     * Requires static injection due to the fact that the webapp just calls the
+     * constructor directly when creating new Listeners. The instances will not
+     * be constructed by guice.
+     */
+    @Inject
+    private static SAMLAuthenticationSessionManager sessionManager;
+
+    @Override
+    public void handleEvent(Object event) throws GuacamoleException {
+
+        if (event instanceof AuthenticationSuccessEvent)
+
+            // After an auth attempt has fully succeeded, invalidate the session
+            // associated with the successful login event so it can't be reused
+            sessionManager.invalidateSession(
+                AuthenticationProviderService.getSessionIdentifier(
+                    ((AuthenticationSuccessEvent) event).getCredentials()));
+
+        else if (event instanceof AuthenticationFailureEvent)
+
+            // If the SSL auth succeeded, but other auth providers failed to
+            // authenticate the user associated with the credentials in this
+            // failure event, they may wish to make another login attempt. To 
+            // avoid an infinite login attempt loop, re-enable the session
+            // associated with these credentials, allowing the auth attempt to be
+            // resumed without requiring another round trip to the SAML provider.
+            sessionManager.reactivateSession(
+                AuthenticationProviderService.getSessionIdentifier(
+                    ((AuthenticationFailureEvent) event).getCredentials()));","[{'comment': ""This should probably only happen for specific exceptions, namely:\r\n\r\n* `GuacamoleInsufficientCredentialsException`\r\n* A `GuacamoleClientException` that isn't a `GuacamoleSecurityException`\r\n\r\nOther failures like `GuacamoleInvalidCredentialsException`, `GuacamoleUnauthorizedException`, or some unknown internal failure, should instead fully invalidate the current flow as they did previously."", 'commenter': 'mike-jumper'}]"
846,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/src/main/java/org/apache/guacamole/auth/saml/AuthenticationProviderService.java,"@@ -69,6 +69,26 @@ public class AuthenticationProviderService implements SSOAuthenticationProviderS
     @Inject
     private SAMLService saml;
 
+    /**
+     * Return the value of the session identifier associated with the given
+     * credentials, or null if no session identifier is found in the
+     * credentials.
+     *
+     * @param credentials The credentials from which to extract the session
+     * identifier.
+     *
+     * @return The session identifier associated with the given credentials, or
+     * null if no identifier is found.","[{'comment': 'Please reformat to match style of other JavaDoc.', 'commenter': 'mike-jumper'}]"
846,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/java/org/apache/guacamole/auth/ssl/AuthenticationEventListener.java,"@@ -0,0 +1,74 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ssl;
+
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.ssl.SSLAuthenticationSessionManager;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationSuccessEvent;
+import org.apache.guacamole.net.event.listener.Listener;
+
+/**
+ * A Listener that will reactivate or invalidate SSL auth sessions depending on
+ * overall auth success or failure.
+ */
+@Singleton
+public class AuthenticationEventListener implements Listener {
+
+    /**
+     * Session manager for generating and maintaining unique tokens to
+     * represent the authentication flow of a user who has only partially
+     * authenticated.
+     *
+     * Requires static injection due to the fact that the webapp just calls the
+     * constructor directly when creating new Listeners. The instances will not
+     * be constructed by guice.
+     */
+    @Inject
+    private static SSLAuthenticationSessionManager sessionManager;
+
+    @Override
+    public void handleEvent(Object event) throws GuacamoleException {
+
+        if (event instanceof AuthenticationSuccessEvent)
+
+            // After an auth attempt has fully succeeded, invalidate the session
+            // associated with the successful login event so it can't be reused
+            sessionManager.invalidateSession(
+                AuthenticationProviderService.getSessionIdentifier(
+                    ((AuthenticationSuccessEvent) event).getCredentials()));
+
+        else if (event instanceof AuthenticationFailureEvent)
+
+            // If the SSL auth succeeded, but other auth providers failed to
+            // authenticate the user associated with the credentials in this
+            // failure event, they may wish to make another login attempt. To
+            // avoid an infinite login attempt loop, re-enable the session
+            // associated with these credentials, allowing the auth attempt to be 
+            // resumed without requiring another round trip to the SSL service.
+            sessionManager.reactivateSession(
+                AuthenticationProviderService.getSessionIdentifier(
+                    ((AuthenticationFailureEvent) event).getCredentials()));
+
+    }
+
+}","[{'comment': 'Could this and the SAML implementation perhaps be brought up into `guacamole-auth-sso-base` as a base class that both implementations might leverage? It looks like they apply the same logic.', 'commenter': 'mike-jumper'}, {'comment': 'Sure, done!', 'commenter': 'jmuehlner'}]"
846,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-ssl/src/main/java/org/apache/guacamole/auth/ssl/AuthenticationEventListener.java,"@@ -0,0 +1,74 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.ssl;
+
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.auth.ssl.SSLAuthenticationSessionManager;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationSuccessEvent;
+import org.apache.guacamole.net.event.listener.Listener;
+
+/**
+ * A Listener that will reactivate or invalidate SSL auth sessions depending on
+ * overall auth success or failure.
+ */
+@Singleton
+public class AuthenticationEventListener implements Listener {
+
+    /**
+     * Session manager for generating and maintaining unique tokens to
+     * represent the authentication flow of a user who has only partially
+     * authenticated.
+     *
+     * Requires static injection due to the fact that the webapp just calls the
+     * constructor directly when creating new Listeners. The instances will not
+     * be constructed by guice.
+     */
+    @Inject
+    private static SSLAuthenticationSessionManager sessionManager;
+
+    @Override
+    public void handleEvent(Object event) throws GuacamoleException {
+
+        if (event instanceof AuthenticationSuccessEvent)
+
+            // After an auth attempt has fully succeeded, invalidate the session
+            // associated with the successful login event so it can't be reused
+            sessionManager.invalidateSession(
+                AuthenticationProviderService.getSessionIdentifier(
+                    ((AuthenticationSuccessEvent) event).getCredentials()));
+
+        else if (event instanceof AuthenticationFailureEvent)
+
+            // If the SSL auth succeeded, but other auth providers failed to
+            // authenticate the user associated with the credentials in this
+            // failure event, they may wish to make another login attempt. To
+            // avoid an infinite login attempt loop, re-enable the session
+            // associated with these credentials, allowing the auth attempt to be 
+            // resumed without requiring another round trip to the SSL service.
+            sessionManager.reactivateSession(
+                AuthenticationProviderService.getSessionIdentifier(
+                    ((AuthenticationFailureEvent) event).getCredentials()));","[{'comment': 'Same here - this should probably only happen for specific exceptions, with other exceptions invalidating the session.', 'commenter': 'mike-jumper'}]"
846,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-base/src/main/java/org/apache/guacamole/auth/sso/SSOAuthenticationEventListener.java,"@@ -0,0 +1,115 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.sso;
+
+import org.apache.guacamole.GuacamoleClientException;
+import org.apache.guacamole.GuacamoleException;
+import org.apache.guacamole.GuacamoleSecurityException;
+import org.apache.guacamole.net.auth.Credentials;
+import org.apache.guacamole.net.auth.credentials.GuacamoleInsufficientCredentialsException;
+import org.apache.guacamole.net.event.AuthenticationFailureEvent;
+import org.apache.guacamole.net.event.AuthenticationRequestReceivedEvent;
+import org.apache.guacamole.net.event.CredentialEvent;
+import org.apache.guacamole.net.event.listener.Listener;
+
+/**
+ * A Listener that will reactivate or invalidate SSO auth sessions depending on
+ * overall auth success or failure.
+ */
+public abstract class SSOAuthenticationEventListener implements Listener {
+
+    @Override
+    public void handleEvent(Object event) throws GuacamoleException {
+
+        // If the authentication attempt is incomplete or credentials cannot be
+        // extracted, there's nothing to do
+        if (event instanceof AuthenticationRequestReceivedEvent
+                || !(event instanceof CredentialEvent))
+            return;
+
+        // Look for a session identifier associated with these credentials
+        String sessionIdentifier = getSessionIdentifier(
+                ((CredentialEvent) event).getCredentials());
+
+        // If no session is associated with these credentials, there's
+        // nothing to do
+        if (sessionIdentifier == null)
+            return;
+
+        // If the SSL auth succeeded, but other auth providers failed to
+        // authenticate the user associated with the credentials in this
+        // failure event, they may wish to make another login attempt. To
+        // avoid an infinite login attempt loop, re-enable the session
+        // associated with these credentials, allowing the auth attempt to be
+        // resumed without requiring another round trip to the SSL service.","[{'comment': 'SSO*?', 'commenter': 'mike-jumper'}, {'comment': 'Oops - fixed!', 'commenter': 'jmuehlner'}]"
849,guacamole/src/main/frontend/src/app/import/services/connectionParseService.js,"@@ -359,81 +369,132 @@ angular.module('import').factory('connectionParseService',
     }
 
     /**
-     * Returns a promise that resolves to a map of all valid protocols to the
-     * boolean value ""true"", i.e. a set of all valid protocols.
+     * Returns a promise that resolves to a map of all valid protocols to a map
+     * of connection parameter names to a map of lower-cased and trimmed option
+     * values for that parameter to the actual valid option value.
+     *
+     * This format is designed for easy retrieval of corrected paramter values","[{'comment': 'parameter*', 'commenter': 'mike-jumper'}]"
849,guacamole/src/main/frontend/src/app/import/services/connectionParseService.js,"@@ -200,7 +200,8 @@ angular.module('import').factory('connectionParseService',
     /**
      * Returns a promise that will resolve to a transformer function that will
      * perform various checks and transforms relating to the connection group
-     * tree heirarchy. It will:
+     * tree heirarchy, pushing any errors into the resolved connection object.","[{'comment': 'hierarchy*', 'commenter': 'mike-jumper'}]"
853,guacamole-common-js/src/main/webapp/modules/Parser.js,"@@ -63,80 +92,135 @@ Guacamole.Parser = function() {
      *
      * @param {!string} packet
      *     The instruction data to receive.
+     *
+     * @param {!boolean} [isBuffer=false]
+     *     Whether the provided data should be treated as an instruction buffer
+     *     that grows continuously. If true, the data provided to receive()
+     *     MUST always start with the data provided to the previous call. If
+     *     false (the default), only the new data should be provided to
+     *     receive(), and previously-received data will automatically be
+     *     buffered by the parser as needed.
      */
-    this.receive = function(packet) {
+    this.receive = function receive(packet, isBuffer) {
 
-        // Truncate buffer as necessary
-        if (start_index > 4096 && element_end >= start_index) {
+        if (isBuffer)
+            buffer = packet;
 
-            buffer = buffer.substring(start_index);
+        else {
 
-            // Reset parse relative to truncation
-            element_end -= start_index;
-            start_index = 0;
+            // Truncate buffer as necessary
+            if (startIndex > 4096 && elementEnd >= startIndex) {","[{'comment': 'Any chance we could get a constant for this magic number?', 'commenter': 'jmuehlner'}, {'comment': ""Sure, I'll add that."", 'commenter': 'mike-jumper'}]"
853,guacamole-common-js/src/main/webapp/modules/Parser.js,"@@ -63,80 +92,135 @@ Guacamole.Parser = function() {
      *
      * @param {!string} packet
      *     The instruction data to receive.
+     *
+     * @param {!boolean} [isBuffer=false]
+     *     Whether the provided data should be treated as an instruction buffer
+     *     that grows continuously. If true, the data provided to receive()
+     *     MUST always start with the data provided to the previous call. If
+     *     false (the default), only the new data should be provided to
+     *     receive(), and previously-received data will automatically be
+     *     buffered by the parser as needed.
      */
-    this.receive = function(packet) {
+    this.receive = function receive(packet, isBuffer) {
 
-        // Truncate buffer as necessary
-        if (start_index > 4096 && element_end >= start_index) {
+        if (isBuffer)
+            buffer = packet;
 
-            buffer = buffer.substring(start_index);
+        else {
 
-            // Reset parse relative to truncation
-            element_end -= start_index;
-            start_index = 0;
+            // Truncate buffer as necessary
+            if (startIndex > 4096 && elementEnd >= startIndex) {
 
-        }
+                buffer = buffer.substring(startIndex);
+
+                // Reset parse relative to truncation
+                elementEnd -= startIndex;
+                startIndex = 0;
 
-        // Append data to buffer
-        buffer += packet;
+            }
+
+            // Append data to buffer ONLY if there is outstanding data present. It
+            // is otherwise much faster to simply parse the received buffer as-is,
+            // and tunnel implementations can take advantage of this by preferring
+            // to send only complete instructions. Both the HTTP and WebSocket
+            // tunnel implementations included with Guacamole already do this.
+            if (buffer.length)
+                buffer += packet;
+            else
+                buffer = packet;
+
+        }
 
         // While search is within currently received data
-        while (element_end < buffer.length) {
+        while (elementEnd < buffer.length) {
 
             // If we are waiting for element data
-            if (element_end >= start_index) {
+            if (elementEnd >= startIndex) {
+
+                // If we have enough data in the buffer to fill the element
+                // value, but the number of codepoints in the expected substring
+                // containing the element value value is less that its declared
+                // length, that can only be because the element contains
+                // characters split between high and low surrogates, and the
+                // actual end of the element value is further out. The minimum
+                // number of additional characters that must be read to satisfy
+                // the declared length is simply the difference between the
+                // number of codepoints actually present vs. the expected
+                // length.
+                var codepoints = Guacamole.Parser.codePointCount(buffer, startIndex, elementEnd);
+                if (codepoints < elementCodepoints) {
+                    elementEnd += elementCodepoints - codepoints;
+                    continue;
+                }
+
+                // If the current element ends with a character involving both
+                // a high and low surrogate, elementEnd points to the low
+                // surrogate and NOT the element terminator. We must shift the
+                // end and reevaluate.
+                else if (elementCodepoints && buffer.codePointAt(elementEnd - 1) >= 0x10000) {","[{'comment': ""A constant would be nice for this number `0x10000` as well. I'm sure you're well familiar with what it means, but I'm less familiar with UTF8, and don't."", 'commenter': 'jmuehlner'}, {'comment': ""Sure, I'll add that, too. This value is actually not relevant to UTF-8, but UTF-16 - it's the cutoff for characters requiring surrogate pairs."", 'commenter': 'mike-jumper'}]"
853,guacamole-common-js/src/main/webapp/modules/Parser.js,"@@ -63,80 +92,135 @@ Guacamole.Parser = function() {
      *
      * @param {!string} packet
      *     The instruction data to receive.
+     *
+     * @param {!boolean} [isBuffer=false]
+     *     Whether the provided data should be treated as an instruction buffer
+     *     that grows continuously. If true, the data provided to receive()
+     *     MUST always start with the data provided to the previous call. If
+     *     false (the default), only the new data should be provided to
+     *     receive(), and previously-received data will automatically be
+     *     buffered by the parser as needed.
      */
-    this.receive = function(packet) {
+    this.receive = function receive(packet, isBuffer) {
 
-        // Truncate buffer as necessary
-        if (start_index > 4096 && element_end >= start_index) {
+        if (isBuffer)
+            buffer = packet;
 
-            buffer = buffer.substring(start_index);
+        else {
 
-            // Reset parse relative to truncation
-            element_end -= start_index;
-            start_index = 0;
+            // Truncate buffer as necessary
+            if (startIndex > 4096 && elementEnd >= startIndex) {
 
-        }
+                buffer = buffer.substring(startIndex);
+
+                // Reset parse relative to truncation
+                elementEnd -= startIndex;
+                startIndex = 0;
 
-        // Append data to buffer
-        buffer += packet;
+            }
+
+            // Append data to buffer ONLY if there is outstanding data present. It
+            // is otherwise much faster to simply parse the received buffer as-is,
+            // and tunnel implementations can take advantage of this by preferring
+            // to send only complete instructions. Both the HTTP and WebSocket
+            // tunnel implementations included with Guacamole already do this.
+            if (buffer.length)
+                buffer += packet;
+            else
+                buffer = packet;
+
+        }
 
         // While search is within currently received data
-        while (element_end < buffer.length) {
+        while (elementEnd < buffer.length) {
 
             // If we are waiting for element data
-            if (element_end >= start_index) {
+            if (elementEnd >= startIndex) {
+
+                // If we have enough data in the buffer to fill the element
+                // value, but the number of codepoints in the expected substring
+                // containing the element value value is less that its declared
+                // length, that can only be because the element contains
+                // characters split between high and low surrogates, and the
+                // actual end of the element value is further out. The minimum
+                // number of additional characters that must be read to satisfy
+                // the declared length is simply the difference between the
+                // number of codepoints actually present vs. the expected
+                // length.
+                var codepoints = Guacamole.Parser.codePointCount(buffer, startIndex, elementEnd);
+                if (codepoints < elementCodepoints) {
+                    elementEnd += elementCodepoints - codepoints;
+                    continue;
+                }
+
+                // If the current element ends with a character involving both
+                // a high and low surrogate, elementEnd points to the low
+                // surrogate and NOT the element terminator. We must shift the
+                // end and reevaluate.
+                else if (elementCodepoints && buffer.codePointAt(elementEnd - 1) >= 0x10000) {
+                    elementEnd++;
+                    continue;
+                }
 
                 // We now have enough data for the element. Parse.
-                var element = buffer.substring(start_index, element_end);
-                var terminator = buffer.substring(element_end, element_end+1);
+                var element = buffer.substring(startIndex, elementEnd);
+                var terminator = buffer.substring(elementEnd, elementEnd+1);
 
                 // Add element to array
-                element_buffer.push(element);
+                elementBuffer.push(element);
 
                 // If last element, handle instruction
-                if (terminator == "";"") {
+                if (terminator === ';') {
 
                     // Get opcode
-                    var opcode = element_buffer.shift();
+                    var opcode = elementBuffer.shift();
 
                     // Call instruction handler.
-                    if (parser.oninstruction != null)
-                        parser.oninstruction(opcode, element_buffer);
+                    if (parser.oninstruction !== null)
+                        parser.oninstruction(opcode, elementBuffer);
 
                     // Clear elements
-                    element_buffer.length = 0;
+                    elementBuffer = [];
+
+                    // Immediately truncate buffer if its contents have been
+                    // completely parsed, so that the next call to receive()
+                    // need not append to the buffer unnecessarily
+                    if (elementEnd + 1 === buffer.length) {
+                        elementEnd = -1;
+                        buffer = '';
+                    }
 
                 }
-                else if (terminator != ',')
-                    throw new Error(""Illegal terminator."");
+                else if (terminator !== ',')
+                    throw new Error('Element terminator of instruction was not "";"" nor "","".');
 
                 // Start searching for length at character after
                 // element terminator
-                start_index = element_end + 1;
+                startIndex = elementEnd + 1;
 
             }
 
             // Search for end of length
-            var length_end = buffer.indexOf(""."", start_index);
-            if (length_end != -1) {
+            var lengthEnd = buffer.indexOf('.', startIndex);
+            if (lengthEnd !== -1) {
 
                 // Parse length
-                var length = parseInt(buffer.substring(element_end+1, length_end));
-                if (isNaN(length))
-                    throw new Error(""Non-numeric character in element length."");
+                elementCodepoints = parseInt(buffer.substring(elementEnd+1, lengthEnd));","[{'comment': 'To match existing code style, there should probably be a space between the `+` operator and its operands here.', 'commenter': 'jmuehlner'}]"
853,guacamole-common-js/src/main/webapp/modules/Parser.js,"@@ -157,3 +241,74 @@ Guacamole.Parser = function() {
     this.oninstruction = null;
 
 };
+
+/**
+ * Returns the number of Unicode codepoints (not code units) within the given
+ * string. If character offsets are provided, only codepoints between those
+ * offsets are counted. Unlike the length property of a string, this function
+ * counts proper surrogate pairs as a single codepoint. High and low surrogate
+ * characters that are not part of a proper surrogate pair are counted
+ * separately as individual codepoints.
+ *
+ * @param {!string} str
+ *     The string whose contents should be inspected.
+ *
+ * @param {number} [start=0]
+ *     The index of the location in the given string where codepoint counting
+ *     should start. If omitted, counting will begin at the start of the
+ *     string.
+ *
+ * @param {number} [end]
+ *     The index of the first location in the given string after where counting
+ *     should stop (the character after the last character being counted). If
+ *     omitted, all characters after the start location will be counted.
+ *
+ * @returns {!number}
+ *     The number of Unicode codepoints within the requested portion of the
+ *     given string.
+ */
+Guacamole.Parser.codePointCount = function codePointCount(str, start, end) {
+    str = str.substring(start || 0, end);
+    var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g);","[{'comment': 'A quick comment (or commented constant) on what this regex is doing would be cool.', 'commenter': 'jmuehlner'}]"
853,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -546,14 +520,36 @@ Guacamole.HTTPTunnel = function(tunnelURL, crossDomain, extraTunnelHeaders) {
 
         var dataUpdateEvents = 0;
 
-        // The location of the last element's terminator
-        var elementEnd = -1;
+        var parser = new Guacamole.Parser();
+        parser.oninstruction = function instructionReceived(opcode, args) {
 
-        // Where to start the next length search or the next element
-        var startIndex = 0;
+            // Switch to next request end-of-stream is signalled","[{'comment': ""I think there's a word missing in this comment."", 'commenter': 'jmuehlner'}]"
853,guacamole-common-js/src/main/webapp/modules/Parser.js,"@@ -22,39 +22,91 @@ var Guacamole = Guacamole || {};
 /**
  * Simple Guacamole protocol parser that invokes an oninstruction event when
  * full instructions are available from data received via receive().
- * 
+ *
  * @constructor
  */
-Guacamole.Parser = function() {
+Guacamole.Parser = function Parser() {
 
     /**
      * Reference to this parser.
+     *
      * @private
+     * @type {!Guacamole.Parser}
      */
     var parser = this;
 
     /**
      * Current buffer of received data. This buffer grows until a full
      * element is available. After a full element is available, that element
      * is flushed into the element buffer.
-     * 
+     *
      * @private
+     * @type {!string}
      */
-    var buffer = """";
+    var buffer = '';
 
     /**
      * Buffer of all received, complete elements. After an entire instruction
      * is read, this buffer is flushed, and a new instruction begins.
-     * 
+     *
+     * @private
+     * @type {!string[]}
+     */
+    var elementBuffer = [];
+
+    /**
+     * The character offset within the buffer of the current or most recently
+     * parsed element's terminator. If sufficient characters have not yet been
+     * read via calls to receive(), this may point to an offset well beyond the
+     * end of the buffer. If no characters for an element have yet been read,
+     * this will be -1.
+     *
+     * @private
+     * @type {!number}
+     */
+    var elementEnd = -1;
+
+    /**
+     * The character offset within the buffer of the location that the parser
+     * should start looking for the next element length search or next element
+     * value.
+     *
+     * @private
+     * @type {!number}
+     */
+    var startIndex = 0;
+
+    /**
+     * The declared length of the current element being parsed, in Unicode
+     * codepoints.
+     *
      * @private
+     * @type {!number}
      */
-    var element_buffer = [];
+    var elementCodepoints = 0;
 
-    // The location of the last element's terminator
-    var element_end = -1;
+    /**
+     * The number of parsed characters that must accumulate in the begining of
+     * the parse buffer before processing time is expended to truncate that
+     * buffer and conserve memory.
+     *
+     * @private
+     * @constant
+     * @type {!number}
+     */
+    var BUFFER_TRUNCATION_THRESHOLD = 4096;","[{'comment': 'Consider using `const` for constants.', 'commenter': 'jmuehlner'}, {'comment': ""Unfortunately, so long as we continue to support IE, we can't do that within guacamole-common-js unless the build system is migrated to something that will compile to older JS.\r\n\r\nWe could do this if we migrate guacamole-common-js to the same build system and plugins used by the webapp."", 'commenter': 'mike-jumper'}, {'comment': 'Ah right right IE. Definitely not worth migrating the build system for just this.', 'commenter': 'jmuehlner'}]"
853,guacamole-common-js/src/main/webapp/modules/Tunnel.js,"@@ -823,6 +749,8 @@ Guacamole.WebSocketTunnel = function(tunnelURL) {
      */
     var tunnel = this;
 
+    var parser = null;","[{'comment': 'Guessing this should get some documentation?', 'commenter': 'necouchman'}, {'comment': 'Oops - yes, definitely.', 'commenter': 'mike-jumper'}, {'comment': 'Fixed via rebase.', 'commenter': 'mike-jumper'}]"
883,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -139,22 +146,60 @@ Guacamole.SessionRecording = function SessionRecording(source) {
     var currentFrame = -1;
 
     /**
-     * The timestamp of the frame when playback began, in milliseconds. If
-     * playback is not in progress, this will be null.
+     * True if the player is currently playing, or false otherwise.
      *
      * @private
-     * @type {number}
+     * @type {boolean}
+     */
+    var currentlyPlaying = null;
+
+    /**
+     * The current position within the recording, in milliseconds.
+     *
+     * @private
+     * @type {!number}
+     */
+    var currentPosition = 0;
+
+    /**
+     * Updates the position of the recording if it's playing, incrementing the
+     * value by the provided refreshInterval, and calling the onseek handler
+     * with the new value, if a handler was was provided.
      */
-    var startVideoTimestamp = null;
+    function refreshPosition() {","[{'comment': 'I originally implemented this with the interval happening in the recording player in the angular app (`player.js` below) but it was a mess. Having to keep multiple different sources of truth led to a lot of potential inconsistency, with issues like the interval advancing the position in the player past the start of the next frame, leading to a jittering progress bar.\r\n\r\nKeeping the source of truth inside the recording itself allows for easy checking to make sure that the position monotonically increases during playback, with no weird behavior.', 'commenter': 'jmuehlner'}]"
883,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -684,14 +766,13 @@ Guacamole.SessionRecording = function SessionRecording(source) {
             // Pull the upcoming frame
             var next = frames[currentFrame + 1];
 
-            // Calculate the real timestamp corresponding to when the next
-            // frame begins
-            var nextRealTimestamp = next.timestamp - startVideoTimestamp + startRealTimestamp;
+            // Add the offset to the next frame timestamp to calculate the delay
+            var delay = toRelativeTimestamp(next.timestamp) - currentPosition;","[{'comment': 'Might we be able to avoid `refreshIntervalExecutor` entirely by using `refreshInterval` as the upper bound for `delay` here?', 'commenter': 'mike-jumper'}, {'comment': ""So to be clear - you're suggesting that we modify `seekToFrame` to either advance to the next frame _or_ increment `currentPosition` depending on whether `currentPosition + refreshInterval` >= the timestamp of the next frame? \r\n\r\nI think that could make sense. Let me see if it's simpler than what I have now."", 'commenter': 'jmuehlner'}, {'comment': 'Or rather, not the `seekToFrame` function itself, but perhaps a wrapper function here.', 'commenter': 'jmuehlner'}, {'comment': 'Ok, how does this look?', 'commenter': 'jmuehlner'}, {'comment': ""> So to be clear - you're suggesting that we modify `seekToFrame` to either advance to the next frame _or_ increment `currentPosition` depending on whether `currentPosition + refreshInterval` >= the timestamp of the next frame?\r\n\r\nMore or less. My thinking was:\r\n\r\n* The core issue is that the previous code scheduled the next seek based on the frame duration, which can be significantly longer than one second.\r\n* Part of these changes is ensuring we can reliably seek to any position, even between frames.\r\n* We might be able to achieve the desired effect by ensuring the delay until next seek is bounded at the refresh interval, even if that seek would be mid-frame.\r\n\r\nI'd think that would mean we'd have to:\r\n\r\n1. Calculate the timestamp of the nearest whole multiple-of-`refreshInterval`.\r\n2. If the next frame is before that, easy - seek to _that_.\r\n3. If not, seek to the calculated timestamp.\r\n\r\nThat way we are guaranteed to be updated every `refreshInterval` relative to playback position, not relative to a local timer."", 'commenter': 'mike-jumper'}, {'comment': ""How do my latest changes look? That's more or less what I'm doing, though I didn't do do the multiple-of-`refreshInterval` thing, I just seek to the next `refreshInterval`, or the next frame, whichever is sooner."", 'commenter': 'jmuehlner'}, {'comment': '~This change seems to have caused some weird jumping effects on pause/resume. Drafting while I investigate.~\r\nProblem fixed - undrafted. ', 'commenter': 'jmuehlner'}, {'comment': '> How do my latest changes look? That\'s more or less what I\'m doing, though I didn\'t do do the multiple-of-`refreshInterval` thing, I just seek to the next `refreshInterval`, or the next frame, whichever is sooner.\r\n\r\nI think you might need to round down to the nearest multiple-of-`refreshInterval`. Seeking to the next `refreshInterval` would be relative to the current position, which may not be correct. For example (timestamps below are relative to start of recording):\r\n\r\n1. Frame at 0ms. Player shows ""00:00"".\r\n2. Frame at 400ms. Player shows ""00:00"".\r\n3. Frame at 10000ms. Player waits until current position + `refreshInterval`, showing ""00:01"" at 1400ms.\r\n\r\nHere, the player took 1.4 seconds of playback before the visible timestamp progressed from ""00:00"" to ""00:01"". If this sort of issue occurred multiple times in the recording, it would appear to the user as a jittering playback timestamp, incrementing at inconsistent intervals.\r\n\r\nWith rounding down to the nearest multiple of `refreshInterval`, we instead get:\r\n\r\n1. Frame at 0ms. Player shows ""00:00"".\r\n2. Frame at 400ms. Player shows ""00:00"".\r\n3. Frame at 10000ms. Player waits until the nearest multiple of `refreshInterval`, showing ""00:01"" at 1000ms.', 'commenter': 'mike-jumper'}, {'comment': 'Ok, how does this look?', 'commenter': 'jmuehlner'}]"
883,extensions/guacamole-history-recording-storage/src/main/java/org/apache/guacamole/history/connection/HistoryConnectionRecord.java,"@@ -131,7 +131,9 @@ public HistoryConnectionRecord(ConnectionRecord record) throws GuacamoleExceptio
      */
     private boolean isSessionRecording(File file) {
 
-        try (Reader reader = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8)) {","[{'comment': ""Ok, so apparently this try-with-resources language feature doesn't handle exceptions very well. I had a garbage recording in my recording storage, causing the `readInstruction()` call below to throw a distinctly unfriendly error:\r\n```\r\n17:32:58.156 [http-nio-8080-exec-2] ERROR o.a.g.rest.RESTExceptionMapper - Unexpected internal error: Self-suppression not permitted\r\n17:32:58.161 [http-nio-8080-exec-2] DEBUG o.a.g.rest.RESTExceptionMapper - Unexpected error in REST endpoint.\r\njava.lang.IllegalArgumentException: Self-suppression not permitted\r\n\tat java.base/java.lang.Throwable.addSuppressed(Throwable.java:1054)\r\n\tat org.apache.guacamole.history.connection.HistoryConnectionRecord.isSessionRecording(HistoryConnectionRecord.java:140)\r\n\tat org.apache.guacamole.history.connection.HistoryConnectionRecord.getType(HistoryConnectionRecord.java:201)\r\n\t\r\n[ snipped many lines for readability ]\r\n\r\nCaused by: org.apache.guacamole.GuacamoleServerException: Non-numeric character in element length.\r\n\tat org.apache.guacamole.io.ReaderGuacamoleReader.read(ReaderGuacamoleReader.java:157)\r\n\tat org.apache.guacamole.io.ReaderGuacamoleReader.readInstruction(ReaderGuacamoleReader.java:195)\r\n\tat org.apache.guacamole.history.connection.HistoryConnectionRecord.isSessionRecording(HistoryConnectionRecord.java:137)\r\n\t... 64 common frames omitted\r\n```\r\n\r\nThis is related to the suppressed exceptions discussed here https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html#suppressed-exceptions.\r\n\r\nI don't fully understand exactly what makes the `GuacamoleServerException` a self-suppressed exception, and why that's not permitted, but in any case, going back to this more traditional approach solves the problem. \r\n\r\nI now get a sensible debug message in the logs about the problem with the recording and the page loads fine, as expected."", 'commenter': 'jmuehlner'}]"
883,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -32,8 +32,13 @@ var Guacamole = Guacamole || {};
  * @param {!Blob|Guacamole.Tunnel} source
  *     The Blob from which the instructions of the recording should
  *     be read.
+ * @param {number} refreshInterval
+ *     The minimum number of milliseconds between updates to the recording
+ *     position through the provided onseek() callback. If non-positive, this
+ *     parameter will be ignored, and the recording position will only be
+ *     updated when seek requests are made, or when new frames are rendered.","[{'comment': 'What are your thoughts on defaulting `refreshInterval` to 1000?', 'commenter': 'mike-jumper'}, {'comment': 'Sure, fine by me.', 'commenter': 'jmuehlner'}]"
883,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -32,8 +32,18 @@ var Guacamole = Guacamole || {};
  * @param {!Blob|Guacamole.Tunnel} source
  *     The Blob from which the instructions of the recording should
  *     be read.
+ * @param {number} refreshInterval
+ *     The minimum number of milliseconds between updates to the recording
+ *     position through the provided onseek() callback. If non-positive, this
+ *     parameter will be ignored, and the recording position will only be
+ *     updated when seek requests are made, or when new frames are rendered.
+ *     If not specified, refreshInterval will default to 1000 milliseconds.","[{'comment': 'The notation for an optional parameter with a default value would be:\r\n\r\n```\r\n@param {number} [refreshInterval=1000]\r\n```', 'commenter': 'mike-jumper'}]"
883,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -211,6 +219,22 @@ Guacamole.SessionRecording = function SessionRecording(source) {
      */
     var seekCallback = null;
 
+    /**
+     * Any current timeout associated with scheduling frame replay, or updating
+     * the current position, or null if no frame position increment is currently
+     * scheduled.
+     *
+     * @private
+     * @type {number}
+     */
+    var updateTimeout = null;
+
+    /**
+     * The browser timestamp of the last time that currentPosition was updated
+     * while playing, or null if the recording is not currently playing.
+     */
+    var lastUpdateTimestamp = null;","[{'comment': 'This should be annotated `@private` and with its proper `@type`.', 'commenter': 'mike-jumper'}]"
883,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -678,20 +727,62 @@ Guacamole.SessionRecording = function SessionRecording(source) {
      */
     var continuePlayback = function continuePlayback() {
 
+        // Do not continue playback if the recording is paused
+        if (!recording.isPlaying())
+            return;
+
         // If frames remain after advancing, schedule next frame
         if (currentFrame + 1 < frames.length) {
 
             // Pull the upcoming frame
             var next = frames[currentFrame + 1];
 
-            // Calculate the real timestamp corresponding to when the next
-            // frame begins
-            var nextRealTimestamp = next.timestamp - startVideoTimestamp + startRealTimestamp;
+            // The position at which the next frame should be rendered
+            var nextFramePosition = toRelativeTimestamp(next.timestamp);","[{'comment': 'The calculation of the next timestamp based the amount of real time that passed since playback started was intended to correct for timing error that may accumulate if frames take longer to render than when the recording was made. For example, if a series of 100 frames took 10ms each when recorded, but are taking 20ms in the browser currently playing that recording back, that ~1 second of original time will take ~2 seconds to play back and will offset the rest of the recording unless steps are taken to correct this on the fly.\r\n\r\nThere is also occasional scheduling error due purely to inaccuracy in JS timer events, and corrective steps need to be taken to prevent that error from accumulating to the point that the recording is significantly delayed.\r\n\r\nIt looks to me like the new code will schedule frame rendering based purely on the positions of the frames, without taking delays due to processing into account. Am I missing something?', 'commenter': 'mike-jumper'}, {'comment': ""Oops, yeah I did indeed remove that. It was unclear at the time why it was needed, but that makes sense. I'll put it back."", 'commenter': 'jmuehlner'}, {'comment': 'Ok, how does this look?', 'commenter': 'jmuehlner'}, {'comment': 'Looks good!', 'commenter': 'mike-jumper'}]"
884,extensions/guacamole-auth-sso/modules/guacamole-auth-sso-saml/pom.xml,"@@ -74,6 +74,23 @@
             <groupId>com.onelogin</groupId>
             <artifactId>java-saml</artifactId>
             <version>2.9.0</version>
+            <!--
+                Replace vulnerable version of Woodstox until upstream
+                releases a version with fixed dependencies
+            -->
+            <exclusions>
+                <exclusion>
+                    <groupId>com.fasterxml.woodstox</groupId>
+                    <artifactId>woodstox-core</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+
+        <!-- Woodstox -->
+        <dependency>
+            <groupId>com.fasterxml.woodstox</groupId>
+            <artifactId>woodstox-core</artifactId>
+            <version>5.4.0</version>","[{'comment': 'Was this change thoroughly tested to make sure that the SAML library functions as expected with this dependency being swapped out from under it?', 'commenter': 'necouchman'}, {'comment': 'I built a simple container environment including a SAML Identity Provider (Keycloak) and was still able to perform a login.\r\n\r\nJust to be clear: I am far away from being an expert. So any advice on getting this done the right way is highly appreciated.', 'commenter': 'Inperpetuammemoriam'}, {'comment': 'I believe the upstream SAML library corrected this by updating their version of xmlsec, and the change there is minimal:\r\n\r\nhttps://github.com/SAML-Toolkits/java-saml/pull/377\r\n\r\nWe could do that instead of overriding Woodstox, and trust that the change is equivalent to what java-saml has done but not released.', 'commenter': 'mike-jumper'}, {'comment': ""Correct me, if I'm wrong: Would updating xmlsec to 2.3.0 not also mean to update woodstox-core to 6.2.6? That seems to be an even bigger change.\r\n\r\nThe version 6.2.6 of woodstox-core furthermore contains the following vulnerabilities that version 5.4.0 does not:\r\n- CVE-2022-40156\r\n- CVE-2022-40155\r\n- CVE-2022-40154\r\n- CVE-2022-40153\r\n- CVE-2022-40152"", 'commenter': 'Inperpetuammemoriam'}, {'comment': ""Oof, yeah - good catch and never mind. Bigger change is not necessarily bad for a dependency we don't directly use ourselves (presumably the library using it has already tested their own compatibility), but we definitely don't want to pull in new issues."", 'commenter': 'mike-jumper'}]"
885,extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/RequestValidationService.java,"@@ -45,6 +45,10 @@ public class RequestValidationService {
     @Inject
     private ConfigurationService confService;
 
+    public RequestValidationService(ConfigurationService confService) {","[{'comment': 'Please document (all functions must have corresponding JavaDoc).', 'commenter': 'mike-jumper'}, {'comment': 'Ok', 'commenter': 'Inperpetuammemoriam'}]"
885,extensions/guacamole-auth-json/src/test/java/org/apache/guacamole/auth/json/RequestValidationServiceTest.java,"@@ -0,0 +1,375 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json;
+
+import java.io.BufferedReader;
+import java.security.Principal;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.Locale;
+import java.util.Map;
+import java.util.regex.Pattern;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+import javax.servlet.ServletInputStream;
+import javax.servlet.RequestDispatcher;
+import org.junit.Test;
+import static org.junit.Assert.*;
+
+/**
+ * Unit test for RequestValidationService. Verifies that only requests
+ * from trusted hosts are allowed to authenticate.
+ */
+public class RequestValidationServiceTest {
+
+    private class MockConfigurationService extends ConfigurationService {
+
+        private Collection<String> trustedNetworks;
+
+        public MockConfigurationService() {
+            trustedNetworks = Collections.<String>emptyList();
+        }
+
+        public MockConfigurationService(String trustedNetworks) {
+            this.trustedNetworks = Arrays.asList(Pattern.compile("",\\s*"").split(trustedNetworks));
+        }
+
+        public Collection<String> getTrustedNetworks() {
+            return trustedNetworks;
+        }
+
+    }
+
+    private RequestValidationService requestService;
+
+    private static HttpServletRequest mockHttpServletRequest(String remoteAddr) {","[{'comment': 'Please document (all functions, classes, and member variables need corresponding JavaDoc, except for functions whose documentation is inherited from a superclass).', 'commenter': 'mike-jumper'}, {'comment': 'Does the exception also include methods from an interface?', 'commenter': 'Inperpetuammemoriam'}, {'comment': ""Yep. You don't need to worry about anything that is already JavaDoc'd and inherited from some other level."", 'commenter': 'mike-jumper'}, {'comment': 'Ok. The documentation should then now be complete.', 'commenter': 'Inperpetuammemoriam'}]"
885,extensions/guacamole-auth-json/src/test/java/org/apache/guacamole/auth/json/RequestValidationServiceTest.java,"@@ -0,0 +1,375 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json;
+
+import java.io.BufferedReader;
+import java.security.Principal;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.Locale;
+import java.util.Map;
+import java.util.regex.Pattern;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+import javax.servlet.ServletInputStream;
+import javax.servlet.RequestDispatcher;
+import org.junit.Test;
+import static org.junit.Assert.*;
+
+/**
+ * Unit test for RequestValidationService. Verifies that only requests
+ * from trusted hosts are allowed to authenticate.
+ */
+public class RequestValidationServiceTest {
+
+    private class MockConfigurationService extends ConfigurationService {
+
+        private Collection<String> trustedNetworks;
+
+        public MockConfigurationService() {
+            trustedNetworks = Collections.<String>emptyList();
+        }
+
+        public MockConfigurationService(String trustedNetworks) {
+            this.trustedNetworks = Arrays.asList(Pattern.compile("",\\s*"").split(trustedNetworks));
+        }
+
+        public Collection<String> getTrustedNetworks() {
+            return trustedNetworks;
+        }","[{'comment': 'Inherited and overridden functions should be annotated with `@Override`.', 'commenter': 'mike-jumper'}, {'comment': 'Ok', 'commenter': 'Inperpetuammemoriam'}]"
885,extensions/guacamole-auth-json/src/test/java/org/apache/guacamole/auth/json/RequestValidationServiceTest.java,"@@ -0,0 +1,375 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json;
+
+import java.io.BufferedReader;
+import java.security.Principal;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.Locale;
+import java.util.Map;
+import java.util.regex.Pattern;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+import javax.servlet.ServletInputStream;
+import javax.servlet.RequestDispatcher;
+import org.junit.Test;
+import static org.junit.Assert.*;
+
+/**
+ * Unit test for RequestValidationService. Verifies that only requests
+ * from trusted hosts are allowed to authenticate.
+ */
+public class RequestValidationServiceTest {
+
+    private class MockConfigurationService extends ConfigurationService {
+
+        private Collection<String> trustedNetworks;
+
+        public MockConfigurationService() {
+            trustedNetworks = Collections.<String>emptyList();
+        }
+
+        public MockConfigurationService(String trustedNetworks) {
+            this.trustedNetworks = Arrays.asList(Pattern.compile("",\\s*"").split(trustedNetworks));
+        }
+
+        public Collection<String> getTrustedNetworks() {
+            return trustedNetworks;
+        }
+
+    }
+
+    private RequestValidationService requestService;
+
+    private static HttpServletRequest mockHttpServletRequest(String remoteAddr) {
+
+        return new HttpServletRequest() {
+
+            public Object getAttribute(String name) {
+                return null;
+            }","[{'comment': 'Here and elsewhere: `@Override` should be used for any function that overrides/implements a function from a superclass or interface.', 'commenter': 'mike-jumper'}, {'comment': 'Ok', 'commenter': 'Inperpetuammemoriam'}]"
885,extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/RequestValidationService.java,"@@ -77,23 +81,18 @@ public boolean isAuthenticationAllowed(HttpServletRequest request) {
             return true;
         }
 
-        // Build matchers for each trusted network
-        Collection<IpAddressMatcher> matchers = new ArrayList<>(trustedNetworks.size());
-        for (String network : trustedNetworks)
-            matchers.add(new IpAddressMatcher(network));
-
-        // Otherwise ensure at least one subnet matches
-        for (IpAddressMatcher matcher : matchers) {
+        // Otherwise ensure that the remote address is part of a trusted network
+        for (String network : trustedNetworks) {
 
             // Request is allowed if any subnet matches
-            if (matcher.matches(request)) {
+            if (new IPAddressString(network).contains(new IPAddressString(request.getRemoteAddr()))) {
                 logger.debug(""Authentication request from \""{}\"" is ALLOWED (matched subnet)."", request.getRemoteAddr());
                 return true;
             }
 
         }
 
-        // Otherwise request is denied - no subnets matched
+        // Otherwise request is denied","[{'comment': 'Is this not correct?', 'commenter': 'mike-jumper'}, {'comment': ""Yes, it still is. I'm going to revert this."", 'commenter': 'Inperpetuammemoriam'}]"
885,extensions/guacamole-auth-json/src/test/java/org/apache/guacamole/auth/json/RequestValidationServiceTest.java,"@@ -0,0 +1,375 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.guacamole.auth.json;
+
+import java.io.BufferedReader;
+import java.security.Principal;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.Locale;
+import java.util.Map;
+import java.util.regex.Pattern;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+import javax.servlet.ServletInputStream;
+import javax.servlet.RequestDispatcher;
+import org.junit.Test;
+import static org.junit.Assert.*;
+
+/**
+ * Unit test for RequestValidationService. Verifies that only requests
+ * from trusted hosts are allowed to authenticate.
+ */
+public class RequestValidationServiceTest {
+
+    private class MockConfigurationService extends ConfigurationService {
+
+        private Collection<String> trustedNetworks;
+
+        public MockConfigurationService() {
+            trustedNetworks = Collections.<String>emptyList();
+        }
+
+        public MockConfigurationService(String trustedNetworks) {
+            this.trustedNetworks = Arrays.asList(Pattern.compile("",\\s*"").split(trustedNetworks));
+        }","[{'comment': ""I'm OK with this as-is, but I suggest instead covering both these cases with just: `String... trustedNetworks`."", 'commenter': 'mike-jumper'}, {'comment': 'Could you please be a little more specific. Do you mean that I should make use of just a single constructor?', 'commenter': 'Inperpetuammemoriam'}, {'comment': ""Yep. Reading through this, it occurred to me that what you have here is equivalent to:\r\n\r\n```java\r\npublic MockConfigurationService(String... trustedNetworks) {\r\n    this.trustedNetworks = Arrays.asList(trustedNetworks);\r\n}\r\n```\r\n\r\nwith the added benefit that you don't need to rely on string splitting."", 'commenter': 'mike-jumper'}, {'comment': ""> Yep. Reading through this, it occurred to me that what you have here is equivalent to:\r\n> \r\n> ```java\r\n> public MockConfigurationService(String... trustedNetworks) {\r\n>     this.trustedNetworks = Arrays.asList(trustedNetworks);\r\n> }\r\n> ```\r\n> \r\n> with the added benefit that you don't need to rely on string splitting.\r\n\r\nUnfortunately, I cannot confirm that."", 'commenter': 'Inperpetuammemoriam'}]"
885,doc/licenses/spring-framework-3.0.5/README,,"[{'comment': 'This is actually used by the (rather unmaintained) JRadius library, which is pulled in only if building of extensions with LGPL-licensed dependencies is enabled via:\r\n\r\n```\r\nmvn -Plgpl-extensions package\r\n```\r\n\r\nBuilding with the above will result in the following error:\r\n\r\n```\r\nProcessing runtime dependencies to produce LICENSE and NOTICE. Output will be within ""/home/mjumper/apache/guacamole/guacamole-client/extensions/guacamole-auth-radius/target/licenses"".\r\nERROR: License information missing for org.springframework:spring-context:jar:3.0.5.RELEASE\r\nERROR: License information missing for org.springframework:spring-aop:jar:3.0.5.RELEASE\r\nERROR: License information missing for org.springframework:spring-beans:jar:3.0.5.RELEASE\r\nERROR: License information missing for org.springframework:spring-core:jar:3.0.5.RELEASE\r\nERROR: License information missing for org.springframework:spring-expression:jar:3.0.5.RELEASE\r\nERROR: License information missing for org.springframework:spring-asm:jar:3.0.5.RELEASE\r\n[ERROR] Command execution failed.\r\norg.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1)\r\n```', 'commenter': 'mike-jumper'}, {'comment': ""My bad! I didn't see that. I will revert this change."", 'commenter': 'Inperpetuammemoriam'}]"
887,guacamole-common-js/src/main/webapp/modules/Keyboard.js,"@@ -456,7 +460,7 @@ Guacamole.Keyboard = function Keyboard(element) {
         ""Again"": [0xFF66],
         ""AllCandidates"": [0xFF3D],
         ""Alphanumeric"": [0xFF30],
-        ""Alt"": [0xFFE9, 0xFFE9, 0xFE03],
+        ""Alt"": [0xFFE9, 0xFFE9, 0xFEEA],","[{'comment': 'This should be `0xFFEA`.', 'commenter': 'mike-jumper'}, {'comment': 'Oops, sure should. Odd that it seemed to work correctly in all my testing like this...', 'commenter': 'jmuehlner'}]"
894,doc/licenses/fuzzysort-2.0.4/README,"@@ -0,0 +1,8 @@
+fuzzysort (https://github.com/farzher/fuzzysort/tree/master)
+---------------------------------------------
+
+    Version: 2.0.4
+    From: 'farzher' (https://github.com/farzher)","[{'comment': ""This should be:\r\n\r\n```\r\nFrom: 'Stephen Kamenar' (https://github.com/farzher)\r\n```"", 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -872,6 +911,19 @@ Guacamole.SessionRecording = function SessionRecording(source, refreshInterval)
      */
     this.onpause = null;
 
+    /**
+     * Fired whenever a new batch of typed text extracted from key events
+     * is available.
+     *
+     * @event
+     * @param {!String} text
+     *     The typed text associated with the batch of text.
+     *
+     * @param {!number} timestamp
+     *     The relative timestamp associated with the batch of text.
+     */
+    this.onText = null;","[{'comment': 'In keeping with the style of other events, this should be `ontext`.', 'commenter': 'mike-jumper'}]"
894,guacamole/src/main/frontend/src/app/player/directives/textView.js,"@@ -0,0 +1,172 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/*
+ * NOTE: This session recording player implementation is based on the Session
+ * Recording Player for Glyptodon Enterprise which is available at
+ * https://github.com/glyptodon/glyptodon-enterprise-player under the
+ * following license:
+ *
+ * Copyright (C) 2019 Glyptodon, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the ""Software""), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */","[{'comment': ""Does this file come from https://github.com/glyptodon/glyptodon-enterprise-player? The original player implementation did, but I don't recall this being part of that."", 'commenter': 'mike-jumper'}, {'comment': 'Oops, no.', 'commenter': 'jmuehlner'}]"
894,guacamole/src/main/frontend/src/app/player/directives/player.js,"@@ -161,56 +182,36 @@ angular.module('player').directive('guacPlayer', ['$injector', function guacPlay
         var resumeAfterSeekRequest = false;
 
         /**
-         * Formats the given number as a decimal string, adding leading zeroes
-         * such that the string contains at least two digits. The given number
-         * MUST NOT be negative.
-         *
-         * @param {!number} value
-         *     The number to format.
+         * Return true if any batches of key event logs are available for this
+         * recording, or false otherwise.
          *
-         * @returns {!string}
-         *     The decimal string representation of the given value, padded
-         *     with leading zeroes up to a minimum length of two digits.
+         * @return
+         *     True if any batches of key event logs are avaiable for this
+         *     recording, or false otherwise.
+         */
+        $scope.hasTextBatches = function hasTextBatches () {
+            return $scope.textBatches.length >= 0;
+        };
+
+        /**
+         * Toggle the visibility of the text key log viewer.
          */
-        const zeroPad = function zeroPad(value) {
-            return value > 9 ? value : '0' + value;
+        $scope.toggleKeyLogView = function toggleKeyLogView() {
+            $scope.showKeyLog = !$scope.showKeyLog;
         };
 
         /**
-         * Formats the given quantity of milliseconds as days, hours, minutes,
-         * and whole seconds, separated by colons (DD:HH:MM:SS). Hours are
-         * included only if the quantity is at least one hour, and days are
-         * included only if the quantity is at least one day. All included
-         * groups are zero-padded to two digits with the exception of the
-         * left-most group.
+         * Convert the given quantity of milliseconds into a human readable
+         * format, deferring to the time service for the implementation.
          *
          * @param {!number} value
          *     The time to format, in milliseconds.
          *
          * @returns {!string}
-         *     The given quantity of milliseconds formatted as ""DD:HH:MM:SS"".
+         *     A human readable string representing the provided number of
+         *     milliseconds.
          */","[{'comment': 'Can just annotate:\r\n\r\n```js\r\n/**\r\n * @borrows playerTimeService.formatTime\r\n */\r\n```\r\n\r\nrather than copy the docs verbatim.', 'commenter': 'mike-jumper'}]"
894,guacamole/src/main/frontend/src/app/player/directives/textView.js,"@@ -0,0 +1,172 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/*
+ * NOTE: This session recording player implementation is based on the Session
+ * Recording Player for Glyptodon Enterprise which is available at
+ * https://github.com/glyptodon/glyptodon-enterprise-player under the
+ * following license:
+ *
+ * Copyright (C) 2019 Glyptodon, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the ""Software""), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+const fuzzysort = require('fuzzysort')
+
+/**
+ * Directive which plays back session recordings.
+ */
+angular.module('player').directive('guacPlayerTextView',
+        ['$injector', function guacPlayer($injector) {
+
+    // Required types
+    const TextBatch = $injector.get('TextBatch');
+
+    // Required services
+    const playerTimeService = $injector.get('playerTimeService');
+
+    const config = {
+        restrict : 'E',
+        templateUrl : 'app/player/templates/textView.html'
+    };
+
+    config.scope = {
+
+        /**
+         * All the batches of text extracted from this recording.
+         *
+         * @type {!TextBatch[]}
+         */
+        textBatches : '=',
+
+        /**
+         * A callback that accepts a timestamp, and seeks the recording to
+         * that provided timestamp.
+         *
+         * @type {!Function}
+         */
+        seek: '&',
+
+        /**
+         * The current position within the recording.
+         *
+         * @type {!Number}
+         */
+        currentPosition: '='
+
+    };
+
+    config.controller = ['$scope', '$element', '$injector',
+            function guacPlayerController($scope, $element) {
+
+        /**
+         * The phrase to search within the text batches in order to produce the
+         * filtered list for display.
+         *
+         * @type {String}
+         */
+        $scope.searchPhrase = '';
+
+        /**
+         * The text batches that match the current search phrase, or all
+         * batches if no search phrase is set.
+         *
+         * @type {!TextBatch[]}
+         */
+        $scope.filteredBatches = $scope.textBatches;
+
+        /**
+         * Whether or not the key log viewer should be full-screen. False by
+         * default unless explicitly enabled by user interaction.
+         *
+         * @type {boolean}
+         */
+        $scope.fullscreenKeyLog = false;
+
+        /**
+         * Toggle whether the key log viewer should take up the whole screen.
+         */
+        $scope.toggleKeyLogFullscreen = function toggleKeyLogFullscreen() {
+            $element.toggleClass(""fullscreen"");
+        };
+
+        /**
+         * Filter the provided text batches using the provided search phrase to
+         * generate the list of filtered batches, or set to all provided
+         * batches if no search phrase is provided.
+         *
+         * @param {String} searchPhrase
+         *     The phrase to search the text batches for. If no phrase is
+         *     provided, the list of batches will not be filtered.
+         */
+        const applyFilter = searchPhrase => {
+
+            // If there's search phrase entered, search the text within the
+            // batches for it
+            if (searchPhrase)
+                $scope.filteredBatches = fuzzysort.go(
+                    searchPhrase, $scope.textBatches, {key: 'text'})
+                .map(result => result.obj);
+
+            // Otherwise, do not filter the batches
+            else
+                $scope.filteredBatches = $scope.textBatches;
+
+        };
+
+        // Reapply the filter to the updated text batches
+        $scope.$watch('textBatches', applyFilter);
+
+        // Reapply the filter whenever the search phrase is updated
+        $scope.$watch('searchPhrase', applyFilter);
+
+        /**
+         * Convert the given quantity of milliseconds into a human readable
+         * format, deferring to the time service for the implementation.
+         *
+         * @param {!number} value
+         *     The time to format, in milliseconds.
+         *
+         * @returns {!string}
+         *     A human readable string representing the provided number of
+         *     milliseconds.
+         */","[{'comment': 'Same here - you can just annotate:\r\n\r\n```js\r\n/**\r\n * @borrows playerTimeService.formatTime\r\n */\r\n```\r\n\r\nand avoid multiple copies of the same docs.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -872,6 +911,19 @@ Guacamole.SessionRecording = function SessionRecording(source, refreshInterval)
      */
     this.onpause = null;
 
+    /**
+     * Fired whenever a new batch of typed text extracted from key events
+     * is available.
+     *
+     * @event
+     * @param {!String} text
+     *     The typed text associated with the batch of text.
+     *
+     * @param {!number} timestamp
+     *     The relative timestamp associated with the batch of text.","[{'comment': 'Could this event should be richer? There definitely needs to be the rough text equivalent available for easy consumption, so this much is pretty good, but:\r\n\r\n* This doesn\'t appear to provide a way for consuming code to distinguish between non-printable keypresses (like ""<Backspace"">) and the text equivalent to how we represent them (typing ""<"", ""B"", ""a"", ... etc.), which would prevent implementations from styling such keys differently or taking reliable automated action based on the presumed text typed.\r\n* Timing information for keypresses vs. frames is lost (ie: there\'s no way for consuming code to choose to represent the keys pressed/released one key at a time)\r\n\r\nPerhaps there\'s a way we can represent that in an object received by this event?', 'commenter': 'mike-jumper'}, {'comment': 'This is addressed now.', 'commenter': 'jmuehlner'}, {'comment': 'This is addressed now.', 'commenter': 'jmuehlner'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventBatcher.js,"@@ -0,0 +1,481 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ */
+Guacamole.KeyEventBatcher = function KeyEventBatcher(batchSeperation) {","[{'comment': ""I'd recommend `KeyEventInterpreter` over `KeyEventBatcher`."", 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventBatcher.js,"@@ -0,0 +1,481 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ */
+Guacamole.KeyEventBatcher = function KeyEventBatcher(batchSeperation) {
+
+    /**
+     * Reference to this Guacamole.KeyEventBatcher.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var batcher = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};","[{'comment': 'This should also be annotated `@private`.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventBatcher.js,"@@ -0,0 +1,481 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ */
+Guacamole.KeyEventBatcher = function KeyEventBatcher(batchSeperation) {
+
+    /**
+     * Reference to this Guacamole.KeyEventBatcher.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var batcher = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [","[{'comment': 'This should also be annotated `@private`.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventBatcher.js,"@@ -0,0 +1,481 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ */
+Guacamole.KeyEventBatcher = function KeyEventBatcher(batchSeperation) {
+
+    /**
+     * Reference to this Guacamole.KeyEventBatcher.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var batcher = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {","[{'comment': 'This should also be annotated `@private`.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventBatcher.js,"@@ -0,0 +1,481 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ */
+Guacamole.KeyEventBatcher = function KeyEventBatcher(batchSeperation) {
+
+    /**
+     * Reference to this Guacamole.KeyEventBatcher.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var batcher = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * A human-readable representation of all keys pressed since the last keyframe.
+     *
+     * @private
+     * @type {String}
+     */
+    var currentTypedValue = '';
+
+    /**
+     * The timestamp of the key event that started the most recent batch of
+     * text content. If 0, no key events have been processed yet.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastTextTimestamp = 0;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {","[{'comment': 'This should also be annotated `@private`.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/SessionRecording.js,"@@ -104,6 +104,16 @@ Guacamole.SessionRecording = function SessionRecording(source, refreshInterval)
      */
     var KEYFRAME_TIME_INTERVAL = 5000;
 
+    /**
+     * The minimum number of milliseconds which must elapse between key events
+     * before text can be split across multiple frames.
+     *
+     * @private
+     * @constant
+     * @type {Number}
+     */
+    var TYPED_TEXT_INTERVAL = 5000;
+","[{'comment': ""I don't see this used anywhere. Is this from something that's no longer present?"", 'commenter': 'mike-jumper'}]"
894,guacamole/src/main/frontend/src/app/player/styles/textView.css,"@@ -0,0 +1,137 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/*
+ * NOTE: This session recording player implementation is based on the Session
+ * Recording Player for Glyptodon Enterprise which is available at
+ * https://github.com/glyptodon/glyptodon-enterprise-player under the
+ * following license:","[{'comment': 'Does this statement apply to this file?', 'commenter': 'mike-jumper'}]"
894,guacamole/src/main/frontend/src/app/player/services/playerTimeService.js,"@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * 'License'); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * A service for formatting time, specifically for the recording player.
+ */
+angular.module('player').factory('playerTimeService',
+        ['$injector', function playerTimeService($injector) {
+
+    const service = {};
+
+    /**
+     * Formats the given number as a decimal string, adding leading zeroes
+     * such that the string contains at least two digits. The given number
+     * MUST NOT be negative.
+     *
+     * @param {!number} value
+     *     The number to format.
+     *
+     * @returns {!string}
+     *     The decimal string representation of the given value, padded
+     *     with leading zeroes up to a minimum length of two digits.
+     */
+    const zeroPad = function zeroPad(value) {
+        return value > 9 ? value : '0' + value;
+    };
+
+    /**
+     * Formats the given quantity of milliseconds as days, hours, minutes,
+     * and whole seconds, separated by colons (DD:HH:MM:SS). Hours are
+     * included only if the quantity is at least one hour, and days are
+     * included only if the quantity is at least one day. All included
+     * groups are zero-padded to two digits with the exception of the
+     * left-most group.
+     *
+     * @param {!number} value
+     *     The time to format, in milliseconds.
+     *
+     * @returns {!string}
+     *     The given quantity of milliseconds formatted as ""DD:HH:MM:SS"".
+     */
+    service.formatTime = function formatTime(value) {
+
+        // Round provided value down to whole seconds
+        value = Math.floor((value || 0) / 1000);
+
+        // Separate seconds into logical groups of seconds, minutes,
+        // hours, etc.
+        var groups = [ 1, 24, 60, 60 ];
+        for (var i = groups.length - 1; i >= 0; i--) {
+            var placeValue = groups[i];
+            groups[i] = zeroPad(value % placeValue);
+            value = Math.floor(value / placeValue);
+        }
+
+        // Format groups separated by colons, stripping leading zeroes and
+        // groups which are entirely zeroes, leaving at least minutes and
+        // seconds
+        var formatted = groups.join(':');
+        return /^[0:]*([0-9]{1,2}(?::[0-9]{2})+)$/.exec(formatted)[1];
+
+    };","[{'comment': 'As a modified version of the function originally brought in from:\r\n\r\nhttps://github.com/glyptodon/glyptodon-enterprise-player/blob/8e2d76c7bee77043afda3b6f351fff9f74afe5e2/src/main/webapp/modules/player/directives/player.js#L158-L192\r\n\r\nthis file would need that additional note regarding copyright and original licensing:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/e46d06e6b832c02a666e0f99f4d2a3495b030a23/guacamole/src/main/frontend/src/app/player/directives/player.js#L20-L45', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,578 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.","[{'comment': 'Please:\r\n\r\n* Add the return type JSDoc annotation.\r\n* Omit ""Return"" from the description following `@returns` (redundant).', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,578 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid","[{'comment': '""it it\'s""', 'commenter': 'mike-jumper'}, {'comment': '![image](https://github.com/apache/guacamole-client/assets/4633119/5ba27697-e01d-4873-8bbb-1af3a9c7a595)\r\n', 'commenter': 'jmuehlner'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,578 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.
+     */
+    function getUnicodeKeyDefinition(keysym) {
+
+        // Translate only if keysym maps to Unicode
+        if (keysym < 0x00 || (keysym > 0xFF && (keysym | 0xFFFF) != 0x0100FFFF))
+            return null;
+
+        var codepoint = keysym & 0xFFFF;
+        var mask;
+        var bytes;
+
+        /* Determine size and initial byte mask */","[{'comment': 'JavaScript comments should be:\r\n\r\n```\r\n// C++ style\r\n```', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,578 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.
+     */
+    function getUnicodeKeyDefinition(keysym) {
+
+        // Translate only if keysym maps to Unicode
+        if (keysym < 0x00 || (keysym > 0xFF && (keysym | 0xFFFF) != 0x0100FFFF))
+            return null;
+
+        var codepoint = keysym & 0xFFFF;
+        var mask;
+        var bytes;
+
+        /* Determine size and initial byte mask */
+        if (codepoint <= 0x007F) {
+            mask  = 0x00;
+            bytes = 1;
+        }
+        else if (codepoint <= 0x7FF) {
+            mask  = 0xC0;
+            bytes = 2;
+        }
+        else {
+            mask  = 0xE0;
+            bytes = 3;
+        }
+
+        var byteArray = new ArrayBuffer(bytes);
+        var byteView = new Int8Array(byteArray);
+
+        // Add trailing bytes, if any
+        for (var i = 1; i < bytes; i++) {
+            byteView[bytes - i] = 0x80 | (codepoint & 0x3F);
+            codepoint >>= 6;
+        }
+
+        // Set initial byte
+        byteView[0] = mask | codepoint;
+
+        // Convert to UTF8 string
+        var name = new TextDecoder(""utf-8"").decode(byteArray);
+
+        // Create and return the definition
+        return new KeyDefinition({keysym: keysym.toString(), name: name, value: name, modifier: false});","[{'comment': 'Why do we need to convert the codepoint to UTF-8 and back again?', 'commenter': 'mike-jumper'}, {'comment': ""I don't see where that's happening. Can you be a bit more specific? "", 'commenter': 'jmuehlner'}, {'comment': ""Ah, I do see that calling `toString()` here is pointless. I'll get rid of that."", 'commenter': 'jmuehlner'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,578 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.
+     */
+    function getUnicodeKeyDefinition(keysym) {
+
+        // Translate only if keysym maps to Unicode
+        if (keysym < 0x00 || (keysym > 0xFF && (keysym | 0xFFFF) != 0x0100FFFF))
+            return null;
+
+        var codepoint = keysym & 0xFFFF;
+        var mask;
+        var bytes;
+
+        /* Determine size and initial byte mask */
+        if (codepoint <= 0x007F) {
+            mask  = 0x00;
+            bytes = 1;
+        }
+        else if (codepoint <= 0x7FF) {
+            mask  = 0xC0;
+            bytes = 2;
+        }
+        else {
+            mask  = 0xE0;
+            bytes = 3;
+        }
+
+        var byteArray = new ArrayBuffer(bytes);
+        var byteView = new Int8Array(byteArray);
+
+        // Add trailing bytes, if any
+        for (var i = 1; i < bytes; i++) {
+            byteView[bytes - i] = 0x80 | (codepoint & 0x3F);
+            codepoint >>= 6;
+        }
+
+        // Set initial byte
+        byteView[0] = mask | codepoint;
+
+        // Convert to UTF8 string
+        var name = new TextDecoder(""utf-8"").decode(byteArray);
+
+        // Create and return the definition
+        return new KeyDefinition({keysym: keysym.toString(), name: name, value: name, modifier: false});
+
+    }
+
+    /**
+     * Return a KeyDefinition corresponding to the provided keysym.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to return a KeyDefinition for.
+     *
+     * @returns","[{'comment': 'Please add JSDoc type annotation.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,578 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.
+     */
+    function getUnicodeKeyDefinition(keysym) {
+
+        // Translate only if keysym maps to Unicode
+        if (keysym < 0x00 || (keysym > 0xFF && (keysym | 0xFFFF) != 0x0100FFFF))
+            return null;
+
+        var codepoint = keysym & 0xFFFF;
+        var mask;
+        var bytes;
+
+        /* Determine size and initial byte mask */
+        if (codepoint <= 0x007F) {
+            mask  = 0x00;
+            bytes = 1;
+        }
+        else if (codepoint <= 0x7FF) {
+            mask  = 0xC0;
+            bytes = 2;
+        }
+        else {
+            mask  = 0xE0;
+            bytes = 3;
+        }
+
+        var byteArray = new ArrayBuffer(bytes);
+        var byteView = new Int8Array(byteArray);
+
+        // Add trailing bytes, if any
+        for (var i = 1; i < bytes; i++) {
+            byteView[bytes - i] = 0x80 | (codepoint & 0x3F);
+            codepoint >>= 6;
+        }
+
+        // Set initial byte
+        byteView[0] = mask | codepoint;
+
+        // Convert to UTF8 string
+        var name = new TextDecoder(""utf-8"").decode(byteArray);
+
+        // Create and return the definition
+        return new KeyDefinition({keysym: keysym.toString(), name: name, value: name, modifier: false});
+
+    }
+
+    /**
+     * Return a KeyDefinition corresponding to the provided keysym.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to return a KeyDefinition for.
+     *
+     * @returns
+     *     A KeyDefinition corresponding to the provided keysym.
+     */
+    function getKeyDefinitionByKeysym(keysym) {
+
+        // If it's a known type, return the existing definition
+        if (keysym in KNOWN_KEYS)
+            return KNOWN_KEYS[keysym];
+
+        // Return a UTF-8 KeyDefinition, if valid
+        var definition = getUnicodeKeyDefinition(keysym);
+        if (definition != null)
+            return definition;
+
+        // If it's not UTF-8, return an unknown definition, with the name
+        // just set to the hex value of the keysym
+        return new KeyDefinition({
+            keysym: keysym,
+            name: '0x' + String(keysym.toString(16))
+        })
+
+    }
+
+    /**
+     * Fired whenever a new batch of typed text extracted from key events
+     * is available. A new batch will be provided every time a new key event
+     * is processed after more than batchSeperation milliseconds after the
+     * previous key event.
+     *
+     * @event
+     * @param {!Guacamole.KeyEventInterpreter.KeyEventBatch}
+     */
+    interpreter.onBatch = null;","[{'comment': 'To align with established naming conventions, this should be `onbatch`.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,578 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.
+     */
+    function getUnicodeKeyDefinition(keysym) {
+
+        // Translate only if keysym maps to Unicode
+        if (keysym < 0x00 || (keysym > 0xFF && (keysym | 0xFFFF) != 0x0100FFFF))
+            return null;
+
+        var codepoint = keysym & 0xFFFF;
+        var mask;
+        var bytes;
+
+        /* Determine size and initial byte mask */
+        if (codepoint <= 0x007F) {
+            mask  = 0x00;
+            bytes = 1;
+        }
+        else if (codepoint <= 0x7FF) {
+            mask  = 0xC0;
+            bytes = 2;
+        }
+        else {
+            mask  = 0xE0;
+            bytes = 3;
+        }
+
+        var byteArray = new ArrayBuffer(bytes);
+        var byteView = new Int8Array(byteArray);
+
+        // Add trailing bytes, if any
+        for (var i = 1; i < bytes; i++) {
+            byteView[bytes - i] = 0x80 | (codepoint & 0x3F);
+            codepoint >>= 6;
+        }
+
+        // Set initial byte
+        byteView[0] = mask | codepoint;
+
+        // Convert to UTF8 string
+        var name = new TextDecoder(""utf-8"").decode(byteArray);
+
+        // Create and return the definition
+        return new KeyDefinition({keysym: keysym.toString(), name: name, value: name, modifier: false});
+
+    }
+
+    /**
+     * Return a KeyDefinition corresponding to the provided keysym.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to return a KeyDefinition for.
+     *
+     * @returns
+     *     A KeyDefinition corresponding to the provided keysym.
+     */
+    function getKeyDefinitionByKeysym(keysym) {
+
+        // If it's a known type, return the existing definition
+        if (keysym in KNOWN_KEYS)
+            return KNOWN_KEYS[keysym];
+
+        // Return a UTF-8 KeyDefinition, if valid
+        var definition = getUnicodeKeyDefinition(keysym);
+        if (definition != null)
+            return definition;
+
+        // If it's not UTF-8, return an unknown definition, with the name
+        // just set to the hex value of the keysym
+        return new KeyDefinition({
+            keysym: keysym,
+            name: '0x' + String(keysym.toString(16))
+        })
+
+    }
+
+    /**
+     * Fired whenever a new batch of typed text extracted from key events
+     * is available. A new batch will be provided every time a new key event
+     * is processed after more than batchSeperation milliseconds after the
+     * previous key event.
+     *
+     * @event
+     * @param {!Guacamole.KeyEventInterpreter.KeyEventBatch}
+     */
+    interpreter.onBatch = null;
+
+    /**
+     * Handles a raw key event, potentially appending typed text to the
+     * current batch, and calling onBatch with the current batch, if the
+     * callback is set and a new batch is about to be started.
+     *
+     * @param {!string[]} args
+     *     The arguments of the key event.
+     */
+    interpreter.handleKeyEvent = function handleKeyEvent(args) {
+
+        // The X11 keysym
+        var keysym = parseInt(args[0]);
+
+        // Either 1 or 0 for pressed or released, respectively
+        var pressed = parseInt(args[1]);
+
+        // The timestamp when this key event occured
+        var timestamp = parseInt(args[2]);
+
+        // If no current batch exists, start a new one now
+        if (!currentBatch)
+            currentBatch = new Guacamole.KeyEventInterpreter.KeyEventBatch();
+
+        // Only switch to a new batch of text if sufficient time has passed
+        // since the last key event
+        var newBatch = (batchSeperation >= 0
+                && (timestamp - lastKeyEvent) >= batchSeperation);
+        lastKeyEvent = timestamp;
+
+        if (newBatch) {
+
+            // Call the handler with the current batch of text and the timestamp
+            // at which the current batch started
+            if (currentBatch.events.length && interpreter.onBatch)
+                interpreter.onBatch(currentBatch);
+
+            // Move on to the next batch of text
+            currentBatch = new Guacamole.KeyEventInterpreter.KeyEventBatch();
+
+        }
+
+        var keyDefinition = getKeyDefinitionByKeysym(keysym);
+
+        // Mark down whether the key was pressed or released
+        if (keyDefinition.modifier) {
+            if (pressed)
+                pressedKeys[keysym] = keyDefinition;
+            else
+                delete pressedKeys[keysym];
+        }
+
+        // Append to the current typed value when a printable
+        // (non-modifier) key is pressed
+        else if (pressed) {
+
+            var relativeTimestap = timestamp - startTimestamp;
+
+            if (isShortcut()) {
+
+                var shortcutText = '<'","[{'comment': 'Missing semicolon.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,578 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.
+     */
+    function getUnicodeKeyDefinition(keysym) {
+
+        // Translate only if keysym maps to Unicode
+        if (keysym < 0x00 || (keysym > 0xFF && (keysym | 0xFFFF) != 0x0100FFFF))
+            return null;
+
+        var codepoint = keysym & 0xFFFF;
+        var mask;
+        var bytes;
+
+        /* Determine size and initial byte mask */
+        if (codepoint <= 0x007F) {
+            mask  = 0x00;
+            bytes = 1;
+        }
+        else if (codepoint <= 0x7FF) {
+            mask  = 0xC0;
+            bytes = 2;
+        }
+        else {
+            mask  = 0xE0;
+            bytes = 3;
+        }
+
+        var byteArray = new ArrayBuffer(bytes);
+        var byteView = new Int8Array(byteArray);
+
+        // Add trailing bytes, if any
+        for (var i = 1; i < bytes; i++) {
+            byteView[bytes - i] = 0x80 | (codepoint & 0x3F);
+            codepoint >>= 6;
+        }
+
+        // Set initial byte
+        byteView[0] = mask | codepoint;
+
+        // Convert to UTF8 string
+        var name = new TextDecoder(""utf-8"").decode(byteArray);
+
+        // Create and return the definition
+        return new KeyDefinition({keysym: keysym.toString(), name: name, value: name, modifier: false});
+
+    }
+
+    /**
+     * Return a KeyDefinition corresponding to the provided keysym.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to return a KeyDefinition for.
+     *
+     * @returns
+     *     A KeyDefinition corresponding to the provided keysym.
+     */
+    function getKeyDefinitionByKeysym(keysym) {
+
+        // If it's a known type, return the existing definition
+        if (keysym in KNOWN_KEYS)
+            return KNOWN_KEYS[keysym];
+
+        // Return a UTF-8 KeyDefinition, if valid
+        var definition = getUnicodeKeyDefinition(keysym);
+        if (definition != null)
+            return definition;
+
+        // If it's not UTF-8, return an unknown definition, with the name
+        // just set to the hex value of the keysym
+        return new KeyDefinition({
+            keysym: keysym,
+            name: '0x' + String(keysym.toString(16))
+        })
+
+    }
+
+    /**
+     * Fired whenever a new batch of typed text extracted from key events
+     * is available. A new batch will be provided every time a new key event
+     * is processed after more than batchSeperation milliseconds after the
+     * previous key event.
+     *
+     * @event
+     * @param {!Guacamole.KeyEventInterpreter.KeyEventBatch}
+     */
+    interpreter.onBatch = null;
+
+    /**
+     * Handles a raw key event, potentially appending typed text to the
+     * current batch, and calling onBatch with the current batch, if the
+     * callback is set and a new batch is about to be started.
+     *
+     * @param {!string[]} args
+     *     The arguments of the key event.
+     */
+    interpreter.handleKeyEvent = function handleKeyEvent(args) {
+
+        // The X11 keysym
+        var keysym = parseInt(args[0]);
+
+        // Either 1 or 0 for pressed or released, respectively
+        var pressed = parseInt(args[1]);
+
+        // The timestamp when this key event occured
+        var timestamp = parseInt(args[2]);
+
+        // If no current batch exists, start a new one now
+        if (!currentBatch)
+            currentBatch = new Guacamole.KeyEventInterpreter.KeyEventBatch();
+
+        // Only switch to a new batch of text if sufficient time has passed
+        // since the last key event
+        var newBatch = (batchSeperation >= 0
+                && (timestamp - lastKeyEvent) >= batchSeperation);
+        lastKeyEvent = timestamp;
+
+        if (newBatch) {
+
+            // Call the handler with the current batch of text and the timestamp
+            // at which the current batch started
+            if (currentBatch.events.length && interpreter.onBatch)
+                interpreter.onBatch(currentBatch);
+
+            // Move on to the next batch of text
+            currentBatch = new Guacamole.KeyEventInterpreter.KeyEventBatch();
+
+        }
+
+        var keyDefinition = getKeyDefinitionByKeysym(keysym);
+
+        // Mark down whether the key was pressed or released
+        if (keyDefinition.modifier) {
+            if (pressed)
+                pressedKeys[keysym] = keyDefinition;
+            else
+                delete pressedKeys[keysym];
+        }
+
+        // Append to the current typed value when a printable
+        // (non-modifier) key is pressed
+        else if (pressed) {
+
+            var relativeTimestap = timestamp - startTimestamp;
+
+            if (isShortcut()) {
+
+                var shortcutText = '<'
+
+                var firstKey = true;
+
+                // Compose entry by inspecting the state of each tracked key.
+                // At least one key must be pressed when in a shortcut.
+                for (var keysym in pressedKeys) {
+
+                    var pressedKeyDefinition = pressedKeys[keysym];
+
+                    // Print name of key
+                    if (firstKey) {
+                        shortcutText += pressedKeyDefinition.name;
+                        firstKey = false;
+                    }
+
+                    else
+                    shortcutText += ('+' + pressedKeyDefinition.name);","[{'comment': 'Indentation looks to have been accidentally misaligned here.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,579 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.
+     */
+    function getUnicodeKeyDefinition(keysym) {
+
+        // Translate only if keysym maps to Unicode
+        if (keysym < 0x00 || (keysym > 0xFF && (keysym | 0xFFFF) != 0x0100FFFF))
+            return null;
+
+        var codepoint = keysym & 0xFFFF;
+        var mask;
+        var bytes;
+
+        /* Determine size and initial byte mask */
+        if (codepoint <= 0x007F) {
+            mask  = 0x00;
+            bytes = 1;
+        }
+        else if (codepoint <= 0x7FF) {
+            mask  = 0xC0;
+            bytes = 2;
+        }
+        else {
+            mask  = 0xE0;
+            bytes = 3;
+        }
+
+        var byteArray = new ArrayBuffer(bytes);
+        var byteView = new Int8Array(byteArray);
+
+        // Add trailing bytes, if any
+        for (var i = 1; i < bytes; i++) {
+            byteView[bytes - i] = 0x80 | (codepoint & 0x3F);
+            codepoint >>= 6;
+        }
+
+        // Set initial byte
+        byteView[0] = mask | codepoint;
+
+        // Convert to UTF8 string
+        var name = new TextDecoder(""utf-8"").decode(byteArray);
+
+        // Create and return the definition
+        return new KeyDefinition({keysym: keysym.toString(), name: name, value: name, modifier: false});
+
+    }
+
+    /**
+     * Return a KeyDefinition corresponding to the provided keysym.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to return a KeyDefinition for.
+     *
+     * @returns
+     *     A KeyDefinition corresponding to the provided keysym.
+     */
+    function getKeyDefinitionByKeysym(keysym) {
+
+        // If it's a known type, return the existing definition
+        if (keysym in KNOWN_KEYS)
+            return KNOWN_KEYS[keysym];
+
+        // Return a UTF-8 KeyDefinition, if valid
+        var definition = getUnicodeKeyDefinition(keysym);
+        if (definition != null)
+            return definition;
+
+        // If it's not UTF-8, return an unknown definition, with the name
+        // just set to the hex value of the keysym
+        return new KeyDefinition({
+            keysym: keysym,
+            name: '0x' + String(keysym.toString(16))
+        })
+
+    }
+
+    /**
+     * Fired whenever a new batch of typed text extracted from key events
+     * is available. A new batch will be provided every time a new key event
+     * is processed after more than batchSeperation milliseconds after the
+     * previous key event.
+     *
+     * @event
+     * @param {!Guacamole.KeyEventInterpreter.KeyEventBatch}
+     */
+    interpreter.onBatch = null;
+
+    /**
+     * Handles a raw key event, potentially appending typed text to the
+     * current batch, and calling onBatch with the current batch, if the
+     * callback is set and a new batch is about to be started.
+     *
+     * @param {!string[]} args
+     *     The arguments of the key event.
+     */
+    interpreter.handleKeyEvent = function handleKeyEvent(args) {
+
+        // The X11 keysym
+        var keysym = parseInt(args[0]);
+
+        // Either 1 or 0 for pressed or released, respectively
+        var pressed = parseInt(args[1]);
+
+        // The timestamp when this key event occured
+        var timestamp = parseInt(args[2]);
+
+        // If no current batch exists, start a new one now
+        if (!currentBatch)
+            currentBatch = new Guacamole.KeyEventInterpreter.KeyEventBatch();
+
+        // Only switch to a new batch of text if sufficient time has passed
+        // since the last key event
+        var newBatch = (batchSeperation >= 0
+                && (timestamp - lastKeyEvent) >= batchSeperation);
+        lastKeyEvent = timestamp;
+
+        if (newBatch) {
+
+            // Call the handler with the current batch of text and the timestamp
+            // at which the current batch started
+            if (currentBatch.events.length && interpreter.onBatch)
+                interpreter.onBatch(currentBatch);
+
+            // Move on to the next batch of text
+            currentBatch = new Guacamole.KeyEventInterpreter.KeyEventBatch();
+
+        }
+
+        var keyDefinition = getKeyDefinitionByKeysym(keysym);
+
+        // Mark down whether the key was pressed or released
+        if (keyDefinition.modifier) {
+            if (pressed)
+                pressedKeys[keysym] = keyDefinition;
+            else
+                delete pressedKeys[keysym];
+        }
+
+        // Append to the current typed value when a printable
+        // (non-modifier) key is pressed
+        else if (pressed) {
+
+            var relativeTimestap = timestamp - startTimestamp;
+
+            if (isShortcut()) {
+
+                var shortcutText = '<'
+
+                var firstKey = true;
+
+                // Compose entry by inspecting the state of each tracked key.
+                // At least one key must be pressed when in a shortcut.
+                for (var keysym in pressedKeys) {
+
+                    var pressedKeyDefinition = pressedKeys[keysym];
+
+                    // Print name of key
+                    if (firstKey) {
+                        shortcutText += pressedKeyDefinition.name;
+                        firstKey = false;
+                    }
+
+                    else
+                    shortcutText += ('+' + pressedKeyDefinition.name);
+
+                }
+
+                // Finally, append the printable key to close the shortcut
+                shortcutText += ('+' + keyDefinition.name + '>')
+
+                // Add the shortcut to the current batch
+                currentBatch.simpleValue += shortcutText;
+                currentBatch.events.push(new Guacamole.KeyEventInterpreter.KeyEvent(
+                        shortcutText, false, relativeTimestap));
+
+            }
+
+            // Print the key itself
+            else {
+
+                var keyText;
+                var typed;
+
+                // Print the value if explicitly defined
+                if (keyDefinition.value != null) {
+
+                    keyText = keyDefinition.value;
+                    typed = true;
+
+                }
+
+                // Otherwise print the name
+                else {
+
+                    keyText = ('<' + keyDefinition.name + '>');
+
+                    // While this is a representation for a single character,
+                    // the key text is the name of the key, not the actual
+                    // character itself
+                    typed = false;
+
+                }
+
+                // Add the key to the current batch
+                currentBatch.simpleValue += keyText;
+                currentBatch.events.push(new Guacamole.KeyEventInterpreter.KeyEvent(
+                        keyText, typed, relativeTimestap));
+
+            }
+
+        }
+
+    }
+
+    /**
+     * Return the current batch of typed text. Note that the batch may be
+     * incomplete, as more key events might be processed before the next
+     * batch starts.
+     *
+     * @returns","[{'comment': 'Please add JSDoc type notation.', 'commenter': 'mike-jumper'}]"
894,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -0,0 +1,579 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+var Guacamole = Guacamole || {};
+
+/**
+ * An object that will accept raw key events and produce human readable text
+ * batches, seperated by at least `batchSeperation` milliseconds, which can be
+ * retrieved through the onBatch callback or by calling getCurrentBatch().
+ *
+ * NOTE: The event processing logic and output format is based on the `guaclog`
+ * tool, with the addition of batching support.
+ *
+ * @constructor
+ *
+ * @param {number} [batchSeperation=5000]
+ *     The minimum number of milliseconds that must elapse between subsequent
+ *     batches of key-event-generated text. If 0 or negative, no splitting will
+ *     occur, resulting in a single batch for all provided key events.
+ *
+ * @param {number} [startTimestamp=0]
+ *     The starting timestamp for the recording being intepreted. If provided,
+ *     the timestamp of each intepreted event will be relative to this timestamp.
+ *     If not provided, the raw recording timestamp will be used.
+ */
+Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, startTimestamp) {
+
+    /**
+     * Reference to this Guacamole.KeyEventInterpreter.
+     *
+     * @private
+     * @type {!Guacamole.SessionRecording}
+     */
+    var interpreter = this;
+
+    // Default to 5 seconds if the batch seperation was not provided
+    if (batchSeperation === undefined || batchSeperation === null)
+        batchSeperation = 5000;
+
+    // Default to 0 seconds to keep the raw timestamps
+    if (startTimestamp === undefined || startTimestamp === null)
+        startTimestamp = 0;
+
+    /**
+     * A definition for a known key.
+     *
+     * @constructor
+     * @private
+     * @param {KEY_DEFINITION|object} [template={}]
+     *     The object whose properties should be copied within the new
+     *     KEY_DEFINITION.
+     */
+    var KeyDefinition = function KeyDefinition(template) {
+
+        /**
+         * The X11 keysym of the key.
+         * @type {!number}
+         */
+        this.keysym = parseInt(template.keysym);
+
+        /**
+         * A human-readable name for the key.
+         * @type {!String}
+         */
+        this.name = template.name;
+
+        /**
+         * The value which would be typed in a typical text editor, if any. If the
+         * key is not associated with any typable value, or if the typable value is
+         * not generally useful in an auditing context, this will be undefined.
+         * @type {String}
+         */
+        this.value = template.value;
+
+        /**
+         * Whether this key is a modifier which may affect the interpretation of
+         * other keys, and thus should be tracked as it is held down.
+         * @type {!boolean}
+         * @default false
+         */
+        this.modifier = template.modifier || false;
+
+    };
+
+    /**
+     * A precursor array to the KNOWN_KEYS map. The objects contained within
+     * will be constructed into full KeyDefinition objects.
+     *
+     * @constant
+     * @private
+     * @type {Object[]}
+     */
+    var _KNOWN_KEYS = [
+        {keysym: 0xFE03, name: 'AltGr', value: """", modifier: true },
+        {keysym: 0xFF08, name: 'Backspace' },
+        {keysym: 0xFF09, name: 'Tab' },
+        {keysym: 0xFF0B, name: 'Clear' },
+        {keysym: 0xFF0D, name: 'Return', value: ""\n"" },
+        {keysym: 0xFF13, name: 'Pause' },
+        {keysym: 0xFF14, name: 'Scroll' },
+        {keysym: 0xFF15, name: 'SysReq' },
+        {keysym: 0xFF1B, name: 'Escape' },
+        {keysym: 0xFF50, name: 'Home' },
+        {keysym: 0xFF51, name: 'Left' },
+        {keysym: 0xFF52, name: 'Up' },
+        {keysym: 0xFF53, name: 'Right' },
+        {keysym: 0xFF54, name: 'Down' },
+        {keysym: 0xFF55, name: 'Page Up' },
+        {keysym: 0xFF56, name: 'Page Down' },
+        {keysym: 0xFF57, name: 'End' },
+        {keysym: 0xFF63, name: 'Insert' },
+        {keysym: 0xFF65, name: 'Undo' },
+        {keysym: 0xFF6A, name: 'Help' },
+        {keysym: 0xFF7F, name: 'Num' },
+        {keysym: 0xFF80, name: 'Space', value: "" "" },
+        {keysym: 0xFF8D, name: 'Enter', value: ""\n"" },
+        {keysym: 0xFF95, name: 'Home' },
+        {keysym: 0xFF96, name: 'Left' },
+        {keysym: 0xFF97, name: 'Up' },
+        {keysym: 0xFF98, name: 'Right' },
+        {keysym: 0xFF99, name: 'Down' },
+        {keysym: 0xFF9A, name: 'Page Up' },
+        {keysym: 0xFF9B, name: 'Page Down' },
+        {keysym: 0xFF9C, name: 'End' },
+        {keysym: 0xFF9E, name: 'Insert' },
+        {keysym: 0xFFAA, name: '*', value: ""*"" },
+        {keysym: 0xFFAB, name: '+', value: ""+"" },
+        {keysym: 0xFFAD, name: '-', value: ""-"" },
+        {keysym: 0xFFAE, name: '.', value: ""."" },
+        {keysym: 0xFFAF, name: '/', value: ""/"" },
+        {keysym: 0xFFB0, name: '0', value: ""0"" },
+        {keysym: 0xFFB1, name: '1', value: ""1"" },
+        {keysym: 0xFFB2, name: '2', value: ""2"" },
+        {keysym: 0xFFB3, name: '3', value: ""3"" },
+        {keysym: 0xFFB4, name: '4', value: ""4"" },
+        {keysym: 0xFFB5, name: '5', value: ""5"" },
+        {keysym: 0xFFB6, name: '6', value: ""6"" },
+        {keysym: 0xFFB7, name: '7', value: ""7"" },
+        {keysym: 0xFFB8, name: '8', value: ""8"" },
+        {keysym: 0xFFB9, name: '9', value: ""9"" },
+        {keysym: 0xFFBE, name: 'F1' },
+        {keysym: 0xFFBF, name: 'F2' },
+        {keysym: 0xFFC0, name: 'F3' },
+        {keysym: 0xFFC1, name: 'F4' },
+        {keysym: 0xFFC2, name: 'F5' },
+        {keysym: 0xFFC3, name: 'F6' },
+        {keysym: 0xFFC4, name: 'F7' },
+        {keysym: 0xFFC5, name: 'F8' },
+        {keysym: 0xFFC6, name: 'F9' },
+        {keysym: 0xFFC7, name: 'F10' },
+        {keysym: 0xFFC8, name: 'F11' },
+        {keysym: 0xFFC9, name: 'F12' },
+        {keysym: 0xFFCA, name: 'F13' },
+        {keysym: 0xFFCB, name: 'F14' },
+        {keysym: 0xFFCC, name: 'F15' },
+        {keysym: 0xFFCD, name: 'F16' },
+        {keysym: 0xFFCE, name: 'F17' },
+        {keysym: 0xFFCF, name: 'F18' },
+        {keysym: 0xFFD0, name: 'F19' },
+        {keysym: 0xFFD1, name: 'F20' },
+        {keysym: 0xFFD2, name: 'F21' },
+        {keysym: 0xFFD3, name: 'F22' },
+        {keysym: 0xFFD4, name: 'F23' },
+        {keysym: 0xFFD5, name: 'F24' },
+        {keysym: 0xFFE1, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE2, name: 'Shift', value: """", modifier: true },
+        {keysym: 0xFFE3, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE4, name: 'Ctrl', value: null, modifier: true },
+        {keysym: 0xFFE5, name: 'Caps' },
+        {keysym: 0xFFE7, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE8, name: 'Meta', value: null, modifier: true },
+        {keysym: 0xFFE9, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEA, name: 'Alt', value: null, modifier: true },
+        {keysym: 0xFFEB, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFEC, name: 'Super', value: null, modifier: true },
+        {keysym: 0xFFED, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFEE, name: 'Hyper', value: null, modifier: true },
+        {keysym: 0xFFFF, name: 'Delete' }
+    ];
+
+    /**
+     * All known keys, as a map of X11 keysym to KeyDefinition.
+     *
+     * @constant
+     * @private
+     * @type {Object.<String, KeyDefinition>}
+     */
+    var KNOWN_KEYS = {};
+    _KNOWN_KEYS.forEach(function createKeyDefinitionMap(keyDefinition) {
+
+        // Construct a map of keysym to KeyDefinition object
+        KNOWN_KEYS[keyDefinition.keysym] = new KeyDefinition(keyDefinition)
+
+    });
+
+    /**
+     * A map of X11 keysyms to a KeyDefinition object, if the corresponding
+     * key is currently pressed. If a keysym has no entry in this map at all,
+     * it means that the key is not being pressed. Note that not all keysyms
+     * are necessarily tracked within this map - only those that are explicitly
+     * tracked.
+     *
+     * @private
+     * @type {Object.<String,KeyDefinition> }
+     */
+    var pressedKeys = {};
+
+    /**
+     * The current key event batch, containing a representation of all key
+     * events processed since the end of the last batch passed to onBatch.
+     * Null if no key events have been processed yet.
+     *
+     * @private
+     * @type {!KeyEventBatch}
+     */
+    var currentBatch = null;
+
+    /**
+     * The timestamp of the most recent key event processed.
+     *
+     * @private
+     * @type {Number}
+     */
+    var lastKeyEvent = 0;
+
+    /**
+     * Returns true if the currently-pressed keys are part of a shortcut, or
+     * false otherwise.
+     *
+     * @private
+     * @returns {!boolean}
+     *     True if the currently-pressed keys are part of a shortcut, or false
+     *     otherwise.
+     */
+    function isShortcut() {
+
+        // If one of the currently-pressed keys is non-printable, a shortcut
+        // is being typed
+        for (var keysym in pressedKeys) {
+            if (pressedKeys[keysym].value === null)
+                return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * If the provided keysym corresponds to a valid UTF-8 character, return
+     * a KeyDefinition for that keysym. Otherwise, return null.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to produce a UTF-8 KeyDefinition for, if valid.
+     *
+     * @returns
+     *     Return a KeyDefinition for the provided keysym, if it it's a valid
+     *     UTF-8 keysym, or null otherwise.
+     */
+    function getUnicodeKeyDefinition(keysym) {
+
+        // Translate only if keysym maps to Unicode
+        if (keysym < 0x00 || (keysym > 0xFF && (keysym | 0xFFFF) != 0x0100FFFF))
+            return null;
+
+        var codepoint = keysym & 0xFFFF;
+        var mask;
+        var bytes;
+
+        /* Determine size and initial byte mask */
+        if (codepoint <= 0x007F) {
+            mask  = 0x00;
+            bytes = 1;
+        }
+        else if (codepoint <= 0x7FF) {
+            mask  = 0xC0;
+            bytes = 2;
+        }
+        else {
+            mask  = 0xE0;
+            bytes = 3;
+        }
+
+        var byteArray = new ArrayBuffer(bytes);
+        var byteView = new Int8Array(byteArray);
+
+        // Add trailing bytes, if any
+        for (var i = 1; i < bytes; i++) {
+            byteView[bytes - i] = 0x80 | (codepoint & 0x3F);
+            codepoint >>= 6;
+        }
+
+        // Set initial byte
+        byteView[0] = mask | codepoint;
+
+        // Convert to UTF8 string
+        var name = new TextDecoder(""utf-8"").decode(byteArray);
+
+        // Create and return the definition
+        return new KeyDefinition({keysym: keysym.toString(), name: name, value: name, modifier: false});
+
+    }
+
+    /**
+     * Return a KeyDefinition corresponding to the provided keysym.
+     *
+     * @private
+     * @param {Number} keysym
+     *     The keysym to return a KeyDefinition for.
+     *
+     * @returns
+     *     A KeyDefinition corresponding to the provided keysym.
+     */
+    function getKeyDefinitionByKeysym(keysym) {
+
+        // If it's a known type, return the existing definition
+        if (keysym in KNOWN_KEYS)
+            return KNOWN_KEYS[keysym];
+
+        // Return a UTF-8 KeyDefinition, if valid
+        var definition = getUnicodeKeyDefinition(keysym);
+        if (definition != null)
+            return definition;
+
+        // If it's not UTF-8, return an unknown definition, with the name
+        // just set to the hex value of the keysym
+        return new KeyDefinition({
+            keysym: keysym,
+            name: '0x' + String(keysym.toString(16))
+        })
+
+    }
+
+    /**
+     * Fired whenever a new batch of typed text extracted from key events
+     * is available. A new batch will be provided every time a new key event
+     * is processed after more than batchSeperation milliseconds after the
+     * previous key event.
+     *
+     * @event
+     * @param {!Guacamole.KeyEventInterpreter.KeyEventBatch}
+     */
+    interpreter.onBatch = null;
+
+    /**
+     * Handles a raw key event, potentially appending typed text to the
+     * current batch, and calling onBatch with the current batch, if the
+     * callback is set and a new batch is about to be started.
+     *
+     * @param {!string[]} args
+     *     The arguments of the key event.
+     */
+    interpreter.handleKeyEvent = function handleKeyEvent(args) {","[{'comment': 'Does JSDoc correctly generate the docs for this, etc. when the function is added to the object via `interpreter.nameOfTheThing` instead of `this.nameOfTheThing`?', 'commenter': 'mike-jumper'}]"
908,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -96,6 +96,21 @@ Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, st
          */
         this.modifier = template.modifier || false;
 
+        /**
+         * Whether this key should always be printed by name AND rendered
+         * directly, if directly typed. Any directly-typed key that has this
+         * flag set to true will result in the value of the key being rendered
+         * directly, followed by the name being printed as if it was a
+         * non-printable or non-typed character.
+         *
+         * If the key was not directly typed, this flag will have no effect on
+         * behavior.
+         *
+         * @type {!boolean}
+         * @default false
+         */
+        this.printAndRender = template.printAndRender || false;","[{'comment': ""~I'm on the fence regarding this being something `Guacamole.KeyEventInterpreter` should represent and decide. My initial thinking would be that this should be an implementation decision.~\r\n\r\n~Thoughts?~"", 'commenter': 'mike-jumper'}, {'comment': ""Never mind - I see this is part of something that's `@private` _and_ only ever feeds into the `simpleText` convenience value. Implementations are still free to do whatever they wish."", 'commenter': 'mike-jumper'}]"
908,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -317,6 +332,19 @@ Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, st
 
     }
 
+    /**
+     * Return a formatted, display-ready name for the provided key definition.
+     *
+     * @param {KeyDefinition} keyDefinition
+     *     A key definition to return the formatted name for.
+     *
+     * @returns
+     *     The formatted, display-ready name of the provided key definition.
+     */
+    function getPrintedKeyName(keyDefinition) {","[{'comment': 'This should be annotated `@private`.', 'commenter': 'mike-jumper'}]"
908,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -424,6 +452,29 @@ Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, st
                 var keyText;
                 var typed;
 
+                // If this key should be both printed and rendered
+                if (keyDefinition.value != null && keyDefinition.printAndRender) {
+
+                    // The printed name of the key
+                    var printedValue = getPrintedKeyName(keyDefinition);
+
+                    // The directly rendered value
+                    var renderedValue = keyDefinition.value;
+
+                    // Display the name first, followed by the value
+                    currentBatch.simpleValue += printedValue;
+                    currentBatch.simpleValue += renderedValue;
+
+                    // Add pair of key events in the same order, with the name
+                    // displayed as non-typed to ensure proper styling
+                    currentBatch.events.push(new Guacamole.KeyEventInterpreter.KeyEvent(
+                        printedValue, false, relativeTimestap));
+                    currentBatch.events.push(new Guacamole.KeyEventInterpreter.KeyEvent(
+                        renderedValue, true, relativeTimestap));","[{'comment': ""I don't think individual events should possibly be split into multiple events purely for the sake of rendering, as it's not guacamole-common-js that should dictate that rendering.\r\n\r\nI think we should instead settle on a structure that represents both the expected typed result (if any) of a logical event and the keys pressed to produce that result, leaving it up to the implementation to decide how that is ultimately rendered."", 'commenter': 'mike-jumper'}, {'comment': 'So currently the `KeyEventIntepreter` is documented to ""produce human readable text batches"". \r\n\r\nIt sounds like you\'re advocating removing all of the rendering logic out of this service (i.e. everything that produces the `text` or `simpleValue` fields, modifier/shortcut tracking, probably even batch separation). This would be probably all move to a service in the webapp. \r\n\r\nI think that separation of concerns makes a lot of sense, though I was unsure how heavy handed I should be in changing the way the interpreter works.', 'commenter': 'jmuehlner'}, {'comment': ""It doesn't look like we've released this code yet, so it seems like it should be ok."", 'commenter': 'jmuehlner'}, {'comment': '@mike-jumper How does this look?', 'commenter': 'jmuehlner'}, {'comment': 'This looks much better to me.', 'commenter': 'mike-jumper'}]"
908,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -460,91 +253,85 @@ Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, st
      * incomplete, as more key events might be processed before the next
      * batch starts.
      *
-     * @returns {Guacamole.KeyEventInterpreter.KeyEventBatch}
+     * @returns {Guacamole.KeyEventInterpreter.KeyEvent[]}
      *     The current batch of text.
      */
-    this.getCurrentBatch = function getCurrentBatch() {
-        return currentBatch;
+    this.getEvents = function getEvents() {
+        return parsedEvents;
     };
+
 };
 
 /**
- * A granular description of an extracted key event, including a human-readable
- * text representation of the event, whether the event is directly typed or not,
- * and the timestamp when the event occured.
+ * A definition for a known key.
  *
  * @constructor
- * @param {!String} text
- *     A human-readable representation of the event.
- *
- * @param {!boolean} typed
- *     True if this event represents a directly-typed character, or false
- *     otherwise.
- *
- * @param {!Number} timestamp
- *     The timestamp from the recording when this event occured.
+ * @private
+ * @param {Guacamole.KeyEventInterpreter.KeyDefinition|object} [template={}]
+ *     The object whose properties should be copied within the new
+ *     KeyDefinition.
  */
-Guacamole.KeyEventInterpreter.KeyEvent = function KeyEvent(text, typed, timestamp) {
+Guacamole.KeyEventInterpreter.KeyDefinition = function KeyDefinition(template) {
+
+    // Use empty object by default
+    template = template || {};
 
     /**
-     * A human-readable representation of the event. If a printable character
-     * was directly typed, this will just be that character. Otherwise it will
-     * be a string describing the event.
-     *
-     * @type {!String}
+     * The X11 keysym of the key.
+     * @type {!number}
      */
-    this.text = text;
+    this.keysym = parseInt(template.keysym);
 
     /**
-     * True if this text of this event is exactly a typed character, or false
-     * otherwise.
-     *
-     * @type {!boolean}
+     * A human-readable name for the key.
+     * @type {!String}
      */
-    this.typed = typed;
+    this.name = template.name;
 
     /**
-     * The timestamp from the recording when this event occured. If a
-     * `startTimestamp` value was provided to the interpreter constructor, this
-     * will be relative to start of the recording. If not, it will be the raw
-     * timestamp from the key event.
-     *
-     * @type {!Number}
+     * The value which would be typed in a typical text editor, if any. If the
+     * key is not associated with any typeable value, this will be undefined.
+     * @type {String}
      */
-    this.timestamp = timestamp;
+    this.value = template.value;
 
 };
 
 /**
- * A series of intepreted key events, seperated by at least the configured
- * batchSeperation value from any other key events in the recording corresponding
- * to the interpreted key events. A batch will always consist of at least one key
- * event, and an associated simplified representation of the event(s).
+ * A granular description of an extracted key event, including a human-readable
+ * text representation of the event, whether the event is directly typed or not,
+ * and the timestamp when the event occured.
  *
  * @constructor
- * @param {!Guacamole.KeyEventInterpreter.KeyEvent[]} events
- *     The interpreted key events for this batch.
- *
- * @param {!String} simpleValue
- *     The simplified, human-readable value representing the key events for
- *     this batch.
+ * @param {Guacamole.KeyEventInterpreter.KeyDefinition|object} [template={}]","[{'comment': '`Guacamole.KeyEventInterpreter.KeyEvent`*?', 'commenter': 'mike-jumper'}, {'comment': 'Yes!', 'commenter': 'jmuehlner'}]"
908,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -460,91 +253,85 @@ Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, st
      * incomplete, as more key events might be processed before the next
      * batch starts.
      *
-     * @returns {Guacamole.KeyEventInterpreter.KeyEventBatch}
+     * @returns {Guacamole.KeyEventInterpreter.KeyEvent[]}
      *     The current batch of text.
      */
-    this.getCurrentBatch = function getCurrentBatch() {
-        return currentBatch;
+    this.getEvents = function getEvents() {
+        return parsedEvents;
     };
+
 };
 
 /**
- * A granular description of an extracted key event, including a human-readable
- * text representation of the event, whether the event is directly typed or not,
- * and the timestamp when the event occured.
+ * A definition for a known key.
  *
  * @constructor
- * @param {!String} text
- *     A human-readable representation of the event.
- *
- * @param {!boolean} typed
- *     True if this event represents a directly-typed character, or false
- *     otherwise.
- *
- * @param {!Number} timestamp
- *     The timestamp from the recording when this event occured.
+ * @private
+ * @param {Guacamole.KeyEventInterpreter.KeyDefinition|object} [template={}]
+ *     The object whose properties should be copied within the new
+ *     KeyDefinition.
  */
-Guacamole.KeyEventInterpreter.KeyEvent = function KeyEvent(text, typed, timestamp) {
+Guacamole.KeyEventInterpreter.KeyDefinition = function KeyDefinition(template) {
+
+    // Use empty object by default
+    template = template || {};
 
     /**
-     * A human-readable representation of the event. If a printable character
-     * was directly typed, this will just be that character. Otherwise it will
-     * be a string describing the event.
-     *
-     * @type {!String}
+     * The X11 keysym of the key.
+     * @type {!number}
      */
-    this.text = text;
+    this.keysym = parseInt(template.keysym);
 
     /**
-     * True if this text of this event is exactly a typed character, or false
-     * otherwise.
-     *
-     * @type {!boolean}
+     * A human-readable name for the key.
+     * @type {!String}
      */
-    this.typed = typed;
+    this.name = template.name;
 
     /**
-     * The timestamp from the recording when this event occured. If a
-     * `startTimestamp` value was provided to the interpreter constructor, this
-     * will be relative to start of the recording. If not, it will be the raw
-     * timestamp from the key event.
-     *
-     * @type {!Number}
+     * The value which would be typed in a typical text editor, if any. If the
+     * key is not associated with any typeable value, this will be undefined.
+     * @type {String}
      */
-    this.timestamp = timestamp;
+    this.value = template.value;
 
 };
 
 /**
- * A series of intepreted key events, seperated by at least the configured
- * batchSeperation value from any other key events in the recording corresponding
- * to the interpreted key events. A batch will always consist of at least one key
- * event, and an associated simplified representation of the event(s).
+ * A granular description of an extracted key event, including a human-readable
+ * text representation of the event, whether the event is directly typed or not,
+ * and the timestamp when the event occured.
  *
  * @constructor
- * @param {!Guacamole.KeyEventInterpreter.KeyEvent[]} events
- *     The interpreted key events for this batch.
- *
- * @param {!String} simpleValue
- *     The simplified, human-readable value representing the key events for
- *     this batch.
+ * @param {Guacamole.KeyEventInterpreter.KeyDefinition|object} [template={}]
+ *     The object whose properties should be copied within the new
+ *     KeyDefinition.
  */
-Guacamole.KeyEventInterpreter.KeyEventBatch = function KeyEventBatch(events, simpleValue) {
+Guacamole.KeyEventInterpreter.KeyEvent = function KeyEvent(template) {
+
+    // Use empty object by default
+    template = template || {};
 
     /**
-     * All key events for this batch.
+     * The key definition for the pressed key.
      *
-     * @type {!Guacamole.KeyEventInterpreter.KeyEvent[]}
+     * @type {!Guacamole.KeyEventInterpreter.KeyDefinition}
      */
-    this.events = events || [];
+    this.definition = template.definition;","[{'comment': '`Guacamole.KeyEventInterpreter.KeyDefinition` is marked as `@private`, but this property is public.', 'commenter': 'mike-jumper'}, {'comment': ""Ah, right you are. It shouldn't be private."", 'commenter': 'jmuehlner'}]"
908,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -460,91 +253,84 @@ Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, st
      * incomplete, as more key events might be processed before the next
      * batch starts.
      *
-     * @returns {Guacamole.KeyEventInterpreter.KeyEventBatch}
+     * @returns {Guacamole.KeyEventInterpreter.KeyEvent[]}
      *     The current batch of text.
      */
-    this.getCurrentBatch = function getCurrentBatch() {
-        return currentBatch;
+    this.getEvents = function getEvents() {
+        return parsedEvents;
     };
+
 };
 
 /**
- * A granular description of an extracted key event, including a human-readable
- * text representation of the event, whether the event is directly typed or not,
- * and the timestamp when the event occured.
+ * A definition for a known key.
  *
  * @constructor
- * @param {!String} text
- *     A human-readable representation of the event.
- *
- * @param {!boolean} typed
- *     True if this event represents a directly-typed character, or false
- *     otherwise.
- *
- * @param {!Number} timestamp
- *     The timestamp from the recording when this event occured.
+ * @param {Guacamole.KeyEventInterpreter.KeyDefinition|object} [template={}]
+ *     The object whose properties should be copied within the new
+ *     KeyDefinition.
  */
-Guacamole.KeyEventInterpreter.KeyEvent = function KeyEvent(text, typed, timestamp) {
+Guacamole.KeyEventInterpreter.KeyDefinition = function KeyDefinition(template) {
+
+    // Use empty object by default
+    template = template || {};
 
     /**
-     * A human-readable representation of the event. If a printable character
-     * was directly typed, this will just be that character. Otherwise it will
-     * be a string describing the event.
-     *
-     * @type {!String}
+     * The X11 keysym of the key.
+     * @type {!number}
      */
-    this.text = text;
+    this.keysym = parseInt(template.keysym);
 
     /**
-     * True if this text of this event is exactly a typed character, or false
-     * otherwise.
-     *
-     * @type {!boolean}
+     * A human-readable name for the key.
+     * @type {!String}
      */
-    this.typed = typed;
+    this.name = template.name;
 
     /**
-     * The timestamp from the recording when this event occured. If a
-     * `startTimestamp` value was provided to the interpreter constructor, this
-     * will be relative to start of the recording. If not, it will be the raw
-     * timestamp from the key event.
-     *
-     * @type {!Number}
+     * The value which would be typed in a typical text editor, if any. If the
+     * key is not associated with any typeable value, this will be undefined.
+     * @type {String}
      */
-    this.timestamp = timestamp;
+    this.value = template.value;
 
 };
 
 /**
- * A series of intepreted key events, seperated by at least the configured
- * batchSeperation value from any other key events in the recording corresponding
- * to the interpreted key events. A batch will always consist of at least one key
- * event, and an associated simplified representation of the event(s).
+ * A granular description of an extracted key event, including a human-readable
+ * text representation of the event, whether the event is directly typed or not,
+ * and the timestamp when the event occured.
  *
  * @constructor
- * @param {!Guacamole.KeyEventInterpreter.KeyEvent[]} events
- *     The interpreted key events for this batch.
- *
- * @param {!String} simpleValue
- *     The simplified, human-readable value representing the key events for
- *     this batch.
+ * @param {Guacamole.KeyEventInterpreter.KeyEvent|object} [template={}]
+ *     The object whose properties should be copied within the new
+ *     KeyDefinition.","[{'comment': 'KeyEvent*?', 'commenter': 'mike-jumper'}, {'comment': 'Yes', 'commenter': 'jmuehlner'}]"
908,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -283,7 +180,8 @@ Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, st
         var name = String.fromCharCode(codepoint);
 
         // Create and return the definition
-        return new KeyDefinition({keysym: keysym, name: name, value: name, modifier: false});
+        return new Guacamole.KeyEventInterpreter.KeyDefinition({
+                keysym: keysym, name: name, value: name, modifier: false});","[{'comment': '`Guacamole.KeyEventInterpreter.KeyDefinition` does not appear to have a `modifier` property that would be copied from this template (though such a property does seem handy).', 'commenter': 'mike-jumper'}, {'comment': ""Oops, indeed it doesn't. Removed."", 'commenter': 'jmuehlner'}]"
908,guacamole-common-js/src/main/webapp/modules/KeyEventInterpreter.js,"@@ -283,7 +179,8 @@ Guacamole.KeyEventInterpreter = function KeyEventInterpreter(batchSeperation, st
         var name = String.fromCharCode(codepoint);
 
         // Create and return the definition
-        return new KeyDefinition({keysym: keysym, name: name, value: name, modifier: false});
+        return new Guacamole.KeyEventInterpreter.KeyDefinition({
+                keysym: keysym, name: name, value: name);","[{'comment': ""```\r\n#17 31.59 [INFO] BUILD FAILURE\r\n#17 31.59 [INFO] ------------------------------------------------------------------------\r\n#17 31.59 [INFO] Total time:  30.193 s\r\n#17 31.59 [INFO] Finished at: 2023-09-27T17:49:53Z\r\n#17 31.59 [INFO] ------------------------------------------------------------------------\r\n#17 31.59 [ERROR] Failed to execute goal com.github.buckelieg:minify-maven-plugin:2.0.1:minify (default-minify) on project guacamole-common-js: java.lang.RuntimeException: JSCompiler errors\r\n#17 31.59 [ERROR] all.js:8606: ERROR - [JSC_PARSE_ERROR] Parse error. '}' expected\r\n#17 31.59 [ERROR]                 keysym: keysym, name: name, value: name);\r\n#17 31.59 [ERROR]                                                        ^\r\n#17 31.59 [ERROR] \r\n#17 31.59 [ERROR] -> [Help 1]\r\n```"", 'commenter': 'mike-jumper'}, {'comment': 'Oops, sorry. I think my IDE ate that closing brace. Should be fixed now.', 'commenter': 'jmuehlner'}, {'comment': '😋', 'commenter': 'mike-jumper'}]"
922,guacamole/src/main/frontend/src/app/player/directives/player.js,"@@ -179,6 +199,12 @@ angular.module('player').directive('guacPlayer', ['$injector', function guacPlay
          */
         var resumeAfterSeekRequest = false;
 
+        /**
+         * A scheduled timer to clean up the mouse activity CSS class, or null
+         * if no timer is scheduled.
+         */
+        var mouseActivityTimer = null;","[{'comment': ""I don't see anything assigning a value to this variable. Is this used?"", 'commenter': 'mike-jumper'}, {'comment': 'Oops, yeah, I lost the assignment when I refactored. let me fix that.', 'commenter': 'jmuehlner'}, {'comment': 'Fixed.', 'commenter': 'jmuehlner'}]"
922,guacamole/src/main/frontend/src/app/player/directives/player.js,"@@ -179,6 +199,12 @@ angular.module('player').directive('guacPlayer', ['$injector', function guacPlay
          */
         var resumeAfterSeekRequest = false;
 
+        /**
+         * A scheduled timer to clean up the mouse activity CSS class, or null
+         * if no timer is scheduled.
+         */","[{'comment': 'Please add `@type` annotation.', 'commenter': 'mike-jumper'}]"
922,guacamole/src/main/frontend/src/app/player/directives/player.js,"@@ -77,6 +79,24 @@
  */
 angular.module('player').directive('guacPlayer', ['$injector', function guacPlayer($injector) {
 
+    /**
+     * The number of milliseconds after the last detected mouse activity after
+     * which the associated CSS class should be removed.
+     */
+    const MOUSE_CLEANUP_DELAY = 4000;
+
+    /**
+     * The number of milliseconds after the last detected mouse activity before
+     * the cleanup timer to remove the associated CSS class should be scheduled.
+     */
+    const MOUSE_DEBOUNCE_DELAY = 250;
+
+    /**
+     * The number of milliseconds, after the debounce delay, before the mouse
+     * activity cleanup timer should run.
+     */
+    const MOUSE_CLEANUP_TIMER_DELAY = MOUSE_CLEANUP_DELAY - MOUSE_DEBOUNCE_DELAY;","[{'comment': 'Please add `@type` annotations.', 'commenter': 'mike-jumper'}]"
922,guacamole/src/main/frontend/src/app/player/directives/player.js,"@@ -401,6 +427,43 @@ angular.module('player').directive('guacPlayer', ['$injector', function guacPlay
         $scope.$on('$destroy', function playerDestroyed() {
             $scope.recording.pause();
             $scope.recording.abort();
+            mouseActivityTimer !== null && $window.clearTimeout(mouseActivityTimer);
+        });
+
+        /**
+         * Clean up the mouse movement class after no mouse activity has been
+         * detected for the appropriate time period.
+         */
+        const scheduleCleanupTimeout = _.debounce(() =>
+            mouseActivityTimer = $window.setTimeout(() => {
+                mouseActivityTimer = null;
+                $element.removeClass('recent-mouse-movement');
+            }, MOUSE_CLEANUP_TIMER_DELAY),
+
+            /*
+             * Only schedule the cleanup task after the mouse hasn't moved
+             * for a reasonable amount of time to ensure that the number of
+             * created cleanup timers remains reasonable.
+             */
+            MOUSE_DEBOUNCE_DELAY);","[{'comment': ""> ... to ensure that the number of created cleanup timers remains reasonable.\r\n\r\nIs this the case? I see `mouseActivityTimer` as tracking the most recent scheduled cleanup, and that it's cleared prior to scheduling any future cleanup. It looks like there will always be at most one registered timeout for cleanup."", 'commenter': 'mike-jumper'}, {'comment': ""Yeah, there will be at most once, I was referring more to the number of timers that are scheduled while the mouse is moving. I don't want to be constantly cancelling and rescheduling new timers on every mouse movement. In practice it doesn't seem to cause excessive CPU / memory usage or anything, just seems wasteful."", 'commenter': 'jmuehlner'}]"
927,doc/licenses/d3-path-3.1.0/README,"@@ -0,0 +1,8 @@
+d3-path (https://github.com/d3/d3-path)
+----------------------------------------------------------
+
+    Version: 3.1.0
+    From: 'Mike Bostock'
+    License(s):
+        BSD (bundled/d3-path-3.1.0/LICENSE)","[{'comment': 'Similar to:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/ac6e501eff8b11f0c4b9a5bad653e237b979b14d/doc/licenses/jakarta-jaxb-2.3.3/README#L7\r\n\r\nand:\r\n\r\nhttps://github.com/apache/guacamole-client/blob/ac6e501eff8b11f0c4b9a5bad653e237b979b14d/doc/licenses/woodstox-stax2-api-4.2/README#L7\r\n\r\nThis should be ""BSD 0-clause"" to differentiate it from the other BSD license variants. See: https://en.wikipedia.org/wiki/BSD_licenses', 'commenter': 'mike-jumper'}]"
927,doc/licenses/d3-shape-3.2.0/README,"@@ -0,0 +1,8 @@
+d3-path (https://github.com/d3/d3-shape)
+----------------------------------------------------------
+
+    Version: 3.2.0
+    From: 'Mike Bostock'
+    License(s):
+        BSD (bundled/d3-shape-3.2.0/LICENSE)","[{'comment': 'Same here - ""BSD 0-clause"".', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/directives/player.js,"@@ -187,6 +188,57 @@ angular.module('player').directive('guacPlayer', ['$injector', function guacPlay
          */
         $scope.showKeyLog = false;
 
+        /**
+         * The height, in pixels, of the SVG heatmap paths. Note that this is not
+         * necessarily the actual rendered height, just the initial size of the
+         * SVG path before any styling is applied.
+         */
+        $scope.HEATMAP_HEIGHT = 100;
+
+        /**
+         * The width, in pixels, of the SVG heatmap paths. Note that this is not
+         * necessarily the actual rendered width, just the initial size of the
+         * SVG path before any styling is applied.
+         */
+        $scope.HEATMAP_WIDTH = 1000;
+
+        /**
+         * The maximum number of key events per millisecond to display in the
+         * key event heatmap. Any key event rates exceeding this value will be
+         * capped at this rate to ensure that unsually large spikes don't make
+         * swamp the rest of the data.
+         *
+         * Note: This is 6 keys per second (events include both presses and
+         * releases) - equivalent to ~88 words per minute typed.
+         */
+        const KEY_EVENT_RATE_CAP = 12 / 1000;
+
+        /**
+         * The maximum number of frames per millisecond to display in the
+         * frame heatmap. Any frame rates exceeding this value will be
+         * capped at this rate to ensure that unsually large spikes don't make
+         * swamp the rest of the data.
+         */
+        const FRAME_RATE_CAP = 10 / 1000;","[{'comment': 'Please add `@type` annotations.', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/directives/player.js,"@@ -187,6 +188,57 @@ angular.module('player').directive('guacPlayer', ['$injector', function guacPlay
          */
         $scope.showKeyLog = false;
 
+        /**
+         * The height, in pixels, of the SVG heatmap paths. Note that this is not
+         * necessarily the actual rendered height, just the initial size of the
+         * SVG path before any styling is applied.
+         */
+        $scope.HEATMAP_HEIGHT = 100;
+
+        /**
+         * The width, in pixels, of the SVG heatmap paths. Note that this is not
+         * necessarily the actual rendered width, just the initial size of the
+         * SVG path before any styling is applied.
+         */
+        $scope.HEATMAP_WIDTH = 1000;
+
+        /**
+         * The maximum number of key events per millisecond to display in the
+         * key event heatmap. Any key event rates exceeding this value will be
+         * capped at this rate to ensure that unsually large spikes don't make
+         * swamp the rest of the data.
+         *
+         * Note: This is 6 keys per second (events include both presses and
+         * releases) - equivalent to ~88 words per minute typed.
+         */
+        const KEY_EVENT_RATE_CAP = 12 / 1000;
+
+        /**
+         * The maximum number of frames per millisecond to display in the
+         * frame heatmap. Any frame rates exceeding this value will be
+         * capped at this rate to ensure that unsually large spikes don't make
+         * swamp the rest of the data.
+         */
+        const FRAME_RATE_CAP = 10 / 1000;
+
+        /**
+         * An SVG path describing a smoothed curve that visualizes the relative
+         * number of frames rendered throughout the recording - i.e. a heatmap
+         * of screen updates.
+         *
+         * @type {String}
+         */
+        $scope.frameHeatmap = '';
+
+        /**
+         * An SVG path describing a smoothed curve that visualizes the relative
+         * number of key events recorded throughout the recording - i.e. a
+         * heatmap of key events.
+         *
+         * @type {String}
+         */
+        $scope.keyHeatmap = '';","[{'comment': 'These should be `@type {string}` (or `@type {!string}` if not nullable).', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/directives/player.js,"@@ -213,6 +265,22 @@ angular.module('player').directive('guacPlayer', ['$injector', function guacPlay
          */
         var mouseActivityTimer = null;
 
+        /**
+         * The recording-relative timestamp of each frame of the recording that
+         * has been processed so far.
+         *
+         * @type {Number[]}
+         */
+        var frameTimestamps = [];
+
+        /**
+         * The recording-relative timestamp of each text event that has been
+         * processed so far.
+         *
+         * @type {Number[]}
+         */
+        var keyTimestamps = [];","[{'comment': 'These should be `@type {number[]}` (or `@type {!number[]}` if not nullable).', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/services/playerHeatmapService.js,"@@ -0,0 +1,264 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * 'License'); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import { curveCatmullRom } from 'd3-shape';
+import { path } from 'd3-path';
+
+/**
+ * A service for generating heat maps of activity levels per time interval,
+ * for session recording playback.
+ */
+angular.module('player').factory('playerHeatmapService', [() => {
+
+    /**
+     * A default, relatively-gentle Gaussian smoothing kernel. This kernel
+     * should help heatmaps look a bit less jagged, while not reducing fidelity
+     * very much.
+     *
+     * @type {Number[]}","[{'comment': 'This should be `@type {!number[]}`.', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/services/playerHeatmapService.js,"@@ -0,0 +1,264 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * 'License'); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import { curveCatmullRom } from 'd3-shape';
+import { path } from 'd3-path';
+
+/**
+ * A service for generating heat maps of activity levels per time interval,
+ * for session recording playback.
+ */
+angular.module('player').factory('playerHeatmapService', [() => {
+
+    /**
+     * A default, relatively-gentle Gaussian smoothing kernel. This kernel
+     * should help heatmaps look a bit less jagged, while not reducing fidelity
+     * very much.
+     *
+     * @type {Number[]}
+     */
+    const GAUSSIAN_KERNEL = [0.0013, 0.1573, 0.6827, 0.1573, 0.0013];
+
+    /**
+     * The number of buckets that a series of activity timestamps should be
+     * divided into.
+     *
+     * @type {Number}","[{'comment': 'This should be `@type {!number}`.', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/services/playerHeatmapService.js,"@@ -0,0 +1,264 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * 'License'); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import { curveCatmullRom } from 'd3-shape';
+import { path } from 'd3-path';
+
+/**
+ * A service for generating heat maps of activity levels per time interval,
+ * for session recording playback.
+ */
+angular.module('player').factory('playerHeatmapService', [() => {
+
+    /**
+     * A default, relatively-gentle Gaussian smoothing kernel. This kernel
+     * should help heatmaps look a bit less jagged, while not reducing fidelity
+     * very much.
+     *
+     * @type {Number[]}
+     */
+    const GAUSSIAN_KERNEL = [0.0013, 0.1573, 0.6827, 0.1573, 0.0013];
+
+    /**
+     * The number of buckets that a series of activity timestamps should be
+     * divided into.
+     *
+     * @type {Number}
+     */
+    const NUM_BUCKETS = 100;
+
+    /**
+     * Given a list of values to smooth out, produce a smoothed data set with
+     * the same length as the original provided list.
+     *
+     * @param {!Number[]} values","[{'comment': 'This should be `@type {number[]}` (or `@type {!number[]}` if `null` is not tolerated).', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/services/playerHeatmapService.js,"@@ -0,0 +1,264 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * 'License'); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import { curveCatmullRom } from 'd3-shape';
+import { path } from 'd3-path';
+
+/**
+ * A service for generating heat maps of activity levels per time interval,
+ * for session recording playback.
+ */
+angular.module('player').factory('playerHeatmapService', [() => {
+
+    /**
+     * A default, relatively-gentle Gaussian smoothing kernel. This kernel
+     * should help heatmaps look a bit less jagged, while not reducing fidelity
+     * very much.
+     *
+     * @type {Number[]}
+     */
+    const GAUSSIAN_KERNEL = [0.0013, 0.1573, 0.6827, 0.1573, 0.0013];
+
+    /**
+     * The number of buckets that a series of activity timestamps should be
+     * divided into.
+     *
+     * @type {Number}
+     */
+    const NUM_BUCKETS = 100;
+
+    /**
+     * Given a list of values to smooth out, produce a smoothed data set with
+     * the same length as the original provided list.
+     *
+     * @param {!Number[]} values
+     *     The list of histogram values to smooth out.
+     *
+     * @returns
+     *     The smoothed value array.","[{'comment': 'Please add return type.', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/services/playerHeatmapService.js,"@@ -0,0 +1,264 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * 'License'); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import { curveCatmullRom } from 'd3-shape';
+import { path } from 'd3-path';
+
+/**
+ * A service for generating heat maps of activity levels per time interval,
+ * for session recording playback.
+ */
+angular.module('player').factory('playerHeatmapService', [() => {
+
+    /**
+     * A default, relatively-gentle Gaussian smoothing kernel. This kernel
+     * should help heatmaps look a bit less jagged, while not reducing fidelity
+     * very much.
+     *
+     * @type {Number[]}
+     */
+    const GAUSSIAN_KERNEL = [0.0013, 0.1573, 0.6827, 0.1573, 0.0013];
+
+    /**
+     * The number of buckets that a series of activity timestamps should be
+     * divided into.
+     *
+     * @type {Number}
+     */
+    const NUM_BUCKETS = 100;
+
+    /**
+     * Given a list of values to smooth out, produce a smoothed data set with
+     * the same length as the original provided list.
+     *
+     * @param {!Number[]} values
+     *     The list of histogram values to smooth out.
+     *
+     * @returns
+     *     The smoothed value array.
+     */
+    function smooth(values) {
+
+        // The starting offset into the values array for each calculation
+        const lookBack = Math.floor(GAUSSIAN_KERNEL.length / 2);
+
+        // Apply the smoothing kernel to each value in the provided array
+        return _.map(values, (value, index) => {
+
+            // Total up the weighted values for each position in the kernel
+            return _.reduce(GAUSSIAN_KERNEL, (total, weight, kernelIndex) => {
+
+                // The offset into the original values array for the kernel
+                const valuesOffset = kernelIndex - lookBack;
+
+                // The position inside the original values array to be included
+                const valuesIndex = index + valuesOffset;
+
+                // If the contribution to the final smoothed value would be outside
+                // the bounds of the array, just use the original value instead
+                const contribution = ((valuesIndex >= 0) && valuesIndex < values.length)
+                        ? values[valuesIndex] : value;
+
+                // Use the provided weight from the kernel and add to the total
+                return total + (contribution * weight);
+
+            }, 0);
+
+        });
+    }
+
+    /**
+     * Given an array of values, with each value representing an activity count
+     * during a bucket of time, generate a smooth curve, scaled to PATH_HEIGHT
+     * height, and PATH_WIDTH width.
+     *
+     * @param {!Number[]} bucketizedData
+     *     The bucketized counts to create an SVG path from.
+     *
+     * @param {!Number} maxBucketValue
+     *     The size of the largest value in the bucketized data.
+     *
+     * @param {!Number} height
+     *     The target height, in pixels, of the highest point in the heatmap.
+     *
+     * @param {!Number} width
+     *     The target width, in pixels, of the heatmap.","[{'comment': 'Same here: `Number` -> `number`', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/services/playerHeatmapService.js,"@@ -0,0 +1,264 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * 'License'); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import { curveCatmullRom } from 'd3-shape';
+import { path } from 'd3-path';
+
+/**
+ * A service for generating heat maps of activity levels per time interval,
+ * for session recording playback.
+ */
+angular.module('player').factory('playerHeatmapService', [() => {
+
+    /**
+     * A default, relatively-gentle Gaussian smoothing kernel. This kernel
+     * should help heatmaps look a bit less jagged, while not reducing fidelity
+     * very much.
+     *
+     * @type {Number[]}
+     */
+    const GAUSSIAN_KERNEL = [0.0013, 0.1573, 0.6827, 0.1573, 0.0013];
+
+    /**
+     * The number of buckets that a series of activity timestamps should be
+     * divided into.
+     *
+     * @type {Number}
+     */
+    const NUM_BUCKETS = 100;
+
+    /**
+     * Given a list of values to smooth out, produce a smoothed data set with
+     * the same length as the original provided list.
+     *
+     * @param {!Number[]} values
+     *     The list of histogram values to smooth out.
+     *
+     * @returns
+     *     The smoothed value array.
+     */
+    function smooth(values) {
+
+        // The starting offset into the values array for each calculation
+        const lookBack = Math.floor(GAUSSIAN_KERNEL.length / 2);
+
+        // Apply the smoothing kernel to each value in the provided array
+        return _.map(values, (value, index) => {
+
+            // Total up the weighted values for each position in the kernel
+            return _.reduce(GAUSSIAN_KERNEL, (total, weight, kernelIndex) => {
+
+                // The offset into the original values array for the kernel
+                const valuesOffset = kernelIndex - lookBack;
+
+                // The position inside the original values array to be included
+                const valuesIndex = index + valuesOffset;
+
+                // If the contribution to the final smoothed value would be outside
+                // the bounds of the array, just use the original value instead
+                const contribution = ((valuesIndex >= 0) && valuesIndex < values.length)
+                        ? values[valuesIndex] : value;
+
+                // Use the provided weight from the kernel and add to the total
+                return total + (contribution * weight);
+
+            }, 0);
+
+        });
+    }
+
+    /**
+     * Given an array of values, with each value representing an activity count
+     * during a bucket of time, generate a smooth curve, scaled to PATH_HEIGHT
+     * height, and PATH_WIDTH width.
+     *
+     * @param {!Number[]} bucketizedData
+     *     The bucketized counts to create an SVG path from.
+     *
+     * @param {!Number} maxBucketValue
+     *     The size of the largest value in the bucketized data.
+     *
+     * @param {!Number} height
+     *     The target height, in pixels, of the highest point in the heatmap.
+     *
+     * @param {!Number} width
+     *     The target width, in pixels, of the heatmap.
+     *
+     * @returns
+     *     An SVG path representing a smooth curve, passing through all points
+     *     in the provided data.","[{'comment': 'Please add return type.', 'commenter': 'mike-jumper'}]"
927,guacamole/src/main/frontend/src/app/player/services/playerHeatmapService.js,"@@ -0,0 +1,264 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * 'License'); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import { curveCatmullRom } from 'd3-shape';
+import { path } from 'd3-path';
+
+/**
+ * A service for generating heat maps of activity levels per time interval,
+ * for session recording playback.
+ */
+angular.module('player').factory('playerHeatmapService', [() => {
+
+    /**
+     * A default, relatively-gentle Gaussian smoothing kernel. This kernel
+     * should help heatmaps look a bit less jagged, while not reducing fidelity
+     * very much.
+     *
+     * @type {Number[]}
+     */
+    const GAUSSIAN_KERNEL = [0.0013, 0.1573, 0.6827, 0.1573, 0.0013];
+
+    /**
+     * The number of buckets that a series of activity timestamps should be
+     * divided into.
+     *
+     * @type {Number}
+     */
+    const NUM_BUCKETS = 100;
+
+    /**
+     * Given a list of values to smooth out, produce a smoothed data set with
+     * the same length as the original provided list.
+     *
+     * @param {!Number[]} values
+     *     The list of histogram values to smooth out.
+     *
+     * @returns
+     *     The smoothed value array.
+     */
+    function smooth(values) {
+
+        // The starting offset into the values array for each calculation
+        const lookBack = Math.floor(GAUSSIAN_KERNEL.length / 2);
+
+        // Apply the smoothing kernel to each value in the provided array
+        return _.map(values, (value, index) => {
+
+            // Total up the weighted values for each position in the kernel
+            return _.reduce(GAUSSIAN_KERNEL, (total, weight, kernelIndex) => {
+
+                // The offset into the original values array for the kernel
+                const valuesOffset = kernelIndex - lookBack;
+
+                // The position inside the original values array to be included
+                const valuesIndex = index + valuesOffset;
+
+                // If the contribution to the final smoothed value would be outside
+                // the bounds of the array, just use the original value instead
+                const contribution = ((valuesIndex >= 0) && valuesIndex < values.length)
+                        ? values[valuesIndex] : value;
+
+                // Use the provided weight from the kernel and add to the total
+                return total + (contribution * weight);
+
+            }, 0);
+
+        });
+    }
+
+    /**
+     * Given an array of values, with each value representing an activity count
+     * during a bucket of time, generate a smooth curve, scaled to PATH_HEIGHT
+     * height, and PATH_WIDTH width.
+     *
+     * @param {!Number[]} bucketizedData
+     *     The bucketized counts to create an SVG path from.
+     *
+     * @param {!Number} maxBucketValue
+     *     The size of the largest value in the bucketized data.
+     *
+     * @param {!Number} height
+     *     The target height, in pixels, of the highest point in the heatmap.
+     *
+     * @param {!Number} width
+     *     The target width, in pixels, of the heatmap.
+     *
+     * @returns
+     *     An SVG path representing a smooth curve, passing through all points
+     *     in the provided data.
+     */
+    function createPath(bucketizedData, maxBucketValue, height, width) {
+
+        // Calculate scaling factor to ensure that paths are all the same heigh
+        const yScalingFactor = height / maxBucketValue;
+
+        // Scale a given Y value appropriately
+        const scaleYValue = yValue => height - (yValue * yScalingFactor);
+
+        // Calculate scaling factor to ensure that paths are all the same width
+        const xScalingFactor = width / bucketizedData.length;
+
+        // Construct a continuous curved path
+        const curvedPath = path();
+        const curve = curveCatmullRom(curvedPath);
+
+        curve.lineStart();
+
+        // Add all the data points
+        for (let i = 0; i < bucketizedData.length; i++) {
+
+            // Scale up the x value to hit the target width
+            const x = xScalingFactor * i;
+
+            // Scale and invert the height for display
+            const y = scaleYValue(bucketizedData[i]);
+
+            // Add the scaled point
+            curve.point(x, y);
+
+        }
+
+        // Move back to 0 to complete the path
+        curve.lineEnd();
+        curvedPath.lineTo(width, scaleYValue(0));
+
+        // Generate the SVG path for this curve
+        const rawPathText = curvedPath.toString();
+
+        // The SVG path as generated by D3 starts with a move to the first data
+        // point. This means that when the path ends and the subpath is closed,
+        // it returns to the position of the first data point instead of the
+        // origin. To fix this, the initial move command is removed, and the
+        // path is amended to start at the origin. TODO: Find a better way to
+        // handle this.
+        const startAtOrigin = (
+
+            // Start at origin
+            'M0,' + scaleYValue(0) +
+
+            // Line to the first point in the curve, to close the shape
+            'L0,' + scaleYValue(bucketizedData[0])
+
+        );
+
+        // Strip off the first move command from the path
+        const strippedPathText = _.replace(rawPathText, /^[^C]*/, '');
+
+        return startAtOrigin + strippedPathText;
+    }
+
+    const service = {};
+
+    /**
+     * Given a raw array of timestamps indicating when events of a certain type
+     * occured during a record, generate and return a smoothed SVG path
+     * indicating how many events occured during each equal-length bucket.
+     *
+     * @param {!Number[]} timestamps
+     *     A raw array of timestamps, one for every relevant event. These
+     *     must be monotonically increasing.
+     *
+     * @param {!Number} duration
+     *     The duration over which the heatmap should apply. This value may
+     *     be greater than the maximum timestamp value, in which case the path
+     *     will drop to 0 after the last timestamp in the provided array.
+     *
+     * @param {Number} maxRate
+     *     The maximum number of events per millisecond that should be displayed
+     *     in the final path. Any rates over this amount will just be capped at
+     *     this value.
+     *
+     * @param {!Number} height
+     *     The target height, in pixels, of the highest point in the heatmap.
+     *
+     * @param {!Number} width
+     *     The target width, in pixels, of the heatmap.","[{'comment': 'Here, too: `Number` -> `number`', 'commenter': 'mike-jumper'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -127,21 +140,28 @@
         ""NAME_MOUSE_MODE_ABSOLUTE"" : ""Pantalla tàctil"",
         ""NAME_MOUSE_MODE_RELATIVE"" : ""Touchpad"",
 
-        ""SECTION_HEADER_CLIPBOARD""      : ""Portapapers"",
-        ""SECTION_HEADER_DEVICES""        : ""Dispositius"",
-        ""SECTION_HEADER_DISPLAY""        : ""Pantalla"",
-        ""SECTION_HEADER_FILE_TRANSFERS"" : ""Transferències de fitxers"",
-        ""SECTION_HEADER_INPUT_METHOD""   : ""Mètode d'entrada"",
-        ""SECTION_HEADER_MOUSE_MODE""     : ""Mode d'emulació del ratolí"",
+        ""SECTION_HEADER_CLIENT_MESSAGES"" : ""Missatges"",
+        ""SECTION_HEADER_CLIPBOARD""       : ""Porta-retalls"",
+        ""SECTION_HEADER_DEVICES""         : ""Dispositius"",
+        ""SECTION_HEADER_DISPLAY""         : ""Pantalla"",
+        ""SECTION_HEADER_FILE_TRANSFERS""  : ""Transferències de fitxers"",
+        ""SECTION_HEADER_INPUT_METHOD""    : ""Mètode d'entrada"",
+        ","[{'comment': 'Extra space in here...', 'commenter': 'necouchman'}, {'comment': 'Cleared the extra space', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -127,21 +140,28 @@
         ""NAME_MOUSE_MODE_ABSOLUTE"" : ""Pantalla tàctil"",
         ""NAME_MOUSE_MODE_RELATIVE"" : ""Touchpad"",
 
-        ""SECTION_HEADER_CLIPBOARD""      : ""Portapapers"",
-        ""SECTION_HEADER_DEVICES""        : ""Dispositius"",
-        ""SECTION_HEADER_DISPLAY""        : ""Pantalla"",
-        ""SECTION_HEADER_FILE_TRANSFERS"" : ""Transferències de fitxers"",
-        ""SECTION_HEADER_INPUT_METHOD""   : ""Mètode d'entrada"",
-        ""SECTION_HEADER_MOUSE_MODE""     : ""Mode d'emulació del ratolí"",
+        ""SECTION_HEADER_CLIENT_MESSAGES"" : ""Missatges"",
+        ""SECTION_HEADER_CLIPBOARD""       : ""Porta-retalls"",
+        ""SECTION_HEADER_DEVICES""         : ""Dispositius"",
+        ""SECTION_HEADER_DISPLAY""         : ""Pantalla"",
+        ""SECTION_HEADER_FILE_TRANSFERS""  : ""Transferències de fitxers"",
+        ""SECTION_HEADER_INPUT_METHOD""    : ""Mètode d'entrada"",
+        
+        ""SECTION_HEADER_MOUSE_MODE""      : ""Mode d'emulació del ratolí"",
 
+        ""TEXT_ANONYMOUS_USER_JOINED""      : ""Un usuari anònim s'ha afegit a la connexió."",
+        ""TEXT_ANONYMOUS_USER_LEFT""        : ""Un usuari anònim ha sortit de la connexió."",
         ""TEXT_ZOOM_AUTO_FIT""              : ""S'adapta automàticament a la finestra del navegador"",
         ""TEXT_CLIENT_STATUS_IDLE""         : ""Ociós."",
         ""TEXT_CLIENT_STATUS_CONNECTING""   : ""S'està connectant a Guacamole ..."",
         ""TEXT_CLIENT_STATUS_DISCONNECTED"" : ""Heu estat desconnectats."",
         ""TEXT_CLIENT_STATUS_UNSTABLE""     : ""La connexió de xarxa al servidor Guacamole sembla inestable."",
         ""TEXT_CLIENT_STATUS_WAITING""      : ""Connectat a Guacamole. Esperant resposta ..."",
+        ""TEXT_USER_JOINED""                : ""{USERNAME} s'ha afegit a la connexió."",
+        ""TEXT_USER_LEFT""                  : ""{USERNAME} ha sortit de la connexió."",
         ""TEXT_RECONNECT_COUNTDOWN""        : ""Re-conectant en {REMAINING} {REMAINING, plural, one{segon} other{segons}}..."",
         ""TEXT_FILE_TRANSFER_PROGRESS""     : ""{PROGRESS} {UNIT, select, b{B} kb{KB} mb{MB} gb{GB} other{}}"",
+        ""TEXT_CLIPBOARD_AWAITING_FOCUS""   : ""Feu clic per veure les dades del porta-retalls..."",","[{'comment': 'This section should be organized in alphabetical order. I know some of it was already out of order in the original file, but seems like a good opportunity to reorganize it.', 'commenter': 'necouchman'}, {'comment': 'Organized', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -50,7 +58,10 @@
     ""CLIENT"" : {
 
         ""ACTION_ACKNOWLEDGE""               : ""@:APP.ACTION_ACKNOWLEDGE"",
-        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""Esborra"",
+        ""ACTION_CANCEL""                    : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLEAR_CLIENT_MESSAGES""     : ""@:APP.ACTION_CLEAR"",
+        ""ACTION_CLEAR_COMPLETED_TRANSFERS"" : ""@:APP.ACTION_CLEAR"",
+        ""ACTION_CONTINUE""                  : ""@:APP.ACTION_CONTINUE"",","[{'comment': ""I don't think you need to specifically include this ones that reference other translations."", 'commenter': 'necouchman'}, {'comment': ""I just left them because i've seen other languages also have them. I thought that maybe without it, it would default to english."", 'commenter': 'divendres'}, {'comment': 'So, you think i can remove them all @necouchman ?', 'commenter': 'divendres'}, {'comment': 'Removed all the @APP lines', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -163,6 +183,80 @@
 
     },
 
+    ""IMPORT"": {
+
+        ""ACTION_ACKNOWLEDGE""        : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_BROWSE""             : ""Navega pels fitxers"",
+        ""ACTION_CANCEL""             : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLEAR""              : ""@:APP.ACTION_CLEAR"",
+        ""ACTION_VIEW_FORMAT_HELP""   : ""Veure l'ajuda de format"",
+        ""ACTION_IMPORT""             : ""@:APP.ACTION_IMPORT"",
+        ""ACTION_IMPORT_CONNECTIONS"" : ""Importa connexions"",
+
+        ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",","[{'comment': ""In this section, I think you can leave out the `@` references to other sections, unless you're seeing issues where this isn't translating things correctly?"", 'commenter': 'necouchman'}, {'comment': 'Removed all the @APP lines', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -163,6 +183,80 @@
 
     },
 
+    ""IMPORT"": {
+
+        ""ACTION_ACKNOWLEDGE""        : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_BROWSE""             : ""Navega pels fitxers"",
+        ""ACTION_CANCEL""             : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLEAR""              : ""@:APP.ACTION_CLEAR"",
+        ""ACTION_VIEW_FORMAT_HELP""   : ""Veure l'ajuda de format"",
+        ""ACTION_IMPORT""             : ""@:APP.ACTION_IMPORT"",
+        ""ACTION_IMPORT_CONNECTIONS"" : ""Importa connexions"",
+
+        ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"" : ""Fet"",
+
+        ""ERROR_AMBIGUOUS_CSV_HEADER""         : ""La capçalera \""{HEADER}\"" del CSV és ambigua, pot ser o bé un atribut de connexió o un paràmetre"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP""       : ""No es pot especificar el grup i el parentIdentifier alhora"",
+        ""ERROR_ARRAY_REQUIRED""               : ""El fitxer ha de contenir un llistat de connexions"",
+        ""ERROR_DETECTED_INVALID_TYPE""        : ""Tipus de fitxer no suportat. Assegureu-vos que és un fitxer CSV, JSON o YAML vàlid."",
+        ""ERROR_DUPLICATE_CONNECTION_IN_FILE"" : ""Nom de connexió \""{NAME}\"" duplicat a \""{PATH}\"" al fitxer d'importació"",
+        ""ERROR_DUPLICATE_CSV_HEADER""         : ""Capçalera duplicada al CSV: {HEADER}"",
+        ""ERROR_EMPTY_FILE""                   : ""El fitxer està buit"",
+        ""ERROR_INVALID_CSV_HEADER""           : ""La capçalera \""{HEADER}\"" del CSV no és vàlida, no és ni un atribut ni un paràmetre"",
+        ""ERROR_INVALID_MIME_TYPE""            : ""Tipus de fitxer no suportat: \""{TYPE}\"""",
+        ""ERROR_INVALID_GROUP""                : ""No s'ha trobat cap grup que coincideixi amb \""{GROUP}\"""",
+        ""ERROR_INVALID_GROUP_IDENTIFIER""     : ""No s'ha trobat cap grup de connexió amb l'identificador \""{IDENTIFIER}\"""",
+        ""ERROR_INVALID_GROUP_TYPE""           : ""El grup no és vàlid - ha de ser una cadena de text."",
+        ""ERROR_INVALID_PROTOCOL""             : ""El protocol no és vàlid \""{PROTOCOL}\"""",
+        ""ERROR_INVALID_USER_GROUPS_TYPE""     : ""El grup d'usuari no és vàlid - ha de ser un array d'identificadors de grup d'usuari."",
+        ""ERROR_INVALID_USERS_TYPE""           : ""Usuaris no vàlids - ha de ser un array d'identificadors d'usuari."",
+        ""ERROR_NO_FILE_SUPPLIED""             : ""Seleccioneu un fitxer per importar"",
+        ""ERROR_PARSE_FAILURE_CSV""            : ""Assegureu-vos que heu pujat un fitxer CSV vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_JSON""           : ""Assegureu-vos que heu pujat un fitxer JSON vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_YAML""           : ""Assegureu-vos que heu pujat un fitxer YAML vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_REJECT_UPDATE_CONNECTION""     : ""La connexió \""{NAME}\"" ja existeix a \""{PATH}\"""",
+        ""ERROR_REQUIRED_NAME_CONNECTION""     : ""El nom de connexió és obligatori"",
+        ""ERROR_REQUIRED_PROTOCOL_CONNECTION"" : ""El protocol de connexió és obligatori"",
+        ""ERROR_REQUIRED_NAME_FILE""           : ""No s'ha trobat el nom de la connexió al fitxer"",
+        ""ERROR_REQUIRED_PROTOCOL_FILE""       : ""No s'ha trobat el protocol de connexió al fitxer"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",","[{'comment': 'This should be below the `FIELD_HEADER` items to maintain alphabetical order.', 'commenter': 'necouchman'}, {'comment': 'Reorganized', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -163,6 +183,80 @@
 
     },
 
+    ""IMPORT"": {
+
+        ""ACTION_ACKNOWLEDGE""        : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_BROWSE""             : ""Navega pels fitxers"",
+        ""ACTION_CANCEL""             : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLEAR""              : ""@:APP.ACTION_CLEAR"",
+        ""ACTION_VIEW_FORMAT_HELP""   : ""Veure l'ajuda de format"",
+        ""ACTION_IMPORT""             : ""@:APP.ACTION_IMPORT"",
+        ""ACTION_IMPORT_CONNECTIONS"" : ""Importa connexions"",
+
+        ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"" : ""Fet"",
+
+        ""ERROR_AMBIGUOUS_CSV_HEADER""         : ""La capçalera \""{HEADER}\"" del CSV és ambigua, pot ser o bé un atribut de connexió o un paràmetre"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP""       : ""No es pot especificar el grup i el parentIdentifier alhora"",
+        ""ERROR_ARRAY_REQUIRED""               : ""El fitxer ha de contenir un llistat de connexions"",
+        ""ERROR_DETECTED_INVALID_TYPE""        : ""Tipus de fitxer no suportat. Assegureu-vos que és un fitxer CSV, JSON o YAML vàlid."",
+        ""ERROR_DUPLICATE_CONNECTION_IN_FILE"" : ""Nom de connexió \""{NAME}\"" duplicat a \""{PATH}\"" al fitxer d'importació"",
+        ""ERROR_DUPLICATE_CSV_HEADER""         : ""Capçalera duplicada al CSV: {HEADER}"",
+        ""ERROR_EMPTY_FILE""                   : ""El fitxer està buit"",
+        ""ERROR_INVALID_CSV_HEADER""           : ""La capçalera \""{HEADER}\"" del CSV no és vàlida, no és ni un atribut ni un paràmetre"",
+        ""ERROR_INVALID_MIME_TYPE""            : ""Tipus de fitxer no suportat: \""{TYPE}\"""",
+        ""ERROR_INVALID_GROUP""                : ""No s'ha trobat cap grup que coincideixi amb \""{GROUP}\"""",
+        ""ERROR_INVALID_GROUP_IDENTIFIER""     : ""No s'ha trobat cap grup de connexió amb l'identificador \""{IDENTIFIER}\"""",
+        ""ERROR_INVALID_GROUP_TYPE""           : ""El grup no és vàlid - ha de ser una cadena de text."",
+        ""ERROR_INVALID_PROTOCOL""             : ""El protocol no és vàlid \""{PROTOCOL}\"""",
+        ""ERROR_INVALID_USER_GROUPS_TYPE""     : ""El grup d'usuari no és vàlid - ha de ser un array d'identificadors de grup d'usuari."",
+        ""ERROR_INVALID_USERS_TYPE""           : ""Usuaris no vàlids - ha de ser un array d'identificadors d'usuari."",
+        ""ERROR_NO_FILE_SUPPLIED""             : ""Seleccioneu un fitxer per importar"",
+        ""ERROR_PARSE_FAILURE_CSV""            : ""Assegureu-vos que heu pujat un fitxer CSV vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_JSON""           : ""Assegureu-vos que heu pujat un fitxer JSON vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_YAML""           : ""Assegureu-vos que heu pujat un fitxer YAML vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_REJECT_UPDATE_CONNECTION""     : ""La connexió \""{NAME}\"" ja existeix a \""{PATH}\"""",
+        ""ERROR_REQUIRED_NAME_CONNECTION""     : ""El nom de connexió és obligatori"",
+        ""ERROR_REQUIRED_PROTOCOL_CONNECTION"" : ""El protocol de connexió és obligatori"",
+        ""ERROR_REQUIRED_NAME_FILE""           : ""No s'ha trobat el nom de la connexió al fitxer"",
+        ""ERROR_REQUIRED_PROTOCOL_FILE""       : ""No s'ha trobat el protocol de connexió al fitxer"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""FIELD_HEADER_EXISTING_CONNECTION_MODE"" : ""Substituir/Actualitzar les connexions existents"",
+        ""FIELD_HEADER_EXISTING_PERMISSION_MODE"" : ""Reinicia els permisos"",
+
+        ""HELP_CSV_DESCRIPTION""              : ""Un fitxer CSV d'importació de connexions ha de tenir un registre de connexió per línia. Cada columna especificarà un camp de la connexió. Com a mínim cal especificar el nom de la connexió i el protocol."",
+        ""HELP_CSV_EXAMPLE""                  : ""name,protocol,username,password,hostname,group,users,groups,guacd-encryption (attribute)\nconn1,vnc,alice,pass1,conn1.web.com,ROOT,guac user 1;guac user 2,Connection 1 Users,none\nconn2,rdp,bob,pass2,conn2.web.com,ROOT/Parent Group,guac user 1,,ssl\nconn3,ssh,carol,pass3,conn3.web.com,ROOT/Parent Group/Child Group,guac user 2;guac user 3,,\nconn4,kubernetes,,,,,,,"",
+        ""HELP_CSV_MORE_DETAILS""             : ""The CSV header for each row specifies the connection field. The connection group ID that the connection should be imported into may be directly specified with \""parentIdentifier\"", or the path to the parent group may be specified using \""group\"" as shown below. In most cases, there should be no conflict between fields, but if needed, an \"" (attribute)\"" or \"" (parameter)\"" suffix may be added to disambiguate. Lists of user or user group identifiers must be semicolon-separated.¹"",
+        ""HELP_FILE_TYPE_DESCRIPTION""        : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created. Note that any existing connection permissions will not be removed for updated connections, unless \""Reset permissions\"" is checked."",
+        ""HELP_FILE_TYPE_HEADER""             : ""Tipus de fitxers"",
+        ""HELP_JSON_DESCRIPTION""             : ""Un fitxer JSON d'importació de connexions conté una llista d'objectes de connexió. Com a mínim cal especificar el nom de la connexió i el protocol en cada objecte de connexió."",
+        ""HELP_JSON_EXAMPLE""                 : ""[\n  \\{\n    \""name\"": \""conn1\"",\n    \""protocol\"": \""vnc\"",\n    \""parameters\"": \\{ \""username\"": \""alice\"", \""password\"": \""pass1\"", \""hostname\"": \""conn1.web.com\"" \\},\n    \""parentIdentifier\"": \""ROOT\"",\n    \""users\"": [ \""guac user 1\"", \""guac user 2\"" ],\n    \""groups\"": [ \""Connection 1 Users\"" ],\n    \""attributes\"": \\{ \""guacd-encryption\"": \""none\"" \\}\n  \\},\n  \\{\n    \""name\"": \""conn2\"",\n    \""protocol\"": \""rdp\"",\n    \""parameters\"": \\{ \""username\"": \""bob\"", \""password\"": \""pass2\"", \""hostname\"": \""conn2.web.com\"" \\},\n    \""group\"": \""ROOT/Parent Group\"",\n    \""users\"": [ \""guac user 1\"" ],\n    \""attributes\"": \\{ \""guacd-encryption\"": \""none\"" \\}\n  \\},\n  \\{\n    \""name\"": \""conn3\"",\n    \""protocol\"": \""ssh\"",\n    \""parameters\"": \\{ \""username\"": \""carol\"", \""password\"": \""pass3\"", \""hostname\"": \""conn3.web.com\"" \\},\n    \""group\"": \""ROOT/Parent Group/Child Group\"",\n    \""users\"": [ \""guac user 2\"", \""guac user 3\"" ]\n  \\},\n  \\{\n    \""name\"": \""conn4\"",\n    \""protocol\"": \""kubernetes\""\n  \\}\n]"",
+        ""HELP_JSON_MORE_DETAILS""            : ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+        ""HELP_EXISTING_CONNECTION_MODE""     : ""Entirely replace/update existing connections if their names and parent connection groups match the values in the provided file. If unchecked, attempting to import a connection with the same name and parent connection group of an existing connection will be considered an error."",
+        ""HELP_EXISTING_PERMISSION_MODE""     : ""Fully reset the permissions granted for all connections in the provided file to the permissions specified in that file. If no permissions are specified, all relevant connection permissions will be revoked. If unchecked, existing permissions are preserved, and any permissions specified in the file will be added."",
+        ""HELP_SEMICOLON_FOOTNOTE""           : ""Si cal, els punt i coma es poden escapar utilitzant una contrabarra, per exemple. \""first\\\\;last\"""",
+        ""HELP_UPLOAD_DROP_TITLE""            : ""Arrossegueu un fitxer aquí"",
+        ""HELP_UPLOAD_FILE_TYPES""            : ""CSV, JSON, o YAML"",
+        ""HELP_YAML_DESCRIPTION""             : ""Un fitxer YAML d'importació de connexions és una llista d'objectes de connexió amb exactament la mateixa estructura que el format JSON."",
+        ""HELP_YAML_EXAMPLE""                 : ""---\n  - name: conn1\n    protocol: vnc\n    parameters:\n      username: alice\n      password: pass1\n      hostname: conn1.web.com\n    group: ROOT\n    users:\n      - guac user 1\n      - guac user 2\n    groups:\n    - Connection 1 Users\n    attributes:\n      guacd-encryption: none\n  - name: conn2\n    protocol: rdp\n    parameters:\n      username: bob\n      password: pass2\n      hostname: conn2.web.com\n    group: ROOT/Parent Group\n    users:\n      - guac user 1\n    attributes:\n      guacd-encryption: none\n  - name: conn3\n    protocol: ssh\n    parameters:\n      username: carol\n      password: pass3\n      hostname: conn3.web.com\n    group: ROOT/Parent Group/Child Group\n    users:\n      - guac user 2\n      - guac user 3\n  - name: conn4\n    protocol: kubernetes"",","[{'comment': 'Several of the items in this section appear to have not been translated. Items that you are not translating should not be included in this file - it will automatically fall back to the English translation.', 'commenter': 'necouchman'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -163,6 +183,80 @@
 
     },
 
+    ""IMPORT"": {
+
+        ""ACTION_ACKNOWLEDGE""        : ""@:APP.ACTION_ACKNOWLEDGE"",
+        ""ACTION_BROWSE""             : ""Navega pels fitxers"",
+        ""ACTION_CANCEL""             : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_CLEAR""              : ""@:APP.ACTION_CLEAR"",
+        ""ACTION_VIEW_FORMAT_HELP""   : ""Veure l'ajuda de format"",
+        ""ACTION_IMPORT""             : ""@:APP.ACTION_IMPORT"",
+        ""ACTION_IMPORT_CONNECTIONS"" : ""Importa connexions"",
+
+        ""DIALOG_HEADER_ERROR""   : ""@:APP.DIALOG_HEADER_ERROR"",
+        ""DIALOG_HEADER_SUCCESS"" : ""Fet"",
+
+        ""ERROR_AMBIGUOUS_CSV_HEADER""         : ""La capçalera \""{HEADER}\"" del CSV és ambigua, pot ser o bé un atribut de connexió o un paràmetre"",
+        ""ERROR_AMBIGUOUS_PARENT_GROUP""       : ""No es pot especificar el grup i el parentIdentifier alhora"",
+        ""ERROR_ARRAY_REQUIRED""               : ""El fitxer ha de contenir un llistat de connexions"",
+        ""ERROR_DETECTED_INVALID_TYPE""        : ""Tipus de fitxer no suportat. Assegureu-vos que és un fitxer CSV, JSON o YAML vàlid."",
+        ""ERROR_DUPLICATE_CONNECTION_IN_FILE"" : ""Nom de connexió \""{NAME}\"" duplicat a \""{PATH}\"" al fitxer d'importació"",
+        ""ERROR_DUPLICATE_CSV_HEADER""         : ""Capçalera duplicada al CSV: {HEADER}"",
+        ""ERROR_EMPTY_FILE""                   : ""El fitxer està buit"",
+        ""ERROR_INVALID_CSV_HEADER""           : ""La capçalera \""{HEADER}\"" del CSV no és vàlida, no és ni un atribut ni un paràmetre"",
+        ""ERROR_INVALID_MIME_TYPE""            : ""Tipus de fitxer no suportat: \""{TYPE}\"""",
+        ""ERROR_INVALID_GROUP""                : ""No s'ha trobat cap grup que coincideixi amb \""{GROUP}\"""",
+        ""ERROR_INVALID_GROUP_IDENTIFIER""     : ""No s'ha trobat cap grup de connexió amb l'identificador \""{IDENTIFIER}\"""",
+        ""ERROR_INVALID_GROUP_TYPE""           : ""El grup no és vàlid - ha de ser una cadena de text."",
+        ""ERROR_INVALID_PROTOCOL""             : ""El protocol no és vàlid \""{PROTOCOL}\"""",
+        ""ERROR_INVALID_USER_GROUPS_TYPE""     : ""El grup d'usuari no és vàlid - ha de ser un array d'identificadors de grup d'usuari."",
+        ""ERROR_INVALID_USERS_TYPE""           : ""Usuaris no vàlids - ha de ser un array d'identificadors d'usuari."",
+        ""ERROR_NO_FILE_SUPPLIED""             : ""Seleccioneu un fitxer per importar"",
+        ""ERROR_PARSE_FAILURE_CSV""            : ""Assegureu-vos que heu pujat un fitxer CSV vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_JSON""           : ""Assegureu-vos que heu pujat un fitxer JSON vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_PARSE_FAILURE_YAML""           : ""Assegureu-vos que heu pujat un fitxer YAML vàlid. L'anàlisi ha fallat amb el següent error \""{ERROR}\"". "",
+        ""ERROR_REJECT_UPDATE_CONNECTION""     : ""La connexió \""{NAME}\"" ja existeix a \""{PATH}\"""",
+        ""ERROR_REQUIRED_NAME_CONNECTION""     : ""El nom de connexió és obligatori"",
+        ""ERROR_REQUIRED_PROTOCOL_CONNECTION"" : ""El protocol de connexió és obligatori"",
+        ""ERROR_REQUIRED_NAME_FILE""           : ""No s'ha trobat el nom de la connexió al fitxer"",
+        ""ERROR_REQUIRED_PROTOCOL_FILE""       : ""No s'ha trobat el protocol de connexió al fitxer"",
+
+        ""FIELD_PLACEHOLDER_FILTER"" : ""@:APP.FIELD_PLACEHOLDER_FILTER"",
+
+        ""FIELD_HEADER_EXISTING_CONNECTION_MODE"" : ""Substituir/Actualitzar les connexions existents"",
+        ""FIELD_HEADER_EXISTING_PERMISSION_MODE"" : ""Reinicia els permisos"",
+
+        ""HELP_CSV_DESCRIPTION""              : ""Un fitxer CSV d'importació de connexions ha de tenir un registre de connexió per línia. Cada columna especificarà un camp de la connexió. Com a mínim cal especificar el nom de la connexió i el protocol."",
+        ""HELP_CSV_EXAMPLE""                  : ""name,protocol,username,password,hostname,group,users,groups,guacd-encryption (attribute)\nconn1,vnc,alice,pass1,conn1.web.com,ROOT,guac user 1;guac user 2,Connection 1 Users,none\nconn2,rdp,bob,pass2,conn2.web.com,ROOT/Parent Group,guac user 1,,ssl\nconn3,ssh,carol,pass3,conn3.web.com,ROOT/Parent Group/Child Group,guac user 2;guac user 3,,\nconn4,kubernetes,,,,,,,"",
+        ""HELP_CSV_MORE_DETAILS""             : ""The CSV header for each row specifies the connection field. The connection group ID that the connection should be imported into may be directly specified with \""parentIdentifier\"", or the path to the parent group may be specified using \""group\"" as shown below. In most cases, there should be no conflict between fields, but if needed, an \"" (attribute)\"" or \"" (parameter)\"" suffix may be added to disambiguate. Lists of user or user group identifiers must be semicolon-separated.¹"",
+        ""HELP_FILE_TYPE_DESCRIPTION""        : ""Three file types are supported for connection import: CSV, JSON, and YAML. The same data may be specified by each file type. This must include the connection name and protocol. Optionally, a connection group location, a list of users and/or user groups to grant access, connection parameters, or connection protocols may also be specified. Any users or user groups that do not exist in the current data source will be automatically created. Note that any existing connection permissions will not be removed for updated connections, unless \""Reset permissions\"" is checked."",
+        ""HELP_FILE_TYPE_HEADER""             : ""Tipus de fitxers"",
+        ""HELP_JSON_DESCRIPTION""             : ""Un fitxer JSON d'importació de connexions conté una llista d'objectes de connexió. Com a mínim cal especificar el nom de la connexió i el protocol en cada objecte de connexió."",
+        ""HELP_JSON_EXAMPLE""                 : ""[\n  \\{\n    \""name\"": \""conn1\"",\n    \""protocol\"": \""vnc\"",\n    \""parameters\"": \\{ \""username\"": \""alice\"", \""password\"": \""pass1\"", \""hostname\"": \""conn1.web.com\"" \\},\n    \""parentIdentifier\"": \""ROOT\"",\n    \""users\"": [ \""guac user 1\"", \""guac user 2\"" ],\n    \""groups\"": [ \""Connection 1 Users\"" ],\n    \""attributes\"": \\{ \""guacd-encryption\"": \""none\"" \\}\n  \\},\n  \\{\n    \""name\"": \""conn2\"",\n    \""protocol\"": \""rdp\"",\n    \""parameters\"": \\{ \""username\"": \""bob\"", \""password\"": \""pass2\"", \""hostname\"": \""conn2.web.com\"" \\},\n    \""group\"": \""ROOT/Parent Group\"",\n    \""users\"": [ \""guac user 1\"" ],\n    \""attributes\"": \\{ \""guacd-encryption\"": \""none\"" \\}\n  \\},\n  \\{\n    \""name\"": \""conn3\"",\n    \""protocol\"": \""ssh\"",\n    \""parameters\"": \\{ \""username\"": \""carol\"", \""password\"": \""pass3\"", \""hostname\"": \""conn3.web.com\"" \\},\n    \""group\"": \""ROOT/Parent Group/Child Group\"",\n    \""users\"": [ \""guac user 2\"", \""guac user 3\"" ]\n  \\},\n  \\{\n    \""name\"": \""conn4\"",\n    \""protocol\"": \""kubernetes\""\n  \\}\n]"",
+        ""HELP_JSON_MORE_DETAILS""            : ""The connection group ID that the connection should be imported into may be directly specified with a \""parentIdentifier\"" field, or the path to the parent group may be specified using a \""group\"" field as shown below. An array of user and user group identifiers to grant access to may be specified per connection."",
+        ""HELP_EXISTING_CONNECTION_MODE""     : ""Entirely replace/update existing connections if their names and parent connection groups match the values in the provided file. If unchecked, attempting to import a connection with the same name and parent connection group of an existing connection will be considered an error."",
+        ""HELP_EXISTING_PERMISSION_MODE""     : ""Fully reset the permissions granted for all connections in the provided file to the permissions specified in that file. If no permissions are specified, all relevant connection permissions will be revoked. If unchecked, existing permissions are preserved, and any permissions specified in the file will be added."",
+        ""HELP_SEMICOLON_FOOTNOTE""           : ""Si cal, els punt i coma es poden escapar utilitzant una contrabarra, per exemple. \""first\\\\;last\"""",
+        ""HELP_UPLOAD_DROP_TITLE""            : ""Arrossegueu un fitxer aquí"",
+        ""HELP_UPLOAD_FILE_TYPES""            : ""CSV, JSON, o YAML"",
+        ""HELP_YAML_DESCRIPTION""             : ""Un fitxer YAML d'importació de connexions és una llista d'objectes de connexió amb exactament la mateixa estructura que el format JSON."",
+        ""HELP_YAML_EXAMPLE""                 : ""---\n  - name: conn1\n    protocol: vnc\n    parameters:\n      username: alice\n      password: pass1\n      hostname: conn1.web.com\n    group: ROOT\n    users:\n      - guac user 1\n      - guac user 2\n    groups:\n    - Connection 1 Users\n    attributes:\n      guacd-encryption: none\n  - name: conn2\n    protocol: rdp\n    parameters:\n      username: bob\n      password: pass2\n      hostname: conn2.web.com\n    group: ROOT/Parent Group\n    users:\n      - guac user 1\n    attributes:\n      guacd-encryption: none\n  - name: conn3\n    protocol: ssh\n    parameters:\n      username: carol\n      password: pass3\n      hostname: conn3.web.com\n    group: ROOT/Parent Group/Child Group\n    users:\n      - guac user 2\n      - guac user 3\n  - name: conn4\n    protocol: kubernetes"",
+
+        ""INFO_CONNECTIONS_IMPORTED_SUCCESS"" : ""{NUMBER} {NUMBER, plural, one{connexió importada} other{connexions importades}} correctament."",
+        
+        ""SECTION_HEADER_CONNECTION_IMPORT""           : ""Importa una connexió"",
+        ""SECTION_HEADER_HELP_CONNECTION_IMPORT_FILE"" : ""Format de fitxer d'importació de connexions"",","[{'comment': 'This should be down one line to maintain alphabetical order.', 'commenter': 'necouchman'}, {'comment': 'Reorganized', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -378,6 +472,22 @@
 
     },
 
+    ""PLAYER"" : {
+
+        ""ACTION_CANCEL""       : ""@:APP.ACTION_CANCEL"",
+        ""ACTION_PAUSE""        : ""@:APP.ACTION_PAUSE"",
+        ""ACTION_PLAY""         : ""@:APP.ACTION_PLAY"",","[{'comment': 'As with other sections, I do not believe this need to be directly included.', 'commenter': 'necouchman'}, {'comment': 'Removed all the @APP lines', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -406,10 +517,12 @@
         ""FIELD_HEADER_TYPESCRIPT_PATH"" : ""Ruta Typescript :"",
         ""FIELD_HEADER_USE_SSL""         : ""Usa SSL/TLS"",
 
+        ""FIELD_OPTION_BACKSPACE_EMPTY"" : """",","[{'comment': 'This need not be included, as it requires no translation.', 'commenter': 'necouchman'}, {'comment': 'Removed all ""_empty"" strings', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -406,10 +517,12 @@
         ""FIELD_HEADER_TYPESCRIPT_PATH"" : ""Ruta Typescript :"",
         ""FIELD_HEADER_USE_SSL""         : ""Usa SSL/TLS"",
 
+        ""FIELD_OPTION_BACKSPACE_EMPTY"" : """",
         ""FIELD_OPTION_BACKSPACE_8""     : ""Espai enrere (Ctrl-H)"",
         ""FIELD_OPTION_BACKSPACE_127""   : ""Eliminar (Ctrl-?)"",
 
         ""FIELD_OPTION_COLOR_SCHEME_BLACK_WHITE"" : ""Negre sobre blanc"",
+        ""FIELD_OPTION_COLOR_SCHEME_EMPTY""       : """",","[{'comment': 'No need to include this, as it requires no translation.', 'commenter': 'necouchman'}, {'comment': 'Removed', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -428,6 +541,7 @@
         ""FIELD_OPTION_FONT_SIZE_60""    : ""60"",
         ""FIELD_OPTION_FONT_SIZE_72""    : ""72"",
         ""FIELD_OPTION_FONT_SIZE_96""    : ""96"",
+        ""FIELD_OPTION_FONT_SIZE_EMPTY"" : """",","[{'comment': 'No need to include this, as it requires no translation.', 'commenter': 'necouchman'}, {'comment': 'Removed', 'commenter': 'divendres'}]"
930,guacamole/src/main/frontend/src/translations/ca.json,"@@ -518,55 +639,64 @@
         ""FIELD_HEADER_WOL_BROADCAST_ADDR"" : ""Adreça de difusió del paquet WoL:"",
         ""FIELD_HEADER_WOL_MAC_ADDR""       : ""Adreça MAC de l'amfitrió remot:"",
         ""FIELD_HEADER_WOL_SEND_PACKET""    : ""Enviar paquet WoL:"",
+        ""FIELD_HEADER_WOL_UDP_PORT""       : ""Port UDP pel paquet WoL: "",
         ""FIELD_HEADER_WOL_WAIT_TIME""      : ""Temps d'espera de l'arrencada d'amfitrió:"",
 
+        ""FIELD_OPTION_NORMALIZE_CLIPBOARD_EMPTY""    : """",","[{'comment': 'No need to include this.', 'commenter': 'necouchman'}, {'comment': 'Removed', 'commenter': 'divendres'}]"
