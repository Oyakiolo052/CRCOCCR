Pull,Path,Diff_hunk,Comment
193,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/fitting/SimpleCurveFitter.java,"@@ -187,10 +187,7 @@ public int compare(WeightedObservedPoint p1,
                         return comp;
                     }
                     comp = Double.compare(p1.getWeight(), p2.getWeight());","[{'comment': 'No need to store the result in `comp`. Just return the result direct.', 'commenter': 'aherbert'}, {'comment': 'yes, inline variable.\r\nTY', 'commenter': 'arturobernalg'}]"
196,commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/PairTest.java,"@@ -39,26 +39,26 @@ public void testAccessor2() {
 
         // Check that both APIs refer to the same data.
 
-        Assert.assertTrue(p.getFirst() == p.getKey());
-        Assert.assertTrue(p.getSecond() == p.getValue());
+        Assert.assertSame(p.getFirst(), p.getKey());
+        Assert.assertSame(p.getSecond(), p.getValue());
     }
 
     @Test
     public void testEquals() {
         Pair<Integer, Double> p1 = new Pair<>(null, null);
-        Assert.assertFalse(p1.equals(null));
+        Assert.assertNotEquals(null, p1);","[{'comment': '`p1` should be the first argument to allow the assert method to invoke `p1.equals(null)`', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/Array2DRowRealMatrixTest.java,"@@ -895,9 +895,9 @@ public void testEqualsAndHashCode() {
         Assert.assertEquals(m.hashCode(), m1.hashCode());
         Assert.assertEquals(m, m);
         Assert.assertEquals(m, m1);
-        Assert.assertFalse(m.equals(null));
-        Assert.assertFalse(m.equals(mt));
-        Assert.assertFalse(m.equals(new Array2DRowRealMatrix(bigSingular)));
+        Assert.assertNotEquals(null, m);","[{'comment': '`m` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockFieldMatrixTest.java,"@@ -1150,9 +1150,9 @@ public void testEqualsAndHashCode() {
         Assert.assertEquals(m.hashCode(), m1.hashCode());
         Assert.assertEquals(m, m);
         Assert.assertEquals(m, m1);
-        Assert.assertFalse(m.equals(null));
-        Assert.assertFalse(m.equals(mt));
-        Assert.assertFalse(m.equals(new BlockFieldMatrix<>(bigSingular)));
+        Assert.assertNotEquals(null, m);","[{'comment': '`m` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockRealMatrixTest.java,"@@ -1054,9 +1054,9 @@ public void testEqualsAndHashCode() {
         Assert.assertEquals(m.hashCode(), m1.hashCode());
         Assert.assertEquals(m, m);
         Assert.assertEquals(m, m1);
-        Assert.assertFalse(m.equals(null));
-        Assert.assertFalse(m.equals(mt));
-        Assert.assertFalse(m.equals(new BlockRealMatrix(bigSingular)));
+        Assert.assertNotEquals(null, m);","[{'comment': '`m` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/FieldMatrixImplTest.java,"@@ -867,9 +867,9 @@ public void testEqualsAndHashCode() {
         Assert.assertEquals(m.hashCode(), m1.hashCode());
         Assert.assertEquals(m, m);
         Assert.assertEquals(m, m1);
-        Assert.assertFalse(m.equals(null));
-        Assert.assertFalse(m.equals(mt));
-        Assert.assertFalse(m.equals(new Array2DRowFieldMatrix<>(bigSingular)));
+        Assert.assertNotEquals(null, m);","[{'comment': '`m` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorAbstractTest.java,"@@ -1337,11 +1337,11 @@ public void testCosineDimensionMismatch() {
     public void testEquals() {
         final RealVector v = create(new double[] { 0, 1, 2 });
 
-        Assert.assertTrue(v.equals(v));
-        Assert.assertTrue(v.equals(v.copy()));
-        Assert.assertFalse(v.equals(null));
-        Assert.assertFalse(v.equals(v.getSubVector(0, v.getDimension() - 1)));
-        Assert.assertTrue(v.equals(v.getSubVector(0, v.getDimension())));
+        Assert.assertEquals(v, v);
+        Assert.assertEquals(v, v.copy());
+        Assert.assertNotEquals(null, v);","[{'comment': '`v` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldMatrixTest.java,"@@ -568,9 +568,9 @@ public void testEqualsAndHashCode() {
         Assert.assertEquals(m.hashCode(), m1.hashCode());
         Assert.assertEquals(m, m);
         Assert.assertEquals(m, m1);
-        Assert.assertFalse(m.equals(null));
-        Assert.assertFalse(m.equals(mt));
-        Assert.assertFalse(m.equals(createSparseMatrix(bigSingular)));
+        Assert.assertNotEquals(null, m);","[{'comment': '`m` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealMatrixTest.java,"@@ -565,9 +565,9 @@ public void testEqualsAndHashCode() {
         Assert.assertEquals(m.hashCode(), m1.hashCode());
         Assert.assertEquals(m, m);
         Assert.assertEquals(m, m1);
-        Assert.assertFalse(m.equals(null));
-        Assert.assertFalse(m.equals(mt));
-        Assert.assertFalse(m.equals(createSparseMatrix(bigSingular)));
+        Assert.assertNotEquals(null, m);","[{'comment': '`m` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/optim/PointValuePairTest.java,"@@ -36,19 +36,19 @@ public void testSerial() {
     public void testEquals() {
         final double[] p1 = new double[] { 1 };
         final PointValuePair pv1 = new PointValuePair(p1, 2);
-        Assert.assertFalse(pv1.equals(null));
+        Assert.assertNotEquals(null, pv1);","[{'comment': '`pv1` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/rank/PSquarePercentileTest.java,"@@ -146,9 +146,9 @@ public void testMiscellaniousFunctionsInMarkers() {
                         Arrays.asList(new Double[] { 0.02, 1.18, 9.15, 21.91,
                                 38.62 }), p);
         // Markers equality
-        Assert.assertTrue(markers.equals(markers));
-        Assert.assertFalse(markers.equals(null));
-        Assert.assertFalse(markers.equals(""""));
+        Assert.assertEquals(markers, markers);
+        Assert.assertNotEquals(null, markers);","[{'comment': '`markers` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/rank/PSquarePercentileTest.java,"@@ -321,8 +321,8 @@ public void testMarkerHeightWithHigherIndex() {
     public void testPSquaredEqualsAndMin() {
         PSquarePercentile ptile = new PSquarePercentile(0);
         Assert.assertEquals(ptile, ptile);
-        Assert.assertFalse(ptile.equals(null));
-        Assert.assertFalse(ptile.equals(""""));
+        Assert.assertNotEquals(null, ptile);","[{'comment': '`ptile` should be the first argument', 'commenter': 'aherbert'}]"
196,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/rank/PSquarePercentileTest.java,"@@ -321,8 +321,8 @@ public void testMarkerHeightWithHigherIndex() {
     public void testPSquaredEqualsAndMin() {
         PSquarePercentile ptile = new PSquarePercentile(0);
         Assert.assertEquals(ptile, ptile);
-        Assert.assertFalse(ptile.equals(null));
-        Assert.assertFalse(ptile.equals(""""));
+        Assert.assertNotEquals(null, ptile);
+        Assert.assertNotEquals("""", ptile);","[{'comment': '`ptile` should be the first argument', 'commenter': 'aherbert'}]"
210,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolatingFunction.java,"@@ -317,49 +325,6 @@ private int searchIndex(double c, double[] val) {
         return r;
     }
 
-    /**
-     * Compute the spline coefficients from the list of function values and
-     * function partial derivatives values at the four corners of a grid
-     * element. They must be specified in the following order:
-     * <ul>
-     *  <li>f(0,0)</li>
-     *  <li>f(1,0)</li>
-     *  <li>f(0,1)</li>
-     *  <li>f(1,1)</li>
-     *  <li>f<sub>x</sub>(0,0)</li>
-     *  <li>f<sub>x</sub>(1,0)</li>
-     *  <li>f<sub>x</sub>(0,1)</li>
-     *  <li>f<sub>x</sub>(1,1)</li>
-     *  <li>f<sub>y</sub>(0,0)</li>
-     *  <li>f<sub>y</sub>(1,0)</li>
-     *  <li>f<sub>y</sub>(0,1)</li>
-     *  <li>f<sub>y</sub>(1,1)</li>
-     *  <li>f<sub>xy</sub>(0,0)</li>
-     *  <li>f<sub>xy</sub>(1,0)</li>
-     *  <li>f<sub>xy</sub>(0,1)</li>
-     *  <li>f<sub>xy</sub>(1,1)</li>
-     * </ul>
-     * where the subscripts indicate the partial derivative with respect to
-     * the corresponding variable(s).
-     *
-     * @param beta List of function values and function partial derivatives
-     * values.
-     * @return the spline coefficients.
-     */
-    private double[] computeSplineCoefficients(double[] beta) {
-        final double[] a = new double[NUM_COEFF];
-
-        for (int i = 0; i < NUM_COEFF; i++) {
-            double result = 0;
-            final double[] row = AINV[i];","[{'comment': 'Q. Why has this been replaced with the matrix multiply?\r\n\r\nUsing the Matrix objects is far less efficient.', 'commenter': 'aherbert'}, {'comment': 'I thought using the Matrix functionality would have made the code much clearer than reinventing the wheel.\r\nIf you want I can rollback it to the previous method (that was indeed multiplying the matrix with the column) but I would expect the matrix packages/classes to be as mush as efficient ... ', 'commenter': 'amoscatelli'}, {'comment': 'If you find the actual method in `org.apache.commons.math4.legacy.linear.Array2DRowRealMatrix.multiply` then you will see that it is not efficient at all. In my experience using the OO matrix classes is 5-10x slower than a manually written implementation that avoids defensive copying of all intermediate arrays.\r\n\r\nPlease revert the change as it is not required (functionality is the same).', 'commenter': 'aherbert'}, {'comment': 'I feel kinda sad.\r\nAnyway I reverted as you suggested !', 'commenter': 'amoscatelli'}]"
210,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolatingFunction.java,"@@ -322,4 +485,40 @@ private double apply(double[] pX, double[] pY, double[][] coeff) {
 
         return result;
     }
+
+    /**
+     * @return the partial derivative wrt {@code x}.
+     */
+    public BivariateFunction partialDerivativeX() {","[{'comment': 'These can all drop the public keyword.', 'commenter': 'aherbert'}, {'comment': 'Done!', 'commenter': 'amoscatelli'}]"
210,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolator.java,"@@ -41,6 +41,30 @@
  */
 public class BicubicInterpolator
     implements BivariateGridInterpolator {
+    /** Whether to initialize internal data used to compute the analytical
+    derivatives of the splines. */","[{'comment': 'Add ` * ` at the start of the line for correct javadoc formatting', 'commenter': 'aherbert'}, {'comment': 'Done!', 'commenter': 'amoscatelli'}]"
210,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolatingFunctionTest.java,"@@ -304,7 +304,7 @@ public void testSplinePartialDerivatives() {
             }
         }
 
-        final BicubicFunction f = new BicubicFunction(coeff, true);
+        final BicubicFunction f = new BicubicFunction(coeff, 1, 1, true);","[{'comment': 'Have you tested this when `xR` and `yR` are not 1? I would suggest simply repeating the test with `xR` and `yR` as  0.5 and 2 then testing the derivative is correctly scaled.\r\n', 'commenter': 'aherbert'}, {'comment': 'Look at testMatchingPartialDerivatives test.', 'commenter': 'amoscatelli'}, {'comment': 'That uses an interval of 1 / 20 for both axes. Perhaps update to have different step sizes for each axis. This will ensure xR and yR are not mixed up.', 'commenter': 'aherbert'}, {'comment': ""Done ! I updated that test to have different xval and yval array, and it's still working."", 'commenter': 'amoscatelli'}]"
210,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolatingFunctionTest.java,"@@ -286,6 +287,231 @@ public double value(double x, double y) {
                           maxTolerance,
                           false);
     }
+    
+    /**
+     * Test for partial derivatives of {@link BicubicSplineFunction}.","[{'comment': '`BicubicSplineFunction` does not exist; it should be `BicubicFunction`', 'commenter': 'aherbert'}, {'comment': 'Done!', 'commenter': 'amoscatelli'}]"
210,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolatingFunctionTest.java,"@@ -286,6 +287,231 @@ public double value(double x, double y) {
                           maxTolerance,
                           false);
     }
+    
+    /**
+     * Test for partial derivatives of {@link BicubicSplineFunction}.
+     * <p>
+     * f(x, y) = &Sigma;<sub>i</sub>&Sigma;<sub>j</sub> (i+1) (j+2) x<sup>i</sup> y<sup>j</sup>
+     */
+    @Test
+    public void testSplinePartialDerivatives() {
+        final int N = 4;
+        final double[] coeff = new double[16];
+
+        for (int i = 0; i < N; i++) {
+            for (int j = 0; j < N; j++) {
+                coeff[i + N * j] = (i + 1) * (j + 2);
+            }
+        }
+
+        final BicubicFunction f = new BicubicFunction(coeff, 1, 1, true);
+        BivariateFunction derivative;
+        final double x = 0.435;
+        final double y = 0.776;
+        final double tol = 1e-13;
+
+        derivative = new BivariateFunction() {
+                public double value(double x, double y) {
+                    final double x2 = x * x;
+                    final double y2 = y * y;
+                    final double y3 = y2 * y;
+                    final double yFactor = 2 + 3 * y + 4 * y2 + 5 * y3;
+                    return yFactor * (2 + 6 * x + 12 * x2);
+                }
+            };
+        Assert.assertEquals(""dFdX"", derivative.value(x, y),
+                            f.partialDerivativeX().value(x, y), tol);
+
+        derivative = new BivariateFunction() {
+                public double value(double x, double y) {
+                    final double x2 = x * x;
+                    final double x3 = x2 * x;
+                    final double y2 = y * y;
+                    final double xFactor = 1 + 2 * x + 3 * x2 + 4 * x3;
+                    return xFactor * (3 + 8 * y + 15 * y2);
+                }
+            };
+        Assert.assertEquals(""dFdY"", derivative.value(x, y),
+                            f.partialDerivativeY().value(x, y), tol);
+
+        derivative = new BivariateFunction() {
+                public double value(double x, double y) {
+                    final double y2 = y * y;
+                    final double y3 = y2 * y;
+                    final double yFactor = 2 + 3 * y + 4 * y2 + 5 * y3;
+                    return yFactor * (6 + 24 * x);
+                }
+            };
+        Assert.assertEquals(""d2FdX2"", derivative.value(x, y),
+                            f.partialDerivativeXX().value(x, y), tol);
+
+        derivative = new BivariateFunction() {
+                public double value(double x, double y) {
+                    final double x2 = x * x;
+                    final double x3 = x2 * x;
+                    final double xFactor = 1 + 2 * x + 3 * x2 + 4 * x3;
+                    return xFactor * (8 + 30 * y);
+                }
+            };
+        Assert.assertEquals(""d2FdY2"", derivative.value(x, y),
+                            f.partialDerivativeYY().value(x, y), tol);
+
+        derivative = new BivariateFunction() {
+                public double value(double x, double y) {
+                    final double x2 = x * x;
+                    final double y2 = y * y;
+                    final double yFactor = 3 + 8 * y + 15 * y2;
+                    return yFactor * (2 + 6 * x + 12 * x2);
+                }
+            };
+        Assert.assertEquals(""d2FdXdY"", derivative.value(x, y),
+                            f.partialDerivativeXY().value(x, y), tol);
+    }
+
+    /**
+     * Test that the partial derivatives computed from a
+     * {@link BicubicSplineInterpolatingFunction} match the input data.","[{'comment': '`BicubicSplineInterpolatingFunction` does not exist', 'commenter': 'aherbert'}, {'comment': 'Done!', 'commenter': 'amoscatelli'}]"
210,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolator.java,"@@ -41,6 +41,30 @@
  */
 public class BicubicInterpolator
     implements BivariateGridInterpolator {
+    /** Whether to initialize internal data used to compute the analytical
+    derivatives of the splines. */
+    private final boolean initializeDerivatives;
+
+    /**
+     * Default constructor.
+     * The argument {@link #BicubicSplineInterpolator(boolean) initializeDerivatives}","[{'comment': '`BicubicSplineInterpolator` does not exist', 'commenter': 'aherbert'}, {'comment': 'Done!', 'commenter': 'amoscatelli'}]"
210,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolator.java,"@@ -41,6 +41,30 @@
  */
 public class BicubicInterpolator
     implements BivariateGridInterpolator {
+    /** Whether to initialize internal data used to compute the analytical
+    derivatives of the splines. */
+    private final boolean initializeDerivatives;
+
+    /**
+     * Default constructor.
+     * The argument {@link #BicubicSplineInterpolator(boolean) initializeDerivatives}
+     * is set to {@code false}.
+     */
+    public BicubicInterpolator() {
+        this(false);
+    }
+
+    /**
+     * Creates an interpolator.
+     *
+     * @param initializeDerivatives Whether to initialize the internal data
+     * needed for calling any of the methods that compute the partial derivatives
+     * of the {@link BicubicSplineInterpolatingFunction function} returned from","[{'comment': '`BicubicSplineInterpolatingFunction` does not exist', 'commenter': 'aherbert'}, {'comment': 'Done!', 'commenter': 'amoscatelli'}]"
210,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolatingFunction.java,"@@ -181,6 +226,75 @@ public boolean isValidPoint(double x, double y) {
             y > yval[yval.length - 1]);
     }
 
+    /**
+     * @return the first partial derivative respect to x.
+     * @throws NullPointerException if the internal data were not initialized
+     * (cf. {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],","[{'comment': '`BicubicSplineInterpolatingFunction` does not exist. Please update all 5 references in the javadoc of this class to `BicubicInterpolatingFunction`', 'commenter': 'aherbert'}, {'comment': 'Done!', 'commenter': 'amoscatelli'}]"
216,commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet/twod/NeuronSquareMesh2DTest.java,"@@ -35,33 +35,39 @@
 import org.apache.commons.math4.neuralnet.Network;
 import org.apache.commons.math4.neuralnet.Neuron;
 import org.apache.commons.math4.neuralnet.SquareNeighbourhood;
+import org.junit.jupiter.api.function.Executable;
+
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
  * Tests for {@link NeuronSquareMesh2D} and {@link Network} functionality for
  * a two-dimensional network.
  */
 public class NeuronSquareMesh2DTest {
+
     private final UniformRandomProvider rng = RandomSource.SPLIT_MIX_64.create();
     private final FeatureInitializer init = FeatureInitializerFactory.uniform(rng, 0, 2);
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testMinimalNetworkSize1() {
         final FeatureInitializer[] initArray = {init};
 
-        new NeuronSquareMesh2D(1, false,
-                               2, false,
-                               SquareNeighbourhood.VON_NEUMANN,
-                               initArray);
+        final Executable testMethod = () -> new NeuronSquareMesh2D(1, false,","[{'comment': 'Again, remove `Executable`. It is good practice to have only one potential source for the exception inside the assertThrows lambda. E.g. this is bad as the exception could be from either line:\r\n```Java\r\nassertThrows(IllegalArgumentException.class, () -> {\r\n    ClassA a = new ClassA();\r\n    ClassB b = new ClassB(a);\r\n});\r\n```\r\nThis would be where we create object `a` outside the assertThrows and then isolate where we expect the exception (from `b`).\r\n\r\nSince we have a clean lambda function here then just put it in assertThrows.', 'commenter': 'aherbert'}]"
216,commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet/twod/NeuronSquareMesh2DTest.java,"@@ -36,32 +36,37 @@
 import org.apache.commons.math4.neuralnet.Neuron;
 import org.apache.commons.math4.neuralnet.SquareNeighbourhood;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 /**
  * Tests for {@link NeuronSquareMesh2D} and {@link Network} functionality for
  * a two-dimensional network.
  */
 public class NeuronSquareMesh2DTest {
+
     private final UniformRandomProvider rng = RandomSource.SPLIT_MIX_64.create();
     private final FeatureInitializer init = FeatureInitializerFactory.uniform(rng, 0, 2);
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testMinimalNetworkSize1() {
         final FeatureInitializer[] initArray = {init};
 
-        new NeuronSquareMesh2D(1, false,
-                               2, false,
-                               SquareNeighbourhood.VON_NEUMANN,
-                               initArray);
+        assertThrows(IllegalArgumentException.class, () ->
+                new NeuronSquareMesh2D(1, false,","[{'comment': 'In the case where the style has aligned trailing arguments can you try and keep to the formatting, e.g.\r\n```Java\r\n//                     | aligned here\r\nnew NeuronSquareMesh2D(1, false,\r\n                       2, false,\r\n                       SquareNeighbourhood.VON_NEUMANN,\r\n                       initArray));\r\n```\r\n\r\nThis alignment aids readability (for the original content creator, opinions may differ) and is used across the codebase. When not used then trailing lines are either 4 or 8 space indent.\r\n', 'commenter': 'aherbert'}, {'comment': ""done alignment, i'm just using IntelliJ auto formatting, if your aware of a Apache Commons Code Style file for IntelliJ it would make life easier in future."", 'commenter': 'nhojpatrick'}]"
217,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/ode/nonstiff/AdamsNordsieckFieldTransformer.java,"@@ -170,10 +170,8 @@ private AdamsNordsieckFieldTransformer(final Field<T> field, final int n) {
         // Nordsieck to multistep, then shifting rows to represent step advance
         // then applying inverse transform
         T[][] shiftedP = bigP.getData();
-        for (int i = shiftedP.length - 1; i > 0; --i) {
-            // shift rows
-            shiftedP[i] = shiftedP[i - 1];
-        }
+        // shift rows
+        if (shiftedP.length - 1 >= 0) System.arraycopy(shiftedP, 0, shiftedP, 1, shiftedP.length - 1);","[{'comment': '`> 0`', 'commenter': 'aherbert'}]"
217,commons-math-transform/src/main/java/org/apache/commons/math4/transform/FastCosineTransform.java,"@@ -181,7 +181,7 @@ private UnaryOperator<double[]> create(final Norm normalization,
         } else {
             return normalization == Norm.ORTHO ?
                 f -> TransformUtils.scaleInPlace(fct(f), Math.sqrt(2d / (f.length - 1))) :
-                f -> fct(f);
+                    this::fct;","[{'comment': 'Whitespace indentation', 'commenter': 'aherbert'}]"
217,commons-math-transform/src/main/java/org/apache/commons/math4/transform/FastSineTransform.java,"@@ -188,7 +188,7 @@ private UnaryOperator<double[]> create(final Norm normalization,
         } else {
             return normalization == Norm.ORTHO ?
                 f -> TransformUtils.scaleInPlace(fst(f), Math.sqrt(2d / f.length)) :
-                f -> fst(f);
+                    this::fst;","[{'comment': 'Indentation again', 'commenter': 'aherbert'}]"
217,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/differentiation/SparseGradient.java,"@@ -382,7 +360,7 @@ public SparseGradient signum() {
     public SparseGradient copySign(final SparseGradient sign) {
         final long m = Double.doubleToLongBits(value);
         final long s = Double.doubleToLongBits(sign.value);
-        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK","[{'comment': ""Didn't notice this before. I would not remove the extra parentheses as it makes it obvious over knowing the operator precedence of && over ||."", 'commenter': 'aherbert'}, {'comment': 'done.', 'commenter': 'arturobernalg'}]"
217,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/differentiation/SparseGradient.java,"@@ -393,7 +371,7 @@ public SparseGradient copySign(final SparseGradient sign) {
     public SparseGradient copySign(final double sign) {
         final long m = Double.doubleToLongBits(value);
         final long s = Double.doubleToLongBits(sign);
-        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK","[{'comment': 'Again please revert', 'commenter': 'aherbert'}, {'comment': 'done.', 'commenter': 'arturobernalg'}]"
217,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/fitting/SimpleCurveFitter.java,"@@ -318,8 +317,8 @@ private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint
         private boolean isBetween(double value,
                                   double boundary1,
                                   double boundary2) {
-            return (value >= boundary1 && value <= boundary2) ||","[{'comment': 'Please revert', 'commenter': 'aherbert'}, {'comment': 'done.', 'commenter': 'arturobernalg'}]"
217,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/ode/nonstiff/AdamsNordsieckFieldTransformer.java,"@@ -170,9 +170,9 @@ private AdamsNordsieckFieldTransformer(final Field<T> field, final int n) {
         // Nordsieck to multistep, then shifting rows to represent step advance
         // then applying inverse transform
         T[][] shiftedP = bigP.getData();
-        for (int i = shiftedP.length - 1; i > 0; --i) {
-            // shift rows
-            shiftedP[i] = shiftedP[i - 1];
+        // shift rows
+        if (shiftedP.length - 1 >= 0) {","[{'comment': 'use `> 0`', 'commenter': 'aherbert'}, {'comment': 'done.', 'commenter': 'arturobernalg'}]"
217,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/fitting/SimpleCurveFitter.java,"@@ -319,7 +318,7 @@ private boolean isBetween(double value,
                                   double boundary1,
                                   double boundary2) {
             return (value >= boundary1 && value <= boundary2) ||
-                (value >= boundary2 && value <= boundary1);
+                    (value >= boundary2 && value <= boundary1);","[{'comment': 'Please revert the indentation too', 'commenter': 'aherbert'}, {'comment': 'Done', 'commenter': 'arturobernalg'}]"
217,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/ml/clustering/ClusterEvaluator.java,"@@ -50,6 +50,6 @@ public interface ClusterEvaluator {
     static <T extends Clusterable> ClusterRanking ranking(ClusterEvaluator eval) {
         return eval.isBetterScore(1, 2) ?
             clusters -> 1 / eval.score(clusters) :
-            clusters -> eval.score(clusters);
+                eval::score;","[{'comment': 'This has incorrect indentation', 'commenter': 'aherbert'}, {'comment': 'Done', 'commenter': 'arturobernalg'}]"
219,commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/dfp/Dfp.java,"@@ -663,9 +663,7 @@ public Dfp getTwo() {
     /** Shift the mantissa left, and adjust the exponent to compensate.
      */
     protected void shiftLeft() {
-        for (int i = mant.length - 1; i > 0; i--) {
-            mant[i] = mant[i - 1];
-        }
+        if (mant.length - 1 >= 0) System.arraycopy(mant, 0, mant, 1, mant.length - 1);","[{'comment': 'use `> 0` as arraycopy with a length of 0 is a wasted call to a native method. Add enclosing braces to fix checkstyle.', 'commenter': 'aherbert'}]"
219,commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/dfp/Dfp.java,"@@ -675,9 +673,7 @@ uses shiftRight() */
     /** Shift the mantissa right, and adjust the exponent to compensate.
      */
     protected void shiftRight() {
-        for (int i = 0; i < mant.length - 1; i++) {
-            mant[i] = mant[i + 1];
-        }
+        if (mant.length - 1 >= 0) System.arraycopy(mant, 1, mant, 0, mant.length - 1);","[{'comment': '`> 0`', 'commenter': 'aherbert'}]"
219,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/function/Logit.java,"@@ -182,9 +182,7 @@ public DerivativeStructure value(final DerivativeStructure t)
             //  for x close to hi the signs will always be +inf)
             // this is probably overkill, since the call to compose at the end
             // of the method will transform most infinities into NaN ...
-            for (int i = 2; i < f.length; ++i) {
-                f[i] = f[i - 2];
-            }
+            if (f.length - 2 >= 0) System.arraycopy(f, 0, f, 2, f.length - 2);","[{'comment': '`> 0`', 'commenter': 'aherbert'}]"
219,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java,"@@ -752,9 +752,7 @@ private void updateBD(double negccov) {
      * @param val Current best fitness value.
      */
     private static void push(double[] vals, double val) {
-        for (int i = vals.length-1; i > 0; i--) {
-            vals[i] = vals[i-1];
-        }
+        if (vals.length - 1 >= 0) System.arraycopy(vals, 0, vals, 1, vals.length - 1);","[{'comment': '`> 0`', 'commenter': 'aherbert'}]"
219,commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/dfp/Dfp.java,"@@ -663,8 +663,8 @@ public Dfp getTwo() {
     /** Shift the mantissa left, and adjust the exponent to compensate.
      */
     protected void shiftLeft() {
-        for (int i = mant.length - 1; i > 0; i--) {
-            mant[i] = mant[i - 1];
+        if (mant.length - 1 >= 0) {","[{'comment': '`> 0`', 'commenter': 'aherbert'}, {'comment': 'This is still not updated to use ` > 0`', 'commenter': 'aherbert'}]"
219,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompiler.java,"@@ -1461,9 +1461,7 @@ public void cosh(final double[] operand, final int operandOffset,
         function[0] = JdkMath.cosh(operand[operandOffset]);
         if (order > 0) {
             function[1] = JdkMath.sinh(operand[operandOffset]);
-            for (int i = 2; i <= order; ++i) {","[{'comment': 'This is wrong', 'commenter': 'aherbert'}]"
219,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompiler.java,"@@ -1486,9 +1484,7 @@ public void sinh(final double[] operand, final int operandOffset,
         function[0] = JdkMath.sinh(operand[operandOffset]);
         if (order > 0) {
             function[1] = JdkMath.cosh(operand[operandOffset]);
-            for (int i = 2; i <= order; ++i) {","[{'comment': 'This is wrong', 'commenter': 'aherbert'}]"
219,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/function/Logit.java,"@@ -182,8 +182,8 @@ public DerivativeStructure value(final DerivativeStructure t)
             //  for x close to hi the signs will always be +inf)
             // this is probably overkill, since the call to compose at the end
             // of the method will transform most infinities into NaN ...
-            for (int i = 2; i < f.length; ++i) {","[{'comment': 'This is wrong. f[0 and f[1] have been set and should be duplicated through the array.', 'commenter': 'aherbert'}]"
219,src/main/resources/checkstyle/checkstyle-suppressions-legacy.xml,"@@ -44,7 +44,7 @@
   <suppress checks=""UnnecessaryParentheses"" files="".*[/\\]SparseGradient\.java$"" lines=""385,396"" />
   <suppress checks=""UnnecessaryParentheses"" files="".*[/\\]DerivativeStructure\.java$"" lines=""468,481"" />
   <suppress checks=""UnnecessaryParentheses"" files="".*[/\\]SimpleCurveFitter\.java$"" lines=""321-322"" />
-  <suppress checks=""UnnecessaryParentheses"" files="".*[/\\]LevenbergMarquardtOptimizer\.java$"" lines=""527,741"" />
+  <suppress checks=""UnnecessaryParentheses"" files="".*[/\\]LevenbergMarquardtOptimizer\.java$"" lines=""525,527,741"" />","[{'comment': 'Since you removed two lines above `527` this should be `""525,739""`. Please change and verify with `mvn checkstyle:check` in this module.', 'commenter': 'aherbert'}, {'comment': 'done.', 'commenter': 'arturobernalg'}]"
219,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/fitting/leastsquares/LevenbergMarquardtOptimizer.java,"@@ -738,9 +736,9 @@ private double determineLMParameter(double[] qy, double delta, double[] diag,
             // if the function is small enough, accept the current value
             // of lmPar, also test for the exceptional cases where parl is zero
             if (JdkMath.abs(fp) <= 0.1 * delta ||
-                (parl == 0 &&
+                 parl == 0 &&","[{'comment': 'Now you have fixed the checkstyle suppressions file, you can revert the changes to the parentheses', 'commenter': 'aherbert'}]"
219,commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/solvers/LaguerreSolver.java,"@@ -274,9 +274,7 @@ public Complex[] solveAll(Complex[] coefficients, Complex initial)
             }
             // Coefficients for deflated polynomial.
             final Complex[] c = new Complex[n + 1];
-            for (int i = 0; i <= n; i++) {
-                c[i] = coefficients[i];
-            }
+            System.arraycopy(coefficients, 0, c, 0, n + 1);","[{'comment': 'I think this may be better as:\r\n```Java\r\nfinal Complex[] c = coefficients.clone();\r\n```', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BigRealTest.java,"@@ -167,7 +167,7 @@ public void testEqualsAndHashCode() {
         BigReal nullReal = null;
         Assert.assertEquals(zero, zero);
         Assert.assertNotEquals(zero, nullReal);
-        Assert.assertFalse(zero.equals(Double.valueOf(0)));
+        Assert.assertNotEquals(zero, Double.valueOf(0), 0.0);","[{'comment': 'This is testing the `equals()` method. Please revert.', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/MultivariateSummaryStatisticsTest.java,"@@ -259,7 +259,7 @@ public void testEqualsAndHashCode() {
         int emptyHash = u.hashCode();
         Assert.assertEquals(u, u);
         Assert.assertNotEquals(u, t);
-        Assert.assertFalse(u.equals(Double.valueOf(0)));
+        Assert.assertNotEquals(u, Double.valueOf(0), 0.0);","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/MultivariateSummaryStatisticsTest.java,"@@ -271,8 +271,8 @@ public void testEqualsAndHashCode() {
         u.addValue(new double[] { 3d, 1d });
         u.addValue(new double[] { 4d, 1d });
         u.addValue(new double[] { 5d, 1d });
-        Assert.assertFalse(t.equals(u));
-        Assert.assertFalse(u.equals(t));
+        Assert.assertNotEquals(t, u);","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/MultivariateSummaryStatisticsTest.java,"@@ -281,15 +281,15 @@ public void testEqualsAndHashCode() {
         t.addValue(new double[] { 3d, 1d });
         t.addValue(new double[] { 4d, 1d });
         t.addValue(new double[] { 5d, 1d });
-        Assert.assertTrue(t.equals(u));
-        Assert.assertTrue(u.equals(t));
+        Assert.assertEquals(t, u);","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/MultivariateSummaryStatisticsTest.java,"@@ -281,15 +281,15 @@ public void testEqualsAndHashCode() {
         t.addValue(new double[] { 3d, 1d });
         t.addValue(new double[] { 4d, 1d });
         t.addValue(new double[] { 5d, 1d });
-        Assert.assertTrue(t.equals(u));
-        Assert.assertTrue(u.equals(t));
+        Assert.assertEquals(t, u);
+        Assert.assertEquals(u, t);
         Assert.assertEquals(u.hashCode(), t.hashCode());
 
         // Clear and make sure summaries are indistinguishable from empty summary
         u.clear();
         t.clear();
-        Assert.assertTrue(t.equals(u));
-        Assert.assertTrue(u.equals(t));
+        Assert.assertEquals(t, u);","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/ResizableDoubleArrayTest.java,"@@ -452,11 +452,11 @@ public void testEqualsAndHashCode() throws Exception {
         // Wrong type
         ResizableDoubleArray first = new ResizableDoubleArray();
         Double other = Double.valueOf(2);
-        Assert.assertFalse(first.equals(other));","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/ResizableDoubleArrayTest.java,"@@ -452,11 +452,11 @@ public void testEqualsAndHashCode() throws Exception {
         // Wrong type
         ResizableDoubleArray first = new ResizableDoubleArray();
         Double other = Double.valueOf(2);
-        Assert.assertFalse(first.equals(other));
+        Assert.assertNotEquals(first, other, 0.0);
 
         // Null
         other = null;
-        Assert.assertFalse(first.equals(other));","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/rank/PSquarePercentileTest.java,"@@ -124,8 +124,8 @@ public void testCopyConsistencyWithInitialFirstFewElements() {
                 (int) (testArray.length - index));
         // Check same
         // Explicit test of the equals method
-        Assert.assertTrue(master.equals(master));
-        Assert.assertTrue(replica.equals(replica));
+        Assert.assertEquals(master, master);","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/SummaryStatisticsTest.java,"@@ -161,7 +161,7 @@ public void testEqualsAndHashCode() {
         int emptyHash = u.hashCode();
         Assert.assertEquals(""reflexive"", u, u);
         Assert.assertNotEquals(""non-null compared to null"", u, t);
-        Assert.assertFalse(""wrong type"", u.equals(Double.valueOf(0)));
+        Assert.assertNotEquals(""wrong type"", u, Double.valueOf(0), 0.0);","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,"@@ -80,7 +80,7 @@ public void testEqualsAndHashCode() {
             (StorelessUnivariateStatistic) getUnivariateStatistic();
         StorelessUnivariateStatistic statistic2 = null;
 
-        Assert.assertFalse(""non-null, compared to null"", statistic.equals(statistic2));
+        Assert.assertNotEquals(""non-null, compared to null"", statistic, statistic2);","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}, {'comment': 'This still needs to be reverted. Thanks.', 'commenter': 'aherbert'}]"
223,commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/StatisticalSummaryValuesTest.java,"@@ -35,7 +35,7 @@ public void testEqualsAndHashCode() {
         StatisticalSummaryValues t = null;
         Assert.assertEquals(""reflexive"", u, u);
         Assert.assertNotEquals(""non-null compared to null"", u, t);
-        Assert.assertFalse(""wrong type"", u.equals(Double.valueOf(0)));
+        Assert.assertNotEquals(""wrong type"", u, Double.valueOf(0), 0.0);","[{'comment': 'This is testing `equals()`, please revert', 'commenter': 'aherbert'}]"
223,commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet/NeuronTest.java,"@@ -92,7 +92,7 @@ public void testCopy() {
         final Neuron copy = n.copy();
 
         // Check that original and copy have the same value.
-        Assert.assertTrue(n.getFeatures()[0] == copy.getFeatures()[0]);
+        Assert.assertEquals(n.getFeatures()[0], copy.getFeatures()[0], 0.0);","[{'comment': 'No delta required when delta==0.0', 'commenter': 'aherbert'}, {'comment': 'The method without delta its deprecated. `Deprecated\r\nUse assertEquals(double expected, double actual, double delta) instead` ', 'commenter': 'arturobernalg'}]"
