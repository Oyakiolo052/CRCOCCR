Pull,Path,Diff_hunk,Comment
516,soul-sync-data-center/soul-sync-data-zookeeper/src/test/java/org/dromara/soul/sync/data/zookeeper/ZookeeperSyncDataServiceTest.java,"@@ -0,0 +1,277 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.sync.data.zookeeper;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.I0Itec.zkclient.ZkClient;
+import org.apache.curator.test.TestingServer;
+import org.dromara.soul.common.constant.ZkPathConstants;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.ConditionData;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.dto.RuleData;
+import org.dromara.soul.common.dto.SelectorData;
+import org.dromara.soul.common.enums.MatchModeEnum;
+import org.dromara.soul.common.enums.OperatorEnum;
+import org.dromara.soul.common.enums.ParamTypeEnum;
+import org.dromara.soul.common.enums.PluginEnum;
+import org.dromara.soul.common.enums.SelectorTypeEnum;
+import org.dromara.soul.sync.data.api.AuthDataSubscriber;
+import org.dromara.soul.sync.data.api.MetaDataSubscriber;
+import org.dromara.soul.sync.data.api.PluginDataSubscriber;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mockito;
+","[{'comment': 'remove empty line', 'commenter': 'songyuequan'}]"
516,soul-sync-data-center/soul-sync-data-zookeeper/src/test/java/org/dromara/soul/sync/data/zookeeper/ZookeeperSyncDataServiceTest.java,"@@ -0,0 +1,271 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.sync.data.zookeeper;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.I0Itec.zkclient.ZkClient;
+import org.apache.curator.test.TestingServer;
+import org.dromara.soul.common.constant.ZkPathConstants;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.ConditionData;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.dto.RuleData;
+import org.dromara.soul.common.dto.SelectorData;
+import org.dromara.soul.common.enums.MatchModeEnum;
+import org.dromara.soul.common.enums.OperatorEnum;
+import org.dromara.soul.common.enums.ParamTypeEnum;
+import org.dromara.soul.common.enums.PluginEnum;
+import org.dromara.soul.common.enums.SelectorTypeEnum;
+import org.dromara.soul.sync.data.api.AuthDataSubscriber;
+import org.dromara.soul.sync.data.api.MetaDataSubscriber;
+import org.dromara.soul.sync.data.api.PluginDataSubscriber;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mockito;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+/**
+ * Test cases for ZookeeperSyncDataService.
+ *
+ * @author zendwang
+ */
+@Slf4j
+@SuppressWarnings(""all"")
+public final class ZookeeperSyncDataServiceTest {
+    
+    private static final Map<String, PluginData> PLUGIN_ZK_DTO_MAP = Maps.newConcurrentMap();
+    
+    private static TestingServer zkServer;
+    
+    private ZkClient zkClient;
+    
+    private ZookeeperSyncDataService syncDataService;
+    
+    @BeforeClass
+    public static void setUpBeforeClass() throws Exception {
+        zkServer = new TestingServer(21810, true);
+    }
+    
+    @Before
+    public void setUp() throws Exception {
+        zkClient = new ZkClient(""127.0.0.1:21810"");
+        buildZkData();
+        PluginDataSubscriber pluginDataSubscriber = Mockito.mock(PluginDataSubscriber.class);
+        MetaDataSubscriber metaDataSubscriber = Mockito.mock(MetaDataSubscriber.class);
+        List<MetaDataSubscriber> metaDataSubscribers = Lists.newArrayList(metaDataSubscriber);
+        AuthDataSubscriber authDataSubscriber = Mockito.mock(AuthDataSubscriber.class);
+        List<AuthDataSubscriber> authDataSubscribers = Lists.newArrayList(authDataSubscriber);
+        syncDataService = new ZookeeperSyncDataService(zkClient, pluginDataSubscriber, metaDataSubscribers, authDataSubscribers);
+    }
+    
+    @After
+    public void after() {
+        zkClient.close();
+        syncDataService.close();
+    }
+    
+    @AfterClass
+    public static void tearDown() throws Exception {
+        zkServer.stop();
+    }
+    
+    @SneakyThrows
+    @Test
+    public void testWatcherPlugin() {
+        PluginData pluginData = new PluginData(""6"", PluginEnum.DIVIDE.getName(), ""aaaaa"", 0, Boolean.TRUE);
+        writePlugin(pluginData);
+        final String pluginPath = ZkPathConstants.buildPluginPath(pluginData.getName());","[{'comment': 'Can you also test `onSubscribe ` method? I think we should verify the data from `PluginDataSubscriber`. similar in other places. Thanks.', 'commenter': 'dengliming'}, {'comment': 'ok,I will do it', 'commenter': 'zendwang'}]"
516,soul-sync-data-center/soul-sync-data-zookeeper/src/test/java/org/dromara/soul/sync/data/zookeeper/ZookeeperSyncDataServiceTest.java,"@@ -0,0 +1,298 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.sync.data.zookeeper;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.I0Itec.zkclient.ZkClient;
+import org.apache.curator.test.TestingServer;
+import org.dromara.soul.common.constant.ZkPathConstants;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.ConditionData;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.dto.RuleData;
+import org.dromara.soul.common.dto.SelectorData;
+import org.dromara.soul.common.enums.MatchModeEnum;
+import org.dromara.soul.common.enums.OperatorEnum;
+import org.dromara.soul.common.enums.ParamTypeEnum;
+import org.dromara.soul.common.enums.PluginEnum;
+import org.dromara.soul.common.enums.SelectorTypeEnum;
+import org.dromara.soul.sync.data.api.AuthDataSubscriber;
+import org.dromara.soul.sync.data.api.MetaDataSubscriber;
+import org.dromara.soul.sync.data.api.PluginDataSubscriber;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+/**
+ * Test cases for ZookeeperSyncDataService.
+ *
+ * @author zendwang
+ */
+@Slf4j
+@SuppressWarnings(""all"")
+public final class ZookeeperSyncDataServiceTest {
+    
+    private static final Map<String, PluginData> PLUGIN_ZK_DTO_MAP = Maps.newConcurrentMap();
+    
+    private static TestingServer zkServer;
+    
+    private ZkClient zkClient;
+    
+    private ZookeeperSyncDataService syncDataService;
+    
+    @BeforeClass
+    public static void setUpBeforeClass() throws Exception {
+        zkServer = new TestingServer(21810, true);
+    }
+    
+    @Before
+    public void setUp() throws Exception {
+        zkClient = new ZkClient(""127.0.0.1:21810"");
+        buildZkData();
+        PluginDataSubscriber pluginDataSubscriber = new PluginDataSubscriber() {
+            @Override
+            public void onSubscribe(final PluginData pluginData) {
+                log.info(""PluginDataSubscriber.onSubscribe,PluginData:{}"", pluginData);
+            }
+
+            @Override
+            public void unSubscribe(final PluginData pluginData) {
+                log.info(""PluginDataSubscriber.unSubscribe,PluginData:{}"", pluginData);
+            }
+        };
+        MetaDataSubscriber metaDataSubscriber = new MetaDataSubscriber() {
+            @Override
+            public void onSubscribe(final MetaData metaData) {
+                log.info(""MetaDataSubscriber.onSubscribe,MetaData:{}"", metaData);
+            }
+
+            @Override
+            public void unSubscribe(final MetaData metaData) {
+                log.info(""MetaDataSubscriber.unSubscribe,MetaData:{}"", metaData);
+            }
+        };
+        List<MetaDataSubscriber> metaDataSubscribers = Lists.newArrayList(metaDataSubscriber);
+        AuthDataSubscriber authDataSubscriber = new AuthDataSubscriber() {
+            @Override
+            public void onSubscribe(final AppAuthData appAuthData) {
+                log.info(""AuthDataSubscriber.onSubscribe,AppAuthData:{}"", appAuthData);
+            }
+
+            @Override
+            public void unSubscribe(final AppAuthData appAuthData) {
+                log.info(""AuthDataSubscriber.unSubscribe,AppAuthData:{}"", appAuthData);
+            }
+        };","[{'comment': 'Hey~ I suggest you can do like this. Not just logging.\r\n```\r\n@SneakyThrows\r\n    @Test\r\n    public void testWatcherPlugin() {\r\n        final CountDownLatch latch = new CountDownLatch(1);\r\n        PluginData pluginData = new PluginData(""6"", PluginEnum.DIVIDE.getName(), ""aaaaa"", 0, Boolean.TRUE);\r\n        writePlugin(pluginData);\r\n        final List<PluginData> actuals = new ArrayList<>();\r\n        syncDataService = new ZookeeperSyncDataService(zkClient, new PluginDataSubscriber() {\r\n            @Override\r\n            public void onSubscribe(PluginData pluginData) {\r\n                latch.countDown();\r\n                actuals.add(pluginData);\r\n            }\r\n        }, Collections.emptyList(), Collections.emptyList());\r\n        latch.await(3, TimeUnit.SECONDS);\r\n        Assert.assertEquals(1, actuals.size());\r\n        Assert.assertEquals(pluginData, actuals.get(0));\r\n    }\r\n```', 'commenter': 'dengliming'}, {'comment': 'I will try to refactor  in this way.', 'commenter': 'zendwang'}]"
546,soul-admin/src/main/resources/META-INF/schema.sql,"@@ -20,233 +20,234 @@ USE `soul`;
 
 /*Table structure for table `dashboard_user` */
 CREATE TABLE IF NOT EXISTS `dashboard_user` (
-  `id` varchar(128) NOT NULL COMMENT '主键id',
-  `user_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '用户名',
-  `password` varchar(128) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户密码',
-  `role` int(4) NOT NULL COMMENT '角色',
-  `enabled` tinyint(4) NOT NULL COMMENT '是否删除',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID',
+  `user_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'user name',
+  `password` varchar(128) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'User password',
+  `role` int(4) NOT NULL COMMENT 'role',
+  `enabled` tinyint(4) NOT NULL COMMENT 'Delete or not',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 /*Table structure for table `plugin` */
 CREATE TABLE IF NOT EXISTS `plugin` (
-  `id` varchar(128) NOT NULL COMMENT '主键id',
-  `name` varchar(62) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '插件名称',
-  `config` text COLLATE utf8mb4_unicode_ci COMMENT '插件配置',
-  `role` int(4) NOT NULL COMMENT '插件角色',
-  `enabled` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否开启（0，未开启，1开启）',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID',
+  `name` varchar(62) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'plugin name',
+  `config` text COLLATE utf8mb4_unicode_ci COMMENT 'plugin configuration',
+  `role` int(4) NOT NULL COMMENT 'plug-in role',
+  `enabled` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'Whether to open (0, not open, 1 open)',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 CREATE TABLE IF NOT EXISTS `plugin_handle` (
   `id` varchar(128) NOT NULL,
-  `plugin_id` varchar(128) NOT NULL COMMENT '插件id',
-  `field` varchar(100) NOT NULL COMMENT '字段',
-  `label` varchar(100) DEFAULT NULL COMMENT '标签',
-  `data_type` smallint(6) NOT NULL DEFAULT '1' COMMENT '数据类型 1 数字 2 字符串',
-  `type` smallint(6) NULL COMMENT '类型,1 表示选择器，2 表示规则',
-  `sort` int(4)  NULL COMMENT '排序',
-  `ext_obj` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '额外配置（json格式数据）',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `plugin_id` varchar(128) NOT NULL COMMENT 'plugin ID',
+  `field` varchar(100) NOT NULL COMMENT 'Field',
+  `label` varchar(100) DEFAULT NULL COMMENT 'label',
+  `data_type` smallint(6) NOT NULL DEFAULT '1' COMMENT 'Data type 1 number 2 string',
+  `type` smallint(6) NULL COMMENT 'type, 1 means selector, 2 means rule',
+  `sort` int(4)  NULL COMMENT 'sort',
+  `ext_obj` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Extra configuration (JSON format data)',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`),
   UNIQUE KEY `plugin_id_field_type` (`plugin_id`,`field`,`type`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;
 
 
 /*Table structure for table `selector` */
 CREATE TABLE IF NOT EXISTS `selector` (
-  `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '主键id varchar' primary key,
-  `plugin_id` varchar(128) NOT NULL COMMENT '插件id',
-  `name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '选择器名称',
-  `match_mode` int(2) NOT NULL COMMENT '匹配方式（0 and  1 or)',
-  `type` int(4) NOT NULL COMMENT '类型（0，全流量，1自定义流量）',
-  `sort` int(4) NOT NULL COMMENT '排序',
-  `handle` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '处理逻辑（此处针对不同的插件，会有不同的字段来标识不同的处理，所有存储json格式数据）',
-  `enabled` tinyint(4) NOT NULL COMMENT '是否开启',
-  `loged` tinyint(4) NOT NULL COMMENT '是否打印日志',
-  `continued` tinyint(4) NOT NULL COMMENT '是否继续执行',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'primary key ID varchar' primary key,
+  `plugin_id` varchar(128) NOT NULL COMMENT 'plugin ID',
+  `name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'selector name',
+  `match_mode` int(2) NOT NULL COMMENT 'matching mode (0 and 1 or)',
+  `type` int(4) NOT NULL COMMENT 'Type (0, full flow, 1 custom flow)',
+  `sort` int(4) NOT NULL COMMENT 'sort',
+  `handle` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Processing logic (here for different plug-ins, there will be different fields to identify different processes, all data in JSON format is stored)',
+  `enabled` tinyint(4) NOT NULL COMMENT 'Whether to open',
+  `loged` tinyint(4) NOT NULL COMMENT 'Whether to print the log',
+  `continued` tinyint(4) NOT NULL COMMENT 'Whether to continue execution',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   constraint unique_name unique (`name`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 /*Table structure for table `selector_condition` */
 CREATE TABLE IF NOT EXISTS `selector_condition` (
-  `id` varchar(128) NOT NULL COMMENT '主键id',
-  `selector_id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '选择器id',
-  `param_type` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数类型（post  query  uri等）',
-  `operator` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '匹配符（=  > <  like match）',
-  `param_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数名称',
-  `param_value` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数值',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID',
+  `selector_id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'selector ID',
+  `param_type` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter type (to query URI, etc.)',
+  `operator` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'matching character (=> <like matching)',
+  `param_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter name',
+  `param_value` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter value',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 /*Table structure for table `rule` */
 CREATE TABLE IF NOT EXISTS `rule` (
-  `id` varchar(128) NOT NULL COMMENT '主键id' PRIMARY KEY,
-  `selector_id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '选择器id',
-  `match_mode` int(2) NOT NULL COMMENT '匹配方式（0 and  1 or)',
-  `name` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '规则名称',
-  `enabled` tinyint(4) NOT NULL COMMENT '是否开启',
-  `loged` tinyint(4) NOT NULL COMMENT '是否记录日志',
-  `sort` int(4) NOT NULL COMMENT '排序',
-  `handle` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '处理逻辑（此处针对不同的插件，会有不同的字段来标识不同的处理，所有存储json格式数据）',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID' PRIMARY KEY,
+  `selector_id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'selector ID',
+  `match_mode` int(2) NOT NULL COMMENT 'matching mode (0 and 1 or)',
+  `name` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Rule name',
+  `enabled` tinyint(4) NOT NULL COMMENT 'Whether to open',
+  `loged` tinyint(4) NOT NULL COMMENT 'Whether to log or not',
+  `sort` int(4) NOT NULL COMMENT 'sort',
+  `handle` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Processing logic (here for different plug-ins, there will be different fields to identify different processes, all data in JSON format is stored)',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
    constraint unique_name unique (`name`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 CREATE TABLE IF NOT EXISTS `rule_condition` (
-  `id` varchar(128) NOT NULL COMMENT '主键id' PRIMARY KEY,
-  `rule_id` varchar(128) NOT NULL COMMENT '规则id',
-  `param_type` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数类型（post  query  uri等）',
-  `operator` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '匹配符（=  > <  like match）',
-  `param_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数名称',
-  `param_value` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数值',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间'
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID' PRIMARY KEY,
+  `rule_id` varchar(128) NOT NULL COMMENT 'rule id',
+  `param_type` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter type (post query uri, etc.)',
+  `operator` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'matching character (=> <like match)',
+  `param_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter name',
+  `param_value` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter value',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time'
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 CREATE TABLE  IF NOT EXISTS `meta_data` (
   `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'id',
-  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '应用名称',
-  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径,不能重复',
-  `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径描述',
-  `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'rpc类型',
-  `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '服务名称',
-  `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '方法名称',
-  `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '参数类型 多给参数类型 逗号隔开',
-  `rpc_ext` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'rpc的扩展信息，json格式',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
-  `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT '启用状态',
+  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'application name',
+  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'path, cannot be repeated',
+  `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'path description',
+  `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'rpc type',
+  `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'service name',
+  `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Method name',","[{'comment': '我觉得应该保持统一的句首大小写书写习惯。', 'commenter': 'yiwenlong'}]"
546,soul-admin/src/main/resources/META-INF/schema.sql,"@@ -20,233 +20,234 @@ USE `soul`;
 
 /*Table structure for table `dashboard_user` */
 CREATE TABLE IF NOT EXISTS `dashboard_user` (
-  `id` varchar(128) NOT NULL COMMENT '主键id',
-  `user_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '用户名',
-  `password` varchar(128) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户密码',
-  `role` int(4) NOT NULL COMMENT '角色',
-  `enabled` tinyint(4) NOT NULL COMMENT '是否删除',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID',
+  `user_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'user name',
+  `password` varchar(128) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'User password',
+  `role` int(4) NOT NULL COMMENT 'role',
+  `enabled` tinyint(4) NOT NULL COMMENT 'Delete or not',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 /*Table structure for table `plugin` */
 CREATE TABLE IF NOT EXISTS `plugin` (
-  `id` varchar(128) NOT NULL COMMENT '主键id',
-  `name` varchar(62) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '插件名称',
-  `config` text COLLATE utf8mb4_unicode_ci COMMENT '插件配置',
-  `role` int(4) NOT NULL COMMENT '插件角色',
-  `enabled` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否开启（0，未开启，1开启）',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID',
+  `name` varchar(62) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'plugin name',
+  `config` text COLLATE utf8mb4_unicode_ci COMMENT 'plugin configuration',
+  `role` int(4) NOT NULL COMMENT 'plug-in role',
+  `enabled` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'Whether to open (0, not open, 1 open)',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 CREATE TABLE IF NOT EXISTS `plugin_handle` (
   `id` varchar(128) NOT NULL,
-  `plugin_id` varchar(128) NOT NULL COMMENT '插件id',
-  `field` varchar(100) NOT NULL COMMENT '字段',
-  `label` varchar(100) DEFAULT NULL COMMENT '标签',
-  `data_type` smallint(6) NOT NULL DEFAULT '1' COMMENT '数据类型 1 数字 2 字符串',
-  `type` smallint(6) NULL COMMENT '类型,1 表示选择器，2 表示规则',
-  `sort` int(4)  NULL COMMENT '排序',
-  `ext_obj` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '额外配置（json格式数据）',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `plugin_id` varchar(128) NOT NULL COMMENT 'plugin ID',
+  `field` varchar(100) NOT NULL COMMENT 'Field',
+  `label` varchar(100) DEFAULT NULL COMMENT 'label',
+  `data_type` smallint(6) NOT NULL DEFAULT '1' COMMENT 'Data type 1 number 2 string',
+  `type` smallint(6) NULL COMMENT 'type, 1 means selector, 2 means rule',
+  `sort` int(4)  NULL COMMENT 'sort',
+  `ext_obj` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Extra configuration (JSON format data)',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`),
   UNIQUE KEY `plugin_id_field_type` (`plugin_id`,`field`,`type`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;
 
 
 /*Table structure for table `selector` */
 CREATE TABLE IF NOT EXISTS `selector` (
-  `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '主键id varchar' primary key,
-  `plugin_id` varchar(128) NOT NULL COMMENT '插件id',
-  `name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '选择器名称',
-  `match_mode` int(2) NOT NULL COMMENT '匹配方式（0 and  1 or)',
-  `type` int(4) NOT NULL COMMENT '类型（0，全流量，1自定义流量）',
-  `sort` int(4) NOT NULL COMMENT '排序',
-  `handle` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '处理逻辑（此处针对不同的插件，会有不同的字段来标识不同的处理，所有存储json格式数据）',
-  `enabled` tinyint(4) NOT NULL COMMENT '是否开启',
-  `loged` tinyint(4) NOT NULL COMMENT '是否打印日志',
-  `continued` tinyint(4) NOT NULL COMMENT '是否继续执行',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'primary key ID varchar' primary key,
+  `plugin_id` varchar(128) NOT NULL COMMENT 'plugin ID',
+  `name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'selector name',
+  `match_mode` int(2) NOT NULL COMMENT 'matching mode (0 and 1 or)',
+  `type` int(4) NOT NULL COMMENT 'Type (0, full flow, 1 custom flow)',
+  `sort` int(4) NOT NULL COMMENT 'sort',
+  `handle` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Processing logic (here for different plug-ins, there will be different fields to identify different processes, all data in JSON format is stored)',
+  `enabled` tinyint(4) NOT NULL COMMENT 'Whether to open',
+  `loged` tinyint(4) NOT NULL COMMENT 'Whether to print the log',
+  `continued` tinyint(4) NOT NULL COMMENT 'Whether to continue execution',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   constraint unique_name unique (`name`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 /*Table structure for table `selector_condition` */
 CREATE TABLE IF NOT EXISTS `selector_condition` (
-  `id` varchar(128) NOT NULL COMMENT '主键id',
-  `selector_id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '选择器id',
-  `param_type` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数类型（post  query  uri等）',
-  `operator` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '匹配符（=  > <  like match）',
-  `param_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数名称',
-  `param_value` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数值',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID',
+  `selector_id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'selector ID',
+  `param_type` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter type (to query URI, etc.)',
+  `operator` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'matching character (=> <like matching)',
+  `param_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter name',
+  `param_value` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter value',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 /*Table structure for table `rule` */
 CREATE TABLE IF NOT EXISTS `rule` (
-  `id` varchar(128) NOT NULL COMMENT '主键id' PRIMARY KEY,
-  `selector_id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '选择器id',
-  `match_mode` int(2) NOT NULL COMMENT '匹配方式（0 and  1 or)',
-  `name` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '规则名称',
-  `enabled` tinyint(4) NOT NULL COMMENT '是否开启',
-  `loged` tinyint(4) NOT NULL COMMENT '是否记录日志',
-  `sort` int(4) NOT NULL COMMENT '排序',
-  `handle` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '处理逻辑（此处针对不同的插件，会有不同的字段来标识不同的处理，所有存储json格式数据）',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID' PRIMARY KEY,
+  `selector_id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'selector ID',
+  `match_mode` int(2) NOT NULL COMMENT 'matching mode (0 and 1 or)',
+  `name` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Rule name',
+  `enabled` tinyint(4) NOT NULL COMMENT 'Whether to open',
+  `loged` tinyint(4) NOT NULL COMMENT 'Whether to log or not',
+  `sort` int(4) NOT NULL COMMENT 'sort',
+  `handle` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Processing logic (here for different plug-ins, there will be different fields to identify different processes, all data in JSON format is stored)',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
    constraint unique_name unique (`name`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 CREATE TABLE IF NOT EXISTS `rule_condition` (
-  `id` varchar(128) NOT NULL COMMENT '主键id' PRIMARY KEY,
-  `rule_id` varchar(128) NOT NULL COMMENT '规则id',
-  `param_type` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数类型（post  query  uri等）',
-  `operator` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '匹配符（=  > <  like match）',
-  `param_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数名称',
-  `param_value` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '参数值',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间'
+  `id` varchar(128) NOT NULL COMMENT 'primary key ID' PRIMARY KEY,
+  `rule_id` varchar(128) NOT NULL COMMENT 'rule id',
+  `param_type` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter type (post query uri, etc.)',
+  `operator` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'matching character (=> <like match)',
+  `param_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter name',
+  `param_value` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'parameter value',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time'
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 CREATE TABLE  IF NOT EXISTS `meta_data` (
   `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'id',
-  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '应用名称',
-  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径,不能重复',
-  `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径描述',
-  `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'rpc类型',
-  `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '服务名称',
-  `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '方法名称',
-  `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '参数类型 多给参数类型 逗号隔开',
-  `rpc_ext` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'rpc的扩展信息，json格式',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
-  `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT '启用状态',
+  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'application name',
+  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'path, cannot be repeated',
+  `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'path description',
+  `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'rpc type',
+  `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'service name',
+  `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Method name',
+  `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Parameter types are provided with multiple parameter types separated by commas',
+  `rpc_ext` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'rpc extended information, json format',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
+  `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT 'enabled state',
   PRIMARY KEY (`id`) USING BTREE
 ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;
 
 CREATE TABLE IF NOT EXISTS `app_auth`  (
-  `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '主键id',
-  `app_key` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '应用标识key',
-  `app_secret` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '加密算法secret',
-  `user_id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '用户id',
-  `phone` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '用户申请时候的电话号码',
-  `ext_info` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '扩展参数 json',
-  `enabled` tinyint(4) NOT NULL COMMENT '是否删除',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'primary key ID',
+  `app_key` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'application identification key',
+  `app_secret` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'encryption algorithm secret',
+  `user_id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'user id',
+  `phone` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Phone number when the user applies',
+  `ext_info` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Extended parameter json',
+  `enabled` tinyint(4) NOT NULL COMMENT 'Delete or not',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`) USING BTREE
 ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;
 
 CREATE TABLE IF NOT EXISTS `auth_param`  (
-  `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '主键id',
-  `auth_id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '认证表id',
-  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '业务模块',
-  `app_param` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '业务模块参数（网关需要传递的参数）json类型',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'primary key ID',
+  `auth_id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Authentication table id',
+  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Business Module',
+  `app_param` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Service module parameters (parameters that need to be passed by the gateway) json type',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`) USING BTREE
 ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;
 
 -- ----------------------------
 -- Table structure for auth_path
 -- ----------------------------
 CREATE TABLE IF NOT EXISTS `auth_path`  (
-  `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '主键id',
-  `auth_id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'auth表id',
-  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '模块',
-  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径',
-  `enabled` tinyint(4) NOT NULL COMMENT '是否通过 1 是 ',
-  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+  `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'primary key ID',
+  `auth_id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'auth table id',
+  `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'module',
+  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'path',
+  `enabled` tinyint(4) NOT NULL COMMENT 'Whether pass 1 is',
+  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+  `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
   PRIMARY KEY (`id`) USING BTREE
 ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;
 
 CREATE TABLE IF NOT EXISTS `soul_dict` (
-   `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '主键id',
-   `type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '类型',
-   `dict_code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '字典编码',
-   `dict_name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '字典名称',
-   `dict_value` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '字典值',
-   `desc` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '字典描述或备注',
-   `sort` int(4) NOT NULL COMMENT '排序',
-   `enabled` tinyint(4) DEFAULT NULL COMMENT '是否开启',
-   `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
-   `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
+   `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'primary key ID',
+   `type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'type',
+   `dict_code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Dictionary encoding',
+   `dict_name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Dictionary name',
+   `dict_value` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Dictionary value',
+   `desc` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'Dictionary description or remarks',
+   `sort` int(4) NOT NULL COMMENT 'sort',
+   `enabled` tinyint(4) DEFAULT NULL COMMENT 'whether it is enabled',
+   `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
+   `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
  /*soul dict*/
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('1','degradeRuleGrade','DEGRADE_GRADE_RT','慢调用比例','0','熔断类型-慢调用比例',1,1,'2020-11-18 14:39:56','2020-11-20 15:43:43');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('2','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_RATIO','异常比例','1','熔断类型-异常比例',0,1,'2020-11-18 16:42:34','2020-11-20 15:42:58');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('3','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_COUNT','异常数策略','2','熔断类型-异常数策略',2,1,'2020-11-19 16:23:45','2020-11-20 16:01:00');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('4','flowRuleGrade','FLOW_GRADE_QPS','QPS','1','限流阈值类型-QPS',0,1,'2020-11-20 15:42:03','2020-11-20 15:42:03');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('5','flowRuleGrade','FLOW_GRADE_THREAD','并发线程数','0','限流阈值类型-并发线程数',1,1,'2020-11-20 15:44:44','2020-11-20 15:44:44');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('6','flowRuleControlBehavior','CONTROL_BEHAVIOR_DEFAULT','默认直接拒绝','0','流控效果-默认直接拒绝',0,1,'2020-11-20 15:46:22','2020-11-20 15:48:36');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('7','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP','Warm Up','1','流控效果-Warm Up',1,1,'2020-11-20 15:47:05','2020-11-20 15:47:05');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('8','flowRuleControlBehavior','CONTROL_BEHAVIOR_RATE_LIMITER','匀速排队','2','流控效果-匀速排队',2,1,'2020-11-20 15:49:45','2020-11-20 15:49:45');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('9','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER','预热均匀排队','3','流控效果-预热均匀排队',3,1,'2020-11-20 15:51:25','2020-11-20 15:51:37');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('10','permission','REJECT','reject(拒绝)','reject','拒绝',0,1,'2020-11-22 12:04:10','2020-11-22 12:04:10');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES ('11','permission','ALLOW','allow(允许)','allow','允许',1,1,'2020-11-22 12:04:10','2020-11-22 12:04:10');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 1','degradeRuleGrade','DEGRADE_GRADE_RT','Slow call ratio','0','Fuse type-slow call ratio',1,1,'2020-11-18 14:39:56','2020- 11-20 15:43:43');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 2','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_RATIO','abnormal ratio','1','fuse type-abnormal ratio',0,1,'2020-11-18 16:42:34','2020-11- 20 15:42:58');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 3','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_COUNT','Abnormal Number Strategy','2','Fuse Type-Abnormal Number Strategy',2,1,'2020-11-19 16:23:45','2020- 11-20 16:01:00');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 4','flowRuleGrade','FLOW_GRADE_QPS','QPS','1','Current limit threshold type-QPS',0,1,'2020-11-20 15:42:03','2020-11- 20 15:42:03');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 5','flowRuleGrade','FLOW_GRADE_THREAD','Number of concurrent threads','0','Current limit threshold type-number of concurrent threads',1,1,'2020-11-20 15:44:44',' 2020-11-20 15:44:44');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 6','flowRuleControlBehavior','CONTROL_BEHAVIOR_DEFAULT','Direct rejection by default','0','Flow control effect-Direct rejection by default',0,1,'2020-11-20 15:46:22','2020 -11-20 15:48:36');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 7','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP','Warm Up','1','Flow Control Effect-Warm Up',1,1,'2020-11-20 15:47:05','2020-11 -20 15:47:05');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 8','flowRuleControlBehavior','CONTROL_BEHAVIOR_RATE_LIMITER','constant speed queuing','2','flow control effect-uniform speed queuing',2,1,'2020-11-20 15:49:45','2020-11 -20 15:49:45');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 9','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER','Preheating uniformly queued','3','Flow control effect-preheating uniformly queued',3,1,'2020-11-20 15:51:25', '2020-11-20 15:51:37');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 10','permission','REJECT','reject','reject','reject',0,1,'2020-11-22 12:04:10','2020-11-22 12 :04:10');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 11','permission','ALLOW','allow','allow','allow',1,1,'2020-11-22 12:04:10','2020-11-22 12 :04:10');
 
 /*plugin*/
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('1', 'sign','1', '0', '2018-06-14 10:17:35', '2018-06-14 10:17:35');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('2', 'waf', '1','{""model"":""black""}','0', '2018-06-23 10:26:30', '2018-06-13 15:43:10');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('3', 'rewrite', '1','0', '2018-06-23 10:26:34', '2018-06-25 13:59:31');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('4', 'rate_limiter','1','{""master"":""mymaster"",""mode"":""Standalone"",""url"":""192.168.1.1:6379"",""password"":""abc""}', '0', '2018-06-23 10:26:37', '2018-06-13 15:34:48');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('5', 'divide', '0','1', '2018-06-25 10:19:10', '2018-06-13 13:56:04');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('6', 'dubbo','1','{""register"":""zookeeper://localhost:2181""}', '0', '2018-06-23 10:26:41', '2018-06-11 10:11:47');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('7', 'monitor', '1','{""metricsName"":""prometheus"",""host"":""localhost"",""port"":""9190"",""async"":""true""}','0', '2018-06-25 13:47:57', '2018-06-25 13:47:57');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('8', 'springCloud','1', '0', '2018-06-25 13:47:57', '2018-06-25 13:47:57');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('9', 'hystrix', '0','0', '2020-01-15 10:19:10', '2020-01-15 10:19:10');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('10', 'sentinel', '1','0', '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `config`, `enabled`, `date_created`, `date_updated`) VALUES ('11', 'sofa', '0', '{""protocol"":""zookeeper"",""register"":""127.0.0.1:2181""}', '0', '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('12', 'resilience4j', '1','0', '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1','sign','1', '0', ' 2018-06-14 10:17:35', '2018-06-14 10:17:35');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('2','waf', '1',' {""model"":""black""}','0', '2018-06-23 10:26:30', '2018-06-13 15:43:10');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('3','rewrite', '1','0', ' 2018-06-23 10:26:34', '2018-06-25 13:59:31');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('4','rate_limiter','1',' {""master"":""mymaster"",""mode"":""Standalone"",""url"":""192.168.1.1:6379"",""password"":""abc""}', '0', '2018-06-23 10 :26:37', '2018-06-13 15:34:48');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('5','divide', '0','1', ' 2018-06-25 10:19:10', '2018-06-13 13:56:04');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('6','dubbo','1',' {""register"":""zookeeper://localhost:2181""}', '0', '2018-06-23 10:26:41', '2018-06-11 10:11:47');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('7','monitor', '1',' {""metricsName"":""prometheus"",""host"":""localhost"",""port"":""9190"",""async"":""true""}','0', '2018-06-25 13:47:57 ', '2018-06-25 13:47:57');
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('8','springCloud','1', '0', ' 2018-06-25 13:47:57', '2018-06-25 13:47:57');
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('9','hystrix', '0','0', ' 2020-01-15 10:19:10', '2020-01-15 10:19:10');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('10','sentinel', '1','0', ' 2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `config`, `enabled`, `date_created`, `date_updated`) VALUES ('11','sofa', '0', ' {""protocol"":""zookeeper"",""register"":""127.0.0.1:2181""}', '0', '2020-11-09 01:19:10', '2020-11-09 01:19: 10');
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('12','resilience4j', '1','0', ' 2020-11-09 01:19:10', '2020-11-09 01:19:10');
 
 /**default admin user**/
-INSERT IGNORE INTO `dashboard_user` (`id`, `user_name`, `password`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1', 'admin', 'jHcpKkiDbbQh7W7hh8yQSA==', '1', '1', '2018-06-23 15:12:22', '2018-06-23 15:12:23');
+INSERT IGNORE INTO `dashboard_user` (`id`, `user_name`, `password`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1','admin','jHcpKkiDbbQh7W7hh8yQSA==' , '1', '1', '2018-06-23 15:12:22', '2018-06-23 15:12:23');
 
 /*insert plugin_handle data for sentinel*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('1','10', 'flowRuleGrade', '限流阈值类型','3', 2, 8, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('2','10', 'flowRuleControlBehavior', '流控效果','3', 2, 5, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('3','10', 'flowRuleEnable', '是否开启流控(1或0)','1', 2, 7, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('4','10', 'flowRuleCount', '限流阈值','1', 2, 6, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('5','10', 'degradeRuleEnable', '是否开启熔断(1或0)','1', 2, 2, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('6','10', 'degradeRuleGrade', '熔断类型','3', 2, 3, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('7','10', 'degradeRuleCount', '熔断阈值','1', 2, 1, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('8','10', 'degradeRuleTimeWindow', '熔断窗口大小','1', 2, 4, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('1','10' ,'flowRuleGrade','Current limit threshold type','3', 2, 8, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('2','10' ,'flowRuleControlBehavior','flow control effect','3', 2, 5, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('3','10' ,'flowRuleEnable','Whether flow control is enabled (1 or 0)', '1', 2, 7, '2020-11-09 01:19:10', '2020-11-09 01:19:10' );
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('4','10' ,'flowRuleCount','Flow limit threshold','1', 2, 6, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('5','10' ,'degradeRuleEnable','Whether to open the fuse (1 or 0)', '1', 2, 2, '2020-11-09 01:19:10', '2020-11-09 01:19:10') ;
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('6','10' ,'degradeRuleGrade','Fuse Type','3', 2, 3, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('7','10' ,'degradeRuleCount','fuse threshold','1', 2, 1, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('8','10' ,'degradeRuleTimeWindow','Fuse window size','1', 2, 4, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
 
 /*insert plugin_handle data for waf*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('9','2', 'permission', '许可','3', 2, 1, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('10','2', 'statusCode', '状态码','2', 2, 2, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('9','2' ,'permission','permission','3', 2, 1, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('10','2' ,'statusCode','Status Code','2', 2, 2, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
 
 /*insert plugin_handle data for rate_limiter*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('11', '4', 'replenishRate', '速率', 2, 2, 2, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('12', '4', 'burstCapacity', '容量', 2, 2, 1, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('11', '4' ,'replenishRate','Rate', 2, 2, 2, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('12', '4' ,'burstCapacity','Capacity', 2, 2, 1, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+
 
 /*insert plugin_handle data for rewrite*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('13', '3', 'rewriteURI', 'rewriteURI', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('13', '3' ,'rewriteURI','rewriteURI', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 
 /*insert plugin_handle data for springCloud*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('14', '8', 'path', '路径', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('15', '8', 'timeout', '超时时间(ms)', 1, 2, 2, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('16', '8', 'serviceId', '应用名称', 2, 1, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('14', '8' ,'path','path', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('15', '8' ,'timeout','Timeout (ms)', 1, 2, 2, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('16', '8' ,'serviceId','application name', 2, 1, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 
 /*insert plugin_handle data for resilience4j*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('17', '12', 'timeoutDurationRate', '流控超时(ms)', 1, 2, 1, '2020-11-28 11:08:14', '2020-11-28 11:19:12');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('18', '12', 'limitRefreshPeriod', 'token填充周期(ms)', 1, 2, 0, '2020-11-28 11:18:54', '2020-11-28 11:22:40');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('19', '12', 'limitForPeriod', 'token填充个数', 1, 2, 0, '2020-11-28 11:20:11', '2020-11-28 11:20:11');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('20', '12', 'circuitEnable', '开启熔断', 1, 2, 2, '2020-11-28 11:23:09', '2020-11-28 11:24:12');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('21', '12', 'timeoutDuration', '熔断超时(ms)', 1, 2, 2, '2020-11-28 11:25:56', '2020-11-28 11:25:56');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('22', '12', 'fallbackUri', '降级uri', 2, 2, 2, '2020-11-28 11:26:44', '2020-11-28 11:26:51');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('23', '12', 'slidingWindowSize', '滑动窗口大小', 1, 2, 2, '2020-11-28 11:27:34', '2020-11-28 11:27:34');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('24', '12', 'slidingWindowType', '滑动窗口类型', 1, 2, 2, '2020-11-28 11:28:05', '2020-11-28 11:28:05');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('25', '12', 'minimumNumberOfCalls', '错误最小计算阈值', 1, 2, 2, '2020-11-28 11:28:34', '2020-11-28 11:28:34');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('26', '12', 'waitIntervalFunctionInOpenState', '熔断器开启持续时间', 1, 2, 2, '2020-11-28 11:29:01', '2020-11-28 11:29:01');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('27', '12', 'permittedNumberOfCallsInHalfOpenState', '半开阈值', 1, 2, 2, '2020-11-28 11:29:55', '2020-11-28 11:29:55');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('28', '12', 'failureRateThreshold', '熔断错误率', 1, 2, 2, '2020-11-28 11:30:40', '2020-11-28 11:30:40');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('17', '12' ,'timeoutDurationRate','Flow control timeout (ms)', 1, 2, 1, '2020-11-28 11:08:14', '2020-11-28 11:19:12');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('18', '12' ,'limitRefreshPeriod','token filling period (ms)', 1, 2, 0, '2020-11-28 11:18:54', '2020-11-28 11:22:40');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('19', '12' ,'limitForPeriod','token filling number', 1, 2, 0, '2020-11-28 11:20:11', '2020-11-28 11:20:11');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('20', '12' ,'circuitEnable','Open fuse', 1, 2, 2, '2020-11-28 11:23:09', '2020-11-28 11:24:12');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('21', '12' ,'timeoutDuration','Fuse timeout (ms)', 1, 2, 2, '2020-11-28 11:25:56', '2020-11-28 11:25:56');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('22', '12' ,'fallbackUri','Downgrade uri', 2, 2, 2, '2020-11-28 11:26:44', '2020-11-28 11:26:51');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('23', '12' ,'slidingWindowSize','sliding window size', 1, 2, 2, '2020-11-28 11:27:34', '2020-11-28 11:27:34');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('24', '12' ,'slidingWindowType','sliding window type', 1, 2, 2, '2020-11-28 11:28:05', '2020-11-28 11:28:05');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('25', '12' ,'minimumNumberOfCalls','Error minimum calculation threshold', 1, 2, 2, '2020-11-28 11:28:34', '2020-11-28 11:28:34');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('26', '12' ,'waitIntervalFunctionInOpenState','Fuse opening duration', 1, 2, 2, '2020-11-28 11:29:01', '2020-11-28 11:29:01');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('27', '12' ,'permittedNumberOfCallsInHalfOpenState','Half open threshold', 1, 2, 2, '2020-11-28 11:29:55', '2020-11-28 11:29:55');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('28', '12' ,'failureRateThreshold','fuse error rate', 1, 2, 2, '2020-11-28 11:30:40', '2020-11-28 11:30:40');","[{'comment': 'Values 第二列后面的 , 不应该放在空格后面。', 'commenter': 'yiwenlong'}, {'comment': '除非必要，修改应该保持最小改动原则。', 'commenter': 'yiwenlong'}]"
546,soul-admin/src/main/resources/META-INF/schema.sql,"@@ -181,73 +181,83 @@ CREATE TABLE IF NOT EXISTS `soul_dict` (
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
- /*soul dict*/
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 1','degradeRuleGrade','DEGRADE_GRADE_RT','Slow call ratio','0','Fuse type-slow call ratio',1,1,'2020-11-18 14:39:56','2020- 11-20 15:43:43');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 2','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_RATIO','abnormal ratio','1','fuse type-abnormal ratio',0,1,'2020-11-18 16:42:34','2020-11- 20 15:42:58');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 3','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_COUNT','Abnormal Number Strategy','2','Fuse Type-Abnormal Number Strategy',2,1,'2020-11-19 16:23:45','2020- 11-20 16:01:00');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 4','flowRuleGrade','FLOW_GRADE_QPS','QPS','1','Current limit threshold type-QPS',0,1,'2020-11-20 15:42:03','2020-11- 20 15:42:03');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 5','flowRuleGrade','FLOW_GRADE_THREAD','Number of concurrent threads','0','Current limit threshold type-number of concurrent threads',1,1,'2020-11-20 15:44:44',' 2020-11-20 15:44:44');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 6','flowRuleControlBehavior','CONTROL_BEHAVIOR_DEFAULT','Direct rejection by default','0','Flow control effect-Direct rejection by default',0,1,'2020-11-20 15:46:22','2020 -11-20 15:48:36');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 7','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP','Warm Up','1','Flow Control Effect-Warm Up',1,1,'2020-11-20 15:47:05','2020-11 -20 15:47:05');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 8','flowRuleControlBehavior','CONTROL_BEHAVIOR_RATE_LIMITER','constant speed queuing','2','flow control effect-uniform speed queuing',2,1,'2020-11-20 15:49:45','2020-11 -20 15:49:45');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 9','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER','Preheating uniformly queued','3','Flow control effect-preheating uniformly queued',3,1,'2020-11-20 15:51:25', '2020-11-20 15:51:37');
+/*soul dict*/
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 1','degradeRuleGrade','DEGRADE_GRADE_RT','slow call ratio','0','degrade type-slow call ratio',1,1,'2020-11-18 14:39:56','2020- 11-20 15:43:43');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 2','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_RATIO','exception ratio','1','degrade type-abnormal ratio',0,1,'2020-11-18 16:42:34','2020-11- 20 15:42:58');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 3','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_COUNT','exception number strategy','2','degrade type-abnormal number strategy',2,1,'2020-11-19 16:23:45','2020- 11-20 16:01:00');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 4','flowRuleGrade','FLOW_GRADE_QPS','QPS','1','grade type-QPS',0,1,'2020-11-20 15:42:03','2020-11- 20 15:42:03');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 5','flowRuleGrade','FLOW_GRADE_THREAD','number of concurrent threads','0','degrade type-number of concurrent threads',1,1,'2020-11-20 15:44:44',' 2020-11-20 15:44:44');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 6','flowRuleControlBehavior','CONTROL_BEHAVIOR_DEFAULT','direct rejection by default','0','control behavior-direct rejection by default',0,1,'2020-11-20 15:46:22','2020 -11-20 15:48:36');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 7','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP','warm up','1','control behavior-warm up',1,1,'2020-11-20 15:47:05','2020-11 -20 15:47:05');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 8','flowRuleControlBehavior','CONTROL_BEHAVIOR_RATE_LIMITER','constant speed queuing','2','control behavior-uniform speed queuing',2,1,'2020-11-20 15:49:45','2020-11 -20 15:49:45');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 9','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER','preheating uniformly queued','3','control behavior-preheating uniformly queued',3,1,'2020-11-20 15:51:25', '2020-11-20 15:51:37');
 INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 10','permission','REJECT','reject','reject','reject',0,1,'2020-11-22 12:04:10','2020-11-22 12 :04:10');
 INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 11','permission','ALLOW','allow','allow','allow',1,1,'2020-11-22 12:04:10','2020-11-22 12 :04:10');
 
 /*plugin*/
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1','sign','1', '0', ' 2018-06-14 10:17:35', '2018-06-14 10:17:35');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('2','waf', '1',' {""model"":""black""}','0', '2018-06-23 10:26:30', '2018-06-13 15:43:10');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('3','rewrite', '1','0', ' 2018-06-23 10:26:34', '2018-06-25 13:59:31');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('4','rate_limiter','1',' {""master"":""mymaster"",""mode"":""Standalone"",""url"":""192.168.1.1:6379"",""password"":""abc""}', '0', '2018-06-23 10:26:37', '2018-06-13 15:34:48');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('4','rate_limiter','1',' {""master"":""mymaster"",""mode"":""standalone"",""url"":""192.168.1.1:6379"",""password"":""abc""}', '0', '2018-06-23 10 :26:37', '2018-06-13 15:34:48');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('5','divide', '0','1', ' 2018-06-25 10:19:10', '2018-06-13 13:56:04');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('6','dubbo','1',' {""register"":""zookeeper://localhost:2181""}', '0', '2018-06-23 10:26:41', '2018-06-11 10:11:47');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('7','monitor', '1',' {""metricsName"":""prometheus"",""host"":""localhost"",""port"":""9190"",""async"":""true""}','0', '2018-06-25 13:47:57 ', '2018-06-25 13:47:57');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('8','springCloud','1', '0', ' 2018-06-25 13:47:57', '2018-06-25 13:47:57');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('9','hystrix', '0','0', ' 2020-01-15 10:19:10', '2020-01-15 10:19:10');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('10','sentinel', '1','0', ' 2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `config`, `enabled`, `date_created`, `date_updated`) VALUES ('11','sofa', '0', ' {""protocol"":""zookeeper"",""register"":""127.0.0.1:2181""}', '0', '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `config`, `enabled`, `date_created`, `date_updated`) VALUES ('11','sofa', '0', ' {""protocol"":""zookeeper"",""register"":""127.0.0.1:2181""}', '0', '2020-11-09 01:19:10', '2020-11-09 01:19: 10');","[{'comment': ""'2020-11-09 01:19: 10' the blank here will cause exception when the someone query here "", 'commenter': 'tydhot'}, {'comment': 'ok，i will check', 'commenter': 'FocusZhouGD'}, {'comment': 'ok，i will check thinks\r\n', 'commenter': 'FocusZhouGD'}]"
546,soul-admin/src/main/resources/META-INF/schema.sql,"@@ -181,73 +181,83 @@ CREATE TABLE IF NOT EXISTS `soul_dict` (
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
- /*soul dict*/
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 1','degradeRuleGrade','DEGRADE_GRADE_RT','Slow call ratio','0','Fuse type-slow call ratio',1,1,'2020-11-18 14:39:56','2020- 11-20 15:43:43');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 2','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_RATIO','abnormal ratio','1','fuse type-abnormal ratio',0,1,'2020-11-18 16:42:34','2020-11- 20 15:42:58');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 3','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_COUNT','Abnormal Number Strategy','2','Fuse Type-Abnormal Number Strategy',2,1,'2020-11-19 16:23:45','2020- 11-20 16:01:00');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 4','flowRuleGrade','FLOW_GRADE_QPS','QPS','1','Current limit threshold type-QPS',0,1,'2020-11-20 15:42:03','2020-11- 20 15:42:03');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 5','flowRuleGrade','FLOW_GRADE_THREAD','Number of concurrent threads','0','Current limit threshold type-number of concurrent threads',1,1,'2020-11-20 15:44:44',' 2020-11-20 15:44:44');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 6','flowRuleControlBehavior','CONTROL_BEHAVIOR_DEFAULT','Direct rejection by default','0','Flow control effect-Direct rejection by default',0,1,'2020-11-20 15:46:22','2020 -11-20 15:48:36');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 7','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP','Warm Up','1','Flow Control Effect-Warm Up',1,1,'2020-11-20 15:47:05','2020-11 -20 15:47:05');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 8','flowRuleControlBehavior','CONTROL_BEHAVIOR_RATE_LIMITER','constant speed queuing','2','flow control effect-uniform speed queuing',2,1,'2020-11-20 15:49:45','2020-11 -20 15:49:45');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 9','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER','Preheating uniformly queued','3','Flow control effect-preheating uniformly queued',3,1,'2020-11-20 15:51:25', '2020-11-20 15:51:37');
+/*soul dict*/
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 1','degradeRuleGrade','DEGRADE_GRADE_RT','slow call ratio','0','degrade type-slow call ratio',1,1,'2020-11-18 14:39:56','2020- 11-20 15:43:43');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 2','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_RATIO','exception ratio','1','degrade type-abnormal ratio',0,1,'2020-11-18 16:42:34','2020-11- 20 15:42:58');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 3','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_COUNT','exception number strategy','2','degrade type-abnormal number strategy',2,1,'2020-11-19 16:23:45','2020- 11-20 16:01:00');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 4','flowRuleGrade','FLOW_GRADE_QPS','QPS','1','grade type-QPS',0,1,'2020-11-20 15:42:03','2020-11- 20 15:42:03');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 5','flowRuleGrade','FLOW_GRADE_THREAD','number of concurrent threads','0','degrade type-number of concurrent threads',1,1,'2020-11-20 15:44:44',' 2020-11-20 15:44:44');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 6','flowRuleControlBehavior','CONTROL_BEHAVIOR_DEFAULT','direct rejection by default','0','control behavior-direct rejection by default',0,1,'2020-11-20 15:46:22','2020 -11-20 15:48:36');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 7','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP','warm up','1','control behavior-warm up',1,1,'2020-11-20 15:47:05','2020-11 -20 15:47:05');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 8','flowRuleControlBehavior','CONTROL_BEHAVIOR_RATE_LIMITER','constant speed queuing','2','control behavior-uniform speed queuing',2,1,'2020-11-20 15:49:45','2020-11 -20 15:49:45');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 9','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER','preheating uniformly queued','3','control behavior-preheating uniformly queued',3,1,'2020-11-20 15:51:25', '2020-11-20 15:51:37');
 INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 10','permission','REJECT','reject','reject','reject',0,1,'2020-11-22 12:04:10','2020-11-22 12 :04:10');
 INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 11','permission','ALLOW','allow','allow','allow',1,1,'2020-11-22 12:04:10','2020-11-22 12 :04:10');
 
 /*plugin*/
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1','sign','1', '0', ' 2018-06-14 10:17:35', '2018-06-14 10:17:35');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('2','waf', '1',' {""model"":""black""}','0', '2018-06-23 10:26:30', '2018-06-13 15:43:10');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('3','rewrite', '1','0', ' 2018-06-23 10:26:34', '2018-06-25 13:59:31');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('4','rate_limiter','1',' {""master"":""mymaster"",""mode"":""Standalone"",""url"":""192.168.1.1:6379"",""password"":""abc""}', '0', '2018-06-23 10:26:37', '2018-06-13 15:34:48');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('4','rate_limiter','1',' {""master"":""mymaster"",""mode"":""standalone"",""url"":""192.168.1.1:6379"",""password"":""abc""}', '0', '2018-06-23 10 :26:37', '2018-06-13 15:34:48');","[{'comment': ""'2018-06-23 10 :26:37'  the blank here will cause exception when the someone query here"", 'commenter': 'songyuequan'}]"
546,soul-admin/src/main/resources/META-INF/schema.sql,"@@ -181,73 +181,83 @@ CREATE TABLE IF NOT EXISTS `soul_dict` (
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
- /*soul dict*/
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 1','degradeRuleGrade','DEGRADE_GRADE_RT','Slow call ratio','0','Fuse type-slow call ratio',1,1,'2020-11-18 14:39:56','2020- 11-20 15:43:43');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 2','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_RATIO','abnormal ratio','1','fuse type-abnormal ratio',0,1,'2020-11-18 16:42:34','2020-11- 20 15:42:58');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 3','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_COUNT','Abnormal Number Strategy','2','Fuse Type-Abnormal Number Strategy',2,1,'2020-11-19 16:23:45','2020- 11-20 16:01:00');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 4','flowRuleGrade','FLOW_GRADE_QPS','QPS','1','Current limit threshold type-QPS',0,1,'2020-11-20 15:42:03','2020-11- 20 15:42:03');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 5','flowRuleGrade','FLOW_GRADE_THREAD','Number of concurrent threads','0','Current limit threshold type-number of concurrent threads',1,1,'2020-11-20 15:44:44',' 2020-11-20 15:44:44');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 6','flowRuleControlBehavior','CONTROL_BEHAVIOR_DEFAULT','Direct rejection by default','0','Flow control effect-Direct rejection by default',0,1,'2020-11-20 15:46:22','2020 -11-20 15:48:36');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 7','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP','Warm Up','1','Flow Control Effect-Warm Up',1,1,'2020-11-20 15:47:05','2020-11 -20 15:47:05');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 8','flowRuleControlBehavior','CONTROL_BEHAVIOR_RATE_LIMITER','constant speed queuing','2','flow control effect-uniform speed queuing',2,1,'2020-11-20 15:49:45','2020-11 -20 15:49:45');
-INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 9','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER','Preheating uniformly queued','3','Flow control effect-preheating uniformly queued',3,1,'2020-11-20 15:51:25', '2020-11-20 15:51:37');
+/*soul dict*/
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 1','degradeRuleGrade','DEGRADE_GRADE_RT','slow call ratio','0','degrade type-slow call ratio',1,1,'2020-11-18 14:39:56','2020- 11-20 15:43:43');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 2','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_RATIO','exception ratio','1','degrade type-abnormal ratio',0,1,'2020-11-18 16:42:34','2020-11- 20 15:42:58');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 3','degradeRuleGrade','DEGRADE_GRADE_EXCEPTION_COUNT','exception number strategy','2','degrade type-abnormal number strategy',2,1,'2020-11-19 16:23:45','2020- 11-20 16:01:00');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 4','flowRuleGrade','FLOW_GRADE_QPS','QPS','1','grade type-QPS',0,1,'2020-11-20 15:42:03','2020-11- 20 15:42:03');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 5','flowRuleGrade','FLOW_GRADE_THREAD','number of concurrent threads','0','degrade type-number of concurrent threads',1,1,'2020-11-20 15:44:44',' 2020-11-20 15:44:44');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 6','flowRuleControlBehavior','CONTROL_BEHAVIOR_DEFAULT','direct rejection by default','0','control behavior-direct rejection by default',0,1,'2020-11-20 15:46:22','2020 -11-20 15:48:36');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 7','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP','warm up','1','control behavior-warm up',1,1,'2020-11-20 15:47:05','2020-11 -20 15:47:05');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 8','flowRuleControlBehavior','CONTROL_BEHAVIOR_RATE_LIMITER','constant speed queuing','2','control behavior-uniform speed queuing',2,1,'2020-11-20 15:49:45','2020-11 -20 15:49:45');
+INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 9','flowRuleControlBehavior','CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER','preheating uniformly queued','3','control behavior-preheating uniformly queued',3,1,'2020-11-20 15:51:25', '2020-11-20 15:51:37');
 INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 10','permission','REJECT','reject','reject','reject',0,1,'2020-11-22 12:04:10','2020-11-22 12 :04:10');
 INSERT IGNORE INTO `soul_dict` (`id`, `type`,`dict_code`, `dict_name`, `dict_value`, `desc`, `sort`, `enabled`, `date_created`, `date_updated`) VALUES (' 11','permission','ALLOW','allow','allow','allow',1,1,'2020-11-22 12:04:10','2020-11-22 12 :04:10');
 
 /*plugin*/
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1','sign','1', '0', ' 2018-06-14 10:17:35', '2018-06-14 10:17:35');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('2','waf', '1',' {""model"":""black""}','0', '2018-06-23 10:26:30', '2018-06-13 15:43:10');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('3','rewrite', '1','0', ' 2018-06-23 10:26:34', '2018-06-25 13:59:31');
-INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('4','rate_limiter','1',' {""master"":""mymaster"",""mode"":""Standalone"",""url"":""192.168.1.1:6379"",""password"":""abc""}', '0', '2018-06-23 10:26:37', '2018-06-13 15:34:48');
+INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('4','rate_limiter','1',' {""master"":""mymaster"",""mode"":""standalone"",""url"":""192.168.1.1:6379"",""password"":""abc""}', '0', '2018-06-23 10 :26:37', '2018-06-13 15:34:48');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('5','divide', '0','1', ' 2018-06-25 10:19:10', '2018-06-13 13:56:04');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('6','dubbo','1',' {""register"":""zookeeper://localhost:2181""}', '0', '2018-06-23 10:26:41', '2018-06-11 10:11:47');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`,`config`,`enabled`, `date_created`, `date_updated`) VALUES ('7','monitor', '1',' {""metricsName"":""prometheus"",""host"":""localhost"",""port"":""9190"",""async"":""true""}','0', '2018-06-25 13:47:57 ', '2018-06-25 13:47:57');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('8','springCloud','1', '0', ' 2018-06-25 13:47:57', '2018-06-25 13:47:57');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('9','hystrix', '0','0', ' 2020-01-15 10:19:10', '2020-01-15 10:19:10');
 INSERT IGNORE INTO `plugin` (`id`, `name`,`role`, `enabled`, `date_created`, `date_updated`) VALUES ('10','sentinel', '1','0', ' 2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `config`, `enabled`, `date_created`, `date_updated`) VALUES ('11','sofa', '0', ' {""protocol"":""zookeeper"",""register"":""127.0.0.1:2181""}', '0', '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `config`, `enabled`, `date_created`, `date_updated`) VALUES ('11','sofa', '0', ' {""protocol"":""zookeeper"",""register"":""127.0.0.1:2181""}', '0', '2020-11-09 01:19:10', '2020-11-09 01:19: 10');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('12','resilience4j', '1','0', ' 2020-11-09 01:19:10', '2020-11-09 01:19:10');
 
 /**default admin user**/
 INSERT IGNORE INTO `dashboard_user` (`id`, `user_name`, `password`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1','admin','jHcpKkiDbbQh7W7hh8yQSA==' , '1', '1', '2018-06-23 15:12:22', '2018-06-23 15:12:23');
 
 /*insert plugin_handle data for sentinel*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('1','10' ,'flowRuleGrade','Current limit threshold type','3', 2, 8, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('2','10' ,'flowRuleControlBehavior','flow control effect','3', 2, 5, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('3','10' ,'flowRuleEnable','Whether flow control is enabled (1 or 0)', '1', 2, 7, '2020-11-09 01:19:10', '2020-11-09 01:19:10' );
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('4','10' ,'flowRuleCount','Flow limit threshold','1', 2, 6, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('5','10' ,'degradeRuleEnable','Whether to open the fuse (1 or 0)', '1', 2, 2, '2020-11-09 01:19:10', '2020-11-09 01:19:10') ;
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('6','10' ,'degradeRuleGrade','Fuse Type','3', 2, 3, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('7','10' ,'degradeRuleCount','fuse threshold','1', 2, 1, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('8','10' ,'degradeRuleTimeWindow','Fuse window size','1', 2, 4, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('1','10' ,'flowRuleGrade','grade type','3', 2, 8, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('2','10' ,'flowRuleControlBehavior','control behavior','3', 2, 5, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('3','10' ,'flowRuleEnable','whether control behavior is enabled (1 or 0)', '1', 2, 7, '2020-11-09 01:19:10', '2020-11-09 01:19:10' );
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('4','10' ,'flowRuleCount','grade count','1', 2, 6, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('5','10' ,'degradeRuleEnable','whether to open the degrade (1 or 0)', '1', 2, 2, '2020-11-09 01:19:10', '2020-11-09 01:19:10') ;
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('6','10' ,'degradeRuleGrade','degrade type','3', 2, 3, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('7','10' ,'degradeRuleCount','degrade count','1', 2, 1, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('8','10' ,'degradeRuleTimeWindow','degrade window size','1', 2, 4, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
 
 /*insert plugin_handle data for waf*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('9','2' ,'permission','permission','3', 2, 1, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('10','2' ,'statusCode','Status Code','2', 2, 2, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('10','2' ,'statusCode','status code','2', 2, 2, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
 
 /*insert plugin_handle data for rate_limiter*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('11', '4' ,'replenishRate','Rate', 2, 2, 2, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('12', '4' ,'burstCapacity','Capacity', 2, 2, 1, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('11', '4' ,'replenishRate','rate', 2, 2, 2, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('12', '4' ,'burstCapacity','capacity', 2, 2, 1, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
 
 
 /*insert plugin_handle data for rewrite*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('13', '3' ,'rewriteURI','rewriteURI', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 
 /*insert plugin_handle data for springCloud*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('14', '8' ,'path','path', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('15', '8' ,'timeout','Timeout (ms)', 1, 2, 2, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('15', '8' ,'timeout','timeout (ms)', 1, 2, 2, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('16', '8' ,'serviceId','application name', 2, 1, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 
 /*insert plugin_handle data for resilience4j*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('17', '12' ,'timeoutDurationRate','Flow control timeout (ms)', 1, 2, 1, '2020-11-28 11:08:14', '2020-11-28 11:19:12');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('17', '12' ,'timeoutDurationRate','control behavior timeout (ms)', 1, 2, 1, '2020-11-28 11:08:14', '2020-11-28 11:19:12');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('18', '12' ,'limitRefreshPeriod','token filling period (ms)', 1, 2, 0, '2020-11-28 11:18:54', '2020-11-28 11:22:40');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('19', '12' ,'limitForPeriod','token filling number', 1, 2, 0, '2020-11-28 11:20:11', '2020-11-28 11:20:11');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('20', '12' ,'circuitEnable','Open fuse', 1, 2, 2, '2020-11-28 11:23:09', '2020-11-28 11:24:12');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('21', '12' ,'timeoutDuration','Fuse timeout (ms)', 1, 2, 2, '2020-11-28 11:25:56', '2020-11-28 11:25:56');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('22', '12' ,'fallbackUri','Downgrade uri', 2, 2, 2, '2020-11-28 11:26:44', '2020-11-28 11:26:51');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('20', '12' ,'circuitEnable','circuit enable', 1, 2, 2, '2020-11-28 11:23:09', '2020-11-28 11:24:12');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('21', '12' ,'timeoutDuration','circuit timeout (ms)', 1, 2, 2, '2020-11-28 11:25:56', '2020-11-28 11:25:56');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('22', '12' ,'fallbackUri','fallback uri', 2, 2, 2, '2020-11-28 11:26:44', '2020-11-28 11:26:51');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('23', '12' ,'slidingWindowSize','sliding window size', 1, 2, 2, '2020-11-28 11:27:34', '2020-11-28 11:27:34');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('24', '12' ,'slidingWindowType','sliding window type', 1, 2, 2, '2020-11-28 11:28:05', '2020-11-28 11:28:05');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('25', '12' ,'minimumNumberOfCalls','Error minimum calculation threshold', 1, 2, 2, '2020-11-28 11:28:34', '2020-11-28 11:28:34');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('26', '12' ,'waitIntervalFunctionInOpenState','Fuse opening duration', 1, 2, 2, '2020-11-28 11:29:01', '2020-11-28 11:29:01');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('27', '12' ,'permittedNumberOfCallsInHalfOpenState','Half open threshold', 1, 2, 2, '2020-11-28 11:29:55', '2020-11-28 11:29:55');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('28', '12' ,'failureRateThreshold','fuse error rate', 1, 2, 2, '2020-11-28 11:30:40', '2020-11-28 11:30:40');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('25', '12' ,'minimumNumberOfCalls','enabledrror minimum calculation threshold', 1, 2, 2, '2020-11-28 11:28:34', '2020-11-28 11:28:34');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('26', '12' ,'waitIntervalFunctionInOpenState','degrade opening duration', 1, 2, 2, '2020-11-28 11:29:01', '2020-11-28 11:29:01');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('27', '12' ,'permittedNumberOfCallsInHalfOpenState','half open threshold', 1, 2, 2, '2020-11-28 11:29:55', '2020-11-28 11:29:55');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('28', '12' ,'failureRateThreshold','degrade ailure rate', 1, 2, 2, '2020-11-28 11:30:40', '2020-11-28 11:30:40');
+","[{'comment': 'too many empty lines', 'commenter': 'songyuequan'}]"
546,soul-admin/src/main/resources/META-INF/schema.sql,"@@ -212,42 +212,42 @@ INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `d
 INSERT IGNORE INTO `dashboard_user` (`id`, `user_name`, `password`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1','admin','jHcpKkiDbbQh7W7hh8yQSA==' , '1', '1', '2018-06-23 15:12:22', '2018-06-23 15:12:23');
 
 /*insert plugin_handle data for sentinel*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('1','10' ,'flowRuleGrade','Current limit threshold type','3', 2, 8, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('2','10' ,'flowRuleControlBehavior','flow control effect','3', 2, 5, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('3','10' ,'flowRuleEnable','Whether flow control is enabled (1 or 0)', '1', 2, 7, '2020-11-09 01:19:10', '2020-11-09 01:19:10' );
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('4','10' ,'flowRuleCount','Flow limit threshold','1', 2, 6, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('5','10' ,'degradeRuleEnable','Whether to open the fuse (1 or 0)', '1', 2, 2, '2020-11-09 01:19:10', '2020-11-09 01:19:10') ;
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('6','10' ,'degradeRuleGrade','Fuse Type','3', 2, 3, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('7','10' ,'degradeRuleCount','fuse threshold','1', 2, 1, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('8','10' ,'degradeRuleTimeWindow','Fuse window size','1', 2, 4, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('1','10' ,'flowRuleGrade','grade type','3', 2, 8, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('2','10' ,'flowRuleControlBehavior','control behavior','3', 2, 5, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('3','10' ,'flowRuleEnable','whether control behavior is enabled (1 or 0)', '1', 2, 7, '2020-11-09 01:19:10', '2020-11-09 01:19:10' );
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('4','10' ,'flowRuleCount','grade count','1', 2, 6, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('5','10' ,'degradeRuleEnable','whether to open the degrade (1 or 0)', '1', 2, 2, '2020-11-09 01:19:10', '2020-11-09 01:19:10') ;
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('6','10' ,'degradeRuleGrade','degrade type','3', 2, 3, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('7','10' ,'degradeRuleCount','degrade count','1', 2, 1, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('8','10' ,'degradeRuleTimeWindow','degrade window size','1', 2, 4, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
 
 /*insert plugin_handle data for waf*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('9','2' ,'permission','permission','3', 2, 1, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('10','2' ,'statusCode','Status Code','2', 2, 2, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('10','2' ,'statusCode','status code','2', 2, 2, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
 
 /*insert plugin_handle data for rate_limiter*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('11', '4' ,'replenishRate','Rate', 2, 2, 2, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('12', '4' ,'burstCapacity','Capacity', 2, 2, 1, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('11', '4' ,'replenishRate','rate', 2, 2, 2, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('12', '4' ,'burstCapacity','capacity', 2, 2, 1, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
 
 
 /*insert plugin_handle data for rewrite*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('13', '3' ,'rewriteURI','rewriteURI', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 
 /*insert plugin_handle data for springCloud*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('14', '8' ,'path','path', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('15', '8' ,'timeout','Timeout (ms)', 1, 2, 2, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('15', '8' ,'timeout','timeout (ms)', 1, 2, 2, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('16', '8' ,'serviceId','application name', 2, 1, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 
 /*insert plugin_handle data for resilience4j*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('17', '12' ,'timeoutDurationRate','Flow control timeout (ms)', 1, 2, 1, '2020-11-28 11:08:14', '2020-11-28 11:19:12');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('17', '12' ,'timeoutDurationRate','control behavior timeout (ms)', 1, 2, 1, '2020-11-28 11:08:14', '2020-11-28 11:19:12');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('18', '12' ,'limitRefreshPeriod','token filling period (ms)', 1, 2, 0, '2020-11-28 11:18:54', '2020-11-28 11:22:40');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('19', '12' ,'limitForPeriod','token filling number', 1, 2, 0, '2020-11-28 11:20:11', '2020-11-28 11:20:11');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('20', '12' ,'circuitEnable','Open fuse', 1, 2, 2, '2020-11-28 11:23:09', '2020-11-28 11:24:12');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('21', '12' ,'timeoutDuration','Fuse timeout (ms)', 1, 2, 2, '2020-11-28 11:25:56', '2020-11-28 11:25:56');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('22', '12' ,'fallbackUri','Downgrade uri', 2, 2, 2, '2020-11-28 11:26:44', '2020-11-28 11:26:51');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('20', '12' ,'circuitEnable','circuit enable', 1, 2, 2, '2020-11-28 11:23:09', '2020-11-28 11:24:12');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('21', '12' ,'timeoutDuration','circuit timeout (ms)', 1, 2, 2, '2020-11-28 11:25:56', '2020-11-28 11:25:56');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('22', '12' ,'fallbackUri','fallback uri', 2, 2, 2, '2020-11-28 11:26:44', '2020-11-28 11:26:51');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('23', '12' ,'slidingWindowSize','sliding window size', 1, 2, 2, '2020-11-28 11:27:34', '2020-11-28 11:27:34');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('24', '12' ,'slidingWindowType','sliding window type', 1, 2, 2, '2020-11-28 11:28:05', '2020-11-28 11:28:05');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('25', '12' ,'minimumNumberOfCalls','Error minimum calculation threshold', 1, 2, 2, '2020-11-28 11:28:34', '2020-11-28 11:28:34');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('26', '12' ,'waitIntervalFunctionInOpenState','Fuse opening duration', 1, 2, 2, '2020-11-28 11:29:01', '2020-11-28 11:29:01');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('27', '12' ,'permittedNumberOfCallsInHalfOpenState','Half open threshold', 1, 2, 2, '2020-11-28 11:29:55', '2020-11-28 11:29:55');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('28', '12' ,'failureRateThreshold','fuse error rate', 1, 2, 2, '2020-11-28 11:30:40', '2020-11-28 11:30:40');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('25', '12' ,'minimumNumberOfCalls','enabledrror minimum calculation threshold', 1, 2, 2, '2020-11-28 11:28:34', '2020-11-28 11:28:34');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('26', '12' ,'waitIntervalFunctionInOpenState','degrade opening duration', 1, 2, 2, '2020-11-28 11:29:01', '2020-11-28 11:29:01');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('27', '12' ,'permittedNumberOfCallsInHalfOpenState','half open threshold', 1, 2, 2, '2020-11-28 11:29:55', '2020-11-28 11:29:55');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('28', '12' ,'failureRateThreshold','degrade ailure rate', 1, 2, 2, '2020-11-28 11:30:40', '2020-11-28 11:30:40');","[{'comment': 'Miss f?', 'commenter': 'tydhot'}]"
546,soul-admin/src/main/resources/META-INF/schema.sql,"@@ -212,42 +212,42 @@ INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `enabled`, `date_created`, `d
 INSERT IGNORE INTO `dashboard_user` (`id`, `user_name`, `password`, `role`, `enabled`, `date_created`, `date_updated`) VALUES ('1','admin','jHcpKkiDbbQh7W7hh8yQSA==' , '1', '1', '2018-06-23 15:12:22', '2018-06-23 15:12:23');
 
 /*insert plugin_handle data for sentinel*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('1','10' ,'flowRuleGrade','Current limit threshold type','3', 2, 8, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('2','10' ,'flowRuleControlBehavior','flow control effect','3', 2, 5, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('3','10' ,'flowRuleEnable','Whether flow control is enabled (1 or 0)', '1', 2, 7, '2020-11-09 01:19:10', '2020-11-09 01:19:10' );
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('4','10' ,'flowRuleCount','Flow limit threshold','1', 2, 6, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('5','10' ,'degradeRuleEnable','Whether to open the fuse (1 or 0)', '1', 2, 2, '2020-11-09 01:19:10', '2020-11-09 01:19:10') ;
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('6','10' ,'degradeRuleGrade','Fuse Type','3', 2, 3, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('7','10' ,'degradeRuleCount','fuse threshold','1', 2, 1, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('8','10' ,'degradeRuleTimeWindow','Fuse window size','1', 2, 4, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('1','10' ,'flowRuleGrade','grade type','3', 2, 8, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('2','10' ,'flowRuleControlBehavior','control behavior','3', 2, 5, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('3','10' ,'flowRuleEnable','whether control behavior is enabled (1 or 0)', '1', 2, 7, '2020-11-09 01:19:10', '2020-11-09 01:19:10' );
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('4','10' ,'flowRuleCount','grade count','1', 2, 6, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('5','10' ,'degradeRuleEnable','whether to open the degrade (1 or 0)', '1', 2, 2, '2020-11-09 01:19:10', '2020-11-09 01:19:10') ;
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('6','10' ,'degradeRuleGrade','degrade type','3', 2, 3, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('7','10' ,'degradeRuleCount','degrade count','1', 2, 1, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('8','10' ,'degradeRuleTimeWindow','degrade window size','1', 2, 4, '2020-11-09 01:19:10', '2020-11-09 01:19:10');
 
 /*insert plugin_handle data for waf*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('9','2' ,'permission','permission','3', 2, 1, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('10','2' ,'statusCode','Status Code','2', 2, 2, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('10','2' ,'statusCode','status code','2', 2, 2, '2020-11-22 12:04:10', '2020-11-22 12:04:10');
 
 /*insert plugin_handle data for rate_limiter*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('11', '4' ,'replenishRate','Rate', 2, 2, 2, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('12', '4' ,'burstCapacity','Capacity', 2, 2, 1, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('11', '4' ,'replenishRate','rate', 2, 2, 2, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('12', '4' ,'burstCapacity','capacity', 2, 2, 1, '2020-11-24 00:17:10', '2020-11-24 00:17:10');
 
 
 /*insert plugin_handle data for rewrite*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('13', '3' ,'rewriteURI','rewriteURI', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 
 /*insert plugin_handle data for springCloud*/
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('14', '8' ,'path','path', 2, 2, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('15', '8' ,'timeout','Timeout (ms)', 1, 2, 2, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('15', '8' ,'timeout','timeout (ms)', 1, 2, 2, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('16', '8' ,'serviceId','application name', 2, 1, 1, '2020-11-29 16:07:10', '2020-11-29 16:07:10');
 
 /*insert plugin_handle data for resilience4j*/
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('17', '12' ,'timeoutDurationRate','Flow control timeout (ms)', 1, 2, 1, '2020-11-28 11:08:14', '2020-11-28 11:19:12');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('17', '12' ,'timeoutDurationRate','control behavior timeout (ms)', 1, 2, 1, '2020-11-28 11:08:14', '2020-11-28 11:19:12');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('18', '12' ,'limitRefreshPeriod','token filling period (ms)', 1, 2, 0, '2020-11-28 11:18:54', '2020-11-28 11:22:40');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('19', '12' ,'limitForPeriod','token filling number', 1, 2, 0, '2020-11-28 11:20:11', '2020-11-28 11:20:11');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('20', '12' ,'circuitEnable','Open fuse', 1, 2, 2, '2020-11-28 11:23:09', '2020-11-28 11:24:12');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('21', '12' ,'timeoutDuration','Fuse timeout (ms)', 1, 2, 2, '2020-11-28 11:25:56', '2020-11-28 11:25:56');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('22', '12' ,'fallbackUri','Downgrade uri', 2, 2, 2, '2020-11-28 11:26:44', '2020-11-28 11:26:51');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('20', '12' ,'circuitEnable','circuit enable', 1, 2, 2, '2020-11-28 11:23:09', '2020-11-28 11:24:12');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('21', '12' ,'timeoutDuration','circuit timeout (ms)', 1, 2, 2, '2020-11-28 11:25:56', '2020-11-28 11:25:56');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('22', '12' ,'fallbackUri','fallback uri', 2, 2, 2, '2020-11-28 11:26:44', '2020-11-28 11:26:51');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('23', '12' ,'slidingWindowSize','sliding window size', 1, 2, 2, '2020-11-28 11:27:34', '2020-11-28 11:27:34');
 INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('24', '12' ,'slidingWindowType','sliding window type', 1, 2, 2, '2020-11-28 11:28:05', '2020-11-28 11:28:05');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('25', '12' ,'minimumNumberOfCalls','Error minimum calculation threshold', 1, 2, 2, '2020-11-28 11:28:34', '2020-11-28 11:28:34');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('26', '12' ,'waitIntervalFunctionInOpenState','Fuse opening duration', 1, 2, 2, '2020-11-28 11:29:01', '2020-11-28 11:29:01');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('27', '12' ,'permittedNumberOfCallsInHalfOpenState','Half open threshold', 1, 2, 2, '2020-11-28 11:29:55', '2020-11-28 11:29:55');
-INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('28', '12' ,'failureRateThreshold','fuse error rate', 1, 2, 2, '2020-11-28 11:30:40', '2020-11-28 11:30:40');
+INSERT IGNORE INTO plugin_handle (`id`,`plugin_id`,`field`,`label`,`data_type`,`type`,`sort`,`date_created`,`date_updated`) VALUES ('25', '12' ,'minimumNumberOfCalls','enabledrror minimum calculation threshold', 1, 2, 2, '2020-11-28 11:28:34', '2020-11-28 11:28:34');","[{'comment': 'enabled error ?', 'commenter': 'tydhot'}]"
565,soul-admin/src/test/java/org/dromara/soul/admin/service/SoulClientRegisterServiceTest.java,"@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.service;
+
+import org.dromara.soul.admin.dto.MetaDataDTO;
+import org.dromara.soul.admin.dto.SpringCloudRegisterDTO;
+import org.dromara.soul.admin.dto.SpringMvcRegisterDTO;
+import org.dromara.soul.admin.service.impl.SoulClientRegisterServiceImpl;
+import org.dromara.soul.admin.utils.SoulResultMessage;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.BDDMockito.given;
+
+/**
+ * Test cases for SoulClientRegisterService.
+ *
+ * @author sakiila
+ */
+@RunWith(MockitoJUnitRunner.class)
+public final class SoulClientRegisterServiceTest {
+
+    @Mock
+    private SoulClientRegisterServiceImpl soulClientRegisterService;
+
+    @Test
+    public void testRegisterSpringMvc() {
+        SpringMvcRegisterDTO dto = buildSpringMvcRegisterDTO();
+        given(soulClientRegisterService.registerSpringMvc(any())).willReturn(SoulResultMessage.SUCCESS);","[{'comment': 'You can also mock `metaDataMapper ` and `eventPublisher ` to test more scenarios. Thanks.\r\n\r\n', 'commenter': 'dengliming'}]"
567,soul-admin/src/test/java/org/dromara/soul/admin/mapper/AppAuthMapperTest.java,"@@ -0,0 +1,155 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.mapper;
+
+import org.dromara.soul.admin.AbstractSpringIntegrationTest;
+import org.dromara.soul.admin.entity.AppAuthDO;
+import org.dromara.soul.admin.query.AppAuthQuery;
+import org.dromara.soul.common.utils.SignUtils;
+import org.dromara.soul.common.utils.UUIDUtils;
+import org.junit.Before;
+import org.junit.Test;
+
+import javax.annotation.Resource;
+import java.sql.Timestamp;
+import java.time.LocalDateTime;
+import java.util.List;
+
+import static org.hamcrest.Matchers.greaterThan;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertNotNull;
+
+
+/**
+ * Test cases for SoulDictMapper.","[{'comment': '?', 'commenter': 'dengliming'}, {'comment': 'ok', 'commenter': 'tangtian8'}]"
571,soul-admin/src/test/java/org/dromara/soul/admin/config/SecretConfigurationTest.java,"@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.config;
+
+import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.springframework.beans.factory.NoSuchBeanDefinitionException;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+
+/**
+ * Test SecretConfiguration.
+ *
+ * @author Jiang Jining
+ */
+public class SecretConfigurationTest extends AbstractConfigurationTest {","[{'comment': 'add final on the class', 'commenter': 'songyuequan'}]"
573,soul-plugin/soul-plugin-sign/src/test/java/org/dromara/soul/plugin/sign/service/DefaultSignServiceTest.java,"@@ -0,0 +1,202 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.plugin.sign.service;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import org.apache.commons.lang3.tuple.Pair;
+import org.dromara.soul.common.constant.Constants;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.enums.PluginEnum;
+import org.dromara.soul.common.utils.SignUtils;
+import org.dromara.soul.plugin.api.SignService;
+import org.dromara.soul.plugin.api.context.SoulContext;
+import org.dromara.soul.plugin.api.result.SoulResultEnum;
+import org.dromara.soul.plugin.base.cache.BaseDataCache;
+import org.dromara.soul.plugin.sign.cache.SignAuthDataCache;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
+import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.server.ServerWebExchange;
+
+import java.util.Collections;
+import java.util.Map;
+
+/**
+ * DefaultSignService Test.
+ *
+ * @author Phoenix Luo
+ * @version 2020/12/5
+ **/
+@RunWith(MockitoJUnitRunner.class)
+public class DefaultSignServiceTest {","[{'comment': 'add final on the class', 'commenter': 'songyuequan'}, {'comment': ""OK, Thanks ,I checked code style in the local, but don't tell me test class must be `final`. I'll pay attention to that later.\r\nIn locally, I did not got many error by use ’ mvn clean install -Dmaven.javadoc.skip=true‘. \r\nI'll test it again"", 'commenter': 'lxl910128'}, {'comment': 'yes, that is a appointment but not in the code style', 'commenter': 'songyuequan'}]"
573,soul-plugin/soul-plugin-sign/src/test/java/org/dromara/soul/plugin/sign/service/DefaultSignServiceTest.java,"@@ -0,0 +1,201 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.plugin.sign.service;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.tuple.Pair;
+import org.dromara.soul.common.constant.Constants;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.enums.PluginEnum;
+import org.dromara.soul.common.utils.SignUtils;
+import org.dromara.soul.plugin.api.SignService;
+import org.dromara.soul.plugin.api.context.SoulContext;
+import org.dromara.soul.plugin.api.result.SoulResultEnum;
+import org.dromara.soul.plugin.base.cache.BaseDataCache;
+import org.dromara.soul.plugin.sign.cache.SignAuthDataCache;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
+import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.server.ServerWebExchange;
+
+import java.util.Collections;
+import java.util.Map;
+
+/**
+ * DefaultSignService Test.
+ *
+ * @author Phoenix Luo
+ * @version 2020/12/5","[{'comment': 'Remove `@version`', 'commenter': 'dengliming'}, {'comment': 'OK I will change it ', 'commenter': 'lxl910128'}]"
573,soul-plugin/soul-plugin-sign/src/test/java/org/dromara/soul/plugin/sign/service/DefaultSignServiceTest.java,"@@ -0,0 +1,201 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.plugin.sign.service;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.tuple.Pair;
+import org.dromara.soul.common.constant.Constants;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.enums.PluginEnum;
+import org.dromara.soul.common.utils.SignUtils;
+import org.dromara.soul.plugin.api.SignService;
+import org.dromara.soul.plugin.api.context.SoulContext;
+import org.dromara.soul.plugin.api.result.SoulResultEnum;
+import org.dromara.soul.plugin.base.cache.BaseDataCache;
+import org.dromara.soul.plugin.sign.cache.SignAuthDataCache;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
+import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.server.ServerWebExchange;
+
+import java.util.Collections;
+import java.util.Map;
+
+/**
+ * DefaultSignService Test.
+ *
+ * @author Phoenix Luo
+ * @version 2020/12/5
+ **/
+@RunWith(MockitoJUnitRunner.class)
+@Slf4j
+public final class DefaultSignServiceTest {
+    
+    private SignService signService;
+    
+    private ServerWebExchange exchange;
+    
+    private final String appKey = ""D1DFC83F3BC64FABB89DFBD54E5A28C8"";
+    
+    private final String secretKey = ""692C479F98C841FCBEB444B7CA775F63"";
+    
+    private SoulContext passed;
+    
+    @Value(""${soul.sign.delay:5}"")
+    private int delay;
+    
+    @Before
+    public void setup() {
+        this.signService = new DefaultSignService();
+        this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get(""localhost"").build());
+        
+        final String path = ""/test-api/demo/test"";
+        PluginData signData = new PluginData();
+        signData.setId(""1"");
+        signData.setName(PluginEnum.SIGN.getName());
+        signData.setEnabled(true);
+        signData.setRole(1);
+        BaseDataCache.getInstance().cachePluginData(signData);
+        
+        AppAuthData authData = new AppAuthData();
+        authData.setAppKey(appKey);
+        authData.setAppSecret(secretKey);
+        authData.setEnabled(true);
+        AuthPathData authPathData = new AuthPathData();
+        authPathData.setAppName(""test-api"");
+        authPathData.setPath(path);
+        authPathData.setEnabled(true);
+        authData.setPathDataList(Lists.newArrayList(authPathData));
+        SignAuthDataCache.getInstance().cacheAuthData(authData);
+        
+        this.passed = new SoulContext();
+        this.passed.setModule(""/test-api"");
+        this.passed.setMethod(""/demo/test"");
+        this.passed.setRpcType(""springCloud"");
+        this.passed.setHttpMethod(""GET"");
+        this.passed.setPath(path);
+        final String timestamp = String.valueOf(System.currentTimeMillis());
+        this.passed.setTimestamp(timestamp);
+        this.passed.setSign(buildSign(secretKey, timestamp, this.passed.getPath()));
+        this.passed.setAppKey(appKey);
+        this.passed.setContextPath(""/test-api"");
+        this.passed.setRealUrl(""/demo/test"");
+    }
+    
+    @Test
+    public void normalTest() {
+        this.exchange.getAttributes().put(Constants.CONTEXT, this.passed);
+        
+        Pair<Boolean, String> ret = this.signService.signVerify(this.exchange);
+        assert ret.getLeft() : ""sign正向测试未通过！"";","[{'comment': ""Why don't you use assert from junit. Please keep consistent with other test classes."", 'commenter': 'dengliming'}, {'comment': 'Sorry I will fix this ', 'commenter': 'lxl910128'}]"
573,soul-plugin/soul-plugin-sign/src/main/java/org/dromara/soul/plugin/sign/service/DefaultSignService.java,"@@ -73,7 +74,7 @@
             return Pair.of(Boolean.FALSE, Constants.SIGN_PARAMS_ERROR);
         }
         final LocalDateTime start = DateUtils.formatLocalDateTimeFromTimestamp(Long.parseLong(soulContext.getTimestamp()));
-        final LocalDateTime now = LocalDateTime.now();
+        final LocalDateTime now = LocalDateTime.now(ZoneOffset.ofHours(8));","[{'comment': ""If that's bug, Can you file a issue to describe it?"", 'commenter': 'dengliming'}, {'comment': 'OK fix this bug  ,  then I will finished this test future ', 'commenter': 'lxl910128'}]"
584,soul-admin/src/test/java/org/dromara/soul/admin/service/RuleServiceTest.java,"@@ -0,0 +1,265 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.service;
+
+import org.dromara.soul.admin.dto.RuleConditionDTO;
+import org.dromara.soul.admin.dto.RuleDTO;
+import org.dromara.soul.admin.entity.PluginDO;
+import org.dromara.soul.admin.entity.RuleConditionDO;
+import org.dromara.soul.admin.entity.RuleDO;
+import org.dromara.soul.admin.entity.SelectorDO;
+import org.dromara.soul.admin.mapper.PluginMapper;
+import org.dromara.soul.admin.mapper.RuleConditionMapper;
+import org.dromara.soul.admin.mapper.RuleMapper;
+import org.dromara.soul.admin.mapper.SelectorMapper;
+import org.dromara.soul.admin.page.CommonPager;
+import org.dromara.soul.admin.page.PageParameter;
+import org.dromara.soul.admin.query.RuleConditionQuery;
+import org.dromara.soul.admin.query.RuleQuery;
+import org.dromara.soul.admin.service.impl.RuleServiceImpl;
+import org.dromara.soul.admin.vo.RuleVO;
+import org.dromara.soul.common.dto.RuleData;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.context.ApplicationEventPublisher;
+import java.sql.Timestamp;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import static org.hamcrest.Matchers.greaterThan;
+import static org.junit.Assert.*;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.BDDMockito.given;
+
+/**
+ * Test cases for RuleService.
+ *
+ * @author kennhua
+ */
+@RunWith(MockitoJUnitRunner.class)
+public final class RuleServiceTest {
+
+    @InjectMocks
+    private RuleServiceImpl ruleService;
+
+    @Mock
+    private RuleMapper ruleMapper;
+
+    @Mock
+    private RuleConditionMapper ruleConditionMapper;
+
+    @Mock
+    private SelectorMapper selectorMapper;
+
+    @Mock
+    private PluginMapper pluginMapper;
+
+    @Mock
+    private ApplicationEventPublisher eventPublisher;
+
+    @Test
+    public void testRegister() {
+        publishEvent();
+        testRegisterCreate();
+        testRegisterUpdate();
+    }
+
+    @Test
+    public void testCreateOrUpdate() {
+        publishEvent();
+        testCreate();
+        testUpdate();
+    }
+
+    @Test
+    public void testDelete() {
+        publishEvent();
+        RuleDO ruleDO = buildRuleDO(""123"");
+        given(this.ruleMapper.selectById(""123"")).willReturn(ruleDO);
+        final List<String> ids = Arrays.asList(ruleDO.getId());
+        assertEquals(this.ruleService.delete(ids), ids.size());
+    }
+
+    @Test
+    public void testFindById() {
+        RuleDO ruleDO = buildRuleDO(""123"");
+        given(this.ruleMapper.selectById(""123"")).willReturn(ruleDO);
+        RuleConditionQuery ruleConditionQuery = buildRuleConditionQuery();
+        RuleConditionDO ruleCondition = buildRuleConditionDO();
+        given(this.ruleConditionMapper.selectByQuery(ruleConditionQuery)).willReturn(Arrays.asList(ruleCondition));
+        RuleVO ruleVO = buildRuleVO(""123"");
+        final RuleVO ruleVOById = this.ruleService.findById(""123"");
+        assertNotNull(ruleVOById);
+        assertEquals(ruleVOById.getId(), ruleVO.getId());
+    }
+
+    @Test
+    public void testListByPage() {
+        PageParameter parameter = new PageParameter();
+        parameter.setPageSize(5);
+        parameter.setTotalCount(10);
+        parameter.setTotalPage(parameter.getTotalCount() / parameter.getPageSize());
+        RuleQuery ruleQuery = new RuleQuery(""456"", parameter);
+        given(this.ruleMapper.countByQuery(ruleQuery)).willReturn(10);
+        List<RuleDO> ruleDOList = new ArrayList<>();
+        for (int i = 0; i < 10; i++) {
+            RuleDO ruleDO = buildRuleDO(String.valueOf(i));
+            ruleDOList.add(ruleDO);
+        }
+        given(this.ruleMapper.selectByQuery(ruleQuery)).willReturn(ruleDOList);
+        final CommonPager<RuleVO> ruleVOCommonPager = this.ruleService.listByPage(ruleQuery);
+        assertEquals(ruleVOCommonPager.getDataList().size(), ruleDOList.size());
+    }
+
+    @Test
+    public void testListAll() {
+        publishEvent();
+        RuleConditionQuery ruleConditionQuery = buildRuleConditionQuery();
+        RuleConditionDO ruleCondition = buildRuleConditionDO();
+        given(this.ruleConditionMapper.selectByQuery(ruleConditionQuery)).willReturn(Arrays.asList(ruleCondition));
+        RuleDO ruleDO = buildRuleDO(""123"");
+        List<RuleDO> ruleDOList = Arrays.asList(ruleDO);
+        given(this.ruleMapper.selectAll()).willReturn(ruleDOList);
+        List<RuleData> dataList = this.ruleService.listAll();
+        assertNotNull(dataList);
+        assertEquals(ruleDOList.size(), dataList.size());
+    }
+
+    @Test
+    public void testFindBySelectorId() {
+        publishEvent();
+        RuleConditionQuery ruleConditionQuery = buildRuleConditionQuery();
+        RuleConditionDO ruleCondition = buildRuleConditionDO();
+        given(this.ruleConditionMapper.selectByQuery(ruleConditionQuery)).willReturn(Arrays.asList(ruleCondition));
+        RuleDO ruleDO = buildRuleDO(""123"");
+        List<RuleDO> ruleDOList = Arrays.asList(ruleDO);
+        given(this.ruleMapper.findBySelectorId(""456"")).willReturn(ruleDOList);
+        List<RuleData> dataList = this.ruleService.findBySelectorId(""456"");
+        assertNotNull(dataList);
+        assertEquals(ruleDOList.size(), dataList.size());
+    }
+
+    private void publishEvent() {
+        PluginDO pluginDO = buildPluginDO();
+        SelectorDO selectorDO = buildSelectorDO();
+        given(this.selectorMapper.selectById(""456"")).willReturn(selectorDO);
+        given(this.pluginMapper.selectById(""789"")).willReturn(pluginDO);
+    }
+
+    private void testRegisterCreate() {
+        RuleDTO ruleDTO = buildRuleDTO("""");
+        RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO);
+        String ruleId = this.ruleService.register(ruleDTO);
+        assertNotNull(ruleId);
+        assertEquals(ruleId.length(), ruleDO.getId().length());
+    }
+
+    private void testRegisterUpdate() {
+        RuleDTO ruleDTO = buildRuleDTO(""123"");
+        String ruleId = this.ruleService.register(ruleDTO);
+        assertNotNull(ruleId);
+        assertEquals(ruleId, ruleDTO.getId());
+    }
+
+    private void testCreate() {
+        RuleDTO ruleDTO = buildRuleDTO("""");
+        given(this.ruleMapper.insertSelective(any())).willReturn(1);
+        assertThat(this.ruleService.createOrUpdate(ruleDTO), greaterThan(0));
+    }
+
+    private void testUpdate() {
+        RuleDTO ruleDTO = buildRuleDTO(""123"");
+        given(this.ruleMapper.updateSelective(any())).willReturn(1);
+        assertThat(this.ruleService.createOrUpdate(ruleDTO), greaterThan(0));
+    }
+
+    private RuleDO buildRuleDO(final String id) {
+        RuleDTO ruleDTO = new RuleDTO();
+        if (!"""".equals(id)) {
+            ruleDTO.setId(id);
+        }
+        ruleDTO.setSelectorId(""456"");
+        ruleDTO.setMatchMode(0);
+        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        RuleConditionDTO ruleConditionDTO1 = new RuleConditionDTO();
+        ruleConditionDTO1.setId(""111"");
+        RuleConditionDTO ruleConditionDTO2 = new RuleConditionDTO();
+        ruleConditionDTO2.setId(""222"");
+        ruleDTO.setRuleConditions(Arrays.asList(ruleConditionDTO1, ruleConditionDTO2));
+        RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO);
+        ruleDO.setDateCreated(now);
+        ruleDO.setDateUpdated(now);
+        return ruleDO;
+    }
+
+    private RuleDTO buildRuleDTO(final String id) {
+        RuleDTO ruleDTO = new RuleDTO();
+        if (!"""".equals(id)) {","[{'comment': 'may be we can use a more elegant style by common-lang', 'commenter': 'tydhot'}]"
585,soul-admin/src/test/java/org/dromara/soul/admin/controller/MetaDataControllerTest.java,"@@ -0,0 +1,187 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.controller;
+
+import org.apache.commons.lang3.StringUtils;
+import org.dromara.soul.admin.dto.BatchCommonDTO;
+import org.dromara.soul.admin.dto.MetaDataDTO;
+import org.dromara.soul.admin.page.CommonPager;
+import org.dromara.soul.admin.page.PageParameter;
+import org.dromara.soul.admin.query.MetaDataQuery;
+import org.dromara.soul.admin.service.MetaDataService;
+import org.dromara.soul.admin.utils.SoulResultMessage;
+import org.dromara.soul.admin.vo.MetaDataVO;
+import org.dromara.soul.common.utils.DateUtils;
+import org.dromara.soul.common.utils.GsonUtils;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Arrays;
+
+import static org.hamcrest.core.Is.is;
+import static org.mockito.BDDMockito.given;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+/**
+ * Test cases for MetaDataController.
+ *
+ * @author fcwalker
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class MetaDataControllerTest {","[{'comment': 'add final here ', 'commenter': 'tydhot'}, {'comment': 'add final on the class', 'commenter': 'songyuequan'}]"
586,soul-admin/src/test/java/org/dromara/soul/admin/mapper/MetaDataMapperTest.java,"@@ -0,0 +1,207 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.mapper;
+
+import java.sql.Timestamp;
+
+import org.dromara.soul.admin.AbstractSpringIntegrationTest;
+import org.dromara.soul.admin.entity.MetaDataDO;
+import org.dromara.soul.admin.page.PageParameter;
+import org.dromara.soul.admin.query.MetaDataQuery;
+import org.dromara.soul.common.utils.UUIDUtils;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import javax.annotation.Resource;
+
+import java.util.List;
+
+import static org.hamcrest.Matchers.comparesEqualTo;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+
+/**
+ * Test cases for MetaDataMapper.
+ *
+ * @author pismery
+ */
+class MetaDataMapperTest extends AbstractSpringIntegrationTest {","[{'comment': 'add final on the class', 'commenter': 'songyuequan'}]"
586,soul-admin/src/test/java/org/dromara/soul/admin/mapper/MetaDataMapperTest.java,"@@ -0,0 +1,207 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.mapper;
+
+import java.sql.Timestamp;
+
+import org.dromara.soul.admin.AbstractSpringIntegrationTest;
+import org.dromara.soul.admin.entity.MetaDataDO;
+import org.dromara.soul.admin.page.PageParameter;
+import org.dromara.soul.admin.query.MetaDataQuery;
+import org.dromara.soul.common.utils.UUIDUtils;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;","[{'comment': 'maybe  you can remove the empty line between the imports', 'commenter': 'songyuequan'}]"
588,soul-sync-data-center/soul-sync-data-websocket/src/test/java/org/dromara/soul/plugin/sync/data/weboscket/handler/AuthDataHandlerTest.java,"@@ -0,0 +1,127 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.plugin.sync.data.weboscket.handler;
+
+import com.google.gson.Gson;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.AuthParamData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.sync.data.api.AuthDataSubscriber;
+import org.junit.Test;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+/**
+ * Test cases for {@link AuthDataHandler}.
+ *
+ * @author cocoZwwang
+ */
+public class AuthDataHandlerTest {","[{'comment': 'add final on the test class', 'commenter': 'songyuequan'}, {'comment': ""OK! I've modified and submitted."", 'commenter': 'cocoZwwang'}]"
610,soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/response/ApacheDubboResponsePluginTest.java,"@@ -0,0 +1,68 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.plugin.apache.dubbo.response;
+
+import org.dromara.soul.common.constant.Constants;
+import org.dromara.soul.plugin.api.SoulPluginChain;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
+import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.server.ServerWebExchange;
+import reactor.core.publisher.Mono;
+import reactor.test.StepVerifier;
+
+/**
+ * ApacheDubboResponsePluginTest
+ * @author kaito
+ */
+
+@RunWith(MockitoJUnitRunner.class)
+public class ApacheDubboResponsePluginTest {","[{'comment': 'add final', 'commenter': 'songyuequan'}]"
624,soul-client/soul-client-sofa/src/test/java/org/dromara/soul/client/sofa/SofaServiceBeanPostProcessorTest.java,"@@ -0,0 +1,135 @@
+/*
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements.  See the NOTICE file distributed with
+ *   this work for additional information regarding copyright ownership.
+ *   The ASF licenses this file to You under the Apache License, Version 2.0
+ *   (the ""License""); you may not use this file except in compliance with
+ *   the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an ""AS IS"" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+
+package org.dromara.soul.client.sofa;
+
+import com.alipay.sofa.runtime.service.component.impl.ServiceImpl;
+import com.alipay.sofa.runtime.spring.factory.ServiceFactoryBean;
+import io.undertow.Undertow;
+import org.dromara.soul.client.sofa.common.annotation.SoulSofaClient;
+import org.dromara.soul.client.sofa.common.config.SofaConfig;
+import org.junit.AfterClass;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.FixMethodOrder;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.stereotype.Service;
+import org.springframework.web.bind.annotation.RequestBody;
+
+import java.lang.reflect.Field;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static io.undertow.Handlers.path;
+
+/**
+ * Test case for SofaServiceBeanPostProcessor.
+ *
+ * @author HoldDie
+ */
+@RunWith(MockitoJUnitRunner.class)
+@FixMethodOrder(MethodSorters.NAME_ASCENDING)
+public class SofaServiceBeanPostProcessorTest {
+
+    private static Undertow server;
+
+    private static long registerNum;
+
+    private static CountDownLatch countDownLatch;
+
+    private static SofaServiceBeanPostProcessor sofaServiceBeanPostProcessorUnderTest;
+
+    @BeforeClass
+    public static void init() {
+        SofaConfig mockSofaConfig = new SofaConfig();
+        mockSofaConfig.setAdminUrl(""http://localhost:9095"");
+        mockSofaConfig.setAppName(""sofa"");
+        mockSofaConfig.setContextPath(""/sofa"");
+        sofaServiceBeanPostProcessorUnderTest = new SofaServiceBeanPostProcessor(mockSofaConfig);
+        // config server
+        server = Undertow.builder()
+                .addHttpListener(9095, ""localhost"")
+                .setHandler(path().addPrefixPath(""/soul-client/sofa-register"", httpServerExchange -> {
+                    registerNum++;
+                    countDownLatch.countDown();
+                }))
+                .build();
+        server.start();
+    }
+
+    @AfterClass
+    public static void after() {
+        server.stop();
+    }
+
+    @Before
+    public void before() {
+        countDownLatch = new CountDownLatch(1);
+        registerNum = 0;
+    }
+
+    @Test
+    public void testPostProcessAfterInitialization() throws Exception {
+        ServiceFactoryBean serviceFactoryBean = new ServiceFactoryBean();
+        Class<?> c = serviceFactoryBean.getClass();
+        Field field = c.getDeclaredField(""service"");
+        field.setAccessible(true);
+        ServiceImpl service = new ServiceImpl(""uniqueId"", SofaService.class, new SoulSofaServiceImpl());
+        field.set(serviceFactoryBean, service);
+
+        Field field1 = c.getSuperclass().getDeclaredField(""interfaceClass"");","[{'comment': ""don't use that way to name a variable "", 'commenter': 'tydhot'}, {'comment': 'ok.', 'commenter': 'Asxing'}]"
624,soul-client/soul-client-sofa/src/test/java/org/dromara/soul/client/sofa/SofaServiceBeanPostProcessorTest.java,"@@ -0,0 +1,135 @@
+/*
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements.  See the NOTICE file distributed with
+ *   this work for additional information regarding copyright ownership.
+ *   The ASF licenses this file to You under the Apache License, Version 2.0
+ *   (the ""License""); you may not use this file except in compliance with
+ *   the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an ""AS IS"" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+
+package org.dromara.soul.client.sofa;
+
+import com.alipay.sofa.runtime.service.component.impl.ServiceImpl;
+import com.alipay.sofa.runtime.spring.factory.ServiceFactoryBean;
+import io.undertow.Undertow;
+import org.dromara.soul.client.sofa.common.annotation.SoulSofaClient;
+import org.dromara.soul.client.sofa.common.config.SofaConfig;
+import org.junit.AfterClass;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.FixMethodOrder;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.stereotype.Service;
+import org.springframework.web.bind.annotation.RequestBody;
+
+import java.lang.reflect.Field;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static io.undertow.Handlers.path;
+
+/**
+ * Test case for SofaServiceBeanPostProcessor.
+ *
+ * @author HoldDie
+ */
+@RunWith(MockitoJUnitRunner.class)
+@FixMethodOrder(MethodSorters.NAME_ASCENDING)
+public class SofaServiceBeanPostProcessorTest {","[{'comment': 'add final', 'commenter': 'tydhot'}, {'comment': 'got it.', 'commenter': 'Asxing'}]"
630,soul-admin/src/main/resources/application-local.yml,"@@ -25,9 +25,9 @@ spring:
     prefix: classpath:/static/
     suffix: .html
   datasource:
-    url: jdbc:mysql://localhost:3306/soul?useUnicode=true&characterEncoding=utf-8
+    url: jdbc:mysql://localhost:3306/soul?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
     username: root
-    password:
+    password: abc","[{'comment': ""don't modify here"", 'commenter': 'tydhot'}]"
630,soul-admin/src/test/java/org/dromara/soul/admin/config/DataSyncConfigurationTest.java,"@@ -0,0 +1,142 @@
+package org.dromara.soul.admin.config;
+
+import com.alibaba.nacos.api.config.ConfigService;
+import org.I0Itec.zkclient.ZkClient;
+import org.apache.curator.test.TestingServer;
+import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.listener.nacos.NacosMockConfigService;
+import org.dromara.soul.admin.service.MetaDataService;
+import org.dromara.soul.admin.service.PluginService;
+import org.dromara.soul.admin.service.RuleService;
+import org.dromara.soul.admin.service.SelectorService;
+import org.dromara.soul.admin.service.SyncDataService;
+import org.dromara.soul.admin.service.impl.AppAuthServiceImpl;
+import org.dromara.soul.admin.service.sync.SyncDataServiceImpl;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.ApplicationEventPublisher;
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import static org.junit.Assert.assertNotNull;","[{'comment': 'move license header to the top of the file', 'commenter': 'tydhot'}]"
641,soul-admin/src/test/java/org/dromara/soul/admin/controller/SoulClientControllerTest.java,"@@ -0,0 +1,146 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.controller;
+
+import org.dromara.soul.admin.dto.MetaDataDTO;
+import org.dromara.soul.admin.dto.SpringCloudRegisterDTO;
+import org.dromara.soul.admin.dto.SpringMvcRegisterDTO;
+import org.dromara.soul.admin.service.SoulClientRegisterService;
+import org.dromara.soul.common.utils.GsonUtils;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+
+import static org.mockito.BDDMockito.given;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+/**
+ * Test cases for SoulClientControllerTest.","[{'comment': 'This should be a test cases for SoulClientController, not SoulClientControllerTest.\r\nYou should modify this message.', 'commenter': 'yiwenlong'}]"
641,soul-admin/src/test/java/org/dromara/soul/admin/controller/SoulClientControllerTest.java,"@@ -0,0 +1,145 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.controller;
+
+import org.dromara.soul.admin.dto.MetaDataDTO;
+import org.dromara.soul.admin.dto.SpringCloudRegisterDTO;
+import org.dromara.soul.admin.dto.SpringMvcRegisterDTO;
+import org.dromara.soul.admin.service.SoulClientRegisterService;
+import org.dromara.soul.common.utils.GsonUtils;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import static org.mockito.BDDMockito.given;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+/**
+ * Test cases for SoulClientControllerTest.","[{'comment': 'Test cases for SoulClientController.', 'commenter': 'dengliming'}, {'comment': '```suggestion\r\n * Test cases for SoulClientController.\r\n```', 'commenter': 'dengliming'}]"
644,soul-admin/pom.xml,"@@ -169,6 +169,17 @@
             <version>1.4.200</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>io.undertow</groupId>
+            <artifactId>undertow-core</artifactId>
+            <version>2.2.2.Final</version>","[{'comment': 'why add version here?', 'commenter': 'tydhot'}]"
644,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketDataChangedListenerTest.java,"@@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import io.undertow.Undertow;
+import io.undertow.websockets.core.AbstractReceiveListener;
+import io.undertow.websockets.core.BufferedTextMessage;
+import io.undertow.websockets.core.WebSocketChannel;
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.common.dto.AuthParamData;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.RuleData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.dto.ConditionData;
+import org.dromara.soul.common.dto.SelectorData;
+import org.dromara.soul.common.dto.WebsocketData;
+import org.dromara.soul.common.enums.ConfigGroupEnum;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.dromara.soul.common.utils.GsonUtils;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.enums.ReadyState;
+import org.java_websocket.handshake.ServerHandshake;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.Assert;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import static io.undertow.Handlers.path;
+import static io.undertow.Handlers.websocket;
+
+/**
+ * Data Change WebSocketListener Test.
+ *
+ * @author : Hyuk
+ * @description : WebsocketDataChangedListenerTest
+ * @date : 2020/12/6 9:31 下午
+ */
+@Slf4j
+@RunWith(MockitoJUnitRunner.class)
+public class WebsocketDataChangedListenerTest {","[{'comment': 'add final', 'commenter': 'tydhot'}]"
644,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketDataChangedListenerTest.java,"@@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import io.undertow.Undertow;
+import io.undertow.websockets.core.AbstractReceiveListener;
+import io.undertow.websockets.core.BufferedTextMessage;
+import io.undertow.websockets.core.WebSocketChannel;
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.common.dto.AuthParamData;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.RuleData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.dto.ConditionData;
+import org.dromara.soul.common.dto.SelectorData;
+import org.dromara.soul.common.dto.WebsocketData;
+import org.dromara.soul.common.enums.ConfigGroupEnum;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.dromara.soul.common.utils.GsonUtils;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.enums.ReadyState;
+import org.java_websocket.handshake.ServerHandshake;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.Assert;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import static io.undertow.Handlers.path;
+import static io.undertow.Handlers.websocket;
+
+/**
+ * Data Change WebSocketListener Test.
+ *
+ * @author : Hyuk
+ * @description : WebsocketDataChangedListenerTest
+ * @date : 2020/12/6 9:31 下午","[{'comment': 'remove description and date', 'commenter': 'tydhot'}]"
644,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketDataChangedListenerTest.java,"@@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import io.undertow.Undertow;
+import io.undertow.websockets.core.AbstractReceiveListener;
+import io.undertow.websockets.core.BufferedTextMessage;
+import io.undertow.websockets.core.WebSocketChannel;
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.common.dto.AuthParamData;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.RuleData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.dto.ConditionData;
+import org.dromara.soul.common.dto.SelectorData;
+import org.dromara.soul.common.dto.WebsocketData;
+import org.dromara.soul.common.enums.ConfigGroupEnum;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.dromara.soul.common.utils.GsonUtils;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.enums.ReadyState;
+import org.java_websocket.handshake.ServerHandshake;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.Assert;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import static io.undertow.Handlers.path;
+import static io.undertow.Handlers.websocket;
+
+/**
+ * Data Change WebSocketListener Test.
+ *
+ * @author : Hyuk
+ * @description : WebsocketDataChangedListenerTest
+ * @date : 2020/12/6 9:31 下午
+ */
+@Slf4j
+@RunWith(MockitoJUnitRunner.class)
+public class WebsocketDataChangedListenerTest {
+
+    private final List<PluginData> pluginDataList = new ArrayList<>();
+
+    private final List<SelectorData> selectorDataList = new ArrayList<>();
+
+    private final List<RuleData> ruleDataList = new ArrayList<>();
+
+    private final List<AppAuthData> appAuthDataList = new ArrayList<>();
+
+    private final List<MetaData> metaDataList = new ArrayList<>();
+
+    private WebSocketClient client;
+
+    private Undertow server;
+
+    private final AtomicInteger count = new AtomicInteger(0);
+
+    private CountDownLatch countDownLatch = new CountDownLatch(5);
+
+    /**
+     * start websocket server.
+     */
+    public void startServer() {
+        server = Undertow.builder()
+                .addHttpListener(8888, ""localhost"")
+                .setHandler(path()
+                        .addPrefixPath(""/websocket"", websocket((exchange, channel) -> {
+                            channel.getReceiveSetter().set(new AbstractReceiveListener() {
+                                @Override
+                                protected void onFullTextMessage(final WebSocketChannel channel, final BufferedTextMessage message) {
+                                    handleMessage(message.getData());
+                                }
+                            });
+                            channel.resumeReceives();
+                        })))
+                .build();
+        server.start();
+    }
+
+    /**
+     * start websocket client.
+     *
+     * @throws URISyntaxException URISyntaxException
+     * @throws InterruptedException InterruptedException
+     */
+    public void startClient() throws URISyntaxException, InterruptedException {
+        client = new WebSocketClient(new URI(""ws://localhost:8888/websocket"")) {
+            @Override","[{'comment': ""the port can get by server's api, don't write fixed port"", 'commenter': 'tydhot'}]"
644,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketDataChangedListenerTest.java,"@@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import io.undertow.Undertow;
+import io.undertow.websockets.core.AbstractReceiveListener;
+import io.undertow.websockets.core.BufferedTextMessage;
+import io.undertow.websockets.core.WebSocketChannel;
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.common.dto.AuthParamData;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.RuleData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.dto.ConditionData;
+import org.dromara.soul.common.dto.SelectorData;
+import org.dromara.soul.common.dto.WebsocketData;
+import org.dromara.soul.common.enums.ConfigGroupEnum;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.dromara.soul.common.utils.GsonUtils;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.enums.ReadyState;
+import org.java_websocket.handshake.ServerHandshake;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.Assert;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import static io.undertow.Handlers.path;
+import static io.undertow.Handlers.websocket;
+
+/**
+ * Data Change WebSocketListener Test.
+ *
+ * @author : Hyuk
+ * @description : WebsocketDataChangedListenerTest
+ * @date : 2020/12/6 9:31 下午
+ */
+@Slf4j
+@RunWith(MockitoJUnitRunner.class)
+public class WebsocketDataChangedListenerTest {
+
+    private final List<PluginData> pluginDataList = new ArrayList<>();
+
+    private final List<SelectorData> selectorDataList = new ArrayList<>();
+
+    private final List<RuleData> ruleDataList = new ArrayList<>();
+
+    private final List<AppAuthData> appAuthDataList = new ArrayList<>();
+
+    private final List<MetaData> metaDataList = new ArrayList<>();
+
+    private WebSocketClient client;
+
+    private Undertow server;
+
+    private final AtomicInteger count = new AtomicInteger(0);
+
+    private CountDownLatch countDownLatch = new CountDownLatch(5);
+
+    /**
+     * start websocket server.
+     */
+    public void startServer() {
+        server = Undertow.builder()
+                .addHttpListener(8888, ""localhost"")
+                .setHandler(path()
+                        .addPrefixPath(""/websocket"", websocket((exchange, channel) -> {
+                            channel.getReceiveSetter().set(new AbstractReceiveListener() {
+                                @Override
+                                protected void onFullTextMessage(final WebSocketChannel channel, final BufferedTextMessage message) {
+                                    handleMessage(message.getData());
+                                }
+                            });
+                            channel.resumeReceives();
+                        })))
+                .build();
+        server.start();
+    }
+
+    /**
+     * start websocket client.
+     *
+     * @throws URISyntaxException URISyntaxException
+     * @throws InterruptedException InterruptedException
+     */
+    public void startClient() throws URISyntaxException, InterruptedException {
+        client = new WebSocketClient(new URI(""ws://localhost:8888/websocket"")) {
+            @Override
+            public void onOpen(final ServerHandshake serverHandshake) {
+                log.info(""Open connection"");
+            }
+
+            @Override
+            public void onMessage(final String s) {
+                log.info(""message : {}"", s);
+            }
+
+            @Override
+            public void onClose(final int i, final String s, final boolean b) {
+            }
+
+            @Override
+            public void onError(final Exception e) {
+                log.error("""", e);
+            }
+        };
+        client.connect();
+        while (!client.getReadyState().equals(ReadyState.OPEN)) {
+            log.debug(""connecting..."");
+            TimeUnit.SECONDS.sleep(1);
+        }
+    }
+
+    @After
+    public void destroy() {
+        client.close();
+        server.stop();
+    }
+
+    @Before
+    public void before() throws InterruptedException, URISyntaxException {
+        startServer();
+        startClient();
+        countDownLatch = new CountDownLatch(5);
+        initSelectorDataList();
+        initPluginDataList();
+        initRuleDataList();
+        initAppAuthDataList();
+        initMetaDataList();
+    }
+
+    private void initMetaDataList() {
+        MetaData metaData = new MetaData();
+        metaData.setAppName(""axiba"");
+        metaData.setEnabled(true);
+        metaData.setMethodName(""execute"");
+        metaData.setParameterTypes(""int"");
+        metaData.setPath(""/test/execute"");
+        metaData.setRpcExt(""{}"");
+        metaData.setRpcType(""http"");
+        metaData.setServiceName(""execute"");
+        metaDataList.add(metaData);
+    }
+
+    private void initAppAuthDataList() {
+        AppAuthData appAuthData = new AppAuthData();
+        appAuthData.setAppKey(""D9FD95F496C9495DB5604778A13C3D08"");
+        appAuthData.setAppSecret(""02D25048AA1E466F8920E68B08E668DE"");
+        appAuthData.setEnabled(true);
+        appAuthData.setParamDataList(buildAuthParamDataList(""axiba"", ""123""));
+        appAuthData.setPathDataList(buildAuthPathDataList(""alibaba"", ""/1""));
+        appAuthDataList.add(appAuthData);
+    }
+
+    private void initPluginDataList() {
+        PluginData pluginData = new PluginData();
+        pluginData.setConfig(""{\\\""model\\\"":\\\""black\\\""}"");
+        pluginData.setEnabled(true);
+        pluginData.setId(""2"");
+        pluginData.setName(""waf"");
+        pluginData.setRole(1);
+        pluginDataList.add(pluginData);
+    }
+
+    private void initRuleDataList() {
+        RuleData ruleData = new RuleData();
+        ruleData.setEnabled(true);
+        ruleData.setHandle(""{\\\""permission\\\"":\\\""reject\\\"",\\\""statusCode\\\"":\\\""503\\\""}"");
+        ruleData.setId(""1336350040008105984"");
+        ruleData.setLoged(true);
+        ruleData.setMatchMode(1);
+        ruleData.setName(""test"");
+        ruleData.setPluginName(""waf"");
+        ruleData.setSelectorId(""1336349806465064960"");
+        ruleData.setSort(1);
+        ruleData.setConditionDataList(buildConditionDataList(""="", ""test"", ""header"", ""a""));
+        ruleDataList.add(ruleData);
+    }
+
+    private void initSelectorDataList() {
+        SelectorData selectorData = new SelectorData();
+        selectorData.setContinued(true);
+        selectorData.setEnabled(true);
+        selectorData.setHandle(""[{\\\""upstreamHost\\\"":\\\""localhost\\\"",\\\""protocol\\\"":\\\""http://\\\"",\\\""upstreamUrl\\\"":\\\""127.0.0.1:8187\\\"",""
+                + ""\\\""weight\\\"":\\\""51\\\""},{\\\""upstreamHost\\\"":\\\""localhost\\\"",\\\""protocol\\\"":\\\""http://\\\"",\\\""upstreamUrl\\\"":\\\""127.0.0.1:8188\\\"",\\\""weight\\\"":\\\""49\\\""}]"");
+        selectorData.setId(""1336329408516136960"");
+        selectorData.setLoged(true);
+        selectorData.setMatchMode(0);
+        selectorData.setName(""/http"");
+        selectorData.setPluginId(""5"");
+        selectorData.setPluginName(""divide"");
+        selectorData.setSort(1);
+        selectorData.setType(1);
+        selectorData.setConditionList(buildConditionDataList(""match"", ""/"", ""uri"", ""/http/**""));
+        selectorDataList.add(selectorData);
+    }
+
+    private List<ConditionData> buildConditionDataList(final String operator, final String paramName,
+                                                       final String paramType, final String paramValue) {
+        ConditionData conditionData = new ConditionData();
+        conditionData.setOperator(operator);
+        conditionData.setParamName(paramName);
+        conditionData.setParamType(paramType);
+        conditionData.setParamValue(paramValue);
+        List<ConditionData> conditionList = new ArrayList<>();
+        conditionList.add(conditionData);
+        return conditionList;
+    }
+
+    private List<AuthParamData> buildAuthParamDataList(final String appName, final String appParam) {
+        AuthParamData authParamData = new AuthParamData();
+        authParamData.setAppName(appName);
+        authParamData.setAppParam(appParam);
+
+        List<AuthParamData> authParamDataList = new ArrayList<>();
+        authParamDataList.add(authParamData);
+        return authParamDataList;
+    }
+
+    private List<AuthPathData> buildAuthPathDataList(final String appName, final String path) {
+        AuthPathData authPathData = new AuthPathData();
+        authPathData.setAppName(appName);
+        authPathData.setEnabled(true);
+        authPathData.setPath(path);
+
+        List<AuthPathData> authPathDataList = new ArrayList<>();
+        authPathDataList.add(authPathData);
+        return authPathDataList;
+    }
+
+    /**
+     * 发送数据变更消息.","[{'comment': 'remove chinese in java doc', 'commenter': 'tydhot'}]"
644,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketDataChangedListenerTest.java,"@@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import io.undertow.Undertow;
+import io.undertow.websockets.core.AbstractReceiveListener;
+import io.undertow.websockets.core.BufferedTextMessage;
+import io.undertow.websockets.core.WebSocketChannel;
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.dto.AuthPathData;
+import org.dromara.soul.common.dto.AuthParamData;
+import org.dromara.soul.common.dto.AppAuthData;
+import org.dromara.soul.common.dto.RuleData;
+import org.dromara.soul.common.dto.PluginData;
+import org.dromara.soul.common.dto.ConditionData;
+import org.dromara.soul.common.dto.SelectorData;
+import org.dromara.soul.common.dto.WebsocketData;
+import org.dromara.soul.common.enums.ConfigGroupEnum;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.dromara.soul.common.utils.GsonUtils;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.enums.ReadyState;
+import org.java_websocket.handshake.ServerHandshake;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.Assert;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import static io.undertow.Handlers.path;
+import static io.undertow.Handlers.websocket;
+
+/**
+ * Data Change WebSocketListener Test.
+ *
+ * @author : Hyuk
+ * @description : WebsocketDataChangedListenerTest
+ * @date : 2020/12/6 9:31 下午
+ */
+@Slf4j
+@RunWith(MockitoJUnitRunner.class)
+public class WebsocketDataChangedListenerTest {
+
+    private final List<PluginData> pluginDataList = new ArrayList<>();
+
+    private final List<SelectorData> selectorDataList = new ArrayList<>();
+
+    private final List<RuleData> ruleDataList = new ArrayList<>();
+
+    private final List<AppAuthData> appAuthDataList = new ArrayList<>();
+
+    private final List<MetaData> metaDataList = new ArrayList<>();
+
+    private WebSocketClient client;
+
+    private Undertow server;
+
+    private final AtomicInteger count = new AtomicInteger(0);
+
+    private CountDownLatch countDownLatch = new CountDownLatch(5);
+
+    /**
+     * start websocket server.
+     */
+    public void startServer() {
+        server = Undertow.builder()
+                .addHttpListener(8888, ""localhost"")
+                .setHandler(path()
+                        .addPrefixPath(""/websocket"", websocket((exchange, channel) -> {
+                            channel.getReceiveSetter().set(new AbstractReceiveListener() {
+                                @Override
+                                protected void onFullTextMessage(final WebSocketChannel channel, final BufferedTextMessage message) {
+                                    handleMessage(message.getData());
+                                }
+                            });
+                            channel.resumeReceives();
+                        })))
+                .build();
+        server.start();
+    }
+
+    /**
+     * start websocket client.
+     *
+     * @throws URISyntaxException URISyntaxException
+     * @throws InterruptedException InterruptedException
+     */
+    public void startClient() throws URISyntaxException, InterruptedException {
+        client = new WebSocketClient(new URI(""ws://localhost:8888/websocket"")) {
+            @Override
+            public void onOpen(final ServerHandshake serverHandshake) {
+                log.info(""Open connection"");
+            }
+
+            @Override
+            public void onMessage(final String s) {
+                log.info(""message : {}"", s);
+            }
+
+            @Override
+            public void onClose(final int i, final String s, final boolean b) {
+            }
+
+            @Override
+            public void onError(final Exception e) {
+                log.error("""", e);
+            }
+        };
+        client.connect();
+        while (!client.getReadyState().equals(ReadyState.OPEN)) {
+            log.debug(""connecting..."");
+            TimeUnit.SECONDS.sleep(1);
+        }
+    }
+
+    @After
+    public void destroy() {
+        client.close();
+        server.stop();
+    }
+
+    @Before
+    public void before() throws InterruptedException, URISyntaxException {
+        startServer();
+        startClient();
+        countDownLatch = new CountDownLatch(5);
+        initSelectorDataList();
+        initPluginDataList();
+        initRuleDataList();
+        initAppAuthDataList();
+        initMetaDataList();
+    }
+
+    private void initMetaDataList() {
+        MetaData metaData = new MetaData();
+        metaData.setAppName(""axiba"");
+        metaData.setEnabled(true);
+        metaData.setMethodName(""execute"");
+        metaData.setParameterTypes(""int"");
+        metaData.setPath(""/test/execute"");
+        metaData.setRpcExt(""{}"");
+        metaData.setRpcType(""http"");
+        metaData.setServiceName(""execute"");
+        metaDataList.add(metaData);
+    }
+
+    private void initAppAuthDataList() {
+        AppAuthData appAuthData = new AppAuthData();
+        appAuthData.setAppKey(""D9FD95F496C9495DB5604778A13C3D08"");
+        appAuthData.setAppSecret(""02D25048AA1E466F8920E68B08E668DE"");
+        appAuthData.setEnabled(true);
+        appAuthData.setParamDataList(buildAuthParamDataList(""axiba"", ""123""));
+        appAuthData.setPathDataList(buildAuthPathDataList(""alibaba"", ""/1""));
+        appAuthDataList.add(appAuthData);
+    }
+
+    private void initPluginDataList() {
+        PluginData pluginData = new PluginData();
+        pluginData.setConfig(""{\\\""model\\\"":\\\""black\\\""}"");
+        pluginData.setEnabled(true);
+        pluginData.setId(""2"");
+        pluginData.setName(""waf"");
+        pluginData.setRole(1);
+        pluginDataList.add(pluginData);
+    }
+
+    private void initRuleDataList() {
+        RuleData ruleData = new RuleData();
+        ruleData.setEnabled(true);
+        ruleData.setHandle(""{\\\""permission\\\"":\\\""reject\\\"",\\\""statusCode\\\"":\\\""503\\\""}"");
+        ruleData.setId(""1336350040008105984"");
+        ruleData.setLoged(true);
+        ruleData.setMatchMode(1);
+        ruleData.setName(""test"");
+        ruleData.setPluginName(""waf"");
+        ruleData.setSelectorId(""1336349806465064960"");
+        ruleData.setSort(1);
+        ruleData.setConditionDataList(buildConditionDataList(""="", ""test"", ""header"", ""a""));
+        ruleDataList.add(ruleData);
+    }
+
+    private void initSelectorDataList() {
+        SelectorData selectorData = new SelectorData();
+        selectorData.setContinued(true);
+        selectorData.setEnabled(true);
+        selectorData.setHandle(""[{\\\""upstreamHost\\\"":\\\""localhost\\\"",\\\""protocol\\\"":\\\""http://\\\"",\\\""upstreamUrl\\\"":\\\""127.0.0.1:8187\\\"",""
+                + ""\\\""weight\\\"":\\\""51\\\""},{\\\""upstreamHost\\\"":\\\""localhost\\\"",\\\""protocol\\\"":\\\""http://\\\"",\\\""upstreamUrl\\\"":\\\""127.0.0.1:8188\\\"",\\\""weight\\\"":\\\""49\\\""}]"");
+        selectorData.setId(""1336329408516136960"");
+        selectorData.setLoged(true);
+        selectorData.setMatchMode(0);
+        selectorData.setName(""/http"");
+        selectorData.setPluginId(""5"");
+        selectorData.setPluginName(""divide"");
+        selectorData.setSort(1);
+        selectorData.setType(1);
+        selectorData.setConditionList(buildConditionDataList(""match"", ""/"", ""uri"", ""/http/**""));
+        selectorDataList.add(selectorData);
+    }
+
+    private List<ConditionData> buildConditionDataList(final String operator, final String paramName,
+                                                       final String paramType, final String paramValue) {
+        ConditionData conditionData = new ConditionData();
+        conditionData.setOperator(operator);
+        conditionData.setParamName(paramName);
+        conditionData.setParamType(paramType);
+        conditionData.setParamValue(paramValue);
+        List<ConditionData> conditionList = new ArrayList<>();
+        conditionList.add(conditionData);
+        return conditionList;
+    }
+
+    private List<AuthParamData> buildAuthParamDataList(final String appName, final String appParam) {
+        AuthParamData authParamData = new AuthParamData();
+        authParamData.setAppName(appName);
+        authParamData.setAppParam(appParam);
+
+        List<AuthParamData> authParamDataList = new ArrayList<>();
+        authParamDataList.add(authParamData);
+        return authParamDataList;
+    }
+
+    private List<AuthPathData> buildAuthPathDataList(final String appName, final String path) {
+        AuthPathData authPathData = new AuthPathData();
+        authPathData.setAppName(appName);
+        authPathData.setEnabled(true);
+        authPathData.setPath(path);
+
+        List<AuthPathData> authPathDataList = new ArrayList<>();
+        authPathDataList.add(authPathData);
+        return authPathDataList;
+    }
+
+    /**
+     * 发送数据变更消息.
+     *
+     * @param message message
+     */
+    public void send(final String message) {
+        client.send(message);
+    }
+
+    @Test
+    public void testChanged() throws InterruptedException {
+        testOnPluginChanged();
+        testOnAppAuthChanged();
+        testOnMetaDataChanged();
+        testOnRuleChanged();
+        testOnSelectorChanged();
+
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(5, count.get());
+    }
+
+
+    /**
+     * test PluginData.
+     */
+    public void testOnPluginChanged() {
+        WebsocketData<SelectorData> websocketData =
+                new WebsocketData<>(ConfigGroupEnum.SELECTOR.name(), DataEventTypeEnum.UPDATE.name(), selectorDataList);
+        send(GsonUtils.getInstance().toJson(websocketData));
+    }
+
+    /**
+     * test SelectorData.
+     */
+    public void testOnSelectorChanged() {
+        WebsocketData<SelectorData> websocketData =
+                new WebsocketData<>(ConfigGroupEnum.SELECTOR.name(), DataEventTypeEnum.UPDATE.name(), selectorDataList);
+        send(GsonUtils.getInstance().toJson(websocketData));
+    }
+
+    /**
+     * test RuleData.
+     */
+    public void testOnRuleChanged() {
+        WebsocketData<RuleData> configData =
+                new WebsocketData<>(ConfigGroupEnum.RULE.name(), DataEventTypeEnum.UPDATE.name(), ruleDataList);
+        send(GsonUtils.getInstance().toJson(configData));
+    }
+
+    /**
+     * test AppAuthData.
+     */
+    public void testOnAppAuthChanged() {
+        WebsocketData<AppAuthData> configData =
+                new WebsocketData<>(ConfigGroupEnum.APP_AUTH.name(), DataEventTypeEnum.UPDATE.name(), appAuthDataList);
+        send(GsonUtils.getInstance().toJson(configData));
+    }
+
+    /**
+     * test MetaData.
+     */
+    public void testOnMetaDataChanged() {
+        WebsocketData<MetaData> configData =
+                new WebsocketData<>(ConfigGroupEnum.META_DATA.name(), DataEventTypeEnum.CREATE.name(), metaDataList);
+        send(GsonUtils.getInstance().toJson(configData));
+    }
+
+    /**
+     * 处理webcosket消息进行分发.","[{'comment': 'Chinese', 'commenter': 'tydhot'}]"
644,soul-admin/pom.xml,"@@ -169,6 +169,17 @@
             <version>1.4.200</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>io.undertow</groupId>
+            <artifactId>undertow-core</artifactId>
+            <version>${undertow.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.java-websocket</groupId>
+            <artifactId>Java-WebSocket</artifactId>
+            <version>1.5.0</version>","[{'comment': 'I have a question about this.I think java-WebSockert  is imported by test case here, why not add test scope .And I think name the version as a property like undertow is better.', 'commenter': 'tydhot'}, {'comment': 'sry, i forgot to test scope. The problem of version i will fix it with other pom file.', 'commenter': 'hyuk-sudo'}]"
644,pom.xml,"@@ -118,6 +118,7 @@
         <curator-test.version>3.3.0</curator-test.version>
         <wiremock.version>2.18.0</wiremock.version>
         <jacoco-maven-plugin.version>0.8.5</jacoco-maven-plugin.version>
+        <java-websocket.version>1.5.0</java-websocket.version>","[{'comment': ""I found java-websocket.version is defined too in soul-sync-data-websocket's pom.xml.Why not delete it in that file?"", 'commenter': 'tydhot'}, {'comment': 'fixed', 'commenter': 'hyuk-sudo'}]"
646,soul-admin/src/test/java/org/dromara/soul/admin/service/DashboardUserServiceImplTest.java,"@@ -0,0 +1,167 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.service;
+
+import org.dromara.soul.admin.config.SecretProperties;
+import org.dromara.soul.admin.dto.DashboardUserDTO;
+import org.dromara.soul.admin.entity.DashboardUserDO;
+import org.dromara.soul.admin.mapper.DashboardUserMapper;
+import org.dromara.soul.admin.page.CommonPager;
+import org.dromara.soul.admin.page.PageParameter;
+import org.dromara.soul.admin.query.DashboardUserQuery;
+import org.dromara.soul.admin.service.impl.DashboardUserServiceImpl;
+import org.dromara.soul.admin.vo.DashboardUserVO;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.test.util.ReflectionTestUtils;
+
+import java.sql.Timestamp;
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.BDDMockito.given;
+import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.never;
+
+/**
+ * test cases for DashboardUserService.
+ *
+ * @author cherlas
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class DashboardUserServiceImplTest {","[{'comment': 'add final here', 'commenter': 'tydhot'}, {'comment': 'done', 'commenter': 'cherlas'}]"
662,soul-plugin/soul-plugin-alibaba-dubbo/src/test/java/org/dromara/soul/plugin/alibaba/dubbo/response/DubboResponsePluginTest.java,"@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.plugin.alibaba.dubbo.response;
+
+import org.dromara.soul.common.constant.Constants;
+import org.dromara.soul.common.dto.MetaData;
+import org.dromara.soul.common.enums.PluginEnum;
+import org.dromara.soul.common.enums.RpcTypeEnum;
+import org.dromara.soul.plugin.api.SoulPluginChain;
+import org.dromara.soul.plugin.api.context.SoulContext;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
+import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.server.ServerWebExchange;
+import reactor.core.publisher.Mono;
+import reactor.test.StepVerifier;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public final class DubboResponsePluginTest {","[{'comment': 'add java doc', 'commenter': 'tydhot'}, {'comment': 'OK，added java doc to class', 'commenter': 'freedom-xiao007'}]"
812,soul-client/soul-client-dubbo/soul-client-dubbo-common/src/main/java/org/dromara/soul/client/dubbo/common/dto/DubboRpcExt.java,"@@ -33,7 +33,7 @@
 
     private String version;
 
-    private String loadbalance;
+    private String loadBalance;","[{'comment': 'revert it. ', 'commenter': 'dengliming'}]"
812,soul-common/src/main/java/org/dromara/soul/common/constant/DubboParamConstants.java,"@@ -72,7 +72,7 @@
     /**
      * The constant LOADBALANCE.
      */
-    public static final String LOADBALANCE = ""loadbalance"";
+    public static final String LOAD_BALANCE = ""loadBalance"";","[{'comment': 'revert it', 'commenter': 'dengliming'}]"
814,soul-admin/src/main/resources/application-local.yml,"@@ -27,7 +27,7 @@ spring:
   datasource:
     url: jdbc:mysql://localhost:3306/soul?useUnicode=true&characterEncoding=utf-8
     username: root
-    password:
+    password: 123456
     driver-class-name: com.mysql.jdbc.Driver","[{'comment': 'revert', 'commenter': 'dengliming'}, {'comment': 'got it', 'commenter': 'midnight2104'}]"
815,soul-client/soul-client-http/soul-client-springmvc/src/test/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessorTest.java,"@@ -38,39 +37,175 @@
 @RunWith(MockitoJUnitRunner.class)
 @FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public final class SpringMvcClientBeanPostProcessorTest {
-    private static SpringMvcClientBeanPostProcessor springMvcClientBeanPostProcessor;
 
-    private final SpringMvcClientTestBean springMvcClientTestBean = new SpringMvcClientTestBean();
+    private final SpringMvcClientTestBeanSpecified springMvcClientTestBeanSpecified = new SpringMvcClientTestBeanSpecified();
 
-    @BeforeClass
-    public static void init() {
-        SoulSpringMvcConfig soulSpringMvcConfig = new SoulSpringMvcConfig();
-        soulSpringMvcConfig.setAdminUrl(""http://127.0.0.1:58080"");
-        soulSpringMvcConfig.setAppName(""test-mvc"");
-        soulSpringMvcConfig.setContextPath(""test"");
-        soulSpringMvcConfig.setPort(58889);
-        springMvcClientBeanPostProcessor = new SpringMvcClientBeanPostProcessor(soulSpringMvcConfig);
+    private final SpringMvcClientTestBeanWildcardMatching springMvcClientTestBeanWildcardMatching = new SpringMvcClientTestBeanWildcardMatching();
+
+    private final SpringMvcClientTestBeanWithRuleName springMvcClientTestBeanWithRuleName = new SpringMvcClientTestBeanWithRuleName();
+
+    @Test(expected = RuntimeException.class)
+    public void testCreateWithContextPathIsNull() {
+        createBeanPostProcessorWithContextPathIsNull();
+    }
+
+    @Test(expected = RuntimeException.class)
+    public void testCreateWithContextPathIsEmpty() {
+        createBeanPostProcessorWithContextPathIsEmpty();
+    }
+
+    @Test(expected = RuntimeException.class)
+    public void testCreateWithAdminUrlIsNull() {
+        createBeanPostProcessorWithAdminUrlIsNull();
+    }
+
+    @Test(expected = RuntimeException.class)
+    public void testCreateWithAdminUrlIsEmpty() {
+        createBeanPostProcessorWithAdminUrlIsEmpty();
+    }
 
+    @Test(expected = RuntimeException.class)
+    public void testCreateWithPortIsNull() {
+        createBeanPostProcessorWithPortIsNull();
     }
 
     @Test
     public void testSoulBeanProcess() {
-        springMvcClientBeanPostProcessor.postProcessAfterInitialization(springMvcClientTestBean, ""springMvcClientTestBean"");
+        createBeanPostProcessor().postProcessAfterInitialization(springMvcClientTestBeanSpecified, ""SpringMvcClientTestBeanSpecified"");
+    }
+
+    @Test
+    public void testSoulBeanProcessWithoutHost() {
+        createBeanPostProcessorWithoutHost().postProcessAfterInitialization(springMvcClientTestBeanSpecified, ""SpringMvcClientTestBeanSpecified"");
+    }
+
+    @Test
+    public void testSoulBeanProcessWithEmptyHost() {
+        createBeanPostProcessorWithEmptyHost().postProcessAfterInitialization(springMvcClientTestBeanSpecified, ""SpringMvcClientTestBeanSpecified"");
+    }
+
+    @Test
+    public void testSoulBeanProcessWithoutFull() {
+        createBeanPostProcessorWithoutFull().postProcessAfterInitialization(springMvcClientTestBeanSpecified, ""SpringMvcClientTestBeanSpecified"");
+    }
+
+    @Test
+    public void testSoulBeanProcessWildcardMatching() {
+        createBeanPostProcessorWithoutFull().postProcessAfterInitialization(springMvcClientTestBeanWildcardMatching, ""SpringMvcClientTestBeanWildcardMatching"");
+    }
+
+    @Test
+    public void testBeanProcessWithRuleName() {
+        createBeanPostProcessorWithoutFull().postProcessAfterInitialization(springMvcClientTestBeanWithRuleName, ""springMvcClientTestBeanWithRuleName"");
     }
 
     @Test
     public void testNormalBeanProcess() {
-        springMvcClientBeanPostProcessor.postProcessAfterInitialization(new Object(), ""normalBean"");
+        createBeanPostProcessor().postProcessAfterInitialization(new Object(), ""normalBean"");
+    }
+
+    private void createBeanPostProcessorWithContextPathIsNull() {
+        SoulSpringMvcConfig soulSpringMvcConfig = createSoulSpringMvcConfigWithFillAllField();
+        soulSpringMvcConfig.setContextPath(null);
+        new SpringMvcClientBeanPostProcessor(soulSpringMvcConfig);
+    }
+
+    private void createBeanPostProcessorWithContextPathIsEmpty() {
+        SoulSpringMvcConfig soulSpringMvcConfig = createSoulSpringMvcConfigWithFillAllField();
+        soulSpringMvcConfig.setContextPath("""");
+        new SpringMvcClientBeanPostProcessor(soulSpringMvcConfig);
+    }
+
+    private void createBeanPostProcessorWithAdminUrlIsNull() {
+        SoulSpringMvcConfig soulSpringMvcConfig = createSoulSpringMvcConfigWithFillAllField();
+        soulSpringMvcConfig.setAdminUrl(null);
+        new SpringMvcClientBeanPostProcessor(soulSpringMvcConfig);
+    }
+
+    private void createBeanPostProcessorWithAdminUrlIsEmpty() {
+        SoulSpringMvcConfig soulSpringMvcConfig = createSoulSpringMvcConfigWithFillAllField();
+        soulSpringMvcConfig.setAdminUrl("""");
+        new SpringMvcClientBeanPostProcessor(soulSpringMvcConfig);
+    }
+
+    private void createBeanPostProcessorWithPortIsNull() {
+        SoulSpringMvcConfig soulSpringMvcConfig = createSoulSpringMvcConfigWithFillAllField();
+        soulSpringMvcConfig.setPort(null);
+        new SpringMvcClientBeanPostProcessor(soulSpringMvcConfig);
+    }","[{'comment': 'No need to add new method for every case, In the above case, only use one method is enough.\r\n```\r\nprivate void createBeanPostProcessor(String adminUrl, String contextPath, Integer port) {\r\n        \r\n    }\r\n```\r\nYou can check other places as well. such as `createBeanPostProcessorWithoutFull`、`createBeanPostProcessorWithoutHost`, please simplify it. Thanks.', 'commenter': 'dengliming'}, {'comment': ""I'll think about it again. Thank you"", 'commenter': 'onlyonezhongjinhui'}]"
824,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketCollectorTest.java,"@@ -0,0 +1,150 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.admin.SoulAdminBootstrap;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.handshake.ServerHandshake;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+import javax.websocket.Session;
+import java.lang.reflect.Field;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+/**
+ * Test case for WebsocketCollector.
+ *
+ * @author wuudongdong
+ */
+@Slf4j
+@ActiveProfiles(""test"")
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(classes = SoulAdminBootstrap.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT,
+        properties = ""spring.autoconfigure.exclude=org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration"")
+public final class WebsocketCollectorTest {
+
+    private WebSocketClient client;
+
+    @Before
+    public void setUp() throws URISyntaxException {
+        client = new WebSocketClient(new URI(""ws://localhost:9095/websocket"")) {","[{'comment': 'No need to use real websocket', 'commenter': 'dengliming'}, {'comment': 'mean mock server ? no SpringBootTest?', 'commenter': 'wuudongdong'}, {'comment': 'yes/ try mock `Session`', 'commenter': 'dengliming'}]"
824,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketCollectorTest.java,"@@ -0,0 +1,150 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.admin.SoulAdminBootstrap;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.handshake.ServerHandshake;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+import javax.websocket.Session;
+import java.lang.reflect.Field;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+/**
+ * Test case for WebsocketCollector.
+ *
+ * @author wuudongdong
+ */
+@Slf4j
+@ActiveProfiles(""test"")
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(classes = SoulAdminBootstrap.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT,
+        properties = ""spring.autoconfigure.exclude=org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration"")
+public final class WebsocketCollectorTest {
+
+    private WebSocketClient client;
+
+    @Before
+    public void setUp() throws URISyntaxException {
+        client = new WebSocketClient(new URI(""ws://localhost:9095/websocket"")) {
+            @Override
+            public void onOpen(final ServerHandshake serverHandshake) {
+                log.info(""Open connection"");
+            }
+
+            @Override
+            public void onMessage(final String s) {
+                log.info(""message : {}"", s);
+            }
+
+            @Override
+            public void onClose(final int i, final String s, final boolean b) {
+                log.info(""connection closed"");
+            }
+
+            @Override
+            public void onError(final Exception e) {
+            }
+        };
+    }
+
+    @Test
+    public void testOnOpen() throws Exception {
+        client.connectBlocking();
+        Thread.sleep(1000);
+        assertEquals(1L, getSessionSetSize());
+        client.closeBlocking();
+    }
+
+    @Test
+    public void testOnMessage() throws Exception {
+        client.connectBlocking();
+        Thread.sleep(1000);","[{'comment': 'Too many places to sleep. This will slow down the build.', 'commenter': 'dengliming'}]"
824,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketCollectorTest.java,"@@ -0,0 +1,150 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.admin.SoulAdminBootstrap;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.handshake.ServerHandshake;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+import javax.websocket.Session;
+import java.lang.reflect.Field;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+/**
+ * Test case for WebsocketCollector.
+ *
+ * @author wuudongdong
+ */
+@Slf4j
+@ActiveProfiles(""test"")
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(classes = SoulAdminBootstrap.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT,
+        properties = ""spring.autoconfigure.exclude=org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration"")
+public final class WebsocketCollectorTest {
+
+    private WebSocketClient client;
+
+    @Before
+    public void setUp() throws URISyntaxException {
+        client = new WebSocketClient(new URI(""ws://localhost:9095/websocket"")) {
+            @Override
+            public void onOpen(final ServerHandshake serverHandshake) {
+                log.info(""Open connection"");
+            }
+
+            @Override
+            public void onMessage(final String s) {
+                log.info(""message : {}"", s);
+            }
+
+            @Override
+            public void onClose(final int i, final String s, final boolean b) {
+                log.info(""connection closed"");
+            }
+
+            @Override
+            public void onError(final Exception e) {
+            }
+        };
+    }
+
+    @Test
+    public void testOnOpen() throws Exception {
+        client.connectBlocking();
+        Thread.sleep(1000);
+        assertEquals(1L, getSessionSetSize());
+        client.closeBlocking();
+    }
+
+    @Test
+    public void testOnMessage() throws Exception {
+        client.connectBlocking();
+        Thread.sleep(1000);
+        client.send(DataEventTypeEnum.MYSELF.name());
+        Thread.sleep(1000);
+        assertNotNull(getSession());
+        client.closeBlocking();
+    }
+
+    @Test
+    public void testOnClose() throws Exception {
+        client.connectBlocking();
+        Thread.sleep(1000);
+        assertEquals(1L, getSessionSetSize());
+        client.closeBlocking();
+        Thread.sleep(1000);
+        assertEquals(0L, getSessionSetSize());
+        assertNull(getSession());
+    }
+
+    @Test
+    public void testSend() throws Exception {
+        client.connectBlocking();
+        Thread.sleep(1000);
+        client.send(DataEventTypeEnum.MYSELF.name());
+        Thread.sleep(1000);
+        assertNotNull(getSession());
+        WebsocketCollector.send(null, DataEventTypeEnum.MYSELF);
+        WebsocketCollector.send(""test"", DataEventTypeEnum.MYSELF);
+        WebsocketCollector.send(""test"", DataEventTypeEnum.CREATE);
+        Thread.sleep(1000);
+        client.closeBlocking();
+    }
+
+    private long getSessionSetSize() throws ClassNotFoundException {
+        return ((Set) getField(""SESSION_SET"")).size();
+    }
+
+    private Session getSession() throws ClassNotFoundException {
+        return (Session) getField(""session"");
+    }
+
+    private Object getField(final String fieldName) throws ClassNotFoundException {
+        Class clazz = Class.forName(""org.dromara.soul.admin.listener.websocket.WebsocketCollector"");
+        Field[] declaredFields = clazz.getDeclaredFields();
+        return Arrays.stream(declaredFields)
+                .filter(each -> {
+                    each.setAccessible(true);
+                    return fieldName.equals(each.getName());
+                })
+                .findFirst()
+                .map(each -> {
+                    try {
+                        return each.get(clazz);
+                    } catch (IllegalAccessException e) {
+                        log.error(""get field error"", e);
+                        return null;
+                    }
+                }).orElse(null);
+    }","[{'comment': 'Use `org.dromara.soul.common.utils.ReflectUtils` or `org.springframework.test.util.ReflectionTestUtils`', 'commenter': 'dengliming'}, {'comment': 'ok, I will change the code.', 'commenter': 'wuudongdong'}]"
824,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketCollectorTest.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.admin.service.SyncDataService;
+import org.dromara.soul.admin.spring.SpringBeanUtils;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.test.util.ReflectionTestUtils;
+
+import javax.websocket.RemoteEndpoint;
+import javax.websocket.Session;
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Test case for WebsocketCollector.
+ *
+ * @author wuudongdong
+ */
+@Slf4j
+public final class WebsocketCollectorTest {
+
+    private WebsocketCollector websocketCollector;
+
+    private Session session;
+
+    @Before
+    public void setUp() {
+        ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
+        SpringBeanUtils.getInstance().setCfgContext(context);
+        SyncDataService syncDataService = mock(SyncDataService.class);
+        when(SpringBeanUtils.getInstance().getBean(SyncDataService.class)).thenReturn(syncDataService);
+        when(syncDataService.syncAll(DataEventTypeEnum.MYSELF)).thenReturn(true);
+        session = mock(Session.class);
+        RemoteEndpoint.Basic basic = mock(RemoteEndpoint.Basic.class);
+        when(session.getBasicRemote()).thenReturn(basic);
+        websocketCollector = new WebsocketCollector();
+    }
+
+    @Test
+    public void testOnOpen() {
+        websocketCollector.onOpen(session);
+        assertEquals(1L, getSessionSetSize());
+        websocketCollector.onClose(session);
+    }
+
+    @Test
+    public void testOnMessage() {
+        websocketCollector.onOpen(session);
+        websocketCollector.onMessage(DataEventTypeEnum.MYSELF.name(), session);
+        assertNotNull(getSession());","[{'comment': 'use  `assertEquals ` would be better', 'commenter': 'dengliming'}]"
824,soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketCollectorTest.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import lombok.extern.slf4j.Slf4j;
+import org.dromara.soul.admin.service.SyncDataService;
+import org.dromara.soul.admin.spring.SpringBeanUtils;
+import org.dromara.soul.common.enums.DataEventTypeEnum;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.test.util.ReflectionTestUtils;
+
+import javax.websocket.RemoteEndpoint;
+import javax.websocket.Session;
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Test case for WebsocketCollector.
+ *
+ * @author wuudongdong
+ */
+@Slf4j
+public final class WebsocketCollectorTest {
+
+    private WebsocketCollector websocketCollector;
+
+    private Session session;
+
+    @Before
+    public void setUp() {
+        ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
+        SpringBeanUtils.getInstance().setCfgContext(context);
+        SyncDataService syncDataService = mock(SyncDataService.class);
+        when(SpringBeanUtils.getInstance().getBean(SyncDataService.class)).thenReturn(syncDataService);
+        when(syncDataService.syncAll(DataEventTypeEnum.MYSELF)).thenReturn(true);
+        session = mock(Session.class);
+        RemoteEndpoint.Basic basic = mock(RemoteEndpoint.Basic.class);
+        when(session.getBasicRemote()).thenReturn(basic);
+        websocketCollector = new WebsocketCollector();
+    }
+
+    @Test
+    public void testOnOpen() {
+        websocketCollector.onOpen(session);
+        assertEquals(1L, getSessionSetSize());
+        websocketCollector.onClose(session);
+    }
+
+    @Test
+    public void testOnMessage() {
+        websocketCollector.onOpen(session);
+        websocketCollector.onMessage(DataEventTypeEnum.MYSELF.name(), session);
+        assertNotNull(getSession());
+        websocketCollector.onClose(session);
+    }
+
+    @Test
+    public void testOnClose() {
+        websocketCollector.onOpen(session);
+        assertEquals(1L, getSessionSetSize());
+        websocketCollector.onClose(session);
+        assertEquals(0L, getSessionSetSize());
+        assertNull(getSession());
+    }
+
+    @Test
+    public void testOnError() {
+        websocketCollector.onOpen(session);
+        assertEquals(1L, getSessionSetSize());
+        Throwable throwable = mock(Throwable.class);
+        websocketCollector.onError(session, throwable);
+        assertEquals(0L, getSessionSetSize());
+        assertNull(getSession());
+    }
+
+    @Test
+    public void testSend() {
+        websocketCollector.onOpen(session);
+        assertEquals(1L, getSessionSetSize());
+        websocketCollector.onMessage(DataEventTypeEnum.MYSELF.name(), session);
+        WebsocketCollector.send(null, DataEventTypeEnum.MYSELF);
+        WebsocketCollector.send(""test"", DataEventTypeEnum.MYSELF);","[{'comment': 'Can you also verify  `session.getBasicRemote().sendText` would be called once?', 'commenter': 'dengliming'}]"
852,soul-client/soul-client-common/src/test/java/org/dromara/soul/client/common/utils/RegisterUtilsTest.java,"@@ -0,0 +1,101 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.client.common.utils;
+
+import lombok.SneakyThrows;
+import org.dromara.soul.common.constant.AdminConstants;
+import org.dromara.soul.common.enums.RpcTypeEnum;
+import org.dromara.soul.common.utils.JsonUtils;
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.MockedStatic;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.mockStatic;
+
+public final class RegisterUtilsTest {","[{'comment': 'java doc', 'commenter': 'tydhot'}, {'comment': 'ok', 'commenter': 'xxl115'}]"
909,soul-spring-boot-starter/soul-spring-boot-starter-client/soul-spring-boot-starter-client-sofa/pom.xml,"@@ -29,6 +29,11 @@
     <artifactId>soul-spring-boot-starter-client-sofa</artifactId>
 
     <dependencies>
+        <dependency>
+            <groupId>com.alipay.sofa</groupId>
+            <artifactId>runtime-sofa-boot-starter</artifactId>
+            <version>3.1.4</version>
+        </dependency>","[{'comment': 'why add this', 'commenter': 'tydhot'}, {'comment': 'In soul-client-sofa, this dependence is provided, either add this or hit NoClassDefFoundError. And I think if users add the soul-spring-boot-starter-client-sofa that means they need a sofa starter', 'commenter': 'MarcusJiang1306'}, {'comment': 'If someone need sofa starter , he should import it himself.', 'commenter': 'tydhot'}]"
932,soul-admin/src/main/java/org/dromara/soul/admin/controller/SoulClientController.java,"@@ -52,7 +53,7 @@ public SoulClientController(final SoulClientRegisterService soulClientRegisterSe
      * @param springMvcRegisterDTO the spring mvc register dto
      * @return the string
      */
-    @PostMapping(""/springmvc-register"")
+    @PostMapping(RegisterConstants.HTTP_PATH)","[{'comment': 'why spring mvc is http path?', 'commenter': 'tydhot'}]"
932,soul-common/src/main/java/org/dromara/soul/common/constant/RegisterConstants.java,"@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.common.constant;
+
+/**
+ * constants for register.
+ *
+ * @author severez
+ */
+public final class RegisterConstants {
+
+    public static final String COMMON_CONTEXT_PATH = ""/soul-client"";
+
+    public static final String HTTP_PATH = ""/springmvc-register"";","[{'comment': 'I don\'t think http path can be ""/springmvc-register"".', 'commenter': 'tydhot'}]"
932,soul-common/src/main/java/org/dromara/soul/common/enums/RpcTypeEnum.java,"@@ -37,46 +38,48 @@
     /**
      * Http rpc type enum.
      */
-    HTTP(""http"", true),
+    HTTP(""http"", RegisterConstants.HTTP_PATH, true),","[{'comment': ""The RPC type here should not be related to the specific path, especially when HTTP can't correspond to a specific path"", 'commenter': 'tydhot'}]"
936,soul-spring-boot-starter/soul-spring-boot-starter-client/soul-spring-boot-starter-client-springmvc/pom.xml,"@@ -20,23 +20,35 @@
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
     <parent>
-        <groupId>org.dromara</groupId>
         <artifactId>soul-spring-boot-starter-client</artifactId>
+        <groupId>org.dromara</groupId>
         <version>2.2.1</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
-    <artifactId>soul-spring-boot-starter-client-springmvc</artifactId>
+    <artifactId>soul-spring-boot-starter-client-alibaba-dubbo</artifactId>","[{'comment': 'why change it to Dubbo in springmvc‘s pom.xml', 'commenter': 'tydhot'}]"
1058,soul-admin/src/main/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListener.java,"@@ -233,20 +223,35 @@ public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum
                 break;
             default:
                 changed.forEach(rule -> {
-                    List<RuleData> ls = RULE_MAP
+                    Map<String, RuleData> currentData = RULE_MAP
                             .getOrDefault(rule.getSelectorId(), new ArrayList<>())
-                            .stream()
-                            .filter(s -> !s.getId().equals(rule.getSelectorId()))
-                            .sorted(RULE_DATA_COMPARATOR)
-                            .collect(Collectors.toList());
-                    ls.add(rule);
-                    RULE_MAP.put(rule.getSelectorId(), ls);
+                            .parallelStream()
+                            .collect(Collectors.toMap(RuleData::getId, v -> v));
+                    currentData.put(rule.getId(), rule);
+                    RULE_MAP.put(rule.getSelectorId(),
+                            currentData
+                                    .values()
+                                    .parallelStream()
+                                    .sorted(RULE_DATA_COMPARATOR)
+                                    .collect(Collectors.toList()));
                 });","[{'comment': ""I suggest you don't need to use a new Map:\r\n```\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getId()))\r\n                            .collect(Collectors.toList());\r\n                    ls.add(rule);\r\n                    ls.sort(RULE_DATA_COMPARATOR);\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n```"", 'commenter': 'dengliming'}, {'comment': 'ok,thanks you review my code', 'commenter': 'Zhoutzzz'}]"
1059,soul-admin/src/test/java/org/dromara/soul/admin/service/impl/PermissionServiceImplTest.java,"@@ -0,0 +1,141 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.service.impl;
+
+import org.dromara.soul.admin.config.JwtProperties;
+import org.dromara.soul.admin.entity.DashboardUserDO;
+import org.dromara.soul.admin.entity.PermissionDO;
+import org.dromara.soul.admin.entity.ResourceDO;
+import org.dromara.soul.admin.entity.UserRoleDO;
+import org.dromara.soul.admin.mapper.DashboardUserMapper;
+import org.dromara.soul.admin.mapper.PermissionMapper;
+import org.dromara.soul.admin.mapper.ResourceMapper;
+import org.dromara.soul.admin.mapper.UserRoleMapper;
+import org.dromara.soul.admin.spring.SpringBeanUtils;
+import org.dromara.soul.admin.vo.PermissionMenuVO;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.context.ConfigurableApplicationContext;
+
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * add test case for {@link PermissionServiceImpl}.
+ *
+ * @author HoldDie
+ * @version 1.0
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class PermissionServiceImplTest {","[{'comment': 'Please keep the package name the same as elsewhere. e.g.  `org.dromara.soul.admin.service.PermissionServiceTest` \r\n', 'commenter': 'dengliming'}]"
1059,soul-admin/src/test/java/org/dromara/soul/admin/service/PermissionServiceTest.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.service;
+
+import org.dromara.soul.admin.config.JwtProperties;
+import org.dromara.soul.admin.entity.DashboardUserDO;
+import org.dromara.soul.admin.entity.PermissionDO;
+import org.dromara.soul.admin.entity.ResourceDO;
+import org.dromara.soul.admin.entity.UserRoleDO;
+import org.dromara.soul.admin.mapper.DashboardUserMapper;
+import org.dromara.soul.admin.mapper.PermissionMapper;
+import org.dromara.soul.admin.mapper.ResourceMapper;
+import org.dromara.soul.admin.mapper.UserRoleMapper;
+import org.dromara.soul.admin.service.impl.PermissionServiceImpl;
+import org.dromara.soul.admin.spring.SpringBeanUtils;
+import org.dromara.soul.admin.vo.PermissionMenuVO;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.context.ConfigurableApplicationContext;
+
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * add test case for {@link PermissionServiceImpl}.
+ *
+ * @author HoldDie
+ * @version 1.0","[{'comment': 'remove `@version`', 'commenter': 'dengliming'}]"
1063,soul-web/src/main/java/org/dromara/soul/web/OpenController.java,"@@ -0,0 +1,32 @@
+package org.dromara.soul.web;
+
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import lombok.extern.slf4j.Slf4j;
+
+
+/**
+ * this is application hystrix controller.
+ *
+ * @author afj
+ */
+@RestController
+@Slf4j
+@RequestMapping(""/"")
+public class OpenController {
+
+    /**
+     * Apply soul result.
+     *
+     * @return the soul result
+     */
+    @SuppressWarnings(""checkstyle:RegexpSingleline"")
+    @GetMapping(""/hystrix"")
+    public String apply() {","[{'comment': 'Is it a test file? ', 'commenter': 'dengliming'}]"
1096,soul-register-center/soul-register-client/soul-register-client-http/src/main/java/org/dromara/soul/register/client/http/utils/RegisterUtils.java,"@@ -42,7 +42,7 @@ private RegisterUtils() {
     public static void doRegister(final String json, final String url, final String rpcType) {
         try {
             String result = OkHttpTools.getInstance().post(url, json);
-            if (""success"".equals(result)) {
+            if (""SUCCESS"".equals(result)) {","[{'comment': 'Why modify this? ', 'commenter': 'dengliming'}, {'comment': '@PostMapping(""/springmvc-register"")\r\n    public String registerSpringMvc(@RequestBody final SpringMvcRegisterDTO springMvcRegisterDTO) {\r\n        INSTANCE.publishEvent(RpcTypeEnum.HTTP.getName(), springMvcRegisterDTO);\r\n        return ""SUCCESS"";\r\n    }\r\n\r\ncontroller return is this', 'commenter': 'freedom-xiao007'}, {'comment': '...I suggest that use `org.dromara.soul.admin.utils.SoulResultMessage#SUCCESS` in controller.', 'commenter': 'dengliming'}, {'comment': '    public String registerSpringMvc(@RequestBody final SpringMvcRegisterDTO springMvcRegisterDTO) {\r\n        INSTANCE.publishEvent(RpcTypeEnum.HTTP.getName(), springMvcRegisterDTO);\r\n        return SoulResultMessage.SUCCESS;\r\n    }\r\n\r\nlike this?', 'commenter': 'freedom-xiao007'}, {'comment': ""yes. That's what I mean. thanks."", 'commenter': 'dengliming'}, {'comment': 'okay，I have modified.', 'commenter': 'freedom-xiao007'}]"
1193,soul-spring-boot-starter/soul-spring-boot-starter-sync-data-center/soul-spring-boot-starter-sync-data-nacos/pom.xml,"@@ -42,5 +42,10 @@
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter</artifactId>
         </dependency>
+        <dependency>
+            <groupId>com.alibaba.nacos</groupId>
+            <artifactId>nacos-client</artifactId>
+            <scope>provided</scope>
+        </dependency>","[{'comment': 'Please check the dependencies in `pom.xml`. The `soul-spring-boot-starter-sync-data-nacos` depends `soul-sync-data-nacos` and the `soul-sync-data-nacos `depends `nacos-client`', 'commenter': 'dengliming'}, {'comment': 'yeah,the `provided` just make build pass', 'commenter': 'naah69'}]"
1194,soul-admin/src/main/resources/META-INF/schema.sql,"@@ -14,9 +14,7 @@
 -- See the License for the specific language governing permissions and
 -- limitations under the License.
 
-CREATE DATABASE  IF NOT EXISTS  `soul`  DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ;
 
-USE `soul`;","[{'comment': ""If the database itself doesn't exist, how to do?"", 'commenter': 'dengliming'}]"
1213,soul-admin/src/main/java/org/dromara/soul/admin/listener/websocket/WebsocketListener.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.context.annotation.Configuration;
+
+import javax.servlet.ServletRequestEvent;
+import javax.servlet.ServletRequestListener;
+import javax.servlet.annotation.WebListener;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+
+/**
+ * The Websocket listener.
+ *
+ * @author xiaoyu(Myth)
+ * @author huangxiaofeng
+ * @since 2.0.0
+ */
+@Slf4j
+@WebListener
+@Configuration
+public class WebsocketListener implements ServletRequestListener {
+
+    public static final String CLIENT_IP_NAME = ""ClientIP"";
+
+    @Override
+    public void requestDestroyed(final ServletRequestEvent sre) {
+        try {
+            HttpServletRequest request = (HttpServletRequest) sre.getServletRequest();
+            if (null != request && null != request.getSession()) {
+                HttpSession session = request.getSession();
+                request.removeAttribute(CLIENT_IP_NAME);
+                session.removeAttribute(CLIENT_IP_NAME);
+            }
+        } catch (Exception e) {
+            log.error("""", e);
+        }
+    }
+
+    @Override
+    public void requestInitialized(final ServletRequestEvent sre) {
+        try {
+            HttpServletRequest request = (HttpServletRequest) sre.getServletRequest();
+            if (null != request && null != request.getSession()) {
+                HttpSession session = request.getSession();
+                //把HttpServletRequest中的IP地址放入HttpSession中，关键字可任取，此处为ClientIP","[{'comment': 'In English', 'commenter': 'dengliming'}, {'comment': 'OK', 'commenter': 'leohou0430'}]"
1213,soul-admin/src/main/java/org/dromara/soul/admin/listener/websocket/WebsocketConfigurator.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.dromara.soul.admin.listener.websocket;
+
+import lombok.extern.slf4j.Slf4j;
+
+import javax.servlet.http.HttpSession;
+import javax.websocket.HandshakeResponse;
+import javax.websocket.server.HandshakeRequest;
+import javax.websocket.server.ServerEndpointConfig;
+
+/**
+ * The Websocket configurator.
+ *
+ * @author xiaoyu(Myth)
+ * @author huangxiaofeng
+ * @since 2.0.0
+ */
+@Slf4j
+public class WebsocketConfigurator extends ServerEndpointConfig.Configurator {
+
+    @Override
+    public void modifyHandshake(final ServerEndpointConfig sec, final HandshakeRequest request, final HandshakeResponse response) {
+        HttpSession httpSession = (HttpSession) request.getHttpSession();
+        // 把HttpSession中保存的ClientIP放到ServerEndpointConfig中，关键字可以跟之前不同","[{'comment': 'modify english', 'commenter': 'yu199195'}]"
1213,soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/WebsocketSyncDataService.java,"@@ -71,7 +71,7 @@ public WebsocketSyncDataService(final WebsocketConfig websocketConfig,
         }
         try {
             for (WebSocketClient client : clients) {
-                boolean success = client.connectBlocking(3000, TimeUnit.MILLISECONDS);
+                boolean success = client.connectBlocking(3, TimeUnit.SECONDS);","[{'comment': 'donot modify this ', 'commenter': 'yu199195'}]"
1225,soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-httpclient/src/main/java/org/dromara/soul/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java,"@@ -110,17 +107,11 @@ public HttpClient httpClient(final HttpClientProperties properties) {
                                     .to(builder::nonProxyHosts);
                         });
                     }
-                    tcpClient = tcpClient.option(ChannelOption.SO_TIMEOUT, 5000);
+                    tcpClient = tcpClient.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);
+//                        // The write and read timeouts are serving as generic socket idle state handlers.
                     tcpClient = tcpClient.doOnConnected(c -> {
-                        ChannelPipeline pipeline = c.channel().pipeline();
-                        Map<String, ChannelHandler> nameChannelHandlerMap = pipeline.toMap();
-                        // The write and read timeouts are serving as generic socket idle state handlers.
-                        if (!nameChannelHandlerMap.containsKey(""write_timeout"")) {
-                            pipeline.addFirst(""write_timeout"", new WriteTimeoutHandler(properties.getWriteTimeout(), TimeUnit.MILLISECONDS));
-                        }
-                        if (!nameChannelHandlerMap.containsKey(""read_timeout"")) {
-                            pipeline.addFirst(""read_timeout"", new ReadTimeoutHandler(properties.getReadTimeout(), TimeUnit.MILLISECONDS));
-                        }
+                        c.addHandlerLast(new WriteTimeoutHandler(properties.getWriteTimeout(), TimeUnit.MILLISECONDS));
+                        c.addHandlerLast(new ReadTimeoutHandler(properties.getReadTimeout(), TimeUnit.MILLISECONDS));","[{'comment': 'Please make sure that [this exception](https://github.com/dromara/soul/issues/1209)  will not occur.\r\n\r\n', 'commenter': 'dengliming'}, {'comment': 'yes, i had tested it.', 'commenter': 'naah69'}, {'comment': ""@naah69 What does this PR actually fix? It's `read_timeout/write_timeout` that doesn't work? BTW, what is the actual effect of `addHandlerLast ` and `addHandlerFirst`?"", 'commenter': 'dengliming'}, {'comment': ""yes,read_timeout/write_timeout doesn't work.it allways make error that is `io.netty.handler.timeout.ReadTimeoutException: null`,then the request will be 500.\r\n\r\nfrom Reactor Netty 0.8 and Spring Framework 5.1,the handler will be set by below code.i fix it to make code work.\r\n\r\n```\r\nTcpClient tcpClient = TcpClient.create()\r\n                 .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 1000)\r\n                 .doOnConnected(connection ->\r\n                         connection.addHandlerLast(new ReadTimeoutHandler(10))\r\n                                   .addHandlerLast(new WriteTimeoutHandler(10)));\r\nWebClient webClient = WebClient.builder()\r\n    .clientConnector(new ReactorClientHttpConnector(HttpClient.from(tcpClient)))\r\n    .build();\r\n```\r\n\r\n\r\n"", 'commenter': 'naah69'}, {'comment': 'So, what is the returned data when timeout occurs?', 'commenter': 'dengliming'}, {'comment': '@naah69 Any progress on this?', 'commenter': 'dengliming'}]"
1225,soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-httpclient/src/main/java/org/dromara/soul/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java,"@@ -110,17 +107,11 @@ public HttpClient httpClient(final HttpClientProperties properties) {
                                     .to(builder::nonProxyHosts);
                         });
                     }
-                    tcpClient = tcpClient.option(ChannelOption.SO_TIMEOUT, 5000);
+                    tcpClient = tcpClient.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);","[{'comment': ""It's already set up [here](https://github.com/dromara/soul/blob/000e54d8169c4db70f6c18048ce67eac07cd4ebf/soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-httpclient/src/main/java/org/dromara/soul/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java#L90-L95)"", 'commenter': 'dengliming'}]"
1324,soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/condition/judge/MatchOperatorJudge.java,"@@ -35,6 +35,6 @@ public Boolean judge(final ConditionData conditionData, final String realData) {
         if (Objects.equals(ParamTypeEnum.URI.getName(), conditionData.getParamType())) {
             return PathMatchUtils.match(conditionData.getParamValue().trim(), realData);
         }
-        return realData.contains(conditionData.getParamValue().trim());
+        return realData.matches(conditionData.getParamValue().trim());","[{'comment': 'You can use `RegExOperatorJudge`.', 'commenter': 'dengliming'}]"
1376,soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/executor/RedisRateLimiter.java,"@@ -64,11 +72,15 @@
                     return longs;
                 }).map(results -> {
                     boolean allowed = results.get(0) == 1L;
+                    if (allowed) {
+                        exchange.getAttributes().put(RATE_LIMITER_ALGORITHM, rateLimiterAlgorithm);
+                        exchange.getAttributes().put(KEYS, keys);
+                        exchange.getAttributes().put(SCRIPT_ARGS, scriptArgs);
+                    }
                     Long tokensLeft = results.get(1);
                     return new RateLimiterResponse(allowed, tokensLeft);
                 })
-                .doOnError(throwable -> log.error(""Error determining if user allowed from redis:{}"", throwable.getMessage()))
-                .doFinally(signalType -> rateLimiterAlgorithm.callback(script, keys, scriptArgs));
+                .doOnError(throwable -> log.error(""Error determining if user allowed from redis:{}"", throwable.getMessage()));","[{'comment': 'It has nothing to do with your changes here, but I think the expression of this log is not very clear.', 'commenter': 'tydhot'}, {'comment': ""After my test, I found that，RedisRateLimiter#isAllowed “doFinally” execution sequence is :\r\n\r\n1.WebClientPlugin#execute send request\r\n\r\n2.doFinally execution RateLimiterAlgorithm#callback\r\n\r\n3.WebClientResponsePlugin#execute write response\r\n\r\nI think a request needs to write response ，then execution RateLimiterAlgorithm#callback, because\r\n\r\nConcurrent requests limiter：\r\n\r\n“Because Redis is so fast, doing the naive thing works. Just add a random token to a set at the start of a request and remove it from the set when you're done. If the set is too large, reject the request.”\r\n\r\nfrom https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#file-1-check_request_rate_limiter-rb-L11-L34\r\n\r\nso the doFinally It should be written in RateLimiterPlugin#doExecute，If so, then execution sequence is :\r\n\r\n1.WebClientPlugin#execute send request\r\n\r\n2.WebClientResponsePlugin#execute write response\r\n\r\n3.doFinally execution RateLimiterAlgorithm#callback"", 'commenter': 'WYUSIG'}, {'comment': 'I just happened to find that the grammar of this log is not very right. Can you fix it by the way?', 'commenter': 'tydhot'}, {'comment': 'I found that spring cloud gateway\'s error log is the same\r\n```java\r\ncatch (Exception e) {\r\n\t/*\r\n         * We don\'t want a hard dependency on Redis to allow traffic. Make sure to set\r\n         * an alert so you know if this is happening too much. Stripe\'s observed\r\n         * failure rate is 0.01%.\r\n         */\r\n\tlog.error(""Error determining if user allowed from redis"", e);\r\n}\r\n```\r\nhttps://github.com/spring-cloud/spring-cloud-gateway/blob/main/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/ratelimit/RedisRateLimiter.java\r\n\r\nline 284', 'commenter': 'WYUSIG'}, {'comment': 'I think it is a good opportunity to fix them : )', 'commenter': 'tydhot'}]"
1376,soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/executor/RedisRateLimiter.java,"@@ -41,15 +42,22 @@
 @Slf4j
 public class RedisRateLimiter {
     
+    public static final String RATE_LIMITER_ALGORITHM = ""rateLimiterAlgorithm"";
+    
+    public static final String KEYS = ""keys"";
+
+    public static final String SCRIPT_ARGS = ""scriptArgs"";","[{'comment': 'I think the key of the attribute here maybe  need a prefix like soul or ratelimiter to make the meaning clearer.', 'commenter': 'tydhot'}]"
1376,soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/RateLimiterPlugin.java,"@@ -61,18 +64,26 @@ public int getOrder() {
         return PluginEnum.RATE_LIMITER.getCode();
     }
 
+    @SuppressWarnings(""unchecked"")
     @Override
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {
         RateLimiterHandle limiterHandle = RatelimiterRuleHandleCache.getInstance()
                 .obtainHandle(RateLimiterPluginDataHandler.getCacheKeyName(rule));
-        return redisRateLimiter.isAllowed(rule.getId(), limiterHandle)
+        return redisRateLimiter.isAllowed(exchange, rule.getId(), limiterHandle)
                 .flatMap(response -> {
                     if (!response.isAllowed()) {
                         exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
                         Object error = SoulResultWrap.error(SoulResultEnum.TOO_MANY_REQUESTS.getCode(), SoulResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
                         return WebFluxResultUtils.result(exchange, error);
                     }
                     return chain.execute(exchange);
+                }).doFinally(s -> {
+                    RateLimiterAlgorithm<?> rateLimiterAlgorithm = (RateLimiterAlgorithm<?>) exchange.getAttributes().get(RedisRateLimiter.RATE_LIMITER_ALGORITHM);
+                    if (rateLimiterAlgorithm != null) {
+                        List<String> keys = (List<String>) exchange.getAttributes().get(RedisRateLimiter.KEYS);
+                        List<String> scriptArgs = (List<String>) exchange.getAttributes().get(RedisRateLimiter.SCRIPT_ARGS);
+                        rateLimiterAlgorithm.callback(null, keys, scriptArgs);","[{'comment': ""Do I need to change the parameters of the callback method？because I don't think scripts will be passed to the method"", 'commenter': 'WYUSIG'}, {'comment': 'I think it can be removed because the script can be acquired by the implementation of RateLimiterAlgorithm. @yu199195 What about it?', 'commenter': 'tydhot'}]"
1376,soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/executor/RedisRateLimiter.java,"@@ -41,15 +42,22 @@
 @Slf4j
 public class RedisRateLimiter {
     
+    public static final String RATE_LIMITER_ALGORITHM = ""rateLimiterAlgorithm"";
+    
+    public static final String RATE_LIMITER_KEYS = ""keys"";
+
+    public static final String RATE_LIMITER_SCRIPT_ARGS = ""scriptArgs"";
+    ","[{'comment': 'I think not only the naming of variables should be prefixed, but also the value of variables should be prefixed, otherwise it will cause ambiguity in debugging', 'commenter': 'tydhot'}, {'comment': 'This code has been fixed', 'commenter': 'WYUSIG'}]"
1376,soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/executor/RedisRateLimiter.java,"@@ -44,9 +44,9 @@
     
     public static final String RATE_LIMITER_ALGORITHM = ""rateLimiterAlgorithm"";
     
-    public static final String KEYS = ""keys"";
+    public static final String RATE_LIMITER_KEYS = ""keys"";","[{'comment': 'I think you misunderstood @tydhot \'s meaning. That should be something like that:\r\n`public static final String RATE_LIMITER_KEYS = ""_rate_limiter_keys"";`\r\n', 'commenter': 'dengliming'}]"
1376,soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/algorithm/RateLimiterAlgorithm.java,"@@ -49,10 +49,9 @@
     /**
      * Callback string.
      *
-     * @param script the script
      * @param keys the keys
      * @param scriptArgs the script args
      */
-    default void callback(final RedisScript<?> script, final List<String> keys, final List<String> scriptArgs) {
+    default void callback(final List<String> keys, final List<String> scriptArgs) {","[{'comment': 'RedisScript can get by this.getScript(), so i remove it', 'commenter': 'WYUSIG'}]"
1421,shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DataPermissionControllerTest.java,"@@ -0,0 +1,173 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.controller;
+
+import org.apache.shenyu.admin.model.dto.DataPermissionDTO;
+import org.apache.shenyu.admin.model.page.CommonPager;
+import org.apache.shenyu.admin.model.page.PageParameter;
+import org.apache.shenyu.admin.model.query.RuleQuery;
+import org.apache.shenyu.admin.model.query.SelectorQuery;
+import org.apache.shenyu.admin.model.vo.DataPermissionPageVO;
+import org.apache.shenyu.admin.service.DataPermissionService;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import java.util.Collections;
+import static org.hamcrest.core.Is.is;
+import static org.mockito.BDDMockito.given;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+/**
+ * add test case for {@link DataPermissionController}.
+ *
+ * @author renzhuyan","[{'comment': 'Please remove `@author`.', 'commenter': 'dengliming'}]"
1445,shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java,"@@ -84,7 +84,8 @@ public AlibabaDubboServiceBeanListener(final ShenyuRegisterCenterConfig config,
 
     private void handler(final ServiceBean<?> serviceBean) {
         Class<?> clazz = serviceBean.getRef().getClass();","[{'comment': 'I think just call `Class<?> clazz = AopUtils.getTargetClass(serviceBean.getRef());` method is enough. Can you try it?', 'commenter': 'dengliming'}, {'comment': ' I will try it', 'commenter': 'JemyXiao'}, {'comment': 'Any progress? @JemyXiao', 'commenter': 'dengliming'}]"
1463,shenyu-admin/src/main/java/org/apache/shenyu/admin/exception/ExceptionHandlers.java,"@@ -30,7 +30,7 @@
 
 /**
  * ControllerMethodResolver.
- * https://dzone.com/articles/global-exception-handling-with-controlleradvice.
+ * @see <a href=""https://dzone.com/articles/global-exception-handling-with-controlleradvice"">global-exception-handling-with-controlleradvice</a>.","[{'comment': ""Remove '.' at the end of this line."", 'commenter': 'tuohai666'}, {'comment': 'ok，I fixed it and push the code to git repository', 'commenter': 'THyyy'}]"
1482,shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java,"@@ -88,10 +89,14 @@ public void onApplicationEvent(@NonNull final ContextRefreshedEvent contextRefre
     private MetaDataRegisterDTO buildMetaDataDTO() {
         String contextPath = this.contextPath;
         String appName = env.getProperty(""spring.application.name"");
+        Integer port = env.getProperty(""server.port"",Integer.class,8080);
+        String host = NetUtils.localIP();","[{'comment': 'can not used this NetUtils.localIP();\r\n ', 'commenter': 'yu199195'}]"
1482,shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java,"@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.client.springcloud.init;
 
+import com.alibaba.nacos.api.utils.NetUtils;
 import lombok.extern.slf4j.Slf4j;","[{'comment': ""I think is a bad idea to use nacos's util here."", 'commenter': 'tydhot'}, {'comment': 'Yes, you are right, i should  use org.apache.shenyu.common.utils.IpUtils.getHost() instead of using NetUtils.localIP(), right?', 'commenter': 'joewee'}]"
1482,shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java,"@@ -88,10 +89,14 @@ public void onApplicationEvent(@NonNull final ContextRefreshedEvent contextRefre
     private MetaDataRegisterDTO buildMetaDataDTO() {
         String contextPath = this.contextPath;
         String appName = env.getProperty(""spring.application.name"");
+        Integer port = env.getProperty(""server.port"",Integer.class,8080);","[{'comment': 'maybe here，  "",""  need  blank space after  it.....', 'commenter': 'yu199195'}]"
1541,shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/JwtPluginTest.java,"@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.jwt;
+
+import org.apache.shenyu.common.dto.PluginData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.plugin.api.ShenyuPluginChain;
+import org.apache.shenyu.plugin.api.result.DefaultShenyuResult;
+import org.apache.shenyu.plugin.api.result.ShenyuResult;
+import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
+import org.apache.shenyu.plugin.jwt.handle.JwtPluginDataHandler;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
+import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.server.ServerWebExchange;
+import reactor.core.publisher.Mono;
+import reactor.test.StepVerifier;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Test case for {@link JwtPlugin}.
+ *
+ * @author sinsy","[{'comment': 'remove author', 'commenter': 'yu199195'}]"
1575,shenyu-common/src/main/java/org/apache/shenyu/common/exception/ThrowingFunction.java,"@@ -15,32 +15,37 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.jwt.lambda;
+package org.apache.shenyu.common.exception;
 
 /**
- * Exception wrap.
+ * Throwing wrap.
  */
 @FunctionalInterface
-public interface ThrowingFunction {
+public interface ThrowingFunction<T> {
+
 
     /**
      * apply function.
      *
-     * @return object
+     * @return T
+     * @throws Exception any error
      */
-    Object apply();
+    T apply() throws Exception;
 
     /**
      * operation function.
      *
-     * @param function accept function
-     * @return object
+     * @param function apply function.
+     * @param <T> t
+     * @return T
      */
-    static Object wrap(ThrowingFunction function) {
+    static <T> T wrap(ThrowingFunction<T> function) {
         try {
             return function.apply();
         } catch (Exception e) {
+            e.printStackTrace();","[{'comment': ""I don't think `e.printStackTrace();` is a good idea."", 'commenter': 'dengliming'}, {'comment': 'I will resubmit a code, please review again, thank you.', 'commenter': 'impactCn'}]"
1590,shenyu-plugin/shenyu-plugin-rpc-response/src/main/java/org/apache/shenyu/plugin/rpc/response/RpcResponsePlugin.java,"@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.rpc.response;
+
+import org.apache.shenyu.common.constant.Constants;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.RpcTypeEnum;
+import org.apache.shenyu.common.utils.JsonUtils;
+import org.apache.shenyu.plugin.api.ShenyuPlugin;
+import org.apache.shenyu.plugin.api.ShenyuPluginChain;
+import org.apache.shenyu.plugin.api.context.ShenyuContext;
+import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
+import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
+import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
+import org.springframework.web.server.ServerWebExchange;
+import reactor.core.publisher.Mono;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
+
+/**
+ * this is rpc response plugin.
+ */
+public class RpcResponsePlugin implements ShenyuPlugin {
+
+    private static final Map<String, String> RPC_TYPE_MAP = new HashMap<String, String>() {
+        {
+            put(RpcTypeEnum.GRPC.getName(), Constants.GRPC_RPC_RESULT);
+            put(RpcTypeEnum.SOFA.getName(), Constants.SOFA_RPC_RESULT);
+            put(RpcTypeEnum.DUBBO.getName(), Constants.DUBBO_RPC_RESULT);
+            put(RpcTypeEnum.TARS.getName(), Constants.TARS_RPC_RESULT);
+        }
+    };
+
+    /**
+     * Process the Web request and (optionally) delegate to the next
+     * {@code WebFilter} through the given {@link ShenyuPluginChain}.
+     *
+     * @param exchange the current server exchange
+     * @param chain    provides a way to delegate to the next filter
+     * @return {@code Mono<Void>} to indicate when request processing is complete
+     */
+    @Override
+    public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginChain chain) {
+        return chain.execute(exchange).then(Mono.defer(() -> {
+            final Object result = Optional.ofNullable(getResult(exchange)).map(data -> exchange.getAttribute(data)).orElse(null);
+            if (Objects.isNull(result)) {
+                Object error = ShenyuResultWrap.error(ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(), ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
+                return WebFluxResultUtils.result(exchange, error);
+            }
+            Object success = ShenyuResultWrap.success(ShenyuResultEnum.SUCCESS.getCode(), ShenyuResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result));
+            return WebFluxResultUtils.result(exchange, success);
+        }));
+    }
+
+    private String getResult(final ServerWebExchange exchange) {
+        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
+        return Optional.ofNullable(shenyuContext).map(data -> RPC_TYPE_MAP.get(data.getRpcType())).orElse(null);","[{'comment': 'I am afraid that if it would be Muti rpc plugin at same time, it would be something wrong.', 'commenter': 'tydhot'}, {'comment': 'This logic works the same way as the previous four plug-ins', 'commenter': 'renzhuyan'}]"
1590,shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/ResponseHandler.java,"@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.response.strategy;
+
+import org.apache.shenyu.common.constant.Constants;
+import org.apache.shenyu.common.enums.RpcTypeEnum;
+import org.apache.shenyu.plugin.api.context.ShenyuContext;
+import org.apache.shenyu.plugin.response.config.HttpClientProperties;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.server.ServerWebExchange;
+
+import java.util.Objects;
+
+/**
+ * response handler.
+ */
+public class ResponseHandler {
+
+    @Autowired
+    private HttpClientProperties httpClientProperties;
+
+    /**
+     * strategy dispatch.
+     *
+     * @param exchange exchange the current server exchange
+     * @return {@code Mono<Void>} to indicate when request processing is complete
+     */
+    public Strategy dispatch(final ServerWebExchange exchange) {
+        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
+        if (Objects.equals(RpcTypeEnum.HTTP.getName(), shenyuContext.getRpcType())
+                || Objects.equals(RpcTypeEnum.SPRING_CLOUD.getName(), shenyuContext.getRpcType())) {
+            return getHttpStrategy();
+        } else {
+            return new DefaultStrategy();
+        }
+    }
+
+    private Strategy getHttpStrategy() {
+        if (httpClientProperties.getStrategy().equals(""webClient"")) {","[{'comment': 'maybe change to ""webClient"".equals(...) is better', 'commenter': 'tydhot'}]"
1590,shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/ResponseHandler.java,"@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.response.strategy;
+
+import org.apache.shenyu.common.constant.Constants;
+import org.apache.shenyu.common.enums.RpcTypeEnum;
+import org.apache.shenyu.plugin.api.context.ShenyuContext;
+import org.apache.shenyu.plugin.response.config.HttpClientProperties;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.server.ServerWebExchange;
+
+import java.util.Objects;
+
+/**
+ * response handler.
+ */
+public class ResponseHandler {
+
+    @Autowired
+    private HttpClientProperties httpClientProperties;
+
+    /**
+     * strategy dispatch.
+     *
+     * @param exchange exchange the current server exchange
+     * @return {@code Mono<Void>} to indicate when request processing is complete
+     */
+    public Strategy dispatch(final ServerWebExchange exchange) {
+        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
+        if (Objects.equals(RpcTypeEnum.HTTP.getName(), shenyuContext.getRpcType())
+                || Objects.equals(RpcTypeEnum.SPRING_CLOUD.getName(), shenyuContext.getRpcType())) {
+            return getHttpStrategy();
+        } else {
+            return new DefaultStrategy();
+        }
+    }
+
+    private Strategy getHttpStrategy() {
+        if (httpClientProperties.getStrategy().equals(""webClient"")) {
+            return new WebClientStrategy();
+        } else if (httpClientProperties.getStrategy().equals(""netty"")) {
+            return new NettyClientStrategy();
+        } else {
+            return null;","[{'comment': 'maybe just create a strategy that do nothing is better than just return null', 'commenter': 'tydhot'}]"
1632,shenyu-client/shenyu-client-sofa/src/main/java/org/apache/shenyu/client/sofa/SofaServiceBeanPostProcessor.java,"@@ -75,7 +76,8 @@ public SofaServiceBeanPostProcessor(final ShenyuRegisterCenterConfig config, fin
         this.appName = appName;
         this.host = props.getProperty(""host"");
         this.port = props.getProperty(""port"");
-        executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
+        executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder()
+                .setNameFormat(""sofa-client-thread-pool-%d"").build());","[{'comment': ""if u want to add pool name, I think u must add prefix like 'shenyu-' first to avoid misunderstanding ."", 'commenter': 'tydhot'}, {'comment': 'ok, let me change it.', 'commenter': 'leontius'}]"
1632,shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java,"@@ -78,7 +79,8 @@ public AlibabaDubboServiceBeanListener(final ShenyuRegisterCenterConfig config,
         this.appName = appName;
         this.host = props.getProperty(""host"");
         this.port = props.getProperty(""port"");
-        executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
+        executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder()","[{'comment': ""I'm a little confused. What's the difference between this and `java.util.concurrent.Executors#newSingleThreadExecutor(java.util.concurrent.ThreadFactory)` ?"", 'commenter': 'dengliming'}, {'comment': 'Maybe someone watched alibaba p3c before.', 'commenter': 'leontius'}, {'comment': 'finished. please review.', 'commenter': 'leontius'}, {'comment': ""Thanks. I'm not quite sure that using only one thread is a reasonable choice. @yu199195 @tydhot \r\n\r\n"", 'commenter': 'dengliming'}, {'comment': '.... why not used Executors.newXXXX ? ', 'commenter': 'yu199195'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdClientTest.java,"@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.etcd;
+
+import io.etcd.jetcd.ByteSequence;
+import io.etcd.jetcd.Client;
+import io.etcd.jetcd.KV;
+import io.etcd.jetcd.kv.DeleteResponse;
+import io.etcd.jetcd.kv.PutResponse;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.nio.charset.StandardCharsets;
+import java.util.concurrent.CompletableFuture;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * The testCase for {@link EtcdClient}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class EtcdClientTest {
+
+    private static final String TEST_KEY = ""KEY"";
+
+    private static final String TEST_VALUE = ""VALUE"";
+
+    @Mock
+    private Client client;
+
+    private EtcdClient etcdClient;
+
+    @Before
+    public void setUp() {
+        KV kvClient = mock(KV.class);
+        when(client.getKVClient()).thenReturn(kvClient);
+        etcdClient = new EtcdClient(client);
+        Assert.assertNotNull(etcdClient);
+    }
+
+    @Test
+    public void close() {
+        etcdClient.close();
+    }
+
+    @Test
+    public void put() {
+        CompletableFuture<PutResponse> put = mock(CompletableFuture.class);
+        when(client.getKVClient().put(ByteSequence.from(TEST_KEY, StandardCharsets.UTF_8), ByteSequence.from(TEST_VALUE, StandardCharsets.UTF_8))).thenReturn(put);
+        etcdClient.put(TEST_KEY, TEST_VALUE);","[{'comment': 'It also makes sense to verify what we expect. not just calling. : )\r\n`verify(client.getKVClient(), times(1)).put(any(ByteSequence.class), any(ByteSequence.class));`', 'commenter': 'dengliming'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdClientTest.java,"@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.etcd;
+
+import io.etcd.jetcd.ByteSequence;
+import io.etcd.jetcd.Client;
+import io.etcd.jetcd.KV;
+import io.etcd.jetcd.kv.DeleteResponse;
+import io.etcd.jetcd.kv.PutResponse;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.nio.charset.StandardCharsets;
+import java.util.concurrent.CompletableFuture;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * The testCase for {@link EtcdClient}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class EtcdClientTest {
+
+    private static final String TEST_KEY = ""KEY"";
+
+    private static final String TEST_VALUE = ""VALUE"";
+
+    @Mock
+    private Client client;
+
+    private EtcdClient etcdClient;
+
+    @Before
+    public void setUp() {
+        KV kvClient = mock(KV.class);
+        when(client.getKVClient()).thenReturn(kvClient);
+        etcdClient = new EtcdClient(client);
+        Assert.assertNotNull(etcdClient);
+    }
+
+    @Test
+    public void close() {
+        etcdClient.close();
+    }
+
+    @Test
+    public void put() {
+        CompletableFuture<PutResponse> put = mock(CompletableFuture.class);
+        when(client.getKVClient().put(ByteSequence.from(TEST_KEY, StandardCharsets.UTF_8), ByteSequence.from(TEST_VALUE, StandardCharsets.UTF_8))).thenReturn(put);
+        etcdClient.put(TEST_KEY, TEST_VALUE);
+    }
+
+    @Test
+    public void delete() {
+        CompletableFuture<DeleteResponse> delete = mock(CompletableFuture.class);
+        when(client.getKVClient().delete(ByteSequence.from(TEST_KEY, StandardCharsets.UTF_8))).thenReturn(delete);
+        etcdClient.delete(TEST_KEY);","[{'comment': 'The same as above.', 'commenter': 'dengliming'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdClientTest.java,"@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.etcd;
+
+import io.etcd.jetcd.ByteSequence;
+import io.etcd.jetcd.Client;
+import io.etcd.jetcd.KV;
+import io.etcd.jetcd.kv.DeleteResponse;
+import io.etcd.jetcd.kv.PutResponse;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.nio.charset.StandardCharsets;
+import java.util.concurrent.CompletableFuture;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * The testCase for {@link EtcdClient}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class EtcdClientTest {
+
+    private static final String TEST_KEY = ""KEY"";
+
+    private static final String TEST_VALUE = ""VALUE"";
+
+    @Mock
+    private Client client;
+
+    private EtcdClient etcdClient;
+
+    @Before
+    public void setUp() {
+        KV kvClient = mock(KV.class);
+        when(client.getKVClient()).thenReturn(kvClient);
+        etcdClient = new EtcdClient(client);
+        Assert.assertNotNull(etcdClient);
+    }
+
+    @Test
+    public void close() {
+        etcdClient.close();
+    }
+
+    @Test
+    public void put() {
+        CompletableFuture<PutResponse> put = mock(CompletableFuture.class);
+        when(client.getKVClient().put(ByteSequence.from(TEST_KEY, StandardCharsets.UTF_8), ByteSequence.from(TEST_VALUE, StandardCharsets.UTF_8))).thenReturn(put);
+        etcdClient.put(TEST_KEY, TEST_VALUE);
+    }
+
+    @Test
+    public void delete() {
+        CompletableFuture<DeleteResponse> delete = mock(CompletableFuture.class);
+        when(client.getKVClient().delete(ByteSequence.from(TEST_KEY, StandardCharsets.UTF_8))).thenReturn(delete);
+        etcdClient.delete(TEST_KEY);
+    }
+
+    @Test
+    public void deleteEtcdPathRecursive() {
+        etcdClient.deleteEtcdPathRecursive(TEST_KEY);","[{'comment': 'The same as above.', 'commenter': 'dengliming'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdDataDataChangedListenerTest.java,"@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.etcd;
+
+import com.google.common.collect.ImmutableList;
+import lombok.SneakyThrows;
+import org.apache.shenyu.common.dto.AppAuthData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.PluginData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+/**
+ * The testCase for {@link EtcdDataDataChangedListener}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class EtcdDataDataChangedListenerTest {
+
+    private static final String MOCK_APP_KEY = ""MOCK_APP_KEY"";
+
+    private static final String MOCK_APP_SECRET = ""MOCK_APP_SECRET"";
+
+    private static final String MOCK_ID = ""MOCK_ID"";
+
+    private static final String MOCK_PATH = ""MOCK_PATH"";
+
+    private static final String MOCK_APP_NAME = ""MOCK_APP_NAME"";
+
+    private static final String MOCK_NAME = ""MOCK_NAME"";
+
+    private static final String MOCK_CONFIG = ""MOCK_CONFIG"";
+
+    private static final String MOCK_PLUGIN_NAME = ""MOCK_PLUGIN_NAME"";
+
+    private static final String MOCK_SELECTOR_ID = ""MOCK_SELECTOR_ID"";
+
+    @InjectMocks
+    private EtcdDataDataChangedListener etcdDataDataChangedListener;
+
+    @Mock
+    private EtcdClient etcdClient;
+
+    /**
+     * test case onAppAuthChanged event.
+     */
+    @Test
+    public void testOnAppAuthChanged() {
+        AppAuthData appAuthData = AppAuthData.builder().appKey(MOCK_APP_KEY).appSecret(MOCK_APP_SECRET).build();
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.DELETE);","[{'comment': '```\r\nverify(etcdClient, times(2)).put(any(String.class), any(String.class));\r\nverify(etcdClient, times(1)).delete(any(String.class));\r\n```', 'commenter': 'dengliming'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdDataDataChangedListenerTest.java,"@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.etcd;
+
+import com.google.common.collect.ImmutableList;
+import lombok.SneakyThrows;
+import org.apache.shenyu.common.dto.AppAuthData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.PluginData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+/**
+ * The testCase for {@link EtcdDataDataChangedListener}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class EtcdDataDataChangedListenerTest {
+
+    private static final String MOCK_APP_KEY = ""MOCK_APP_KEY"";
+
+    private static final String MOCK_APP_SECRET = ""MOCK_APP_SECRET"";
+
+    private static final String MOCK_ID = ""MOCK_ID"";
+
+    private static final String MOCK_PATH = ""MOCK_PATH"";
+
+    private static final String MOCK_APP_NAME = ""MOCK_APP_NAME"";
+
+    private static final String MOCK_NAME = ""MOCK_NAME"";
+
+    private static final String MOCK_CONFIG = ""MOCK_CONFIG"";
+
+    private static final String MOCK_PLUGIN_NAME = ""MOCK_PLUGIN_NAME"";
+
+    private static final String MOCK_SELECTOR_ID = ""MOCK_SELECTOR_ID"";
+
+    @InjectMocks
+    private EtcdDataDataChangedListener etcdDataDataChangedListener;
+
+    @Mock
+    private EtcdClient etcdClient;
+
+    /**
+     * test case onAppAuthChanged event.
+     */
+    @Test
+    public void testOnAppAuthChanged() {
+        AppAuthData appAuthData = AppAuthData.builder().appKey(MOCK_APP_KEY).appSecret(MOCK_APP_SECRET).build();
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onMetaDataChanged event.
+     */
+    @SneakyThrows
+    @Test
+    public void testOnMetaDataChanged() {
+        MetaData metaData = MetaData.builder().id(MOCK_ID).path(MOCK_PATH).appName(MOCK_APP_NAME).build();
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.DELETE);","[{'comment': 'The same as above.', 'commenter': 'dengliming'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdDataDataChangedListenerTest.java,"@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.etcd;
+
+import com.google.common.collect.ImmutableList;
+import lombok.SneakyThrows;
+import org.apache.shenyu.common.dto.AppAuthData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.PluginData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+/**
+ * The testCase for {@link EtcdDataDataChangedListener}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class EtcdDataDataChangedListenerTest {
+
+    private static final String MOCK_APP_KEY = ""MOCK_APP_KEY"";
+
+    private static final String MOCK_APP_SECRET = ""MOCK_APP_SECRET"";
+
+    private static final String MOCK_ID = ""MOCK_ID"";
+
+    private static final String MOCK_PATH = ""MOCK_PATH"";
+
+    private static final String MOCK_APP_NAME = ""MOCK_APP_NAME"";
+
+    private static final String MOCK_NAME = ""MOCK_NAME"";
+
+    private static final String MOCK_CONFIG = ""MOCK_CONFIG"";
+
+    private static final String MOCK_PLUGIN_NAME = ""MOCK_PLUGIN_NAME"";
+
+    private static final String MOCK_SELECTOR_ID = ""MOCK_SELECTOR_ID"";
+
+    @InjectMocks
+    private EtcdDataDataChangedListener etcdDataDataChangedListener;
+
+    @Mock
+    private EtcdClient etcdClient;
+
+    /**
+     * test case onAppAuthChanged event.
+     */
+    @Test
+    public void testOnAppAuthChanged() {
+        AppAuthData appAuthData = AppAuthData.builder().appKey(MOCK_APP_KEY).appSecret(MOCK_APP_SECRET).build();
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onMetaDataChanged event.
+     */
+    @SneakyThrows
+    @Test
+    public void testOnMetaDataChanged() {
+        MetaData metaData = MetaData.builder().id(MOCK_ID).path(MOCK_PATH).appName(MOCK_APP_NAME).build();
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onPluginChanged event.
+     */
+    @Test
+    public void testOnPluginChanged() {
+        PluginData pluginData = PluginData.builder().id(MOCK_ID).name(MOCK_NAME).config(MOCK_CONFIG).build();
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.DELETE);","[{'comment': 'The same as above.', 'commenter': 'dengliming'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdDataDataChangedListenerTest.java,"@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.etcd;
+
+import com.google.common.collect.ImmutableList;
+import lombok.SneakyThrows;
+import org.apache.shenyu.common.dto.AppAuthData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.PluginData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+/**
+ * The testCase for {@link EtcdDataDataChangedListener}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class EtcdDataDataChangedListenerTest {
+
+    private static final String MOCK_APP_KEY = ""MOCK_APP_KEY"";
+
+    private static final String MOCK_APP_SECRET = ""MOCK_APP_SECRET"";
+
+    private static final String MOCK_ID = ""MOCK_ID"";
+
+    private static final String MOCK_PATH = ""MOCK_PATH"";
+
+    private static final String MOCK_APP_NAME = ""MOCK_APP_NAME"";
+
+    private static final String MOCK_NAME = ""MOCK_NAME"";
+
+    private static final String MOCK_CONFIG = ""MOCK_CONFIG"";
+
+    private static final String MOCK_PLUGIN_NAME = ""MOCK_PLUGIN_NAME"";
+
+    private static final String MOCK_SELECTOR_ID = ""MOCK_SELECTOR_ID"";
+
+    @InjectMocks
+    private EtcdDataDataChangedListener etcdDataDataChangedListener;
+
+    @Mock
+    private EtcdClient etcdClient;
+
+    /**
+     * test case onAppAuthChanged event.
+     */
+    @Test
+    public void testOnAppAuthChanged() {
+        AppAuthData appAuthData = AppAuthData.builder().appKey(MOCK_APP_KEY).appSecret(MOCK_APP_SECRET).build();
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onMetaDataChanged event.
+     */
+    @SneakyThrows
+    @Test
+    public void testOnMetaDataChanged() {
+        MetaData metaData = MetaData.builder().id(MOCK_ID).path(MOCK_PATH).appName(MOCK_APP_NAME).build();
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onPluginChanged event.
+     */
+    @Test
+    public void testOnPluginChanged() {
+        PluginData pluginData = PluginData.builder().id(MOCK_ID).name(MOCK_NAME).config(MOCK_CONFIG).build();
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onSelectorChanged event.
+     */
+    @Test
+    public void testOnSelectorChanged() {
+        SelectorData selectorData = SelectorData.builder().id(MOCK_ID).name(MOCK_NAME).pluginName(MOCK_PLUGIN_NAME).build();
+
+        etcdDataDataChangedListener.onSelectorChanged(ImmutableList.of(selectorData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onSelectorChanged(ImmutableList.of(selectorData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onSelectorChanged(ImmutableList.of(selectorData), DataEventTypeEnum.REFRESH);
+        etcdDataDataChangedListener.onSelectorChanged(ImmutableList.of(selectorData), DataEventTypeEnum.DELETE);","[{'comment': 'The same as above.', 'commenter': 'dengliming'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdDataDataChangedListenerTest.java,"@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.etcd;
+
+import com.google.common.collect.ImmutableList;
+import lombok.SneakyThrows;
+import org.apache.shenyu.common.dto.AppAuthData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.PluginData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+/**
+ * The testCase for {@link EtcdDataDataChangedListener}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class EtcdDataDataChangedListenerTest {
+
+    private static final String MOCK_APP_KEY = ""MOCK_APP_KEY"";
+
+    private static final String MOCK_APP_SECRET = ""MOCK_APP_SECRET"";
+
+    private static final String MOCK_ID = ""MOCK_ID"";
+
+    private static final String MOCK_PATH = ""MOCK_PATH"";
+
+    private static final String MOCK_APP_NAME = ""MOCK_APP_NAME"";
+
+    private static final String MOCK_NAME = ""MOCK_NAME"";
+
+    private static final String MOCK_CONFIG = ""MOCK_CONFIG"";
+
+    private static final String MOCK_PLUGIN_NAME = ""MOCK_PLUGIN_NAME"";
+
+    private static final String MOCK_SELECTOR_ID = ""MOCK_SELECTOR_ID"";
+
+    @InjectMocks
+    private EtcdDataDataChangedListener etcdDataDataChangedListener;
+
+    @Mock
+    private EtcdClient etcdClient;
+
+    /**
+     * test case onAppAuthChanged event.
+     */
+    @Test
+    public void testOnAppAuthChanged() {
+        AppAuthData appAuthData = AppAuthData.builder().appKey(MOCK_APP_KEY).appSecret(MOCK_APP_SECRET).build();
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onMetaDataChanged event.
+     */
+    @SneakyThrows
+    @Test
+    public void testOnMetaDataChanged() {
+        MetaData metaData = MetaData.builder().id(MOCK_ID).path(MOCK_PATH).appName(MOCK_APP_NAME).build();
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onMetaDataChanged(ImmutableList.of(metaData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onPluginChanged event.
+     */
+    @Test
+    public void testOnPluginChanged() {
+        PluginData pluginData = PluginData.builder().id(MOCK_ID).name(MOCK_NAME).config(MOCK_CONFIG).build();
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onPluginChanged(ImmutableList.of(pluginData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onSelectorChanged event.
+     */
+    @Test
+    public void testOnSelectorChanged() {
+        SelectorData selectorData = SelectorData.builder().id(MOCK_ID).name(MOCK_NAME).pluginName(MOCK_PLUGIN_NAME).build();
+
+        etcdDataDataChangedListener.onSelectorChanged(ImmutableList.of(selectorData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onSelectorChanged(ImmutableList.of(selectorData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onSelectorChanged(ImmutableList.of(selectorData), DataEventTypeEnum.REFRESH);
+        etcdDataDataChangedListener.onSelectorChanged(ImmutableList.of(selectorData), DataEventTypeEnum.DELETE);
+    }
+
+    /**
+     * test case onRuleChanged event.
+     */
+    @Test
+    public void testOnRuleChanged() {
+        RuleData ruleData = RuleData.builder()
+                .id(MOCK_ID)
+                .name(MOCK_NAME)
+                .pluginName(MOCK_PLUGIN_NAME)
+                .selectorId(MOCK_SELECTOR_ID)
+                .build();
+
+        etcdDataDataChangedListener.onRuleChanged(ImmutableList.of(ruleData), DataEventTypeEnum.CREATE);
+        etcdDataDataChangedListener.onRuleChanged(ImmutableList.of(ruleData), DataEventTypeEnum.UPDATE);
+        etcdDataDataChangedListener.onRuleChanged(ImmutableList.of(ruleData), DataEventTypeEnum.REFRESH);
+        etcdDataDataChangedListener.onRuleChanged(ImmutableList.of(ruleData), DataEventTypeEnum.DELETE);","[{'comment': 'The same as above.', 'commenter': 'dengliming'}]"
1710,shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/nacos/NacosDataChangedListenerTest.java,"@@ -0,0 +1,177 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.listener.nacos;
+
+import com.alibaba.nacos.api.config.ConfigService;
+import com.google.common.collect.ImmutableList;
+import lombok.SneakyThrows;
+import org.apache.shenyu.common.constant.NacosPathConstants;
+import org.apache.shenyu.common.dto.AppAuthData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.PluginData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import static org.mockito.Mockito.when;
+
+/**
+ * The testCase for {@link NacosDataChangedListener}.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class NacosDataChangedListenerTest {
+
+    private static final String MOCK_APP_KEY = ""MOCK_APP_KEY"";
+
+    private static final String MOCK_APP_SECRET = ""MOCK_APP_SECRET"";
+
+    private static final String MOCK_ID = ""MOCK_ID"";
+
+    private static final String MOCK_PATH = ""MOCK_PATH"";
+
+    private static final String MOCK_APP_NAME = ""MOCK_APP_NAME"";
+
+    private static final String MOCK_NAME = ""MOCK_NAME"";
+
+    private static final String MOCK_CONFIG = ""MOCK_CONFIG"";
+
+    private static final String MOCK_PLUGIN_NAME = ""MOCK_PLUGIN_NAME"";
+
+    private static final String MOCK_SELECTOR_ID = ""MOCK_SELECTOR_ID"";
+
+    @Mock
+    private ConfigService configService;
+
+    @InjectMocks
+    private NacosDataChangedListener nacosDataChangedListener;
+
+    @Test
+    @SneakyThrows
+    public void testOnAppAuthChanged() {
+        String config = ""{\""divide\"":{\""appKey\"":\""appKey\"",\""appSecret\"":\""appSecret\"",\""open\"":true}}"";
+        AppAuthData appAuthData = AppAuthData.builder().appKey(MOCK_APP_KEY).appSecret(MOCK_APP_SECRET).build();
+
+        when(configService.getConfig(NacosPathConstants.AUTH_DATA_ID, NacosPathConstants.GROUP,
+                NacosPathConstants.DEFAULT_TIME_OUT)).thenReturn(config);
+        nacosDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.DELETE);
+        nacosDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.REFRESH);
+        nacosDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.MYSELF);
+        nacosDataChangedListener.onAppAuthChanged(ImmutableList.of(appAuthData), DataEventTypeEnum.CREATE);
+","[{'comment': 'verify(configService, times(4)).publishConfig(any(String.class), any(String.class), any(String.class));', 'commenter': 'dengliming'}]"
1726,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integratedtest/http/SignTest.java,"@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.shenyu.integratedtest.http;
+
+import com.google.common.collect.Maps;
+import com.google.gson.reflect.TypeToken;
+import org.apache.shenyu.common.utils.SignUtils;
+import org.apache.shenyu.integratedtest.http.dto.AdminResponse;
+import org.apache.shenyu.integratedtest.http.dto.UserDTO;
+import org.apache.shenyu.integratedtest.http.helper.HttpHelper;
+import org.junit.Test;
+import java.time.LocalDateTime;
+import java.time.ZoneOffset;
+import java.util.Map;
+import java.util.concurrent.Future;
+import static org.junit.Assert.assertEquals;
+
+public class SignTest extends AbstractTest{","[{'comment': 'Can you reformat the code style?\r\n```suggestion\r\npublic class SignTest extends AbstractTest {\r\n```\r\nThe same as other places. Thanks.', 'commenter': 'dengliming'}, {'comment': 'I have formatted the code style, please review it again. Thanks.', 'commenter': 'liyeping'}]"
1726,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integratedtest/http/helper/HttpHelper.java,"@@ -52,4 +55,16 @@
         String respBody = response.body().string();
         return gson.fromJson(respBody, type);
     }
+
+    public <RESP> RESP getFromGateway(String path, Map<String, Object> headers, Type type) throws IOException {
+        Request.Builder requestBuilder = new Request.Builder().url(GATEWAY_END_POINT + path);
+        if(!CollectionUtils.isEmpty(headers)) {","[{'comment': '```suggestion\r\n        if (!CollectionUtils.isEmpty(headers)) {\r\n```', 'commenter': 'dengliming'}]"
1726,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integratedtest/http/helper/HttpHelper.java,"@@ -52,4 +55,16 @@
         String respBody = response.body().string();
         return gson.fromJson(respBody, type);","[{'comment': '`return this.getFromGateway(path, null, type);`', 'commenter': 'dengliming'}]"
1869,shenyu-integrated-test/pom.xml,"@@ -38,45 +38,73 @@
         <maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
         <versions-maven-plugin.version>2.5</versions-maven-plugin.version>
     </properties>
+    <dependencies>
+        <!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp -->
+        <dependency>
+            <groupId>com.squareup.okhttp3</groupId>
+            <artifactId>okhttp</artifactId>
+            <version>4.9.1</version>
+        </dependency>
 
-    <dependencyManagement>
-        <dependencies>
-            <!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp -->
-            <dependency>
-                <groupId>com.squareup.okhttp3</groupId>
-                <artifactId>okhttp</artifactId>
-                <version>4.9.1</version>
-            </dependency>
+        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.18.20</version>
+        </dependency>
+
+        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+            <version>2.8.6</version>
+        </dependency>
+
+        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
+        <dependency>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+            <version>30.1.1-jre</version>
+        </dependency>
 
-            <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
-            <dependency>
-                <groupId>org.projectlombok</groupId>
-                <artifactId>lombok</artifactId>
-                <version>1.18.20</version>
-            </dependency>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-spring-boot-starter-plugin-sign</artifactId>
+            <version>${project.version}</version>
+        </dependency>","[{'comment': 'please move this to sub pom.xml', 'commenter': 'flycash'}]"
1883,shenyu-integrated-test/shenyu-integrated-test-spring-cloud/admin-config/schema.sql,"@@ -0,0 +1,21 @@
+-- noinspection SqlNoDataSourceInspectionForFile","[{'comment': 'Please move this file to /src/test/resources/admin-config/\r\n\r\nAccording lastttttt meeting, we think this would be better', 'commenter': 'flycash'}]"
1891,shenyu-integrated-test/shenyu-integrated-test-spring-cloud/src/test/java/org/apache/shenyu/integratedtest/springcloud/helper/HttpHelper.java,"@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integratedtest.springcloud.helper;
+
+import java.io.IOException;
+import java.lang.reflect.Type;
+import java.util.Map;
+
+import org.springframework.util.CollectionUtils;
+
+import com.google.gson.Gson;
+
+import lombok.extern.slf4j.Slf4j;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
+@Slf4j
+public class HttpHelper {","[{'comment': 'Those common classes, please move them to a new common module.', 'commenter': 'flycash'}, {'comment': 'I want to make sure, Is there anyone else doing the same thing？I remember that', 'commenter': 'lxl910128'}, {'comment': 'No, please do it.', 'commenter': 'flycash'}]"
1976,shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListener.java,"@@ -195,16 +195,16 @@ protected void afterSelectorChanged(final List<SelectorData> changed, final Data
     /**
      * check whether the client needs to update the cache.
      * @param serverCache the admin local cache
-     * @param clientMd5 the client md5 value
+     * @param clientHashValue the client hashValue
      * @param clientModifyTime the client last modify time
      * @return true: the client needs to be updated, false: not need.
      */
-    private boolean checkCacheDelayAndUpdate(final ConfigDataCache serverCache, final String clientMd5, final long clientModifyTime) {
+    private boolean checkCacheDelayAndUpdate(final ConfigDataCache serverCache, final int clientHashValue, final long clientModifyTime) {
         // is the same, doesn't need to be updated
-        if (StringUtils.equals(clientMd5, serverCache.getMd5())) {
+        if (clientHashValue != serverCache.getHashValue()) {","[{'comment': '?', 'commenter': 'dengliming'}, {'comment': 'sorry,  be modifying', 'commenter': 'Romic77'}]"
2115,shenyu-admin/pom.xml,"@@ -246,6 +246,12 @@
             <artifactId>postgresql</artifactId>
             <scope>runtime</scope>
         </dependency>
+
+        <dependency>
+            <groupId>com.oracle.database.jdbc</groupId>
+            <artifactId>ojdbc8</artifactId>
+            <version>21.1.0.0</version>","[{'comment': 'add runtime', 'commenter': 'yu199195'}, {'comment': 'done', 'commenter': 'Romic77'}]"
2115,shenyu-admin/src/main/resources/mappers/shenyu-dict-sqlmap.xml,"@@ -32,7 +32,7 @@
     </resultMap>
 
     <sql id=""Base_Column_List"">
-        id, `type`, dict_code, dict_name, dict_value, `desc`, sort, enabled, date_created, date_updated
+        id, type, dict_code, dict_name, dict_value, `desc`, sort, enabled, date_created, date_updated","[{'comment': 'why modify this？', 'commenter': 'yu199195'}, {'comment': 'Type is not a keyword.so i remove ` \r\n', 'commenter': 'Romic77'}]"
2115,shenyu-admin/src/main/resources/sql-script/oracle/schema.sql,"@@ -0,0 +1,2371 @@
+/* 删除表空间 */","[{'comment': 'add apache license and trsanfrom cn to en', 'commenter': 'yu199195'}, {'comment': 'done', 'commenter': 'Romic77'}]"
2115,shenyu-admin/src/main/resources/sql-script/oracle/schema.sql,"@@ -0,0 +1,2371 @@
+/* 删除表空间 */
+DROP TABLESPACE shenyu_data INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS;
+/* 删除用户 */
+DROP USER shenyu cascade;
+
+
+/*第2步：创建数据表空间  */
+create tablespace shenyu_data
+logging
+datafile 'D:\oracle\shenyu_data.dbf'
+size 50m
+autoextend on
+next 50m maxsize 20480m
+extent management local;
+
+/*第3步：创建用户并指定表空间  */
+create user shenyu identified by shenyu
+default tablespace shenyu_data;
+
+/*第4步：给用户授予权限  */
+grant connect,resource,dba to shenyu;
+
+create table SHENYU.APP_AUTH
+(
+    id           VARCHAR2(128) not null,
+    app_key      VARCHAR2(32) not null,
+    app_secret   VARCHAR2(128) not null,
+    user_id      VARCHAR2(128),
+    phone        VARCHAR2(255),
+    ext_info     VARCHAR2(1024),
+    open         NUMBER(3) not null,
+    enabled      NUMBER(3) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.APP_AUTH.id
+  is 'primary key id';
+comment on column SHENYU.APP_AUTH.app_key
+  is 'application identification key';
+comment on column SHENYU.APP_AUTH.app_secret
+  is 'encryption algorithm secret';
+comment on column SHENYU.APP_AUTH.user_id
+  is 'user id';
+comment on column SHENYU.APP_AUTH.phone
+  is 'phone number when the user applies';
+comment on column SHENYU.APP_AUTH.ext_info
+  is 'extended parameter json';
+comment on column SHENYU.APP_AUTH.open
+  is 'open auth path or not';
+comment on column SHENYU.APP_AUTH.enabled
+  is 'delete or not';
+comment on column SHENYU.APP_AUTH.date_created
+  is 'create time';
+comment on column SHENYU.APP_AUTH.date_updated
+  is 'update time';
+alter table SHENYU.APP_AUTH
+    add constraint PRIMARY primary key (ID)
+    using index
+    tablespace USERS
+    pctfree 10
+    initrans 2
+    maxtrans 255;
+
+
+create table SHENYU.AUTH_PARAM
+(
+    id           VARCHAR2(128) not null,
+    auth_id      VARCHAR2(128),
+    app_name     VARCHAR2(255) not null,
+    app_param    VARCHAR2(255),
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.AUTH_PARAM.id
+  is 'primary key id';
+comment on column SHENYU.AUTH_PARAM.auth_id
+  is 'authentication table id';
+comment on column SHENYU.AUTH_PARAM.app_name
+  is 'business Module';
+comment on column SHENYU.AUTH_PARAM.app_param
+  is 'service module parameters (parameters that need to be passed by the gateway) json type';
+comment on column SHENYU.AUTH_PARAM.date_created
+  is 'create time';
+comment on column SHENYU.AUTH_PARAM.date_updated
+  is 'update time';
+alter table SHENYU.AUTH_PARAM
+    add constraint PRIMARY_16 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.AUTH_PATH
+(
+    id           VARCHAR2(128) not null,
+    auth_id      VARCHAR2(128) not null,
+    app_name     VARCHAR2(255) not null,
+    path         VARCHAR2(255) not null,
+    enabled      NUMBER(3) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.AUTH_PATH.id
+  is 'primary key id';
+comment on column SHENYU.AUTH_PATH.auth_id
+  is 'auth table id';
+comment on column SHENYU.AUTH_PATH.app_name
+  is 'module';
+comment on column SHENYU.AUTH_PATH.path
+  is 'path';
+comment on column SHENYU.AUTH_PATH.enabled
+  is 'whether pass 1 is';
+comment on column SHENYU.AUTH_PATH.date_created
+  is 'create time';
+comment on column SHENYU.AUTH_PATH.date_updated
+  is 'update time';
+alter table SHENYU.AUTH_PATH
+    add constraint PRIMARY_2 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.DASHBOARD_USER
+(
+    id           VARCHAR2(128) not null,
+    user_name    VARCHAR2(64) not null,
+    password     VARCHAR2(128),
+    role         NUMBER(10) not null,
+    enabled      NUMBER(3) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.DASHBOARD_USER.id
+  is 'primary key id';
+comment on column SHENYU.DASHBOARD_USER.user_name
+  is 'user name';
+comment on column SHENYU.DASHBOARD_USER.password
+  is 'user password';
+comment on column SHENYU.DASHBOARD_USER.role
+  is 'role';
+comment on column SHENYU.DASHBOARD_USER.enabled
+  is 'delete or not';
+comment on column SHENYU.DASHBOARD_USER.date_created
+  is 'create time';
+comment on column SHENYU.DASHBOARD_USER.date_updated
+  is 'update time';
+alter table SHENYU.DASHBOARD_USER
+    add constraint PRIMARY_3 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+alter table SHENYU.DASHBOARD_USER
+    add constraint UNIQUE_USER_NAME unique (USER_NAME)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.DATA_PERMISSION
+(
+    id           VARCHAR2(128) not null,
+    user_id      VARCHAR2(128) not null,
+    data_id      VARCHAR2(128) not null,
+    data_type    NUMBER(10) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.DATA_PERMISSION.id
+  is 'primary key id';
+comment on column SHENYU.DATA_PERMISSION.user_id
+  is 'user primary key id';
+comment on column SHENYU.DATA_PERMISSION.data_id
+  is 'data(selector,rule) primary key id';
+comment on column SHENYU.DATA_PERMISSION.data_type
+  is '0 selector type , 1 rule type';
+comment on column SHENYU.DATA_PERMISSION.date_created
+  is 'create time';
+comment on column SHENYU.DATA_PERMISSION.date_updated
+  is 'update time';
+alter table SHENYU.DATA_PERMISSION
+    add constraint PRIMARY_4 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.META_DATA
+(
+    id              VARCHAR2(128) not null,
+    app_name        VARCHAR2(255) not null,
+    path            VARCHAR2(255) not null,
+    path_desc       VARCHAR2(255) not null,
+    rpc_type        VARCHAR2(64) not null,
+    service_name    VARCHAR2(255),
+    method_name     VARCHAR2(255),
+    parameter_types VARCHAR2(255),
+    rpc_ext         VARCHAR2(512),
+    date_created    DATE default SYSDATE not null,
+    date_updated    DATE default SYSDATE not null,
+    enabled         NUMBER(3) default '0' not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.META_DATA.id
+  is 'id';
+comment on column SHENYU.META_DATA.app_name
+  is 'application name';
+comment on column SHENYU.META_DATA.path
+  is 'path, cannot be repeated';
+comment on column SHENYU.META_DATA.path_desc
+  is 'path description';
+comment on column SHENYU.META_DATA.rpc_type
+  is 'rpc type';
+comment on column SHENYU.META_DATA.service_name
+  is 'service name';
+comment on column SHENYU.META_DATA.method_name
+  is 'method name';
+comment on column SHENYU.META_DATA.parameter_types
+  is 'parameter types are provided with multiple parameter types separated by commas';
+comment on column SHENYU.META_DATA.rpc_ext
+  is 'rpc extended information, json format';
+comment on column SHENYU.META_DATA.date_created
+  is 'create time';
+comment on column SHENYU.META_DATA.date_updated
+  is 'update time';
+comment on column SHENYU.META_DATA.enabled
+  is 'enabled state';
+alter table SHENYU.META_DATA
+    add constraint PRIMARY_5 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.PERMISSION
+(
+    id           VARCHAR2(128) not null,
+    object_id    VARCHAR2(128) not null,
+    resource_id  VARCHAR2(128) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.PERMISSION.id
+  is 'primary key id';
+comment on column SHENYU.PERMISSION.object_id
+  is 'user primary key id or role primary key id';
+comment on column SHENYU.PERMISSION.resource_id
+  is 'resource primary key id';
+comment on column SHENYU.PERMISSION.date_created
+  is 'create time';
+comment on column SHENYU.PERMISSION.date_updated
+  is 'update time';
+alter table SHENYU.PERMISSION
+    add constraint PRIMARY_6 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+create table SHENYU.PLUGIN
+(
+    id           VARCHAR2(128) not null,
+    name         VARCHAR2(62) not null,
+    config       CLOB,
+    role         VARCHAR2(64) not null,
+    sort         NUMBER(10),
+    enabled      NUMBER(3) default '0' not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.PLUGIN.id
+  is 'primary key id';
+comment on column SHENYU.PLUGIN.name
+  is 'plugin name';
+comment on column SHENYU.PLUGIN.config
+  is 'plugin configuration';
+comment on column SHENYU.PLUGIN.role
+  is 'plug-in role';
+comment on column SHENYU.PLUGIN.sort
+  is 'sort';
+comment on column SHENYU.PLUGIN.enabled
+  is 'whether to open (0, not open, 1 open)';
+comment on column SHENYU.PLUGIN.date_created
+  is 'create time';
+comment on column SHENYU.PLUGIN.date_updated
+  is 'update time';
+alter table SHENYU.PLUGIN
+    add constraint PRIMARY_7 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.PLUGIN_HANDLE
+(
+    id           VARCHAR2(128) not null,
+    plugin_id    VARCHAR2(128) not null,
+    field        VARCHAR2(100) not null,
+    label        VARCHAR2(100),
+    data_type    NUMBER(5) default '1' not null,
+    type         NUMBER(5),
+    sort         NUMBER(10),
+    ext_obj      VARCHAR2(1024),
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.PLUGIN_HANDLE.plugin_id
+  is 'plugin id';
+comment on column SHENYU.PLUGIN_HANDLE.field
+  is 'field';
+comment on column SHENYU.PLUGIN_HANDLE.label
+  is 'label';
+comment on column SHENYU.PLUGIN_HANDLE.data_type
+  is 'data type 1 number 2 string';
+comment on column SHENYU.PLUGIN_HANDLE.type
+  is 'type, 1 means selector, 2 means rule, 3 means plugin';
+comment on column SHENYU.PLUGIN_HANDLE.sort
+  is 'sort';
+comment on column SHENYU.PLUGIN_HANDLE.ext_obj
+  is 'extra configuration (json format data)';
+comment on column SHENYU.PLUGIN_HANDLE.date_created
+  is 'create time';
+comment on column SHENYU.PLUGIN_HANDLE.date_updated
+  is 'update time';
+alter table SHENYU.PLUGIN_HANDLE
+    add constraint PRIMARY_8 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+alter table SHENYU.PLUGIN_HANDLE
+    add constraint PLUGIN_ID_FIELD_TYPE unique (PLUGIN_ID, FIELD, TYPE)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.""RESOURCE""
+(
+    id            VARCHAR2(128) not null,
+    parent_id     VARCHAR2(128),
+    title         VARCHAR2(128),
+    name          VARCHAR2(32),
+    url           VARCHAR2(32),
+    component     VARCHAR2(32),
+    resource_type NUMBER(10) not null,
+    sort          NUMBER(10) not null,
+    icon          VARCHAR2(32),
+    is_leaf       NUMBER(3) not null,
+    is_route      NUMBER(10) not null,
+    perms         VARCHAR2(64),
+    status        NUMBER(10) not null,
+    date_created  DATE default SYSDATE not null,
+    date_updated  DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.""RESOURCE"".id
+  is 'primary key id';
+comment on column SHENYU.""RESOURCE"".parent_id
+  is 'resource parent primary key id';
+comment on column SHENYU.""RESOURCE"".title
+  is 'title';
+comment on column SHENYU.""RESOURCE"".name
+  is 'route name';
+comment on column SHENYU.""RESOURCE"".url
+  is 'route url';
+comment on column SHENYU.""RESOURCE"".component
+  is 'component';
+comment on column SHENYU.""RESOURCE"".resource_type
+  is 'resource type eg 0:main menu 1:child menu 2:function button';
+comment on column SHENYU.""RESOURCE"".sort
+  is 'sort';
+comment on column SHENYU.""RESOURCE"".icon
+  is 'icon';
+comment on column SHENYU.""RESOURCE"".is_leaf
+  is 'leaf node 0:no 1:yes';
+comment on column SHENYU.""RESOURCE"".is_route
+  is 'route 1:yes 0:no';
+comment on column SHENYU.""RESOURCE"".perms
+  is 'button permission description sys:user:add(add)/sys:user:edit(edit)';
+comment on column SHENYU.""RESOURCE"".status
+  is 'status 1:enable 0:disable';
+comment on column SHENYU.""RESOURCE"".date_created
+  is 'create time';
+comment on column SHENYU.""RESOURCE"".date_updated
+  is 'update time';
+alter table SHENYU.""RESOURCE""
+    add constraint PRIMARY_9 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.ROLE
+(
+    id           VARCHAR2(128) not null,
+    role_name    VARCHAR2(32) not null,
+    description  VARCHAR2(255),
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.ROLE.id
+  is 'primary key id';
+comment on column SHENYU.ROLE.role_name
+  is 'role name';
+comment on column SHENYU.ROLE.description
+  is 'role describe';
+comment on column SHENYU.ROLE.date_created
+  is 'create time';
+comment on column SHENYU.ROLE.date_updated
+  is 'update time';
+alter table SHENYU.ROLE
+    add constraint PRIMARY_10 primary key (ID, ROLE_NAME)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.RULE
+(
+    id           VARCHAR2(128) not null,
+    selector_id  VARCHAR2(128) not null,
+    match_mode   NUMBER(10) not null,
+    name         VARCHAR2(128) not null,
+    enabled      NUMBER(3) not null,
+    loged        NUMBER(3) not null,
+    sort         NUMBER(10) not null,
+    handle       VARCHAR2(1024),
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.RULE.id
+  is 'primary key id';
+comment on column SHENYU.RULE.selector_id
+  is 'selector id';
+comment on column SHENYU.RULE.match_mode
+  is 'matching mode (0 and 1 or)';
+comment on column SHENYU.RULE.name
+  is 'rule name';
+comment on column SHENYU.RULE.enabled
+  is 'whether to open';
+comment on column SHENYU.RULE.loged
+  is 'whether to log or not';
+comment on column SHENYU.RULE.sort
+  is 'sort';
+comment on column SHENYU.RULE.handle
+  is 'processing logic (here for different plug-ins, there will be different fields to identify different processes, all data in JSON format is stored)';
+comment on column SHENYU.RULE.date_created
+  is 'create time';
+comment on column SHENYU.RULE.date_updated
+  is 'update time';
+alter table SHENYU.RULE
+    add constraint PRIMARY_11 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+alter table SHENYU.RULE
+    add constraint UNIQUE_NAME unique (NAME)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.RULE_CONDITION
+(
+    id           VARCHAR2(128) not null,
+    rule_id      VARCHAR2(128) not null,
+    param_type   VARCHAR2(64) not null,
+    operator     VARCHAR2(64) not null,
+    param_name   VARCHAR2(64) not null,
+    param_value  VARCHAR2(64) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.RULE_CONDITION.id
+  is 'primary key id';
+comment on column SHENYU.RULE_CONDITION.rule_id
+  is 'rule id';
+comment on column SHENYU.RULE_CONDITION.param_type
+  is 'parameter type (post query uri, etc.)';
+comment on column SHENYU.RULE_CONDITION.operator
+  is 'matching character (=> <like match)';
+comment on column SHENYU.RULE_CONDITION.param_name
+  is 'parameter name';
+comment on column SHENYU.RULE_CONDITION.param_value
+  is 'parameter value';
+comment on column SHENYU.RULE_CONDITION.date_created
+  is 'create time';
+comment on column SHENYU.RULE_CONDITION.date_updated
+  is 'update time';
+alter table SHENYU.RULE_CONDITION
+    add constraint PRIMARY_12 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.SELECTOR
+(
+    id           VARCHAR2(128) not null,
+    plugin_id    VARCHAR2(128) not null,
+    name         VARCHAR2(64) not null,
+    match_mode   NUMBER(10) not null,
+    type         NUMBER(10) not null,
+    sort         NUMBER(10) not null,
+    handle       VARCHAR2(1024),
+    enabled      NUMBER(3) not null,
+    loged        NUMBER(3) not null,
+    continued    NUMBER(3) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.SELECTOR.id
+  is 'primary key id varchar';
+comment on column SHENYU.SELECTOR.plugin_id
+  is 'plugin id';
+comment on column SHENYU.SELECTOR.name
+  is 'selector name';
+comment on column SHENYU.SELECTOR.match_mode
+  is 'matching mode (0 and 1 or)';
+comment on column SHENYU.SELECTOR.type
+  is 'type (0, full flow, 1 custom flow)';
+comment on column SHENYU.SELECTOR.sort
+  is 'sort';
+comment on column SHENYU.SELECTOR.handle
+  is 'processing logic (here for different plug-ins, there will be different fields to identify different processes, all data in JSON format is stored)';
+comment on column SHENYU.SELECTOR.enabled
+  is 'whether to open';
+comment on column SHENYU.SELECTOR.loged
+  is 'whether to print the log';
+comment on column SHENYU.SELECTOR.continued
+  is 'whether to continue execution';
+comment on column SHENYU.SELECTOR.date_created
+  is 'create time';
+comment on column SHENYU.SELECTOR.date_updated
+  is 'update time';
+alter table SHENYU.SELECTOR
+    add constraint PRIMARY_13 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+alter table SHENYU.SELECTOR
+    add constraint UNIQUE_NAME_16 unique (NAME)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.SELECTOR_CONDITION
+(
+    id           VARCHAR2(128) not null,
+    selector_id  VARCHAR2(128) not null,
+    param_type   VARCHAR2(64) not null,
+    operator     VARCHAR2(64) not null,
+    param_name   VARCHAR2(64) not null,
+    param_value  VARCHAR2(64) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.SELECTOR_CONDITION.id
+  is 'primary key id';
+comment on column SHENYU.SELECTOR_CONDITION.selector_id
+  is 'selector id';
+comment on column SHENYU.SELECTOR_CONDITION.param_type
+  is 'parameter type (to query uri, etc.)';
+comment on column SHENYU.SELECTOR_CONDITION.operator
+  is 'matching character (=> <like matching)';
+comment on column SHENYU.SELECTOR_CONDITION.param_name
+  is 'parameter name';
+comment on column SHENYU.SELECTOR_CONDITION.param_value
+  is 'parameter value';
+comment on column SHENYU.SELECTOR_CONDITION.date_created
+  is 'create time';
+comment on column SHENYU.SELECTOR_CONDITION.date_updated
+  is 'update time';
+alter table SHENYU.SELECTOR_CONDITION
+    add constraint PRIMARY_14 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.SHENYU_DICT
+(
+    id           VARCHAR2(128) not null,
+    type         VARCHAR2(100) not null,
+    dict_code    VARCHAR2(100) not null,
+    dict_name    VARCHAR2(100) not null,
+    dict_value   VARCHAR2(100),
+    ""desc""        VARCHAR2(255),
+    sort         NUMBER(10) not null,
+    enabled      NUMBER(3),
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.SHENYU_DICT.id
+  is 'primary key id';
+comment on column SHENYU.SHENYU_DICT.type
+  is 'type';
+comment on column SHENYU.SHENYU_DICT.dict_code
+  is 'dictionary encoding';
+comment on column SHENYU.SHENYU_DICT.dict_name
+  is 'dictionary name';
+comment on column SHENYU.SHENYU_DICT.dict_value
+  is 'dictionary value';
+comment on column SHENYU.SHENYU_DICT.""desc""
+  is 'dictionary description or remarks';
+comment on column SHENYU.SHENYU_DICT.sort
+  is 'sort';
+comment on column SHENYU.SHENYU_DICT.enabled
+  is 'whether it is enabled';
+comment on column SHENYU.SHENYU_DICT.date_created
+  is 'create time';
+comment on column SHENYU.SHENYU_DICT.date_updated
+  is 'update time';
+alter table SHENYU.SHENYU_DICT
+    add constraint PRIMARY_15 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+create table SHENYU.USER_ROLE
+(
+    id           VARCHAR2(128) not null,
+    user_id      VARCHAR2(128) not null,
+    role_id      VARCHAR2(128) not null,
+    date_created DATE default SYSDATE not null,
+    date_updated DATE default SYSDATE not null
+)
+    tablespace USERS
+  pctfree 10
+  initrans 1
+  maxtrans 255;
+comment on column SHENYU.USER_ROLE.id
+  is 'primary key id';
+comment on column SHENYU.USER_ROLE.user_id
+  is 'user primary key';
+comment on column SHENYU.USER_ROLE.role_id
+  is 'role primary key';
+comment on column SHENYU.USER_ROLE.date_created
+  is 'create time';
+comment on column SHENYU.USER_ROLE.date_updated
+  is 'update time';
+alter table SHENYU.USER_ROLE
+    add constraint PRIMARY_1 primary key (ID)
+    using index
+  tablespace USERS
+  pctfree 10
+  initrans 2
+  maxtrans 255;
+
+
+insert into shenyu.DASHBOARD_USER (id, user_name, password, role, enabled, date_created, date_updated)","[{'comment': 'used insert ingro into ?', 'commenter': 'yu199195'}, {'comment': 'okok, I create producer about insert ingro..\r\n', 'commenter': 'Romic77'}]"
2115,shenyu-admin/pom.xml,"@@ -246,6 +246,13 @@
             <artifactId>postgresql</artifactId>
             <scope>runtime</scope>
         </dependency>
+
+        <dependency>
+            <groupId>com.oracle.database.jdbc</groupId>
+            <artifactId>ojdbc8</artifactId>
+            <version>21.1.0.0</version>
+            <scope>runtime</scope>","[{'comment': 'remove version', 'commenter': 'yu199195'}]"
2115,shenyu-admin/src/main/resources/sql-script/oracle/schema.sql,"@@ -0,0 +1,2261 @@
+-- Licensed to the Apache Software Foundation (ASF) under one
+-- or more contributor license agreements.  See the NOTICE file
+-- distributed with this work for additional information
+-- regarding copyright ownership.  The ASF licenses this file
+-- to you under the Apache License, Version 2.0 (the
+-- ""License""); you may not use this file except in compliance
+-- with the License.  You may obtain a copy of the License at
+--
+--     http://www.apache.org/licenses/LICENSE-2.0
+--
+-- Unless required by applicable law or agreed to in writing, software
+-- distributed under the License is distributed on an ""AS IS"" BASIS,
+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+-- See the License for the specific language governing permissions and
+-- limitations under the License.
+
+
+/* DROP TABLESPACE */
+DROP TABLESPACE shenyu_data INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS;
+/* DROP USER  */
+DROP USER shenyu cascade;
+
+
+/* create tablespace   */
+create tablespace shenyu_data
+logging
+datafile 'D:\oracle\shenyu_data.dbf'","[{'comment': 'what is？\r\n', 'commenter': 'yu199195'}, {'comment': 'removed', 'commenter': 'Romic77'}]"
2146,shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTaskTest.java,"@@ -75,15 +75,15 @@ public void testRun() {
         healthCheckTask.schedule();
         // Wait for the upstream-health-check thread to start.
         Awaitility.await().pollDelay(3, TimeUnit.SECONDS).untilAsserted(() -> assertFalse(healthCheckTask.getCheckStarted().get()));
-        assertTrue(healthCheckTask.getHealthyUpstream().containsKey(selectorId1));
+        assertTrue(healthCheckTask.getUnhealthyUpstream().get(selectorId1).size() > 0);
         // Let it coverage line 151~163
         when(upstream.isHealthy()).thenReturn(false).thenReturn(true);","[{'comment': '`when(upstream.isHealthy()).thenReturn(false).thenReturn(true);` what does this mean?', 'commenter': 'dengliming'}, {'comment': 'maybe is right', 'commenter': 'yu199195'}, {'comment': 'I think the original author wants to change to return true when returning false。', 'commenter': 'kevinBobo'}, {'comment': '> I think the original author wants to change to return true when returning false。\r\n\r\nWe can just keep the last return.', 'commenter': 'dengliming'}]"
2166,shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuPluginLoader.java,"@@ -30,11 +30,7 @@
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.List;
-import java.util.Objects;
+import java.util.*;","[{'comment': ""plz don't use * in imports"", 'commenter': 'tydhot'}, {'comment': 'ok', 'commenter': 'tonytanCoder'}]"
2171,shenyu-examples/shenyu-examples-dubbo/shenyu-examples-cloud-alibaba-dubbo-service-annotation/pom.xml,"@@ -0,0 +1,103 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>shenyu-examples-dubbo</artifactId>
+        <groupId>org.apache.shenyu</groupId>
+        <version>2.1.0</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>shenyu-examples-cloud-alibaba-dubbo-service-annotation</artifactId>
+
+    <properties>
+        <spring-cloud-alibaba.version>2.2.3.RELEASE</spring-cloud-alibaba.version>
+    </properties>
+
+    <dependencyManagement>
+        <dependencies>
+            <dependency>
+                <groupId>com.alibaba.cloud</groupId>
+                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
+                <version>${spring-cloud-alibaba.version}</version>
+                <type>pom</type>
+                <scope>import</scope>
+            </dependency>
+        </dependencies>
+    </dependencyManagement>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-spring-boot-starter-client-apache-dubbo</artifactId>
+            <version>${shenyu.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-examples-dubbo-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
+            <version>2.2.0.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>com.alibaba.cloud</groupId>
+            <artifactId>spring-cloud-starter-dubbo</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.alibaba.cloud</groupId>
+            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
+        </dependency>
+
+        <!--spring boot的核心启动器-->","[{'comment': 'remove chinese comment', 'commenter': 'tydhot'}, {'comment': 'it is copy from apache dubbo example, I will modify them.', 'commenter': 'qicz'}, {'comment': 'plz remove here too', 'commenter': 'tydhot'}]"
2171,shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/pom.xml,"@@ -15,6 +15,7 @@
   ~ See the License for the specific language governing permissions and
   ~ limitations under the License.
   -->
+","[{'comment': 'why blank here', 'commenter': 'tydhot'}, {'comment': 'maybe all `pom.xml` has this blank.  ', 'commenter': 'qicz'}, {'comment': 'sry I missed it', 'commenter': 'tydhot'}]"
2171,shenyu-bootstrap/pom.xml,"@@ -307,6 +308,7 @@
             <artifactId>curator-recipes</artifactId>
             <version>${curator.version}</version>
         </dependency>
+","[{'comment': 'remove blank line', 'commenter': 'tydhot'}]"
2171,shenyu-bootstrap/pom.xml,"@@ -276,6 +276,7 @@
         <!-- shenyu  apache dubbo plugin end-->
 
         <!--shenyu alibaba dubbo plugin start-->
+","[{'comment': 'remove blank line', 'commenter': 'tydhot'}]"
2171,shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-cloud-alibaba-dubbo/pom.xml,"@@ -0,0 +1,72 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>shenyu-spring-boot-starter-plugin-dubbo</artifactId>
+        <groupId>org.apache.shenyu</groupId>
+        <version>2.4.1-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>shenyu-spring-boot-starter-plugin-cloud-alibaba-dubbo</artifactId>
+
+    <properties>
+        <spring-cloud-alibaba.version>2.2.3.RELEASE</spring-cloud-alibaba.version>
+        <netflix-ribbon.version>2.2.9.RELEASE</netflix-ribbon.version>
+    </properties>
+
+    <dependencyManagement>
+        <dependencies>
+            <dependency>
+                <groupId>com.alibaba.cloud</groupId>
+                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
+                <version>${spring-cloud-alibaba.version}</version>
+                <type>pom</type>
+                <scope>import</scope>
+            </dependency>
+        </dependencies>
+    </dependencyManagement>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-spring-boot-starter-plugin-apache-dubbo</artifactId>","[{'comment': 'What has been done in this file? The original Apache Dubbo Plugin is introduced, and the others are `provided`. What is the meaning of this file?', 'commenter': 'tydhot'}, {'comment': 'import the `SpringCloudAlibaba` dependencies and use the `DubboCloud` and `DubboRegistry`. The Services metadata can sync to `metadat-center` (`nacos`) by DubboCloud. the ""Dubbo URL""(""dubbo://xxx..."") data will be less data.\r\n\r\n![image](https://user-images.githubusercontent.com/2174082/135437528-f81fd2ee-3464-4563-89f1-61062af6b76d.png)\r\n', 'commenter': 'qicz'}, {'comment': ""Do you use these dependencies in this module? I didn't see it."", 'commenter': 'tydhot'}]"
2222,shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/alibaba/dubbo/AlibabaDubboPluginConfiguration.java,"@@ -1,74 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more","[{'comment': 'why remove this？', 'commenter': 'yu199195'}]"
2245,shenyu-dist/shenyu-agent-dist/pom.xml,"@@ -0,0 +1,71 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>","[{'comment': 'remove this', 'commenter': 'yu199195'}]"
2245,shenyu-dist/pom.xml,"@@ -30,5 +30,6 @@
         <module>shenyu-src-dist</module>
         <module>shenyu-admin-dist</module>
         <module>shenyu-bootstrap-dist</module>
+        <module>shenyu-agent-dist</module>","[{'comment': 'remove this', 'commenter': 'yu199195'}]"
2245,shenyu-dist/shenyu-agent-dist/pom.xml,"@@ -0,0 +1,71 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-dist</artifactId>
+        <version>2.4.1-SNAPSHOT</version>","[{'comment': '2.4.2', 'commenter': 'yu199195'}]"
2297,shenyu-client/shenyu-client-common/src/main/java/org/apache/shenyu/client/common/exception/ShenyuClientException.java,"@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.client.common.exception;
+
+/**
+ * ShenyuClientException.
+ */
+public class ShenyuClientException extends IllegalArgumentException {","[{'comment': 'why it extend IllegalArgumentException?', 'commenter': 'tydhot'}, {'comment': 'I see the client just validating the arguments.', 'commenter': 'qicz'}, {'comment': 'so why not change the name to `ShenyuIllegalException` ? And I think you can move them in `shenyu-client-core`, no need to create a new module like client-common.', 'commenter': 'tydhot'}, {'comment': 'did it. use `ShenyuClientIllegalArgumentException`.', 'commenter': 'qicz'}]"
2297,shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springcloud/src/main/java/org/apache/shenyu/springboot/starter/client/springcloud/ShenyuSpringCloudClientConfiguration.java,"@@ -38,16 +38,16 @@
     /**
      * Spring cloud client bean post processor spring cloud client bean post processor.
      *
-     * @param env the env
-     * @param shenyuClientRegisterRepository the shenyu client register repository
      * @param clientConfig the client config
+     * @param shenyuClientRegisterRepository the shenyu client register repository
+     * @param env the env
      * @return the spring cloud client bean post processor
      */
     @Bean
-    public SpringCloudClientBeanPostProcessor springCloudClientBeanPostProcessor(final Environment env,
+    public SpringCloudClientBeanPostProcessor springCloudClientBeanPostProcessor(final ShenyuClientConfig clientConfig,","[{'comment': 'to be honset, i really think the change like this is meaningless', 'commenter': 'tydhot'}, {'comment': 'just same like another clients.', 'commenter': 'qicz'}]"
2388,shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/util/PrxInfoUtil.java,"@@ -141,9 +141,11 @@ public static String getObjectName(final String upstreamUrl, final String servic
     public static Object[] getParamArray(final Class<?>[] paramTypes, final String[] paramNames, final String body) {
         Map<String, Object> bodyMap = GsonUtils.getInstance().convertToMap(body);
         Object[] param = new Object[paramNames.length];
+        String paramName;
+        Class<?> paramType;
         for (int i = 0; i < paramNames.length; i++) {
-            String paramName = paramNames[i];
-            Class<?> paramType = paramTypes[i];
+            paramName = paramNames[i];
+            paramType = paramTypes[i];","[{'comment': 'I dont think change like this is a good choise. ', 'commenter': 'tydhot'}, {'comment': 'I will modify and resubmit.', 'commenter': 'haibo-duan'}]"
2459,shenyu-plugin/shenyu-plugin-rpc-context/pom.xml,"@@ -0,0 +1,49 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>shenyu-plugin</artifactId>
+        <groupId>org.apache.shenyu</groupId>
+        <version>2.4.2-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>shenyu-plugin-rpc-context</artifactId>","[{'comment': ""The name rpccontext is the same as Dubbo's rpccontext, which is easy to be misunderstood"", 'commenter': 'tydhot'}, {'comment': ""Yes, it was originally to pass Dubbo's rpccontext, so I named the plug with rpccontext. Or you can suggest a better name to explain the meaning of the plug-in."", 'commenter': 'KevinClair'}, {'comment': 'Why not make a general context? The client plugin obtains and injects its own implementation from this context, and the server plugin obtains and writes the implementation of this context from its own request.After all, besides Dubbo, grpc also has its own context to pass\r\n', 'commenter': 'tydhot'}, {'comment': 'Sounds great, how about rename to `shenyu-plugin-general-context`?Or maybe just `shenyu-plugin-context`?', 'commenter': 'KevinClair'}]"
2572,shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/config/ChannelConfig.java,"@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.springboot.starter.netty.config;
+
+import io.netty.buffer.ByteBufAllocator;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.netty.buffer.UnpooledByteBufAllocator;
+
+/**
+ * Netty channel config.
+ */
+public class ChannelConfig {","[{'comment': 'move to NettyTcpProperties class as inner class.', 'commenter': 'qicz'}]"
2572,shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/config/ServerSocketChannelConfig.java,"@@ -0,0 +1,87 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.springboot.starter.netty.config;
+
+/**
+ * Netty server socket channel config.
+ */
+public class ServerSocketChannelConfig extends ChannelConfig {","[{'comment': 'move to NettyTcpProperties class as inner class.', 'commenter': 'qicz'}]"
2572,shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/config/SocketChannelConfig.java,"@@ -0,0 +1,183 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.springboot.starter.netty.config;
+
+/**
+ * Netty socket channel config.
+ */
+public class SocketChannelConfig extends ChannelConfig {","[{'comment': 'move  to NettyTcpProperties class as inner class.\r\n\r\n', 'commenter': 'qicz'}, {'comment': ""inner class may be 'static'"", 'commenter': 'qicz'}]"
2623,shenyu-web/src/test/java/org/apache/shenyu/web/loader/ShenyuPluginLoaderTest.java,"@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.web.loader;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.List;
+import java.util.jar.JarOutputStream;
+import java.util.zip.ZipEntry;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.Mockito.doReturn;
+import static org.mockito.Mockito.spy;
+
+/**
+ * Test for  ShenyuPluginLoader.
+ */
+","[{'comment': 'Pls remove blank line here.', 'commenter': 'JooKS-me'}]"
2623,shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuPluginLoader.java,"@@ -184,7 +184,7 @@ public void close() {
     }
     
     @SuppressWarnings(""unchecked"")
-    private <T> T getOrCreateInstance(final String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {
+    protected <T> T getOrCreateInstance(final String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {","[{'comment': 'Why we use protected here? OvO', 'commenter': 'JooKS-me'}, {'comment': ""1. mockito is not support stubbed private method in his official document. it suggest to protected. \r\n2. the latest released of powermock is one year ago. i don't wanna use it."", 'commenter': 'plutokaito'}, {'comment': '1. It is not advisable to modify the code just for unit testing.\r\n2. In Object Oriented, the private method is not recommended to be mocked, can we use other means instead of skipping this method?', 'commenter': 'JooKS-me'}]"
2623,shenyu-web/src/test/java/org/apache/shenyu/web/logo/ShenyuLogoTest.java,"@@ -17,37 +17,45 @@
 
 package org.apache.shenyu.web.logo;
 
-import org.apache.shenyu.common.constant.Constants;
-import org.apache.shenyu.common.utils.VersionUtils;
 import org.junit.Test;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;
+import org.springframework.core.env.ConfigurableEnvironment;
+import org.springframework.mock.env.MockEnvironment;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+import static org.junit.Assert.assertTrue;
+","[{'comment': 'Pls remove blank line here.', 'commenter': 'JooKS-me'}]"
2683,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/HttpTest.java,"@@ -0,0 +1,144 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http;
+
+import okhttp3.Response;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.integratedtest.common.AbstractTest;
+import org.apache.shenyu.integratedtest.common.dto.UserDTO;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.apache.shenyu.integratedtest.common.result.ResultBean;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class HttpTest extends AbstractTest {","[{'comment': 'Hi, I think changing the class name to `HttpTestControllerTest` may be better.\r\n\r\nAnd please add `final` to the class, because we may not extend this test class.', 'commenter': 'JooKS-me'}, {'comment': 'ok.', 'commenter': 'totalo'}]"
2689,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/OrderControllerTest.java,"@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http;
+
+import org.apache.shenyu.integratedtest.common.AbstractTest;
+import org.apache.shenyu.integratedtest.common.dto.OAuth2DTO;
+import org.apache.shenyu.integratedtest.common.dto.OrderDTO;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+
+public final class OrderControllerTest extends AbstractTest {
+    
+    @Test
+    public void testSave() throws IOException {
+        OrderDTO orderDTO = new OrderDTO(""123"", ""Tom"");
+        orderDTO = HttpHelper.INSTANCE.postGateway(""/http/order/save"", orderDTO, OrderDTO.class);
+        assertEquals(""hello world save order"", orderDTO.getName());
+    }
+    
+    @Test
+    public void testFindById() throws IOException {
+        OrderDTO orderDTO = HttpHelper.INSTANCE.getFromGateway(""/http/order/findById?id=1"", OrderDTO.class);
+        assertEquals(""1"", orderDTO.getId());
+        assertEquals(""hello world findById"", orderDTO.getName());
+    }
+    
+    @Test
+    public void testGetPathVariable() throws IOException {
+        OrderDTO orderDTO = HttpHelper.INSTANCE.getFromGateway(""/http/order/path/1/order-test"", OrderDTO.class);
+        assertEquals(""1"", orderDTO.getId());
+        assertEquals(""hello world restful: order-test"", orderDTO.getName());
+    }
+    
+    @Test
+    public void testRestFul() throws IOException {
+        OrderDTO orderDTO = HttpHelper.INSTANCE.getFromGateway(""/http/order/path/1/name"", OrderDTO.class);
+        assertEquals(""1"", orderDTO.getId());
+        assertEquals(""hello world restful inline 1"", orderDTO.getName());
+    }
+    
+    @Test
+    public void testRestFulOauth2NoAuthorization() throws IOException {
+        Map<String, Object> headers = new HashMap<>(2, 1);","[{'comment': 'Hi, pls remove this line, the `header` is not used, right?', 'commenter': 'JooKS-me'}, {'comment': 'Yes, removed.', 'commenter': 'totalo'}]"
2701,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/RequestControllerTest.java,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http;
+
+import okhttp3.Response;
+import org.apache.shenyu.integratedtest.common.AbstractTest;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+
+import static org.junit.Assert.assertEquals;
+
+public class RequestControllerTest extends AbstractTest {
+
+    @Test
+    public void testRequestHeader() throws IOException {
+        Map<String, Object> headers = new HashMap(2, 1);","[{'comment': 'Please use `HashMap<>(2, 1)` here', 'commenter': 'JooKS-me'}]"
2701,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/RequestControllerTest.java,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http;
+
+import okhttp3.Response;
+import org.apache.shenyu.integratedtest.common.AbstractTest;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+
+import static org.junit.Assert.assertEquals;
+
+public class RequestControllerTest extends AbstractTest {
+
+    @Test
+    public void testRequestHeader() throws IOException {
+        Map<String, Object> headers = new HashMap(2, 1);
+        headers.put(""header_key1"", ""header_key1"");
+        Response response = HttpHelper.INSTANCE.getResponseFromGateway(""/http/request/header"", headers);
+        String body = Objects.requireNonNull(response.body()).string();
+        assertEquals(true, body.contains(""response success:""));","[{'comment': 'Pls use `assertTrue` to replace `assertEquals(true, xxx)`.\r\n', 'commenter': 'JooKS-me'}]"
2701,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/RequestControllerTest.java,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http;
+
+import okhttp3.Response;
+import org.apache.shenyu.integratedtest.common.AbstractTest;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+
+import static org.junit.Assert.assertEquals;
+
+public class RequestControllerTest extends AbstractTest {","[{'comment': 'Pls use `final` ahead class, because we usually don’t extends the test class.', 'commenter': 'JooKS-me'}]"
2701,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/ShenyuClientPathControllerTest.java,"@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http;
+
+import org.apache.shenyu.integratedtest.common.AbstractTest;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.Test;
+
+import java.io.IOException;
+
+import static org.junit.Assert.assertEquals;
+
+public class ShenyuClientPathControllerTest extends AbstractTest {","[{'comment': 'Pls add `final` ahead class~', 'commenter': 'JooKS-me'}, {'comment': 'wait a minutes', 'commenter': 'gaochuang98'}]"
2738,shenyu-plugin/shenyu-plugin-uri/src/main/java/org/apache/shenyu/plugin/uri/URIPlugin.java,"@@ -42,27 +42,18 @@
         if (StringUtils.isBlank(path)) {
             return chain.execute(exchange);
         }
-        String rewriteURI = (String) exchange.getAttributes().get(Constants.REWRITE_URI);
+        String rewriteUri = (String) exchange.getAttributes().get(Constants.REWRITE_URI);
         URI uri = exchange.getRequest().getURI();
-        if (StringUtils.isNoneBlank(rewriteURI)) {
-            path = path + rewriteURI;
+        if (StringUtils.isNoneBlank(rewriteUri)) {
+            path = path + rewriteUri;
         } else {
             String realUrl = shenyuContext.getRealUrl();
             if (StringUtils.isNoneBlank(realUrl)) {
                 path = path + realUrl;
             }
         }
-        URI realURI;
-        if (StringUtils.isNotEmpty(uri.getRawQuery()) && uri.getRawQuery().contains(""%"")) {
-            path = String.join(""?"", path, uri.getRawQuery());
-            realURI = UriComponentsBuilder.fromHttpUrl(path).build(true).toUri();
-        } else {
-            if (StringUtils.isNotEmpty(uri.getQuery())) {
-                path = String.join(""?"", path, uri.getQuery());
-            }
-            realURI = UriComponentsBuilder.fromHttpUrl(path).build(false).toUri();
-        }
-        exchange.getAttributes().put(Constants.HTTP_URI, realURI);
+        URI realUri = URI.create(path + ""?"" + RequestQueryCodecUtil.getCodecQuery(exchange));","[{'comment': 'why modify this， only used  UriUtils.encode(item, StandardCharsets.UTF_8))？', 'commenter': 'yu199195'}, {'comment': ""some query like `status=[abc%2Cedf]` will catch the `Invalid character '[' for QUERY_PARAM in status=[abc%2Cedf]`"", 'commenter': 'qicz'}]"
2774,shenyu-common/src/main/java/org/apache/shenyu/common/timer/HashedWheelTimer.java,"@@ -165,7 +161,7 @@ public HashedWheelTimer(final long tickDuration, final TimeUnit unit, final int
     }
     
     /**
-     * Creates a new timer with the default tick duration and default number of
+     * Creates a new timer with the default tick duration and default number ofw","[{'comment': 'typo', 'commenter': 'tuohai666'}]"
2779,shenyu-dist/shenyu-bootstrap-dist/src/main/release-docs/LICENSE,"@@ -361,6 +361,21 @@ The text of each license is the standard Apache 2.0 license.
     zkclient 0.10: https://github.com/sgroschupf/zkclient, Apache 2.0
     zookeeper 3.5.6: https://github.com/apache/zookeeper, Apache 2.0
     zookeeper-jute 3.5.6: https://github.com/apache/zookeeper, Apache 2.0
+    byte-buddy 1.12.6: https://github.com/raphw/byte-buddy, Apache 2.0
+    byte-buddy-agent 1.12.6: https://github.com/raphw/byte-buddy, Apache 2.0
+    jaeger-client 1.6.0 https://github.com/jaegertracing/jaeger Apache 2.0
+    opentracing-api 0.33.0 https://github.com/opentracing/opentracing-java Apache 2.0","[{'comment': 'opentraccing licenses already exist.', 'commenter': 'tuohai666'}, {'comment': 'remove done', 'commenter': 'SaberSola'}]"
2779,shenyu-dist/shenyu-bootstrap-dist/src/main/release-docs/NOTICE,"@@ -305,6 +305,26 @@ This product includes software developed at CoreOS, Inc.
 
 ========================================================================
 
+byte-buddy NOTICE","[{'comment': 'Please also add zipkin NOTICE.', 'commenter': 'tuohai666'}, {'comment': 'add done', 'commenter': 'SaberSola'}]"
2789,shenyu-common/src/main/java/org/apache/shenyu/common/timer/Timer.java,"@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.common.timer;
+
+/**
+ * Timer .
+ *
+ * @author sixh chenbin","[{'comment': 'remove this', 'commenter': 'yu199195'}]"
2789,shenyu-common/src/main/java/org/apache/shenyu/common/timer/TimerTask.java,"@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.common.timer;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * TimerTask .
+ *
+ * @author sixh chenbin","[{'comment': 'remove this', 'commenter': 'yu199195'}]"
2789,shenyu-common/src/main/java/org/apache/shenyu/common/timer/TimerTaskList.java,"@@ -0,0 +1,296 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.common.timer;
+
+import java.util.Iterator;
+import java.util.concurrent.Delayed;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.function.Consumer;
+
+/**
+ * TimerTaskList .
+ *
+ * @author sixh chenbin","[{'comment': 'remove this', 'commenter': 'yu199195'}, {'comment': 'Foreign provide HierarchicalWheelTimer. Class is thread-safe', 'commenter': 'prFor'}]"
2789,shenyu-common/src/main/java/org/apache/shenyu/common/timer/TimingWheel.java,"@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.common.timer;
+
+import java.util.concurrent.DelayQueue;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * TimingWheel .
+ * This is a Hierarchical wheel timer implementation.
+ */
+class TimingWheel {","[{'comment': 'not public？', 'commenter': 'yu199195'}, {'comment': 'Foreign provide HierarchicalWheelTimer. Class is thread-safe', 'commenter': 'prFor'}]"
2789,shenyu-common/src/main/java/org/apache/shenyu/common/timer/WheelTimerFactory.java,"@@ -0,0 +1,181 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.common.timer;
+
+/**
+ * WheelTimerFactory .
+ * shared wheel time.
+ */
+public class WheelTimerFactory {
+    
+    private static final String NAME = ""shared_wheel_timer"";
+    
+    private static final TimerSharedRef SHARED_TIMER = new TimerSharedRef();
+    
+    /**
+     * Gets wheel timer.
+     *
+     * @return the wheel timer
+     */
+    public static Timer getSharedTimer() {
+        return SHARED_TIMER.getRef();
+    }
+    
+    /**
+     * New wheel timer hashed wheel timer.
+     *
+     * @return the hashed wheel timer
+     */
+    public static Timer newWheelTimer() {
+        return new HierarchicalWheelTimer(NAME);
+    }
+    
+    private abstract static class Shared<T> {","[{'comment': 'I think a simple shared supplier can be implemented.\r\n\r\n`public class ShardedSupplier<T> implements Supplier<T> {\r\n\r\n    private final Supplier<T> delegate;\r\n\r\n    private volatile boolean initialized;\r\n    private T value;\r\n\r\n    public ShardedSupplier(Supplier<T> delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n\r\n    @Override\r\n    public T get() {\r\n        if (!initialized) {\r\n            synchronized (this) {\r\n                if (!initialized) {\r\n                    T t = this.delegate.get();\r\n                    this.value = t;\r\n                    this.initialized = true;\r\n                    return t;\r\n                }\r\n            }\r\n        }\r\n        return this.value;\r\n    }\r\n\r\n    public static <T> ShardedSupplier<T> getShardedSupplier(Supplier<T> delegate) {\r\n        return new ShardedSupplier<>(delegate);\r\n    }\r\n}`', 'commenter': 'hutaishi'}]"
2824,shenyu-integrated-test/shenyu-integrated-test-agent/shenyu-integrated-test-agent-tracing/shenyu-integrated-test-agent-tracing-zipkin/src/test/java/org/apache/shenyu/integrated/test/agent/zipkin/ZipkinPluginTest.java,"@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.agent.zipkin;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.integrated.test.agent.zipkin.result.ZipkinSpan;
+import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
+import org.apache.shenyu.integratedtest.common.dto.OrderDTO;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonParser;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+
+/**
+ * Test for tracing zipkin plugin.
+ */
+public class ZipkinPluginTest extends AbstractPluginDataInit {
+
+    private static final Logger LOG = LoggerFactory.getLogger(ZipkinPluginTest.class);
+
+    private static final String ZIPKIN_HTTP_SERVER = ""http://localhost:9411/api/v2/traces?serviceName=shenyu-agent"";
+
+    private static final Gson GSON = new Gson();
+
+    @BeforeClass
+    public static void setup() throws IOException, InterruptedException {
+        OrderDTO user = new OrderDTO(""123"", ""Tom"");
+        user = HttpHelper.INSTANCE.postGateway(""/http/order/save"", user, OrderDTO.class);
+        assertEquals(""hello world save order"", user.getName());
+        // Sleep for jaeger to react
+        Thread.sleep(5000);","[{'comment': 'Do we need sleep here?', 'commenter': 'JooKS-me'}, {'comment': 'Sorry, please ignore this comment.', 'commenter': 'JooKS-me'}]"
2824,shenyu-integrated-test/shenyu-integrated-test-agent/shenyu-integrated-test-agent-tracing/shenyu-integrated-test-agent-tracing-zipkin/src/test/java/org/apache/shenyu/integrated/test/agent/zipkin/ZipkinPluginTest.java,"@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.agent.zipkin;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.integrated.test.agent.zipkin.result.ZipkinSpan;
+import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
+import org.apache.shenyu.integratedtest.common.dto.OrderDTO;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonParser;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+
+/**
+ * Test for tracing zipkin plugin.
+ */
+public class ZipkinPluginTest extends AbstractPluginDataInit {
+
+    private static final Logger LOG = LoggerFactory.getLogger(ZipkinPluginTest.class);
+
+    private static final String ZIPKIN_HTTP_SERVER = ""http://localhost:9411/api/v2/traces?serviceName=shenyu-agent"";
+
+    private static final Gson GSON = new Gson();
+
+    @BeforeClass
+    public static void setup() throws IOException, InterruptedException {
+        OrderDTO user = new OrderDTO(""123"", ""Tom"");
+        user = HttpHelper.INSTANCE.postGateway(""/http/order/save"", user, OrderDTO.class);
+        assertEquals(""hello world save order"", user.getName());
+        // Sleep for jaeger to react","[{'comment': 'Pls change the `jaeger` to `zipkin`~', 'commenter': 'JooKS-me'}, {'comment': 'done', 'commenter': 'lxl910128'}]"
2825,shenyu-integrated-test/shenyu-integrated-test-agent/shenyu-integrated-test-agent-tracing/shenyu-integrated-test-agent-tracing-jaeger/src/test/java/org/apache/shenyu/integrated/test/agent/jaeger/JaegerPluginTest.java,"@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.agent.jaeger;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonParser;
+import org.apache.shenyu.integrated.test.agent.jaeger.result.JaegerSpan;
+import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
+import org.apache.shenyu.integratedtest.common.dto.OrderDTO;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+/**
+ * Test for tracing OpenTelemetry plugin.","[{'comment': ""Comment should be changed to 'jaeger'"", 'commenter': 'JooKS-me'}, {'comment': ""Sorry, it's my fault. I had fixed that"", 'commenter': 'lxl910128'}]"
2844,shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java,"@@ -100,19 +101,19 @@ private void handler(final ServiceBean<?> serviceBean) {
         }
         Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(clazz);
         for (Method method : methods) {
-            ShenyuDubboClient shenyuDubboClient = method.getAnnotation(ShenyuDubboClient.class);
-            if (Objects.nonNull(shenyuDubboClient)) {
-                publisher.publishEvent(buildMetaDataDTO(serviceBean, shenyuDubboClient, method));
+            SoulDubboClient dubboClient = AnnotatedElementUtils.findMergedAnnotation(method, SoulDubboClient.class);
+            if (Objects.nonNull(dubboClient)) {
+                publisher.publishEvent(buildMetaDataDTO(serviceBean, dubboClient, method));
             }
         }
     }
 
-    private MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean<?> serviceBean, final ShenyuDubboClient shenyuDubboClient, final Method method) {
+    private MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean<?> serviceBean, final SoulDubboClient dubboClient, final Method method) {","[{'comment': 'why is sloudubbo client', 'commenter': 'yu199195'}, {'comment': '`@ShenyuDubboClient` is a derived annotation of `@SoulDubboClient`.\r\n```java\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ElementType.TYPE, ElementType.METHOD})\r\n@Inherited\r\n@SoulDubboClient(path = """")\r\npublic @interface ShenyuDubboClient {\r\n\r\n    @AliasFor(annotation = SoulDubboClient.class)\r\n    String path();\r\n\r\n    @AliasFor(annotation = SoulDubboClient.class)\r\n    String ruleName() default """";\r\n\r\n    @AliasFor(annotation = SoulDubboClient.class)\r\n    String desc() default """";\r\n\r\n    @AliasFor(annotation = SoulDubboClient.class)\r\n    boolean enabled() default true;\r\n}\r\n```\r\nsee `org.springframework.core.annotation.AliasFor` and `org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotation`.', 'commenter': 'loongs-zhang'}, {'comment': 'Is it for compatibility? soul version, we are not going to maintain', 'commenter': 'yu199195'}, {'comment': 'Yes, just for compatibility. So be it, close this PR ?', 'commenter': 'loongs-zhang'}, {'comment': '@dragon-zhang thank you for pr， you already add my wechat ：xixy199195?   ,you can close this PR~', 'commenter': 'yu199195'}]"
2974,script/2.4.2-upgrade-2.4.3-mysql.sql,"@@ -17,21 +17,4 @@
 -- this file works for MySQL.
 
 -- update admin password
-UPDATE dashboard_user SET password='ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413' WHERE user_name = 'admin';
-
--- Note: it doesn't matter if you don't execute this SQL, the default configuration will be compatible with the old version","[{'comment': 'why remove this？？？？', 'commenter': 'yu199195'}]"
2974,script/2.4.2-upgrade-2.4.3-pg.sql,"@@ -17,21 +17,4 @@
 -- this file works for PostgreSQL, can not use ""`"" syntax.
 
 -- update admin password
-UPDATE dashboard_user SET password='ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413' WHERE user_name = 'admin';
-
--- Note: it doesn't matter if you don't execute this SQL, the default configuration will be compatible with the old version
--- Note: because most users have changed ZK configuration, this SQL is annotated to prevent erroneous execution
--- UPDATE plugin SET config='{""register"":""zookeeper://localhost:2181"",""multiSelectorHandle"":""1"",""threadpool"":""cached"",""corethreads"":0,""threads"":2147483647,""queues"":0}' WHERE `name` = 'dubbo';
---                                                    ^^^^^^^^^ if you want to execute this SQL, please replace it with your ZK configuration
-
--- insert plugin_handle data for dubbo
-INSERT IGNORE INTO plugin_handle (`plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('6', 'threadpool', 'threadpool', '3', '3', '0', '{""required"":""0"",""defaultValue"":""cached"",""placeholder"":""threadpool"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('6', 'corethreads', 'corethreads', '1', '3', '0', '{""required"":""0"",""defaultValue"":""0"",""placeholder"":""corethreads"",""rule"":""""}');","[{'comment': 'why remove this？', 'commenter': 'yu199195'}]"
2985,shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java,"@@ -367,4 +367,30 @@ private UserDTO buildUser(final String id, final String name) {
         userDTO.setUserName(name);
         return userDTO;
     }
+
+    /**
+     * the waf pass.
+     *
+     * @return response. result bean
+     */
+    @GetMapping (""/hystrix/pass"")
+    public ResultBean hystrixPass() {","[{'comment': 'IMO, we can reuse existing endpoint, no need to add new ones, WDYT?', 'commenter': 'JooKS-me'}, {'comment': 'https://github.com/apache/incubator-shenyu/blob/e3456e91a093057455fbf09916cca09a3982e9ca/shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java#L159-L164\r\n\r\n\r\nhttps://github.com/apache/incubator-shenyu/blob/e3456e91a093057455fbf09916cca09a3982e9ca/shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java#L204-L212\r\n\r\nI noticed that the previous test also created a corresponding method, so I also created a new method belonging to the Hystrix plugin. I think doing this reduces the coupling between methods.\r\n', 'commenter': 'erdengk'}, {'comment': 'We should probably unify and simplify these endpoints instead of making them more complex and repetitive. . . Of course, you can also do this in subsequent prs.', 'commenter': 'JooKS-me'}, {'comment': ""I think there should be separate controllers for each type of test.\r\nWhen integrated, a single change affects all tests.\r\nI think the unified approach is suitable for situations that don't change, like ResultBean, only code, message, data ."", 'commenter': 'erdengk'}]"
2985,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/HystrixPluginTest.java,"@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http.combination;
+
+import com.google.gson.reflect.TypeToken;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
+import org.apache.shenyu.common.enums.HystrixIsolationModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.utils.JsonUtils;
+import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.apache.shenyu.integratedtest.common.result.ResultBean;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
+import org.hamcrest.CoreMatchers;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import java.io.IOException;
+import java.lang.reflect.Type;
+
+import java.util.HashSet;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.stream.Stream;
+import java.util.Map;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+public final class HystrixPluginTest extends AbstractPluginDataInit {
+
+    private static final String TEST_HYSTRIX_PATH = ""/http/test/hystrix/pass"";
+
+    private static final String TEST_HYSTRIX_BAD_REQUEST_PATH = ""/http/test/hystrix/fallback"";
+
+    @BeforeEach
+    public void setup() throws IOException {
+        String pluginResult = initPlugin(PluginEnum.HYSTRIX.getName(), """");
+        assertThat(pluginResult, is(""success""));
+    }
+
+    @Test
+    public void testPass() throws IOException, ExecutionException, InterruptedException {
+        String selectorAndRulesResult =
+                initSelectorAndRules(PluginEnum.HYSTRIX.getName(), """", buildSelectorConditionList(), buildRuleLocalDataList(TEST_HYSTRIX_PATH));
+        assertThat(selectorAndRulesResult, is(""success""));
+        Future<ResultBean> resp = this.getService().submit(() -> HttpHelper.INSTANCE.getFromGateway(TEST_HYSTRIX_PATH, ResultBean.class));
+        assertEquals(200, resp.get().getCode());
+    }
+
+    @Test
+    public void testFallbackBySmeaphore() throws IOException, ExecutionException, InterruptedException {","[{'comment': 'typo(`Smeaphore`) :)', 'commenter': 'JooKS-me'}]"
2985,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/HystrixPluginTest.java,"@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http.combination;
+
+import com.google.gson.reflect.TypeToken;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
+import org.apache.shenyu.common.enums.HystrixIsolationModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.utils.JsonUtils;
+import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.apache.shenyu.integratedtest.common.result.ResultBean;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
+import org.hamcrest.CoreMatchers;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import java.io.IOException;
+import java.lang.reflect.Type;
+
+import java.util.HashSet;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.stream.Stream;
+import java.util.Map;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+public final class HystrixPluginTest extends AbstractPluginDataInit {
+
+    private static final String TEST_HYSTRIX_PATH = ""/http/test/hystrix/pass"";
+
+    private static final String TEST_HYSTRIX_BAD_REQUEST_PATH = ""/http/test/hystrix/fallback"";
+
+    @BeforeEach
+    public void setup() throws IOException {
+        String pluginResult = initPlugin(PluginEnum.HYSTRIX.getName(), """");
+        assertThat(pluginResult, is(""success""));
+    }
+
+    @Test
+    public void testPass() throws IOException, ExecutionException, InterruptedException {
+        String selectorAndRulesResult =
+                initSelectorAndRules(PluginEnum.HYSTRIX.getName(), """", buildSelectorConditionList(), buildRuleLocalDataList(TEST_HYSTRIX_PATH));
+        assertThat(selectorAndRulesResult, is(""success""));
+        Future<ResultBean> resp = this.getService().submit(() -> HttpHelper.INSTANCE.getFromGateway(TEST_HYSTRIX_PATH, ResultBean.class));
+        assertEquals(200, resp.get().getCode());
+    }
+
+    @Test
+    public void testFallbackBySmeaphore() throws IOException, ExecutionException, InterruptedException {
+        String selectorAndRulesResult =
+                initSelectorAndRules(PluginEnum.HYSTRIX.getName(), """", buildSelectorConditionList(), buildRuleLocalDataList(TEST_HYSTRIX_BAD_REQUEST_PATH));
+        assertThat(selectorAndRulesResult, CoreMatchers.is(""success""));
+        Set<String> resultSet = new HashSet<>();
+        Type returnType = new TypeToken<Map<String, Object>>() {
+        }.getType();
+        Future<Map<String, Object>> resp = this.getService().submit(() -> HttpHelper.INSTANCE.getFromGateway(TEST_HYSTRIX_BAD_REQUEST_PATH, returnType));","[{'comment': 'It would be better to change the variable name to `resp0`~', 'commenter': 'JooKS-me'}, {'comment': 'ok', 'commenter': 'erdengk'}]"
2985,shenyu-web/src/main/java/org/apache/shenyu/web/fallback/DefaultFallbackController.java,"@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.web.fallback;
+
+import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
+import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * The default fallback for hystrix plugin and resilience4j plugin.
+ */
+@RestController
+@RequestMapping(""/fallback"")
+public class DefaultFallbackController {","[{'comment': 'Is this a duplicate of #3028?', 'commenter': 'JooKS-me'}, {'comment': 'This is my fault. I committed the correct changes', 'commenter': 'erdengk'}]"
2985,shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java,"@@ -367,4 +367,30 @@ private UserDTO buildUser(final String id, final String name) {
         userDTO.setUserName(name);
         return userDTO;
     }
+
+    /**
+     * the waf pass.","[{'comment': '```suggestion\r\n     * pass endpoint for hystrix plugin.\r\n```', 'commenter': 'JooKS-me'}, {'comment': ""oh，I promise this problem won't happen in the future."", 'commenter': 'erdengk'}]"
3035,shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/executor/RegisterServerConsumerExecutor.java,"@@ -64,8 +58,7 @@ public void run() {
     private boolean isValidData(final Object data) {
         if (data instanceof URIRegisterDTO) {
             URIRegisterDTO uriRegisterDTO = (URIRegisterDTO) data;
-            return Objects.nonNull(uriRegisterDTO.getPort())
-                    && StringUtils.isNoneBlank(uriRegisterDTO.getAppName(), uriRegisterDTO.getHost());
+            return StringUtils.isNotBlank(uriRegisterDTO.getContextPath());","[{'comment': 'why this Judgment？', 'commenter': 'yu199195'}, {'comment': 'When there is no upstream service, there are only the contextPath and rpcType attributes in the URIRegisterDTO. rpcType is added this time, URIRegisterExecutorSubscriber.findService needs to use.', 'commenter': 'jerbo99'}, {'comment': 'The status of the upstream service is set in CommonUpstreamUtils.', 'commenter': 'jerbo99'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/netty/NettyServer.java,"@@ -0,0 +1,136 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote.netty;
+
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.EpollEventLoopGroup;
+import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.codec.http.HttpObjectAggregator;
+import io.netty.handler.codec.http.HttpRequestDecoder;
+import io.netty.handler.codec.http.HttpResponseEncoder;
+import io.netty.handler.stream.ChunkedWriteHandler;
+import io.netty.handler.timeout.IdleStateHandler;
+import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.proxy.remote.AbstractServer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.net.InetSocketAddress;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * NettyServer .
+ * netty network management.
+ */
+public class NettyServer extends AbstractServer {
+    
+    private final Logger logger = LoggerFactory.getLogger(NettyServer.class);
+    
+    /**
+     * service starter.
+     */
+    private final ServerBootstrap server;
+    
+    /**
+     * service processing.
+     */
+    private EventLoopGroup boosGroup;
+    
+    /**
+     * task processing thread.
+     */
+    private EventLoopGroup workGroup;
+    
+    private final int threads = Runtime.getRuntime().availableProcessors() << 1;
+    
+    
+    /**
+     * Instantiates a new Abstract server.
+     */
+    public NettyServer() {
+        super(null);
+        this.server = new ServerBootstrap();
+    }
+    
+    /**
+     * start a server.
+     *
+     * @param port the port
+     */
+    @Override
+    protected void start0(final int port) {
+        //判断Linux系统","[{'comment': 'pls in english', 'commenter': 'midnight2104'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/AbstractServer.java,"@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote;
+
+/**
+ * AbstractServer .
+ * start server abstraction.
+ */
+public abstract class AbstractServer implements Server, ChannelHandler {
+    
+    /**
+     * Handle related handlers.
+     */
+    private final ChannelHandler channelHandler;
+    
+    /**
+     * Instantiates a new Abstract server.
+     *
+     * @param channelHandler the channel handler
+     */
+    public AbstractServer(final ChannelHandler channelHandler) {
+        this.channelHandler = channelHandler;
+    }
+    
+    /**
+     * start a server.
+     *
+     * @param config 启动的config处理.
+     */
+    @Override
+    public void start(final ServerConfig config) {
+        this.start0(config.getPort());
+    }
+    
+    /**
+     * 发送一个消息.","[{'comment': 'pls in english', 'commenter': 'midnight2104'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/AbstractServer.java,"@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote;
+
+/**
+ * AbstractServer .
+ * start server abstraction.
+ */
+public abstract class AbstractServer implements Server, ChannelHandler {
+    
+    /**
+     * Handle related handlers.
+     */
+    private final ChannelHandler channelHandler;
+    
+    /**
+     * Instantiates a new Abstract server.
+     *
+     * @param channelHandler the channel handler
+     */
+    public AbstractServer(final ChannelHandler channelHandler) {
+        this.channelHandler = channelHandler;
+    }
+    
+    /**
+     * start a server.
+     *
+     * @param config 启动的config处理.","[{'comment': 'pls in english', 'commenter': 'midnight2104'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/ChannelHandler.java,"@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote;
+
+/**
+ * ChannelHandler .
+ * channel handler Processed event notifications.
+ */
+public interface ChannelHandler {
+    
+    /**
+     * send a message.
+     *
+     * @param channel the channel
+     * @param message the message
+     */
+    void sent(Channel channel, Object message);","[{'comment': 'how about rename to send', 'commenter': 'AhahaGe'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/ChannelHandler.java,"@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote;
+
+/**
+ * ChannelHandler .
+ * channel handler Processed event notifications.
+ */
+public interface ChannelHandler {
+    
+    /**
+     * send a message.
+     *
+     * @param channel the channel
+     * @param message the message
+     */
+    void sent(Channel channel, Object message);
+    
+    /**
+     * Handling of received messages.
+     *
+     * @param channel the channel
+     * @param message the message
+     */
+    void receive(Channel channel, Object message);
+    
+    /**
+     * connect.
+     *
+     * @param channel the channel
+     */
+    void connection(Channel channel);","[{'comment': 'rename to connect', 'commenter': 'AhahaGe'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/ChannelHandler.java,"@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote;
+
+/**
+ * ChannelHandler .
+ * channel handler Processed event notifications.
+ */
+public interface ChannelHandler {
+    
+    /**
+     * send a message.
+     *
+     * @param channel the channel
+     * @param message the message
+     */
+    void sent(Channel channel, Object message);
+    
+    /**
+     * Handling of received messages.
+     *
+     * @param channel the channel
+     * @param message the message
+     */
+    void receive(Channel channel, Object message);
+    
+    /**
+     * connect.
+     *
+     * @param channel the channel
+     */
+    void connection(Channel channel);
+    
+    /**
+     * Disconnect.
+     *
+     * @param channel the channel
+     */
+    void disConnection(Channel channel);","[{'comment': 'rename to disconnect', 'commenter': 'AhahaGe'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/netty/NettyChannel.java,"@@ -0,0 +1,150 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote.netty;
+
+import io.netty.channel.ChannelFutureListener;
+import org.apache.shenyu.proxy.remote.Channel;
+import org.apache.shenyu.proxy.remote.ChannelFuture;
+
+import java.net.SocketAddress;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+/**
+ * NettyChannel .
+ */
+public class NettyChannel implements Channel {
+    
+    private static final ConcurrentMap<io.netty.channel.Channel, NettyChannel> CHANNEL_CACHE = new ConcurrentHashMap<>();
+    
+    private final io.netty.channel.Channel channel;
+    
+    /**
+     * Instantiates a new Netty channel.
+     *
+     * @param channel the channel
+     */
+    public NettyChannel(final io.netty.channel.Channel channel) {
+        this.channel = channel;
+    }
+    
+    /**
+     * send.
+     * Send data to network channel.
+     *
+     * @param message the message
+     * @return the channel future
+     */
+    @Override
+    public ChannelFuture send(final Object message) {
+        io.netty.channel.ChannelFuture channelFuture = channel.writeAndFlush(message);
+        return new NettyChannelFuture(channelFuture);
+    }
+    
+    /**
+     * Determine if it is connected.
+     *
+     * @return boolean boolean
+     */
+    @Override
+    public boolean isConnected() {
+        return channel.isActive();
+    }
+    
+    /**
+     * remote address.
+     *
+     * @return socket address
+     */
+    @Override
+    public SocketAddress remoteAddress() {
+        return channel.remoteAddress();
+    }
+    
+    /**
+     * Local address socket address.
+     *
+     * @return the socket address
+     */
+    @Override
+    public SocketAddress localAddress() {
+        return channel.localAddress();
+    }
+    
+    /**
+     * Is opened boolean.
+     *
+     * @return the boolean
+     */
+    @Override
+    public boolean isOpened() {
+        return channel.isOpen();
+    }
+    
+    /**
+     * Is close boolean.
+     *
+     * @return the boolean
+     */
+    @Override
+    public boolean isClose() {
+        return !this.isOpened();","[{'comment': 'return ! channel.isOpen();', 'commenter': 'AhahaGe'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/netty/NettyChannel.java,"@@ -0,0 +1,150 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote.netty;
+
+import io.netty.channel.ChannelFutureListener;
+import org.apache.shenyu.proxy.remote.Channel;
+import org.apache.shenyu.proxy.remote.ChannelFuture;
+
+import java.net.SocketAddress;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+/**
+ * NettyChannel .
+ */
+public class NettyChannel implements Channel {
+    
+    private static final ConcurrentMap<io.netty.channel.Channel, NettyChannel> CHANNEL_CACHE = new ConcurrentHashMap<>();
+    
+    private final io.netty.channel.Channel channel;
+    
+    /**
+     * Instantiates a new Netty channel.
+     *
+     * @param channel the channel
+     */
+    public NettyChannel(final io.netty.channel.Channel channel) {
+        this.channel = channel;
+    }
+    
+    /**
+     * send.
+     * Send data to network channel.
+     *
+     * @param message the message
+     * @return the channel future
+     */
+    @Override
+    public ChannelFuture send(final Object message) {
+        io.netty.channel.ChannelFuture channelFuture = channel.writeAndFlush(message);
+        return new NettyChannelFuture(channelFuture);
+    }
+    
+    /**
+     * Determine if it is connected.
+     *
+     * @return boolean boolean
+     */
+    @Override
+    public boolean isConnected() {
+        return channel.isActive();
+    }
+    
+    /**
+     * remote address.
+     *
+     * @return socket address
+     */
+    @Override
+    public SocketAddress remoteAddress() {
+        return channel.remoteAddress();
+    }
+    
+    /**
+     * Local address socket address.
+     *
+     * @return the socket address
+     */
+    @Override
+    public SocketAddress localAddress() {
+        return channel.localAddress();
+    }
+    
+    /**
+     * Is opened boolean.
+     *
+     * @return the boolean
+     */
+    @Override
+    public boolean isOpened() {
+        return channel.isOpen();
+    }
+    
+    /**
+     * Is close boolean.
+     *
+     * @return the boolean
+     */
+    @Override
+    public boolean isClose() {
+        return !this.isOpened();
+    }
+    
+    /**
+     * Close.
+     */
+    @Override
+    public void close() {
+        channel.close().addListener((ChannelFutureListener) channelFuture -> {
+            removeChannel(channel);
+        });
+    }
+    
+    /**
+     * Get a channel, create a Netty Channel if it doesn't exist.
+     *
+     * @param channel the channel nettyChannel.
+     * @return the or add channel
+     */
+    public static NettyChannel getOrAddChannel(final io.netty.channel.Channel channel) {
+        NettyChannel nettyChannel = CHANNEL_CACHE.get(channel);
+        
+        if (nettyChannel == null) {
+            NettyChannel ret = new NettyChannel(channel);
+            if (channel.isActive()) {","[{'comment': 'no need to judge, as following code set the value if nettyChannel is null again', 'commenter': 'AhahaGe'}, {'comment': 'The first time you create a channel, it might be empty.', 'commenter': 'prFor'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/netty/NettyChannel.java,"@@ -0,0 +1,150 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote.netty;
+
+import io.netty.channel.ChannelFutureListener;
+import org.apache.shenyu.proxy.remote.Channel;
+import org.apache.shenyu.proxy.remote.ChannelFuture;
+
+import java.net.SocketAddress;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+/**
+ * NettyChannel .
+ */
+public class NettyChannel implements Channel {
+    
+    private static final ConcurrentMap<io.netty.channel.Channel, NettyChannel> CHANNEL_CACHE = new ConcurrentHashMap<>();
+    
+    private final io.netty.channel.Channel channel;
+    
+    /**
+     * Instantiates a new Netty channel.
+     *
+     * @param channel the channel
+     */
+    public NettyChannel(final io.netty.channel.Channel channel) {
+        this.channel = channel;
+    }
+    
+    /**
+     * send.
+     * Send data to network channel.
+     *
+     * @param message the message
+     * @return the channel future
+     */
+    @Override
+    public ChannelFuture send(final Object message) {
+        io.netty.channel.ChannelFuture channelFuture = channel.writeAndFlush(message);
+        return new NettyChannelFuture(channelFuture);
+    }
+    
+    /**
+     * Determine if it is connected.
+     *
+     * @return boolean boolean
+     */
+    @Override
+    public boolean isConnected() {
+        return channel.isActive();
+    }
+    
+    /**
+     * remote address.
+     *
+     * @return socket address
+     */
+    @Override
+    public SocketAddress remoteAddress() {
+        return channel.remoteAddress();
+    }
+    
+    /**
+     * Local address socket address.
+     *
+     * @return the socket address
+     */
+    @Override
+    public SocketAddress localAddress() {
+        return channel.localAddress();
+    }
+    
+    /**
+     * Is opened boolean.
+     *
+     * @return the boolean
+     */
+    @Override
+    public boolean isOpened() {
+        return channel.isOpen();
+    }
+    
+    /**
+     * Is close boolean.
+     *
+     * @return the boolean
+     */
+    @Override
+    public boolean isClose() {
+        return !this.isOpened();
+    }
+    
+    /**
+     * Close.
+     */
+    @Override
+    public void close() {
+        channel.close().addListener((ChannelFutureListener) channelFuture -> {
+            removeChannel(channel);
+        });
+    }
+    
+    /**
+     * Get a channel, create a Netty Channel if it doesn't exist.
+     *
+     * @param channel the channel nettyChannel.
+     * @return the or add channel
+     */
+    public static NettyChannel getOrAddChannel(final io.netty.channel.Channel channel) {
+        NettyChannel nettyChannel = CHANNEL_CACHE.get(channel);
+        
+        if (nettyChannel == null) {","[{'comment': 'please follow our code suggestion to handle null', 'commenter': 'AhahaGe'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/netty/NettyServer.java,"@@ -0,0 +1,136 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote.netty;
+
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.EpollEventLoopGroup;
+import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.codec.http.HttpObjectAggregator;
+import io.netty.handler.codec.http.HttpRequestDecoder;
+import io.netty.handler.codec.http.HttpResponseEncoder;
+import io.netty.handler.stream.ChunkedWriteHandler;
+import io.netty.handler.timeout.IdleStateHandler;
+import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.proxy.remote.AbstractServer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.net.InetSocketAddress;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * NettyServer .
+ * netty network management.
+ */
+public class NettyServer extends AbstractServer {
+    
+    private final Logger logger = LoggerFactory.getLogger(NettyServer.class);
+    
+    /**
+     * service starter.
+     */
+    private final ServerBootstrap server;
+    
+    /**
+     * service processing.
+     */
+    private EventLoopGroup boosGroup;
+    
+    /**
+     * task processing thread.
+     */
+    private EventLoopGroup workGroup;
+    
+    private final int threads = Runtime.getRuntime().availableProcessors() << 1;
+    
+    
+    /**
+     * Instantiates a new Abstract server.
+     */
+    public NettyServer() {
+        super(null);
+        this.server = new ServerBootstrap();
+    }
+    
+    /**
+     * start a server.
+     *
+     * @param port the port
+     */
+    @Override
+    protected void start0(final int port) {
+        //Judge Linux system
+        if (isLinux()) {
+            boosGroup = new EpollEventLoopGroup(1, ShenyuThreadFactory.create(""shenyu_proxy_server_boss_epoll"", false));
+            workGroup = new EpollEventLoopGroup(threads, ShenyuThreadFactory.create(""shenyu_proxy_server_work_epoll"", false));
+            server.channel(EpollServerSocketChannel.class);
+        } else {
+            boosGroup = new NioEventLoopGroup(1, ShenyuThreadFactory.create(""shenyu_proxy_server_boss_epoll"", false));
+            workGroup = new NioEventLoopGroup(threads, ShenyuThreadFactory.create(""shenyu_proxy_server_work_epoll"", false));
+            server.channel(NioServerSocketChannel.class);
+        }
+        NettyServerHandler nettyServerHandler = new NettyServerHandler(this);
+        server.group(boosGroup, workGroup)
+                .option(ChannelOption.SO_BACKLOG, 65535)
+                .option(ChannelOption.SO_REUSEADDR, true)
+                .option(ChannelOption.SO_KEEPALIVE, true)
+                .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
+                .childOption(ChannelOption.TCP_NODELAY, true)
+                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
+                .childHandler(new ChannelInitializer<Channel>() {
+                    @Override
+                    protected void initChannel(final Channel channel) {
+                        channel.pipeline().addLast(new IdleStateHandler(4000, 0, 0, TimeUnit.MILLISECONDS));
+                        channel.pipeline().addLast(""http-decoder"", new HttpRequestDecoder());
+                        channel.pipeline().addLast(""http-aggregator"", new HttpObjectAggregator(65535));
+                        channel.pipeline().addLast(""http-encoder"", new HttpResponseEncoder());
+                        channel.pipeline().addLast(""chunkedWriter"", new ChunkedWriteHandler());
+                        channel.pipeline().addLast(nettyServerHandler);
+                    }
+                });
+        //setup information
+        try {
+            Channel channel = server.bind(port).sync().channel();
+            logger.info(""Network listening,ip:{},port:{}"", ((InetSocketAddress) channel.localAddress()).getHostString(), port);
+            channel.closeFuture().sync();
+        } catch (InterruptedException e) {
+            logger.error(""Error Network listening...... "" + e.getMessage());
+            throw new RuntimeException(""Error Network listening "" + e.getMessage());
+        } finally {
+            boosGroup.shutdownGracefully();
+            workGroup.shutdownGracefully();
+        }
+    }
+    
+    /**
+     * Determine whether it is a Linux operating system.
+     *
+     * @return the boolean
+     */
+    public static boolean isLinux() {
+        final String oS = System.getProperty(""os.name"").toLowerCase();
+        return oS.contains(""linux"");","[{'comment': 'do not use magic word', 'commenter': 'AhahaGe'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/netty/NettyServer.java,"@@ -0,0 +1,136 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote.netty;
+
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.EpollEventLoopGroup;
+import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.codec.http.HttpObjectAggregator;
+import io.netty.handler.codec.http.HttpRequestDecoder;
+import io.netty.handler.codec.http.HttpResponseEncoder;
+import io.netty.handler.stream.ChunkedWriteHandler;
+import io.netty.handler.timeout.IdleStateHandler;
+import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.proxy.remote.AbstractServer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.net.InetSocketAddress;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * NettyServer .
+ * netty network management.
+ */
+public class NettyServer extends AbstractServer {
+    
+    private final Logger logger = LoggerFactory.getLogger(NettyServer.class);
+    
+    /**
+     * service starter.
+     */
+    private final ServerBootstrap server;
+    
+    /**
+     * service processing.
+     */
+    private EventLoopGroup boosGroup;
+    
+    /**
+     * task processing thread.
+     */
+    private EventLoopGroup workGroup;
+    
+    private final int threads = Runtime.getRuntime().availableProcessors() << 1;
+    
+    
+    /**
+     * Instantiates a new Abstract server.
+     */
+    public NettyServer() {
+        super(null);
+        this.server = new ServerBootstrap();
+    }
+    
+    /**
+     * start a server.
+     *
+     * @param port the port
+     */
+    @Override
+    protected void start0(final int port) {
+        //Judge Linux system
+        if (isLinux()) {
+            boosGroup = new EpollEventLoopGroup(1, ShenyuThreadFactory.create(""shenyu_proxy_server_boss_epoll"", false));
+            workGroup = new EpollEventLoopGroup(threads, ShenyuThreadFactory.create(""shenyu_proxy_server_work_epoll"", false));
+            server.channel(EpollServerSocketChannel.class);
+        } else {
+            boosGroup = new NioEventLoopGroup(1, ShenyuThreadFactory.create(""shenyu_proxy_server_boss_epoll"", false));
+            workGroup = new NioEventLoopGroup(threads, ShenyuThreadFactory.create(""shenyu_proxy_server_work_epoll"", false));
+            server.channel(NioServerSocketChannel.class);
+        }
+        NettyServerHandler nettyServerHandler = new NettyServerHandler(this);
+        server.group(boosGroup, workGroup)
+                .option(ChannelOption.SO_BACKLOG, 65535)","[{'comment': 'why so big?', 'commenter': 'AhahaGe'}]"
3074,shenyu-proxy/proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/netty/NettyServerHandler.java,"@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.proxy.remote.netty;
+
+import io.netty.channel.ChannelDuplexHandler;
+import io.netty.channel.ChannelHandler;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelPromise;
+import io.netty.handler.timeout.IdleState;
+import io.netty.handler.timeout.IdleStateEvent;
+
+/**
+ * NettyServerHandler .
+ * Processing of netty server.
+ *
+ * @author sixh chenbin
+ */
+@ChannelHandler.Sharable
+public class NettyServerHandler extends ChannelDuplexHandler {
+    
+    private final org.apache.shenyu.proxy.remote.ChannelHandler channelHandler;
+    
+    public NettyServerHandler(final org.apache.shenyu.proxy.remote.ChannelHandler channelHandler) {
+        this.channelHandler = channelHandler;
+    }
+    
+    @Override
+    public void channelActive(final ChannelHandlerContext ctx) throws Exception {
+        super.channelActive(ctx);
+        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel());
+        try {
+            channelHandler.connection(channel);
+        } finally {
+            NettyChannel.removeChannel(ctx.channel());
+        }
+    }
+    
+    @Override
+    public void channelInactive(final ChannelHandlerContext ctx) throws Exception {
+        super.channelInactive(ctx);
+        try {
+            NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel());
+            channelHandler.disConnection(channel);
+        } finally {
+            NettyChannel.removeChannel(ctx.channel());
+        }
+    }
+    
+    @Override
+    public void channelRead(final ChannelHandlerContext ctx, final Object msg) throws Exception {
+        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel());
+        try {
+            channelHandler.receive(channel, msg);
+        } finally {
+            NettyChannel.removeChannel(ctx.channel());
+        }
+    }
+    
+    @Override
+    public void write(final ChannelHandlerContext ctx,
+                      final Object msg, final ChannelPromise promise) throws Exception {
+        super.write(ctx, msg, promise);
+        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel());
+        try {
+            channelHandler.sent(channel, msg);
+        } finally {
+            NettyChannel.removeChannel(ctx.channel());
+        }
+    }
+    
+    @Override
+    public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt) throws Exception {
+        if (evt instanceof IdleStateEvent) {
+            IdleState state = ((IdleStateEvent) evt).state();
+            NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel());
+            try {
+                switch (state) {
+                    case READER_IDLE:
+                    case WRITER_IDLE:
+                    case ALL_IDLE:
+                        channel.close();","[{'comment': 'why here we have three status listed , and constructor only have readerIdleTimeSeconds set, can WRITER_IDLE trigged?', 'commenter': 'AhahaGe'}]"
3146,script/2.4.2-upgrade-2.4.3-mysql.sql,"@@ -83,17 +83,21 @@ INSERT IGNORE INTO plugin_handle (`plugin_id`,`field`,`label`,`data_type`,`type`
 UPDATE shenyu_dict SET dict_value = 'false' WHERE dict_code = 'INIT_FLAG';
 
 -- insert plugin data for cache
-INSERT IGNORE INTO `plugin` (`id`, `name`, `config`, `role`, `sort`, `enabled`) VALUES ('1505394366310285312', 'cache', '{""cacheType"":""memory""}', 'Cache', 1, 0);
+INSERT IGNORE INTO `plugin` (`id`, `name`, `config`, `role`, `sort`, `enabled`) VALUES ('30', 'cache', '{""cacheType"":""memory""}', 'Cache', 180, 0);
 
 -- insert plugin_handle data for cache
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505397799121616896', '1505394366310285312', 'cacheType', 'cacheType', 2, 3, 1, '{""required"":""1"",""defaultValue"":""memory"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505398085349310464', '1505394366310285312', 'database', 'database', 1, 3, 2, '{""required"":""0"",""defaultValue"":""0"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505398320372940800', '1505394366310285312', 'master', 'master', 2, 3, 3, '{""required"":""0"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505398496462405632', '1505394366310285312', 'mode', 'mode', 2, 3, 4, '{""required"":""0"",""defaultValue"":""standalone"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505398640738074624', '1505394366310285312', 'url', 'url', 2, 3, 5, '{""required"":""0"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505398799370846208', '1505394366310285312', 'password', 'password', 2, 3, 6, '{""required"":""0"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505399120822304768', '1505394366310285312', 'maxIdle', 'maxIdle', 1, 3, 7, '{""required"":""0"",""defaultValue"":""8"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505399444706459648', '1505394366310285312', 'minIdle', 'minIdle', 1, 3, 8, '{""required"":""0"",""defaultValue"":""0"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505399837066821632', '1505394366310285312', 'maxActive', 'maxActive', 1, 3, 9, '{""required"":""0"",""defaultValue"":""8"",""rule"":""""}');
-INSERT IGNORE INTO plugin_handle (`id`, `plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('1505400882341904384', '1505394366310285312', 'maxWait', 'maxWait', 3, 3, 10, '{""required"":""0"",""defaultValue"":""-1"",""rule"":""""}');
-
+INSERT IGNORE INTO plugin_handle (`plugin_id`, `field`, `label`, `data_type`, `type`, `sort`, `ext_obj`) VALUES ('30', 'cacheType', 'cacheType', 3, 3, 1, '{""required"":""1"",""defaultValue"":""memory"",""rule"":""""}');","[{'comment': ""current `plugin_handle` 's id is not auto-increment. if the `id` is missing the data can not insert."", 'commenter': 'qicz'}, {'comment': ""> current `plugin_handle` 's id is not auto-increment. if the `id` is missing the data can not insert.\r\n\r\ncopy that"", 'commenter': 'loongs-zhang'}]"
3229,shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/spi/AbstractLoadBalancer.java,"@@ -40,10 +41,15 @@ public Upstream select(final List<Upstream> upstreamList, final String ip) {
         if (CollectionUtils.isEmpty(upstreamList)) {
             return null;
         }
-        if (upstreamList.size() == 1) {
-            return upstreamList.get(0);
+        // available upstream list
+        List<Upstream> available = upstreamList.stream().filter(upstream -> getWeight(upstream) > 0).collect(Collectors.toList());","[{'comment': ""If there are three upstreams in `DividePlugin`, and their weight is 0, maybe it's error here, right?"", 'commenter': 'KevinClair'}, {'comment': 'Yes', 'commenter': 'ywengineer'}, {'comment': '@ywengineer  this pr need update？', 'commenter': 'yu199195'}, {'comment': ""no, return null if there isn't any available upstream, see line 47."", 'commenter': 'ywengineer'}, {'comment': 'if used HashLoadBalancer？ it not need weight~', 'commenter': 'yu199195'}, {'comment': 'Regardless of any LaodBalancer, closed upstream should not be selected. is it right? \r\nso, do you mean that we should use the status of upstream to determine it is available or not is better than weight? am i right?', 'commenter': 'ywengineer'}]"
3351,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/data/PostParameterData.java,"@@ -17,21 +17,30 @@
 
 package org.apache.shenyu.plugin.base.condition.data;
 
+import com.google.common.collect.Lists;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.ReflectUtils;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.spi.Join;
 import org.springframework.web.server.ServerWebExchange;
 
+import java.util.List;
+
 /**
  * The type Post parameter data.
  */
 @Join
 public class PostParameterData implements ParameterData {
     
     @Override
-    public String builder(final String paramName, final ServerWebExchange exchange) {
+    public List<String> builder(final String paramName, final ServerWebExchange exchange) {
         ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
-        return (String) ReflectUtils.getFieldValue(shenyuContext, paramName);
+        List<String> result = Lists.newArrayList();
+        String parameter = (String) ReflectUtils.getFieldValue(shenyuContext, paramName);
+        if (StringUtils.isNotEmpty(parameter)) {
+            result.add((String) ReflectUtils.getFieldValue(shenyuContext, paramName));","[{'comment': 'why not use `parameter` directly?', 'commenter': 'loongs-zhang'}]"
3351,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/PredicateJudgeFactory.java,"@@ -56,6 +58,30 @@ public static Boolean judge(final ConditionData conditionData, final String real
         return newInstance(conditionData.getOperator()).judge(conditionData, realData);
     }
 
+    /**
+     * judge request realData has by pass.
+     * @param conditionData condition data
+     * @param realDatas realDatas
+     * @return is true pass   is false not pass
+     */
+    public static Boolean judge(final ConditionData conditionData, final List<String> realDatas) {
+        if (Objects.isNull(conditionData)) {
+            return false;
+        }
+        if (CollectionUtils.isEmpty(realDatas)) {
+            return false;
+        }
+        PredicateJudge predicateJudge = newInstance(conditionData.getOperator());
+        Boolean flag = true;
+        for (String realData:realDatas) {
+            flag = predicateJudge.judge(conditionData, realData);","[{'comment': 'should also consider `StringUtils.isBlank(realData)`.', 'commenter': 'loongs-zhang'}]"
3351,shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/judge/PredicateJudgeFactoryTest.java,"@@ -51,7 +59,7 @@ public void testConditionDataIsNull() {
 
     @Test
     public void testRealDataIsBlank() {
-        assertFalse(PredicateJudgeFactory.judge(conditionData, null));","[{'comment': 'I think this line can be kept. Check whether there are other `null test` lines that can be kept.', 'commenter': 'loongs-zhang'}]"
3372,shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/MetricsPluginTest.java,"@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.integrated.test.http.combination;
+
+import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.jupiter.api.Test;
+
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
+public final class MetricsPluginTest extends AbstractPluginDataInit {
+
+    private static final String TEST_CACHE_PATH = ""/metrics"";
+
+    @Test
+    public void testPass() throws ExecutionException, InterruptedException {
+        Future<String> resp = this.getService().submit(() -> HttpHelper.INSTANCE.testMetricsPluginFromGateway(""http://shenyu-integrated-test-http:9090/api/v1/targets"", String.class));","[{'comment': 'Maybe there should not be `shenyu-integrated-test-http` :)\r\n```suggestion\r\n        Future<String> resp = this.getService().submit(() -> HttpHelper.INSTANCE.testMetricsPluginFromGateway(""http://localhost:9090/api/v1/targets"", String.class));\r\n```', 'commenter': 'JooKS-me'}, {'comment': ""ok，I'll try"", 'commenter': 'erdengk'}]"
3372,shenyu-integrated-test/shenyu-integrated-test-http/prometheus.yml,"@@ -0,0 +1,26 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+global:
+  scrape_interval:     15s","[{'comment': '```suggestion\r\n  scrape_interval: 15s\r\n```', 'commenter': 'JooKS-me'}]"
3372,shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/helper/HttpHelper.java,"@@ -236,6 +241,26 @@ public <S> S getFromGateway(final String path, final Map<String, Object> headers
         }
     }
 
+    /**
+     * Send a get http request to shenyu gateway .
+     *
+     * @param <S>     response type
+     * @param path    path
+     * @param type    type of response passed to {@link Gson#fromJson(String, Type)}
+     * @return response from gateway
+     * @throws IOException IO exception
+     */
+    public <S> S testMetricsPluginFromGateway(final String path, final Type type) throws IOException {","[{'comment': 'We can rename `testMetricsPluginFromGateway` to `getHttpService`, and a param `headers` can be added for more general use.', 'commenter': 'JooKS-me'}, {'comment': 'good idea，thanks～', 'commenter': 'erdengk'}]"
3372,shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/helper/HttpHelper.java,"@@ -48,6 +48,11 @@ public class HttpHelper {
      */
     public static final String GATEWAY_END_POINT = ""http://localhost:9195"";
 
+    /**
+     * The constant test metrics plugin.
+     */
+    public static final String METRICS_END_POINT = ""http://localhost:8090"";","[{'comment': 'Pls remove this.', 'commenter': 'JooKS-me'}, {'comment': ""Ok. I'm still testing it, and I'll clean up the code before the final review."", 'commenter': 'erdengk'}]"
3372,shenyu-integrated-test/shenyu-integrated-test-http/docker-compose.yml,"@@ -87,13 +87,29 @@ services:
         condition: service_healthy
     ports:
       - ""9195:9195""
+      - ""8090:8090""
     networks:
       - shenyu
     healthcheck:
       test: [ ""CMD"", ""wget"", ""http://shenyu-integrated-test-http:9195/actuator/health"" ]
       timeout: 2s
       retries: 30
 
+  prometheus:
+    image: prom/prometheus:latest","[{'comment': ""We'd better use a fixed version to avoid problems that may occur in the future."", 'commenter': 'JooKS-me'}, {'comment': 'ok，I get', 'commenter': 'erdengk'}]"
3549,shenyu-integrated-test/shenyu-integrated-test-http/src/main/resources/application.yml,"@@ -33,6 +33,14 @@ management:
       enabled: false
 
 shenyu:
+  metrics:
+    enabled: true
+    name: prometheus
+    host: 127.0.0.1","[{'comment': '```suggestion\r\n    host: 0.0.0.0\r\n```', 'commenter': 'JooKS-me'}, {'comment': 'ok', 'commenter': 'erdengk'}]"
3549,shenyu-integrated-test/shenyu-integrated-test-http/config/prometheus.yml,"@@ -0,0 +1,26 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+global:
+  scrape_interval: 5s
+
+scrape_configs:
+  - job_name: 'Apache ShenYu'
+    static_configs:
+      - targets: ['127.0.0.1:8090']","[{'comment': ""```suggestion\r\n      - targets: ['shenyu-integrated-test-http:8090']\r\n```"", 'commenter': 'JooKS-me'}]"
3549,shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/helper/HttpHelper.java,"@@ -264,4 +265,25 @@ public Response getHttpService(final String url, final Map<String, Object> heade
         Request request = requestBuilder.build();
         return client.newCall(request).execute();
     }
+
+    /**
+     * Send a get http request to shenyu gateway .
+     *
+     * @param <S>     response type
+     * @param headers headers
+     * @param path    path
+     * @param type    type of response passed to {@link Gson#fromJson(String, Type)}
+     * @return response from gateway
+     * @throws IOException IO exception
+     */
+    public <S> S getHttpService(final String path, final Map<String, Object> headers, final Type type) throws IOException {
+        Response response = getHttpService(path, headers);
+        String respBody = Objects.requireNonNull(response.body()).string();
+        LOG.info(""testMetricsPluginFromGateway({}) resp({})"", path, respBody);","[{'comment': 'Pls modify the log, this method should be a common util.', 'commenter': 'JooKS-me'}, {'comment': 'ok', 'commenter': 'erdengk'}]"
3549,shenyu-integrated-test/shenyu-integrated-test-http/config/prometheus.yml,"@@ -0,0 +1,26 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+global:
+  scrape_interval: 5s
+
+scrape_configs:
+  - job_name: 'Apache ShenYu'
+    static_configs:
+      - targets: ['shenyu-integrated-test-http:8090']
+  - job_name: ""prometheus""
+    static_configs:
+      - targets: [""localhost:9090""]","[{'comment': 'Add a blank line at the end of the file', 'commenter': 'JooKS-me'}]"
3549,shenyu-integrated-test/shenyu-integrated-test-http/docker-compose.yml,"@@ -87,13 +87,30 @@ services:
         condition: service_healthy
     ports:
       - ""9195:9195""
+      - ""8090:8090""
     networks:
       - shenyu
     healthcheck:
       test: [ ""CMD"", ""wget"", ""http://shenyu-integrated-test-http:9195/actuator/health"" ]
       timeout: 2s
       retries: 30
 
+  shenyu-prometheus:
+    image: prom/prometheus:v2.35.0
+    container_name: shenyu-prometheus
+    ports:
+      - ""9090:9090""
+    depends_on:
+      shenyu-integrated-test-http:
+        condition: service_healthy
+    networks:
+      - shenyu
+    volumes:
+      - type: bind
+        source: ./config/prometheus.yml
+        target: /etc/prometheus/prometheus.yml
+
+","[{'comment': 'remove meaningless blank lines', 'commenter': 'JooKS-me'}]"
3672,shenyu-integrated-test/shenyu-integrated-test-http/docker-compose.yml,"@@ -128,6 +128,47 @@ services:
       timeout: 2s
       retries: 30
 
+  shenyu-rocketmq:
+    image: rocketmqinc/rocketmq:4.3.2
+    container_name: shenyu-rocketmq
+    restart: always
+    depends_on:
+      shenyu-integrated-test-http:
+        condition: service_healthy
+    ports:
+      - ""9876:9876""
+    environment:
+      JAVA_OPT_EXT: ""-server -Xms1g -Xmx1g""
+    volumes:
+      - ./logs:/root/logs
+    command: sh mqnamesrv
+    networks:
+      shenyu:
+        aliases:
+          -  shenyu-rocketmq
+
+  shenyu-rmqbroker:
+    image: rocketmqinc/rocketmq:4.3.2","[{'comment': 'Why use `rocketmqinc/rocketmq`, is it different from `apache/rocketmq` ?', 'commenter': 'JooKS-me'}, {'comment': 'There is no difference between them, apache/rocketmq is officially released by apache. rocketmqinc/rocketmq is a private release, maybe apache/rocketmq is better here.', 'commenter': 'erdengk'}, {'comment': ""Yep, let's change it to apache/rocketmq."", 'commenter': 'JooKS-me'}, {'comment': 'ok', 'commenter': 'erdengk'}]"
3672,.github/workflows/integrated-test.yml,"@@ -20,7 +20,6 @@ on:
   push:
     branches:
       - master
-","[{'comment': ""Don't delete this line"", 'commenter': 'JooKS-me'}, {'comment': 'ok', 'commenter': 'erdengk'}]"
3722,.github/workflows/docker-publish.yml,"@@ -16,17 +16,19 @@
 name: docker-publish
 
 on:
-  push:
-    branches: [ ""master"" ]
-    tags: [ 'v*.*.*' ]
+  release:","[{'comment': 'why is release？', 'commenter': 'yu199195'}, {'comment': 'I found images are only pushed to dockerhub when release. So I\'m wondering if I need to do the same when it comes to ghcr.io. Then I replace ""push branches master"" with ""release"" here.\r\n\r\nIf ""push branches master"" is intensinally-designed, I\'ll fix it.', 'commenter': 'skyleaworlder'}, {'comment': 'When releasing a version, we push the docker image, you can refer to it here: https://shenyu.apache.org/community/release-guide#finish-publishing\r\n\r\nNot used github action.', 'commenter': 'yu199195'}, {'comment': '@yu199195 We can use actions to help us build and publish images that support multiple platforms, such as: arm64, amd64, which can make it easier for us to release, and currently some other apache projects do the same.\r\n\r\nAnd apache infra seems to provide the docker hub account and password in the GitHub settings: https://cwiki.apache.org/confluence/display/INFRA/Github+Secrets+and+Tokens', 'commenter': 'JooKS-me'}, {'comment': '@yu199195 @JooKS-me I restore the former docker-publish workflow, and create a new one to publish images to dockerhub in recent new commit.', 'commenter': 'skyleaworlder'}]"
3722,.github/workflows/docker-publish-dockerhub.yml,"@@ -0,0 +1,103 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+name: docker-publish-dockerhub
+
+on:
+  release:
+    type: [""published""]
+
+env:
+  REPOSITORY: ${{ github.repository }}
+  TAG: ${{ github.ref_name }}
+
+jobs:
+  dockerhub:
+    # pre-release or draft status don't trigger this job.
+    # this job called if and only if pre-release -> release or release directly.
+    if: ""!github.event.release.prerelease && !github.event.release.draft""
+    runs-on: ubuntu-latest
+    permissions:
+      contents: read
+      packages: write
+      id-token: write
+
+    steps:
+      - uses: actions/checkout@v3
+        with:
+          submodules: true
+
+      - name: Set Skip Env Var
+        uses: ./.github/actions/skip-ci","[{'comment': 'We need to delete SKIP_CI, or it will skip the job when release.', 'commenter': 'JooKS-me'}, {'comment': 'Thanks! I fix it.', 'commenter': 'skyleaworlder'}]"
3725,shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java,"@@ -1017,14 +1017,18 @@ public void setEnabled(final boolean enabled) {
          *
          * @return the enabled
          */
-        public String getOriginRegex() { return originRegex; }
-
+        public String getOriginRegex() {
+            return originRegex;
+        }
         /**
          * Sets originRegex.
          *
          * @return the enabled
          */
-        public void setOriginRegex(String originRegex) { this.originRegex = originRegex; }
+        public void setOriginRegex(String originRegex) {","[{'comment': 'maybe add final', 'commenter': 'yu199195'}]"
3725,shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java,"@@ -977,6 +977,9 @@ public static class CrossFilterConfig {
 
         private boolean allowCredentials;
 
+        private String originRegex;","[{'comment': 'move to `allowOrigin`', 'commenter': 'qicz'}]"
3776,shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java,"@@ -49,27 +50,29 @@ public WebClientPlugin(final WebClient webClient) {
     }
 
     @Override
-    protected Mono<ClientResponse> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
+    protected Mono<ResponseEntity<Void>> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,","[{'comment': 'if modify this， may be have modify this : WebClientMessageWriter', 'commenter': 'yu199195'}, {'comment': 'Agree @yu199195 , I was missing this piece. we can modify the WebClientMessageWriter to use newer WebClient.ResponseSpec instead of ClientResponse to process data. what are your thoughts on the above.', 'commenter': 'spicydev'}]"
3776,shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java,"@@ -49,27 +50,29 @@ public WebClientPlugin(final WebClient webClient) {
     }
 
     @Override
-    protected Mono<ClientResponse> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
+    protected Mono<ResponseEntity<Void>> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
                                              final HttpHeaders httpHeaders, final Flux<DataBuffer> body) {
-        // springWebflux5.3 mark #exchange() deprecated. because #echange maybe make memory leak.
-        // https://github.com/spring-projects/spring-framework/issues/25751
-        // exchange is deprecated, so change to {@link WebClient.RequestHeadersSpec#exchangeToMono(Function)}
-        // exchangeToMono has two important bug:
-        // 1.exchangeToMono can cause NPE when response body is null
-        // 2.download file with exchangeToMono can't open
+        // Upgraded to Spring WebClient Retrieve utilizing RequestSpec & ResponseSpec standard.
+        // OnStatus - is2xxSuccessful captures success responses
+        // OnStatus - isError captures all 4xx/5xx responses
+        // toBodilessEntity - captures 204 responses.
         return webClient.method(HttpMethod.valueOf(httpMethod)).uri(uri)
                 .headers(headers -> headers.addAll(httpHeaders))
                 .body(BodyInserters.fromDataBuffers(body))
-                .exchange()
-                .doOnSuccess(res -> {
-                    if (res.statusCode().is2xxSuccessful()) {
-                        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
-                    } else {
-                        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.ERROR.getName());
-                    }
+                .retrieve()
+                .onStatus(HttpStatus::is2xxSuccessful, res -> {
+                    exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
                     exchange.getResponse().setStatusCode(res.statusCode());
                     exchange.getAttributes().put(Constants.CLIENT_RESPONSE_ATTR, res);
-                });
+                    return Mono.empty();
+                })
+                .onStatus(HttpStatus::isError, res -> {","[{'comment': 'please use `status -> !status.is2xxSuccessful()` replace `HttpStatus::isError`, otherwise, it is logically inconsistent.', 'commenter': 'loongs-zhang'}]"
3776,shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java,"@@ -49,27 +50,29 @@ public WebClientPlugin(final WebClient webClient) {
     }
 
     @Override
-    protected Mono<ClientResponse> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
+    protected Mono<ResponseEntity<Void>> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
                                              final HttpHeaders httpHeaders, final Flux<DataBuffer> body) {
-        // springWebflux5.3 mark #exchange() deprecated. because #echange maybe make memory leak.
-        // https://github.com/spring-projects/spring-framework/issues/25751
-        // exchange is deprecated, so change to {@link WebClient.RequestHeadersSpec#exchangeToMono(Function)}
-        // exchangeToMono has two important bug:
-        // 1.exchangeToMono can cause NPE when response body is null
-        // 2.download file with exchangeToMono can't open
+        // Upgraded to Spring WebClient Retrieve utilizing RequestSpec & ResponseSpec standard.
+        // OnStatus - is2xxSuccessful captures success responses
+        // OnStatus - isError captures all 4xx/5xx responses
+        // toBodilessEntity - captures 204 responses.
         return webClient.method(HttpMethod.valueOf(httpMethod)).uri(uri)
                 .headers(headers -> headers.addAll(httpHeaders))
                 .body(BodyInserters.fromDataBuffers(body))
-                .exchange()
-                .doOnSuccess(res -> {
-                    if (res.statusCode().is2xxSuccessful()) {
-                        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
-                    } else {
-                        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.ERROR.getName());
-                    }
+                .retrieve()","[{'comment': 'After discussion with @moremind , the performance of `#retrieve` is far inferior to `#exchangeToMono`, so please use `#exchangeToMono`. You can test the performance gap between `#retrieve` and `#exchangeToMono` if you like.', 'commenter': 'loongs-zhang'}, {'comment': ""Hi @dragon-zhang , the performance of both exchange() & retrieve() is same, but retrieve restricts us to consume payload with it's ResponseSpec interface.\r\n\r\n`@Override\r\n public ResponseSpec retrieve() {\r\n  return new DefaultResponseSpec(exchange(), this::createRequest);\r\n}`\r\n\r\nPerhaps the question here is why should WebClientMessageWriter has to handle the responsibility to release client response body which is clearly causing the memory leak in case of null pointers. That responsibility we can try to delegate back to the WebClientPlugin. "", 'commenter': 'spicydev'}, {'comment': 'You can continue to complete it according to your idea, but before the PR get merged, I will do a simple pressure test on your PR.', 'commenter': 'loongs-zhang'}]"
3788,pom.xml,"@@ -126,6 +126,7 @@
         <spring-security.version>5.3.10.RELEASE</spring-security.version>
         <grpc.version>1.33.1</grpc.version>
         <rocketmq-client.version>4.9.3</rocketmq-client.version>
+        <pulsar-client.version>2.10.1</pulsar-client.version>","[{'comment': 'add license in  shenyu/shenyu-bootstarp-dis/license file', 'commenter': 'yu199195'}, {'comment': '> add license in shenyu/shenyu-bootstarp-dis/license file\r\n\r\nfixed', 'commenter': 'LeBW'}]"
3788,shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-pulsar/pom.xml,"@@ -0,0 +1,47 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>shenyu-spring-boot-starter-plugin</artifactId>
+        <groupId>org.apache.shenyu</groupId>","[{'comment': 'all project , groupId before the artifactId', 'commenter': 'yu199195'}, {'comment': '> all project , groupId before the artifactId\r\n\r\nfixed', 'commenter': 'LeBW'}]"
3788,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/pom.xml,"@@ -0,0 +1,58 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-plugin-logging</artifactId>
+        <version>2.5.0-SNAPSHOT</version>","[{'comment': 'this mybe 2.5.1-SNAPSHOT', 'commenter': 'yu199195'}, {'comment': 'fixed', 'commenter': 'LeBW'}]"
3788,shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-pulsar/pom.xml,"@@ -0,0 +1,47 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-spring-boot-starter-plugin</artifactId>
+        <version>2.5.0-SNAPSHOT</version>","[{'comment': 'this maybe 2.5.1-SNAPSHOT', 'commenter': 'yu199195'}, {'comment': 'fixed', 'commenter': 'LeBW'}]"
3788,shenyu-admin/src/main/resources/sql-script/h2/schema.sql,"@@ -389,6 +389,7 @@ INSERT IGNORE INTO `plugin` (`id`, `name`, `config`, `role`, `sort`, `enabled`)
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `config`, `enabled`) VALUES ('32', 'loggingElasticSearch', 'Logging', 190,'{""host"":""localhost"", ""port"": ""9200""}', '0');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `config`, `enabled`) VALUES ('33', 'loggingKafka', 'Logging', 180,'{""topic"":""shenyu-access-logging"", ""namesrvAddr"": ""localhost:9092""}', '0');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `config`, `enabled`) VALUES ('34', 'loggingAliyunSls', 'Logging', 175, '{""projectName"": ""shenyu"", ""logStoreName"": ""shenyu-logstore"", ""topic"": ""shenyu-topic""}', '0');
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `config`, `enabled`) VALUES ('35', 'loggingPulsar', 'Logging', 185, '{""topic"":""shenyu-access-logging"", ""serviceUrl"": ""pulsar://localhost:6650""}', '0');","[{'comment': 'Hi， \r\n\r\nSince 2.5.0 has been released, the new SQL statement should.\r\n\r\nAdd into shenyu/shenyu-admin/src/resource/sql-script.h2/schema.sql\r\nAdd into /shenyu/db/init/* \r\nCreate or update SQL into 2.5.0-upgrade-2.5.1-pg.sql, 2.5.0-upgrade-2.5.1-mysql.sql , 2.5.0-upgrade-2.5.1-oracle.sql file.', 'commenter': 'yu199195'}, {'comment': 'done', 'commenter': 'LeBW'}]"
3792,shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java,"@@ -47,20 +49,26 @@ public class WebClientPlugin extends AbstractHttpClientPlugin<ClientResponse> {
     public WebClientPlugin(final WebClient webClient) {
         this.webClient = webClient;
     }
-
+    
     @Override
     protected Mono<ClientResponse> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
                                              final HttpHeaders httpHeaders, final Flux<DataBuffer> body) {
         // springWebflux5.3 mark #exchange() deprecated. because #echange maybe make memory leak.
         // https://github.com/spring-projects/spring-framework/issues/25751
         // exchange is deprecated, so change to {@link WebClient.RequestHeadersSpec#exchangeToMono(Function)}
-        // exchangeToMono has two important bug:
-        // 1.exchangeToMono can cause NPE when response body is null
-        // 2.download file with exchangeToMono can't open
         return webClient.method(HttpMethod.valueOf(httpMethod)).uri(uri)
                 .headers(headers -> headers.addAll(httpHeaders))
                 .body(BodyInserters.fromDataBuffers(body))
-                .exchange()
+                .exchangeToMono(response -> response.bodyToMono(byte[].class).defaultIfEmpty(new byte[0])
+                        .flatMap(bytes -> {
+                            final ClientResponse.Builder builder = ClientResponse.create(response.statusCode())
+                                    .headers(headers -> headers.addAll(response.headers().asHttpHeaders()));
+                            if (ArrayUtils.isEmpty(bytes)) {
+                                return Mono.just(builder.build());
+                            }
+                            final DataBufferFactory dataBufferFactory = exchange.getResponse().bufferFactory();
+                            return Mono.just(builder.body(Flux.just(dataBufferFactory.wrap(bytes))).build());","[{'comment': 'Is it necessary to release the `DataBuffer` here ?', 'commenter': 'loongs-zhang'}]"
3792,shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java,"@@ -47,20 +49,27 @@ public class WebClientPlugin extends AbstractHttpClientPlugin<ClientResponse> {
     public WebClientPlugin(final WebClient webClient) {
         this.webClient = webClient;
     }
-
+    
     @Override
     protected Mono<ClientResponse> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
                                              final HttpHeaders httpHeaders, final Flux<DataBuffer> body) {
         // springWebflux5.3 mark #exchange() deprecated. because #echange maybe make memory leak.
         // https://github.com/spring-projects/spring-framework/issues/25751
         // exchange is deprecated, so change to {@link WebClient.RequestHeadersSpec#exchangeToMono(Function)}
-        // exchangeToMono has two important bug:
-        // 1.exchangeToMono can cause NPE when response body is null
-        // 2.download file with exchangeToMono can't open
         return webClient.method(HttpMethod.valueOf(httpMethod)).uri(uri)
                 .headers(headers -> headers.addAll(httpHeaders))
                 .body(BodyInserters.fromDataBuffers(body))
-                .exchange()
+                .exchangeToMono(response -> response.bodyToMono(byte[].class)
+                        .flatMap(bytes -> Mono.just(Optional.ofNullable(bytes))).defaultIfEmpty(Optional.empty())","[{'comment': 'maybe use Mono.fromCallable() instead of Mono.just()', 'commenter': 'moremind'}, {'comment': 'solved', 'commenter': 'loongs-zhang'}]"
3871,shenyu-native/shenyu-jvmti/src/main/native/head/jawt.h,"@@ -0,0 +1,356 @@
+/*
+ * Copyright (c) 1999, 2017, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.","[{'comment': ""@tuohai666 Hi, I'm not sure if `GNU Lincense` is compatible with `Apache Lincense 2.0`. How should I declare the file header?"", 'commenter': 'loongs-zhang'}]"
4060,shenyu-spring-boot-starter/shenyu-spring-boot-starter-instance/src/main/java/org/apache/shenyu/springboot/starter/instance/ShenyuInstanceConfiguration.java,"@@ -39,4 +41,19 @@ public class ShenyuInstanceConfiguration {
     public InstanceRegisterListener instanceRegisterListener(final ShenyuConfig config) {
         return new InstanceRegisterListener(config.getInstance());
     }
+
+    /**
+     * ShenYu Instance Register Repository.
+     * expose to shenYu-sdk.
+     *
+     * @param config the config
+     * @return ShenYu Instance Register Repository
+     */
+    @Bean
+    @ConditionalOnProperty(name = ""shenyu.instance.clientEnable"", havingValue = ""true"")","[{'comment': 'whats mean？ \r\n\r\nShenyuInstanceRegisterRepository already init in InstanceRegisterListener', 'commenter': 'yu199195'}, {'comment': 'InstanceRegisterListener will register the service to the registry, shenyu-sdk does not need this operation.', 'commenter': 'yunlongn'}, {'comment': 'Yes， so this code maybe in spring-boot-starter-sdk', 'commenter': 'yu199195'}, {'comment': ""I get it, I'll revise it"", 'commenter': 'yunlongn'}]"
4089,shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/DefaultSignService.java,"@@ -123,16 +125,11 @@ private Pair<Boolean, String> sign(final ShenyuContext shenyuContext, final Serv
         return Pair.of(Boolean.TRUE, """");
     }
 
-    private Map<String, String> buildParamsMap(final ShenyuContext shenyuContext, final Map<String, Object> requestBody) {
-        Map<String, String> map = Maps.newHashMapWithExpectedSize(3);
-        map.put(Constants.TIMESTAMP, shenyuContext.getTimestamp());
-        map.put(Constants.PATH, shenyuContext.getPath());
-        map.put(Constants.VERSION, ""1.0.0"");
-        if (!ObjectUtils.isEmpty(requestBody)) {
-            requestBody.forEach((key, value) -> {
-                map.putIfAbsent(key, Objects.toString(value, null));
-            });
-        }
-        return map;
+    private String buildExtSignKey(final String signKey, final ShenyuContext shenyuContext) {
+        return String.join("""", Constants.TIMESTAMP, shenyuContext.getTimestamp(), Constants.PATH, shenyuContext.getPath(), Constants.VERSION, ""1.0.0"", signKey);
+    }
+
+    private Map<String, String> transStringMap(final Map<String, Object> map) {
+        return map == null ? null : map.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> Objects.toString(e.getValue(), null)));","[{'comment': 'you need refactor this code', 'commenter': 'moremind'}, {'comment': ""Tanks, can you please tell me what's wrong with this code?I need your advice. I don't understand how to refactor"", 'commenter': 'ableYang123'}, {'comment': 'please refer https://shenyu.apache.org/zh/community/code-suggestions', 'commenter': 'moremind'}, {'comment': 'How about deleting this private method. \r\n\r\n```java\r\n        final Map<String,String> requestBodyStrMap =  requestBody == null ? null : requestBody.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> Objects.toString(e.getValue(), null)));\r\n        final String extSignKey = String.join("""", Constants.TIMESTAMP, shenyuContext.getTimestamp(), Constants.PATH, shenyuContext.getPath(), Constants.VERSION, ""1.0.0"", appAuthData.getAppSecret());\r\n        final String sign = ShenyuSignProviderWrap.generateSign(extSignKey, requestBodyStrMap, queryParams);\r\n        boolean result = Objects.equals(sign, shenyuContext.getSign());\r\n```', 'commenter': 'ableYang123'}]"
4089,shenyu-common/src/main/java/org/apache/shenyu/common/utils/SignUtils.java,"@@ -49,16 +52,20 @@ public static SignUtils getInstance() {
      * acquired sign.
      *
      * @param signKey sign key
-     * @param params  params
+     * @param jsonParams json params
+     * @param queryParams  url query params
      * @return sign
      */
-    public static String generateSign(final String signKey, final Map<String, String> params) {
-        final String sign = params.keySet().stream()
+    public static String generateSign(final String signKey, final Map<String, String> jsonParams, final Map<String, String> queryParams) {
+        final String jsonSign = Optional.ofNullable(jsonParams).orElse(EMPTY_HASH_MAP).keySet().stream()
+                .sorted(Comparator.naturalOrder())
+                .map(key -> String.join("""", key, jsonParams.get(key)))","[{'comment': 'refactor this code', 'commenter': 'moremind'}, {'comment': 'How about removing the transStringMap method and refactoring the generateSign method as follows \r\n```java\r\npublic static String generateSign(final String signKey, final Map<String, Object> jsonParams, final Map<String, String> queryParams) {\r\n        final String jsonSign = jsonParams==null?null:jsonParams.keySet().stream()\r\n                .sorted(Comparator.naturalOrder())\r\n                .map(key -> String.join("""", key, Objects.toString(jsonParams.get(key), null)))\r\n                .collect(Collectors.joining()).trim();\r\n        final String querySign = queryParams==null?null:queryParams.keySet().stream()\r\n                .sorted(Comparator.naturalOrder())\r\n                .map(key -> String.join("""", key, queryParams.get(key)))\r\n                .collect(Collectors.joining()).trim();\r\n        final String sign = String.join("""", jsonSign, querySign, signKey);\r\n        // TODO this is a risk for error charset coding with getBytes\r\n        return DigestUtils.md5DigestAsHex(sign.getBytes()).toUpperCase();\r\n    }\r\n```', 'commenter': 'ableYang123'}]"
4103,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/http/AbstractShenyuHttpClient.java,"@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.sdk.core.http;
+
+import org.apache.shenyu.common.config.ShenyuConfig;
+import org.apache.shenyu.common.utils.Singleton;
+import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
+import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.register.instance.core.ShenyuInstanceRegisterRepositoryFactory;
+import org.apache.shenyu.sdk.core.ShenyuRequest;
+import org.apache.shenyu.sdk.core.ShenyuResponse;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Optional;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+public abstract class AbstractShenyuHttpClient implements ShenyuHttpClient {
+
+    private static final Logger log = LoggerFactory.getLogger(AbstractShenyuHttpClient.class);
+
+    private static final String URL_REWRITE_REGEX = ""http:\\/\\/([a-z0-9(\\.|:)]+)+\\/"";","[{'comment': ""## Inefficient regular expression\n\nThis part of the regular expression may cause exponential backtracking on strings starting with 'http://' and containing many repetitions of '('.\n\n[Show more details](https://github.com/apache/shenyu/security/code-scanning/36)"", 'commenter': 'github-advanced-security[bot]'}]"
4103,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/ShenyuRequest.java,"@@ -93,6 +93,18 @@ public static ShenyuRequest create(final HttpMethod httpMethod,
         return new ShenyuRequest(httpMethod, url, headers, body, contextId, requestTemplate);
     }
 
+    /**
+     * Builds a Request. All parameters must be effectively immutable, via safe copies.
+     *
+     * @param url for the request.
+     * @param request to include.
+     * @return a Request
+     */
+    public static ShenyuRequest create(final String url,","[{'comment': 'Why the line break', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ShawnJim'}]"
4103,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/http/AbstractShenyuHttpClient.java,"@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.sdk.core.http;
+
+import org.apache.shenyu.common.config.ShenyuConfig;
+import org.apache.shenyu.common.utils.Singleton;
+import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
+import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.register.instance.core.ShenyuInstanceRegisterRepositoryFactory;
+import org.apache.shenyu.sdk.core.ShenyuRequest;
+import org.apache.shenyu.sdk.core.ShenyuResponse;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Optional;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+public abstract class AbstractShenyuHttpClient implements ShenyuHttpClient {
+
+    private static final Logger log = LoggerFactory.getLogger(AbstractShenyuHttpClient.class);
+
+    private static final String URL_REWRITE_REGEX = ""http:\\/\\/[a-z\\d\\.|:]+\\/"";
+
+    private final Retryer retryer;
+
+    private final ShenyuInstanceRegisterRepository registerRepository;
+
+    private final ShenyuConfig.RegisterConfig sdkConfig;
+
+    public AbstractShenyuHttpClient() {
+        this.sdkConfig = Optional.ofNullable(Singleton.INST.get(ShenyuConfig.class)).orElse(new ShenyuConfig()).getSdk();","[{'comment': 'this parameter always nonnull,you should just shenyuConfig.sdk', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ShawnJim'}]"
4103,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/http/AbstractShenyuHttpClient.java,"@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.sdk.core.http;
+
+import org.apache.shenyu.common.config.ShenyuConfig;
+import org.apache.shenyu.common.utils.Singleton;
+import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
+import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.register.instance.core.ShenyuInstanceRegisterRepositoryFactory;
+import org.apache.shenyu.sdk.core.ShenyuRequest;
+import org.apache.shenyu.sdk.core.ShenyuResponse;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Optional;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+public abstract class AbstractShenyuHttpClient implements ShenyuHttpClient {
+
+    private static final Logger log = LoggerFactory.getLogger(AbstractShenyuHttpClient.class);
+
+    private static final String URL_REWRITE_REGEX = ""http:\\/\\/[a-z\\d\\.|:]+\\/"";
+
+    private final Retryer retryer;
+
+    private final ShenyuInstanceRegisterRepository registerRepository;
+
+    private final ShenyuConfig.RegisterConfig sdkConfig;
+
+    public AbstractShenyuHttpClient() {
+        this.sdkConfig = Optional.ofNullable(Singleton.INST.get(ShenyuConfig.class)).orElse(new ShenyuConfig()).getSdk();
+        this.registerRepository = ShenyuInstanceRegisterRepositoryFactory.newInstance(sdkConfig.getRegisterType());
+
+        Boolean retryEnable = Optional.ofNullable(sdkConfig.getProps().get(""retry.enable"")).map(e -> (boolean) e).orElse(false);
+        Long period = Optional.ofNullable(sdkConfig.getProps().get(""retry.period"")).map(l -> (Long) l).orElse(100L);
+        long maxPeriod = Optional.ofNullable(sdkConfig.getProps().get(""retry.maxPeriod"")).map(l -> (Long) l).orElse(SECONDS.toMillis(1));
+        int maxAttempts = Optional.ofNullable(sdkConfig.getProps().get(""retry.maxAttempts"")).map(l -> (int) l).orElse(5);
+        this.retryer = retryEnable ? new Retryer.Default(period, maxPeriod, maxAttempts) : Retryer.NEVER_RETRY;
+
+    }
+
+    @Override
+    public ShenyuResponse execute(final ShenyuRequest request) throws IOException {
+        // do request.
+        Retryer retryer = this.retryer.instance();
+        while (true) {
+            try {
+                return doRequest(rewriteShenyuRequest(request));
+            } catch (RetryableException e) {
+                retryer.continueOrPropagate(e);
+                log.warn(""request fail, retry. contextId: {}"", request.getContextId());
+            }
+        }
+    }
+
+    private ShenyuRequest rewriteShenyuRequest(final ShenyuRequest request) {
+        return ShenyuRequest.create(getRewriteUrl(request), request);
+    }
+
+    /**
+     * TODO wait append load balance logic.
+     * get rewrite url by request.
+     *
+     * @param request the request.
+     * @return {@linkplain String}
+     */
+    private String getRewriteUrl(final ShenyuRequest request) {
+        String url;
+
+        if (!sdkConfig.getRegisterType().equals(""local"")) {","[{'comment': 'this code is error,maybe npe.', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ShawnJim'}]"
4103,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/http/RetryableException.java,"@@ -0,0 +1,73 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.sdk.core.http;
+
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.sdk.core.ShenyuRequest;
+import org.apache.shenyu.sdk.core.ShenyuRequest.HttpMethod;
+import org.apache.shenyu.sdk.core.ShenyuResponse;
+
+import java.util.Date;
+
+/**
+ * This exception is raised when the {@link org.apache.shenyu.sdk.core.ShenyuResponse} is deemed to be retryable, typically via an
+ * {@link org.apache.shenyu.common.exception.CommonErrorCode} when the {@link ShenyuResponse#getStatus() status} is 503.
+ * Reference to feign.RetryableException.
+ */
+public class RetryableException extends ShenyuException {
+
+    private static final long serialVersionUID = 1L;","[{'comment': 'not use 1L', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ShawnJim'}]"
4103,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/http/RetryableException.java,"@@ -0,0 +1,73 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.sdk.core.http;
+
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.sdk.core.ShenyuRequest;
+import org.apache.shenyu.sdk.core.ShenyuRequest.HttpMethod;
+import org.apache.shenyu.sdk.core.ShenyuResponse;
+
+import java.util.Date;
+
+/**
+ * This exception is raised when the {@link org.apache.shenyu.sdk.core.ShenyuResponse} is deemed to be retryable, typically via an
+ * {@link org.apache.shenyu.common.exception.CommonErrorCode} when the {@link ShenyuResponse#getStatus() status} is 503.
+ * Reference to feign.RetryableException.
+ */
+public class RetryableException extends ShenyuException {
+
+    private static final long serialVersionUID = 1L;
+
+    private final Long retryAfter;
+
+    private final HttpMethod httpMethod;
+
+    /**
+     * construct function.
+     *
+     * @param message message
+     * @param cause cause
+     * @param retryAfter usually corresponds to the retryAfter header.
+     * @param request request
+     */
+    public RetryableException(final String message, final java.lang.Throwable cause,
+                     final Date retryAfter, final ShenyuRequest request) {
+        super(message, cause);
+        this.httpMethod = request.getHttpMethod();
+        this.retryAfter = retryAfter != null ? retryAfter.getTime() : null;","[{'comment': 'refactor this code', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ShawnJim'}]"
4103,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/http/Retryer.java,"@@ -0,0 +1,134 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.sdk.core.http;
+
+import org.apache.shenyu.sdk.core.ShenyuRequest;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Cloned for each invocation to {@link ShenyuHttpClient#execute(ShenyuRequest)} .
+ * Implementations may keep state to determine if retry operations should continue or not.
+ * Reference to feign.Retryer.
+ */
+public interface Retryer extends Cloneable {
+
+    /**
+     * Implementation that never retries request. It propagates the RetryableException.
+     */
+    Retryer NEVER_RETRY = new Retryer() {
+
+        @Override
+        public void continueOrPropagate(final RetryableException e) {
+            throw e;
+        }
+
+        @Override
+        public Retryer instance() {
+            return this;
+        }
+
+    };
+
+    /**
+     * if retry is permitted, return (possibly after sleeping), otherwise propagate the exception.
+     *
+     * @param e RetryableException
+     */
+    void continueOrPropagate(RetryableException e);
+
+    /**
+     * clone current retryer.
+     *
+     * @return {@linkplain Retryer}
+     */
+    Retryer instance();
+
+    class Default implements Retryer {","[{'comment': 'not use default class', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ShawnJim'}]"
4105,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/FieldMapperTest.java,"@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.mapper;
+
+import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
+import org.apache.shenyu.admin.model.entity.FieldDO;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.junit.jupiter.api.Test;
+
+import javax.annotation.Resource;
+import java.sql.Timestamp;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.greaterThan;
+
+public class FieldMapperTest extends AbstractSpringIntegrationTest {
+
+    @Resource
+    private FieldMapper fieldMapper;
+
+    private FieldDO buildFieldDO() {
+        Timestamp now = new Timestamp(System.currentTimeMillis());
+        String id = UUIDUtils.getInstance().generateShortUuid();
+        String modelId = UUIDUtils.getInstance().generateShortUuid();
+        String selfModelId = UUIDUtils.getInstance().generateShortUuid();
+        return FieldDO.builder()
+                .id(id)
+                .name(""name"")
+                .modelId(modelId)
+                .selfModelId(selfModelId)
+                .fieldDesc(""fieldDesc"")
+                .required(true)
+                .ext(""ext"")
+                .dateCreated(now)
+                .dateUpdated(now)
+                .build();
+    }
+
+    @Test
+    public void testInsert() {
+        FieldDO record = buildFieldDO();
+        int count = fieldMapper.insert(record);
+        assertThat(count, greaterThan(0));
+
+        int delete = fieldMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));
+    }
+
+    @Test
+    public void testInsertSelective() {
+        FieldDO record = buildFieldDO();
+        int count = fieldMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+
+        int delete = fieldMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));
+    }
+
+    @Test
+    public void testSelectByPrimaryKey() {
+        FieldDO record = buildFieldDO();
+        int count = fieldMapper.insert(record);
+        assertThat(count, greaterThan(0));
+
+        FieldDO fieldDO = fieldMapper.selectByPrimaryKey(record.getId());
+        assertThat(fieldDO != null, equalTo(true));","[{'comment': '...assertTrue', 'commenter': 'moremind'}, {'comment': 'change to assertNotNull', 'commenter': 'ywj1352'}]"
4105,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/FieldMapperTest.java,"@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.mapper;
+
+import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
+import org.apache.shenyu.admin.model.entity.FieldDO;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.junit.jupiter.api.Test;
+
+import javax.annotation.Resource;
+import java.sql.Timestamp;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.greaterThan;
+
+public class FieldMapperTest extends AbstractSpringIntegrationTest {
+
+    @Resource
+    private FieldMapper fieldMapper;
+
+    private FieldDO buildFieldDO() {
+        Timestamp now = new Timestamp(System.currentTimeMillis());
+        String id = UUIDUtils.getInstance().generateShortUuid();
+        String modelId = UUIDUtils.getInstance().generateShortUuid();
+        String selfModelId = UUIDUtils.getInstance().generateShortUuid();
+        return FieldDO.builder()
+                .id(id)
+                .name(""name"")
+                .modelId(modelId)
+                .selfModelId(selfModelId)
+                .fieldDesc(""fieldDesc"")
+                .required(true)
+                .ext(""ext"")
+                .dateCreated(now)
+                .dateUpdated(now)
+                .build();
+    }
+
+    @Test
+    public void testInsert() {
+        FieldDO record = buildFieldDO();
+        int count = fieldMapper.insert(record);
+        assertThat(count, greaterThan(0));
+
+        int delete = fieldMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));","[{'comment': 'refactor this', 'commenter': 'moremind'}]"
4105,shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/FieldMapper.java,"@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.mapper;
+
+import org.apache.ibatis.annotations.Mapper;
+import org.apache.shenyu.admin.model.entity.FieldDO;
+
+/**
+ * FieldMapper.
+ */
+@Mapper
+public interface FieldMapper {
+
+    /**
+     * insert record to table.
+     *
+     * @param record the record
+     * @return insert count
+     */
+    int insert(FieldDO record);","[{'comment': 'Avoid using the keyword record,The new jdk will have problems', 'commenter': 'li-keguo'}, {'comment': 'see :https://docs.oracle.com/en/java/javase/15/language/records.html', 'commenter': 'li-keguo'}, {'comment': '> Avoid using the keyword record,The new jdk will have problems\r\n\r\nagree', 'commenter': 'loongs-zhang'}, {'comment': 'done', 'commenter': 'ywj1352'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/TagServiceImpl.java,"@@ -0,0 +1,88 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.service.impl;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
+import org.apache.shenyu.admin.mapper.TagMapper;
+import org.apache.shenyu.admin.model.dto.TagDTO;
+import org.apache.shenyu.admin.model.entity.TagDO;
+import org.apache.shenyu.admin.model.query.TagQuery;
+import org.apache.shenyu.admin.model.vo.TagVO;
+import org.apache.shenyu.admin.service.TagService;
+import org.apache.shenyu.admin.utils.Assert;
+import org.springframework.stereotype.Service;
+
+/**
+ * Implementation of the {@link org.apache.shenyu.admin.service.TagService}.
+ */
+@Service
+public class TagServiceImpl implements TagService {
+
+    private TagMapper tagMapper;
+
+    public TagServiceImpl(final TagMapper tagMapper) {
+        this.tagMapper = tagMapper;
+    }
+
+    @Override
+    public int create(final TagDTO tagDTO) {
+        TagDO tagRelationDO = TagDO.buildTagDO(tagDTO);","[{'comment': 'It is suggested that we construct ext ourselves, and store the full json data of the parent tag.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/TagServiceImpl.java,"@@ -0,0 +1,88 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.service.impl;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
+import org.apache.shenyu.admin.mapper.TagMapper;
+import org.apache.shenyu.admin.model.dto.TagDTO;
+import org.apache.shenyu.admin.model.entity.TagDO;
+import org.apache.shenyu.admin.model.query.TagQuery;
+import org.apache.shenyu.admin.model.vo.TagVO;
+import org.apache.shenyu.admin.service.TagService;
+import org.apache.shenyu.admin.utils.Assert;
+import org.springframework.stereotype.Service;
+
+/**
+ * Implementation of the {@link org.apache.shenyu.admin.service.TagService}.
+ */
+@Service
+public class TagServiceImpl implements TagService {
+
+    private TagMapper tagMapper;
+
+    public TagServiceImpl(final TagMapper tagMapper) {
+        this.tagMapper = tagMapper;
+    }
+
+    @Override
+    public int create(final TagDTO tagDTO) {
+        TagDO tagRelationDO = TagDO.buildTagDO(tagDTO);
+        return tagMapper.insert(tagRelationDO);
+    }
+
+    @Override
+    public int update(final TagDTO tagDTO) {
+        TagDO before = tagMapper.selectByPrimaryKey(tagDTO.getId());
+        Assert.notNull(before, ""the updated rule is not found"");
+        TagDO tagDO = TagDO.buildTagDO(tagDTO);
+        return tagMapper.updateByPrimaryKeySelective(tagDO);","[{'comment': 'If parent tag id had benn updated, we need to replace ext.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/TagController.java,"@@ -0,0 +1,130 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.controller;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import javax.validation.Valid;
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
+import org.apache.shenyu.admin.mapper.RuleMapper;
+import org.apache.shenyu.admin.model.dto.TagDTO;
+import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
+import org.apache.shenyu.admin.model.vo.TagVO;
+import org.apache.shenyu.admin.service.TagService;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.admin.validation.annotation.Existed;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@Validated
+@RestController
+@RequestMapping(""/tag"")
+public class TagController {
+
+    private final TagService tagService;
+
+    public TagController(final TagService tagService) {
+        this.tagService = tagService;
+    }
+
+    /**
+     * create tag.
+     *
+     * @param tagDTO tagDTO.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @PostMapping("""")
+    public ShenyuAdminResult createTag(@Valid @RequestBody final TagDTO tagDTO) {
+        Integer createCount = tagService.create(tagDTO);
+        return ShenyuAdminResult.success(ShenyuResultMessage.CREATE_SUCCESS, createCount);
+    }
+
+    /**
+     * detail tag.
+     *
+     * @param id tag name.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{name}"")
+    public ShenyuAdminResult detailTag(@PathVariable(""id"") @Valid
+                                        @Existed(provider = RuleMapper.class,
+                                                message = ""tag is not existed"") final String id) {
+        TagVO tagVO = tagService.findById(id);
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagVO);
+    }
+
+    /**
+     * querylist by parentTagId.
+     *
+     * @param parentTagId  parentTagId.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{parentTagId}"")
+    public ShenyuAdminResult queryListByParentTagId(@PathVariable(""parentTagId"") @Valid final String parentTagId) {
+        List<TagVO> tagVOList = Optional.ofNullable(tagService.findByParentTagId(parentTagId)).orElse(Lists.newArrayList());
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagVOList);
+    }
+","[{'comment': 'Lost `queryRootTag` http interface.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/TagController.java,"@@ -0,0 +1,130 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.controller;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import javax.validation.Valid;
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
+import org.apache.shenyu.admin.mapper.RuleMapper;
+import org.apache.shenyu.admin.model.dto.TagDTO;
+import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
+import org.apache.shenyu.admin.model.vo.TagVO;
+import org.apache.shenyu.admin.service.TagService;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.admin.validation.annotation.Existed;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@Validated
+@RestController
+@RequestMapping(""/tag"")
+public class TagController {
+
+    private final TagService tagService;
+
+    public TagController(final TagService tagService) {
+        this.tagService = tagService;
+    }
+
+    /**
+     * create tag.
+     *
+     * @param tagDTO tagDTO.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @PostMapping("""")
+    public ShenyuAdminResult createTag(@Valid @RequestBody final TagDTO tagDTO) {
+        Integer createCount = tagService.create(tagDTO);
+        return ShenyuAdminResult.success(ShenyuResultMessage.CREATE_SUCCESS, createCount);
+    }
+
+    /**
+     * detail tag.
+     *
+     * @param id tag name.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{name}"")
+    public ShenyuAdminResult detailTag(@PathVariable(""id"") @Valid
+                                        @Existed(provider = RuleMapper.class,
+                                                message = ""tag is not existed"") final String id) {
+        TagVO tagVO = tagService.findById(id);
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagVO);
+    }
+
+    /**
+     * querylist by parentTagId.
+     *
+     * @param parentTagId  parentTagId.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{parentTagId}"")
+    public ShenyuAdminResult queryListByParentTagId(@PathVariable(""parentTagId"") @Valid final String parentTagId) {
+        List<TagVO> tagVOList = Optional.ofNullable(tagService.findByParentTagId(parentTagId)).orElse(Lists.newArrayList());
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagVOList);
+    }
+
+    /**
+     * detail tag.
+     *
+     * @param name tag name.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{id}"")
+    public ShenyuAdminResult queryByName(@PathVariable(""name"") @Valid final String name) {
+        TagVO tagVO = tagService.findByQuery(name);","[{'comment': 'Multiple results may be found.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/TagServiceImpl.java,"@@ -0,0 +1,88 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.service.impl;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
+import org.apache.shenyu.admin.mapper.TagMapper;
+import org.apache.shenyu.admin.model.dto.TagDTO;
+import org.apache.shenyu.admin.model.entity.TagDO;
+import org.apache.shenyu.admin.model.query.TagQuery;
+import org.apache.shenyu.admin.model.vo.TagVO;
+import org.apache.shenyu.admin.service.TagService;
+import org.apache.shenyu.admin.utils.Assert;
+import org.springframework.stereotype.Service;
+
+/**
+ * Implementation of the {@link org.apache.shenyu.admin.service.TagService}.
+ */
+@Service
+public class TagServiceImpl implements TagService {
+
+    private TagMapper tagMapper;
+
+    public TagServiceImpl(final TagMapper tagMapper) {
+        this.tagMapper = tagMapper;
+    }
+
+    @Override
+    public int create(final TagDTO tagDTO) {
+        TagDO tagRelationDO = TagDO.buildTagDO(tagDTO);
+        return tagMapper.insert(tagRelationDO);
+    }
+
+    @Override
+    public int update(final TagDTO tagDTO) {
+        TagDO before = tagMapper.selectByPrimaryKey(tagDTO.getId());
+        Assert.notNull(before, ""the updated rule is not found"");
+        TagDO tagDO = TagDO.buildTagDO(tagDTO);
+        return tagMapper.updateByPrimaryKeySelective(tagDO);
+    }
+
+    @Override
+    public int delete(final List<String> ids) {
+        return tagMapper.deleteByIds(ids);
+    }
+
+    @Override
+    public TagVO findById(final String id) {
+        TagDO tagDO = tagMapper.selectByPrimaryKey(id);
+        return TagVO.buildTagVO(tagDO);
+    }
+
+    @Override
+    public TagVO findByQuery(final String tagName) {
+        TagVO tagVO = new TagVO();
+        TagQuery tagQuery = new TagQuery();
+        List<TagDO> tagDOS = Optional.ofNullable(tagMapper.selectByQuery(tagQuery)).orElse(Lists.newArrayList());
+        if (tagDOS.size() > 0) {
+            tagVO = TagVO.buildTagVO(tagDOS.get(0));
+        }
+        return tagVO;
+    }
+
+    @Override
+    public List<TagVO> findByParentTagId(final String parentTagId) {
+        TagQuery tagQuery = new TagQuery();
+        tagQuery.setParentTagId(parentTagId);
+        List<TagDO> tagRelationDOS = Optional.ofNullable(tagMapper.selectByQuery(tagQuery)).orElse(Lists.newArrayList());
+        return tagRelationDOS.stream().map(TagVO::buildTagVO).collect(Collectors.toList());","[{'comment': 'You need to tell the front end whether the nesting ends, so that the front end can judge whether to call the interface of the query api.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/TagRelationController.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.controller;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import javax.validation.Valid;
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
+import org.apache.shenyu.admin.mapper.RuleMapper;
+import org.apache.shenyu.admin.model.dto.TagRelationDTO;
+import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
+import org.apache.shenyu.admin.model.vo.TagRelationVO;
+import org.apache.shenyu.admin.service.TagRelationService;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.admin.validation.annotation.Existed;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@Validated
+@RestController
+@RequestMapping(""/tag-relation/"")
+public class TagRelationController {
+
+    private final TagRelationService tagRelationService;
+
+    public TagRelationController(final TagRelationService tagRelationService) {
+        this.tagRelationService = tagRelationService;
+    }
+
+    /**
+     * detail tag relation.
+     *
+     * @param id tag relation id.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{id}"")
+    public ShenyuAdminResult detailRule(@PathVariable(""id"") @Valid
+                                        @Existed(provider = RuleMapper.class,
+                                                message = ""tag relation is not existed"") final String id) {
+        TagRelationVO tagRelationVO = tagRelationService.findById(id);
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagRelationVO);
+    }
+
+    /**
+     * list tag relation.
+     *
+     * @param tagId tag tagId.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{tagId}"")
+    public ShenyuAdminResult queryListByTagId(@PathVariable(""tagId"") @Valid final String tagId) {
+        List<TagRelationVO> tagRelationVOs = Optional.ofNullable(tagRelationService.findByTagId(tagId)).orElse(Lists.newArrayList());
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagRelationVOs);
+    }","[{'comment': '`queryListByTagId` should rename to `queryApiByTagId` and needs api deatiled infoformation.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/TagRelationController.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.controller;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import javax.validation.Valid;
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
+import org.apache.shenyu.admin.mapper.RuleMapper;
+import org.apache.shenyu.admin.model.dto.TagRelationDTO;
+import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
+import org.apache.shenyu.admin.model.vo.TagRelationVO;
+import org.apache.shenyu.admin.service.TagRelationService;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.admin.validation.annotation.Existed;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@Validated
+@RestController
+@RequestMapping(""/tag-relation/"")
+public class TagRelationController {
+
+    private final TagRelationService tagRelationService;
+
+    public TagRelationController(final TagRelationService tagRelationService) {
+        this.tagRelationService = tagRelationService;
+    }
+
+    /**
+     * detail tag relation.
+     *
+     * @param id tag relation id.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{id}"")
+    public ShenyuAdminResult detailRule(@PathVariable(""id"") @Valid
+                                        @Existed(provider = RuleMapper.class,
+                                                message = ""tag relation is not existed"") final String id) {
+        TagRelationVO tagRelationVO = tagRelationService.findById(id);
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagRelationVO);
+    }","[{'comment': 'What scenarios need this interface?', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/TagRelationController.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.controller;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import javax.validation.Valid;
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
+import org.apache.shenyu.admin.mapper.RuleMapper;
+import org.apache.shenyu.admin.model.dto.TagRelationDTO;
+import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
+import org.apache.shenyu.admin.model.vo.TagRelationVO;
+import org.apache.shenyu.admin.service.TagRelationService;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.admin.validation.annotation.Existed;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@Validated
+@RestController
+@RequestMapping(""/tag-relation/"")
+public class TagRelationController {
+
+    private final TagRelationService tagRelationService;
+
+    public TagRelationController(final TagRelationService tagRelationService) {
+        this.tagRelationService = tagRelationService;
+    }
+
+    /**
+     * detail tag relation.
+     *
+     * @param id tag relation id.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{id}"")
+    public ShenyuAdminResult detailRule(@PathVariable(""id"") @Valid
+                                        @Existed(provider = RuleMapper.class,
+                                                message = ""tag relation is not existed"") final String id) {
+        TagRelationVO tagRelationVO = tagRelationService.findById(id);
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagRelationVO);
+    }
+
+    /**
+     * list tag relation.
+     *
+     * @param tagId tag tagId.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{tagId}"")
+    public ShenyuAdminResult queryListByTagId(@PathVariable(""tagId"") @Valid final String tagId) {
+        List<TagRelationVO> tagRelationVOs = Optional.ofNullable(tagRelationService.findByTagId(tagId)).orElse(Lists.newArrayList());
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagRelationVOs);
+    }
+
+    /**
+     * list tag relation.
+     *
+     * @param apiId apiId.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{apiId}"")
+    public ShenyuAdminResult queryListByApiId(@PathVariable(""apiId"") @Valid final String apiId) {
+        List<TagRelationVO> tagRelationVOs = Optional.ofNullable(tagRelationService.findApiId(apiId)).orElse(Lists.newArrayList());
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagRelationVOs);
+    }","[{'comment': ""I don't think this interface is needed, when querying the API detail, tags will be bringed."", 'commenter': 'loongs-zhang'}, {'comment': 'the result of `ShenyuAdminResult` sould contains `List<ApiVO>`.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/TagDTO.java,"@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.model.dto;
+
+import java.io.Serializable;
+
+/**
+ * this tag from web front.
+ */
+public class TagDTO implements Serializable {
+
+    private static final long serialVersionUID = 1680976393721978145L;
+
+    /**
+     * primary key.
+     */
+    private String id;","[{'comment': 'maybe add some judge like `SelectorDTO#id`?', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/TagRelationDTO.java,"@@ -0,0 +1,102 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.model.dto;
+
+import java.io.Serializable;
+
+/**
+ * this tag relation from web front.
+ */
+public class TagRelationDTO implements Serializable {
+
+    private static final long serialVersionUID = -8300093387770924248L;
+
+    /**
+     * primary key.
+     */
+    private String id;","[{'comment': 'maybe add some judge like `SelectorDTO#id`?', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/TagRelationVO.java,"@@ -0,0 +1,173 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.model.vo;
+
+import java.io.Serializable;
+import org.apache.shenyu.admin.model.entity.TagRelationDO;
+import org.apache.shenyu.common.utils.DateUtils;
+
+/**
+ * this is tag relation view to web front.
+ */
+public class TagRelationVO implements Serializable {","[{'comment': 'thsi class maybe not needed.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagMapperTest.java,"@@ -84,6 +87,26 @@ public void testUpdateByPrimaryKey() {
         assertThat(tagDO.getTagDesc().equals(""2222222""), equalTo(true));
     }
 
+    @Test
+    public void testSelectByQuery() {
+        TagDO record = buildTagDO();
+        int count = tagMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        TagQuery tagQuery = new TagQuery();
+        tagQuery.setName(""111"");
+        List<TagDO> tagDOList = tagMapper.selectByQuery(tagQuery);
+        assertThat(tagDOList.size() == 1, equalTo(true));","[{'comment': 'use `assertEquals` to replace.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagRelationMapperTest.java,"@@ -81,6 +84,26 @@ public void testUpdateByPrimaryKey() {
         assertThat(tagRelationDO.getTagId().equals(""2222222""), equalTo(true));
     }
 
+    @Test
+    public void testSelectByQuery() {
+        TagRelationDO record = buildTagRelationDO();
+        int count = tagRelationMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        TagRelationQuery tagQuery = new TagRelationQuery();
+        tagQuery.setApiId(""123"");
+        List<TagRelationDO> tagDOList = tagRelationMapper.selectByQuery(tagQuery);
+        assertThat(tagDOList.size() == 1, equalTo(true));","[{'comment': 'use `assertEquals` to replace.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/service/TagRelationServiceTest.java,"@@ -0,0 +1,125 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.service;
+
+import com.google.common.collect.Lists;
+import java.sql.Timestamp;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.List;
+import org.apache.shenyu.admin.mapper.TagRelationMapper;
+import org.apache.shenyu.admin.model.dto.TagRelationDTO;
+import org.apache.shenyu.admin.model.entity.TagRelationDO;
+import org.apache.shenyu.admin.model.vo.TagRelationVO;
+import org.apache.shenyu.admin.service.impl.TagRelationServiceImpl;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.BDDMockito.given;
+
+/**
+ * Test cases for TagRelationService.
+ */
+@ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
+public class TagRelationServiceTest {
+
+    @InjectMocks
+    private TagRelationServiceImpl tagRelationService;
+
+    @Mock
+    private TagRelationMapper tagRelationMapper;
+
+    @Test
+    public void testCreate() {
+        TagRelationDTO tagRelationDTO = buildTagRelationDTO();
+        given(this.tagRelationMapper.insert(any())).willReturn(1);
+        int cnt = tagRelationService.create(tagRelationDTO);
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testUpdate() {
+        TagRelationDTO tagRelationDTO = buildTagRelationDTO();
+        given(this.tagRelationMapper.updateByPrimaryKeySelective(any())).willReturn(1);
+        given(this.tagRelationMapper.selectByPrimaryKey(any())).willReturn(buildTagRelationDO());
+        int cnt = tagRelationService.update(tagRelationDTO);
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testDelete() {
+        given(this.tagRelationMapper.deleteByIds(any())).willReturn(1);
+        int cnt = tagRelationService.delete(Lists.newArrayList(""11111""));
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testFindId() {
+        given(this.tagRelationMapper.selectByPrimaryKey(any())).willReturn(buildTagRelationDO());
+        TagRelationVO tagRelationVO = tagRelationService.findById(""11111"");
+        assertTrue(tagRelationVO != null);","[{'comment': 'use `assertNotNull` to replace.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/service/TagServiceTest.java,"@@ -0,0 +1,123 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.service;
+
+import com.google.common.collect.Lists;
+import java.sql.Timestamp;
+import java.time.LocalDateTime;
+import java.util.List;
+import org.apache.shenyu.admin.mapper.TagMapper;
+import org.apache.shenyu.admin.model.dto.TagDTO;
+import org.apache.shenyu.admin.model.entity.TagDO;
+import org.apache.shenyu.admin.model.vo.TagVO;
+import org.apache.shenyu.admin.service.impl.TagServiceImpl;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.BDDMockito.given;
+
+/**
+ * Test cases for TagService.
+ */
+@ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
+public class TagServiceTest {
+
+    @Mock
+    private TagMapper tagMapper;
+
+    @InjectMocks
+    private TagServiceImpl tagService;
+
+    @Test
+    public void testCreate() {
+        given(this.tagMapper.insert(any())).willReturn(1);
+        int cnt = tagService.create(buildTagDTO());
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testUpdate() {
+        TagDTO tagDTO = buildTagDTO();
+        given(this.tagMapper.updateByPrimaryKeySelective(any())).willReturn(1);
+        given(this.tagMapper.selectByPrimaryKey(any())).willReturn(buildTagDO());
+        int cnt = tagService.update(tagDTO);
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testDelete() {
+        given(this.tagMapper.deleteByIds(any())).willReturn(1);
+        int cnt = tagService.delete(Lists.newArrayList(""11111""));
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testFindById() {
+        given(this.tagMapper.selectByPrimaryKey(any())).willReturn(buildTagDO());
+        TagVO tagVO = tagService.findById(""123"");
+        assertTrue(tagVO != null);","[{'comment': 'use `assertNotNull` to replace.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/service/TagServiceTest.java,"@@ -0,0 +1,123 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.service;
+
+import com.google.common.collect.Lists;
+import java.sql.Timestamp;
+import java.time.LocalDateTime;
+import java.util.List;
+import org.apache.shenyu.admin.mapper.TagMapper;
+import org.apache.shenyu.admin.model.dto.TagDTO;
+import org.apache.shenyu.admin.model.entity.TagDO;
+import org.apache.shenyu.admin.model.vo.TagVO;
+import org.apache.shenyu.admin.service.impl.TagServiceImpl;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.BDDMockito.given;
+
+/**
+ * Test cases for TagService.
+ */
+@ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
+public class TagServiceTest {
+
+    @Mock
+    private TagMapper tagMapper;
+
+    @InjectMocks
+    private TagServiceImpl tagService;
+
+    @Test
+    public void testCreate() {
+        given(this.tagMapper.insert(any())).willReturn(1);
+        int cnt = tagService.create(buildTagDTO());
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testUpdate() {
+        TagDTO tagDTO = buildTagDTO();
+        given(this.tagMapper.updateByPrimaryKeySelective(any())).willReturn(1);
+        given(this.tagMapper.selectByPrimaryKey(any())).willReturn(buildTagDO());
+        int cnt = tagService.update(tagDTO);
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testDelete() {
+        given(this.tagMapper.deleteByIds(any())).willReturn(1);
+        int cnt = tagService.delete(Lists.newArrayList(""11111""));
+        assertEquals(cnt, 1);
+    }
+
+    @Test
+    public void testFindById() {
+        given(this.tagMapper.selectByPrimaryKey(any())).willReturn(buildTagDO());
+        TagVO tagVO = tagService.findById(""123"");
+        assertTrue(tagVO != null);
+    }
+
+    @Test
+    public void testFindByQuery() {
+        given(this.tagMapper.selectByQuery(any())).willReturn(Lists.newArrayList(buildTagDO()));
+        TagVO tagVO = tagService.findByQuery(""film"");
+        assertTrue(tagVO != null);","[{'comment': 'use `assertNotNull` to replace.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/TagRelationController.java,"@@ -0,0 +1,89 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.controller;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Optional;
+import javax.validation.Valid;
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
+import org.apache.shenyu.admin.model.dto.TagRelationDTO;
+import org.apache.shenyu.admin.model.entity.TagRelationDO;
+import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
+import org.apache.shenyu.admin.service.TagRelationService;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@Validated
+@RestController
+@RequestMapping(""/tag-relation/"")
+public class TagRelationController {
+
+    private final TagRelationService tagRelationService;
+
+    public TagRelationController(final TagRelationService tagRelationService) {
+        this.tagRelationService = tagRelationService;
+    }
+
+    /**
+     * list tag relation.
+     *
+     * @param tagId tag tagId.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/{tagId}"")
+    public ShenyuAdminResult queryApiByTagId(@PathVariable(""tagId"") @Valid final String tagId) {
+        List<TagRelationDO> tagRelationVOs = Optional.ofNullable(tagRelationService.findByTagId(tagId)).orElse(Lists.newArrayList());
+        return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, tagRelationVOs);
+    }
+
+    /**
+     * update tag relation.
+     *
+     * @param id    primary key.
+     * @param tagRelationDTO tagRelationDTO.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @PutMapping(""/{id}"")
+    public ShenyuAdminResult updateTagRelation(@PathVariable(""id"") @Valid final String id,
+                                       @Valid @RequestBody final TagRelationDTO tagRelationDTO) {
+        tagRelationDTO.setId(id);
+        Integer updateCount = tagRelationService.update(tagRelationDTO);
+        return ShenyuAdminResult.success(ShenyuResultMessage.UPDATE_SUCCESS, updateCount);
+    }
+
+    /**
+     * delete tag relation.
+     *
+     * @param ids primary key.
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @DeleteMapping(""/batch"")
+    public ShenyuAdminResult deleteRules(@RequestBody @NotEmpty final List<@NotBlank String> ids) {","[{'comment': '`deleteRules` renames to `deleteTagRelation` shall be better.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/TagServiceImpl.java,"@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.service.impl;
+
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.stream.Collectors;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.admin.mapper.TagMapper;
+import org.apache.shenyu.admin.model.dto.TagDTO;
+import org.apache.shenyu.admin.model.entity.TagDO;
+import org.apache.shenyu.admin.model.query.TagQuery;
+import org.apache.shenyu.admin.model.vo.TagVO;
+import org.apache.shenyu.admin.service.TagService;
+import org.apache.shenyu.admin.utils.Assert;
+import org.apache.shenyu.common.constant.AdminConstants;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.springframework.stereotype.Service;
+
+/**
+ * Implementation of the {@link org.apache.shenyu.admin.service.TagService}.
+ */
+@Service
+public class TagServiceImpl implements TagService {
+
+    private TagMapper tagMapper;
+
+    public TagServiceImpl(final TagMapper tagMapper) {
+        this.tagMapper = tagMapper;
+    }
+
+    @Override
+    public int create(final TagDTO tagDTO) {
+        Assert.notNull(tagDTO, ""tagDTO is not allowed null"");
+        Assert.notNull(tagDTO.getParentTagId(), ""parent tag id is not allowed null"");
+        String ext = """";
+        if (!tagDTO.getParentTagId().equals(AdminConstants.TAG_ROOT_PARENT_ID)) {
+            TagDO tagDO = tagMapper.selectByPrimaryKey(tagDTO.getParentTagId());
+            ext = GsonUtils.getInstance().toJson(tagDO);
+        }
+        TagDO tagDO = TagDO.buildTagDO(tagDTO);","[{'comment': '`ext` has a little problem, please check https://shenyu.apache.org/zh/docs/next/design/database-design#api%E6%96%87%E6%A1%A3 for more design detail.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagMapperTest.java,"@@ -71,6 +76,8 @@ public void testSelectByPrimaryKey() {
         assertThat(count, greaterThan(0));
         TagDO tagDO = tagMapper.selectByPrimaryKey(record.getId());
         assertThat(tagDO != null, equalTo(true));
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));","[{'comment': 'just use `assertEquals`.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagMapperTest.java,"@@ -82,6 +89,44 @@ public void testUpdateByPrimaryKey() {
         tagMapper.updateByPrimaryKey(record);
         TagDO tagDO = tagMapper.selectByPrimaryKey(record.getId());
         assertThat(tagDO.getTagDesc().equals(""2222222""), equalTo(true));
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));","[{'comment': 'just use `assertEquals`.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagMapperTest.java,"@@ -82,6 +89,44 @@ public void testUpdateByPrimaryKey() {
         tagMapper.updateByPrimaryKey(record);
         TagDO tagDO = tagMapper.selectByPrimaryKey(record.getId());
         assertThat(tagDO.getTagDesc().equals(""2222222""), equalTo(true));
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));
+    }
+
+    @Test
+    public void testSelectByQuery() {
+        TagDO record = buildTagDO();
+        int count = tagMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        TagQuery tagQuery = new TagQuery();
+        tagQuery.setName(""111"");
+        List<TagDO> tagDOList = tagMapper.selectByQuery(tagQuery);
+        assertEquals(tagDOList.size(), 1);
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));","[{'comment': 'just use `assertEquals`.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagMapperTest.java,"@@ -82,6 +89,44 @@ public void testUpdateByPrimaryKey() {
         tagMapper.updateByPrimaryKey(record);
         TagDO tagDO = tagMapper.selectByPrimaryKey(record.getId());
         assertThat(tagDO.getTagDesc().equals(""2222222""), equalTo(true));
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));
+    }
+
+    @Test
+    public void testSelectByQuery() {
+        TagDO record = buildTagDO();
+        int count = tagMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        TagQuery tagQuery = new TagQuery();
+        tagQuery.setName(""111"");
+        List<TagDO> tagDOList = tagMapper.selectByQuery(tagQuery);
+        assertEquals(tagDOList.size(), 1);
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));
+    }
+
+    @Test
+    public void testDeleteIds() {
+        TagDO record = buildTagDO();
+        int count = tagMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        int deleteCnt = tagMapper.deleteByIds(Lists.newArrayList(record.getId()));
+        assertThat(deleteCnt, greaterThan(0));
+    }
+
+    @Test
+    public void testSelectByParentTagIds() {
+        TagDO record = buildTagDO();
+        int count = tagMapper.insertSelective(record);
+        assertEquals(count, 1);
+        List<String> list = new ArrayList<>();
+        list.add(""0"");
+        List<TagDO> tagDOS = tagMapper.selectByParentTagIds(list);
+        assertEquals(tagDOS.size(), 1);
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));","[{'comment': 'just use `assertEquals`.', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagRelationMapperTest.java,"@@ -81,6 +85,26 @@ public void testUpdateByPrimaryKey() {
         assertThat(tagRelationDO.getTagId().equals(""2222222""), equalTo(true));
     }
 
+    @Test
+    public void testSelectByQuery() {
+        TagRelationDO record = buildTagRelationDO();
+        int count = tagRelationMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        TagRelationQuery tagQuery = new TagRelationQuery();
+        tagQuery.setApiId(""123"");
+        List<TagRelationDO> tagDOList = tagRelationMapper.selectByQuery(tagQuery);
+        assertEquals(tagDOList.size(), 1);
+    }
+
+    @Test
+    public void testDeleteIds() {
+        TagRelationDO record = buildTagRelationDO();
+        int count = tagRelationMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        int deleteCnt = tagRelationMapper.deleteByIds(Lists.newArrayList(record.getId()));
+        assertThat(deleteCnt, greaterThan(0));","[{'comment': 'How about deleting all data first when run `testDeleteIds`?', 'commenter': 'loongs-zhang'}]"
4116,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagMapperTest.java,"@@ -82,6 +89,44 @@ public void testUpdateByPrimaryKey() {
         tagMapper.updateByPrimaryKey(record);
         TagDO tagDO = tagMapper.selectByPrimaryKey(record.getId());
         assertThat(tagDO.getTagDesc().equals(""2222222""), equalTo(true));
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));
+    }
+
+    @Test
+    public void testSelectByQuery() {
+        TagDO record = buildTagDO();
+        int count = tagMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        TagQuery tagQuery = new TagQuery();
+        tagQuery.setName(""111"");
+        List<TagDO> tagDOList = tagMapper.selectByQuery(tagQuery);
+        assertEquals(tagDOList.size(), 1);
+        int delete = tagMapper.deleteByPrimaryKey(record.getId());
+        assertThat(delete, equalTo(1));
+    }
+
+    @Test
+    public void testDeleteIds() {
+        TagDO record = buildTagDO();
+        int count = tagMapper.insertSelective(record);
+        assertThat(count, greaterThan(0));
+        int deleteCnt = tagMapper.deleteByIds(Lists.newArrayList(record.getId()));
+        assertThat(deleteCnt, greaterThan(0));","[{'comment': 'How about deleting all data first when run `testDeleteIds`?', 'commenter': 'loongs-zhang'}]"
4126,shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/DetailDO.java,"@@ -0,0 +1,268 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.model.entity;
+
+import java.sql.Timestamp;
+import java.util.Objects;
+
+/**
+ * DetailDO.
+ */
+public class DetailDO extends BaseDO {
+
+    /**
+     * the field id.
+     */
+    private String fieldId;
+
+    /**
+     * is example.
+     */
+    private Boolean example;
+
+    /**
+     * field value.
+     */
+    private String fieldValue;
+
+    /**
+     * value desc.
+     */
+    private String valueDesc;
+","[{'comment': 'remove `field_desc` in `detail-sqlmap.xml`, when does this can be fixed ?', 'commenter': 'loongs-zhang'}, {'comment': 'ok  i well fix it', 'commenter': 'ywj1352'}]"
4133,shenyu-plugin/shenyu-plugin-jwt/src/test/resources/META-INF/shenyu/org.apache.shenyu.plugin.jwt.rule.JwtRuleHandle,"@@ -0,0 +1,17 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+custom=org.apache.shenyu.plugin.jwt.rule.CustomJwtRuleHandle","[{'comment': 'why do you use spi? do you know spi？', 'commenter': 'moremind'}]"
4133,shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/strategy/JwtConvertStrategy.java,"@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.jwt.strategy;
+
+import org.apache.shenyu.plugin.jwt.rule.JwtRuleHandle;
+import org.apache.shenyu.spi.SPI;
+import org.springframework.web.server.ServerWebExchange;
+
+import java.util.Map;
+
+@SPI
+public interface JwtConvertStrategy<T extends JwtRuleHandle> {
+
+    /**
+     * parse handleJson into jwtRuleHandle.
+     *
+     * @param handleJson handleJson from rule
+     * @return jwtRuleHandle
+     */
+    T parseHandleJson(String handleJson);","[{'comment': 'You can skip generics here, \r\n```java\r\nJwtRuleHandle parseHandleJson(String handleJson);\r\n```\r\nThis also returns a subclass without warning\r\n\r\nno `SuppressWarnings `', 'commenter': 'li-keguo'}, {'comment': 'Thank you for the advice,but  I think it has a problem  . If you replace generics by JwtRuleHandle,  it can happen class type of the result of executing `parseHandleJson` is diffrent from first parameter of    `ServerWebExchange convert`. I think it is unreasonable for this to happen', 'commenter': 'tian-pengfei'}, {'comment': ""parseHandleJson must return : JwtRuleHandle or ? extent JwtRuleHandle\r\n\r\nGenerics are weakly constrained and type-ambiguous.\r\nIt's better to have a strong constraint here\r\n\r\neg:\r\n```java\r\n@SuppressWarnings\r\npublic class MyJwtConvertStrategy implements JwtConvertStrategy {\r\n\r\n   Object parseHandleJson(String handleJson){\r\n    // ... ... \r\n    }\r\n}\r\n```\r\n"", 'commenter': 'li-keguo'}]"
4133,shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/handle/JwtPluginDataHandler.java,"@@ -50,11 +50,12 @@ public void handlerPlugin(final PluginData pluginData) {
         Singleton.INST.single(JwtConfig.class, jwtConfig);
     }
 
+    @SuppressWarnings(""rawtypes"")
     @Override
     public void handlerRule(final RuleData ruleData) {
         Optional.ofNullable(ruleData.getHandle()).ifPresent(s -> {
-            JwtRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(s, JwtRuleHandle.class);
-            CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), ruleHandle);
+            JwtRuleHandle jwtRuleHandle2 = JwtRuleHandle.newInstance(ruleData.getHandle());","[{'comment': 'not named variable with 2', 'commenter': 'moremind'}]"
4133,shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/strategy/DefaultJwtConvertStrategy.java,"@@ -0,0 +1,111 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.jwt.strategy;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.plugin.jwt.rule.DefaultJwtRuleHandle;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.server.reactive.ServerHttpRequest;
+import org.springframework.web.server.ServerWebExchange;
+
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class DefaultJwtConvertStrategy implements JwtConvertStrategy<DefaultJwtRuleHandle> {","[{'comment': 'you are not use spi', 'commenter': 'moremind'}]"
4165,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/client/AbstractShenyuSdkClient.java,"@@ -62,12 +66,14 @@ public abstract class AbstractShenyuSdkClient implements ShenyuSdkClient {
 
     private final Map<String, List<InstanceEntity>> watcherInstanceRegisterMap = new HashMap<>();
 
+    private final List<ShenyuSdkRequestInterceptor> requestInterceptors = new ArrayList<>();","[{'comment': 'thread safety?', 'commenter': 'moremind'}, {'comment': 'i think ShenyuSdkClient just init once in ShenyuSdkAutoConfiguration#shenyu-spring-boot-starter-sdk', 'commenter': 'ywj1352'}]"
4165,shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/client/AbstractShenyuSdkClient.java,"@@ -89,16 +95,39 @@ public void init(final RegisterConfig registerConfig, final ShenyuInstanceRegist
         this.registerConfig = registerConfig;
         this.registerRepository = instanceRegisterRepository;
         Properties props = registerConfig.getProps();
-        Boolean retryEnable = Optional.ofNullable(props.get(""retry.enable"")).map(e -> (boolean) e).orElse(false);
-        Long period = Optional.ofNullable(props.get(""retry.period"")).map(l -> (Long) l).orElse(100L);
-        long maxPeriod = Optional.ofNullable(props.get(""retry.maxPeriod"")).map(l -> (Long) l).orElse(SECONDS.toMillis(1));
-        int maxAttempts = Optional.ofNullable(props.get(""retry.maxAttempts"")).map(l -> (int) l).orElse(5);
+        Boolean retryEnable = Optional.ofNullable(props.get(""retry.enable"")).map(e -> Boolean.parseBoolean(e.toString())).orElse(false);
+        Long period = Optional.ofNullable(props.get(""retry.period"")).map(l -> Long.parseLong(l.toString())).orElse(100L);
+        long maxPeriod = Optional.ofNullable(props.get(""retry.maxPeriod"")).map(l -> Long.parseLong(l.toString())).orElse(SECONDS.toMillis(1));
+        int maxAttempts = Optional.ofNullable(props.get(""retry.maxAttempts"")).map(l -> Integer.parseInt(l.toString())).orElse(5);
         this.algorithm = props.getProperty(""algorithm"", ""roundRobin"");
         this.scheme = props.getProperty(""scheme"", ""http"");
         this.retryer = retryEnable ? new Retryer.DefaultRetry(period, maxPeriod, maxAttempts) : Retryer.NEVER_RETRY;
+        this.initRequestInterceptors(registerConfig);
         this.initClient(props);
     }
 
+    private void initRequestInterceptors(final RegisterConfig registerConfig) {
+        boolean requestInterceptorEnable = Optional.ofNullable(registerConfig.getProps().get(""requestInterceptor.enable"")).map(e -> Boolean.parseBoolean(e.toString())).orElse(false);
+        Object requestInterceptorClass;
+        int listIdx = 0;
+        try {
+            if (requestInterceptorEnable) {
+                while ((requestInterceptorClass = registerConfig.getProps().get(""requestInterceptor.classes."" + listIdx)) != null) {
+                    Class<?> aClass = ClassUtils.getClass(requestInterceptorClass.toString());
+                    Type[] genericInterfaces = aClass.getGenericInterfaces();
+                    for (Type type : genericInterfaces) {
+                        if (type.getTypeName().equals(ShenyuSdkRequestInterceptor.class.getTypeName())) {
+                            requestInterceptors.add((ShenyuSdkRequestInterceptor) aClass.newInstance());","[{'comment': 'if requestInterceptor is spring bean or  there are dependencies inside？ this can creater？', 'commenter': 'yu199195'}, {'comment': 'i change it', 'commenter': 'ywj1352'}]"
4165,shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-http/src/main/java/org/apache/shenyu/examples/sdk/http/config/SdkConfig.java,"@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.examples.sdk.http.config;
+
+import org.apache.shenyu.sdk.core.ShenyuRequest;
+import org.apache.shenyu.sdk.core.interceptor.ShenyuSdkRequestInterceptor;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import java.util.Collections;
+
+/**
+ * SdkConfig.
+ */
+@Configuration
+public class SdkConfig {
+
+    /**
+     * getShenyuSdkRequestInterceptor.
+     *
+     * @return ShenyuSdkRequestInterceptor
+     */
+    @Bean
+    public ShenyuSdkRequestInterceptor getShenyuSdkRequestInterceptor() {
+        return new ShenyuSdkRequestInterceptor() {
+            @Override
+            public void apply(final ShenyuRequest shenyuRequest) {
+                shenyuRequest.getHeaders().put(""X-Auth"", Collections.singleton(""currentToken""));","[{'comment': 'Is this a must?', 'commenter': 'yu199195'}, {'comment': 'it just in shenyu-examples-sdk ', 'commenter': 'ywj1352'}]"
4165,shenyu-spring-boot-starter/shenyu-spring-boot-starter-sdk/src/main/java/org/apache/shenyu/springboot/starter/sdk/ShenyuSdkAutoConfiguration.java,"@@ -69,16 +70,18 @@ public Contract springMvcContract() {
      * okHttpShenyuSdkClient.
      *
      * @param config config
+     * @param requestInterceptors the request interceptors
      * @param instanceRegisterRepository the instance register repository
      * @return {@link ShenyuSdkClient}
      */
     @Bean
     public ShenyuSdkClient shenyuSdkClient(final RegisterConfig config,
+                                           @Autowired(required = false) final List<ShenyuSdkRequestInterceptor> requestInterceptors,","[{'comment': 'maybe used ObjectProvider<List<ShenyuSdkRequestInterceptor>> requestInterceptors ?', 'commenter': 'yu199195'}, {'comment': 'It makes sense', 'commenter': 'ywj1352'}]"
4166,shenyu-bootstrap/pom.xml,"@@ -388,6 +380,41 @@
         <!-- shenyu spring cloud alibaba dubbo end-->
 
         <!--shenyu motan plugin start-->
+        <!-- apache shenyu  apache dubbo plugin start-->
+<!--        <dependency>-->
+<!--            <groupId>org.apache.shenyu</groupId>-->
+<!--            <artifactId>shenyu-spring-boot-starter-plugin-apache-dubbo</artifactId>-->
+<!--            <version>${project.version}</version>-->
+<!--        </dependency>-->
+<!--        <dependency>-->
+<!--            <groupId>org.apache.dubbo</groupId>-->
+<!--            <artifactId>dubbo</artifactId>-->
+<!--            <version>2.7.5</version>-->
+<!--        </dependency>-->
+<!--        &lt;!&ndash; Dubbo zookeeper registry dependency start &ndash;&gt;-->
+<!--        <dependency>-->
+<!--            <groupId>org.apache.curator</groupId>-->
+<!--            <artifactId>curator-client</artifactId>-->
+<!--            <version>4.0.1</version>-->
+<!--            <exclusions>-->
+<!--                <exclusion>-->
+<!--                    <artifactId>log4j</artifactId>-->
+<!--                    <groupId>log4j</groupId>-->
+<!--                </exclusion>-->
+<!--            </exclusions>-->","[{'comment': 'why change this?', 'commenter': 'moremind'}]"
4166,shenyu-bootstrap/pom.xml,"@@ -257,14 +257,6 @@
             <version>${project.version}</version>
         </dependency>
 
-        <!--shenyu key-auth plugin start-->
-        <dependency>
-            <groupId>org.apache.shenyu</groupId>
-            <artifactId>shenyu-spring-boot-starter-plugin-key-auth</artifactId>
-            <version>${project.version}</version>
-        </dependency>","[{'comment': 'why remove it?', 'commenter': 'moremind'}]"
4173,shenyu-integrated-test/shenyu-integrated-test-sdk-apache-dubbo/pom.xml,"@@ -0,0 +1,146 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-integrated-test</artifactId>
+        <version>2.5.1-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>shenyu-integrated-test-sdk-apache-dubbo</artifactId>
+    <name>shenyu-integrated-test-sdk-apache-dubbo</name>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-integrated-test-common</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-spring-boot-starter-instance</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-spring-boot-starter-gateway</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-spring-boot-starter-plugin-apache-dubbo</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.dubbo</groupId>
+            <artifactId>dubbo</artifactId>
+            <version>3.1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.curator</groupId>
+            <artifactId>curator-x-discovery</artifactId>
+            <version>5.1.0</version>
+        </dependency>
+        <!-- Dubbo zookeeper registry dependency start -->
+        <dependency>
+            <groupId>org.apache.curator</groupId>
+            <artifactId>curator-client</artifactId>
+            <version>4.0.1</version>
+            <exclusions>
+                <exclusion>
+                    <artifactId>log4j</artifactId>
+                    <groupId>log4j</groupId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.curator</groupId>
+            <artifactId>curator-framework</artifactId>
+            <version>4.0.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.curator</groupId>
+            <artifactId>curator-recipes</artifactId>
+            <version>4.0.1</version>
+        </dependency>
+    </dependencies>
+    
+    <profiles>
+        <profile>
+            <id>it</id>
+            <properties>
+                <docker.buildArg.APP_NAME>shenyu-integrated-test-sdk-apache-dubbo</docker.buildArg.APP_NAME>
+                <docker.image.tag.repo>apache/shenyu-integrated-sdk-test-apache-dubbo</docker.image.tag.repo>
+                <docker.image.tag.tagName>latest</docker.image.tag.tagName>
+            </properties>
+            <build>
+                <finalName>shenyu-integrated-test-sdk-apache-dubbo</finalName>
+                <plugins>
+                    <plugin>
+                        <groupId>org.springframework.boot</groupId>
+                        <artifactId>spring-boot-maven-plugin</artifactId>
+                        <version>${spring-boot.version}</version>
+                        <executions>
+                            <execution>
+                                <phase>package</phase>
+                                <goals>
+                                    <goal>repackage</goal>
+                                </goals>
+                            </execution>
+                        </executions>
+                        <configuration>
+                            <mainClass>org.apache.shenyu.integrated.test.apache.dubbo.SdkApacheDubboIntegratedBootstrap
+                            </mainClass>
+                            <executable>true</executable>
+                        </configuration>
+                    </plugin>
+                    <plugin>
+                        <groupId>io.fabric8</groupId>
+                        <artifactId>docker-maven-plugin</artifactId>
+                        <version>${docker-maven-plugin.version}</version>
+                        <configuration>
+                            <images>
+                                <image>
+                                    <name>apache/shenyu-integrated-test-apache-dubbo</name>","[{'comment': '```suggestion\r\n                                    <name>apache/shenyu-integrated-sdk-test-apache-dubbo</name>\r\n```', 'commenter': 'JooKS-me'}, {'comment': 'thanks for your time', 'commenter': 'mahaitao617'}]"
4173,shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/helper/HttpHelper.java,"@@ -225,6 +224,7 @@ public <S> S getFromGateway(final String path, final Type type) throws IOExcepti
      * @return response from gateway
      * @throws IOException IO exception
      */
+","[{'comment': 'Please keep the code style~', 'commenter': 'JooKS-me'}, {'comment': 'Do not add blank lines here', 'commenter': 'JooKS-me'}]"
4179,shenyu-admin/src/main/resources/mappers/mock-request-record-sqlmap.xml,"@@ -0,0 +1,175 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<!DOCTYPE mapper PUBLIC ""-//mybatis.org//DTD Mapper 3.0//EN"" ""https://mybatis.org/dtd/mybatis-3-mapper.dtd"">
+<mapper namespace=""org.apache.shenyu.admin.mapper.MockRequestRecordMapper"">
+    <resultMap id=""MockRequestRecordMap"" type=""org.apache.shenyu.admin.model.entity.MockRequestRecordDO"">
+        <id property=""id"" column=""id"" jdbcType=""VARCHAR""/>
+        <result property=""apiId"" column=""api_id"" jdbcType=""VARCHAR""/>
+        <result property=""host"" column=""host"" jdbcType=""VARCHAR""/>
+        <result property=""port"" column=""port"" jdbcType=""INTEGER""/>
+        <result property=""pathVariable"" column=""path_variable"" jdbcType=""VARCHAR""/>
+        <result property=""query"" column=""query"" jdbcType=""VARCHAR""/>
+        <result property=""header"" column=""header"" jdbcType=""VARCHAR""/>
+        <result property=""body"" column=""body"" jdbcType=""VARCHAR""/>
+        <result property=""dateCreated"" column=""date_created"" jdbcType=""TIMESTAMP""/>
+        <result property=""dateUpdated"" column=""date_updated"" jdbcType=""TIMESTAMP""/>
+    </resultMap>
+
+    <select id=""queryById"" resultMap=""MockRequestRecordMap"">
+        select
+          id, api_id, host, port, path_variable, query, header, body, date_created, date_updated","[{'comment': 'use `Base_Column_List`, check other sql-map.', 'commenter': 'loongs-zhang'}, {'comment': 'done.', 'commenter': 'ShawnJim'}]"
4179,shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/MockRequestRecordMapper.java,"@@ -0,0 +1,100 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.mapper;
+
+import org.apache.ibatis.annotations.Mapper;
+import org.apache.ibatis.annotations.Param;
+import org.apache.shenyu.admin.model.entity.MockRequestRecordDO;
+import org.apache.shenyu.admin.validation.ExistProvider;
+
+import java.io.Serializable;
+import java.util.List;
+
+/**
+ * This is Mock Request Record Mapper.
+ */
+@Mapper
+public interface MockRequestRecordMapper extends ExistProvider {
+
+    /**
+     * exiated.
+     *
+     * @param id id
+     * @return existed
+     */
+    @Override
+    Boolean existed(@Param(""id"") Serializable id);
+
+    /**
+     * Select by primary key.
+     *
+     * @param id primary key
+     * @return the value of {@linkplain MockRequestRecordDO}
+     */
+    MockRequestRecordDO queryById(String id);
+
+    /**
+     * Select by condition.
+     *
+     * @param mockRequestRecordDO condition
+     * @return The value of {@linkplain List}
+     */
+    List<MockRequestRecordDO> queryAll(@Param(""item"") MockRequestRecordDO mockRequestRecordDO);
+
+    /**
+     * Count with condition.
+     *
+     * @param mockRequestRecordDO condition
+     * @return The value of count result
+     */
+    long count(MockRequestRecordDO mockRequestRecordDO);
+
+    /**
+     * Insert record.
+     *
+     * @param mockRequestRecordDO record
+     * @return The value of insert count
+     */
+    int insert(MockRequestRecordDO mockRequestRecordDO);
+","[{'comment': 'need to support `insertSelective`.', 'commenter': 'loongs-zhang'}, {'comment': '![6fef1ed930e89e55da32edd3dbabb36](https://user-images.githubusercontent.com/32192263/201524994-547c340f-d9da-43fe-8fe8-1279db618314.png)\r\n\r\nhi, @dragon-zhang, Since all the fields in the `mock_request_record` table are non-null, I omitted this method', 'commenter': 'ShawnJim'}, {'comment': 'done', 'commenter': 'ShawnJim'}]"
4221,shenyu-admin/src/main/java/org/apache/shenyu/admin/model/query/MockRequestRecordQuery.java,"@@ -0,0 +1,201 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.model.query;
+
+import java.io.Serializable;
+import java.util.Objects;
+import org.apache.shenyu.admin.model.page.PageParameter;
+
+/**
+ * this is mock request record query.
+ */
+public class MockRequestRecordQuery implements Serializable {
+
+    private static final long serialVersionUID = 6736947701814601503L;
+
+    /**
+     * the api id.
+     */
+    private String apiId;
+
+    /**
+     * the request host.
+     */
+    private String host;
+
+    /**
+     * the request url.
+     */
+    private String url;
+
+    /**
+     * the request param in url.
+     */
+    private String pathVariable;
+
+    /**
+     * the request param after url.
+     */
+    private String query;
+","[{'comment': ""Add `header` condition. As for `body`, I don't think MySQL is suitable for it, but ES is too complex, so ignore `body`."", 'commenter': 'loongs-zhang'}]"
4221,shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/MockRequestRecordController.java,"@@ -0,0 +1,112 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.controller;
+
+import java.util.List;
+import javax.validation.Valid;
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
+import javax.validation.constraints.NotNull;
+import org.apache.shenyu.admin.mapper.ApiMapper;
+import org.apache.shenyu.admin.model.dto.MockRequestRecordDTO;
+import org.apache.shenyu.admin.model.page.PageParameter;
+import org.apache.shenyu.admin.model.query.MockRequestRecordQuery;
+import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
+import org.apache.shenyu.admin.model.vo.MockRequestRecordVO;
+import org.apache.shenyu.admin.service.MockRequestRecordService;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.admin.validation.annotation.Existed;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * AlertTemplate MockRequestRecordController.
+ */
+@Validated
+@RestController
+@RequestMapping(""/mock"")
+public class MockRequestRecordController {
+
+    private final MockRequestRecordService mockRequestRecordService;
+
+    public MockRequestRecordController(final MockRequestRecordService mockRequestRecordService) {
+        this.mockRequestRecordService = mockRequestRecordService;
+    }
+
+    /**
+     * findById.
+     * @param id id
+     * @return {@linkplain ShenyuAdminResult}
+     */
+    @GetMapping(""/id/{id}"")
+    public ShenyuAdminResult findById(@PathVariable(""id"")
+                                       @Existed(message = ""mockrequestrecord is not existed"",
+                                               provider = ApiMapper.class) final String id) {
+        MockRequestRecordVO mockRequestRecordVO = mockRequestRecordService.findById(id);","[{'comment': 'An api will have many mock requests, maybe just remove this interface?', 'commenter': 'loongs-zhang'}]"
4221,shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/MockRequestRecordDTO.java,"@@ -0,0 +1,302 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.model.dto;
+
+import java.io.Serializable;
+import java.util.Date;
+import java.util.Objects;
+import org.apache.shenyu.admin.mapper.ApiMapper;
+import org.apache.shenyu.admin.validation.annotation.Existed;
+
+/**
+ * this is mockrequestrecord from by web front.
+ */
+public class MockRequestRecordDTO implements Serializable {
+
+    private static final long serialVersionUID = -6779456713216687114L;
+
+    @Existed(provider = ApiMapper.class, nullOfIgnore = true, message = ""the mock reuqest record is not exited"")
+    private String id;
+
+    private String apiId;","[{'comment': '```java\r\n    @Existed(provider = ApiMapper.class, nullOfIgnore = true, message = ""the mock reuqest record is not exited"")\r\n    private String id;\r\n```\r\nWhether the verification here is wrong?', 'commenter': 'loongs-zhang'}]"
4221,shenyu-admin/src/main/resources/mappers/mock-request-record-sqlmap.xml,"@@ -42,6 +42,30 @@
         where id = #{id}
     </select>
 
+    <select id=""selectByQuery"" parameterType=""org.apache.shenyu.admin.model.query.MockRequestRecordQuery""
+            resultMap=""MockRequestRecordMap"">
+        SELECT
+        <include refid=""Base_Column_List""/>
+        FROM mock_request_record
+        <where>
+            <if test=""apiId != null"">
+               and api_id = #{apiId, jdbcType=VARCHAR}
+            </if>
+            <if test=""host != null"">
+              and  `host` = #{host, jdbcType=VARCHAR}
+            </if>
+            <if test=""url != null"">
+              and  `url` = #{url, jdbcType=VARCHAR}
+            </if>
+            <if test=""pathVariable != null"">
+              and  path_variable = #{pathVariable, jdbcType=VARCHAR}
+            </if>
+            <if test=""query != null"">
+              and  `query` = #{query, jdbcType=VARCHAR}
+            </if>","[{'comment': 'add `header` condition.', 'commenter': 'loongs-zhang'}]"
4221,shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MockRequestRecordMapperTest.java,"@@ -159,7 +166,28 @@ public void update() {
         assertEquals(updateAfter.getDateUpdated(), updateRecord.getDateUpdated());
     }
 
-    private MockRequestRecordDO buildTagDO() {
+    @Test
+    public void testSelectByQuery() {
+        MockRequestRecordDO mockRequestRecordDO = buildMockRequestRecordDO();
+        mockRequestRecordMapper.insert(mockRequestRecordDO);
+        MockRequestRecordQuery mockRequestRecordQuery = new MockRequestRecordQuery();
+        mockRequestRecordQuery.setApiId(""1"");
+        mockRequestRecordQuery.setHost(""192.168.1.1"");
+        mockRequestRecordQuery.setQuery("""");
+        mockRequestRecordQuery.setUrl(""http://192.168.1.1:8080/test"");","[{'comment': 'The url is only `/test`, `port` is `8080`.', 'commenter': 'loongs-zhang'}]"
4263,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java,"@@ -175,4 +175,25 @@ public CommonPager<ApiVO> listByPage(final ApiQuery apiQuery) {
                     return ApiVO.buildApiVO(item, tagVOS);
                 }).collect(Collectors.toList()));
     }
+
+    @Override
+    public int deleteByApiPathHttpMethodRpcType(final String apiPath, final Integer httpMethod, final String rpcType) {
+        List<ApiDO> apiDOs = apiMapper.selectByApiPathHttpMethodRpcType(apiPath, httpMethod, rpcType);
+        // delete apis.
+        if (CollectionUtils.isNotEmpty(apiDOs)) {
+            final List<String> apiIds = ListUtil.map(apiDOs, ApiDO::getId);
+            final int deleteRows = this.apiMapper.deleteByIds(apiIds);
+            if (deleteRows > 0) {
+                tagRelationMapper.deleteByApiIds(apiIds);
+            }
+            return deleteRows;
+        }
+        return 0;
+    }
+
+    @Override
+    public String offlineByContextPath(final String contextPath) {
+        apiMapper.updateOfflineByContextPath(contextPath);","[{'comment': 'There are many nodes in the service. Only when all nodes are offline can the API status be updated.', 'commenter': 'loongs-zhang'}]"
4263,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java,"@@ -54,53 +60,58 @@
  * Abstract strategy.
  */
 public abstract class AbstractShenyuClientRegisterServiceImpl extends FallbackShenyuClientRegisterService implements ShenyuClientRegisterService {
-    
+
+    private static final Logger LOG = LoggerFactory.getLogger(AbstractShenyuClientRegisterServiceImpl.class);
+
     /**
      * The Event publisher.
      */
     @Resource
     private ApplicationEventPublisher eventPublisher;
-    
+
     /**
      * The Selector service.
      */
     @Resource
     private SelectorService selectorService;
-    
+
     @Resource
     private MetaDataService metaDataService;
-    
+
     /**
      * The Rule service.
      */
     @Resource
     private RuleService ruleService;
-    ","[{'comment': 'do not change the format, try config format in your IDE.', 'commenter': 'loongs-zhang'}]"
4352,shenyu-integrated-test/shenyu-integrated-test-brpc/src/main/resources/application-local.yml,"@@ -0,0 +1,59 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+server:
+  port: 9195
+  address: 0.0.0.0
+
+spring:
+  main:
+    allow-bean-definition-overriding: true
+  application:
+    name: shenyu-bootstrap
+
+management:
+  health:
+    defaults:
+      enabled: false
+
+shenyu:
+  switchConfig:
+    local: true
+  cross:
+    enabled: true
+  sync:
+    websocket:
+      urls: ws://shenyu-admin:9095/websocket","[{'comment': '`ws://shenyu-admin:9095/websocket` can be change to `ws://localhost:9095/websocket`, because we had set the  config in `docker-compose.yml`', 'commenter': 'loongs-zhang'}]"
4352,shenyu-integrated-test/shenyu-integrated-test-brpc/docker-compose.yml,"@@ -0,0 +1,84 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+version: ""3.9""
+services:
+  shenyu-admin:
+    image: apache/shenyu-admin:latest
+    container_name: shenyu-admin
+    restart: always
+    networks:
+      - shenyu
+    ports:
+      - ""9095:9095""
+    environment:
+      - SPRING_PROFILES_ACTIVE=h2
+      - shenyu.database.init_script=sql-script/h2/schema.sql
+    healthcheck:
+      test: [""CMD-SHELL"", ""wget -q -O - http://shenyu-admin:9095/actuator/health | grep UP || exit 1""]
+      timeout: 2s
+      retries: 30
+      start_period: 5s
+
+  shenyu-examples-brpc-service:
+    deploy:
+      resources:
+        limits:
+          memory: 2048M
+    container_name: shenyu-examples-brpc-service
+    image: shenyu-examples-brpc-service:latest
+    restart: always
+    environment:
+      - shenyu.register.serverLists=http://shenyu-admin:9095
+    healthcheck:
+      test: [ ""CMD-SHELL"", ""wget -q -O - http://localhost:8011/actuator/health | grep UP || exit 1"" ]
+      timeout: 2s
+      retries: 3
+      start_period: 5s
+    ports:
+      - ""8011:8011""
+      - ""8005:8005""
+    networks:
+      - shenyu
+    depends_on:
+      shenyu-integrated-test-brpc:
+        condition: service_healthy
+
+  shenyu-integrated-test-brpc:
+    container_name: shenyu-integrated-test-brpc
+    image: apache/shenyu-integrated-test-brpc:latest
+    restart: always
+    deploy:
+      resources:
+        limits:
+          memory: 2048M
+    environment:
+      - shenyu.sync.websocket.urls=ws://shenyu-admin:9095/websocket
+    depends_on:
+      shenyu-admin:","[{'comment': 'Here, we should depends on `shenyu-examples-brpc-service`.', 'commenter': 'loongs-zhang'}]"
4352,shenyu-integrated-test/shenyu-integrated-test-brpc/pom.xml,"@@ -0,0 +1,111 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>shenyu-integrated-test</artifactId>
+        <groupId>org.apache.shenyu</groupId>
+        <version>2.5.1-SNAPSHOT</version>","[{'comment': 'fix version to `2.6.0-SNAPSHOT`', 'commenter': 'loongs-zhang'}]"
4352,shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/cache/ApplicationConfigCache.java,"@@ -62,7 +62,16 @@ public final class ApplicationConfigCache {
 
     private JDKProxyFactory proxyFactory;
 
-    private final LoadingCache<String, AsyncGenericService> cache = CacheBuilder.newBuilder()
+    private final LoadingCache<String, ServiceConfig> serviceConfigCache = CacheBuilder.newBuilder()
+            .maximumSize(Constants.CACHE_MAX_COUNT)
+            .build(new CacheLoader<String, ServiceConfig>() {
+                @Override
+                public ServiceConfig load(@NonNull final String key) {
+                    return null;","[{'comment': 'need give a default `ServiceConfig`.', 'commenter': 'loongs-zhang'}]"
4352,shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/cache/ApplicationConfigCache.java,"@@ -116,9 +139,7 @@ public AsyncGenericService build(final MetaData metaData) {
         if (Objects.isNull(clientConfig)) {
             throw new UnsupportedOperationException(""unsupport!!"");
         }","[{'comment': 'When `org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache#init` is not called, try to initialize `org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache#initService` , `org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache#build` will throw `UnsupportedOperationException`.\r\n\r\nTherefore, we should delay the action of building `AsyncGenericService` until the `runtime`. Of course, caching `AsyncGenericService`  is recommended.', 'commenter': 'loongs-zhang'}]"
4352,shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/cache/ApplicationConfigCache.java,"@@ -152,26 +173,44 @@ public AsyncGenericService build(final MetaData metaData) {
      */
     public AsyncGenericService get(final String path) {
         try {
-            return cache.get(path);
+            return serviceCache.get(path);
         } catch (ExecutionException e) {
             throw new ShenyuBrpcPluginException(e.getCause());
         }
     }
 
+    /**
+     * init brpc service config.
+     *
+     * @param metaData the meta data
+     * @return service config
+     */
+    public ServiceConfig initServiceConfig(final MetaData metaData) {","[{'comment': 'In `org.apache.shenyu.plugin.brpc.handler.BrpcMetaDataHandler#handle`, maybe just change `org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache#initService` to `org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache#initServiceConfig` ?', 'commenter': 'loongs-zhang'}]"
4352,shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/proxy/BrpcProxyService.java,"@@ -81,8 +81,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
             }
         }
         initThreadPool();
-        CompletableFuture<Object> future = null;
-        future = new CompletableFuture<>().supplyAsync(() -> getValue(metaData, params), threadPool);
+        CompletableFuture<Object> future = CompletableFuture.supplyAsync(() -> getValue(metaData, params), threadPool);","[{'comment': 'In the future, we should use `com.baidu.cloud.starlight.api.rpc.threadpool.ThreadPoolFactory` SPI to impl it, this is a todo list.', 'commenter': 'loongs-zhang'}]"
4410,shenyu-bootstrap/pom.xml,"@@ -432,50 +432,58 @@
         <!--shenyu motan plugin end-->
 
         <!--shenyu data sync start use zookeeper-->
-        <dependency>
-            <groupId>org.apache.shenyu</groupId>
-            <artifactId>shenyu-spring-boot-starter-sync-data-zookeeper</artifactId>
-            <version>${project.version}</version>
-        </dependency>
+<!--        <dependency>-->
+<!--            <groupId>org.apache.shenyu</groupId>-->
+<!--            <artifactId>shenyu-spring-boot-starter-sync-data-zookeeper</artifactId>-->
+<!--            <version>${project.version}</version>-->
+<!--        </dependency>-->
 
         <!--shenyu data sync start use websocket-->
-        <dependency>
-            <groupId>org.apache.shenyu</groupId>
-            <artifactId>shenyu-spring-boot-starter-sync-data-websocket</artifactId>
-            <version>${project.version}</version>
-        </dependency>
+<!--        <dependency>-->
+<!--            <groupId>org.apache.shenyu</groupId>-->
+<!--            <artifactId>shenyu-spring-boot-starter-sync-data-websocket</artifactId>-->
+<!--            <version>${project.version}</version>-->
+<!--        </dependency>-->
 
         <!--shenyu data sync start use http-->
-        <dependency>
-            <groupId>org.apache.shenyu</groupId>
-            <artifactId>shenyu-spring-boot-starter-sync-data-http</artifactId>
-            <version>${project.version}</version>
-        </dependency>
+<!--        <dependency>-->
+<!--            <groupId>org.apache.shenyu</groupId>-->
+<!--            <artifactId>shenyu-spring-boot-starter-sync-data-http</artifactId>-->
+<!--            <version>${project.version}</version>-->
+<!--        </dependency>-->
 
         <!--shenyu data sync start use etcd-->
-        <dependency>
-            <groupId>org.apache.shenyu</groupId>
-            <artifactId>shenyu-spring-boot-starter-sync-data-etcd</artifactId>
-            <version>${project.version}</version>
-            <exclusions>
-                <exclusion>
-                    <groupId>io.grpc</groupId>
-                    <artifactId>grpc-grpclb</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>io.grpc</groupId>
-                    <artifactId>grpc-netty</artifactId>
-                </exclusion>
-            </exclusions>
-        </dependency>
+<!--        <dependency>-->
+<!--            <groupId>org.apache.shenyu</groupId>-->","[{'comment': ""I think it's no need to comment the dependencies."", 'commenter': 'damonxue'}]"
4410,shenyu-admin/pom.xml,"@@ -160,6 +161,12 @@
             <artifactId>nacos-client</artifactId>
         </dependency>
 
+        <dependency>
+            <groupId>com.tencent.polaris</groupId>
+            <artifactId>polaris-all</artifactId>
+            <version>1.12.0-SNAPSHOT</version>","[{'comment': 'Maybe we can wait for the next release-version.', 'commenter': 'damonxue'}]"
4410,shenyu-sync-data-center/shenyu-sync-data-polaris/pom.xml,"@@ -0,0 +1,55 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-sync-data-center</artifactId>
+        <version>2.6.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>shenyu-sync-data-polaris</artifactId>
+
+    <repositories>
+        <repository>
+            <id>nexus-snapshots</id>
+            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
+            <releases>
+                <enabled>false</enabled>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>always</updatePolicy>
+            </snapshots>
+        </repository>
+    </repositories>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-sync-data-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>com.tencent.polaris</groupId>
+            <artifactId>polaris-all</artifactId>
+            <version>1.13.0-SNAPSHOT</version>","[{'comment': 'use release version', 'commenter': 'loongs-zhang'}]"
4410,shenyu-sync-data-center/shenyu-sync-data-polaris/pom.xml,"@@ -0,0 +1,55 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-sync-data-center</artifactId>
+        <version>2.6.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>shenyu-sync-data-polaris</artifactId>
+
+    <repositories>
+        <repository>
+            <id>nexus-snapshots</id>
+            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
+            <releases>
+                <enabled>false</enabled>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+                <updatePolicy>always</updatePolicy>
+            </snapshots>
+        </repository>
+    </repositories>","[{'comment': '`<repositories>` is this necessary now ?', 'commenter': 'loongs-zhang'}]"
4414,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java,"@@ -108,14 +110,13 @@ public void putNode(final String uriPath, final RuleData ruleData, final Object
                 }
                 List<RuleData> ruleDataList = getVal(node.getPathRuleCache(), ruleData.getSelectorId());
                 if (CollectionUtils.isNotEmpty(ruleDataList)) {
-                    // synchronized list
-                    synchronized (lock) {
-                        ruleDataList.add(ruleData);
-                        final List<RuleData> collect = ruleDataList.stream().sorted(Comparator.comparing(RuleData::getSort)).collect(Collectors.toList());","[{'comment': ""It's not good for using cow list."", 'commenter': 'moremind'}]"
4414,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java,"@@ -82,6 +81,19 @@ public boolean isEmpty() {
                 && Objects.isNull(this.root.getPathVariableNode());
     }
 
+    /**
+     * put node to trie.
+     *
+     * @param uriPaths uri path
+     * @param ruleData rule data
+     * @param bizInfo biz info
+     */
+    public void putNode(final List<String> uriPaths, final RuleData ruleData, final Object bizInfo) {
+        if (CollectionUtils.isNotEmpty(uriPaths)) {","[{'comment': ""I don't think it's good."", 'commenter': 'moremind'}]"
4414,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java,"@@ -223,12 +235,7 @@ public ShenyuTrieNode match(final String uriPath, final String selectorId) {
                             continue;
                         }
                         // include path variable node, general node, wildcard node
-                        if (endPath && checkPathRuleNotNull(currentNode)
-                                && CollectionUtils.isNotEmpty(getVal(currentNode.getPathRuleCache(), selectorId))) {
-                            return currentNode;
-                        }
-                        // path is end and the match str is **, means match all
-                        if (isMatchAll(currentNode.getMatchStr()) && currentNode.getEndOfPath()
+                        if ((endPath || (isMatchAll(currentNode.getMatchStr()) && currentNode.getEndOfPath()))","[{'comment': 'endPath is not right.', 'commenter': 'moremind'}]"
4414,shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/trie/ShenyuTrieTest.java,"@@ -94,22 +99,68 @@ public void match() {
                 .enabled(true)
                 .conditionDataList(Collections.singletonList(conditionData))
                 .build();
-        SpringBeanUtils.getInstance().getBean(ShenyuTrie.class).putNode(""/a/*/b/c"", ruleData2, null);
-        Assertions.assertNull(SpringBeanUtils.getInstance().getBean(ShenyuTrie.class).match(""/a/m/b/c"", ""1""));
-        Assertions.assertNotNull(SpringBeanUtils.getInstance().getBean(ShenyuTrie.class).match(""/a/m/b/c"", ""2""));
+        shenyuTrie.putNode(""/a/*/b/c"", ruleData2, null);
+        Assertions.assertNull(shenyuTrie.match(""/a/m/b/c"", ""1""));
+        Assertions.assertNotNull(shenyuTrie.match(""/a/m/b/c"", ""2""));
+        
+        shenyuTrie.putNode(""/path1/{name}/{age}"", ruleData, null);
+        Assertions.assertNotNull(shenyuTrie.match(""/path1/111/222"", ""1"").getFullPath(), ""/path1/{name}/{age}"");
+        Assertions.assertNull(shenyuTrie.match(""/path1/111/222/333"", ""1""));
+        
+        shenyuTrie.putNode(""path1/name/age"", ruleData, null);
+        Assertions.assertNotNull(shenyuTrie.match(""path1/name/age"", ""1""));
+        Assertions.assertEquals(shenyuTrie.match(""path1/name/age"", ""1"").getFullPath(), ""path1/name/age"");
+    }
+
+    @Test
+    public void matchSpec() {","[{'comment': '@moremind Pls review covers all situations.', 'commenter': 'damonxue'}]"
4416,db/init/mysql/schema.sql,"@@ -773,51 +773,52 @@ CREATE TABLE `plugin`  (
   `enabled` tinyint(0) NOT NULL DEFAULT 0 COMMENT 'whether to open (0, not open, 1 open)',
   `date_created` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) COMMENT 'create time',
   `date_updated` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3) COMMENT 'update time',
+  `plugin_class` mediumblob  DEFAULT NULL COMMENT 'plugin jar class',","[{'comment': 'use plugin_jar ?', 'commenter': 'ywj1352'}, {'comment': 'yes,I change it.', 'commenter': 'misaya295'}]"
4416,db/init/mysql/schema.sql,"@@ -1700,7 +1701,7 @@ INSERT INTO `shenyu_dict` VALUES ('1529402613195784192', 'algorithmName', 'ALGOR
 INSERT INTO `shenyu_dict` VALUES ('1529402613195784193', 'loadBalance', 'LOAD_BALANCE', 'roundRobin', 'roundRobin', 'roundRobin', 2, 1, '2022-05-25 18:02:52', '2022-05-25 18:02:52');
 INSERT INTO `shenyu_dict` VALUES ('1529402613195784194', 'loadBalance', 'LOAD_BALANCE', 'random', 'random', 'random', 1, 1, '2022-05-25 18:02:52', '2022-05-25 18:02:52');
 INSERT INTO `shenyu_dict` VALUES ('1529402613195784195', 'loadBalance', 'LOAD_BALANCE', 'hash', 'hash', 'hash', 0, 1, '2022-05-25 18:02:52', '2022-05-25 18:02:52');
-INSERT INTO `shenyu_dict` VALUES ('1572621976689762307', 'loadBalance', 'LOAD_BALANCE', 'leastActive', 'leastActive', 'leastActive', 3, 1, '2023-01-17 18:02:52', '2023-01-17 18:02:52');
+INSERT INTO `shenyu_dict` VALUES ('1572621976689762307', 'loadBalance', 'LOAD_BALANCE', 'leastActive', 'leastActive', 'leastActive', 0, 1, '2022-05-25 18:02:52', '2022-05-25 18:02:52');","[{'comment': 'not right? ', 'commenter': 'moremind'}, {'comment': 'It should have been changed by accident.', 'commenter': 'misaya295'}]"
4416,shenyu-admin/pom.xml,"@@ -49,6 +49,12 @@
             <version>${project.version}</version>
         </dependency>
 
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-plugin-base</artifactId>
+            <version>${project.version}</version>","[{'comment': 'I think shenyu-admin should not denpend on shenyu plugin.', 'commenter': 'moremind'}, {'comment': 'done,It has been changed to use compile-time dependency to verify the jar package.', 'commenter': 'misaya295'}]"
4416,db/upgrade/2.5.1-upgrade-2.6.0-mysql.sql,"@@ -0,0 +1,18 @@
+-- Licensed to the Apache Software Foundation (ASF) under one
+-- or more contributor license agreements.  See the NOTICE file
+-- distributed with this work for additional information
+-- regarding copyright ownership.  The ASF licenses this file
+-- to you under the Apache License, Version 2.0 (the
+-- ""License""); you may not use this file except in compliance
+-- with the License.  You may obtain a copy of the License at
+--
+--     http://www.apache.org/licenses/LICENSE-2.0
+--
+-- Unless required by applicable law or agreed to in writing, software
+-- distributed under the License is distributed on an ""AS IS"" BASIS,
+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+-- See the License for the specific language governing permissions and
+-- limitations under the License.
+
+-- this file works for MySQL.
+ALTER TABLE `shenyu`.`plugin` ADD COLUMN `plugin_class` mediumblob NULL COMMENT 'plugin jar class';","[{'comment': 'you should add it to MySQL/Oracle/PostgreSQL, not only mysql.', 'commenter': 'moremind'}, {'comment': 'yes,I wil do it.', 'commenter': 'misaya295'}]"
4416,shenyu-admin/src/main/resources/mappers/plugin-sqlmap.xml,"@@ -173,25 +173,25 @@
 
     <select id=""activePluginSnapshot"" resultType=""org.apache.shenyu.admin.model.vo.PluginSnapshotVO"" databaseId=""oracle"">
         select p.id,
-               p.name,
-               to_char(config),
-               role,
-               count(ph.id) handlecount,
-               count(s.id) selectorcount
+        p.name,
+        to_char(config),
+        role,
+        count(ph.id) handlecount,
+        count(s.id) selectorcount
         from plugin p
-                 left join plugin_handle ph on p.id = ph.plugin_id
-                 left join selector s on p.id = s.plugin_id
+        left join plugin_handle ph on p.id = ph.plugin_id
+        left join selector s on p.id = s.plugin_id
         where p.enabled = 1
         <if test=""userId != null"">
             and p.name in (
-                select r.name
-                from resource r
-                         inner join permission
-                                    on permission.resource_id = r.id
-                where parent_id = '1346775491550474240'
-                  and object_id = (select role_id
-                                   from user_role
-                                   where user_id = #{userId})
+            select r.name","[{'comment': 'format sql', 'commenter': 'li-keguo'}, {'comment': 'ok', 'commenter': 'misaya295'}]"
4416,shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/PluginController.java,"@@ -135,9 +137,10 @@ public ShenyuAdminResult createPlugin(@Valid @RequestBody final PluginDTO plugin
     public ShenyuAdminResult updatePlugin(@PathVariable(""id"")
                                           @Existed(message = ""plugin is not existed"",
                                                   provider = PluginMapper.class) final String id,
-                                          @Valid @RequestBody final PluginDTO pluginDTO) {
+                                          @Valid @ModelAttribute final PluginDTO pluginDTO) {
         pluginDTO.setId(id);
         return createPlugin(pluginDTO);
+","[{'comment': 'no blank line', 'commenter': 'moremind'}]"
4416,shenyu-common/pom.xml,"@@ -68,5 +68,10 @@
             <groupId>commons-codec</groupId>
             <artifactId>commons-codec</artifactId>
         </dependency>
+
+        <dependency>
+            <groupId>org.ow2.asm</groupId>
+            <artifactId>asm-tree</artifactId>
+        </dependency>","[{'comment': 'add this to license file', 'commenter': 'moremind'}]"
4443,shenyu-common/src/main/java/org/apache/shenyu/common/utils/ShenyuClock.java,"@@ -0,0 +1,101 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.common.utils;
+
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicLong;
+
+/**
+ * Shenyu System clock.<br>
+ * Refer to cn.hutool.core.date.SystemClock.<br>
+ */
+public final class ShenyuClock {
+
+    /**
+     * Thread name.
+     */
+    private static final String THREAD_NAME = ""shenyu-clock-schedule"";
+
+    /**
+     * Period.
+     */
+    private final int period;
+
+    /**
+     * Now.
+     */
+    private final AtomicLong now;
+
+    private ShenyuClock(final int period) {
+        this.period = period;
+        this.now = new AtomicLong(System.currentTimeMillis());
+        scheduleClockUpdating();
+    }
+
+    /**
+     * Instance.
+     *
+     * @return System clock instance
+     */
+    private static ShenyuClock instance() {
+        return InstanceHolder.INSTANCE;
+    }
+
+    /**
+     * Schedule clock updating.
+     */
+    private void scheduleClockUpdating() {
+        ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(1, runnable -> {","[{'comment': 'used ShenyuThreadFactory', 'commenter': 'yu199195'}, {'comment': 'good Idea. i fixed.', 'commenter': 'iwangjie'}]"
4569,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java,"@@ -115,44 +115,43 @@ public void putNode(final List<String> uriPaths, final RuleData ruleData, final
      * @see org.springframework.web.util.pattern.PathPattern
      */
     public void putNode(final String uriPath, final RuleData ruleData, final Object bizInfo) {
-        if (StringUtils.isNotBlank(uriPath)) {
-            String strippedPath = StringUtils.strip(uriPath, ""/"");
-            String[] pathParts = StringUtils.split(strippedPath, ""/"");
-            if (ArrayUtils.isEmpty(pathParts)) {
+        if (StringUtils.isBlank(uriPath)) {
+            return;
+        }
+        String strippedPath = StringUtils.strip(uriPath, ""/"");
+        String[] pathParts = StringUtils.split(strippedPath, ""/"");
+        if (ArrayUtils.isEmpty(pathParts)) {
+            return;
+        }
+        ShenyuTrieNode node = root;
+        if (matchMode == TrieMatchModeEnum.PATH_PATTERN) {","[{'comment': 'not use ==, use equals', 'commenter': 'moremind'}, {'comment': 'Thanks. I have fixed the problem 😃 ', 'commenter': 'lan-dian'}]"
4569,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java,"@@ -174,27 +173,28 @@ public ShenyuTrieNode match(final String uriPath, final String selectorId) {
         int[] matchAll = new int[pathParts.length];
         int[] wildcard = new int[pathParts.length];
         int[] pathVariable = new int[pathParts.length];
+        ShenyuTrieNode wildcardMathNode = null;
         while (startIndex < pathParts.length) {
-            String key = pathParts[startIndex];
-            boolean endPath = judgeEqual(startIndex, pathParts.length - 1);
+            String pathPart = pathParts[startIndex];
+            boolean endPath = Integer.compare(startIndex, pathParts.length - 1) == 0;
             if (Objects.isNull(currentNode)) {
                 return null;
             }
-            if (containsKey(currentNode.getChildren(), key)) {
-                currentNode = getVal(currentNode.getChildren(), key);
+            if (containsKey(currentNode.getChildren(), pathPart)) {
+                currentNode = getVal(currentNode.getChildren(), pathPart);
                 startIndex++;
                 if (!endPath && Objects.nonNull(currentNode) && !currentNode.getEndOfPath()) {
                     continue;
                 }
-            } else if (containsKey(currentNode.getChildren(), WILDCARD) && wildcard[startIndex] == 0) {
-                checkAccess(wildcard, currentNode, startIndex, WILDCARD);
-                currentNode = getVal(currentNode.getChildren(), WILDCARD);
+            } else if (hasWildcardNode(currentNode.getChildren(), pathPart) && wildcard[startIndex] == 0
+                    && Objects.nonNull(wildcardMathNode = checkAccess(wildcard, currentNode, startIndex, WILDCARD, pathPart))) {
+                currentNode = wildcardMathNode;
                 startIndex++;
                 if (Objects.nonNull(currentNode) && !endPath && !currentNode.getEndOfPath()) {
                     continue;
                 }
             } else if (containsKey(currentNode.getChildren(), MATCH_ALL) && matchAll[startIndex] == 0) {
-                checkAccess(matchAll, currentNode, startIndex, MATCH_ALL);
+                checkAccess(matchAll, currentNode, startIndex, MATCH_ALL, pathPart);","[{'comment': 'refactor this?', 'commenter': 'moremind'}, {'comment': 'finished', 'commenter': 'lan-dian'}]"
4713,shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/utils/RequestUrlUtils.java,"@@ -43,7 +43,7 @@ public static URI buildRequestUri(final ServerWebExchange exchange, final String
         String path = domain;
         final String rewriteUri = (String) exchange.getAttributes().get(Constants.REWRITE_URI);
         if (StringUtils.isNoneBlank(rewriteUri)) {
-            path = path + rewriteUri;
+            path = rewriteUri;","[{'comment': '![image](https://github.com/apache/shenyu/assets/38336731/984cf8b1-33b7-4927-bf91-25939b1d1840)\r\n\r\nThis line change shall rollback, the `HTTP_URI` must contains `protocol`, `ip` and `port`.', 'commenter': 'loongs-zhang'}]"
4713,shenyu-plugin/shenyu-plugin-uri/src/test/java/org/apache/shenyu/plugin/uri/URIPluginTest.java,"@@ -102,7 +102,7 @@ public void testDoExecute() {
         exchange.getAttributes().put(Constants.REWRITE_URI, ""/rewrite"");
         when(chain.execute(exchange)).thenReturn(Mono.empty());
         StepVerifier.create(uriPlugin.execute(exchange, chain)).expectSubscription().verifyComplete();
-        assertEquals(""http://localhost:8090/rewrite?queryParam=Hello,World"", exchange.getAttributes().get(Constants.HTTP_URI).toString());
+        assertEquals(""/rewrite?queryParam=Hello,World"", exchange.getAttributes().get(Constants.HTTP_URI).toString());","[{'comment': 'rollback this.', 'commenter': 'loongs-zhang'}]"
4735,shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DiscoveryDataChangedEventSyncListener.java,"@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.discovery;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.admin.discovery.parse.KeyValueParser;
+import org.apache.shenyu.admin.mapper.DiscoveryUpstreamMapper;
+import org.apache.shenyu.admin.model.entity.DiscoveryUpstreamDO;
+import org.apache.shenyu.common.dto.DiscoverySyncData;
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
+import org.apache.shenyu.common.dto.ProxySelectorData;
+import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.apache.shenyu.discovery.api.listener.DataChangedEvent;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.BeanUtils;
+import org.springframework.context.ApplicationEventPublisher;
+
+import java.sql.Timestamp;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+/**
+ * DiscoveryHandler.
+ */
+public class DiscoveryDataChangedEventSyncListener implements DataChangedEventListener {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(DiscoveryDataChangedEventSyncListener.class);
+
+    private final KeyValueParser keyValueParser;
+
+    private final ApplicationEventPublisher eventPublisher;
+
+    private final DiscoveryUpstreamMapper discoveryUpstreamMapper;
+
+    private final Boolean needPersistence;
+
+    public DiscoveryDataChangedEventSyncListener(final ApplicationEventPublisher eventPublisher,
+                                                 final DiscoveryUpstreamMapper discoveryUpstreamMapper,
+                                                 final KeyValueParser keyValueParser,
+                                                 final Boolean needPersistence) {
+        this.eventPublisher = eventPublisher;
+        this.keyValueParser = keyValueParser;
+        this.discoveryUpstreamMapper = discoveryUpstreamMapper;
+        this.needPersistence = needPersistence;
+    }
+
+    @Override
+    public void onChange(final DataChangedEvent event) {
+        DataChangedEvent.Event currentEvent = event.getEvent();
+        if (DataChangedEvent.Event.IGNORED.equals(currentEvent)) {
+            return;
+        }
+        DiscoverySyncData discoverySyncData = buildProxySelectorData(event.getKey(), event.getValue());
+        org.apache.shenyu.admin.listener.DataChangedEvent dataChangedEvent = null;","[{'comment': 'use the package to import', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ywj1352'}]"
4735,shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DiscoveryDataChangedEventSyncListener.java,"@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.discovery;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.admin.discovery.parse.KeyValueParser;
+import org.apache.shenyu.admin.mapper.DiscoveryUpstreamMapper;
+import org.apache.shenyu.admin.model.entity.DiscoveryUpstreamDO;
+import org.apache.shenyu.common.dto.DiscoverySyncData;
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
+import org.apache.shenyu.common.dto.ProxySelectorData;
+import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.apache.shenyu.discovery.api.listener.DataChangedEvent;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.BeanUtils;
+import org.springframework.context.ApplicationEventPublisher;
+
+import java.sql.Timestamp;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+/**
+ * DiscoveryHandler.
+ */
+public class DiscoveryDataChangedEventSyncListener implements DataChangedEventListener {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(DiscoveryDataChangedEventSyncListener.class);
+
+    private final KeyValueParser keyValueParser;
+
+    private final ApplicationEventPublisher eventPublisher;
+
+    private final DiscoveryUpstreamMapper discoveryUpstreamMapper;
+
+    private final Boolean needPersistence;
+
+    public DiscoveryDataChangedEventSyncListener(final ApplicationEventPublisher eventPublisher,
+                                                 final DiscoveryUpstreamMapper discoveryUpstreamMapper,
+                                                 final KeyValueParser keyValueParser,
+                                                 final Boolean needPersistence) {
+        this.eventPublisher = eventPublisher;
+        this.keyValueParser = keyValueParser;
+        this.discoveryUpstreamMapper = discoveryUpstreamMapper;
+        this.needPersistence = needPersistence;
+    }
+
+    @Override
+    public void onChange(final DataChangedEvent event) {
+        DataChangedEvent.Event currentEvent = event.getEvent();
+        if (DataChangedEvent.Event.IGNORED.equals(currentEvent)) {
+            return;
+        }
+        DiscoverySyncData discoverySyncData = buildProxySelectorData(event.getKey(), event.getValue());
+        org.apache.shenyu.admin.listener.DataChangedEvent dataChangedEvent = null;
+        List<DiscoveryUpstreamData> upstreamDataList = discoverySyncData.getUpstreamDataList();
+        if (needPersistence) {
+            if (CollectionUtils.isEmpty(upstreamDataList)) {
+                LOGGER.warn(""shenyu proxySelectorData#discoveryUpstreamList is empty"");
+                return;
+            }
+            switch (currentEvent) {
+                case ADDED:
+                    upstreamDataList.forEach(d -> {
+                        DiscoveryUpstreamDO discoveryUpstreamDO = new DiscoveryUpstreamDO();
+                        BeanUtils.copyProperties(d, discoveryUpstreamDO);","[{'comment': 'I sugguest use method instead of `BeanUtils.copyProperties` like SelectorData#transferDO', 'commenter': 'moremind'}]"
4735,shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DiscoveryDataChangedEventSyncListener.java,"@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.discovery;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.admin.discovery.parse.KeyValueParser;
+import org.apache.shenyu.admin.mapper.DiscoveryUpstreamMapper;
+import org.apache.shenyu.admin.model.entity.DiscoveryUpstreamDO;
+import org.apache.shenyu.common.dto.DiscoverySyncData;
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
+import org.apache.shenyu.common.dto.ProxySelectorData;
+import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.apache.shenyu.discovery.api.listener.DataChangedEvent;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.BeanUtils;
+import org.springframework.context.ApplicationEventPublisher;
+
+import java.sql.Timestamp;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+/**
+ * DiscoveryHandler.
+ */
+public class DiscoveryDataChangedEventSyncListener implements DataChangedEventListener {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(DiscoveryDataChangedEventSyncListener.class);
+
+    private final KeyValueParser keyValueParser;
+
+    private final ApplicationEventPublisher eventPublisher;
+
+    private final DiscoveryUpstreamMapper discoveryUpstreamMapper;
+
+    private final Boolean needPersistence;
+
+    public DiscoveryDataChangedEventSyncListener(final ApplicationEventPublisher eventPublisher,
+                                                 final DiscoveryUpstreamMapper discoveryUpstreamMapper,
+                                                 final KeyValueParser keyValueParser,
+                                                 final Boolean needPersistence) {
+        this.eventPublisher = eventPublisher;
+        this.keyValueParser = keyValueParser;
+        this.discoveryUpstreamMapper = discoveryUpstreamMapper;
+        this.needPersistence = needPersistence;
+    }
+
+    @Override
+    public void onChange(final DataChangedEvent event) {
+        DataChangedEvent.Event currentEvent = event.getEvent();
+        if (DataChangedEvent.Event.IGNORED.equals(currentEvent)) {
+            return;
+        }
+        DiscoverySyncData discoverySyncData = buildProxySelectorData(event.getKey(), event.getValue());
+        org.apache.shenyu.admin.listener.DataChangedEvent dataChangedEvent = null;
+        List<DiscoveryUpstreamData> upstreamDataList = discoverySyncData.getUpstreamDataList();
+        if (needPersistence) {
+            if (CollectionUtils.isEmpty(upstreamDataList)) {
+                LOGGER.warn(""shenyu proxySelectorData#discoveryUpstreamList is empty"");
+                return;
+            }
+            switch (currentEvent) {
+                case ADDED:
+                    upstreamDataList.forEach(d -> {
+                        DiscoveryUpstreamDO discoveryUpstreamDO = new DiscoveryUpstreamDO();
+                        BeanUtils.copyProperties(d, discoveryUpstreamDO);
+                        discoveryUpstreamDO.setId(UUIDUtils.getInstance().generateShortUuid());
+                        discoveryUpstreamDO.setDateCreated(new Timestamp(System.currentTimeMillis()));
+                        discoveryUpstreamDO.setDateUpdated(new Timestamp(System.currentTimeMillis()));
+                        discoveryUpstreamMapper.insert(discoveryUpstreamDO);
+                        LOGGER.info(""shenyu [DiscoveryDataChangedEventSyncListener] ADDED Upstream {}"", discoveryUpstreamDO.getUrl());
+                    });
+                    fillFullyDiscoverySyncData(discoverySyncData);
+                    dataChangedEvent = new org.apache.shenyu.admin.listener.DataChangedEvent(ConfigGroupEnum.PROXY_SELECTOR, DataEventTypeEnum.CREATE, Collections.singletonList(discoverySyncData));
+                    break;
+                case UPDATED:
+                    upstreamDataList.forEach(d -> {
+                        DiscoveryUpstreamDO discoveryUpstreamDO = new DiscoveryUpstreamDO();
+                        BeanUtils.copyProperties(d, discoveryUpstreamDO);","[{'comment': 'same', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ywj1352'}]"
4735,shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DiscoveryDataChangedEventSyncListener.java,"@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.discovery;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.admin.discovery.parse.KeyValueParser;
+import org.apache.shenyu.admin.mapper.DiscoveryUpstreamMapper;
+import org.apache.shenyu.admin.model.entity.DiscoveryUpstreamDO;
+import org.apache.shenyu.common.dto.DiscoverySyncData;
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
+import org.apache.shenyu.common.dto.ProxySelectorData;
+import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.apache.shenyu.discovery.api.listener.DataChangedEvent;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.BeanUtils;
+import org.springframework.context.ApplicationEventPublisher;
+
+import java.sql.Timestamp;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+/**
+ * DiscoveryHandler.
+ */
+public class DiscoveryDataChangedEventSyncListener implements DataChangedEventListener {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(DiscoveryDataChangedEventSyncListener.class);
+
+    private final KeyValueParser keyValueParser;
+
+    private final ApplicationEventPublisher eventPublisher;
+
+    private final DiscoveryUpstreamMapper discoveryUpstreamMapper;
+
+    private final Boolean needPersistence;
+
+    public DiscoveryDataChangedEventSyncListener(final ApplicationEventPublisher eventPublisher,
+                                                 final DiscoveryUpstreamMapper discoveryUpstreamMapper,
+                                                 final KeyValueParser keyValueParser,
+                                                 final Boolean needPersistence) {
+        this.eventPublisher = eventPublisher;
+        this.keyValueParser = keyValueParser;
+        this.discoveryUpstreamMapper = discoveryUpstreamMapper;
+        this.needPersistence = needPersistence;
+    }
+
+    @Override
+    public void onChange(final DataChangedEvent event) {
+        DataChangedEvent.Event currentEvent = event.getEvent();
+        if (DataChangedEvent.Event.IGNORED.equals(currentEvent)) {
+            return;
+        }
+        DiscoverySyncData discoverySyncData = buildProxySelectorData(event.getKey(), event.getValue());
+        org.apache.shenyu.admin.listener.DataChangedEvent dataChangedEvent = null;
+        List<DiscoveryUpstreamData> upstreamDataList = discoverySyncData.getUpstreamDataList();
+        if (needPersistence) {
+            if (CollectionUtils.isEmpty(upstreamDataList)) {
+                LOGGER.warn(""shenyu proxySelectorData#discoveryUpstreamList is empty"");
+                return;
+            }
+            switch (currentEvent) {
+                case ADDED:
+                    upstreamDataList.forEach(d -> {
+                        DiscoveryUpstreamDO discoveryUpstreamDO = new DiscoveryUpstreamDO();
+                        BeanUtils.copyProperties(d, discoveryUpstreamDO);
+                        discoveryUpstreamDO.setId(UUIDUtils.getInstance().generateShortUuid());
+                        discoveryUpstreamDO.setDateCreated(new Timestamp(System.currentTimeMillis()));
+                        discoveryUpstreamDO.setDateUpdated(new Timestamp(System.currentTimeMillis()));
+                        discoveryUpstreamMapper.insert(discoveryUpstreamDO);
+                        LOGGER.info(""shenyu [DiscoveryDataChangedEventSyncListener] ADDED Upstream {}"", discoveryUpstreamDO.getUrl());
+                    });
+                    fillFullyDiscoverySyncData(discoverySyncData);
+                    dataChangedEvent = new org.apache.shenyu.admin.listener.DataChangedEvent(ConfigGroupEnum.PROXY_SELECTOR, DataEventTypeEnum.CREATE, Collections.singletonList(discoverySyncData));
+                    break;
+                case UPDATED:
+                    upstreamDataList.forEach(d -> {
+                        DiscoveryUpstreamDO discoveryUpstreamDO = new DiscoveryUpstreamDO();
+                        BeanUtils.copyProperties(d, discoveryUpstreamDO);
+                        discoveryUpstreamMapper.update(discoveryUpstreamDO);
+                        LOGGER.info(""shenyu [DiscoveryDataChangedEventSyncListener] UPDATE Upstream {}"", discoveryUpstreamDO.getUrl());
+                    });
+                    fillFullyDiscoverySyncData(discoverySyncData);
+                    dataChangedEvent = new org.apache.shenyu.admin.listener.DataChangedEvent(ConfigGroupEnum.PROXY_SELECTOR, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData));
+                    break;
+                case DELETED:
+                    if (CollectionUtils.isNotEmpty(upstreamDataList)) {
+                        upstreamDataList.forEach(up -> {
+                            discoveryUpstreamMapper.deleteByUrl(up.getUrl());
+                            LOGGER.info(""shenyu [DiscoveryDataChangedEventSyncListener] DELETE Upstream {}"", up.getUrl());
+                        });
+                    }
+                    fillFullyDiscoverySyncData(discoverySyncData);
+                    dataChangedEvent = new org.apache.shenyu.admin.listener.DataChangedEvent(ConfigGroupEnum.PROXY_SELECTOR, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData));
+                    break;
+                default:","[{'comment': 'not have default, or throw illegalException', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ywj1352'}]"
4735,shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/AbstractListDataChangedListener.java,"@@ -248,12 +249,14 @@ public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum
         LOG.debug(""[DataChangedListener] RuleChanged {}"", changeData.getRuleDataId());
     }
 
+    // fixme: 12/6/2023 需要 验证 暂时只是 编译不报错了","[{'comment': 'remove this', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ywj1352'}]"
4735,shenyu-discovery/shenyu-discovery-zookeeper/src/main/java/org/apache/shenyu/discovery/zookeeper/ZookeeperDiscoveryService.java,"@@ -112,59 +116,81 @@ private void createOrUpdate(final String key, final String value, final CreateMo
     @Override
     public void watcher(final String key, final DataChangedEventListener listener) {
         try {
-            this.client.getData().usingWatcher(new CuratorWatcher() {
-                @Override
-                public void process(final WatchedEvent watchedEvent) throws Exception {
-                    if (Objects.nonNull(listener)) {
-                        String path = Objects.isNull(watchedEvent.getPath()) ? """" : watchedEvent.getPath();
-                        if (StringUtils.isNoneBlank(path)) {
-                            client.getData().usingWatcher(this).forPath(path);
-                            byte[] ret = client.getData().forPath(key);
-                            String data = Objects.isNull(ret) ? null : new String(ret, StandardCharsets.UTF_8);
-                            LOGGER.info(""shenyu ZookeeperDiscoveryService onChange key={}"", path);
-                            listener.onChange(buildDataChangedEvent(path, data, watchedEvent));
-                        }
+            TreeCache treeCache = new TreeCache(client, key);
+            TreeCacheListener treeCacheListener = (curatorFramework, event) -> {
+                ChildData data = event.getData();
+                DataChangedEvent dataChangedEvent;
+                if (Objects.nonNull(data) && Objects.nonNull(data.getData())) {
+                    String currentPath = data.getPath();
+                    Stat stat = data.getStat();
+                    boolean isEphemeral = stat != null && stat.getEphemeralOwner() > 0;","[{'comment': 'use Objects.nonNull', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ywj1352'}]"
4735,shenyu-discovery/shenyu-discovery-zookeeper/src/main/java/org/apache/shenyu/discovery/zookeeper/ZookeeperDiscoveryService.java,"@@ -112,59 +116,81 @@ private void createOrUpdate(final String key, final String value, final CreateMo
     @Override
     public void watcher(final String key, final DataChangedEventListener listener) {
         try {
-            this.client.getData().usingWatcher(new CuratorWatcher() {
-                @Override
-                public void process(final WatchedEvent watchedEvent) throws Exception {
-                    if (Objects.nonNull(listener)) {
-                        String path = Objects.isNull(watchedEvent.getPath()) ? """" : watchedEvent.getPath();
-                        if (StringUtils.isNoneBlank(path)) {
-                            client.getData().usingWatcher(this).forPath(path);
-                            byte[] ret = client.getData().forPath(key);
-                            String data = Objects.isNull(ret) ? null : new String(ret, StandardCharsets.UTF_8);
-                            LOGGER.info(""shenyu ZookeeperDiscoveryService onChange key={}"", path);
-                            listener.onChange(buildDataChangedEvent(path, data, watchedEvent));
-                        }
+            TreeCache treeCache = new TreeCache(client, key);
+            TreeCacheListener treeCacheListener = (curatorFramework, event) -> {
+                ChildData data = event.getData();
+                DataChangedEvent dataChangedEvent;
+                if (Objects.nonNull(data) && Objects.nonNull(data.getData())) {
+                    String currentPath = data.getPath();
+                    Stat stat = data.getStat();
+                    boolean isEphemeral = stat != null && stat.getEphemeralOwner() > 0;
+                    if (!isEphemeral) {
+                        LOGGER.info(""shenyu Ignore non-ephemeral node changes"");
+                        return;
+                    }
+                    switch (event.getType()) {
+                        case NODE_ADDED:
+                            dataChangedEvent = new DataChangedEvent(currentPath, new String(data.getData(), StandardCharsets.UTF_8), DataChangedEvent.Event.ADDED);
+                            break;
+                        case NODE_UPDATED:
+                            dataChangedEvent = new DataChangedEvent(currentPath, new String(data.getData(), StandardCharsets.UTF_8), DataChangedEvent.Event.UPDATED);
+                            break;
+                        case NODE_REMOVED:
+                            dataChangedEvent = new DataChangedEvent(currentPath, new String(data.getData(), StandardCharsets.UTF_8), DataChangedEvent.Event.DELETED);
+                            break;
+                        default:
+                            dataChangedEvent = new DataChangedEvent(currentPath, new String(data.getData(), StandardCharsets.UTF_8), DataChangedEvent.Event.IGNORED);
+                            break;
                     }
+                    listener.onChange(dataChangedEvent);
                 }
-            }).forPath(key);
+            };
+            treeCache.getListenable().addListener(treeCacheListener);","[{'comment': 'treeCache can use customize thread executor?', 'commenter': 'moremind'}, {'comment': 'in discovery module, i just use default executor .', 'commenter': 'ywj1352'}]"
4735,shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DiscoveryDataChangedEventSyncListener.java,"@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.admin.discovery;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.admin.discovery.parse.KeyValueParser;
+import org.apache.shenyu.admin.listener.DataChangedEvent;
+import org.apache.shenyu.admin.mapper.DiscoveryUpstreamMapper;
+import org.apache.shenyu.admin.model.entity.DiscoveryUpstreamDO;
+import org.apache.shenyu.admin.transfer.DiscoveryTransfer;
+import org.apache.shenyu.common.dto.DiscoverySyncData;
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
+import org.apache.shenyu.common.dto.ProxySelectorData;
+import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.apache.shenyu.discovery.api.listener.DiscoveryDataChangedEvent;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.context.ApplicationEventPublisher;
+
+import java.sql.Timestamp;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+/**
+ * DiscoveryHandler.
+ */
+public class DiscoveryDataChangedEventSyncListener implements DataChangedEventListener {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(DiscoveryDataChangedEventSyncListener.class);
+
+    private final KeyValueParser keyValueParser;
+
+    private final ApplicationEventPublisher eventPublisher;
+
+    private final DiscoveryUpstreamMapper discoveryUpstreamMapper;
+
+    private final Boolean needPersistence;
+
+    public DiscoveryDataChangedEventSyncListener(final ApplicationEventPublisher eventPublisher,
+                                                 final DiscoveryUpstreamMapper discoveryUpstreamMapper,
+                                                 final KeyValueParser keyValueParser,
+                                                 final Boolean needPersistence) {
+        this.eventPublisher = eventPublisher;
+        this.keyValueParser = keyValueParser;
+        this.discoveryUpstreamMapper = discoveryUpstreamMapper;
+        this.needPersistence = needPersistence;
+    }
+
+    @Override
+    public void onChange(final DiscoveryDataChangedEvent event) {
+        DiscoveryDataChangedEvent.Event currentEvent = event.getEvent();
+        if (DiscoveryDataChangedEvent.Event.IGNORED.equals(currentEvent)) {
+            return;
+        }
+        DiscoverySyncData discoverySyncData = buildProxySelectorData(event.getKey(), event.getValue());
+        org.apache.shenyu.admin.listener.DataChangedEvent dataChangedEvent = null;","[{'comment': 'refactor another datachangeEvent.', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ywj1352'}]"
4747,shenyu-bootstrap/pom.xml,"@@ -477,6 +477,13 @@
             <version>${project.version}</version>
         </dependency>
 
+        <!--shenyu data sync start use nacos-->
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>","[{'comment': 'remove this or add a comment with nacos, you can dependent on with nacos lib', 'commenter': 'moremind'}]"
4807,.github/workflows/e2e.yaml,"@@ -142,12 +142,66 @@ jobs:
           bash ./shenyu-e2e/script/storage_init.sh
           ./mvnw -B -f ./shenyu-e2e/pom.xml -pl shenyu-e2e-case/shenyu-e2e-case-http -Dstorage=${{ matrix.storage }} test
 
+  e2e-other:","[{'comment': 'e2e-case', 'commenter': 'moremind'}, {'comment': 'I will change it.', 'commenter': 'HaiqiQin'}]"
4812,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/pom.xml,"@@ -0,0 +1,49 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>shenyu-plugin-logging</artifactId>
+        <groupId>org.apache.shenyu</groupId>
+        <version>2.6.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>shenyu-plugin-logging-huawei-lts</artifactId>
+
+    <properties>
+        <maven.compiler.source>8</maven.compiler.source>
+        <maven.compiler.target>8</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-plugin-logging-common</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>io.github.huaweicloud</groupId>
+            <artifactId>lts-sdk-java</artifactId>
+            <version>1.0.1</version>","[{'comment': 'use common properties', 'commenter': 'moremind'}]"
4812,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/main/java/org/apache/shenyu/plugin/huawei/lts/client/HuaweiLtsLogCollectClient.java,"@@ -0,0 +1,206 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.huawei.lts.client;
+
+import com.alibaba.fastjson.JSONObject;
+import com.google.common.util.concurrent.FutureCallback;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+import com.huaweicloud.lts.appender.JavaSDKAppender;
+import com.huaweicloud.lts.producer.Producer;
+import com.huaweicloud.lts.producer.Result;
+import com.huaweicloud.lts.producer.exception.ProducerException;
+import com.huaweicloud.lts.producer.exception.ResultFailedException;
+import com.huaweicloud.lts.producer.model.log.LogContent;
+import com.huaweicloud.lts.producer.model.log.LogItem;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.plugin.huawei.lts.config.HuaweiLogCollectConfig;
+import org.apache.shenyu.plugin.logging.common.client.AbstractLogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.lang.NonNull;
+
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class HuaweiLtsLogCollectClient extends AbstractLogConsumeClient<HuaweiLogCollectConfig.HuaweiLtsLogConfig, ShenyuRequestLog> {
+
+    private Producer producer;
+
+    private String logGroupId;
+
+    private String logStreamId;
+
+    private String projectId;
+
+    private ThreadPoolExecutor threadExecutor;
+
+    @Override
+    public void initClient0(@NonNull final HuaweiLogCollectConfig.HuaweiLtsLogConfig huaweiLtsLogConfig) {
+        final String accessKeyId = huaweiLtsLogConfig.getAccessKeyId();
+        final String accessKeySecret = huaweiLtsLogConfig.getAccessKeySecret();
+        final String regionName = huaweiLtsLogConfig.getRegionName();
+        this.projectId = huaweiLtsLogConfig.getProjectId();
+        this.logGroupId = huaweiLtsLogConfig.getLogGroupId();
+        this.logStreamId = huaweiLtsLogConfig.getLogStreamId();
+        if (StringUtils.isBlank(accessKeyId) || StringUtils.isBlank(accessKeySecret) || StringUtils.isBlank(projectId)
+                || StringUtils.isBlank(regionName) || StringUtils.isBlank(logGroupId) || StringUtils.isBlank(logStreamId)) {
+            LOG.error(""init Huawei lts client error, please check projectId, accessKeyId, accessKeySecret, regionName, logGroupId or logStreamId"");
+            return;
+        }
+        JavaSDKAppender appender = JavaSDKAppender.custom()
+                // 华为云帐号的项目ID（project id）","[{'comment': 'use english comment', 'commenter': 'moremind'}]"
4812,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/main/java/org/apache/shenyu/plugin/huawei/lts/client/HuaweiLtsLogCollectClient.java,"@@ -0,0 +1,206 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.huawei.lts.client;
+
+import com.alibaba.fastjson.JSONObject;
+import com.google.common.util.concurrent.FutureCallback;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+import com.huaweicloud.lts.appender.JavaSDKAppender;
+import com.huaweicloud.lts.producer.Producer;
+import com.huaweicloud.lts.producer.Result;
+import com.huaweicloud.lts.producer.exception.ProducerException;
+import com.huaweicloud.lts.producer.exception.ResultFailedException;
+import com.huaweicloud.lts.producer.model.log.LogContent;
+import com.huaweicloud.lts.producer.model.log.LogItem;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.plugin.huawei.lts.config.HuaweiLogCollectConfig;
+import org.apache.shenyu.plugin.logging.common.client.AbstractLogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.lang.NonNull;
+
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class HuaweiLtsLogCollectClient extends AbstractLogConsumeClient<HuaweiLogCollectConfig.HuaweiLtsLogConfig, ShenyuRequestLog> {
+
+    private Producer producer;
+
+    private String logGroupId;
+
+    private String logStreamId;
+
+    private String projectId;
+
+    private ThreadPoolExecutor threadExecutor;
+
+    @Override
+    public void initClient0(@NonNull final HuaweiLogCollectConfig.HuaweiLtsLogConfig huaweiLtsLogConfig) {
+        final String accessKeyId = huaweiLtsLogConfig.getAccessKeyId();
+        final String accessKeySecret = huaweiLtsLogConfig.getAccessKeySecret();
+        final String regionName = huaweiLtsLogConfig.getRegionName();
+        this.projectId = huaweiLtsLogConfig.getProjectId();
+        this.logGroupId = huaweiLtsLogConfig.getLogGroupId();
+        this.logStreamId = huaweiLtsLogConfig.getLogStreamId();
+        if (StringUtils.isBlank(accessKeyId) || StringUtils.isBlank(accessKeySecret) || StringUtils.isBlank(projectId)
+                || StringUtils.isBlank(regionName) || StringUtils.isBlank(logGroupId) || StringUtils.isBlank(logStreamId)) {
+            LOG.error(""init Huawei lts client error, please check projectId, accessKeyId, accessKeySecret, regionName, logGroupId or logStreamId"");
+            return;
+        }
+        JavaSDKAppender appender = JavaSDKAppender.custom()
+                // 华为云帐号的项目ID（project id）
+                .setProjectId(projectId)
+                // 华为云帐号的AK
+                .setAccessKeyId(accessKeyId)
+                // 华为云帐号的SK
+                .setAccessKeySecret(accessKeySecret)
+                // 云日志服务的区域
+                .setRegionName(regionName)
+                // 单个Appender能缓存的日志大小上限
+                .setTotalSizeInBytes(huaweiLtsLogConfig.getTotalSizeInBytes())
+                // producer发送日志时阻塞时间
+                .setMaxBlockMs(huaweiLtsLogConfig.getMaxBlockMs())
+                // producer发送单批日志量上限
+                .setBatchSizeThresholdInBytes(huaweiLtsLogConfig.getBatchSizeThresholdInBytes())
+                // producer发送单批日志条数上限
+                .setBatchCountThreshold(huaweiLtsLogConfig.getBatchCountThreshold())
+                // producer发送单批日志等待时间
+                .setLingerMs(huaweiLtsLogConfig.getLingerMs())
+                // producer发送日志失败后重试次数
+                .setRetries(huaweiLtsLogConfig.getRetries())
+                // 首次重试的退避时间
+                .setBaseRetryBackoffMs(huaweiLtsLogConfig.getBaseRetryBackoffMs())
+                // 重试的最大退避时间","[{'comment': 'same', 'commenter': 'moremind'}]"
4812,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/main/java/org/apache/shenyu/plugin/huawei/lts/client/HuaweiLtsLogCollectClient.java,"@@ -0,0 +1,206 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.huawei.lts.client;
+
+import com.alibaba.fastjson.JSONObject;
+import com.google.common.util.concurrent.FutureCallback;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+import com.huaweicloud.lts.appender.JavaSDKAppender;
+import com.huaweicloud.lts.producer.Producer;
+import com.huaweicloud.lts.producer.Result;
+import com.huaweicloud.lts.producer.exception.ProducerException;
+import com.huaweicloud.lts.producer.exception.ResultFailedException;
+import com.huaweicloud.lts.producer.model.log.LogContent;
+import com.huaweicloud.lts.producer.model.log.LogItem;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.plugin.huawei.lts.config.HuaweiLogCollectConfig;
+import org.apache.shenyu.plugin.logging.common.client.AbstractLogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.lang.NonNull;
+
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class HuaweiLtsLogCollectClient extends AbstractLogConsumeClient<HuaweiLogCollectConfig.HuaweiLtsLogConfig, ShenyuRequestLog> {
+
+    private Producer producer;
+
+    private String logGroupId;
+
+    private String logStreamId;
+
+    private String projectId;
+
+    private ThreadPoolExecutor threadExecutor;
+
+    @Override
+    public void initClient0(@NonNull final HuaweiLogCollectConfig.HuaweiLtsLogConfig huaweiLtsLogConfig) {
+        final String accessKeyId = huaweiLtsLogConfig.getAccessKeyId();
+        final String accessKeySecret = huaweiLtsLogConfig.getAccessKeySecret();
+        final String regionName = huaweiLtsLogConfig.getRegionName();
+        this.projectId = huaweiLtsLogConfig.getProjectId();
+        this.logGroupId = huaweiLtsLogConfig.getLogGroupId();
+        this.logStreamId = huaweiLtsLogConfig.getLogStreamId();
+        if (StringUtils.isBlank(accessKeyId) || StringUtils.isBlank(accessKeySecret) || StringUtils.isBlank(projectId)
+                || StringUtils.isBlank(regionName) || StringUtils.isBlank(logGroupId) || StringUtils.isBlank(logStreamId)) {
+            LOG.error(""init Huawei lts client error, please check projectId, accessKeyId, accessKeySecret, regionName, logGroupId or logStreamId"");
+            return;
+        }
+        JavaSDKAppender appender = JavaSDKAppender.custom()
+                // 华为云帐号的项目ID（project id）
+                .setProjectId(projectId)
+                // 华为云帐号的AK
+                .setAccessKeyId(accessKeyId)
+                // 华为云帐号的SK
+                .setAccessKeySecret(accessKeySecret)
+                // 云日志服务的区域
+                .setRegionName(regionName)
+                // 单个Appender能缓存的日志大小上限
+                .setTotalSizeInBytes(huaweiLtsLogConfig.getTotalSizeInBytes())
+                // producer发送日志时阻塞时间
+                .setMaxBlockMs(huaweiLtsLogConfig.getMaxBlockMs())
+                // producer发送单批日志量上限
+                .setBatchSizeThresholdInBytes(huaweiLtsLogConfig.getBatchSizeThresholdInBytes())
+                // producer发送单批日志条数上限
+                .setBatchCountThreshold(huaweiLtsLogConfig.getBatchCountThreshold())
+                // producer发送单批日志等待时间
+                .setLingerMs(huaweiLtsLogConfig.getLingerMs())
+                // producer发送日志失败后重试次数
+                .setRetries(huaweiLtsLogConfig.getRetries())
+                // 首次重试的退避时间
+                .setBaseRetryBackoffMs(huaweiLtsLogConfig.getBaseRetryBackoffMs())
+                // 重试的最大退避时间
+                .setMaxRetryBackoffMs(huaweiLtsLogConfig.getMaxRetryBackoffMs())
+                // 默认false, true: 可以跨云上报日志, false: 仅能在华为云ecs主机上报日志
+                .setEnableLocalTest(Boolean.parseBoolean(huaweiLtsLogConfig.getEnableLocalTest()))
+                // 超过1M的日志, 拆分后丢弃大于1M的数据
+                .setGiveUpExtraLongSingleLog(Boolean.parseBoolean(huaweiLtsLogConfig.getEnableLocalTest()))
+                .builder();
+        this.producer = appender.getProducer();
+
+        threadExecutor = createThreadPoolExecutor(huaweiLtsLogConfig.getIoThreadCount());
+    }
+
+    @Override
+    public void consume0(@NonNull final List<ShenyuRequestLog> logs) throws Exception {
+        logs.forEach(this::sendLog);
+    }
+
+    @Override
+    public void close0() throws Exception {
+        if (Objects.nonNull(producer)) {
+            try {
+                producer.close();
+
+            } catch (InterruptedException | ProducerException e) {
+                LOG.error(""Close producer error."");
+            }
+        }
+    }
+
+    /**
+     * send log to Tencent cls.
+     *
+     * @param log log
+     */
+    private void sendLog(final ShenyuRequestLog log) {
+        final List<LogItem> logItems = new ArrayList<>();
+        final List<LogItem> logItemList = new ArrayList<>();
+        LogItem logItem = new LogItem();
+        logItem.setTenantProjectId(projectId);
+        logItems.add(logItem);
+        logItem.setLabels(JSONObject.toJSONString(new HashMap<>()));
+        List<LogContent> contents = new ArrayList<>();
+        LogContent logContent = new LogContent();
+        logContent.setLogTimeNs(System.currentTimeMillis() * 1000000L + System.nanoTime() % 1000000L);
+        logContent.setLog(log.toString());
+        contents.add(logContent);
+
+        logItem.setContents(contents);
+        logItemList.add(logItem);
+
+        try {
+            final ListenableFuture<Result> f = producer.send(logGroupId, logStreamId, logItemList);
+            Futures.addCallback(f, new ProducerFutureCallback(logGroupId, logStreamId), threadExecutor);
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e);","[{'comment': 'not throw runtime exception', 'commenter': 'moremind'}]"
4812,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/test/java/org/apache/shenyu/plugin/huawei/lts/handler/LoggingHuaweiLtsPluginDataHandlerTest.java,"@@ -0,0 +1,68 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.huawei.lts.handler;
+
+import org.apache.shenyu.common.dto.PluginData;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.plugin.huawei.lts.client.HuaweiLtsLogCollectClient;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import java.lang.reflect.Field;
+
+public class LoggingHuaweiLtsPluginDataHandlerTest {
+
+    private LoggingHuaweiLtsPluginDataHandler loggingHuaweiLtsPluginDataHandler;
+
+    private final PluginData pluginData = new PluginData();
+
+    @BeforeEach
+    private void setUp() {
+        this.loggingHuaweiLtsPluginDataHandler = new LoggingHuaweiLtsPluginDataHandler();
+        pluginData.setEnabled(true);
+        pluginData.setConfig(""{\n""
+                + ""    \""projectId\"": \""3d696d796b9647f982b5ec787b2ca249\"",\n""
+                + ""    \""logGroupId\"": \""8285fbe3-9c73-4deb-a8d0-96ec06c4af3a\"",\n""
+                + ""    \""logStreamId\"": \""8b4fe176-4a7e-4bd5-8bb7-17d0ec6730b2\"",\n""","[{'comment': 'use your accessId and secret key', 'commenter': 'moremind'}]"
4812,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/main/java/org/apache/shenyu/plugin/huawei/lts/client/HuaweiLtsLogCollectClient.java,"@@ -0,0 +1,206 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.huawei.lts.client;
+
+import com.alibaba.fastjson.JSONObject;
+import com.google.common.util.concurrent.FutureCallback;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+import com.huaweicloud.lts.appender.JavaSDKAppender;
+import com.huaweicloud.lts.producer.Producer;
+import com.huaweicloud.lts.producer.Result;
+import com.huaweicloud.lts.producer.exception.ProducerException;
+import com.huaweicloud.lts.producer.exception.ResultFailedException;
+import com.huaweicloud.lts.producer.model.log.LogContent;
+import com.huaweicloud.lts.producer.model.log.LogItem;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.plugin.huawei.lts.config.HuaweiLogCollectConfig;
+import org.apache.shenyu.plugin.logging.common.client.AbstractLogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.lang.NonNull;
+
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class HuaweiLtsLogCollectClient extends AbstractLogConsumeClient<HuaweiLogCollectConfig.HuaweiLtsLogConfig, ShenyuRequestLog> {
+
+    private Producer producer;
+
+    private String logGroupId;
+
+    private String logStreamId;
+
+    private String projectId;
+
+    private ThreadPoolExecutor threadExecutor;
+
+    @Override
+    public void initClient0(@NonNull final HuaweiLogCollectConfig.HuaweiLtsLogConfig huaweiLtsLogConfig) {
+        final String accessKeyId = huaweiLtsLogConfig.getAccessKeyId();
+        final String accessKeySecret = huaweiLtsLogConfig.getAccessKeySecret();
+        final String regionName = huaweiLtsLogConfig.getRegionName();
+        this.projectId = huaweiLtsLogConfig.getProjectId();
+        this.logGroupId = huaweiLtsLogConfig.getLogGroupId();
+        this.logStreamId = huaweiLtsLogConfig.getLogStreamId();
+        if (StringUtils.isBlank(accessKeyId) || StringUtils.isBlank(accessKeySecret) || StringUtils.isBlank(projectId)
+                || StringUtils.isBlank(regionName) || StringUtils.isBlank(logGroupId) || StringUtils.isBlank(logStreamId)) {
+            LOG.error(""init Huawei lts client error, please check projectId, accessKeyId, accessKeySecret, regionName, logGroupId or logStreamId"");
+            return;
+        }
+        JavaSDKAppender appender = JavaSDKAppender.custom()
+                // 华为云帐号的项目ID（project id）
+                .setProjectId(projectId)
+                // 华为云帐号的AK
+                .setAccessKeyId(accessKeyId)
+                // 华为云帐号的SK
+                .setAccessKeySecret(accessKeySecret)
+                // 云日志服务的区域
+                .setRegionName(regionName)
+                // 单个Appender能缓存的日志大小上限
+                .setTotalSizeInBytes(huaweiLtsLogConfig.getTotalSizeInBytes())
+                // producer发送日志时阻塞时间
+                .setMaxBlockMs(huaweiLtsLogConfig.getMaxBlockMs())
+                // producer发送单批日志量上限
+                .setBatchSizeThresholdInBytes(huaweiLtsLogConfig.getBatchSizeThresholdInBytes())
+                // producer发送单批日志条数上限","[{'comment': 'not comment with .', 'commenter': 'moremind'}]"
4812,shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-huawei-lts/src/test/java/org/apache/shenyu/springboot/starter/plugin/logging/huawei/lts/LoggingTencentClsPluginConfigurationTest.java,"@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.springboot.starter.plugin.logging.huawei.lts;
+
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.plugin.api.ShenyuPlugin;
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.autoconfigure.AutoConfigurations;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.boot.test.context.runner.ApplicationContextRunner;
+import org.springframework.context.annotation.Configuration;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+@Configuration
+@EnableConfigurationProperties
+public class LoggingTencentClsPluginConfigurationTest {","[{'comment': 'cls？', 'commenter': 'moremind'}, {'comment': 'Thanks, I will improve the code', 'commenter': 'xcsnx'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DivideIngressParser.java,"@@ -0,0 +1,351 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1EndpointAddress;
+import io.kubernetes.client.openapi.models.V1EndpointSubset;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressServiceBackend;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
+import org.apache.shenyu.common.enums.LoadBalanceEnum;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+public class DivideIngressParser implements K8sResourceParser<V1Ingress> {
+    private static final Logger LOG = LoggerFactory.getLogger(IngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * IngressParser Constructor.
+     *
+     * @param serviceLister serviceLister
+     * @param endpointsLister endpointsLister
+     */
+    public DivideIngressParser(final Lister<V1Service> serviceLister, final Lister<V1Endpoints> endpointsLister) {
+        this.serviceLister = serviceLister;
+        this.endpointsLister = endpointsLister;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (ingress.getSpec() != null) {
+            // Parse the default backend
+            V1IngressBackend defaultBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+            List<DivideUpstream> defaultUpstreamList = parseDefaultService(defaultBackend, namespace);
+
+            if (rules == null || rules.isEmpty()) {
+                // if rules is null, defaultBackend become global default
+                if (defaultBackend != null && defaultBackend.getService() != null) {
+                    Pair<SelectorData, RuleData> defaultRouteConfig = getDefaultRouteConfig(defaultUpstreamList, ingress.getMetadata().getAnnotations());
+                    res.setGlobalDefaultBackend(Pair.of(Pair.of(namespace + ""/"" + ingress.getMetadata().getName(), defaultBackend.getService().getName()),
+                            defaultRouteConfig));
+                }
+            } else {
+                // if rules is not null, defaultBackend is default in this ingress
+                List<Pair<SelectorData, RuleData>> routeList = new ArrayList<>(rules.size());
+                for (V1IngressRule ingressRule : rules) {
+                    List<Pair<SelectorData, RuleData>> routes = parseIngressRule(ingressRule, defaultUpstreamList,
+                            Objects.requireNonNull(ingress.getMetadata()).getNamespace(), ingress.getMetadata().getAnnotations());
+                    routeList.addAll(routes);
+                }
+                res.setRouteConfigList(routeList);
+            }
+
+            // Parse tls
+            if (tlsList != null && !tlsList.isEmpty()) {
+                List<SslCrtAndKeyStream> sslList = new ArrayList<>();
+                for (V1IngressTLS tls : tlsList) {
+                    if (tls.getSecretName() != null && tls.getHosts() != null && !tls.getHosts().isEmpty()) {
+                        try {
+                            V1Secret secret = coreV1Api.readNamespacedSecret(tls.getSecretName(), namespace, ""ture"");
+                            if (secret.getData() != null) {
+                                InputStream keyCertChainInputStream = new ByteArrayInputStream(secret.getData().get(""tls.crt""));
+                                InputStream keyInputStream = new ByteArrayInputStream(secret.getData().get(""tls.key""));
+                                tls.getHosts().forEach(host ->
+                                        sslList.add(new SslCrtAndKeyStream(host, keyCertChainInputStream, keyInputStream))
+                                );
+                            }
+                        } catch (ApiException e) {
+                            LOG.error(""parse tls failed "", e);
+                        }
+                    }
+                }
+                res.setTlsConfigList(sslList);
+            }
+        }
+        return res;
+    }
+
+    private List<DivideUpstream> parseDefaultService(final V1IngressBackend defaultBackend, final String namespace) {
+        List<DivideUpstream> defaultUpstreamList = new ArrayList<>();
+        if (defaultBackend != null && defaultBackend.getService() != null) {
+            String serviceName = defaultBackend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (subsets == null || subsets.isEmpty()) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (addresses == null || addresses.isEmpty()) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(defaultBackend.getService());
+                        if (defaultPort != null) {
+                            DivideUpstream upstream = new DivideUpstream();
+                            upstream.setUpstreamUrl(upstreamIp + "":"" + defaultPort);
+                            upstream.setWeight(100);
+                            // TODO support config protocol in annotation
+                            upstream.setProtocol(""http://"");
+                            upstream.setWarmup(0);
+                            upstream.setStatus(true);
+                            upstream.setUpstreamHost("""");
+                            defaultUpstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return defaultUpstreamList;
+    }
+
+    private List<Pair<SelectorData, RuleData>> parseIngressRule(final V1IngressRule ingressRule,
+                                                                final List<DivideUpstream> defaultUpstream,
+                                                                final String namespace,
+                                                                final Map<String, String> annotations) {
+        List<Pair<SelectorData, RuleData>> res = new ArrayList<>();
+
+        ConditionData hostCondition = null;
+        if (ingressRule.getHost() != null) {
+            hostCondition = new ConditionData();
+            hostCondition.setParamType(ParamTypeEnum.DOMAIN.getName());
+            hostCondition.setOperator(OperatorEnum.EQ.getAlias());
+            hostCondition.setParamValue(ingressRule.getHost());
+        }
+        if (ingressRule.getHttp() != null) {
+            List<V1HTTPIngressPath> paths = ingressRule.getHttp().getPaths();
+            if (paths != null) {
+                for (V1HTTPIngressPath path : paths) {
+                    if (path.getPath() == null) {
+                        continue;
+                    }
+
+                    OperatorEnum operator;
+                    if (""ImplementationSpecific"".equals(path.getPathType())) {
+                        operator = OperatorEnum.MATCH;
+                    } else if (""Prefix"".equals(path.getPathType())) {
+                        operator = OperatorEnum.STARTS_WITH;
+                    } else if (""Exact"".equals(path.getPathType())) {
+                        operator = OperatorEnum.EQ;
+                    } else {
+                        LOG.info(""Invalid path type, set it with match operator"");
+                        operator = OperatorEnum.MATCH;
+                    }
+
+                    ConditionData pathCondition = new ConditionData();
+                    pathCondition.setOperator(operator.getAlias());
+                    pathCondition.setParamType(ParamTypeEnum.URI.getName());
+                    pathCondition.setParamValue(path.getPath());
+                    List<ConditionData> conditionList = new ArrayList<>(2);
+                    if (hostCondition != null) {","[{'comment': 'use objects.nonNull()', 'commenter': 'moremind'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DivideIngressParser.java,"@@ -0,0 +1,351 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1EndpointAddress;
+import io.kubernetes.client.openapi.models.V1EndpointSubset;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressServiceBackend;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
+import org.apache.shenyu.common.enums.LoadBalanceEnum;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+public class DivideIngressParser implements K8sResourceParser<V1Ingress> {
+    private static final Logger LOG = LoggerFactory.getLogger(IngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * IngressParser Constructor.
+     *
+     * @param serviceLister serviceLister
+     * @param endpointsLister endpointsLister
+     */
+    public DivideIngressParser(final Lister<V1Service> serviceLister, final Lister<V1Endpoints> endpointsLister) {
+        this.serviceLister = serviceLister;
+        this.endpointsLister = endpointsLister;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (ingress.getSpec() != null) {
+            // Parse the default backend
+            V1IngressBackend defaultBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+            List<DivideUpstream> defaultUpstreamList = parseDefaultService(defaultBackend, namespace);
+
+            if (rules == null || rules.isEmpty()) {
+                // if rules is null, defaultBackend become global default
+                if (defaultBackend != null && defaultBackend.getService() != null) {
+                    Pair<SelectorData, RuleData> defaultRouteConfig = getDefaultRouteConfig(defaultUpstreamList, ingress.getMetadata().getAnnotations());
+                    res.setGlobalDefaultBackend(Pair.of(Pair.of(namespace + ""/"" + ingress.getMetadata().getName(), defaultBackend.getService().getName()),
+                            defaultRouteConfig));
+                }
+            } else {
+                // if rules is not null, defaultBackend is default in this ingress
+                List<Pair<SelectorData, RuleData>> routeList = new ArrayList<>(rules.size());
+                for (V1IngressRule ingressRule : rules) {
+                    List<Pair<SelectorData, RuleData>> routes = parseIngressRule(ingressRule, defaultUpstreamList,
+                            Objects.requireNonNull(ingress.getMetadata()).getNamespace(), ingress.getMetadata().getAnnotations());
+                    routeList.addAll(routes);
+                }
+                res.setRouteConfigList(routeList);
+            }
+
+            // Parse tls
+            if (tlsList != null && !tlsList.isEmpty()) {
+                List<SslCrtAndKeyStream> sslList = new ArrayList<>();
+                for (V1IngressTLS tls : tlsList) {
+                    if (tls.getSecretName() != null && tls.getHosts() != null && !tls.getHosts().isEmpty()) {
+                        try {
+                            V1Secret secret = coreV1Api.readNamespacedSecret(tls.getSecretName(), namespace, ""ture"");
+                            if (secret.getData() != null) {
+                                InputStream keyCertChainInputStream = new ByteArrayInputStream(secret.getData().get(""tls.crt""));
+                                InputStream keyInputStream = new ByteArrayInputStream(secret.getData().get(""tls.key""));
+                                tls.getHosts().forEach(host ->
+                                        sslList.add(new SslCrtAndKeyStream(host, keyCertChainInputStream, keyInputStream))
+                                );
+                            }
+                        } catch (ApiException e) {
+                            LOG.error(""parse tls failed "", e);
+                        }
+                    }
+                }
+                res.setTlsConfigList(sslList);
+            }
+        }
+        return res;
+    }
+
+    private List<DivideUpstream> parseDefaultService(final V1IngressBackend defaultBackend, final String namespace) {
+        List<DivideUpstream> defaultUpstreamList = new ArrayList<>();
+        if (defaultBackend != null && defaultBackend.getService() != null) {
+            String serviceName = defaultBackend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (subsets == null || subsets.isEmpty()) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (addresses == null || addresses.isEmpty()) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(defaultBackend.getService());
+                        if (defaultPort != null) {
+                            DivideUpstream upstream = new DivideUpstream();
+                            upstream.setUpstreamUrl(upstreamIp + "":"" + defaultPort);
+                            upstream.setWeight(100);
+                            // TODO support config protocol in annotation
+                            upstream.setProtocol(""http://"");
+                            upstream.setWarmup(0);
+                            upstream.setStatus(true);
+                            upstream.setUpstreamHost("""");
+                            defaultUpstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return defaultUpstreamList;
+    }
+
+    private List<Pair<SelectorData, RuleData>> parseIngressRule(final V1IngressRule ingressRule,
+                                                                final List<DivideUpstream> defaultUpstream,
+                                                                final String namespace,
+                                                                final Map<String, String> annotations) {
+        List<Pair<SelectorData, RuleData>> res = new ArrayList<>();
+
+        ConditionData hostCondition = null;
+        if (ingressRule.getHost() != null) {
+            hostCondition = new ConditionData();
+            hostCondition.setParamType(ParamTypeEnum.DOMAIN.getName());
+            hostCondition.setOperator(OperatorEnum.EQ.getAlias());
+            hostCondition.setParamValue(ingressRule.getHost());
+        }
+        if (ingressRule.getHttp() != null) {
+            List<V1HTTPIngressPath> paths = ingressRule.getHttp().getPaths();
+            if (paths != null) {
+                for (V1HTTPIngressPath path : paths) {
+                    if (path.getPath() == null) {
+                        continue;
+                    }
+
+                    OperatorEnum operator;
+                    if (""ImplementationSpecific"".equals(path.getPathType())) {
+                        operator = OperatorEnum.MATCH;
+                    } else if (""Prefix"".equals(path.getPathType())) {
+                        operator = OperatorEnum.STARTS_WITH;
+                    } else if (""Exact"".equals(path.getPathType())) {
+                        operator = OperatorEnum.EQ;
+                    } else {
+                        LOG.info(""Invalid path type, set it with match operator"");
+                        operator = OperatorEnum.MATCH;
+                    }
+
+                    ConditionData pathCondition = new ConditionData();
+                    pathCondition.setOperator(operator.getAlias());
+                    pathCondition.setParamType(ParamTypeEnum.URI.getName());
+                    pathCondition.setParamValue(path.getPath());
+                    List<ConditionData> conditionList = new ArrayList<>(2);
+                    if (hostCondition != null) {
+                        conditionList.add(hostCondition);
+                    }
+                    conditionList.add(pathCondition);
+
+                    SelectorData selectorData = SelectorData.builder()
+                            .pluginId(String.valueOf(PluginEnum.DIVIDE.getCode()))
+                            .pluginName(PluginEnum.DIVIDE.getName())
+                            .name(path.getPath())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .type(SelectorTypeEnum.CUSTOM_FLOW.getCode())
+                            .enabled(true)
+                            .logged(false)
+                            .continued(true)
+                            .conditionList(conditionList).build();
+                    List<DivideUpstream> upstreamList = parseUpstream(path.getBackend(), namespace);
+                    if (upstreamList.isEmpty()) {
+                        upstreamList = defaultUpstream;
+                    }
+                    selectorData.setHandle(GsonUtils.getInstance().toJson(upstreamList));
+
+                    DivideRuleHandle divideRuleHandle = new DivideRuleHandle();
+                    if (annotations != null) {
+                        divideRuleHandle.setLoadBalance(annotations.getOrDefault(IngressConstants.LOADBALANCER_ANNOTATION_KEY, LoadBalanceEnum.RANDOM.getName()));
+                        divideRuleHandle.setRetry(Integer.parseInt(annotations.getOrDefault(IngressConstants.RETRY_ANNOTATION_KEY, ""3"")));
+                        divideRuleHandle.setTimeout(Long.parseLong(annotations.getOrDefault(IngressConstants.TIMEOUT_ANNOTATION_KEY, ""3000"")));
+                        divideRuleHandle.setHeaderMaxSize(Long.parseLong(annotations.getOrDefault(IngressConstants.HEADER_MAX_SIZE_ANNOTATION_KEY, ""10240"")));
+                        divideRuleHandle.setRequestMaxSize(Long.parseLong(annotations.getOrDefault(IngressConstants.REQUEST_MAX_SIZE_ANNOTATION_KEY, ""102400"")));
+                    }
+                    RuleData ruleData = RuleData.builder()
+                            .name(path.getPath())
+                            .pluginName(PluginEnum.DIVIDE.getName())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .conditionDataList(conditionList)
+                            .handle(GsonUtils.getInstance().toJson(divideRuleHandle))
+                            .loged(false)
+                            .enabled(true).build();
+
+                    res.add(Pair.of(selectorData, ruleData));
+                }
+            }
+        }
+        return res;
+    }
+
+    private String parsePort(final V1IngressServiceBackend service) {
+        if (service.getPort() != null) {
+            if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
+                return String.valueOf(service.getPort().getNumber());
+            } else if (service.getPort().getName() != null && !"""".equals(service.getPort().getName().trim())) {
+                return service.getPort().getName().trim();
+            }
+        }
+        return null;
+    }
+
+    private List<DivideUpstream> parseUpstream(final V1IngressBackend backend, final String namespace) {
+        List<DivideUpstream> upstreamList = new ArrayList<>();
+        if (backend != null && backend.getService() != null && backend.getService().getName() != null) {
+            String serviceName = backend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (subsets == null || subsets.isEmpty()) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (addresses == null || addresses.isEmpty()) {","[{'comment': 'pls refer to: https://shenyu.apache.org/zh/community/code-suggestions', 'commenter': 'moremind'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DivideIngressParser.java,"@@ -0,0 +1,351 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1EndpointAddress;
+import io.kubernetes.client.openapi.models.V1EndpointSubset;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressServiceBackend;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
+import org.apache.shenyu.common.enums.LoadBalanceEnum;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+public class DivideIngressParser implements K8sResourceParser<V1Ingress> {
+    private static final Logger LOG = LoggerFactory.getLogger(IngressParser.class);","[{'comment': 'Add a blank line before this line', 'commenter': 'JooKS-me'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DubboIngressParser.java,"@@ -0,0 +1,322 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1EndpointAddress;
+import io.kubernetes.client.openapi.models.V1EndpointSubset;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressServiceBackend;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.convert.rule.impl.DubboRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.DubboUpstream;
+import org.apache.shenyu.common.enums.LoadBalanceEnum;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+public class DubboIngressParser implements K8sResourceParser<V1Ingress> {
+
+    private static final Logger LOG = LoggerFactory.getLogger(DubboIngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * DubboIngressParser Constructor.
+     *
+     * @param serviceInformer   serviceInformer
+     * @param endpointsInformer endpointsInformer
+     */
+    public DubboIngressParser(final Lister<V1Service> serviceInformer, final Lister<V1Endpoints> endpointsInformer) {
+        this.serviceLister = serviceInformer;
+        this.endpointsLister = endpointsInformer;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress   ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (Objects.nonNull(ingress.getSpec())) {
+            // Parse the dubbo backend
+            V1IngressBackend dubboBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+            List<DubboUpstream> dubboUpstreamList = parseDubboService(dubboBackend, namespace);
+            // if rules is not null, dubboBackend is default in this ingress
+            List<Pair<SelectorData, RuleData>> routeList = new ArrayList<>(rules.size());
+            for (V1IngressRule ingressRule : rules) {
+                List<Pair<SelectorData, RuleData>> routes = parseIngressRule(ingressRule, dubboUpstreamList,
+                        Objects.requireNonNull(ingress.getMetadata()).getNamespace(), ingress.getMetadata().getAnnotations());
+                routeList.addAll(routes);
+            }
+            res.setRouteConfigList(routeList);
+
+            // Parse tls
+            if (Objects.nonNull(tlsList) && CollectionUtils.isNotEmpty(tlsList)) {
+                List<SslCrtAndKeyStream> sslList = new ArrayList<>();
+                for (V1IngressTLS tls : tlsList) {
+                    if (Objects.nonNull(tls.getSecretName()) && Objects.nonNull(tls.getHosts()) && CollectionUtils.isNotEmpty(tls.getHosts())) {
+                        try {
+                            V1Secret secret = coreV1Api.readNamespacedSecret(tls.getSecretName(), namespace, ""ture"");
+                            if (secret.getData() != null) {
+                                InputStream keyCertChainInputStream = new ByteArrayInputStream(secret.getData().get(""tls.crt""));
+                                InputStream keyInputStream = new ByteArrayInputStream(secret.getData().get(""tls.key""));
+                                tls.getHosts().forEach(host ->
+                                        sslList.add(new SslCrtAndKeyStream(host, keyCertChainInputStream, keyInputStream))
+                                );
+                            }
+                        } catch (ApiException e) {
+                            LOG.error(""parse tls failed "", e);
+                        }
+                    }
+                }
+                res.setTlsConfigList(sslList);
+            }
+        }
+        return res;
+    }
+
+    private List<DubboUpstream> parseDubboService(final V1IngressBackend dubboBackend, final String namespace) {
+        List<DubboUpstream> dubboUpstreamList = new ArrayList<>();
+        if (Objects.nonNull(dubboBackend) && Objects.nonNull(dubboBackend.getService())) {
+            String serviceName = dubboBackend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (Objects.isNull(subsets) || CollectionUtils.isEmpty(subsets)) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (Objects.isNull(addresses) || CollectionUtils.isEmpty(addresses)) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(dubboBackend.getService());
+                        if (Objects.nonNull(defaultPort)) {
+                            DubboUpstream upstream = DubboUpstream.builder().protocol(""http://"").upstreamHost("""").upstreamUrl(upstreamIp + "":"" + defaultPort)
+                                    .status(true).warmup(50).timestamp(0).weight(100).build();
+                            dubboUpstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return dubboUpstreamList;
+    }
+
+    private List<Pair<SelectorData, RuleData>> parseIngressRule(final V1IngressRule ingressRule,
+                                                                final List<DubboUpstream> dubboUpstream,
+                                                                final String namespace,
+                                                                final Map<String, String> annotations) {
+        List<Pair<SelectorData, RuleData>> res = new ArrayList<>();
+
+        ConditionData hostCondition = null;
+        if (Objects.nonNull(ingressRule.getHost())) {
+            hostCondition = new ConditionData();
+            hostCondition.setParamType(ParamTypeEnum.DOMAIN.getName());
+            hostCondition.setOperator(OperatorEnum.EQ.getAlias());
+            hostCondition.setParamValue(ingressRule.getHost());
+        }
+        if (Objects.nonNull(ingressRule.getHttp())) {
+            List<V1HTTPIngressPath> paths = ingressRule.getHttp().getPaths();
+            if (paths != null) {
+                for (V1HTTPIngressPath path : paths) {
+                    if (path.getPath() == null) {
+                        continue;
+                    }
+
+                    OperatorEnum operator;
+                    if (""ImplementationSpecific"".equals(path.getPathType())) {
+                        operator = OperatorEnum.MATCH;
+                    } else if (""Prefix"".equals(path.getPathType())) {
+                        operator = OperatorEnum.STARTS_WITH;
+                    } else if (""Exact"".equals(path.getPathType())) {
+                        operator = OperatorEnum.EQ;
+                    } else {
+                        LOG.info(""Invalid path type, set it with match operator"");
+                        operator = OperatorEnum.MATCH;
+                    }
+
+                    ConditionData pathCondition = new ConditionData();
+                    pathCondition.setOperator(operator.getAlias());
+                    pathCondition.setParamType(ParamTypeEnum.URI.getName());
+                    pathCondition.setParamValue(path.getPath());
+                    List<ConditionData> conditionList = new ArrayList<>(2);
+                    if (Objects.nonNull(hostCondition)) {
+                        conditionList.add(hostCondition);
+                    }
+                    conditionList.add(pathCondition);
+
+                    SelectorData selectorData = SelectorData.builder()
+                            .pluginId(String.valueOf(PluginEnum.DUBBO.getCode()))
+                            .pluginName(PluginEnum.DUBBO.getName())
+                            .name(path.getPath())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .type(SelectorTypeEnum.CUSTOM_FLOW.getCode())
+                            .enabled(true)
+                            .logged(false)
+                            .continued(true)
+                            .conditionList(conditionList).build();
+                    List<DubboUpstream> upstreamList = parseUpstream(path.getBackend(), namespace);
+                    if (upstreamList.isEmpty()) {
+                        upstreamList = dubboUpstream;
+                    }
+                    selectorData.setHandle(GsonUtils.getInstance().toJson(upstreamList));
+
+                    DubboRuleHandle dubboRuleHandle = new DubboRuleHandle();
+                    if (Objects.nonNull(annotations)) {
+                        dubboRuleHandle.setLoadbalance(annotations.getOrDefault(IngressConstants.PLUGIN_DUBBO_LOADBALANCE_ANNOTATION_KEY, LoadBalanceEnum.HASH.getName()));
+                    }
+                    RuleData ruleData = RuleData.builder()
+                            .name(path.getPath())
+                            .pluginName(PluginEnum.DUBBO.getName())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .conditionDataList(conditionList)
+                            .handle(GsonUtils.getInstance().toJson(dubboRuleHandle))
+                            .loged(false)
+                            .enabled(true).build();
+
+                    res.add(Pair.of(selectorData, ruleData));
+                }
+            }
+        }
+        return res;
+    }
+
+    private String parsePort(final V1IngressServiceBackend service) {
+        if (Objects.nonNull(service.getPort())) {
+            if (Objects.nonNull(service.getPort().getNumber()) && service.getPort().getNumber() > 0) {
+                return String.valueOf(service.getPort().getNumber());
+            } else if (Objects.nonNull(service.getPort().getName()) && !"""".equals(service.getPort().getName().trim())) {
+                return service.getPort().getName().trim();
+            }
+        }
+        return null;
+    }
+
+    private List<DubboUpstream> parseUpstream(final V1IngressBackend backend, final String namespace) {
+        List<DubboUpstream> upstreamList = new ArrayList<>();
+        if (Objects.nonNull(backend) && Objects.nonNull(backend.getService()) && Objects.nonNull(backend.getService().getName())) {
+            String serviceName = backend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (Objects.isNull(subsets) || CollectionUtils.isEmpty(subsets)) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (addresses == null || addresses.isEmpty()) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(backend.getService());
+                        if (Objects.nonNull(defaultPort)) {
+                            DubboUpstream upstream = DubboUpstream.builder().protocol(""http://"").upstreamHost("""").upstreamUrl(upstreamIp + "":"" + defaultPort)
+                                    .status(true).warmup(50).timestamp(0).weight(100).build();
+                            upstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return upstreamList;
+    }
+
+    private Pair<SelectorData, RuleData> getDubboRouteConfig(final List<DubboUpstream> duobboUpstream, final Map<String, String> annotations) {
+        final ConditionData conditionData = new ConditionData();
+        conditionData.setParamName(""dubbo"");
+        conditionData.setParamType(ParamTypeEnum.URI.getName());
+        conditionData.setOperator(OperatorEnum.PATH_PATTERN.getAlias());
+        conditionData.setParamValue(""/**"");
+
+        final SelectorData selectorData = SelectorData.builder()
+                .name(""dubbo-selector"")
+                .sort(Integer.MAX_VALUE)
+                .conditionList(Collections.singletonList(conditionData))
+                .handle(GsonUtils.getInstance().toJson(duobboUpstream))
+                .enabled(true)
+                .id(""1"")","[{'comment': 'why 1?', 'commenter': 'moremind'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DubboIngressParser.java,"@@ -0,0 +1,322 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1EndpointAddress;
+import io.kubernetes.client.openapi.models.V1EndpointSubset;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressServiceBackend;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.convert.rule.impl.DubboRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.DubboUpstream;
+import org.apache.shenyu.common.enums.LoadBalanceEnum;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+public class DubboIngressParser implements K8sResourceParser<V1Ingress> {
+
+    private static final Logger LOG = LoggerFactory.getLogger(DubboIngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * DubboIngressParser Constructor.
+     *
+     * @param serviceInformer   serviceInformer
+     * @param endpointsInformer endpointsInformer
+     */
+    public DubboIngressParser(final Lister<V1Service> serviceInformer, final Lister<V1Endpoints> endpointsInformer) {
+        this.serviceLister = serviceInformer;
+        this.endpointsLister = endpointsInformer;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress   ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (Objects.nonNull(ingress.getSpec())) {
+            // Parse the dubbo backend
+            V1IngressBackend dubboBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+            List<DubboUpstream> dubboUpstreamList = parseDubboService(dubboBackend, namespace);
+            // if rules is not null, dubboBackend is default in this ingress
+            List<Pair<SelectorData, RuleData>> routeList = new ArrayList<>(rules.size());
+            for (V1IngressRule ingressRule : rules) {
+                List<Pair<SelectorData, RuleData>> routes = parseIngressRule(ingressRule, dubboUpstreamList,
+                        Objects.requireNonNull(ingress.getMetadata()).getNamespace(), ingress.getMetadata().getAnnotations());
+                routeList.addAll(routes);
+            }
+            res.setRouteConfigList(routeList);
+
+            // Parse tls
+            if (Objects.nonNull(tlsList) && CollectionUtils.isNotEmpty(tlsList)) {
+                List<SslCrtAndKeyStream> sslList = new ArrayList<>();
+                for (V1IngressTLS tls : tlsList) {
+                    if (Objects.nonNull(tls.getSecretName()) && Objects.nonNull(tls.getHosts()) && CollectionUtils.isNotEmpty(tls.getHosts())) {
+                        try {
+                            V1Secret secret = coreV1Api.readNamespacedSecret(tls.getSecretName(), namespace, ""ture"");
+                            if (secret.getData() != null) {
+                                InputStream keyCertChainInputStream = new ByteArrayInputStream(secret.getData().get(""tls.crt""));
+                                InputStream keyInputStream = new ByteArrayInputStream(secret.getData().get(""tls.key""));
+                                tls.getHosts().forEach(host ->
+                                        sslList.add(new SslCrtAndKeyStream(host, keyCertChainInputStream, keyInputStream))
+                                );
+                            }
+                        } catch (ApiException e) {
+                            LOG.error(""parse tls failed "", e);
+                        }
+                    }
+                }
+                res.setTlsConfigList(sslList);
+            }
+        }
+        return res;
+    }
+
+    private List<DubboUpstream> parseDubboService(final V1IngressBackend dubboBackend, final String namespace) {
+        List<DubboUpstream> dubboUpstreamList = new ArrayList<>();
+        if (Objects.nonNull(dubboBackend) && Objects.nonNull(dubboBackend.getService())) {
+            String serviceName = dubboBackend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (Objects.isNull(subsets) || CollectionUtils.isEmpty(subsets)) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (Objects.isNull(addresses) || CollectionUtils.isEmpty(addresses)) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(dubboBackend.getService());
+                        if (Objects.nonNull(defaultPort)) {
+                            DubboUpstream upstream = DubboUpstream.builder().protocol(""http://"").upstreamHost("""").upstreamUrl(upstreamIp + "":"" + defaultPort)
+                                    .status(true).warmup(50).timestamp(0).weight(100).build();
+                            dubboUpstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return dubboUpstreamList;
+    }
+
+    private List<Pair<SelectorData, RuleData>> parseIngressRule(final V1IngressRule ingressRule,
+                                                                final List<DubboUpstream> dubboUpstream,
+                                                                final String namespace,
+                                                                final Map<String, String> annotations) {
+        List<Pair<SelectorData, RuleData>> res = new ArrayList<>();
+
+        ConditionData hostCondition = null;
+        if (Objects.nonNull(ingressRule.getHost())) {
+            hostCondition = new ConditionData();
+            hostCondition.setParamType(ParamTypeEnum.DOMAIN.getName());
+            hostCondition.setOperator(OperatorEnum.EQ.getAlias());
+            hostCondition.setParamValue(ingressRule.getHost());
+        }
+        if (Objects.nonNull(ingressRule.getHttp())) {
+            List<V1HTTPIngressPath> paths = ingressRule.getHttp().getPaths();
+            if (paths != null) {
+                for (V1HTTPIngressPath path : paths) {
+                    if (path.getPath() == null) {
+                        continue;
+                    }
+
+                    OperatorEnum operator;
+                    if (""ImplementationSpecific"".equals(path.getPathType())) {
+                        operator = OperatorEnum.MATCH;
+                    } else if (""Prefix"".equals(path.getPathType())) {
+                        operator = OperatorEnum.STARTS_WITH;
+                    } else if (""Exact"".equals(path.getPathType())) {
+                        operator = OperatorEnum.EQ;
+                    } else {
+                        LOG.info(""Invalid path type, set it with match operator"");
+                        operator = OperatorEnum.MATCH;
+                    }
+
+                    ConditionData pathCondition = new ConditionData();
+                    pathCondition.setOperator(operator.getAlias());
+                    pathCondition.setParamType(ParamTypeEnum.URI.getName());
+                    pathCondition.setParamValue(path.getPath());
+                    List<ConditionData> conditionList = new ArrayList<>(2);
+                    if (Objects.nonNull(hostCondition)) {
+                        conditionList.add(hostCondition);
+                    }
+                    conditionList.add(pathCondition);
+
+                    SelectorData selectorData = SelectorData.builder()
+                            .pluginId(String.valueOf(PluginEnum.DUBBO.getCode()))
+                            .pluginName(PluginEnum.DUBBO.getName())
+                            .name(path.getPath())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .type(SelectorTypeEnum.CUSTOM_FLOW.getCode())
+                            .enabled(true)
+                            .logged(false)
+                            .continued(true)
+                            .conditionList(conditionList).build();
+                    List<DubboUpstream> upstreamList = parseUpstream(path.getBackend(), namespace);
+                    if (upstreamList.isEmpty()) {
+                        upstreamList = dubboUpstream;
+                    }
+                    selectorData.setHandle(GsonUtils.getInstance().toJson(upstreamList));
+
+                    DubboRuleHandle dubboRuleHandle = new DubboRuleHandle();
+                    if (Objects.nonNull(annotations)) {
+                        dubboRuleHandle.setLoadbalance(annotations.getOrDefault(IngressConstants.PLUGIN_DUBBO_LOADBALANCE_ANNOTATION_KEY, LoadBalanceEnum.HASH.getName()));
+                    }
+                    RuleData ruleData = RuleData.builder()
+                            .name(path.getPath())
+                            .pluginName(PluginEnum.DUBBO.getName())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .conditionDataList(conditionList)
+                            .handle(GsonUtils.getInstance().toJson(dubboRuleHandle))
+                            .loged(false)
+                            .enabled(true).build();
+
+                    res.add(Pair.of(selectorData, ruleData));
+                }
+            }
+        }
+        return res;
+    }
+
+    private String parsePort(final V1IngressServiceBackend service) {
+        if (Objects.nonNull(service.getPort())) {
+            if (Objects.nonNull(service.getPort().getNumber()) && service.getPort().getNumber() > 0) {
+                return String.valueOf(service.getPort().getNumber());
+            } else if (Objects.nonNull(service.getPort().getName()) && !"""".equals(service.getPort().getName().trim())) {
+                return service.getPort().getName().trim();
+            }
+        }
+        return null;
+    }
+
+    private List<DubboUpstream> parseUpstream(final V1IngressBackend backend, final String namespace) {
+        List<DubboUpstream> upstreamList = new ArrayList<>();
+        if (Objects.nonNull(backend) && Objects.nonNull(backend.getService()) && Objects.nonNull(backend.getService().getName())) {
+            String serviceName = backend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (Objects.isNull(subsets) || CollectionUtils.isEmpty(subsets)) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (addresses == null || addresses.isEmpty()) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(backend.getService());
+                        if (Objects.nonNull(defaultPort)) {
+                            DubboUpstream upstream = DubboUpstream.builder().protocol(""http://"").upstreamHost("""").upstreamUrl(upstreamIp + "":"" + defaultPort)
+                                    .status(true).warmup(50).timestamp(0).weight(100).build();
+                            upstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return upstreamList;
+    }
+
+    private Pair<SelectorData, RuleData> getDubboRouteConfig(final List<DubboUpstream> duobboUpstream, final Map<String, String> annotations) {
+        final ConditionData conditionData = new ConditionData();
+        conditionData.setParamName(""dubbo"");
+        conditionData.setParamType(ParamTypeEnum.URI.getName());
+        conditionData.setOperator(OperatorEnum.PATH_PATTERN.getAlias());
+        conditionData.setParamValue(""/**"");
+
+        final SelectorData selectorData = SelectorData.builder()
+                .name(""dubbo-selector"")
+                .sort(Integer.MAX_VALUE)
+                .conditionList(Collections.singletonList(conditionData))
+                .handle(GsonUtils.getInstance().toJson(duobboUpstream))
+                .enabled(true)
+                .id(""1"")
+                .pluginName(PluginEnum.DUBBO.getName())
+                .pluginId(String.valueOf(PluginEnum.DUBBO.getCode()))
+                .logged(false)
+                .continued(true)
+                .matchMode(MatchModeEnum.AND.getCode())
+                .type(SelectorTypeEnum.FULL_FLOW.getCode()).build();
+
+        DubboRuleHandle dubboRuleHandle = new DubboRuleHandle();
+        if (Objects.nonNull(annotations)) {
+            dubboRuleHandle.setLoadbalance(annotations.getOrDefault(IngressConstants.PLUGIN_DUBBO_LOADBALANCE_ANNOTATION_KEY, LoadBalanceEnum.HASH.getName()));
+        }
+        final RuleData ruleData = RuleData.builder()
+                .selectorId(""1"")","[{'comment': 'same', 'commenter': 'moremind'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DubboIngressParser.java,"@@ -0,0 +1,337 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1EndpointAddress;
+import io.kubernetes.client.openapi.models.V1EndpointSubset;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressServiceBackend;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.convert.rule.impl.DubboRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.DubboUpstream;
+import org.apache.shenyu.common.enums.LoadBalanceEnum;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+/**
+ * Parser of Ingress Dubbo Annotations.
+ */
+public class DubboIngressParser implements K8sResourceParser<V1Ingress> {
+
+    private static final Logger LOG = LoggerFactory.getLogger(DubboIngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * DubboIngressParser Constructor.
+     *
+     * @param serviceInformer   serviceInformer
+     * @param endpointsInformer endpointsInformer
+     */
+    public DubboIngressParser(final Lister<V1Service> serviceInformer, final Lister<V1Endpoints> endpointsInformer) {
+        this.serviceLister = serviceInformer;
+        this.endpointsLister = endpointsInformer;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress   ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (Objects.nonNull(ingress.getSpec())) {
+            // Parse the dubbo backend
+            V1IngressBackend dubboBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+            List<DubboUpstream> dubboUpstreamList = parseDubboService(dubboBackend, namespace);
+
+            if (Objects.isNull(rules) || CollectionUtils.isEmpty(rules)) {
+                // if rules is null, dubboBackend become global default
+                if (Objects.nonNull(dubboBackend) && Objects.nonNull(dubboBackend.getService())) {
+                    Pair<SelectorData, RuleData> defaultRouteConfig = getDubboRouteConfig(dubboUpstreamList, ingress.getMetadata().getAnnotations());","[{'comment': '```suggestion\r\n                    Pair<SelectorData, RuleData> defaultRouteConfig = getDefaultDubboRouteConfig(dubboUpstreamList, ingress.getMetadata().getAnnotations());\r\n```', 'commenter': 'JooKS-me'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DivideIngressParser.java,"@@ -0,0 +1,357 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1EndpointAddress;
+import io.kubernetes.client.openapi.models.V1EndpointSubset;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressServiceBackend;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
+import org.apache.shenyu.common.enums.LoadBalanceEnum;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.UUIDUtils;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+/**
+ * Parser of Ingress Divide Annotations.
+ */
+public class DivideIngressParser implements K8sResourceParser<V1Ingress> {
+
+    private static final Logger LOG = LoggerFactory.getLogger(IngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * IngressParser Constructor.
+     *
+     * @param serviceLister serviceLister
+     * @param endpointsLister endpointsLister
+     */
+    public DivideIngressParser(final Lister<V1Service> serviceLister, final Lister<V1Endpoints> endpointsLister) {
+        this.serviceLister = serviceLister;
+        this.endpointsLister = endpointsLister;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (Objects.nonNull(ingress.getSpec())) {
+            // Parse the default backend
+            V1IngressBackend defaultBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+            List<DivideUpstream> defaultUpstreamList = parseDefaultService(defaultBackend, namespace);
+
+            if (Objects.isNull(rules) || CollectionUtils.isEmpty(rules)) {
+                // if rules is null, defaultBackend become global default
+                if (Objects.nonNull(defaultBackend) && Objects.nonNull(defaultBackend.getService())) {
+                    Pair<SelectorData, RuleData> defaultRouteConfig = getDefaultRouteConfig(defaultUpstreamList, ingress.getMetadata().getAnnotations());
+                    res.setGlobalDefaultBackend(Pair.of(Pair.of(namespace + ""/"" + ingress.getMetadata().getName(), defaultBackend.getService().getName()),
+                            defaultRouteConfig));
+                }
+            } else {
+                // if rules is not null, defaultBackend is default in this ingress
+                List<Pair<SelectorData, RuleData>> routeList = new ArrayList<>(rules.size());
+                for (V1IngressRule ingressRule : rules) {
+                    List<Pair<SelectorData, RuleData>> routes = parseIngressRule(ingressRule, defaultUpstreamList,
+                            Objects.requireNonNull(ingress.getMetadata()).getNamespace(), ingress.getMetadata().getAnnotations());
+                    routeList.addAll(routes);
+                }
+                res.setRouteConfigList(routeList);
+            }
+
+            // Parse tls
+            if (Objects.nonNull(tlsList) && CollectionUtils.isNotEmpty(tlsList)) {
+                List<SslCrtAndKeyStream> sslList = new ArrayList<>();
+                for (V1IngressTLS tls : tlsList) {
+                    if (tls.getSecretName() != null && tls.getHosts() != null && CollectionUtils.isNotEmpty(tls.getHosts())) {
+                        try {
+                            V1Secret secret = coreV1Api.readNamespacedSecret(tls.getSecretName(), namespace, ""ture"");
+                            if (Objects.nonNull(secret.getData())) {
+                                InputStream keyCertChainInputStream = new ByteArrayInputStream(secret.getData().get(""tls.crt""));
+                                InputStream keyInputStream = new ByteArrayInputStream(secret.getData().get(""tls.key""));
+                                tls.getHosts().forEach(host ->
+                                        sslList.add(new SslCrtAndKeyStream(host, keyCertChainInputStream, keyInputStream))
+                                );
+                            }
+                        } catch (ApiException e) {
+                            LOG.error(""parse tls failed "", e);
+                        }
+                    }
+                }
+                res.setTlsConfigList(sslList);
+            }
+        }
+        return res;
+    }
+
+    private List<DivideUpstream> parseDefaultService(final V1IngressBackend defaultBackend, final String namespace) {
+        List<DivideUpstream> defaultUpstreamList = new ArrayList<>();
+        if (Objects.nonNull(defaultBackend) && Objects.nonNull(defaultBackend.getService())) {
+            String serviceName = defaultBackend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (Objects.isNull(subsets) || CollectionUtils.isEmpty(subsets)) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (Objects.isNull(addresses) || CollectionUtils.isEmpty(addresses)) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(defaultBackend.getService());
+                        if (Objects.nonNull(defaultPort)) {
+                            DivideUpstream upstream = new DivideUpstream();
+                            upstream.setUpstreamUrl(upstreamIp + "":"" + defaultPort);
+                            upstream.setWeight(100);
+                            // TODO support config protocol in annotation
+                            upstream.setProtocol(""http://"");
+                            upstream.setWarmup(0);
+                            upstream.setStatus(true);
+                            upstream.setUpstreamHost("""");
+                            defaultUpstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return defaultUpstreamList;
+    }
+
+    private List<Pair<SelectorData, RuleData>> parseIngressRule(final V1IngressRule ingressRule,
+                                                                final List<DivideUpstream> defaultUpstream,
+                                                                final String namespace,
+                                                                final Map<String, String> annotations) {
+        List<Pair<SelectorData, RuleData>> res = new ArrayList<>();
+
+        ConditionData hostCondition = null;
+        if (Objects.nonNull(ingressRule.getHost())) {
+            hostCondition = new ConditionData();
+            hostCondition.setParamType(ParamTypeEnum.DOMAIN.getName());
+            hostCondition.setOperator(OperatorEnum.EQ.getAlias());
+            hostCondition.setParamValue(ingressRule.getHost());
+        }
+        if (Objects.nonNull(ingressRule.getHttp())) {
+            List<V1HTTPIngressPath> paths = ingressRule.getHttp().getPaths();
+            if (paths != null) {
+                for (V1HTTPIngressPath path : paths) {
+                    if (path.getPath() == null) {
+                        continue;
+                    }
+
+                    OperatorEnum operator;
+                    if (""ImplementationSpecific"".equals(path.getPathType())) {
+                        operator = OperatorEnum.MATCH;
+                    } else if (""Prefix"".equals(path.getPathType())) {
+                        operator = OperatorEnum.STARTS_WITH;
+                    } else if (""Exact"".equals(path.getPathType())) {
+                        operator = OperatorEnum.EQ;
+                    } else {
+                        LOG.info(""Invalid path type, set it with match operator"");
+                        operator = OperatorEnum.MATCH;
+                    }
+
+                    ConditionData pathCondition = new ConditionData();
+                    pathCondition.setOperator(operator.getAlias());
+                    pathCondition.setParamType(ParamTypeEnum.URI.getName());
+                    pathCondition.setParamValue(path.getPath());
+                    List<ConditionData> conditionList = new ArrayList<>(2);
+                    if (Objects.nonNull(hostCondition)) {
+                        conditionList.add(hostCondition);
+                    }
+                    conditionList.add(pathCondition);
+
+                    SelectorData selectorData = SelectorData.builder()
+                            .pluginId(String.valueOf(PluginEnum.DIVIDE.getCode()))
+                            .pluginName(PluginEnum.DIVIDE.getName())
+                            .name(path.getPath())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .type(SelectorTypeEnum.CUSTOM_FLOW.getCode())
+                            .enabled(true)
+                            .logged(false)
+                            .continued(true)
+                            .conditionList(conditionList).build();
+                    List<DivideUpstream> upstreamList = parseUpstream(path.getBackend(), namespace);
+                    if (upstreamList.isEmpty()) {
+                        upstreamList = defaultUpstream;
+                    }
+                    selectorData.setHandle(GsonUtils.getInstance().toJson(upstreamList));
+
+                    DivideRuleHandle divideRuleHandle = new DivideRuleHandle();
+                    if (Objects.nonNull(annotations)) {
+                        divideRuleHandle.setLoadBalance(annotations.getOrDefault(IngressConstants.LOADBALANCER_ANNOTATION_KEY, LoadBalanceEnum.RANDOM.getName()));
+                        divideRuleHandle.setRetry(Integer.parseInt(annotations.getOrDefault(IngressConstants.RETRY_ANNOTATION_KEY, ""3"")));
+                        divideRuleHandle.setTimeout(Long.parseLong(annotations.getOrDefault(IngressConstants.TIMEOUT_ANNOTATION_KEY, ""3000"")));
+                        divideRuleHandle.setHeaderMaxSize(Long.parseLong(annotations.getOrDefault(IngressConstants.HEADER_MAX_SIZE_ANNOTATION_KEY, ""10240"")));
+                        divideRuleHandle.setRequestMaxSize(Long.parseLong(annotations.getOrDefault(IngressConstants.REQUEST_MAX_SIZE_ANNOTATION_KEY, ""102400"")));
+                    }
+                    RuleData ruleData = RuleData.builder()
+                            .name(path.getPath())
+                            .pluginName(PluginEnum.DIVIDE.getName())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .conditionDataList(conditionList)
+                            .handle(GsonUtils.getInstance().toJson(divideRuleHandle))
+                            .loged(false)
+                            .enabled(true).build();
+
+                    res.add(Pair.of(selectorData, ruleData));
+                }
+            }
+        }
+        return res;
+    }
+
+    private String parsePort(final V1IngressServiceBackend service) {
+        if (Objects.nonNull(service.getPort())) {
+            if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
+                return String.valueOf(service.getPort().getNumber());
+            } else if (service.getPort().getName() != null && !"""".equals(service.getPort().getName().trim())) {
+                return service.getPort().getName().trim();
+            }
+        }
+        return null;
+    }
+
+    private List<DivideUpstream> parseUpstream(final V1IngressBackend backend, final String namespace) {
+        List<DivideUpstream> upstreamList = new ArrayList<>();
+        if (Objects.nonNull(backend) && Objects.nonNull(backend.getService()) && Objects.nonNull(backend.getService().getName())) {
+            String serviceName = backend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (Objects.isNull(subsets) || CollectionUtils.isEmpty(subsets)) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (Objects.isNull(addresses) || addresses.isEmpty()) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(backend.getService());
+                        if (Objects.nonNull(defaultPort)) {
+                            DivideUpstream upstream = new DivideUpstream();
+                            upstream.setUpstreamUrl(upstreamIp + "":"" + defaultPort);
+                            upstream.setWeight(100);
+                            // TODO support config protocol in annotation
+                            upstream.setProtocol(""http://"");
+                            upstream.setWarmup(0);
+                            upstream.setStatus(true);
+                            upstream.setUpstreamHost("""");
+                            upstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return upstreamList;
+    }
+
+    private Pair<SelectorData, RuleData> getDefaultRouteConfig(final List<DivideUpstream> divideUpstream, final Map<String, String> annotations) {
+        String id = UUIDUtils.getInstance().generateShortUuid();","[{'comment': 'For the globally unique default route, I think we can set a fixed value when setting the ID, at least the ID values of multiple Controllers must be consistent. We still lack a cluster state consistency scheme (such as the election of the master), but using random uuid is obviously not good. So I suggest temporarily setting the id here to a fixed value such as ""1"", ""2"", ""3"", which can be set as a constant and placed in `IngressConstans`.', 'commenter': 'JooKS-me'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DubboIngressParser.java,"@@ -0,0 +1,364 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1EndpointAddress;
+import io.kubernetes.client.openapi.models.V1EndpointSubset;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressServiceBackend;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.commons.lang3.tuple.Triple;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.dto.convert.rule.impl.DubboRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.DubboUpstream;
+import org.apache.shenyu.common.enums.LoadBalanceEnum;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.RpcTypeEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+/**
+ * Parser of Ingress Dubbo Annotations.
+ */
+public class DubboIngressParser implements K8sResourceParser<V1Ingress> {
+
+    private static final Logger LOG = LoggerFactory.getLogger(DubboIngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * DubboIngressParser Constructor.
+     *
+     * @param serviceInformer   serviceInformer
+     * @param endpointsInformer endpointsInformer
+     */
+    public DubboIngressParser(final Lister<V1Service> serviceInformer, final Lister<V1Endpoints> endpointsInformer) {
+        this.serviceLister = serviceInformer;
+        this.endpointsLister = endpointsInformer;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress   ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (Objects.nonNull(ingress.getSpec())) {
+            // Parse the dubbo backend
+            V1IngressBackend dubboBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+            List<DubboUpstream> dubboUpstreamList = parseDubboService(dubboBackend, namespace);
+
+            if (Objects.isNull(rules) || CollectionUtils.isEmpty(rules)) {
+                // if rules is null, dubboBackend become global default
+                if (Objects.nonNull(dubboBackend) && Objects.nonNull(dubboBackend.getService())) {
+                    Triple<SelectorData, RuleData, MetaData> defaultRouteConfig = getDubboRouteConfig(dubboUpstreamList, ingress.getMetadata().getAnnotations());
+                    res.setGlobalDefaultBackend(Pair.of(Pair.of(namespace + ""/"" + ingress.getMetadata().getName(), dubboBackend.getService().getName()),
+                            defaultRouteConfig));
+                }
+            } else {
+                // if rules is not null, dubboBackend is default in this ingress
+                List<Triple<SelectorData, RuleData, MetaData>> routeList = new ArrayList<>(rules.size());
+                for (V1IngressRule ingressRule : rules) {
+                    List<Triple<SelectorData, RuleData, MetaData>> routes = parseIngressRule(ingressRule, dubboUpstreamList,
+                            Objects.requireNonNull(ingress.getMetadata()).getNamespace(), ingress.getMetadata().getAnnotations());
+                    routeList.addAll(routes);
+                }
+                res.setRouteConfigList(routeList);
+            }
+
+            // Parse tls
+            if (Objects.nonNull(tlsList) && CollectionUtils.isNotEmpty(tlsList)) {
+                List<SslCrtAndKeyStream> sslList = new ArrayList<>();
+                for (V1IngressTLS tls : tlsList) {
+                    if (Objects.nonNull(tls.getSecretName()) && Objects.nonNull(tls.getHosts()) && CollectionUtils.isNotEmpty(tls.getHosts())) {
+                        try {
+                            V1Secret secret = coreV1Api.readNamespacedSecret(tls.getSecretName(), namespace, ""ture"");
+                            if (secret.getData() != null) {
+                                InputStream keyCertChainInputStream = new ByteArrayInputStream(secret.getData().get(""tls.crt""));
+                                InputStream keyInputStream = new ByteArrayInputStream(secret.getData().get(""tls.key""));
+                                tls.getHosts().forEach(host ->
+                                        sslList.add(new SslCrtAndKeyStream(host, keyCertChainInputStream, keyInputStream))
+                                );
+                            }
+                        } catch (ApiException e) {
+                            LOG.error(""parse tls failed "", e);
+                        }
+                    }
+                }
+                res.setTlsConfigList(sslList);
+            }
+        }
+        return res;
+    }
+
+    private List<DubboUpstream> parseDubboService(final V1IngressBackend defaultBackend, final String namespace) {
+        List<DubboUpstream> dubboUpstreamList = new ArrayList<>();
+        if (Objects.nonNull(defaultBackend) && Objects.nonNull(defaultBackend.getService())) {
+            String serviceName = defaultBackend.getService().getName();
+            // shenyu routes directly to the container
+            V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
+            List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            if (Objects.isNull(subsets) || CollectionUtils.isEmpty(subsets)) {
+                LOG.info(""Endpoints {} do not have subsets"", serviceName);
+            } else {
+                for (V1EndpointSubset subset : subsets) {
+                    List<V1EndpointAddress> addresses = subset.getAddresses();
+                    if (Objects.isNull(addresses) || CollectionUtils.isEmpty(addresses)) {
+                        continue;
+                    }
+                    for (V1EndpointAddress address : addresses) {
+                        String upstreamIp = address.getIp();
+                        String defaultPort = parsePort(defaultBackend.getService());
+                        if (Objects.nonNull(defaultPort)) {
+                            DubboUpstream upstream = DubboUpstream.builder()
+                                    .upstreamUrl(upstreamIp + "":"" + defaultPort)
+                                    .weight(100)
+                                    .protocol(""http://"")
+                                    .warmup(0)
+                                    .status(true)
+                                    .upstreamHost("""")
+                                    .build();
+                            dubboUpstreamList.add(upstream);
+                        }
+                    }
+                }
+            }
+        }
+        return dubboUpstreamList;
+    }
+
+    private String parsePort(final V1IngressServiceBackend service) {
+        if (Objects.nonNull(service.getPort())) {
+            if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
+                return String.valueOf(service.getPort().getNumber());
+            } else if (service.getPort().getName() != null && !"""".equals(service.getPort().getName().trim())) {
+                return service.getPort().getName().trim();
+            }
+        }
+        return null;
+    }
+
+    private List<Triple<SelectorData, RuleData, MetaData>> parseIngressRule(final V1IngressRule ingressRule,
+                                                                            final List<DubboUpstream> dubboUpstreamList,
+                                                                            final String namespace,
+                                                                            final Map<String, String> annotations) {
+        List<Triple<SelectorData, RuleData, MetaData>> res = new ArrayList<>();
+
+        ConditionData hostCondition = null;
+        if (Objects.nonNull(ingressRule.getHost())) {
+            hostCondition = new ConditionData();
+            hostCondition.setParamType(ParamTypeEnum.DOMAIN.getName());
+            hostCondition.setOperator(OperatorEnum.EQ.getAlias());
+            hostCondition.setParamValue(ingressRule.getHost());
+        }
+        if (Objects.nonNull(ingressRule.getHttp())) {
+            List<V1HTTPIngressPath> paths = ingressRule.getHttp().getPaths();
+            if (paths != null) {
+                for (V1HTTPIngressPath path : paths) {
+                    if (path.getPath() == null) {
+                        continue;
+                    }
+
+                    OperatorEnum operator;
+                    if (""ImplementationSpecific"".equals(path.getPathType())) {
+                        operator = OperatorEnum.MATCH;
+                    } else if (""Prefix"".equals(path.getPathType())) {
+                        operator = OperatorEnum.STARTS_WITH;
+                    } else if (""Exact"".equals(path.getPathType())) {
+                        operator = OperatorEnum.EQ;
+                    } else {
+                        LOG.info(""Invalid path type, set it with match operator"");
+                        operator = OperatorEnum.MATCH;
+                    }
+
+                    ConditionData pathCondition = new ConditionData();
+                    pathCondition.setOperator(operator.getAlias());
+                    pathCondition.setParamType(ParamTypeEnum.URI.getName());
+                    pathCondition.setParamValue(path.getPath());
+                    List<ConditionData> conditionList = new ArrayList<>(2);
+                    if (Objects.nonNull(hostCondition)) {
+                        conditionList.add(hostCondition);
+                    }
+                    conditionList.add(pathCondition);
+
+                    SelectorData selectorData = SelectorData.builder()
+                            .pluginId(String.valueOf(PluginEnum.DUBBO.getCode()))
+                            .pluginName(PluginEnum.DUBBO.getName())
+                            .name(path.getPath())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .type(SelectorTypeEnum.CUSTOM_FLOW.getCode())
+                            .enabled(true)
+                            .logged(false)
+                            .continued(true)
+                            .conditionList(conditionList).build();
+                    List<DubboUpstream> upstreamList = parseUpstream(path.getBackend(), namespace);
+                    if (upstreamList.isEmpty()) {
+                        upstreamList = dubboUpstreamList;
+                    }
+                    selectorData.setHandle(GsonUtils.getInstance().toJson(upstreamList));
+
+                    DubboRuleHandle dubboRuleHandle = new DubboRuleHandle();
+                    if (Objects.nonNull(annotations)) {
+                        dubboRuleHandle.setLoadbalance(annotations.getOrDefault(IngressConstants.LOADBALANCER_ANNOTATION_KEY, LoadBalanceEnum.RANDOM.getName()));
+                    }
+                    RuleData ruleData = RuleData.builder()
+                            .name(path.getPath())
+                            .pluginName(PluginEnum.DUBBO.getName())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .conditionDataList(conditionList)
+                            .handle(GsonUtils.getInstance().toJson(dubboRuleHandle))
+                            .loged(false)
+                            .enabled(true).build();
+
+                    MetaData metaData = parseMetaData(annotations);
+
+                    res.add(Triple.of(selectorData, ruleData, metaData));
+                }
+            }
+        }
+        return res;
+    }
+
+    private List<DubboUpstream> parseUpstream(final V1IngressBackend backend, final String namespace) {
+        List<DubboUpstream> upstreamList = new ArrayList<>();
+        if (Objects.nonNull(backend) && Objects.nonNull(backend.getService()) && Objects.nonNull(backend.getService().getName())) {
+            String serviceName = backend.getService().getName();
+            // shenyu routes directly to the container
+            V1Service v1Service = serviceLister.namespace(namespace).get(serviceName);
+            List<String> clusterIPs = v1Service.getSpec().getClusterIPs();
+            if (Objects.isNull(clusterIPs) || CollectionUtils.isEmpty(clusterIPs)) {
+                LOG.info(""Endpoints {} do not have clusterIPs"", serviceName);
+            } else {
+                for (String clusterIP : clusterIPs) {
+                    String defaultPort = parsePort(backend.getService());
+                    if (Objects.nonNull(defaultPort)) {
+                        DubboUpstream upstream = DubboUpstream.builder()
+                                .upstreamUrl(clusterIP + "":"" + defaultPort)
+                                .weight(100)
+                                .protocol(""http://"")
+                                .warmup(0)
+                                .status(true)
+                                .upstreamHost("""")
+                                .build();
+                        upstreamList.add(upstream);
+                    }
+                }
+            }
+        }
+        return upstreamList;
+    }
+
+    private MetaData parseMetaData(final Map<String, String> annotations) {
+        return MetaData.builder()
+                .appName(annotations.getOrDefault(IngressConstants.PLUGIN_DUBBO_APP_NAME, ""dubbo""))
+                .path(annotations.getOrDefault(IngressConstants.PLUGIN_DUBBO_PATH, ""/dubbo/findById""))
+                .rpcType(annotations.getOrDefault(IngressConstants.PLUGIN_DUBBO_RPC_TYPE, RpcTypeEnum.DUBBO.getName()))
+                .serviceName(annotations.getOrDefault(IngressConstants.PLUGIN_DUBBO_SERVICE_NAME, ""org.apache.shenyu.examples.apache.dubbo.service.impl.DubboTestServiceImpl""))
+                .methodName(annotations.getOrDefault(IngressConstants.PLUGIN_DUBBO_METHOD_NAME, ""findById""))
+                .enabled(true)
+                .build();
+    }
+
+    private Triple<SelectorData, RuleData, MetaData> getDubboRouteConfig(final List<DubboUpstream> dubboUpstreamList, final Map<String, String> annotations) {","[{'comment': ""Add a new class as a result, don't use Triple, it is not easy to understand."", 'commenter': 'JooKS-me'}, {'comment': 'And, change method name to `getDefaultDubboRouteConfig`', 'commenter': 'JooKS-me'}]"
4831,shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service/k8s/ingress.yml,"@@ -0,0 +1,42 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+apiVersion: networking.k8s.io/v1
+kind: Ingress
+metadata:
+  annotations:
+    kubernetes.io/ingress.class: shenyu
+    shenyu.apache.org/plugin-dubbo-enabled: 'true'
+    shenyu.apache.org/plugin-dubbo-app-name: dubbo
+    shenyu.apache.org/plugin-context-path: /dubbo","[{'comment': 'We also need to think about how to define multiple methods in an `ingress`. It is not good to define them directly on the annotation of the ingress. It may be possible for the user to configure the annotations or labels of `service`.', 'commenter': 'JooKS-me'}]"
4831,shenyu-spring-boot-starter/shenyu-spring-boot-starter-k8s/src/main/java/org/apache/shenyu/springboot/starter/k8s/IngressControllerConfiguration.java,"@@ -158,11 +159,12 @@ public EndpointsReconciler endpointsReconciler(final SharedIndexInformer<V1Ingre
      * ShenyuCacheRepository.
      *
      * @param subscriber PluginDataSubscriber
+     * @param metaDataSubscriber CommonMetaDataSubscriber
      * @return ShenyuCacheRepository
      */
     @Bean
-    public ShenyuCacheRepository shenyuCacheRepository(final PluginDataSubscriber subscriber) {
-        return new ShenyuCacheRepository(subscriber);
+    public ShenyuCacheRepository shenyuCacheRepository(final PluginDataSubscriber subscriber, final CommonMetaDataSubscriber metaDataSubscriber) {
+        return new ShenyuCacheRepository(subscriber, metaDataSubscriber);","[{'comment': '```suggestion\r\n        return new ShenyuCacheRepository(pluginDataSubscriber, metaDataSubscriber);\r\n```', 'commenter': 'JooKS-me'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/repository/ShenyuCacheRepository.java,"@@ -37,13 +40,16 @@ public class ShenyuCacheRepository {
 
     private final PluginDataSubscriber subscriber;","[{'comment': '```suggestion\r\n    private final PluginDataSubscriber pluginDataSubscriber;\r\n```', 'commenter': 'JooKS-me'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/common/IngressConstants.java,"@@ -37,4 +39,23 @@ public class IngressConstants {
 
     // The maximum length of the request header, in bytes
     public static final String REQUEST_MAX_SIZE_ANNOTATION_KEY = ""shenyu.apache.org/request-max-size"";
+
+    //Determine if the dubbo plugin is enabled, in bool
+    public static final String PLUGIN_DUBBO_ENABLED = ""shenyu.apache.org/plugin-dubbo-enabled"";
+
+    public static final String PLUGIN_DUBBO_APP_NAME = ""shenyu.apache.org/plugin-dubbo-app-name"";","[{'comment': 'Add node for this.', 'commenter': 'JooKS-me'}]"
4831,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/common/IngressConfiguration.java,"@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.common;
+
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+
+public class IngressConfiguration {
+    private final SelectorData selectorData;","[{'comment': 'Add a blank line before this line', 'commenter': 'JooKS-me'}]"
4897,shenyu-registry/shenyu-registry-polaris/src/main/java/org/apache/shenyu/registry/polaris/PolarisInstanceRegisterRepository.java,"@@ -0,0 +1,144 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.registry.polaris;
+
+import com.tencent.polaris.api.config.Configuration;
+import com.tencent.polaris.api.core.ConsumerAPI;
+import com.tencent.polaris.api.core.ProviderAPI;
+import com.tencent.polaris.api.exception.PolarisException;
+import com.tencent.polaris.api.pojo.Instance;
+import com.tencent.polaris.api.rpc.GetHealthyInstancesRequest;
+import com.tencent.polaris.api.rpc.InstanceRegisterRequest;
+import com.tencent.polaris.api.rpc.InstancesResponse;
+import com.tencent.polaris.client.api.SDKContext;
+import com.tencent.polaris.factory.ConfigAPIFactory;
+import com.tencent.polaris.factory.api.DiscoveryAPIFactory;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.shenyu.common.constant.Constants;
+import org.apache.shenyu.common.constant.PolarisPathConstants;
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.registry.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.registry.api.config.RegisterConfig;
+import org.apache.shenyu.registry.api.entity.InstanceEntity;
+import org.apache.shenyu.spi.Join;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * The type polaris instance register repository.
+ */
+@Join
+public class PolarisInstanceRegisterRepository implements ShenyuInstanceRegisterRepository {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(PolarisInstanceRegisterRepository.class);
+
+    private ConsumerAPI consumerAPI;
+
+    private ProviderAPI providerAPI;
+
+    private String namespace;
+
+    /**
+     * Init.
+     * @param config the config
+     */
+    @Override
+    public void init(final RegisterConfig config) {
+        Configuration configuration = buildConfiguration(config);
+        SDKContext sdkContext = SDKContext.initContextByConfig(configuration);
+
+        this.consumerAPI = DiscoveryAPIFactory.createConsumerAPIByContext(sdkContext);
+        this.providerAPI = DiscoveryAPIFactory.createProviderAPIByContext(sdkContext);
+        this.namespace = config.getProps().getProperty(Constants.NAMESPACE, PolarisPathConstants.NAMESPACE);
+    }
+
+    private Configuration buildConfiguration(final RegisterConfig config) {
+        String serverLists = config.getServerLists();
+        return ConfigAPIFactory.createConfigurationByAddress(serverLists);
+    }
+
+    /**
+     * Persist instance.
+     * @param instance instance
+     */
+    @Override
+    public void persistInstance(final InstanceEntity instance) {
+        final InstanceRegisterRequest req = new InstanceRegisterRequest();
+        req.setInstanceId(buildInstanceNodeName(instance));
+        req.setWeight(1);","[{'comment': 'why 1?', 'commenter': 'moremind'}, {'comment': 'refer to \'org.apache.shenyu.registry.nacos.NacosInstanceRegisterRepository#persistInstance\';\r\n`\r\n    org.apache.shenyu.registry.nacos.NacosInstanceRegisterRepository#persistInstance\r\n\r\n    @Override\r\n    public void persistInstance(final InstanceEntity instance) {\r\n        try {\r\n            Instance inst = new Instance();\r\n            inst.setWeight(1.0d);\r\n            inst.setEphemeral(true);\r\n            inst.setIp(instance.getHost());\r\n            inst.setPort(instance.getPort());\r\n            inst.setInstanceId(buildInstanceNodeName(instance));\r\n            inst.setServiceName(instance.getAppName());\r\n            namingService.registerInstance(instance.getAppName(), groupName, inst);\r\n            LOGGER.info(""nacos client register success: {}"", inst);\r\n        } catch (NacosException e) {\r\n            throw new ShenyuException(e);\r\n        }\r\n    }\r\n`', 'commenter': 'damonxue'}]"
4929,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java,"@@ -124,7 +128,7 @@ private String update(final ApiDTO apiDTO) {
             }
             if (ApiStateEnum.PUBLISHED.getState() == apiDO.getState()) {
                 register(apiDO);
-            } else if (ApiStateEnum.OFFLINE.getState() == apiDO.getState()) {
+            } else if (ApiStateEnum.UNPUBLISHED.getState() == apiDO.getState()) {","[{'comment': 'The state judge should not change.', 'commenter': 'loongs-zhang'}, {'comment': 'For apidoc, the OFFLINE case is currently not implemented. In the next version, I plan to implement the OFFLINE function based on the application granularity of the apidoc module. The unregister() method should belong to the UNPUBLISHED case, not OFFLINE, so I modified the conditional judgment.', 'commenter': 'lianjunwei'}, {'comment': 'Hi, @dragon-zhang , it has been adjusted. Is this okay?\r\n![image](https://github.com/apache/shenyu/assets/13819823/f8c39973-90d9-44ee-a12c-de53bec688de)\r\n', 'commenter': 'lianjunwei'}, {'comment': ""hi, @dragon-zhang .The original meaning of 'offline' has been preserved. Simultaneously adding optimization: When modifying apidoc, it supports deleting registered apis, but it is not supported when creating."", 'commenter': 'lianjunwei'}]"
4929,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java,"@@ -176,12 +180,17 @@ private void unregister(final ApiDO apiDO) {
                     .collect(Collectors.toList()));
         }
         //clean selector
-        Optional.ofNullable(selectorService.findByName(apiDO.getContextPath()))
+        Optional.ofNullable(selectorService.findByNameAndPluginName(apiDO.getContextPath(), PluginEnum.DIVIDE.getName()))","[{'comment': 'Other rpc types need to be considered.', 'commenter': 'loongs-zhang'}, {'comment': ""All proxy plugin IDs should be checked here. In order to quickly fix errors, I only specified the divide plugin. I plan to provide a method to obtain the IDs of all proxy type plugins in the plugin's enumeration class.\r\nBut I found two enumeration classes about plugin plugins.  `org.apache.shenyu.e2e.model.Plugin` and `org. apache. shenyu. common. enums. PluginEnum `.\r\nBut only the former has a plugin ID. I want to merge `org. apache. shenyu. e2e. model. Plugin` and `org. apache. shenyu. common. enums. PluginEnum`, but the scope of the changes is a bit large, so I want to keep it until the next refactoring. If this PR considers other proxy plugins, I can make minor changes."", 'commenter': 'lianjunwei'}, {'comment': '> Other rpc types need to be considered.\r\n\r\nI have already implemented it, push pr immediately.', 'commenter': 'lianjunwei'}, {'comment': ""Hi, please review if it's okay. @dragon-zhang "", 'commenter': 'lianjunwei'}]"
4929,shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/SelectorMapper.java,"@@ -88,9 +88,9 @@ public interface SelectorMapper extends ExistProvider {
      * select select by name.
      *
      * @param name the name
-     * @return selector do
+     * @return selector do list
      */
-    SelectorDO selectByName(String name);
+    List<SelectorDO> selectByName(String name);","[{'comment': 'new method do this? selectListByName or findByName?', 'commenter': 'moremind'}, {'comment': ""Yes. The selectByName method has been removed. The original method may generate errors during use (using 'contextpath' as a conditional query usually results in 2 records, one from the proxy proxy plugin and the other from the contextpath plugin). This PR only quickly fixes discovered bugs."", 'commenter': 'lianjunwei'}, {'comment': 'use a new method instead of changing the method', 'commenter': 'moremind'}, {'comment': ""> use a new method instead of changing the method\r\n\r\nThat's right."", 'commenter': 'lianjunwei'}]"
4929,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SelectorService.java,"@@ -87,47 +87,58 @@ default int createOrUpdate(SelectorDTO selectorDTO) {
      * @return rows int
      */
     int create(SelectorDTO selectorDTO);
-    
+
     /**
      * update selector.
      *
      * @param selectorDTO {@linkplain SelectorDTO}
      * @return rows int
      */
     int update(SelectorDTO selectorDTO);
-    
+
     /**
      * update selective selector.
      *
      * @param selectorDO {@linkplain SelectorDO}
      * @return rows int
      */
     int updateSelective(SelectorDO selectorDO);
-    
+
     /**
      * delete selectors.
      *
      * @param ids primary key.
      * @return rows int
      */
     int delete(List<String> ids);
-    
+
     /**
      * find selector by id.
      *
      * @param id primary key.
      * @return {@linkplain SelectorVO}
      */
     SelectorVO findById(String id);
-    
+
     /**
      * find selector by name.
      *
      * @param name the name
      * @return selector do
+     * @deprecated sice 2.6.0  Deprecated. By querying under this condition, multiple data are usually obtained.
+     *              Therefore, it is recommended to: {@linkplain SelectorService#findListByName(java.lang.String)}
      */
+    @Deprecated
     SelectorDO findByName(String name);","[{'comment': 'hi, @moremind , The findByName() method should return multiple entries, and the original usage of accepting one entry is incorrect. So I have marked @ Deprecated (not recommended for others to use and minimize inappropriate use).\r\nAt present, only one place has been called (`org.apache.shenyu.admin.listener.zookeeper.HttpServiceDiscovery # updateSelectorHandler`), and HttpServiceDiscovery has long been marked  @ Deprecated by others. Although this class may not have been actually called, I still handle compatibility. #4928 ', 'commenter': 'lianjunwei'}]"
4941,shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/AbstractSelectorHandleConverter.java,"@@ -68,7 +68,7 @@ public String handler(final String handle, final List<CommonUpstream> aliveList)
      */
     @Override
     public <T extends CommonUpstream> List<T> updateStatusAndFilter(final List<T> existList, final List<? extends CommonUpstream> aliveList) {
-        if (CollectionUtils.isEmpty(aliveList) || CollectionUtils.isEmpty(existList)) {
+        if (aliveList == null) {","[{'comment': 'use CollectionUtils.isEmpty(?', 'commenter': 'moremind'}, {'comment': 'If the aliveList is an empty array, follow-up logic is required', 'commenter': 'yunlongn'}, {'comment': 'Objects.isNull', 'commenter': 'moremind'}, {'comment': 'i will modify him', 'commenter': 'yunlongn'}]"
4941,shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/DubboUpstream.java,"@@ -246,8 +246,6 @@ public boolean equals(final Object o) {
         }
         DubboUpstream that = (DubboUpstream) o;
         return port == that.port
-                && weight == that.weight
-                && warmup == that.warmup","[{'comment': 'why remove these ?', 'commenter': 'loongs-zhang'}, {'comment': 'These two are not the key factors. See `DivideUpstream#equals`', 'commenter': 'yunlongn'}, {'comment': '`hashCode` also need modify.', 'commenter': 'loongs-zhang'}]"
4945,shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/main/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClient.java,"@@ -226,7 +226,7 @@ public TreeCache getCache(final String path) {
     public TreeCache addCache(final String path, final TreeCacheListener... listeners) {
         TreeCache cache = TreeCache.newBuilder(client, path).build();
         caches.put(path, cache);
-        if (listeners != null && listeners.length > 0) {
+        if (listeners != null) {","[{'comment': 'use Objects.isNull', 'commenter': 'moremind'}]"
4945,shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-zookeeper/src/main/java/org/apache/shenyu/register/client/server/zookeeper/ZookeeperClient.java,"@@ -223,7 +223,7 @@ public TreeCache getCache(final String path) {
     public TreeCache addCache(final String path, final TreeCacheListener... listeners) {
         TreeCache cache = TreeCache.newBuilder(client, path).build();
         caches.put(path, cache);
-        if (listeners != null && listeners.length > 0) {
+        if (listeners != null) {","[{'comment': 'use Objects.isNull', 'commenter': 'moremind'}, {'comment': 'Objects.isNull', 'commenter': 'moremind'}]"
4975,shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/HttpUtils.java,"@@ -215,20 +215,18 @@ public String request(final String url, final Map<String, ?> form, final Map<Str
      * @return String
      * @throws IOException IOException
      */
-    public String requestJson(final String url, final String json,
+    public Response requestJson(final String url, final String json,
         final Map<String, String> header) throws IOException {
-        RequestBody body = RequestBody.create(MEDIA_TYPE_JSON, json);
+        RequestBody body = RequestBody.create(okhttp3.MediaType.parse(MediaType.APPLICATION_JSON_VALUE), json);","[{'comment': 'remove this package', 'commenter': 'moremind'}]"
4975,shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/HttpUtils.java,"@@ -375,6 +376,15 @@ private void addHeader(final Request.Builder builder, final Map<String, String>
         }
     }
 
+    private boolean isJsonRequest(final Map<String, String> headers) {
+        try {
+            return MEDIA_TYPE_JSON.equals(MediaType.parse(headers.get(""Content-Type"")));
+        } catch (Exception e) {
+            System.err.println(e);","[{'comment': '```java\r\nlog.error(""parse http client json request error="", e);\r\nreturn false;\r\n```', 'commenter': 'moremind'}]"
4975,shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/HttpUtils.java,"@@ -375,6 +381,15 @@ private void addHeader(final Request.Builder builder, final Map<String, String>
         }
     }
 
+    private boolean isJsonRequest(final Map<String, String> headers) {
+        try {
+            return MEDIA_TYPE_JSON.equals(MediaType.parse(headers.get(""Content-Type"")));","[{'comment': 'Is this still true if the `Content-Type` header is `application/json`?', 'commenter': 'dengliming'}]"
4983,db/upgrade/2.6.0-upgrade-2.6.1-mysql.sql,"@@ -0,0 +1,19 @@
+-- Licensed to the Apache Software Foundation (ASF) under one
+-- or more contributor license agreements.  See the NOTICE file
+-- distributed with this work for additional information
+-- regarding copyright ownership.  The ASF licenses this file
+-- to you under the Apache License, Version 2.0 (the
+-- ""License""); you may not use this file except in compliance
+-- with the License.  You may obtain a copy of the License at
+--
+--     http://www.apache.org/licenses/LICENSE-2.0
+--","[{'comment': '2.6.1.sql', 'commenter': 'moremind'}, {'comment': ""According to the rules I see, the released version is 2.6.0, and the development version is 2.6.1; So my new fields are in 2.6.0-upgrade-2.6.1-xxx.sql, isn't that right?    \r\n\r\n\r\n> copy new sql named 2.6.1 from 2.6.0.sql, and add these fields to 2.6.1.sql and 2.6.0-to-2.6.1.sql    \r\n\r\nYou mean:\r\n```\r\n...\r\n2.5.1-upgrade-2.6.0-xxx.sql\r\n2.6.0-upgrade-2.6.1-xxx.sql (the new file added by the current PR)\r\n2.6.1-xxx.sql (???, copy new sql named 2.6.1 from 2.6.0.sql)\r\n```\r\nThe contents of **2.6.1-xxx.sql** and **2.6.0-upgrade-2.6.1-xxx.sql** are the same, and MD5 is the same. Is that what it means?"", 'commenter': 'kerwin612'}, {'comment': '2.6.1-mysql.sql/2.6.1-oracle is prepared for the next version, but 2.6.0-to-2.6.1 help users upgrade 2.6.1 from 2.6.0', 'commenter': 'moremind'}]"
5001,shenyu-sync-data-center/shenyu-sync-data-consul/src/main/java/org/apache/shenyu/sync/data/consul/ConsulSyncDataService.java,"@@ -85,88 +85,159 @@ public ConsulSyncDataService(final ConsulClient consulClient,
         super(pluginDataSubscriber, metaDataSubscribers, authDataSubscribers, proxySelectorDataSubscribers, discoveryUpstreamDataSubscribers);
         this.consulClient = consulClient;
         this.consulConfig = consulConfig;
-        this.executor = new ScheduledThreadPoolExecutor(1,
+        // corePool is the total number of watcher nodes
+        this.executor = new ScheduledThreadPoolExecutor(7,
                 ShenyuThreadFactory.create(""consul-config-watch"", true));
-        consulIndexes.put(ConsulConstants.SYNC_PRE_FIX, 0L);
-        initUpdateMap();
-        start();
+        watcherData();
     }
 
-    /**
-     * init config key and update method mapping.
-     */
-    private void initUpdateMap() {
-        groupMap.put(ConsulConstants.PLUGIN_DATA, this::updatePluginData);
-        groupMap.put(ConsulConstants.SELECTOR_DATA, this::updateSelectorMap);
-        groupMap.put(ConsulConstants.RULE_DATA, this::updateRuleMap);
-        groupMap.put(ConsulConstants.META_DATA, this::updateMetaDataMap);
-        groupMap.put(ConsulConstants.AUTH_DATA, this::updateAuthMap);
-        groupMap.put(ConsulConstants.PROXY_SELECTOR_DATA_ID, this::updateSelectorDataMap);
-        groupMap.put(ConsulConstants.DISCOVERY_UPSTREAM, this::updateDiscoveryUpstreamMap);
+    private void watcherData() {
+        watcherData0(DefaultPathConstants.PLUGIN_PARENT);
+        watcherData0(DefaultPathConstants.SELECTOR_PARENT);
+        watcherData0(DefaultPathConstants.RULE_PARENT);
+        watcherData0(DefaultPathConstants.PROXY_SELECTOR);
+        watcherData0(DefaultPathConstants.DISCOVERY_UPSTREAM);
+        watcherData0(DefaultPathConstants.APP_AUTH_PARENT);
+        watcherData0(DefaultPathConstants.META_DATA);
     }
 
-    private void watchConfigKeyValues() {
-        if (this.running.get()) {
-            for (String context : this.consulIndexes.keySet()) {
-                try {
-                    Long currentIndex = this.consulIndexes.get(context);
-                    if (Objects.isNull(currentIndex)) {
-                        currentIndex = ConsulConstants.INIT_CONFIG_VERSION_INDEX;
-                    }
-                    Response<List<GetValue>> response = this.consulClient.getKVValues(context, null,
-                            new QueryParams(consulConfig.getWaitTime(), currentIndex));
-                    if (Objects.isNull(response.getValue()) || response.getValue().isEmpty()) {
-                        if (LOG.isTraceEnabled()) {
-                            LOG.trace(""No value for context "" + context);
-                        }
-                        continue;
-                    }
-                    Long newIndex = response.getConsulIndex();
-                    if (Objects.isNull(newIndex) || Objects.equals(newIndex, currentIndex)) {
-                        if (LOG.isTraceEnabled()) {
-                            LOG.trace(""Same index for context "" + context);
-                        }
-                        continue;
+    private void watcherData0(final String registerPath) {
+        consulIndexes.put(registerPath, 0L);
+        BiConsumer<String, String> updateHandler = (changeData, decodedValue) -> this.event(changeData, decodedValue, registerPath, EventType.PUT);
+        Consumer<String> deleteHandler = removeKey -> this.event(removeKey, null, registerPath, EventType.DELETE);
+        this.executor.schedule(() -> watchConfigKeyValues(registerPath, updateHandler, deleteHandler), -1, TimeUnit.MILLISECONDS);
+    }
+
+    private void watchConfigKeyValues(final String watchPathRoot,
+                                      final BiConsumer<String, String> updateHandler,
+                                      final Consumer<String> deleteHandler) {
+        try {
+            Long currentIndex = this.consulIndexes.get(watchPathRoot);
+            if (Objects.isNull(currentIndex)) {
+                currentIndex = ConsulConstants.INIT_CONFIG_VERSION_INDEX;
+            }
+            Response<List<GetValue>> response = this.consulClient.getKVValues(watchPathRoot, null,
+                    new QueryParams(TimeUnit.MILLISECONDS.toSeconds(consulConfig.getWaitTime()), currentIndex));
+            if (Objects.isNull(response.getValue()) || response.getValue().isEmpty()) {
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace(""No value for watchPathRoot "" + watchPathRoot);
+                }
+                this.executor.schedule(() -> watchConfigKeyValues(watchPathRoot, updateHandler, deleteHandler),
+                        consulConfig.getWatchDelay(), TimeUnit.MILLISECONDS);
+                return;
+            }
+            Long newIndex = response.getConsulIndex();
+            if (Objects.isNull(newIndex)) {
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace(""Same index for watchPathRoot "" + watchPathRoot);
+                }
+                this.executor.schedule(() -> watchConfigKeyValues(watchPathRoot, updateHandler, deleteHandler),
+                        consulConfig.getWatchDelay(), TimeUnit.MILLISECONDS);
+                return;
+            }
+            if (Objects.equals(newIndex, currentIndex)) {
+                this.executor.schedule(() -> watchConfigKeyValues(watchPathRoot, updateHandler, deleteHandler),
+                        -1, TimeUnit.MILLISECONDS);
+                return;
+            }
+            if (!this.consulIndexes.containsValue(newIndex)
+                    && !currentIndex.equals(ConsulConstants.INIT_CONFIG_VERSION_INDEX)) {
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace(""watchPathRoot "" + watchPathRoot + "" has new index "" + newIndex);
+                }
+                final Long lastIndex = currentIndex;
+                final List<ConsulData> lastDatas = cacheConsulDataKeyMap.get(watchPathRoot);
+                response.getValue().forEach(data -> {
+                    if (data.getModifyIndex() == lastIndex) {
+                        //data has not changed
+                        return;
                     }
-                    if (!this.consulIndexes.containsValue(newIndex)
-                            && !currentIndex.equals(ConsulConstants.INIT_CONFIG_VERSION_INDEX)) {
-                        if (LOG.isTraceEnabled()) {
-                            LOG.trace(""Context "" + context + "" has new index "" + newIndex);
+                    if (lastDatas != null) {","[{'comment': 'remove !=', 'commenter': 'moremind'}]"
5001,shenyu-sync-data-center/shenyu-sync-data-consul/src/main/java/org/apache/shenyu/sync/data/consul/ConsulSyncDataService.java,"@@ -85,88 +85,159 @@ public ConsulSyncDataService(final ConsulClient consulClient,
         super(pluginDataSubscriber, metaDataSubscribers, authDataSubscribers, proxySelectorDataSubscribers, discoveryUpstreamDataSubscribers);
         this.consulClient = consulClient;
         this.consulConfig = consulConfig;
-        this.executor = new ScheduledThreadPoolExecutor(1,
+        // corePool is the total number of watcher nodes
+        this.executor = new ScheduledThreadPoolExecutor(7,
                 ShenyuThreadFactory.create(""consul-config-watch"", true));
-        consulIndexes.put(ConsulConstants.SYNC_PRE_FIX, 0L);
-        initUpdateMap();
-        start();
+        watcherData();
     }
 
-    /**
-     * init config key and update method mapping.
-     */
-    private void initUpdateMap() {
-        groupMap.put(ConsulConstants.PLUGIN_DATA, this::updatePluginData);
-        groupMap.put(ConsulConstants.SELECTOR_DATA, this::updateSelectorMap);
-        groupMap.put(ConsulConstants.RULE_DATA, this::updateRuleMap);
-        groupMap.put(ConsulConstants.META_DATA, this::updateMetaDataMap);
-        groupMap.put(ConsulConstants.AUTH_DATA, this::updateAuthMap);
-        groupMap.put(ConsulConstants.PROXY_SELECTOR_DATA_ID, this::updateSelectorDataMap);
-        groupMap.put(ConsulConstants.DISCOVERY_UPSTREAM, this::updateDiscoveryUpstreamMap);
+    private void watcherData() {
+        watcherData0(DefaultPathConstants.PLUGIN_PARENT);
+        watcherData0(DefaultPathConstants.SELECTOR_PARENT);
+        watcherData0(DefaultPathConstants.RULE_PARENT);
+        watcherData0(DefaultPathConstants.PROXY_SELECTOR);
+        watcherData0(DefaultPathConstants.DISCOVERY_UPSTREAM);
+        watcherData0(DefaultPathConstants.APP_AUTH_PARENT);
+        watcherData0(DefaultPathConstants.META_DATA);
     }
 
-    private void watchConfigKeyValues() {
-        if (this.running.get()) {
-            for (String context : this.consulIndexes.keySet()) {
-                try {
-                    Long currentIndex = this.consulIndexes.get(context);
-                    if (Objects.isNull(currentIndex)) {
-                        currentIndex = ConsulConstants.INIT_CONFIG_VERSION_INDEX;
-                    }
-                    Response<List<GetValue>> response = this.consulClient.getKVValues(context, null,
-                            new QueryParams(consulConfig.getWaitTime(), currentIndex));
-                    if (Objects.isNull(response.getValue()) || response.getValue().isEmpty()) {
-                        if (LOG.isTraceEnabled()) {
-                            LOG.trace(""No value for context "" + context);
-                        }
-                        continue;
-                    }
-                    Long newIndex = response.getConsulIndex();
-                    if (Objects.isNull(newIndex) || Objects.equals(newIndex, currentIndex)) {
-                        if (LOG.isTraceEnabled()) {
-                            LOG.trace(""Same index for context "" + context);
-                        }
-                        continue;
+    private void watcherData0(final String registerPath) {
+        consulIndexes.put(registerPath, 0L);
+        BiConsumer<String, String> updateHandler = (changeData, decodedValue) -> this.event(changeData, decodedValue, registerPath, EventType.PUT);
+        Consumer<String> deleteHandler = removeKey -> this.event(removeKey, null, registerPath, EventType.DELETE);
+        this.executor.schedule(() -> watchConfigKeyValues(registerPath, updateHandler, deleteHandler), -1, TimeUnit.MILLISECONDS);
+    }
+
+    private void watchConfigKeyValues(final String watchPathRoot,
+                                      final BiConsumer<String, String> updateHandler,
+                                      final Consumer<String> deleteHandler) {
+        try {
+            Long currentIndex = this.consulIndexes.get(watchPathRoot);
+            if (Objects.isNull(currentIndex)) {
+                currentIndex = ConsulConstants.INIT_CONFIG_VERSION_INDEX;
+            }
+            Response<List<GetValue>> response = this.consulClient.getKVValues(watchPathRoot, null,
+                    new QueryParams(TimeUnit.MILLISECONDS.toSeconds(consulConfig.getWaitTime()), currentIndex));
+            if (Objects.isNull(response.getValue()) || response.getValue().isEmpty()) {
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace(""No value for watchPathRoot "" + watchPathRoot);
+                }
+                this.executor.schedule(() -> watchConfigKeyValues(watchPathRoot, updateHandler, deleteHandler),
+                        consulConfig.getWatchDelay(), TimeUnit.MILLISECONDS);
+                return;
+            }
+            Long newIndex = response.getConsulIndex();
+            if (Objects.isNull(newIndex)) {
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace(""Same index for watchPathRoot "" + watchPathRoot);
+                }
+                this.executor.schedule(() -> watchConfigKeyValues(watchPathRoot, updateHandler, deleteHandler),
+                        consulConfig.getWatchDelay(), TimeUnit.MILLISECONDS);
+                return;
+            }
+            if (Objects.equals(newIndex, currentIndex)) {
+                this.executor.schedule(() -> watchConfigKeyValues(watchPathRoot, updateHandler, deleteHandler),
+                        -1, TimeUnit.MILLISECONDS);
+                return;
+            }
+            if (!this.consulIndexes.containsValue(newIndex)
+                    && !currentIndex.equals(ConsulConstants.INIT_CONFIG_VERSION_INDEX)) {
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace(""watchPathRoot "" + watchPathRoot + "" has new index "" + newIndex);
+                }
+                final Long lastIndex = currentIndex;
+                final List<ConsulData> lastDatas = cacheConsulDataKeyMap.get(watchPathRoot);
+                response.getValue().forEach(data -> {
+                    if (data.getModifyIndex() == lastIndex) {
+                        //data has not changed
+                        return;
                     }
-                    if (!this.consulIndexes.containsValue(newIndex)
-                            && !currentIndex.equals(ConsulConstants.INIT_CONFIG_VERSION_INDEX)) {
-                        if (LOG.isTraceEnabled()) {
-                            LOG.trace(""Context "" + context + "" has new index "" + newIndex);
+                    if (lastDatas != null) {
+                        final ConsulData consulData = lastDatas.stream()
+                                .filter(lastData -> data.getKey().equals(lastData.getConsulKey())).findFirst().orElse(null);
+                        if (consulData != null && !StringUtils.isBlank(consulData.getConsulDataMd5())","[{'comment': 'remove !=', 'commenter': 'moremind'}]"
5054,shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service/k8s/ingress.yml,"@@ -64,6 +64,7 @@ metadata:
   annotations:
     kubernetes.io/ingress.class: shenyu
     shenyu.apache.org/plugin-dubbo-enabled: 'true'
+    shenyu.apache.org/zookeeper-register-address: 123.60.144.138:2181","[{'comment': '?', 'commenter': 'JooKS-me'}]"
5054,shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/k8s/ingress.yml,"@@ -0,0 +1,115 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+apiVersion: v1
+kind: Service
+metadata:
+  name: motan-testtimeout","[{'comment': 'motan-test-timeout', 'commenter': 'JooKS-me'}]"
5054,shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/k8s/ingress.yml,"@@ -0,0 +1,115 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+apiVersion: v1
+kind: Service
+metadata:
+  name: motan-testtimeout
+  annotations:
+      kubernetes.io/ingress.class: shenyu
+      shenyu.apache.org/plugin-motan-enabled: 'true'
+      shenyu.apache.org/plugin-motan-app-name: motan
+      shenyu.apache.org/plugin-motan-path: /motan/demoTest/testTimeOut
+      shenyu.apache.org/plugin-motan-rpc-type: motan
+      shenyu.apache.org/plugin-motan-service-name: org.apache.shenyu.examples.motan.service.MotanDemoService
+      shenyu.apache.org/plugin-motan-method-name: testTimeOut
+      shenyu.apache.org/plugin-motan-params-type: long
+      shenyu.apache.org/plugin-motan-rpc-expand: |
+        {
+          ""methodInfo"":[
+            {
+              ""methodName"":""testTimeOut"",
+              ""params"":[
+                {
+                  ""left"":""long"",
+                  ""right"":""seconds""
+                }
+              ]
+            }
+          ],
+          ""group"":""motan-shenyu-rpc"",
+          ""timeout"":2000
+        }
+spec:
+  selector:
+    app: shenyu-examples-motan
+  ports:
+    - port: 20880  # Assuming this is the motan service port
+
+---
+
+apiVersion: v1
+kind: Service
+metadata:
+  name: motan-hello
+  annotations:
+      kubernetes.io/ingress.class: shenyu
+      shenyu.apache.org/plugin-motan-enabled: 'true'
+      shenyu.apache.org/plugin-motan-app-name: motan
+      shenyu.apache.org/plugin-motan-context-path: /motan
+      shenyu.apache.org/plugin-motan-path: /motan/demoTest/hello
+      shenyu.apache.org/plugin-motan-rpc-type: motan
+      shenyu.apache.org/plugin-motan-service-name: org.apache.shenyu.examples.motan.service.MotanDemoService
+      shenyu.apache.org/plugin-motan-method-name: hello
+      shenyu.apache.org/plugin-motan-params-type: java.lang.String
+      shenyu.apache.org/plugin-motan-rpc-expand: |
+        {
+          ""methodInfo"": [
+            {
+              ""methodName"": ""hello"",
+              ""params"": [
+                {
+                  ""left"": ""java.lang.String"",
+                  ""right"": ""name""
+                }
+              ]
+            }
+          ],
+          ""group"": ""motan-shenyu-rpc""
+        }
+spec:
+  selector:
+    app: shenyu-examples-motan
+  ports:
+    - port: 20881  # Assuming this is the Dubbo service port","[{'comment': 'Dubbo?', 'commenter': 'JooKS-me'}]"
5054,shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/k8s/ingress.yml,"@@ -0,0 +1,115 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# ""License""); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+apiVersion: v1
+kind: Service
+metadata:
+  name: motan-testtimeout
+  annotations:
+      kubernetes.io/ingress.class: shenyu
+      shenyu.apache.org/plugin-motan-enabled: 'true'
+      shenyu.apache.org/plugin-motan-app-name: motan
+      shenyu.apache.org/plugin-motan-path: /motan/demoTest/testTimeOut
+      shenyu.apache.org/plugin-motan-rpc-type: motan
+      shenyu.apache.org/plugin-motan-service-name: org.apache.shenyu.examples.motan.service.MotanDemoService
+      shenyu.apache.org/plugin-motan-method-name: testTimeOut
+      shenyu.apache.org/plugin-motan-params-type: long
+      shenyu.apache.org/plugin-motan-rpc-expand: |
+        {
+          ""methodInfo"":[
+            {
+              ""methodName"":""testTimeOut"",
+              ""params"":[
+                {
+                  ""left"":""long"",
+                  ""right"":""seconds""
+                }
+              ]
+            }
+          ],
+          ""group"":""motan-shenyu-rpc"",
+          ""timeout"":2000
+        }
+spec:
+  selector:
+    app: shenyu-examples-motan
+  ports:
+    - port: 20880  # Assuming this is the motan service port
+
+---
+
+apiVersion: v1
+kind: Service
+metadata:
+  name: motan-hello
+  annotations:
+      kubernetes.io/ingress.class: shenyu
+      shenyu.apache.org/plugin-motan-enabled: 'true'
+      shenyu.apache.org/plugin-motan-app-name: motan
+      shenyu.apache.org/plugin-motan-context-path: /motan
+      shenyu.apache.org/plugin-motan-path: /motan/demoTest/hello
+      shenyu.apache.org/plugin-motan-rpc-type: motan
+      shenyu.apache.org/plugin-motan-service-name: org.apache.shenyu.examples.motan.service.MotanDemoService
+      shenyu.apache.org/plugin-motan-method-name: hello
+      shenyu.apache.org/plugin-motan-params-type: java.lang.String
+      shenyu.apache.org/plugin-motan-rpc-expand: |
+        {
+          ""methodInfo"": [
+            {
+              ""methodName"": ""hello"",
+              ""params"": [
+                {
+                  ""left"": ""java.lang.String"",
+                  ""right"": ""name""
+                }
+              ]
+            }
+          ],
+          ""group"": ""motan-shenyu-rpc""
+        }
+spec:
+  selector:
+    app: shenyu-examples-motan
+  ports:
+    - port: 20881  # Assuming this is the Dubbo service port
+
+---
+
+apiVersion: networking.k8s.io/v1
+kind: Ingress
+metadata:
+  annotations:
+    kubernetes.io/ingress.class: shenyu
+    shenyu.apache.org/plugin-motan-enabled: 'true'
+    shenyu.apache.org/zookeeper-register-address: 123.60.144.138:2181
+  name: demo-ingress
+spec:
+  rules:
+    - http:
+        paths:
+          - backend:
+              service:
+                name: motan-testtimeout","[{'comment': 'motan-test-timeout', 'commenter': 'JooKS-me'}]"
5054,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/reconciler/IngressReconciler.java,"@@ -119,6 +119,21 @@ public Result reconcile(final Request request) {
         // Do not modify current ingress object directly
         final V1Ingress v1Ingress = this.ingressLister.namespace(request.getNamespace()).get(request.getName());
         final V1Ingress oldIngress = IngressCache.getInstance().get(request.getNamespace(), request.getName());
+        Map<String, String> annotations = v1Ingress.getMetadata().getAnnotations();
+        enablePlugin(shenyuCacheRepository, PluginEnum.GLOBAL, annotations);","[{'comment': 'Global, uri, netty_http_client, divide plugins should be enabled int `initPlugins` method, others can be enabled this way.', 'commenter': 'JooKS-me'}]"
5054,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DubboIngressParser.java,"@@ -292,7 +292,7 @@ private List<DubboUpstream> parseUpstream(final V1IngressBackend backend, final
                         DubboUpstream upstream = DubboUpstream.builder()
                                 .upstreamUrl(clusterIP + "":"" + defaultPort)
                                 .weight(100)
-                                .protocol(""http://"")
+                                .protocol(""dubbo://"")","[{'comment': 'can the user config protocol?', 'commenter': 'moremind'}, {'comment': 'Users cannot set their own protocols for the time being.', 'commenter': 'runqi-zhao'}, {'comment': 'has been modified so that the user can set the protocol', 'commenter': 'runqi-zhao'}]"
5054,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/MotanIngressParser.java,"@@ -0,0 +1,288 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.k8s.common.IngressConfiguration;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+public class MotanIngressParser implements K8sResourceParser<V1Ingress> {
+    private static final Logger LOG = LoggerFactory.getLogger(MotanIngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * IngressParser Constructor.
+     *
+     * @param serviceLister   serviceLister
+     * @param endpointsLister endpointsLister
+     */
+    public MotanIngressParser(final Lister<V1Service> serviceLister, final Lister<V1Endpoints> endpointsLister) {
+        this.serviceLister = serviceLister;
+        this.endpointsLister = endpointsLister;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress   ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (Objects.nonNull(ingress.getSpec())) {
+            // Parse the default backend
+            V1IngressBackend defaultBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+
+            if (Objects.isNull(rules) || CollectionUtils.isEmpty(rules)) {
+                // if rules is null, defaultBackend become global default
+                if (Objects.nonNull(defaultBackend) && Objects.nonNull(defaultBackend.getService())) {
+                    IngressConfiguration defaultRouteConfig = getDefaultRouteConfig(ingress.getMetadata().getAnnotations());
+                    res.setGlobalDefaultBackend(Pair.of(Pair.of(namespace + ""/"" + ingress.getMetadata().getName(), defaultBackend.getService().getName()),
+                            defaultRouteConfig));
+                }
+            } else {
+                // if rules is not null, defaultBackend is default in this ingress
+                List<IngressConfiguration> routeList = new ArrayList<>(rules.size());
+                for (V1IngressRule ingressRule : rules) {
+                    List<IngressConfiguration> routes = parseIngressRule(ingressRule,
+                            Objects.requireNonNull(ingress.getMetadata()).getNamespace(), ingress.getMetadata().getAnnotations());
+                    routeList.addAll(routes);
+                }
+                res.setRouteConfigList(routeList);
+            }
+
+            // Parse tls
+            if (Objects.nonNull(tlsList) && CollectionUtils.isNotEmpty(tlsList)) {
+                List<SslCrtAndKeyStream> sslList = new ArrayList<>();
+                for (V1IngressTLS tls : tlsList) {
+                    if (tls.getSecretName() != null && tls.getHosts() != null && CollectionUtils.isNotEmpty(tls.getHosts())) {
+                        try {
+                            V1Secret secret = coreV1Api.readNamespacedSecret(tls.getSecretName(), namespace, ""ture"");
+                            if (Objects.nonNull(secret.getData())) {
+                                InputStream keyCertChainInputStream = new ByteArrayInputStream(secret.getData().get(""tls.crt""));
+                                InputStream keyInputStream = new ByteArrayInputStream(secret.getData().get(""tls.key""));
+                                tls.getHosts().forEach(host ->
+                                        sslList.add(new SslCrtAndKeyStream(host, keyCertChainInputStream, keyInputStream))
+                                );
+                            }
+                        } catch (ApiException e) {
+                            LOG.error(""parse tls failed "", e);
+                        }
+                    }
+                }
+                res.setTlsConfigList(sslList);
+            }
+        }
+        return res;
+    }
+
+    private List<IngressConfiguration> parseIngressRule(final V1IngressRule ingressRule,
+                                                        final String namespace,
+                                                        final Map<String, String> annotations) {
+        List<IngressConfiguration> res = new ArrayList<>();
+
+        ConditionData hostCondition = null;
+        if (Objects.nonNull(ingressRule.getHost())) {
+            hostCondition = new ConditionData();
+            hostCondition.setParamType(ParamTypeEnum.URI.getName());
+            hostCondition.setOperator(OperatorEnum.EQ.getAlias());
+            hostCondition.setParamValue(ingressRule.getHost());
+        }
+        if (Objects.nonNull(ingressRule.getHttp())) {
+            List<V1HTTPIngressPath> paths = ingressRule.getHttp().getPaths();
+            if (paths != null) {","[{'comment': 'use Objects.nonNull()', 'commenter': 'moremind'}]"
5054,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/MotanIngressParser.java,"@@ -0,0 +1,288 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.k8s.parser;
+
+import io.kubernetes.client.informer.cache.Lister;
+import io.kubernetes.client.openapi.ApiException;
+import io.kubernetes.client.openapi.apis.CoreV1Api;
+import io.kubernetes.client.openapi.models.V1Endpoints;
+import io.kubernetes.client.openapi.models.V1HTTPIngressPath;
+import io.kubernetes.client.openapi.models.V1Ingress;
+import io.kubernetes.client.openapi.models.V1IngressBackend;
+import io.kubernetes.client.openapi.models.V1IngressRule;
+import io.kubernetes.client.openapi.models.V1IngressTLS;
+import io.kubernetes.client.openapi.models.V1Secret;
+import io.kubernetes.client.openapi.models.V1Service;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
+import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.enums.MatchModeEnum;
+import org.apache.shenyu.common.enums.OperatorEnum;
+import org.apache.shenyu.common.enums.ParamTypeEnum;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.k8s.common.IngressConfiguration;
+import org.apache.shenyu.k8s.common.IngressConstants;
+import org.apache.shenyu.k8s.common.ShenyuMemoryConfig;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+public class MotanIngressParser implements K8sResourceParser<V1Ingress> {
+    private static final Logger LOG = LoggerFactory.getLogger(MotanIngressParser.class);
+
+    private final Lister<V1Service> serviceLister;
+
+    private final Lister<V1Endpoints> endpointsLister;
+
+    /**
+     * IngressParser Constructor.
+     *
+     * @param serviceLister   serviceLister
+     * @param endpointsLister endpointsLister
+     */
+    public MotanIngressParser(final Lister<V1Service> serviceLister, final Lister<V1Endpoints> endpointsLister) {
+        this.serviceLister = serviceLister;
+        this.endpointsLister = endpointsLister;
+    }
+
+    /**
+     * Parse ingress to ShenyuMemoryConfig.
+     *
+     * @param ingress   ingress resource
+     * @param coreV1Api coreV1Api
+     * @return ShenyuMemoryConfig
+     */
+    @Override
+    public ShenyuMemoryConfig parse(final V1Ingress ingress, final CoreV1Api coreV1Api) {
+        ShenyuMemoryConfig res = new ShenyuMemoryConfig();
+
+        if (Objects.nonNull(ingress.getSpec())) {
+            // Parse the default backend
+            V1IngressBackend defaultBackend = ingress.getSpec().getDefaultBackend();
+            List<V1IngressRule> rules = ingress.getSpec().getRules();
+            List<V1IngressTLS> tlsList = ingress.getSpec().getTls();
+
+            String namespace = Objects.requireNonNull(ingress.getMetadata()).getNamespace();
+
+            if (Objects.isNull(rules) || CollectionUtils.isEmpty(rules)) {
+                // if rules is null, defaultBackend become global default
+                if (Objects.nonNull(defaultBackend) && Objects.nonNull(defaultBackend.getService())) {
+                    IngressConfiguration defaultRouteConfig = getDefaultRouteConfig(ingress.getMetadata().getAnnotations());
+                    res.setGlobalDefaultBackend(Pair.of(Pair.of(namespace + ""/"" + ingress.getMetadata().getName(), defaultBackend.getService().getName()),
+                            defaultRouteConfig));
+                }
+            } else {
+                // if rules is not null, defaultBackend is default in this ingress
+                List<IngressConfiguration> routeList = new ArrayList<>(rules.size());
+                for (V1IngressRule ingressRule : rules) {
+                    List<IngressConfiguration> routes = parseIngressRule(ingressRule,
+                            Objects.requireNonNull(ingress.getMetadata()).getNamespace(), ingress.getMetadata().getAnnotations());
+                    routeList.addAll(routes);
+                }
+                res.setRouteConfigList(routeList);
+            }
+
+            // Parse tls
+            if (Objects.nonNull(tlsList) && CollectionUtils.isNotEmpty(tlsList)) {
+                List<SslCrtAndKeyStream> sslList = new ArrayList<>();
+                for (V1IngressTLS tls : tlsList) {
+                    if (tls.getSecretName() != null && tls.getHosts() != null && CollectionUtils.isNotEmpty(tls.getHosts())) {
+                        try {
+                            V1Secret secret = coreV1Api.readNamespacedSecret(tls.getSecretName(), namespace, ""ture"");
+                            if (Objects.nonNull(secret.getData())) {
+                                InputStream keyCertChainInputStream = new ByteArrayInputStream(secret.getData().get(""tls.crt""));
+                                InputStream keyInputStream = new ByteArrayInputStream(secret.getData().get(""tls.key""));
+                                tls.getHosts().forEach(host ->
+                                        sslList.add(new SslCrtAndKeyStream(host, keyCertChainInputStream, keyInputStream))
+                                );
+                            }
+                        } catch (ApiException e) {
+                            LOG.error(""parse tls failed "", e);
+                        }
+                    }
+                }
+                res.setTlsConfigList(sslList);
+            }
+        }
+        return res;
+    }
+
+    private List<IngressConfiguration> parseIngressRule(final V1IngressRule ingressRule,
+                                                        final String namespace,
+                                                        final Map<String, String> annotations) {
+        List<IngressConfiguration> res = new ArrayList<>();
+
+        ConditionData hostCondition = null;
+        if (Objects.nonNull(ingressRule.getHost())) {
+            hostCondition = new ConditionData();
+            hostCondition.setParamType(ParamTypeEnum.URI.getName());
+            hostCondition.setOperator(OperatorEnum.EQ.getAlias());
+            hostCondition.setParamValue(ingressRule.getHost());
+        }
+        if (Objects.nonNull(ingressRule.getHttp())) {
+            List<V1HTTPIngressPath> paths = ingressRule.getHttp().getPaths();
+            if (paths != null) {
+                for (V1HTTPIngressPath path : paths) {
+                    if (path.getPath() == null) {
+                        continue;
+                    }
+
+                    OperatorEnum operator;
+                    if (""ImplementationSpecific"".equals(path.getPathType())) {
+                        operator = OperatorEnum.MATCH;
+                    } else if (""Prefix"".equals(path.getPathType())) {
+                        operator = OperatorEnum.STARTS_WITH;
+                    } else if (""Exact"".equals(path.getPathType())) {
+                        operator = OperatorEnum.EQ;
+                    } else {
+                        LOG.info(""Invalid path type, set it with match operator"");
+                        operator = OperatorEnum.MATCH;
+                    }
+
+                    ConditionData pathCondition = new ConditionData();
+                    pathCondition.setOperator(operator.getAlias());
+                    pathCondition.setParamType(ParamTypeEnum.URI.getName());
+                    pathCondition.setParamValue(path.getPath());
+                    List<ConditionData> conditionList = new ArrayList<>(2);
+                    if (Objects.nonNull(hostCondition)) {
+                        conditionList.add(hostCondition);
+                    }
+                    conditionList.add(pathCondition);
+                    ConditionData ruleConditionData = new ConditionData();
+                    ruleConditionData.setParamType(ParamTypeEnum.URI.getName());
+                    ruleConditionData.setOperator(OperatorEnum.EQ.getAlias());
+                    ruleConditionData.setParamName(annotations.getOrDefault(IngressConstants.PLUGIN_MOTAN_PATH, path.getPath()));
+                    List<ConditionData> ruleConditionDataList = new ArrayList<>();
+                    ruleConditionDataList.add(ruleConditionData);
+
+                    SelectorData selectorData = SelectorData.builder()
+                            .pluginId(String.valueOf(PluginEnum.MOTAN.getCode()))
+                            .pluginName(PluginEnum.MOTAN.getName())
+                            .name(path.getPath())
+                            .matchMode(MatchModeEnum.AND.getCode())
+                            .type(SelectorTypeEnum.CUSTOM_FLOW.getCode())
+                            .enabled(true)
+                            .logged(false)
+                            .continued(true)
+                            .conditionList(conditionList).build();
+
+                    RuleData ruleData = RuleData.builder()","[{'comment': 'can the user config these?', 'commenter': 'moremind'}, {'comment': 'yes，user can config from yml', 'commenter': 'runqi-zhao'}]"
5054,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/reconciler/IngressReconciler.java,"@@ -439,4 +433,24 @@ private void addNewIngressConfigToShenyu(final V1Ingress v1Ingress, final CoreV1
             }
         }
     }
+
+    private String getPluginName(final V1Ingress ingress) {
+        String pluginName;
+        String pluginDubboEnabled = ingress.getMetadata().getAnnotations().get(IngressConstants.PLUGIN_DUBBO_ENABLED);
+        String pluginMotanEnabled = ingress.getMetadata().getAnnotations().get(IngressConstants.PLUGIN_MOTAN_ENABLED);
+        String pluginSpringCloudEnabled = ingress.getMetadata().getAnnotations().get(IngressConstants.PLUGIN_SPRING_CLOUD_ENABLED);
+        String pluginWebSocketEnabled = ingress.getMetadata().getAnnotations().get(IngressConstants.PLUGIN_WEB_SOCKET_ENABLED);
+        if (""true"".equals(pluginDubboEnabled)) {","[{'comment': 'Boolean.TRUE', 'commenter': 'moremind'}, {'comment': 'ping @runqi-zhao ', 'commenter': 'JooKS-me'}, {'comment': ""Ok I'm going to modify it using BOLEAN.TRUE.toString"", 'commenter': 'runqi-zhao'}]"
5054,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DivideIngressParser.java,"@@ -290,15 +292,15 @@ private List<DivideUpstream> parseUpstream(final V1IngressBackend backend, final
                     if (Objects.isNull(addresses) || addresses.isEmpty()) {
                         continue;
                     }
+                    int i = 0;
                     for (V1EndpointAddress address : addresses) {
                         String upstreamIp = address.getIp();
                         String defaultPort = parsePort(backend.getService());
                         if (Objects.nonNull(defaultPort)) {
                             DivideUpstream upstream = new DivideUpstream();
                             upstream.setUpstreamUrl(upstreamIp + "":"" + defaultPort);
                             upstream.setWeight(100);
-                            // TODO support config protocol in annotation
-                            upstream.setProtocol(""http://"");
+                            upstream.setProtocol(Objects.isNull(protocol) ? ""http://"" : protocol.split("","")[i++]);","[{'comment': 'Why is an array?', 'commenter': 'JooKS-me'}, {'comment': ""In the yaml file, we need to set up several different Upstreams at the same time, so we will set up the yaml file in the following form:\r\n```yaml\r\nmetadata.\r\n  name: ...\r\n  annotations.\r\n    yourAnnotationKey:  value1,value2,value3\r\n```\r\nThen read in value1,value2,value3, so it's good to use an array to iterate through each of these values"", 'commenter': 'runqi-zhao'}, {'comment': 'The split is used once every cycle, which is too inefficient, and the split should be placed outside the cycle.', 'commenter': 'JooKS-me'}, {'comment': 'done\r\n\r\n> The split is used once every cycle, which is too inefficient, and the split should be placed outside the cycle.\r\n\r\n', 'commenter': 'runqi-zhao'}]"
5054,shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DivideIngressParser.java,"@@ -275,13 +275,17 @@ private String parsePort(final V1IngressServiceBackend service) {
         return null;
     }
 
-    private List<DivideUpstream> parseUpstream(final V1IngressBackend backend, final String namespace) {
+    private List<DivideUpstream> parseUpstream(final V1IngressBackend backend, final String namespace, final Map<String, String> annotations) {
         List<DivideUpstream> upstreamList = new ArrayList<>();
         if (Objects.nonNull(backend) && Objects.nonNull(backend.getService()) && Objects.nonNull(backend.getService().getName())) {
             String serviceName = backend.getService().getName();
             // shenyu routes directly to the container
             V1Endpoints v1Endpoints = endpointsLister.namespace(namespace).get(serviceName);
             List<V1EndpointSubset> subsets = v1Endpoints.getSubsets();
+            String[] protocol = null;
+            if (Objects.isNull(annotations) && annotations.containsKey(IngressConstants.UPSTREAMS_PROTOCOL_ANNOTATION_KEY)) {","[{'comment': 'maybe isNonNull?', 'commenter': 'JooKS-me'}, {'comment': 'done', 'commenter': 'runqi-zhao'}]"
5062,.github/workflows/e2e.yaml,"@@ -94,7 +93,7 @@ jobs:
           cache: maven
 
       - name: Build shenyu-e2e-engine with Maven","[{'comment': 'not change this', 'commenter': 'moremind'}, {'comment': 'Just try to trigger maven cache for test', 'commenter': 'GOODBOY008'}, {'comment': '> not change this\r\n\r\nCI was fail, I found maven cache do not hava e2e-moudle dependency. @moremind ', 'commenter': 'GOODBOY008'}, {'comment': 'yes, e2e not cache', 'commenter': 'moremind'}, {'comment': '> yes, e2e not cache\r\n\r\nAnybody to fix ci fail ?', 'commenter': 'GOODBOY008'}, {'comment': 'maybe ci cache is error, and @yunlongn @damonxue will fix it', 'commenter': 'moremind'}, {'comment': '@HaiqiQin will fix it', 'commenter': 'moremind'}, {'comment': '@GOODBOY008 pls remove e2e changes', 'commenter': 'moremind'}]"
5106,shenyu-bootstrap/pom.xml,"@@ -208,6 +208,52 @@
         </dependency>
         <!--shenyu cache plugin end-->
 
+        <!--if you use http proxy start this-->
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>","[{'comment': 'this is default plugin', 'commenter': 'moremind'}, {'comment': 'All right.', 'commenter': 'xuziyang'}]"
5139,shenyu-integrated-test/shenyu-integrated-test-k8s-ingress-spring-cloud/docker-compose.yml,"@@ -0,0 +1,108 @@
+# Licensed to the Apache Software Foundation (ASF) under one","[{'comment': 'Why need docker-compose?', 'commenter': 'JooKS-me'}]"
5139,.github/workflows/integrated-test-k8s-ingress-spring-cloud.yml,"@@ -0,0 +1,137 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+name: it-k8s
+
+on:
+  pull_request:
+  push:
+    branches:
+      - master
+
+jobs:
+  spring-cloud-ingress-controller:","[{'comment': 'ingress-controller-spring-cloud', 'commenter': 'JooKS-me'}]"
5139,.github/workflows/integrated-test-k8s-ingress.yml,,"[{'comment': 'change job name from `ingress-controller` to `ingress-controller-http`', 'commenter': 'JooKS-me'}, {'comment': 'ok, do you need to change the original ingress-controller (e.g. shenyu-integrated-test-k8s-ingress) to an ingress-controller-http form?', 'commenter': 'runqi-zhao'}]"
5144,shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java,"@@ -1549,7 +1549,12 @@ public static class WebsocketConfig {
          * max frame pay load size mb.
          */
         private Integer maxFramePayloadSize = 10;
-    
+
+        /**
+         * whether enable ping.
+         */
+        private Boolean enablePing = false;","[{'comment': 'may `enableProxyPing` adapt the scene?', 'commenter': 'moremind'}, {'comment': 'ok, will do thank you.', 'commenter': 'wenlongbrother'}]"
5153,shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/config/ShenyuDiscoveryConfig.java,"@@ -0,0 +1,105 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.register.common.config;
+
+import java.util.Properties;
+
+/**
+ * The type Discovery config.
+ */
+public class ShenyuDiscoveryConfig extends PropertiesConfig {
+    private String name;
+
+    private String type;
+
+    private String serverList;
+
+    private Properties props = new Properties();","[{'comment': 'PropertiesConfig has Properties props  no need to add agin', 'commenter': 'ywj1352'}, {'comment': 'Thank you for your suggestion. I will improve it', 'commenter': 'xcsnx'}]"
5153,shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/ClientDiscoveryConfigRefreshedEventListener.java,"@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.client.core.register;
+
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.register.client.http.HttpClientRegisterRepository;
+import org.apache.shenyu.register.common.config.ShenyuDiscoveryConfig;
+import org.apache.shenyu.register.common.dto.DiscoveryConfigRegisterDTO;
+import org.springframework.context.ApplicationListener;
+import org.springframework.context.event.ContextRefreshedEvent;
+
+public final class ClientDiscoveryConfigRefreshedEventListener implements ApplicationListener<ContextRefreshedEvent> {
+
+    private final ShenyuDiscoveryConfig shenyuDiscoveryConfig;
+
+    private final HttpClientRegisterRepository httpClientRegisterRepository;
+
+    public ClientDiscoveryConfigRefreshedEventListener(final ShenyuDiscoveryConfig shenyuDiscoveryConfig, final HttpClientRegisterRepository httpClientRegisterRepository) {
+        this.shenyuDiscoveryConfig = shenyuDiscoveryConfig;
+        this.httpClientRegisterRepository = httpClientRegisterRepository;
+    }
+
+    @Override
+    public void onApplicationEvent(final ContextRefreshedEvent event) {
+        httpClientRegisterRepository.doPersistDiscoveryConfig(buildDiscoveryConfigRegisterDTO(shenyuDiscoveryConfig));
+    }
+
+    protected DiscoveryConfigRegisterDTO buildDiscoveryConfigRegisterDTO(final ShenyuDiscoveryConfig shenyuDiscoveryConfig) {
+        try {
+            return DiscoveryConfigRegisterDTO.builder()
+                    .name(shenyuDiscoveryConfig.getName())
+                    .serverList(shenyuDiscoveryConfig.getServerList())
+                    .props(shenyuDiscoveryConfig.getProps())
+                    .type(shenyuDiscoveryConfig.getType())
+                    .build();
+        } catch (ShenyuException e) {
+            throw new ShenyuException(e.getMessage() + ""please config ${shenyu.discovery} in xml/yml !"");","[{'comment': 'remove e.getMessage, throw the custom message and add log there', 'commenter': 'moremind'}, {'comment': 'why the builder throw exception?', 'commenter': 'moremind'}, {'comment': 'Thank you. This is indeed unreasonable, I will modify it', 'commenter': 'xcsnx'}]"
5158,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/client/ElasticSearchLogCollectClient.java,"@@ -84,10 +86,11 @@ public void initClient0(@NonNull final ElasticSearchLogCollectConfig.ElasticSear
         restClient = builder.build();
         transport = new RestClientTransport(restClient, new JacksonJsonpMapper());
         client = new ElasticsearchClient(transport);
+        indexName = config.getIndexName();","[{'comment': 'judge index name isBlank?', 'commenter': 'moremind'}]"
5170,shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/main/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientInfoRegisterConfiguration.java,"@@ -129,4 +133,23 @@ public ClientRegisterConfig clientRegisterConfig(final ShenyuClientConfig shenyu
                                                      final Environment env) {
         return new ClientRegisterConfigImpl(shenyuClientConfig, RpcTypeEnum.HTTP, applicationContext, env);
     }
+
+    /**
+     * InstanceRegisterListener.
+     *
+     * @param clientRegisterConfig  clientRegisterConfig
+     * @param shenyuDiscoveryConfig shenyuDiscoveryConfig
+     * @return InstanceRegisterListener
+     */
+    @Bean
+    @ConditionalOnBean(ShenyuDiscoveryConfig.class)
+    public InstanceRegisterListener instanceRegisterListener(final ClientRegisterConfig clientRegisterConfig, final ShenyuDiscoveryConfig shenyuDiscoveryConfig) {
+        DiscoveryUpstreamData discoveryUpstreamData = new DiscoveryUpstreamData();
+        discoveryUpstreamData.setUrl(clientRegisterConfig.getHost() + "":"" + clientRegisterConfig.getPort());
+        discoveryUpstreamData.setStatus(0);
+        discoveryUpstreamData.setWeight(Integer.parseInt(shenyuDiscoveryConfig.getWeight()));
+        discoveryUpstreamData.setProtocol(ShenyuClientConstants.HTTP);","[{'comment': ""protocol can come from the user's configuration?"", 'commenter': 'moremind'}, {'comment': 'https?', 'commenter': 'moremind'}, {'comment': 'done', 'commenter': 'ywj1352'}]"
5185,shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/handler/DivideUpstreamDataHandler.java,"@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.divide.handler;
+
+import org.apache.shenyu.common.dto.DiscoverySyncData;
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
+import org.apache.shenyu.loadbalancer.entity.Upstream;
+import org.apache.shenyu.plugin.base.cache.MetaDataCache;
+import org.apache.shenyu.plugin.base.handler.DiscoveryUpstreamDataHandler;
+import org.springframework.util.ObjectUtils;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+/**
+ * upstreamList data change.
+ */
+public class DivideUpstreamDataHandler implements DiscoveryUpstreamDataHandler {
+
+    @Override
+    public void handlerDiscoveryUpstreamData(final DiscoverySyncData discoverySyncData) {
+        if (Objects.isNull(discoverySyncData) || Objects.isNull(discoverySyncData.getSelectorId())) {
+            return;
+        }
+        List<DiscoveryUpstreamData> upstreamList = discoverySyncData.getUpstreamDataList();
+        UpstreamCacheManager.getInstance().submit(discoverySyncData.getSelectorId(), convertUpstreamList(upstreamList));
+        // the update is also need to clean, but there is no way to
+        // distinguish between crate and update, so it is always clean
+        MetaDataCache.getInstance().clean();
+    }
+
+    @Override
+    public String pluginName() {
+        return PluginEnum.DIVIDE.getName();
+    }
+
+    private List<Upstream> convertUpstreamList(final List<DiscoveryUpstreamData> upstreamList) {
+        if (ObjectUtils.isEmpty(upstreamList)) {
+            return Collections.emptyList();
+        }
+        return upstreamList.stream().map(u -> Upstream.builder()
+                .protocol(u.getProtocol())
+                .url(u.getUrl())
+                .weight(u.getWeight())
+                .status(0 == u.getStatus())
+                .timestamp(u.getDateUpdated().getTime())
+                .build()).collect(Collectors.toList());","[{'comment': 'why `0 == u.getStatus`', 'commenter': 'moremind'}]"
5187,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/constant/LoadBalancerConstant.java,"@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.base.constant;
+
+/**
+ * Load balancer constant.
+ */
+public class LoadBalancerConstant {
+
+    /**","[{'comment': 'put shenyu-common/Constants', 'commenter': 'moremind'}]"
5187,shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java,"@@ -86,13 +87,13 @@ public WebSocketPlugin(final WebSocketClient webSocketClient, final WebSocketSer
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
         final List<Upstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId());
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
-        if (CollectionUtils.isEmpty(upstreamList) || Objects.isNull(shenyuContext)) {
-            LOG.error(""websocket upstream configuration error：{}"", rule);
-            return chain.execute(exchange);
-        }
         final WebSocketRuleHandle ruleHandle = buildRuleHandle(rule);
         final String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress();
         Upstream upstream = LoadBalancerFactory.selector(upstreamList, ruleHandle.getLoadBalance(), ip);
+        if (CollectionUtils.isEmpty(upstreamList) || Objects.isNull(shenyuContext)) {
+            LOG.error(""websocket upstream configuration error：{}"", rule);","[{'comment': 'this is error', 'commenter': 'moremind'}]"
5187,shenyu-plugin/shenyu-plugin-base/pom.xml,"@@ -49,5 +49,10 @@
             <artifactId>jackson-module-kotlin</artifactId>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>","[{'comment': 'remove this', 'commenter': 'moremind'}]"
5187,shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/ChainUtils.java,"@@ -0,0 +1,90 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.base.utils;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.loadbalancer.entity.Upstream;
+import org.apache.shenyu.plugin.api.ShenyuPluginChain;
+import org.apache.shenyu.common.utils.LoadBalancerConstant;
+import org.springframework.web.server.ServerWebExchange;","[{'comment': 'put shenyu-loadbalancer?', 'commenter': 'moremind'}]"
5193,shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DefaultDiscoveryProcessor.java,"@@ -176,6 +176,7 @@ public void fetchAll(final String discoveryHandlerId) {
         String discoveryId = discoveryHandlerDO.getDiscoveryId();
         if (discoveryServiceCache.containsKey(discoveryId)) {
             ShenyuDiscoveryService shenyuDiscoveryService = discoveryServiceCache.get(discoveryId);
+            // TODO 如果列表为空？","[{'comment': 'remove this', 'commenter': 'moremind'}, {'comment': 'Thank you for your review, I will modify it immediately.', 'commenter': 'eurecalulu'}]"
5193,shenyu-discovery/shenyu-discovery-api/src/main/java/org/apache/shenyu/discovery/api/ShenyuDiscoveryService.java,"@@ -62,18 +62,18 @@ public interface ShenyuDiscoveryService {
     /**
      * getData by key.
      *
-     * @param key key
+     * @param key keyd","[{'comment': 'key', 'commenter': 'moremind'}]"
5193,shenyu-discovery/shenyu-discovery-etcd/pom.xml,"@@ -0,0 +1,91 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-discovery</artifactId>
+        <version>2.6.1-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>shenyu-discovery-etcd</artifactId>
+    
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-discovery-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-common</artifactId>
+            <version>${project.version}</version>
+            <scope>compile</scope>
+        </dependency>
+<!--        <dependency>-->","[{'comment': 'remove this', 'commenter': 'moremind'}]"
5193,shenyu-discovery/shenyu-discovery-etcd/src/main/java/org/apache/shenyu/discovery/etcd/EtcdDiscoveryService.java,"@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.discovery.etcd;
+
+import io.etcd.jetcd.ByteSequence;
+import io.etcd.jetcd.Client;
+import io.etcd.jetcd.Lease;
+import io.etcd.jetcd.KV;
+import io.etcd.jetcd.Watch;
+import io.etcd.jetcd.kv.GetResponse;
+import io.etcd.jetcd.lease.LeaseKeepAliveResponse;
+import io.etcd.jetcd.options.GetOption;
+import io.etcd.jetcd.options.PutOption;
+import io.etcd.jetcd.options.WatchOption;
+import io.etcd.jetcd.watch.WatchEvent;
+import io.grpc.stub.StreamObserver;
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.discovery.api.ShenyuDiscoveryService;
+import org.apache.shenyu.discovery.api.config.DiscoveryConfig;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+import org.apache.shenyu.discovery.api.listener.DiscoveryDataChangedEvent;
+import org.apache.shenyu.spi.Join;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Properties;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.stream.Collectors;
+
+import static java.nio.charset.StandardCharsets.UTF_8;
+
+@Join
+public class EtcdDiscoveryService implements ShenyuDiscoveryService {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(EtcdDiscoveryService.class);
+
+    private Client etcdClient;
+
+    private final ConcurrentMap<String, Watch.Watcher> watchCache = new ConcurrentHashMap<>();
+
+    private long leaseId;
+
+    private long ttl;
+
+    private long timeout;
+
+    @Override
+    public void init(final DiscoveryConfig config) {
+        Properties props = config.getProps();
+        this.timeout = Long.parseLong(props.getProperty(""etcdTimeout"", ""3000""));
+        this.ttl = Long.parseLong(props.getProperty(""etcdTTL"", ""5""));
+        if (this.etcdClient == null) {","[{'comment': 'use Objects.isNull', 'commenter': 'moremind'}]"
5193,shenyu-discovery/shenyu-discovery-eureka/pom.xml,"@@ -0,0 +1,55 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-discovery</artifactId>
+        <version>2.6.1-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>shenyu-discovery-eureka</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-discovery-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-common</artifactId>
+            <version>${project.version}</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>com.netflix.eureka</groupId>
+            <artifactId>eureka-client</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.alibaba.fastjson2</groupId>
+            <artifactId>fastjson2</artifactId>
+            <version>2.0.14</version>","[{'comment': 'not use fastjson', 'commenter': 'moremind'}]"
5193,shenyu-discovery/shenyu-discovery-eureka/src/main/java/org/apache/shenyu/discovery/eureka/EurekaDiscoveryService.java,"@@ -0,0 +1,252 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.discovery.eureka;
+
+import com.alibaba.fastjson2.JSONObject;
+import com.netflix.appinfo.ApplicationInfoManager;
+import com.netflix.appinfo.MyDataCenterInstanceConfig;
+import com.netflix.appinfo.InstanceInfo;
+import com.netflix.appinfo.DataCenterInfo;
+import com.netflix.appinfo.MyDataCenterInfo;
+import com.netflix.appinfo.EurekaInstanceConfig;
+import com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider;
+import com.netflix.config.ConfigurationManager;
+import com.netflix.discovery.EurekaClient;
+import com.netflix.discovery.EurekaClientConfig;
+import com.netflix.discovery.DiscoveryClient;
+import com.netflix.discovery.DefaultEurekaClientConfig;
+import com.netflix.discovery.shared.transport.EurekaHttpClient;
+import com.netflix.discovery.shared.transport.jersey.JerseyApplicationClient;
+import com.sun.jersey.client.apache4.ApacheHttpClient4;
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.discovery.api.listener.DiscoveryDataChangedEvent;
+import org.apache.shenyu.spi.Join;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.apache.shenyu.discovery.api.ShenyuDiscoveryService;
+import org.apache.shenyu.discovery.api.config.DiscoveryConfig;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
+
+@Join
+public class EurekaDiscoveryService implements ShenyuDiscoveryService {
+    private static final Logger LOGGER = LoggerFactory.getLogger(EurekaDiscoveryService.class);
+
+    private ApplicationInfoManager applicationInfoManager;
+
+    private EurekaClient eurekaClient;
+
+    private EurekaHttpClient eurekaHttpClient;
+
+    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(10);
+
+    private final ConcurrentMap<String, ScheduledFuture<?>> listenerThreadsMap = new ConcurrentHashMap<>();
+
+    private final ConcurrentMap<String, List<InstanceInfo>> instanceListMap = new ConcurrentHashMap<>();
+
+    @Override
+    public void init(final DiscoveryConfig config) {
+        try {
+            if (eurekaClient == null) {
+                ConfigurationManager.loadProperties(getEurekaProperties(config));
+                applicationInfoManager = initializeApplicationInfoManager(new MyDataCenterInstanceConfig());
+                eurekaClient = initializeEurekaClient(applicationInfoManager, new DefaultEurekaClientConfig());
+                eurekaHttpClient = new JerseyApplicationClient(new ApacheHttpClient4(), config.getServerList(), null);
+            }
+        } catch (Exception e) {
+            clean();
+            throw new ShenyuException(e);
+        }
+    }
+
+    @Override
+    public void watch(final String key, final DataChangedEventListener listener) {
+        if (!listenerThreadsMap.containsKey(key)) {
+            List<InstanceInfo> initialInstances = eurekaClient.getInstancesByVipAddressAndAppName(null, key, true);
+            instanceListMap.put(key, initialInstances);
+            ScheduledFuture<?> scheduledFuture = executorService.scheduleAtFixedRate(() -> {
+                try {
+                    List<InstanceInfo> previousInstances = instanceListMap.get(key);
+                    List<InstanceInfo> currentInstances = eurekaClient.getInstancesByVipAddressAndAppName(null, key, true);
+                    compareInstances(previousInstances, currentInstances, listener);
+                    instanceListMap.put(key, currentInstances);
+                } catch (Exception e) {
+                    throw new ShenyuException(e);","[{'comment': 'add Log.error(""watch discovery data error="", e)', 'commenter': 'moremind'}]"
5193,shenyu-discovery/shenyu-discovery-eureka/src/main/java/org/apache/shenyu/discovery/eureka/EurekaDiscoveryService.java,"@@ -0,0 +1,252 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.discovery.eureka;
+
+import com.alibaba.fastjson2.JSONObject;
+import com.netflix.appinfo.ApplicationInfoManager;
+import com.netflix.appinfo.MyDataCenterInstanceConfig;
+import com.netflix.appinfo.InstanceInfo;
+import com.netflix.appinfo.DataCenterInfo;
+import com.netflix.appinfo.MyDataCenterInfo;
+import com.netflix.appinfo.EurekaInstanceConfig;
+import com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider;
+import com.netflix.config.ConfigurationManager;
+import com.netflix.discovery.EurekaClient;
+import com.netflix.discovery.EurekaClientConfig;
+import com.netflix.discovery.DiscoveryClient;
+import com.netflix.discovery.DefaultEurekaClientConfig;
+import com.netflix.discovery.shared.transport.EurekaHttpClient;
+import com.netflix.discovery.shared.transport.jersey.JerseyApplicationClient;
+import com.sun.jersey.client.apache4.ApacheHttpClient4;
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.discovery.api.listener.DiscoveryDataChangedEvent;
+import org.apache.shenyu.spi.Join;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.apache.shenyu.discovery.api.ShenyuDiscoveryService;
+import org.apache.shenyu.discovery.api.config.DiscoveryConfig;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
+
+@Join
+public class EurekaDiscoveryService implements ShenyuDiscoveryService {
+    private static final Logger LOGGER = LoggerFactory.getLogger(EurekaDiscoveryService.class);
+
+    private ApplicationInfoManager applicationInfoManager;
+
+    private EurekaClient eurekaClient;
+
+    private EurekaHttpClient eurekaHttpClient;
+
+    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(10);
+
+    private final ConcurrentMap<String, ScheduledFuture<?>> listenerThreadsMap = new ConcurrentHashMap<>();
+
+    private final ConcurrentMap<String, List<InstanceInfo>> instanceListMap = new ConcurrentHashMap<>();
+
+    @Override
+    public void init(final DiscoveryConfig config) {
+        try {
+            if (eurekaClient == null) {
+                ConfigurationManager.loadProperties(getEurekaProperties(config));
+                applicationInfoManager = initializeApplicationInfoManager(new MyDataCenterInstanceConfig());
+                eurekaClient = initializeEurekaClient(applicationInfoManager, new DefaultEurekaClientConfig());
+                eurekaHttpClient = new JerseyApplicationClient(new ApacheHttpClient4(), config.getServerList(), null);
+            }
+        } catch (Exception e) {
+            clean();
+            throw new ShenyuException(e);
+        }
+    }
+
+    @Override
+    public void watch(final String key, final DataChangedEventListener listener) {
+        if (!listenerThreadsMap.containsKey(key)) {
+            List<InstanceInfo> initialInstances = eurekaClient.getInstancesByVipAddressAndAppName(null, key, true);
+            instanceListMap.put(key, initialInstances);
+            ScheduledFuture<?> scheduledFuture = executorService.scheduleAtFixedRate(() -> {
+                try {
+                    List<InstanceInfo> previousInstances = instanceListMap.get(key);
+                    List<InstanceInfo> currentInstances = eurekaClient.getInstancesByVipAddressAndAppName(null, key, true);
+                    compareInstances(previousInstances, currentInstances, listener);
+                    instanceListMap.put(key, currentInstances);
+                } catch (Exception e) {
+                    throw new ShenyuException(e);
+                }
+            }, 0, 1, TimeUnit.SECONDS);
+            listenerThreadsMap.put(key, scheduledFuture);
+        }
+    }
+
+    @Override
+    public void unwatch(final String key) {
+        try {
+            ScheduledFuture<?> scheduledFuture = listenerThreadsMap.get(key);
+            if (scheduledFuture != null) {","[{'comment': 'Objects.isNull', 'commenter': 'moremind'}]"
5193,shenyu-discovery/shenyu-discovery-nacos/pom.xml,"@@ -0,0 +1,54 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <groupId>org.apache.shenyu</groupId>
+        <artifactId>shenyu-discovery</artifactId>
+        <version>2.6.1-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>shenyu-discovery-nacos</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-discovery-api</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.shenyu</groupId>
+            <artifactId>shenyu-common</artifactId>
+            <version>${project.version}</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>com.alibaba.fastjson2</groupId>
+            <artifactId>fastjson2</artifactId>
+            <version>2.0.14</version>","[{'comment': 'remove this', 'commenter': 'moremind'}]"
5193,shenyu-discovery/shenyu-discovery-eureka/src/main/java/org/apache/shenyu/discovery/eureka/EurekaDiscoveryService.java,"@@ -0,0 +1,252 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.discovery.eureka;
+
+import com.alibaba.fastjson2.JSONObject;
+import com.netflix.appinfo.ApplicationInfoManager;
+import com.netflix.appinfo.MyDataCenterInstanceConfig;
+import com.netflix.appinfo.InstanceInfo;
+import com.netflix.appinfo.DataCenterInfo;
+import com.netflix.appinfo.MyDataCenterInfo;
+import com.netflix.appinfo.EurekaInstanceConfig;
+import com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider;
+import com.netflix.config.ConfigurationManager;
+import com.netflix.discovery.EurekaClient;
+import com.netflix.discovery.EurekaClientConfig;
+import com.netflix.discovery.DiscoveryClient;
+import com.netflix.discovery.DefaultEurekaClientConfig;
+import com.netflix.discovery.shared.transport.EurekaHttpClient;
+import com.netflix.discovery.shared.transport.jersey.JerseyApplicationClient;
+import com.sun.jersey.client.apache4.ApacheHttpClient4;
+import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.discovery.api.listener.DiscoveryDataChangedEvent;
+import org.apache.shenyu.spi.Join;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.apache.shenyu.discovery.api.ShenyuDiscoveryService;
+import org.apache.shenyu.discovery.api.config.DiscoveryConfig;
+import org.apache.shenyu.discovery.api.listener.DataChangedEventListener;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
+
+@Join
+public class EurekaDiscoveryService implements ShenyuDiscoveryService {
+    private static final Logger LOGGER = LoggerFactory.getLogger(EurekaDiscoveryService.class);
+
+    private ApplicationInfoManager applicationInfoManager;
+
+    private EurekaClient eurekaClient;
+
+    private EurekaHttpClient eurekaHttpClient;
+
+    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(10);","[{'comment': 'not use Executors create thread pool', 'commenter': 'moremind'}]"
5193,pom.xml,"@@ -197,12 +197,6 @@
                 <scope>import</scope>
             </dependency>
 
-            <dependency>
-                <groupId>com.alibaba.nacos</groupId>","[{'comment': 'why remove this? this is dependency management', 'commenter': 'moremind'}]"
5243,shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCache.java,"@@ -230,11 +230,15 @@ private ReferenceConfig<GenericService> buildReference(final MetaData metaData,
             Optional.ofNullable(dubboParam.getSent()).ifPresent(reference::setSent);
         }
         if (StringUtils.isNotBlank(namespace)) {
-            if (!registryConfig.getAddress().contains(Constants.NAMESPACE)) {
-                reference.setRegistry(new RegistryConfig(registryConfig.getAddress() + ""?"" + Constants.NAMESPACE + ""="" + namespace));
+            RegistryConfig registryConfig = new RegistryConfig();
+            registryConfig.setRegister(false);
+            if (!this.registryConfig.getAddress().contains(Constants.NAMESPACE)) {
+                registryConfig.setAddress(this.registryConfig.getAddress() + ""?"" + Constants.NAMESPACE + ""="" + namespace);","[{'comment': 'why modify this?', 'commenter': 'moremind'}, {'comment': 'see ISSUE https://github.com/apache/shenyu/issues/5242', 'commenter': 'yudayday'}, {'comment': 'why setRegister in configuration of dubbo application cache?', 'commenter': 'moremind'}, {'comment': '`org.apache.shenyu.plugin.apache.dubbo.cache.ApacheDubboConfigCache#init`', 'commenter': 'moremind'}, {'comment': '是的，在这个ApacheDubboConfigCache#init方法内，register是设置成false了，但是在ApacheDubboConfigCache#buildReference中，在namespace不为blank的情况下，没有设置成false\r\n![image](https://github.com/apache/shenyu/assets/133850079/281ad5f8-9ded-41db-99b3-782910214135)\r\n', 'commenter': 'yudayday'}]"
5258,shenyu-plugin/shenyu-plugin-security/shenyu-plugin-basic-auth/src/main/java/org/apache/shenyu/plugin/basic/auth/BasicAuthPlugin.java,"@@ -0,0 +1,72 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.basic.auth;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.plugin.api.ShenyuPluginChain;
+import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
+import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
+import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
+import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
+import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
+import org.apache.shenyu.plugin.basic.auth.handle.BasicAuthPluginDataHandler;
+import org.apache.shenyu.plugin.basic.auth.rule.BasicAuthRuleHandle;
+import org.apache.shenyu.plugin.basic.auth.strategy.BasicAuthAuthenticationStrategy;
+import org.springframework.http.HttpHeaders;
+import org.springframework.web.server.ServerWebExchange;
+import reactor.core.publisher.Mono;
+
+/**
+ * basic-auth Plugin.
+ */
+public class BasicAuthPlugin extends AbstractShenyuPlugin {
+
+    /**
+     * this is Template Method child has Implement your own logic.
+     *
+     * @param exchange exchange the current server exchange {@linkplain ServerWebExchange}
+     * @param chain    chain the current chain  {@linkplain ServerWebExchange}
+     * @param selector selector    {@linkplain SelectorData}
+     * @param rule     rule    {@linkplain RuleData}
+     * @return {@code Mono<Void>} to indicate when request handling is complete
+     */
+    @Override
+    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
+        String authorization = StringUtils.defaultString(exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION), exchange.getRequest().getURI().getUserInfo());
+        BasicAuthRuleHandle basicAuthRuleHandle = BasicAuthPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        BasicAuthAuthenticationStrategy authenticationStrategy = basicAuthRuleHandle == null ? null : basicAuthRuleHandle.getBasicAuthAuthenticationStrategy();","[{'comment': 'use Optional.ofNullable()', 'commenter': 'moremind'}]"
5258,shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java,"@@ -265,7 +265,12 @@ public enum PluginEnum {
     /**
      * Key-auth plugin enum.
      */
-    KEY_AUTH(430, 0, ""keyAuth"");
+    KEY_AUTH(430, 0, ""keyAuth""),
+    
+    /**
+     * Basic-auth plugin enum.
+     */
+    BASIC_AUTH(440, 0, ""basicAuth"");","[{'comment': 'may the order be too low?', 'commenter': 'moremind'}]"
5269,shenyu-registry/shenyu-registry-eureka/src/main/java/org/apache/shenyu/registry/eureka/EurekaInstanceRegisterRepository.java,"@@ -50,36 +50,120 @@ public class EurekaInstanceRegisterRepository implements ShenyuInstanceRegisterR
 
     private EurekaClient eurekaClient;
 
-    private EurekaHttpClient eurekaHttpClient;
+    private DefaultEurekaClientConfig eurekaClientConfig;
+
+    private EurekaInstanceConfig eurekaInstanceConfig;
+
+    @Inject(optional = true)
+    private VipAddressResolver vipAddressResolver;
 
     @Override
     public void init(final RegisterConfig config) {
-        ConfigurationManager.getConfigInstance().setProperty(""eureka.client.service-url.defaultZone"", config.getServerLists());
-        ConfigurationManager.getConfigInstance().setProperty(""eureka.serviceUrl.default"", config.getServerLists());
-        ApplicationInfoManager applicationInfoManager = initializeApplicationInfoManager(new MyDataCenterInstanceConfig());
-        eurekaClient = new DiscoveryClient(applicationInfoManager, new DefaultEurekaClientConfig());
-        eurekaHttpClient = new JerseyApplicationClient(new ApacheHttpClient4(), config.getServerLists(), null);
-    }
-
-    private ApplicationInfoManager initializeApplicationInfoManager(final EurekaInstanceConfig instanceConfig) {
-        InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();
-        return new ApplicationInfoManager(instanceConfig, instanceInfo);
+        eurekaInstanceConfig = new MyDataCenterInstanceConfig();
+        eurekaClientConfig = new DefaultEurekaClientConfig() {
+            @Override
+            public List<String> getEurekaServerServiceUrls(final String zone) {
+                return Arrays.asList(config.getServerLists().split("",""));
+            }
+        };
     }
 
     @Override
     public void persistInstance(final InstanceEntity instance) {
-        EurekaHttpResponse<Void> register = eurekaHttpClient.register(generateInstanceInfo(instance));
-        LOGGER.info(""eureka client register success: {}"", register.getEntity());
-    }
-
-    private InstanceInfo generateInstanceInfo(final InstanceEntity instance) {
-        return InstanceInfo.Builder.newBuilder()
-                .setAppName(instance.getAppName())
-                .setIPAddr(IpUtils.getHost())
+        InstanceInfo.Builder instanceInfoBuilder = instanceInfoBuilder();
+        instanceInfoBuilder.setAppName(instance.getAppName())
+                .setIPAddr(instance.getHost())
                 .setHostName(instance.getHost())
                 .setPort(instance.getPort())
-                .setDataCenterInfo(new MyDataCenterInfo(DataCenterInfo.Name.MyOwn))
-                .build();
+                .setStatus(InstanceInfo.InstanceStatus.UP);
+        InstanceInfo instanceInfo = instanceInfoBuilder.build();
+        LeaseInfo.Builder leaseInfoBuilder = LeaseInfo.Builder.newBuilder()
+                .setRenewalIntervalInSecs(eurekaInstanceConfig.getLeaseRenewalIntervalInSeconds())
+                .setDurationInSecs(eurekaInstanceConfig.getLeaseExpirationDurationInSeconds());
+        instanceInfo.setLeaseInfo(leaseInfoBuilder.build());
+        ApplicationInfoManager applicationInfoManager = new ApplicationInfoManager(eurekaInstanceConfig, instanceInfo);
+        eurekaClient = new DiscoveryClient(applicationInfoManager, eurekaClientConfig);
+    }
+
+    /**
+     * Gets the instance information from the config instance and returns it after setting the appropriate status.
+     * ref: com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider#get
+     *
+     * @return InstanceInfo instance to be registered with eureka server
+     */
+    public InstanceInfo.Builder instanceInfoBuilder() {
+        // Build the lease information to be passed to the server based on config
+        if (vipAddressResolver == null) {
+            vipAddressResolver = new Archaius1VipAddressResolver();
+        }
+
+        // Builder the instance information to be registered with eureka server
+        final InstanceInfo.Builder builder = InstanceInfo.Builder.newBuilder(vipAddressResolver);
+
+        // set the appropriate id for the InstanceInfo, falling back to datacenter Id if applicable, else hostname
+        String instanceId = eurekaInstanceConfig.getInstanceId();
+        if (instanceId == null || instanceId.isEmpty()) {","[{'comment': 'use StringUtils.isEmpty', 'commenter': 'moremind'}, {'comment': 'It`s done, thank you for review. :)', 'commenter': 'ShawnJim'}]"
5269,shenyu-registry/shenyu-registry-eureka/src/main/java/org/apache/shenyu/registry/eureka/EurekaInstanceRegisterRepository.java,"@@ -50,36 +50,120 @@ public class EurekaInstanceRegisterRepository implements ShenyuInstanceRegisterR
 
     private EurekaClient eurekaClient;
 
-    private EurekaHttpClient eurekaHttpClient;
+    private DefaultEurekaClientConfig eurekaClientConfig;
+
+    private EurekaInstanceConfig eurekaInstanceConfig;
+
+    @Inject(optional = true)
+    private VipAddressResolver vipAddressResolver;
 
     @Override
     public void init(final RegisterConfig config) {
-        ConfigurationManager.getConfigInstance().setProperty(""eureka.client.service-url.defaultZone"", config.getServerLists());
-        ConfigurationManager.getConfigInstance().setProperty(""eureka.serviceUrl.default"", config.getServerLists());
-        ApplicationInfoManager applicationInfoManager = initializeApplicationInfoManager(new MyDataCenterInstanceConfig());
-        eurekaClient = new DiscoveryClient(applicationInfoManager, new DefaultEurekaClientConfig());
-        eurekaHttpClient = new JerseyApplicationClient(new ApacheHttpClient4(), config.getServerLists(), null);
-    }
-
-    private ApplicationInfoManager initializeApplicationInfoManager(final EurekaInstanceConfig instanceConfig) {
-        InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();
-        return new ApplicationInfoManager(instanceConfig, instanceInfo);
+        eurekaInstanceConfig = new MyDataCenterInstanceConfig();
+        eurekaClientConfig = new DefaultEurekaClientConfig() {
+            @Override
+            public List<String> getEurekaServerServiceUrls(final String zone) {
+                return Arrays.asList(config.getServerLists().split("",""));
+            }
+        };
     }
 
     @Override
     public void persistInstance(final InstanceEntity instance) {
-        EurekaHttpResponse<Void> register = eurekaHttpClient.register(generateInstanceInfo(instance));
-        LOGGER.info(""eureka client register success: {}"", register.getEntity());
-    }
-
-    private InstanceInfo generateInstanceInfo(final InstanceEntity instance) {
-        return InstanceInfo.Builder.newBuilder()
-                .setAppName(instance.getAppName())
-                .setIPAddr(IpUtils.getHost())
+        InstanceInfo.Builder instanceInfoBuilder = instanceInfoBuilder();
+        instanceInfoBuilder.setAppName(instance.getAppName())
+                .setIPAddr(instance.getHost())
                 .setHostName(instance.getHost())
                 .setPort(instance.getPort())
-                .setDataCenterInfo(new MyDataCenterInfo(DataCenterInfo.Name.MyOwn))
-                .build();
+                .setStatus(InstanceInfo.InstanceStatus.UP);
+        InstanceInfo instanceInfo = instanceInfoBuilder.build();
+        LeaseInfo.Builder leaseInfoBuilder = LeaseInfo.Builder.newBuilder()
+                .setRenewalIntervalInSecs(eurekaInstanceConfig.getLeaseRenewalIntervalInSeconds())
+                .setDurationInSecs(eurekaInstanceConfig.getLeaseExpirationDurationInSeconds());
+        instanceInfo.setLeaseInfo(leaseInfoBuilder.build());
+        ApplicationInfoManager applicationInfoManager = new ApplicationInfoManager(eurekaInstanceConfig, instanceInfo);
+        eurekaClient = new DiscoveryClient(applicationInfoManager, eurekaClientConfig);
+    }
+
+    /**
+     * Gets the instance information from the config instance and returns it after setting the appropriate status.
+     * ref: com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider#get
+     *
+     * @return InstanceInfo instance to be registered with eureka server
+     */
+    public InstanceInfo.Builder instanceInfoBuilder() {
+        // Build the lease information to be passed to the server based on config
+        if (vipAddressResolver == null) {
+            vipAddressResolver = new Archaius1VipAddressResolver();
+        }
+
+        // Builder the instance information to be registered with eureka server
+        final InstanceInfo.Builder builder = InstanceInfo.Builder.newBuilder(vipAddressResolver);
+
+        // set the appropriate id for the InstanceInfo, falling back to datacenter Id if applicable, else hostname
+        String instanceId = eurekaInstanceConfig.getInstanceId();
+        if (instanceId == null || instanceId.isEmpty()) {
+            DataCenterInfo dataCenterInfo = eurekaInstanceConfig.getDataCenterInfo();
+            if (dataCenterInfo instanceof UniqueIdentifier) {
+                instanceId = ((UniqueIdentifier) dataCenterInfo).getId();
+            } else {
+                instanceId = eurekaInstanceConfig.getHostName(false);
+            }
+        }
+
+        String defaultAddress;
+        if (eurekaInstanceConfig instanceof RefreshableInstanceConfig) {
+            // Refresh AWS data center info, and return up to date address
+            defaultAddress = ((RefreshableInstanceConfig) eurekaInstanceConfig).resolveDefaultAddress(false);
+        } else {
+            defaultAddress = eurekaInstanceConfig.getHostName(false);
+        }
+
+        // fail safe
+        if (defaultAddress == null || defaultAddress.isEmpty()) {","[{'comment': 'same', 'commenter': 'moremind'}, {'comment': 'done.', 'commenter': 'ShawnJim'}]"
5283,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rabbitmq/src/main/java/org/apache/shenyu/plugin/logging/rabbitmq/client/RabbitmqLogCollectClient.java,"@@ -0,0 +1,137 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.logging.rabbitmq.client;
+
+import com.rabbitmq.client.Channel;
+import com.rabbitmq.client.Connection;
+import com.rabbitmq.client.ConnectionFactory;
+import com.rabbitmq.client.MessageProperties;
+import net.jpountz.lz4.LZ4Compressor;
+import net.jpountz.lz4.LZ4Factory;
+import org.apache.shenyu.common.utils.JsonUtils;
+import org.apache.shenyu.plugin.logging.common.client.AbstractLogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.entity.LZ4CompressData;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.rabbitmq.config.RabbitmqLogCollectConfig;
+import org.springframework.lang.NonNull;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.concurrent.TimeoutException;
+
+/**
+ * queue-based logging collector.
+ */
+public class RabbitmqLogCollectClient extends AbstractLogConsumeClient<RabbitmqLogCollectConfig.RabbitmqLogConfig, ShenyuRequestLog> {
+
+    private String exchangeName;
+
+    private Connection connection;
+
+    private Channel channel;
+
+    private String routingKey;
+
+    @Override
+    public void initClient0(@NonNull final RabbitmqLogCollectConfig.RabbitmqLogConfig config) {
+        if (config.getHost() == null
+                || config.getPort() == null","[{'comment': 'use Objects.isNull or Object.nonNull', 'commenter': 'moremind'}, {'comment': ""Of course, i'll fix them"", 'commenter': 'YxYL6125'}]"
5283,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rabbitmq/src/main/java/org/apache/shenyu/plugin/logging/rabbitmq/client/RabbitmqLogCollectClient.java,"@@ -0,0 +1,137 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.logging.rabbitmq.client;
+
+import com.rabbitmq.client.Channel;
+import com.rabbitmq.client.Connection;
+import com.rabbitmq.client.ConnectionFactory;
+import com.rabbitmq.client.MessageProperties;
+import net.jpountz.lz4.LZ4Compressor;
+import net.jpountz.lz4.LZ4Factory;
+import org.apache.shenyu.common.utils.JsonUtils;
+import org.apache.shenyu.plugin.logging.common.client.AbstractLogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.entity.LZ4CompressData;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.rabbitmq.config.RabbitmqLogCollectConfig;
+import org.springframework.lang.NonNull;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.concurrent.TimeoutException;
+
+/**
+ * queue-based logging collector.
+ */
+public class RabbitmqLogCollectClient extends AbstractLogConsumeClient<RabbitmqLogCollectConfig.RabbitmqLogConfig, ShenyuRequestLog> {
+
+    private String exchangeName;
+
+    private Connection connection;
+
+    private Channel channel;
+
+    private String routingKey;
+
+    @Override
+    public void initClient0(@NonNull final RabbitmqLogCollectConfig.RabbitmqLogConfig config) {
+        if (config.getHost() == null
+                || config.getPort() == null
+                || config.getExchangeName() == null
+                || config.getQueueName() == null
+                || config.getExchangeType() == null) {
+            LOG.error(""rabbitmq prop is empty. failed init rabbit producer"");
+            return;
+        }
+
+        String queueName = config.getQueueName();
+        exchangeName = config.getExchangeName();
+        routingKey = config.getRoutingKey();
+
+        ConnectionFactory factory = new ConnectionFactory();
+
+        factory.setVirtualHost(config.getVirtualHost());
+        factory.setHost(config.getHost());
+        factory.setPort(config.getPort());
+        factory.setUsername(config.getUsername());
+        factory.setPassword(config.getPassword());
+
+        try {
+            connection = factory.newConnection();
+            channel = connection.createChannel();
+            channel.exchangeDeclare(exchangeName, config.getExchangeType(), true);
+            channel.queueDeclare(queueName, true, false, false, null);","[{'comment': 'why true false false null?', 'commenter': 'moremind'}]"
5283,db/init/mysql/schema.sql,"@@ -776,6 +776,17 @@ INSERT INTO `permission` VALUES ('1697145808239693824','1346358560427216896','16
 INSERT INTO `permission` VALUES ('1697146375754190848','1346358560427216896','1697146375729025024', '2023-08-31 15:16:42', '2023-08-31 07:16:42');
 INSERT INTO `permission` VALUES ('1697146617543233536','1346358560427216896','1697146617513873408', '2023-08-31 15:17:39', '2023-08-31 07:17:39');
 INSERT INTO `permission` VALUES ('1697146860569595904','1346358560427216896','1697146860540235776', '2023-08-31 15:18:37', '2023-08-31 07:18:37');
+","[{'comment': 'the sql can generate by resource button', 'commenter': 'moremind'}]"
5283,db/init/mysql/schema.sql,"@@ -1632,6 +1660,18 @@ INSERT INTO `resource` VALUES ('1697146375729025024', '1697141926247763968', 'SH
 INSERT INTO `resource` VALUES ('1697145808210333696', '1697141926247763968', 'SHENYU.BUTTON.SYSTEM.ADD', '', '', '', 2, 0, 'plus', 1, 0, 'system:alert:add', 1, '2023-08-31 15:14:26', '2023-08-31 07:14:26');
 INSERT INTO `resource` VALUES ('1697146617513873408', '1697141926247763968', 'SHENYU.BUTTON.SYSTEM.DELETE', '', '', '', 2, 0, 'delete', 1, 0, 'system:alert:delete', 1, '2023-08-31 15:17:39', '2023-08-31 07:22:07');
 INSERT INTO `resource` VALUES ('1697146860540235776', '1697141926247763968', 'SHENYU.BUTTON.SYSTEM.EDIT', '', '', '', 2, 0, 'edit', 1, 0, 'system:alert:edit', 1, '2023-08-31 15:18:37', '2023-08-31 07:18:37');
+
+INSERT INTO `resource` VALUES ('1721434727758827520', '1346775491550474240', 'loggingRabbitMQ', 'loggingRabbitMQ', '/plug/loggingRabbitMQ', 'loggingRabbitMQ', 1, 0, 'block', 0, 0, '', 1, '2023-11-06 15:49:56.465', '2023-11-06 15:49:56.466');
+INSERT INTO `resource` VALUES ('1721434727809159168', '1721434727758827520', 'SHENYU.BUTTON.PLUGIN.SELECTOR.ADD', '', '', '', 2, 0, '', 1, 0, 'plugin:loggingRabbitMQSelector:add', 1, '2023-11-06 15:49:56.480', '2023-11-06 15:49:56.480');
+INSERT INTO `resource` VALUES ('1721434727809159169', '1721434727758827520', 'SHENYU.BUTTON.PLUGIN.SELECTOR.DELETE', '', '', '', 2, 0, '', 1, 0, 'plugin:loggingRabbitMQSelector:delete', 1, '2023-11-06 15:49:56.480', '2023-11-06 15:49:56.480');
+INSERT INTO `resource` VALUES ('1721434727809159170', '1721434727758827520', 'SHENYU.BUTTON.PLUGIN.SELECTOR.EDIT', '', '', '', 2, 0, '', 1, 0, 'plugin:loggingRabbitMQSelector:edit', 1, '2023-11-06 15:49:56.480', '2023-11-06 15:49:56.480');
+INSERT INTO `resource` VALUES ('1721434727809159171', '1721434727758827520', 'SHENYU.BUTTON.PLUGIN.SELECTOR.QUERY', '', '', '', 2, 0, '', 1, 0, 'plugin:loggingRabbitMQSelector:query', 1, '2023-11-06 15:49:56.480', '2023-11-06 15:49:56.480');","[{'comment': 'same', 'commenter': 'moremind'}]"
5283,db/init/pg/create-table.sql,"@@ -1797,6 +1823,17 @@ INSERT INTO ""public"".""resource"" VALUES ('1697146375729025024', '1697141926247763
 INSERT INTO ""public"".""resource"" VALUES ('1697145808210333696','1697141926247763968','SHENYU.BUTTON.SYSTEM.ADD','','','',2,0,'plus',1,0,'system:alert:add',1,'2023-08-31 15:14:26','2023-08-31 07:14:26');
 INSERT INTO ""public"".""resource"" VALUES ('1697146617513873408','1697141926247763968','SHENYU.BUTTON.SYSTEM.DELETE','','','',2,0,'delete',1,0,'system:alert:delete',1,'2023-08-31 15:17:39','2023-08-31 07:22:07');
 INSERT INTO ""public"".""resource"" VALUES ('1697146860540235776','1697141926247763968','SHENYU.BUTTON.SYSTEM.EDIT','','','',2,0,'edit',1,0,'system:alert:edit',1,'2023-08-31 15:18:37','2023-08-31 07:18:37');
+
+INSERT INTO ""public"".""resource"" VALUES ('1721434727758827520', '1346775491550474240', 'loggingRabbitMQ', 'loggingRabbitMQ', '/plug/loggingRabbitMQ', 'loggingRabbitMQ', 1, 0, 'block', 0, 0, '', 1, '2023-11-06 15:49:56.465', '2023-11-06 15:49:56.466');","[{'comment': 'same', 'commenter': 'moremind'}]"
5283,shenyu-admin/src/main/resources/sql-script/h2/schema.sql,"@@ -550,7 +550,7 @@ INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `config`, `enabled`)
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `enabled`) VALUES ('42','tcp','Proxy', 320, '1');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `config`, `enabled`) VALUES ('43', 'loggingHuaweiLts', 'Logging', 177, '{ ""totalSizeInBytes"":""104857600"",""maxBlockMs"":""0"",""ioThreadCount"":""1"",""batchSizeThresholdInBytes"":""524288"",""batchCountThreshold"":""4096"",""lingerMs"":""2000"",""retries"":""100"",""baseRetryBackoffMs"":""100"",""maxRetryBackoffMs"":""100"",""enableLocalTest"":""true"",""setGiveUpExtraLongSingleLog"":""false""}', '0');
 INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `config`, `enabled`) VALUES ('44', 'basicAuth', 'Authentication', 500, '{""defaultHandleJson"":""{\""authorization\"":\""test:test123\""}""}', '0');
-
+INSERT IGNORE INTO `plugin` (`id`, `name`, `role`, `sort`, `config`, `enabled`) VALUES ('291', 'loggingRabbitMQ', 'Logging', 171, '{""host"":""127.0.0.1"",""port"":5672,""password"":""admin"",""username"":""admin"",""exchangeName"":""exchange.logging.plugin"",""queueName"":""queue.logging.plugin"",""routingKey"":""topic.logging"",""virtualHost"":""/"",""exchangeType"":""direct"",""durable"":""true"",""exclusive"":""false"",""autoDelete"":""false""}', '0');","[{'comment': 'why 291?', 'commenter': 'moremind'}, {'comment': ""The id is 291 because the id is of type varchar, which is just after 29 (loggingRocketMQ) when sorted in the database, but of course it can be added in incremental order.\r\nI'll resolve it."", 'commenter': 'YxYL6125'}, {'comment': 'this can increase manually', 'commenter': 'moremind'}, {'comment': 'and keep the order', 'commenter': 'moremind'}]"
5283,shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rabbitmq/src/main/java/org/apache/shenyu/plugin/logging/rabbitmq/client/RabbitmqLogCollectClient.java,"@@ -0,0 +1,139 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shenyu.plugin.logging.rabbitmq.client;
+
+import com.rabbitmq.client.Channel;
+import com.rabbitmq.client.Connection;
+import com.rabbitmq.client.ConnectionFactory;
+import com.rabbitmq.client.MessageProperties;
+import net.jpountz.lz4.LZ4Compressor;
+import net.jpountz.lz4.LZ4Factory;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.common.utils.JsonUtils;
+import org.apache.shenyu.plugin.logging.common.client.AbstractLogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.entity.LZ4CompressData;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.rabbitmq.config.RabbitmqLogCollectConfig;
+import org.springframework.lang.NonNull;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.TimeoutException;
+
+/**
+ * queue-based logging collector.
+ */
+public class RabbitmqLogCollectClient extends AbstractLogConsumeClient<RabbitmqLogCollectConfig.RabbitmqLogConfig, ShenyuRequestLog> {
+
+    private String exchangeName;
+
+    private Connection connection;
+
+    private Channel channel;
+
+    private String routingKey;
+
+    @Override
+    public void initClient0(@NonNull final RabbitmqLogCollectConfig.RabbitmqLogConfig config) {
+        if (StringUtils.isBlank(config.getHost())
+                || Objects.isNull(config.getPort())
+                || StringUtils.isBlank(config.getExchangeName())
+                || StringUtils.isBlank(config.getQueueName())
+                || StringUtils.isBlank(config.getExchangeType())) {
+            LOG.error(""rabbitmq prop is empty. failed init rabbit producer"");
+            return;
+        }
+
+        String queueName = config.getQueueName();
+        exchangeName = config.getExchangeName();
+        routingKey = config.getRoutingKey();
+
+        ConnectionFactory factory = new ConnectionFactory();
+
+        factory.setVirtualHost(config.getVirtualHost());
+        factory.setHost(config.getHost());
+        factory.setPort(config.getPort());
+        factory.setUsername(config.getUsername());
+        factory.setPassword(config.getPassword());
+
+        try {
+            connection = factory.newConnection();
+            channel = connection.createChannel();
+            channel.exchangeDeclare(exchangeName, config.getExchangeType(), true);
+            channel.queueDeclare(queueName, config.getDurable(), config.getExclusive(), config.getAutoDelete(), config.getArgs());
+            channel.queueBind(queueName, exchangeName, routingKey);
+            LOG.info(""init rabbitmqLogCollectClient success"");
+        } catch (IOException e) {
+            LOG.error(""failed to initialize Rabbitmq connection"", e);
+        } catch (TimeoutException e) {
+            LOG.error(""failed to connect rabbitmq, connect timeout"", e);
+        }
+
+    }
+
+    @Override
+    public void consume0(@NonNull final List<ShenyuRequestLog> logs) {
+        logs.forEach(log -> {
+            try {
+                channel.basicPublish(exchangeName, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, buildLogMessageBytes(log));
+//                LOG.info(""publish log message success:{}"", log);
+            } catch (Exception e) {
+                LOG.error(""rabbitmq push logs error"", e);
+            }
+        });
+    }
+
+    /**
+     * build the log msg bytes.
+     *
+     * @param log log
+     * @return log msg bytes
+     */
+    private byte[] buildLogMessageBytes(final ShenyuRequestLog log) {
+        byte[] bytes = JsonUtils.toJson(log).getBytes(StandardCharsets.UTF_8);
+        LZ4CompressData lz4CompressData = new LZ4CompressData(bytes.length, compressedByte(bytes));
+        bytes = JsonUtils.toJson(lz4CompressData).getBytes();
+        return bytes;
+    }
+
+    private byte[] compressedByte(final byte[] srcByte) {
+        LZ4Factory factory = LZ4Factory.fastestInstance();
+        LZ4Compressor compressor = factory.fastCompressor();
+        return compressor.compress(srcByte);
+    }
+
+    /**
+     * close the connection and channel.
+     */
+    @Override
+    public void close0() throws Exception {
+        try {
+            if (channel != null) {","[{'comment': 'use Objects.nonNull', 'commenter': 'moremind'}, {'comment': 'pls check this', 'commenter': 'moremind'}, {'comment': ""sry, I'll check right now"", 'commenter': 'YxYL6125'}]"
