Pull,Path,Diff_hunk,Comment
297,activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,"@@ -58,39 +49,27 @@
  * https://issues.apache.org/activemq/browse/AMQ-3004
  * http://mail-archives.apache.org/mod_mbox/activemq-users/201011.mbox/%3C8A013711-2613-450A-A487-379E784AF1D6@homeaway.co.uk%3E
  */
-public class SubQueueSelectorCacheBroker extends BrokerFilter implements Runnable {
+public class SubQueueSelectorCacheBroker extends BrokerFilter {
     private static final Logger LOG = LoggerFactory.getLogger(SubQueueSelectorCacheBroker.class);
     public static final String MATCH_EVERYTHING = ""TRUE"";
 
     /**
      * The subscription's selector cache. We cache compiled expressions keyed
      * by the target destination.
      */
-    private ConcurrentMap<String, Set<String>> subSelectorCache = new ConcurrentHashMap<String, Set<String>>();
+    private final SubSelectorCache subSelectorCache;
 
-    private final File persistFile;
     private boolean singleSelectorPerDestination = false;
     private boolean ignoreWildcardSelectors = false;
     private ObjectName objectName;
 
-    private boolean running = true;
-    private final Thread persistThread;
-    private long persistInterval = MAX_PERSIST_INTERVAL;
-    public static final long MAX_PERSIST_INTERVAL = 600000;
-    private static final String SELECTOR_CACHE_PERSIST_THREAD_NAME = ""SelectorCachePersistThread"";
-
     /**
      * Constructor
      */
-    public SubQueueSelectorCacheBroker(Broker next, final File persistFile) {
+    public SubQueueSelectorCacheBroker(Broker next, final SubSelectorCache subSelectorCache) {","[{'comment': 'Instead of changing the default behavior, I would rather create a totally new plugin, extending `SubQueueSelectorCacheBroker`. I think the configuration would be easier and less confusing for the users.', 'commenter': 'jbonofre'}, {'comment': ""+1 on JB suggestion. Improvement is a good idea, but let's not break previous users. \r\n\r\nPerhaps even make the improvement the default (or recommended) in 5.17.0"", 'commenter': 'mattrpav'}, {'comment': ""I can do that if you'd like, but I lean towards this approach for the usual composition-over-inheritance reasons. \r\n\r\nI'm interested in better understanding how this breaks previous users or changes the default behavior? The behavior is the same I believe, just factored out to a separate class.\r\n\r\nIf you're concerned about changing the constructor signature, I could add the original signature back and keep the new one."", 'commenter': 'alechenninger'}, {'comment': '@jbonofre @mattrpav Thoughts appreciated! Again, happy to move forward, just wanted to take the opportunity to understand a little bit more what you meant. Thanks!', 'commenter': 'alechenninger'}, {'comment': 'Yes, the default behavior is the same as you ""provide"" the plugin already (using file persist). My point is more in term of configuration for users. But I guess it\'s acceptable.', 'commenter': 'jbonofre'}]"
297,activemq-broker/src/main/java/org/apache/activemq/plugin/PeriodicallyFlushedFileSubSelectorCache.java,"@@ -0,0 +1,190 @@
+package org.apache.activemq.plugin;","[{'comment': 'Can you please add the ASF header here ? Thanks.', 'commenter': 'jbonofre'}]"
297,activemq-broker/src/main/java/org/apache/activemq/plugin/SubSelectorCache.java,"@@ -0,0 +1,51 @@
+package org.apache.activemq.plugin;","[{'comment': 'Can you please add the ASF header here ?', 'commenter': 'jbonofre'}]"
304,activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,"@@ -2100,7 +2100,7 @@ private PendingList doPageInForDispatch(boolean force, boolean processExpired, i
                                 ConnectionContext connectionContext = createConnectionContext();
                                 dropMessage(ref);
                                 if (gotToTheStore(ref.getMessage())) {
-                                    LOG.debug(""Duplicate message {} from cursor, removing from store"", this, ref.getMessage());
+                                    LOG.debug(""{}, duplicate message {} from cursor, removing from store"", this, ref.getMessage());","[{'comment': ""I think here we could just remove logging 'this' from the log statement"", 'commenter': 'coheigea'}, {'comment': 'Can you please use:\r\n\r\n```\r\nLOG.debug(""Duplicate message {] from cursor, removing from store"", ref.getMessage());\r\n```\r\n\r\n`this` is useless here.', 'commenter': 'jbonofre'}, {'comment': ""Right, the problem was, that `this` was used as first parameter in the log format string that had only one parameter. So the second  parameter `ref.getMessage()` was silently dropped.\r\nAs I didn't know, if `this` was needed for your analysis of the log messages, I added a second parameter placeholder.\r\nI will try to update this PR.\r\n\r\nIt seems, that `this` is used a lot in the log messages in the rest of the code around. You might want to have a look at those occurrences as well. "", 'commenter': 'FSchumacher'}]"
352,activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFileAppender.java,"@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the ""License""); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
+ * <p>","[{'comment': 'This kind of change is useless in the PR: it actually creates confusion, as the change part is actually small (exception handling), whereas the formatting changes creates noise.\r\nCan you please rework the PR ? Else, I will extract the change part.', 'commenter': 'jbonofre'}]"
397,assembly/src/release/examples/stomp/python/stomppy/publisher.py,"@@ -37,7 +35,7 @@
 
 for i in range(0, messages):
   conn.send(data, destination=destination, persistent='false')
-  
+
 conn.send(""SHUTDOWN"", destination=destination, persistent='false')
 
-conn.disconnect()
\ No newline at end of file
+conn.disconnect()","[{'comment': 'I guess this is a mistake and the `disconnect()` has to happen. Can you fix please ?', 'commenter': 'jbonofre'}]"
424,assembly/src/release/bin/activemq,"@@ -109,14 +96,7 @@ if [ -z ""$ACTIVEMQ_BASE"" ] ; then
   ACTIVEMQ_BASE=""$ACTIVEMQ_HOME""
 fi
 
-# Configure user specified classpath here or externally using this variable
-if [ -z ""$ACTIVEMQ_USER_CLASSPATH"" ] ; then
-    ACTIVEMQ_USER_CLASSPATH=""""
-fi
-
-# ActiveMQ Classpath configuration
-ACTIVEMQ_CLASSPATH=""$ACTIVEMQ_BASE/../lib/:$ACTIVEMQ_USER_CLASSPATH""
-
+ACTIVEMQ_CLASSPATH=""$ACTIVEMQ_BASE/../lib/""","[{'comment': ""The user should be able to define its classpath extend, no ? What's the rationale here ?"", 'commenter': 'jbonofre'}, {'comment': ""No, that doesn't seem to be necessary from my point of view."", 'commenter': 'scoopex'}]"
424,assembly/src/release/bin/activemq,"@@ -325,20 +305,16 @@ invokeJar(){
       DOIT_POSTFIX="" - $ACTIVEMQ_USER""
       echo ""INFO: changing to user '$ACTIVEMQ_USER' to invoke java""
    fi
-
    # Execute java binary
    if [ -n ""$TASK_TODO"" ] && [ ""$TASK_TODO"" != ""stop"" ];then
-      if [ -z ""$ACTIVEMQ_OUT"" ]; then
-         ACTIVEMQ_OUT=""/dev/null""
-      fi
       $EXEC_OPTION $DOIT_PREFIX ""\""$JAVACMD\"" $ACTIVEMQ_OPTS $ACTIVEMQ_DEBUG_OPTS \
               -Dactivemq.classpath=\""${ACTIVEMQ_CLASSPATH}\"" \
               -Dactivemq.home=\""${ACTIVEMQ_HOME}\"" \
               -Dactivemq.base=\""${ACTIVEMQ_BASE}\"" \
               -Dactivemq.conf=\""${ACTIVEMQ_CONF}\"" \
               -Dactivemq.data=\""${ACTIVEMQ_DATA}\"" \
               $ACTIVEMQ_CYGWIN \
-              -jar \""${ACTIVEMQ_HOME}/bin/activemq.jar\"" $COMMANDLINE_ARGS >> $ACTIVEMQ_OUT 2>&1 &
+              -jar \""${ACTIVEMQ_HOME}/bin/activemq.jar\"" $COMMANDLINE_ARGS >/dev/null 2>&1 &","[{'comment': 'User can still be able to redirect output to a file as he wants.', 'commenter': 'jbonofre'}]"
424,assembly/src/release/bin/activemq,"@@ -386,8 +362,8 @@ checkRunning(){
         echo ""ERROR: Pidfile '$ACTIVEMQ_PIDFILE' exists but contains no pid""
         return 2
        fi
-       ACTIVEMQ_PID=""`cat ${ACTIVEMQ_PIDFILE}`""
-       RET=""`ps -p ""${ACTIVEMQ_PID}""|grep java`""
+       ACTIVEMQ_PID=""`cat $ACTIVEMQ_PIDFILE`""
+       RET=""`ps -p ""$ACTIVEMQ_PID""|grep java`""","[{'comment': ""It's more portable to keep the genere ${xx} format IMHO."", 'commenter': 'jbonofre'}, {'comment': ""from my point of view this doesn't make a huge difference."", 'commenter': 'scoopex'}]"
446,activemq-broker/src/test/java/org/apache/activemq/JmsTransactionTestSupport.java,"@@ -114,6 +114,7 @@ protected void rollbackTx() throws Exception {
     /**
      */
     protected BrokerService createBroker() throws Exception, URISyntaxException {
+        System.setProperty(""org.apache.activemq.SERIALIZABLE_PACKAGES"", ""java.lang,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper"");","[{'comment': 'Just java.util here fixes the tests in activemq-broker', 'commenter': 'coheigea'}]"
446,activemq-client/src/test/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStreamTest.java,"@@ -35,6 +35,10 @@
 
 public class ClassLoadingAwareObjectInputStreamTest {
 
+    static {
+        System.setProperty(""org.apache.activemq.SERIALIZABLE_PACKAGES"", ""java.lang,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper"");","[{'comment': 'Just java.util here fixes the tests in activemq-client', 'commenter': 'coheigea'}]"
446,activemq-http/src/test/java/org/apache/activemq/transport/http/HttpJMSMessagesWithCompressionTest.java,"@@ -71,6 +72,7 @@ public void tearDown() throws Exception {
 
     protected ConnectionFactory createConnectionFactory() throws URISyntaxException {
         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(getBrokerURL());
+        factory.setTrustedPackages(Arrays.asList(""java.lang,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper"".split("","")));","[{'comment': 'java.lang only required here', 'commenter': 'coheigea'}]"
446,assembly/src/release/bin/env,"@@ -113,3 +113,10 @@ ACTIVEMQ_USER=""""
 # (set JAVACMD to ""auto"" for automatic detection)
 #JAVA_HOME=""""
 JAVACMD=""auto""
+
+# Packages allowed for serialization (when used with ObjectMessage).
+# Packages set is limited to org.apache.activemmq, org.fusesource.hawtbuf and com.thoughtworks.xstream.mapper by default.
+# java* packages are excluded by default for security reason.
+#ACTIVEMQ_OPTS=""-Dorg.apache.activemq.SERIALIZABLE_PACKAGES=org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper""
+# You have explicitely add java* packages and your packages (and probably java* packages):","[{'comment': 'I think this could be re-worded - you have to explicitly add java.util + java.lang packages ?', 'commenter': 'coheigea'}]"
448,activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,"@@ -2092,7 +2092,7 @@ private PendingList doPageInForDispatch(boolean force, boolean processExpired, i
                                 ConnectionContext connectionContext = createConnectionContext();
                                 dropMessage(ref);
                                 if (gotToTheStore(ref.getMessage())) {
-                                    LOG.debug(""Duplicate message {} from cursor, removing from store"", this, ref.getMessage());
+                                    LOG.debug(""{}, duplicate message {} from cursor, removing from store"", this, ref.getMessage());","[{'comment': 'I think here we should just remove this', 'commenter': 'coheigea'}]"
448,activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,"@@ -129,7 +129,7 @@ private void checkSecurity(Class clazz) throws ClassNotFoundException {
             try {
                 Class<?> answer = Class.forName(className, false, loader);
                 if (LOG.isTraceEnabled()) {
-                    LOG.trace(""Loaded class: {} using classloader: {} -> "", new Object[]{className, cl, answer});
+                    LOG.trace(""Loaded class: {} using classloader: {} -> {}"", new Object[]{className, cl, answer});","[{'comment': 'I think here we should remove new Object[] and just use varargs', 'commenter': 'coheigea'}]"
449,activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,"@@ -87,7 +87,7 @@ public synchronized void setTotalSize(long size) {
     /**
      * @return the maximum size of any step
      */
-    public long getMaxSize() {
+    public synchronized long getMaxSize() {","[{'comment': 'For Max + Min Size, I think synchronized should be removed from the setter methods and just make the variables volatile instead.', 'commenter': 'coheigea'}]"
449,activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,"@@ -383,7 +383,7 @@ int indexFor(Key x, int length) {
     // Property Accessors
     // /////////////////////////////////////////////////////////////////
 
-    public Marshaller<Key> getKeyMarshaller() {
+    public synchronized Marshaller<Key> getKeyMarshaller() {","[{'comment': 'Instead remove synchronized from the setter, and make the variable volatile', 'commenter': 'coheigea'}]"
522,activemq-client/src/main/java/org/apache/activemq/state/ConnectionState.java,"@@ -46,7 +46,7 @@
     private final List<DestinationInfo> tempDestinations = Collections.synchronizedList(new ArrayList<DestinationInfo>());
     private final AtomicBoolean shutdown = new AtomicBoolean(false);
     private boolean connectionInterruptProcessingComplete = true;
-    private HashMap<ConsumerId, ConsumerInfo> recoveringPullConsumers;
+    private ConcurrentMap<ConsumerId, ConsumerInfo> recoveringPullConsumers;","[{'comment': 'Better just to define this as Map', 'commenter': 'coheigea'}, {'comment': 'As @coheigea just a `Map` here is better IMHO.', 'commenter': 'jbonofre'}]"
523,activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,"@@ -280,11 +294,7 @@ protected void handleException(Throwable exception, StompFrame command) throws I
         // Let the stomp client know about any protocol errors.
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         PrintWriter stream = new PrintWriter(new OutputStreamWriter(baos, ""UTF-8""));
-        if (exception instanceof SecurityException || exception.getCause() instanceof SecurityException) {
-            stream.write(exception.getLocalizedMessage());
-        } else {
-            exception.printStackTrace(stream);
-        }
+        exception.printStackTrace(stream);","[{'comment': 'Why not keeping the original code here writing SecurityException to the stream ?', 'commenter': 'jbonofre'}, {'comment': 'Corrected', 'commenter': 'thodimi1'}]"
523,activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,"@@ -558,10 +568,6 @@ protected void onStompSubscribe(StompFrame command) throws ProtocolException {
             throw new ProtocolException(""SUBSCRIBE received without a subscription id!"");
         }
 
-        if (destination == null || """".equals(destination)) {
-            throw new ProtocolException(""Invalid empty or 'null' Destination header"");
-        }
-
         final ActiveMQDestination actualDest = translator.convertDestination(this, destination, true);","[{'comment': ""Why don't we have the ProtocolException if destination is not defined ?"", 'commenter': 'jbonofre'}, {'comment': 'Corrected\r\n', 'commenter': 'thodimi1'}]"
552,activemq-karaf/src/main/resources/features-core.xml,"@@ -25,7 +25,7 @@
 
     <!-- Bundles needed if only client will be deployed in the container -->
     <feature name=""activemq-client"" description=""ActiveMQ client libraries"" version=""${project.version}"" resolver=""(obr)"" start-level=""50"">
-        <feature version=""[4,5)"">spring</feature>
+        <feature version=""[4,6)"">spring</feature>","[{'comment': ""This is not required and actually dangerous as ActiveMQ only supports Spring 4.x for now.\r\nThe only requirement in Karaf is to have `spring-legacy` features repo but it's already OK."", 'commenter': 'jbonofre'}, {'comment': 'OK will close.', 'commenter': 'coheigea'}, {'comment': ""I added a comment to Jira but i'll but the same one here:\r\n\r\nAs a side note we should definitely support the latest Spring 5 for version 5.17.0. Spring 4.x is long been EOL"", 'commenter': 'cshannon'}, {'comment': '@cshannon I agree, but it\'s not just changing the feature. The ""core"" dependencies and schema should be updated as well. I\'ve started this task on `master`.', 'commenter': 'jbonofre'}]"
608,activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,"@@ -40,7 +40,7 @@
     private final ClassLoader inLoader;
 
     static {
-        serializablePackages = System.getProperty(""org.apache.activemq.SERIALIZABLE_PACKAGES"",""org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper"").split("","");
+        serializablePackages = System.getProperty(""java.lang,org.apache.activemq.SERIALIZABLE_PACKAGES"",""org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper"").split("","");","[{'comment': 'There\'s a typo here, it should be: \r\n\r\nserializablePackages = System.getProperty(""org.apache.activemq.SERIALIZABLE_PACKAGES"",""java.lang,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper"").split("","");', 'commenter': 'coheigea'}, {'comment': ""Oh yes, my bad ;) I'm fixing."", 'commenter': 'jbonofre'}]"
608,activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,"@@ -369,7 +369,10 @@ public SubSelectorClassObjectInputStream(InputStream is) throws IOException {
 
         @Override
         protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
-            if (!(desc.getName().equals(""java.lang.String"") || desc.getName().startsWith(""java.util.""))) {
+            if (!(desc.getName().startsWith(""java.lang."")
+                    || desc.getName().startsWith(""com.thoughtworks.xstream"")","[{'comment': 'Is there a way to check if xstream is enabled, and if so to include this check, otherwise leave it out?', 'commenter': 'coheigea'}, {'comment': 'It could be enabled when using HTTP transport connector.', 'commenter': 'jbonofre'}, {'comment': ""I think it's worth to keep it (just in case for http transport connector). Thoughts ?"", 'commenter': 'jbonofre'}]"
679,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -152,10 +152,15 @@
     private boolean useShutdownHook = true;
     private boolean useLoggingForShutdownErrors;
     private boolean shutdownOnMasterFailure;
+    private boolean shutdownOnActiveFailure;","[{'comment': 'Its a private field no need to duplicate just rename the original field. Just need to keep method compatibility ', 'commenter': 'michaelandrepearce'}, {'comment': 'This comment applies generally. No need for me to repeat on every occurance', 'commenter': 'michaelandrepearce'}, {'comment': ""Hmm good point, my brain didn't catch that as my first pass was assuming spring looked at the actual variable names.\r\nedit: xbean"", 'commenter': 'ehossack-aws'}, {'comment': 'This was addressed in latest version of PR', 'commenter': 'ehossack'}]"
679,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -485,15 +490,15 @@ public JmsConnector removeJmsConnector(JmsConnector connector) {
     }
 
     public void masterFailed() {
-        if (shutdownOnMasterFailure) {
-            LOG.error(""The Master has failed ... shutting down"");
+        if (shutdownOnActiveFailure) {
+            LOG.error(""The Active has failed ... shutting down"");","[{'comment': 'Active doesnt sound like a good replacement for master\r\n Typically we would refer to master or slave and which one is serving  being the current active node. \r\n\r\nActive and passive = state\r\n\r\nMaster / slave was what role the node took. \r\n\r\nI think a different word to replace master should be found e.g.(primary/standby) (primary/replica)', 'commenter': 'michaelandrepearce'}, {'comment': ""The [ticket](https://issues.apache.org/jira/browse/AMQ-7514) mentions active/standby and I'd tend to agree that it's the clearest (it's also what we use at AWS).\r\n\r\nConsider:\r\n- of the nodes, only 1 is _active_ serving requests\r\n- the other nodes are not pure replicas, as they have shared storage, rather they are on standby over the same FS\r\n\r\nIt's possible that in the previous replicated leveldb one could think of replica as a good term here, but I think it's slightly disingenuous. (especially if the storage used isn't actually replicated...)"", 'commenter': 'ehossack-aws'}, {'comment': 'I disagree with the ticket then\r\nActive is state though. Either master or slave can be active. E.g. we talk about a slave being passive and then if master fails it becomes active. We will end up with very confusing terminology.\r\n\r\nhttps://www.theserverside.com/opinion/Master-slave-terminology-alternatives-you-can-use-right-now\r\n\r\n\r\nAlso i would appreciate the discussion is not based on because aws does it. This is an apache project not an aws one.', 'commenter': 'michaelandrepearce'}, {'comment': 'Quickly reading the ticket actually mentions\r\n\r\nNew terms:\r\na. For shared storage: ‘active’ and ’standby’\r\nb. For replication: ‘primary’ and ‘replica\'\r\nc. For \'white list\' and \'blacklist\': \'allow list\' and \'deny list\'\r\n\r\nLike wise earlier in the same ticket it mentions\r\n\r\n\r\nHere are just a few terms that should be changed: * The following terms are being targeted for change:\r\n\r\n\'master\' and \'slave\' should be replaced with the terms \'live\' and \'backup\'\'whitelist\' and \'blacklist\' should be replaced with the terms \'allowlist\' and \'denylist\'Rename all the git \'master\' branches to the term \'main\'\r\n\r\nA little using terminology within context and avoiding conflicting terminology is needed here. \r\n\r\nI agree i think also we historically overloaded the use of master slave too. Especially when leveldb (i think the wording used then was ""pure master slave"") and replicated kahadb was done. So some legacy nomiculture there with what master slave meant along with active and passive.\r\n\r\nSo in this case its the replication one, e.g. the broker is either the primary instance or the replica instance .. so primary replica (or primary standby) should maybe be used\r\n\r\nIm also keen we align with Artemis broker for consistency sakes on the way forward here.\r\n\r\nHappy for others to chip in here. As this is one of those things that once released its a done deal...', 'commenter': 'michaelandrepearce'}, {'comment': ""I agree with @michaelandrepearce. I've added a comment to AMQ-7514 to push along the discussion."", 'commenter': 'jbertram'}, {'comment': 'This group of methods is never read anywhere by the code base. My understanding is that they are legacy hold-over from early replication approach that has been removed long ago. I do not see any reason to deprecate them. Given that we have agreed to make major breaking changes in 5.17.x (remove leveldb), I believe we can safely remove these methods in this pass.\r\n\r\nWe should not be adding new terms or concepts that do not apply to the code base in this pass. ', 'commenter': 'mattrpav'}, {'comment': ""I did a 'find references' search and yeah, you're right @mattrpav. I think this is also relevant in the discussion about active/passive/standby. It seems reasonable in the scope of this change rather than renaming to actually remove those methods/concepts. Then there is no need to consider the 'existing' terminology."", 'commenter': 'ehossack-aws'}, {'comment': ""as per @mattrpav 's AMQ-8316, moved the two concretely deprecated messages out of this PR into https://github.com/apache/activemq/pull/700"", 'commenter': 'ehossack-aws'}]"
679,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2896,51 +2922,142 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     */
+    @Deprecated
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Configuration `shutdownOnSlaveFailure` is deprecated and will be removed in a future release. Use `shutdownOnStandbyFailure` instead.
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     * @param shutdownOnSlaveFailure
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated
     public void setShutdownOnSlaveFailure(boolean shutdownOnSlaveFailure) {
         this.shutdownOnSlaveFailure = shutdownOnSlaveFailure;
+        this.shutdownOnStandbyFailure = shutdownOnSlaveFailure;
+        LOG.warn(""Configuration `shutdownOnSlaveFailure` is deprecated and will be removed in a future release. Use `shutdownOnStandbyFailure` instead."");
     }
 
+    public boolean isShutdownOnStandbyFailure() {
+        return shutdownOnStandbyFailure;
+    }
+
+    /**
+     * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
+     */
+    public void setShutdownOnStandbyFailure(boolean shutdownOnStandbyFailure) {
+        this.shutdownOnSlaveFailure = shutdownOnStandbyFailure;
+        this.shutdownOnStandbyFailure = shutdownOnStandbyFailure;
+    }
+
+    /**
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     */
+    @Deprecated","[{'comment': 'This method is never called in the code base. My understanding is that it was kept to not break configurations from the long-gone active-active replication. I would contend that since we have agreed to remove leveldb from 5.17.x and there are no planned usages for these metods, that this method (and related ones) could safely be removed instead of deprecated. ', 'commenter': 'mattrpav'}]"
679,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -485,15 +490,15 @@ public JmsConnector removeJmsConnector(JmsConnector connector) {
     }
 
     public void masterFailed() {
-        if (shutdownOnMasterFailure) {
-            LOG.error(""The Master has failed ... shutting down"");
+        if (shutdownOnActiveFailure) {
+            LOG.error(""The Active has failed ... shutting down"");
             try {
                 stop();
             } catch (Exception e) {
-                LOG.error(""Failed to stop for master failure"", e);
+                LOG.error(""Failed to stop for active failure"", e);","[{'comment': 'Updating log messages is tricky, since it can break monitoring in not-so-easy-to-upgrade ways. I think this should be a sub-task conversation on the parent ticket.', 'commenter': 'mattrpav'}, {'comment': 'How about in the scope of this PR we add both messages, and then the subtask is to remove the non-inclusive messages? That would support a transition period well.', 'commenter': 'ehossack-aws'}, {'comment': ""2 messages could yield 2 alerts. I think we break this up into some sub-tasks and add a broker config param to flip b/w the log messages using deprecated terms. I'll update the JIRA with some sub-tasks."", 'commenter': 'mattrpav'}]"
679,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2896,51 +2922,142 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     */
+    @Deprecated
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Configuration `shutdownOnSlaveFailure` is deprecated and will be removed in a future release. Use `shutdownOnStandbyFailure` instead.
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     * @param shutdownOnSlaveFailure
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated
     public void setShutdownOnSlaveFailure(boolean shutdownOnSlaveFailure) {
         this.shutdownOnSlaveFailure = shutdownOnSlaveFailure;
+        this.shutdownOnStandbyFailure = shutdownOnSlaveFailure;
+        LOG.warn(""Configuration `shutdownOnSlaveFailure` is deprecated and will be removed in a future release. Use `shutdownOnStandbyFailure` instead."");
     }
 
+    public boolean isShutdownOnStandbyFailure() {
+        return shutdownOnStandbyFailure;
+    }
+
+    /**
+     * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
+     */
+    public void setShutdownOnStandbyFailure(boolean shutdownOnStandbyFailure) {
+        this.shutdownOnSlaveFailure = shutdownOnStandbyFailure;
+        this.shutdownOnStandbyFailure = shutdownOnStandbyFailure;
+    }
+
+    /**
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     */
+    @Deprecated
     public boolean isWaitForSlave() {
         return waitForSlave;
     }
 
     /**
+     * Configuration `waitForSlave` is deprecated and will be removed in a future release. Use `waitForStandby` instead.
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     * @param waitForSlave
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated
     public void setWaitForSlave(boolean waitForSlave) {
         this.waitForSlave = waitForSlave;
+        this.waitForStandby = waitForSlave;
+        LOG.warn(""Configuration `waitForSlave` is deprecated and will be removed in a future release. Use `waitForStandby` instead."");
     }
 
+    /**
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     */
+    @Deprecated
     public long getWaitForSlaveTimeout() {
         return this.waitForSlaveTimeout;
     }
 
+    /**
+     * Configuration `waitForSlaveTimeout` is deprecated and will be removed in a future release. Use `waitForStandbyTimeout` instead.
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
+     * @param waitForSlaveTimeout
+     */
+    @Deprecated
     public void setWaitForSlaveTimeout(long waitForSlaveTimeout) {
         this.waitForSlaveTimeout = waitForSlaveTimeout;
+        this.waitForStandbyTimeout = waitForSlaveTimeout;
+        LOG.warn(""Configuration `waitForSlaveTimeout` is deprecated and will be removed in a future release. Use `waitForStandbyTimeout` instead."");
+
+    }
+
+    public boolean isWaitForStandby() {
+        return waitForStandby;
     }
 
     /**
-     * Get the passiveSlave
+     * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
+     */
+    public void setWaitForStandby(boolean waitForStandby) {
+        this.waitForStandby = waitForStandby;
+        this.waitForSlave = waitForStandby;
+    }
+
+    public long getWaitForStandbyTimeout() {
+        return this.waitForStandbyTimeout;
+    }
+
+    public void setWaitForStandbyTimeout(long waitForStandbyTimeout) {
+        this.waitForSlaveTimeout = waitForStandbyTimeout;
+        this.waitForStandbyTimeout = waitForStandbyTimeout;
+    }
+
+    /**
+     * Configuration `passiveSlave` is deprecated and will be removed in a future release. Use `standbyInstance` instead.
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
      * @return the passiveSlave
      */
+    @Deprecated
     public boolean isPassiveSlave() {
+        LOG.warn(""Configuration `passiveSlave` is deprecated and will be removed in a future release. Use `standbyInstance` instead."");
         return this.passiveSlave;
     }
 
     /**
-     * Set the passiveSlave
+     * Configuration `passiveSlave` is deprecated and will be removed in a future release. Use `standbyInstance` instead.
+     * @deprecated AMQ-7514 in the move to inclusive nomenclature
      * @param passiveSlave the passiveSlave to set
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated
     public void setPassiveSlave(boolean passiveSlave) {
         this.passiveSlave = passiveSlave;
+        this.standbyInstance = passiveSlave;
+        LOG.warn(""Configuration `passiveSlave` is deprecated and will be removed in a future release. Use `standbyInstance` instead."");","[{'comment': '@mattrpav per your comment it also appears `isPassiveSlave` is not used. We could also remove this it seems like?', 'commenter': 'ehossack-aws'}, {'comment': ""Yes, I think we break-up the PR's a bit. Removing deprecated methods can be its own thing"", 'commenter': 'mattrpav'}]"
682,activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,"@@ -307,6 +307,44 @@ public JMSConnectionStatsImpl getConnectionStats() {
     /**
      * Creates a <CODE>Session</CODE> object.
      *
+     * @throws JMSException if the <CODE>Connection</CODE> object fails to
+     *                 create a session due to some internal error or lack of
+     *                 support for the specific transaction and acknowledgement
+     *                 mode.
+     * @since 2.0
+     */
+	@Override","[{'comment': ""This is totally a non-functional style comment, but I feel like every new method you've added has a different indentation level 😅 "", 'commenter': 'ehossack-aws'}, {'comment': ""IDE preferences didn't come over. Fixed in latest commit"", 'commenter': 'mattrpav'}, {'comment': 'seems in general indentation and code formatting seems out still....', 'commenter': 'michaelpearce-gain'}]"
682,activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,"@@ -271,7 +272,39 @@ public synchronized Connection createConnection(String userName, String password
         return newPooledConnection(connection);
     }
 
-    protected Connection newPooledConnection(ConnectionPool connection) {
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+	public JMSContext createContext() {
+    	throw new UnsupportedOperationException(""createContext() is not supported"");
+	}
+
+    /**
+     * @return Returns the JMSContext.
+     */
+	@Override
+	public JMSContext createContext(String userName, String password) {
+		throw new UnsupportedOperationException(""createContext() is not supported"");","[{'comment': 'I like the way you\'re calling out the specific methods in the exceptions. Makes it clear to diagnose. But you should standardize on having `""createContext(String, String)""` or just `""createContext()""`, and same with the other unimplemented methods. ', 'commenter': 'ehossack-aws'}, {'comment': ""Just missed this one.. I'll fix in the follow-up commit this morning"", 'commenter': 'mattrpav'}]"
682,activemq-web-demo/pom.xml,"@@ -142,8 +142,8 @@
   <dependencies>
     <!-- j2ee jars -->
     <dependency>
-      <groupId>org.apache.geronimo.specs</groupId>
-      <artifactId>geronimo-jms_1.1_spec</artifactId>","[{'comment': ""@jbonofre what's the advantage of using geronimo vs. jakarta? I know you mentioned in your implementation you used geronimo - why is one more likely to create conflicts with Camel?"", 'commenter': 'ehossack-aws'}, {'comment': 'Osgi support, will likely not hit jakarta anytime soon whereas G does/will maintain it so best choice stays G as of today.', 'commenter': 'rmannibucau'}, {'comment': ""That's my point, agree with Romain: it's my proposal, don't use Jakarta but rather Geronimo Spec instead. It's what other projects are doing (especially Camel). Geronimo Spec supports OSGi cleanly, so, it's better to use it instead of Jakarta."", 'commenter': 'jbonofre'}, {'comment': 'I have some more changes coming in this morning.', 'commenter': 'mattrpav'}, {'comment': 'i see that this PR is still using jakarta instead of geronimo , was the mentioned osgi compatibility resolved?, whats the story/consensus, from above it seems that it consensus was to use geronimo but PR isnt updated from that.', 'commenter': 'michaelpearce-gain'}]"
682,pom.xml,"@@ -310,11 +310,13 @@
         <artifactId>activemq-all</artifactId>
         <version>${project.version}</version>
       </dependency>
+      <!-- Remove activemq-camel
       <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>activemq-camel</artifactId>
         <version>${project.version}</version>
       </dependency>
+      -->","[{'comment': 'Likewise with these, probably just removal is clearer.\r\n\r\nI know this might just be a first ""revision"", but just in case you forget', 'commenter': 'ehossack-aws'}, {'comment': 'Agreed', 'commenter': 'mattrpav'}]"
682,activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,"@@ -162,6 +162,44 @@ public TopicSession createTopicSession(boolean transacted, int ackMode) throws J
         return (TopicSession) createSession(transacted, ackMode);
     }
 
+    /**
+     * Creates a <CODE>Session</CODE> object.
+     *
+     * @throws JMSException if the <CODE>Connection</CODE> object fails to
+     *                 create a session due to some internal error or lack of
+     *                 support for the specific transaction and acknowledgement
+     *                 mode.
+     * @since 2.0
+     */
+    @Override
+    public Session createSession() throws JMSException {
+    	throw new UnsupportedOperationException(""createSession() is unsupported""); 
+    }
+
+    /**
+     * Creates a <CODE>Session</CODE> object.
+     *
+     * @param acknowledgeMode indicates whether the consumer or the client will
+     *                acknowledge any messages it receives; ignored if the
+     *                session is transacted. Legal values are
+     *                <code>Session.AUTO_ACKNOWLEDGE</code>,
+     *                <code>Session.CLIENT_ACKNOWLEDGE</code>, and
+     *                <code>Session.DUPS_OK_ACKNOWLEDGE</code>.
+     * @return a newly created session
+     * @throws JMSException if the <CODE>Connection</CODE> object fails to
+     *                 create a session due to some internal error or lack of
+     *                 support for the specific transaction and acknowledgement
+     *                 mode.
+     * @see Session#AUTO_ACKNOWLEDGE
+     * @see Session#CLIENT_ACKNOWLEDGE
+     * @see Session#DUPS_OK_ACKNOWLEDGE
+     * @since 2.0
+     */
+    @Override
+	public Session createSession(int sessionMode) throws JMSException {
+    	throw new UnsupportedOperationException(""createSession(int sessionMode) is unsupported""); ","[{'comment': 'nit: indentation.', 'commenter': 'michaelpearce-gain'}, {'comment': 'Fixed', 'commenter': 'mattrpav'}]"
682,activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,"@@ -77,8 +78,40 @@ public Connection createConnection(String userName, String password) throws JMSE
         i.setPassword(password);
         return createConnection(i);
     }
+    
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext() {
+        throw new UnsupportedOperationException(""createContext() is not supported"");
+    }
+
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext(String userName, String password) {
+        throw new UnsupportedOperationException(""createContext(userName, password) is not supported"");
+        }
 
     /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext(String userName, String password, int sessionMode) {
+        throw new UnsupportedOperationException(""createContext(userName, password, sessionMode) is not supported"");
+        }
+
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext(int sessionMode) {
+        throw new UnsupportedOperationException(""createContext(sessionMode) is not supported"");
+        }","[{'comment': 'nit: indentation', 'commenter': 'michaelpearce-gain'}, {'comment': 'Fixed', 'commenter': 'mattrpav'}]"
682,activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,"@@ -77,8 +78,40 @@ public Connection createConnection(String userName, String password) throws JMSE
         i.setPassword(password);
         return createConnection(i);
     }
+    
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext() {
+        throw new UnsupportedOperationException(""createContext() is not supported"");
+    }
+
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext(String userName, String password) {
+        throw new UnsupportedOperationException(""createContext(userName, password) is not supported"");
+        }
 
     /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext(String userName, String password, int sessionMode) {
+        throw new UnsupportedOperationException(""createContext(userName, password, sessionMode) is not supported"");
+        }","[{'comment': 'nit: indentation', 'commenter': 'michaelpearce-gain'}, {'comment': 'Fixed', 'commenter': 'mattrpav'}]"
682,activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,"@@ -77,8 +78,40 @@ public Connection createConnection(String userName, String password) throws JMSE
         i.setPassword(password);
         return createConnection(i);
     }
+    
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext() {
+        throw new UnsupportedOperationException(""createContext() is not supported"");
+    }
+
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+    public JMSContext createContext(String userName, String password) {
+        throw new UnsupportedOperationException(""createContext(userName, password) is not supported"");
+        }","[{'comment': 'nit: indentation', 'commenter': 'michaelpearce-gain'}, {'comment': 'Fixed', 'commenter': 'mattrpav'}]"
682,activemq-karaf/src/main/resources/features-core.xml,"@@ -32,7 +32,6 @@
         <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/${jaxb-bundle-version}</bundle>
         <bundle>mvn:org.apache.commons/commons-pool2/${commons-pool2-version}</bundle>
         <bundle>mvn:commons-net/commons-net/${commons-net-version}</bundle>
-        <bundle dependency=""true"">mvn:org.apache.zookeeper/zookeeper/${zookeeper-version}</bundle>","[{'comment': '? why is this being removed as part of jms change?', 'commenter': 'michaelpearce-gain'}]"
682,activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageProducerSupport.java,"@@ -66,7 +91,7 @@ public void setDisableMessageID(boolean value) throws JMSException {
         this.disableMessageID = value;
     }
 
-    /**
+	/**","[{'comment': 'nit: indentation', 'commenter': 'michaelpearce-gain'}, {'comment': 'Fixed', 'commenter': 'mattrpav'}]"
682,activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageProducerSupport.java,"@@ -42,6 +42,31 @@ public ActiveMQMessageProducerSupport(ActiveMQSession session) {
         disableMessageTimestamp = session.connection.isDisableTimeStampsByDefault();
     }
 
+	/**","[{'comment': 'nit: indentation', 'commenter': 'michaelpearce-gain'}, {'comment': 'Fixed', 'commenter': 'mattrpav'}]"
682,activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageProducerSupport.java,"@@ -42,6 +42,31 @@ public ActiveMQMessageProducerSupport(ActiveMQSession session) {
         disableMessageTimestamp = session.connection.isDisableTimeStampsByDefault();
     }
 
+	/**
+     * Gets the delivery delay associated with this <CODE>MessageProducer</CODE>.
+     *
+     * @return this producer's <CODE>DeliveryDely/ <CODE>
+     * @throws JMSException if the JMS provider fails to close the producer due to
+     *                      some internal error.
+     * @since 2.0
+     */
+    @Override
+	public void setDeliveryDelay(long deliveryDelay) throws JMSException {
+    	throw new UnsupportedOperationException(""setDeliveryDelay() is not supported"");
+	}
+
+	/**","[{'comment': 'nit: indentation\r\n\r\n', 'commenter': 'michaelpearce-gain'}]"
682,activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageProducerSupport.java,"@@ -42,6 +42,31 @@ public ActiveMQMessageProducerSupport(ActiveMQSession session) {
         disableMessageTimestamp = session.connection.isDisableTimeStampsByDefault();
     }
 
+	/**
+     * Gets the delivery delay associated with this <CODE>MessageProducer</CODE>.
+     *
+     * @return this producer's <CODE>DeliveryDely/ <CODE>
+     * @throws JMSException if the JMS provider fails to close the producer due to
+     *                      some internal error.
+     * @since 2.0
+     */
+    @Override","[{'comment': 'nit: indentation\r\n\r\n', 'commenter': 'michaelpearce-gain'}]"
682,activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageProducerSupport.java,"@@ -42,6 +42,31 @@ public ActiveMQMessageProducerSupport(ActiveMQSession session) {
         disableMessageTimestamp = session.connection.isDisableTimeStampsByDefault();
     }
 
+	/**
+     * Gets the delivery delay associated with this <CODE>MessageProducer</CODE>.
+     *
+     * @return this producer's <CODE>DeliveryDely/ <CODE>
+     * @throws JMSException if the JMS provider fails to close the producer due to
+     *                      some internal error.
+     * @since 2.0
+     */
+    @Override
+	public void setDeliveryDelay(long deliveryDelay) throws JMSException {
+    	throw new UnsupportedOperationException(""setDeliveryDelay() is not supported"");","[{'comment': 'nit: indentation\r\n\r\n', 'commenter': 'michaelpearce-gain'}]"
682,activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,"@@ -285,8 +286,40 @@ public TopicConnection createTopicConnection() throws JMSException {
     public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
         return createActiveMQConnection(userName, password);
     }
+    
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override
+	public JMSContext createContext() {
+    	throw new UnsupportedOperationException(""createContext() is not supported"");","[{'comment': 'nit: indentation\r\n\r\n', 'commenter': 'michaelpearce-gain'}]"
682,activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,"@@ -285,8 +286,40 @@ public TopicConnection createTopicConnection() throws JMSException {
     public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
         return createActiveMQConnection(userName, password);
     }
+    
+    /**
+     * @return Returns the JMSContext.
+     */
+    @Override","[{'comment': 'nit: indentation\r\n\r\n', 'commenter': 'michaelpearce-gain'}]"
699,activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,"@@ -187,9 +183,13 @@ public boolean abort() throws LoginException {
         return true;
     }
 
-    protected void close(DirContext context) {
+    protected void closeContext() {
+        if (context == null) {
+            return;
+        }
         try {
             context.close();
+            context = null;","[{'comment': 'The context = null assignment should probably be in a finally {} ', 'commenter': 'mattrpav'}, {'comment': 'fixed', 'commenter': 'Dm-Chebotarskyi'}]"
699,activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,"@@ -320,22 +316,17 @@ protected boolean authenticate(String username, String password) throws LoginExc
                 throw new FailedLoginException(""Password does not match for user: "" + username);
             }
         } catch (CommunicationException e) {
+            closeContext();","[{'comment': 'Can all the closeContext() calls be moved to a finally {}', 'commenter': 'mattrpav'}, {'comment': 'fixed', 'commenter': 'Dm-Chebotarskyi'}]"
699,activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,"@@ -175,7 +171,7 @@ public boolean commit() throws LoginException {
     public boolean abort() throws LoginException {
         if (!succeeded) {
             return false;
-        } else if (succeeded && commitSucceeded) {","[{'comment': 'Why is the logic changing here?', 'commenter': 'mattrpav'}, {'comment': ""Variable `succeeded` is alway `true` in line 174. Logic hasn't been changed"", 'commenter': 'Dm-Chebotarskyi'}, {'comment': 'I agree with @Dm-Chebotarskyi : as we already test `succeeded` at line 172, no need to test again.', 'commenter': 'jbonofre'}]"
699,activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,"@@ -450,7 +440,6 @@ protected boolean bindUser(DirContext context, String dn, String password) throw
                 log.debug(""User "" + dn + "" successfully bound."");
             }
         } catch (AuthenticationException e) {
-            isValid = false;","[{'comment': 'Why is this being removed?', 'commenter': 'mattrpav'}, {'comment': ""Because `isValid` variable is `false` here and this assignment is not needed.\r\nLogic hasn't been changed"", 'commenter': 'Dm-Chebotarskyi'}, {'comment': 'I agree with @Dm-Chebotarskyi : `isValid` is already set to `false` at line 429.', 'commenter': 'jbonofre'}]"
720,activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,"@@ -226,4 +232,10 @@ public boolean isRollbackOnly() {
         return rollackOnlyCause != null;
     }
 
+    protected ArrayList<Synchronization> getSynchronizationsCopy() {","[{'comment': ""Maybe it's easier/smaller to use `Collections.synchronizedList(new ArrayList<Object>());` instead of a method wrapping with sync ?"", 'commenter': 'jbonofre'}]"
727,assembly/src/release/conf/jetty.xml,"@@ -43,7 +43,7 @@
     </bean>
     <bean id=""securityConstraintMapping"" class=""org.eclipse.jetty.security.ConstraintMapping"">
         <property name=""constraint"" ref=""securityConstraint"" />
-        <property name=""pathSpec"" value=""/*,/api/*,/admin/*,*.jsp"" />
+        <property name=""pathSpec"" value=""/,*.jsp,*.html,*.js,*.css,*.png,*.gif,*.ico"" />","[{'comment': 'api is missing here.', 'commenter': 'jbonofre'}, {'comment': 'pathSpec should be:\r\n```\r\n<bean id=""securityConstraintMapping"" class=""org.eclipse.jetty.security.ConstraintMapping"">\r\n    <property name=""constraint"" ref=""securityConstraint"" />\r\n    <property name=""pathSpec"" value=""/api/*,*.jsp,*.html,*.png,*.css,/admin/js/*"" />\r\n</bean>\r\n```', 'commenter': 'jbonofre'}, {'comment': 'Nevermind, ` /` is enough ;)', 'commenter': 'jbonofre'}]"
929,activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,"@@ -538,22 +535,25 @@ public void messageConsumed(ConnectionContext context, MessageReference messageR
     @Override
     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
         if (isLogAll() || isLogConsumerEvents() || isLogInternalEvents()) {
-            String msg = ""Unable to display message."";
-
-            msg = messageReference.getMessage().toString();
-
+            String msg = messageReference.getMessage().toString();","[{'comment': 'Good clean-up =)', 'commenter': 'mattrpav'}]"
947,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2426,6 +2426,9 @@ protected DestinationInterceptor[] createDefaultDestinationInterceptor() {
      * @throws IOException
      */
     protected Broker addInterceptors(Broker broker) throws Exception {
+        if (isAdvisorySupport()) {","[{'comment': 'Please add a comment here that the order matters and include JIRA number', 'commenter': 'mattrpav'}, {'comment': 'done 👍 ', 'commenter': 'devlinm'}]"
949,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -231,6 +231,7 @@ public class BrokerService implements Service {
     private boolean forceStart = false;
     private IOExceptionHandler ioExceptionHandler;
     private boolean schedulerSupport = false;
+    private String schedulerActivityDestination = null;","[{'comment': 'Please add a default value from a constant', 'commenter': 'mattrpav'}]"
949,activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,"@@ -353,6 +355,12 @@ private void doSchedule(Message messageSend, Object cronValue, Object periodValu
 
         getInternalScheduler().schedule(jobId.toString(),
                 new ByteSequence(packet.data, packet.offset, packet.length), cronEntry, delay, period, repeat);
+
+        if(jobSchedulerActivityListener != null) {
+            msg.setProperty(ScheduledMessage.AMQ_SCHEDULED_ID, jobId.toString());
+            msg.setProperty(ScheduledMessage.AMQ_SCHEDULER_ACTIVITY, ScheduledMessage.AMQ_SCHEDULER_ACTIVITY_SCHEDULED);
+            jobSchedulerActivityListener.scheduled(this, msg);
+        }","[{'comment': '@mattrpav this block is the main reason for a PR. As there is no way to get to the job id at the time of the scheduling.', 'commenter': 'maxfortun'}]"
949,activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,"@@ -418,6 +426,12 @@ public void scheduledJob(String id, ByteSequence job) {
             producerExchange.setMutable(true);
             producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
             super.send(producerExchange, messageSend);
+
+            if(jobSchedulerActivityListener != null) {
+                Message msg = messageSend.copy();
+                msg.setProperty(ScheduledMessage.AMQ_SCHEDULER_ACTIVITY, ScheduledMessage.AMQ_SCHEDULER_ACTIVITY_DISPATCHED);
+                jobSchedulerActivityListener.dispatched(this, msg);
+            }","[{'comment': '@mattrpav Once message is dispatched it has scheduledJobId property, so I can use that, but I figured it is nice to have a single source to monitor scheduler activity.', 'commenter': 'maxfortun'}]"
965,activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbstractDeadLetterStrategy.java,"@@ -108,20 +111,25 @@ public void setExpiration(long expiration) {
         this.expiration = expiration;
     }
 
+
+
     public int getMaxProducersToAudit() {
-        return messageAudit.getMaximumNumberOfProducersToTrack();
+        return this.maxProducersToAudit;
     }
 
     public void setMaxProducersToAudit(int maxProducersToAudit) {
-        messageAudit.setMaximumNumberOfProducersToTrack(maxProducersToAudit);
+        this.maxProducersToAudit = maxProducersToAudit;
     }
 
     public void setMaxAuditDepth(int maxAuditDepth) {
-        messageAudit.setAuditDepth(maxAuditDepth);
+        this.maxAuditDepth = maxAuditDepth;","[{'comment': 'This sets the variable but no longer sets the shared audit so that will break things.', 'commenter': 'cshannon'}]"
965,activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbstractDeadLetterStrategy.java,"@@ -108,20 +111,25 @@ public void setExpiration(long expiration) {
         this.expiration = expiration;
     }
 
+","[{'comment': 'I would get rid of the extra random white space changes in the file like here.', 'commenter': 'cshannon'}]"
965,activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbstractDeadLetterStrategy.java,"@@ -31,13 +31,15 @@ public abstract class AbstractDeadLetterStrategy implements DeadLetterStrategy {
     private boolean processNonPersistent = false;
     private boolean processExpired = true;
     private boolean enableAudit = true;
-    private final ActiveMQMessageAudit messageAudit = new ActiveMQMessageAudit();","[{'comment': ""There's no real reason to rename this variable or change this anymore."", 'commenter': 'cshannon'}, {'comment': ""Also if we decide to not have a flag for Individual and only use a message audit per destination (which I think makes more sense) then we can actually just move this message audit variable down into the Shared strategy. The abstract wouldn't need to have anything defined except the abstract method for looking up the message audit as leaving this here wouldn't make sense if it won't be used by Individual."", 'commenter': 'cshannon'}]"
968,activemq-client-jakarta/pom.xml,"@@ -0,0 +1,166 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.activemq</groupId>
+        <artifactId>activemq-parent</artifactId>
+        <version>5.18.0-SNAPSHOT</version>
+    </parent>
+    <artifactId>activemq-client-jakarta</artifactId>
+    <packaging>bundle</packaging>
+    <name>ActiveMQ :: Client Jakarta</name>
+    <description>Jakarta transition module for ActiveMQ Client implementation</description>
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.activemq</groupId>
+            <artifactId>activemq-client</artifactId>
+            <version>${project.version}</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>jakarta.jms</groupId>
+                    <artifactId>jakarta.jms-api</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>jakarta.jms</groupId>
+            <artifactId>jakarta.jms-api</artifactId>
+            <version>3.0.0</version>","[{'comment': ""Any versions in this file, like here, should really be managed in the root pom under dependency management. It makes tracking versions by the project much easier if it's in one spot."", 'commenter': 'cshannon'}]"
968,activemq-client-jakarta/pom.xml,"@@ -0,0 +1,166 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.activemq</groupId>
+        <artifactId>activemq-parent</artifactId>
+        <version>5.18.0-SNAPSHOT</version>
+    </parent>
+    <artifactId>activemq-client-jakarta</artifactId>
+    <packaging>bundle</packaging>
+    <name>ActiveMQ :: Client Jakarta</name>
+    <description>Jakarta transition module for ActiveMQ Client implementation</description>
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.activemq</groupId>
+            <artifactId>activemq-client</artifactId>
+            <version>${project.version}</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>jakarta.jms</groupId>
+                    <artifactId>jakarta.jms-api</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>jakarta.jms</groupId>
+            <artifactId>jakarta.jms-api</artifactId>
+            <version>3.0.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.thoughtworks.xstream</groupId>
+            <artifactId>xstream</artifactId>
+            <version>${xstream-version}</version>","[{'comment': 'Version not needed, see comment for jakarta.jms-api version', 'commenter': 'cshannon'}]"
968,activemq-client-jakarta/pom.xml,"@@ -0,0 +1,166 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.activemq</groupId>
+        <artifactId>activemq-parent</artifactId>
+        <version>5.18.0-SNAPSHOT</version>
+    </parent>
+    <artifactId>activemq-client-jakarta</artifactId>
+    <packaging>bundle</packaging>
+    <name>ActiveMQ :: Client Jakarta</name>
+    <description>Jakarta transition module for ActiveMQ Client implementation</description>
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.activemq</groupId>
+            <artifactId>activemq-client</artifactId>
+            <version>${project.version}</version>","[{'comment': 'Version not needed, see comment for jakarta.jms-api version', 'commenter': 'cshannon'}]"
968,activemq-client-jakarta/pom.xml,"@@ -0,0 +1,166 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.activemq</groupId>
+        <artifactId>activemq-parent</artifactId>
+        <version>5.18.0-SNAPSHOT</version>
+    </parent>
+    <artifactId>activemq-client-jakarta</artifactId>
+    <packaging>bundle</packaging>
+    <name>ActiveMQ :: Client Jakarta</name>
+    <description>Jakarta transition module for ActiveMQ Client implementation</description>
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.activemq</groupId>
+            <artifactId>activemq-client</artifactId>
+            <version>${project.version}</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>jakarta.jms</groupId>
+                    <artifactId>jakarta.jms-api</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>jakarta.jms</groupId>
+            <artifactId>jakarta.jms-api</artifactId>
+            <version>3.0.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.thoughtworks.xstream</groupId>
+            <artifactId>xstream</artifactId>
+            <version>${xstream-version}</version>
+            <scope>provided</scope>
+        </dependency>
+    </dependencies>
+    <build>
+        <plugins>
+            <plugin>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>unpack-source</id>
+                        <phase>initialize</phase>
+                        <goals>
+                            <goal>unpack</goal>
+                        </goals>
+                        <configuration>
+                            <artifactItems>
+                                <artifactItem>
+                                    <groupId>org.apache.activemq</groupId>
+                                    <artifactId>activemq-client</artifactId>
+                                    <version>${activemq.version}</version>","[{'comment': 'Version not needed, see comment for jakarta.jms-api version', 'commenter': 'cshannon'}]"
968,activemq-client-jakarta/pom.xml,"@@ -0,0 +1,166 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.activemq</groupId>
+        <artifactId>activemq-parent</artifactId>
+        <version>5.18.0-SNAPSHOT</version>
+    </parent>
+    <artifactId>activemq-client-jakarta</artifactId>
+    <packaging>bundle</packaging>
+    <name>ActiveMQ :: Client Jakarta</name>
+    <description>Jakarta transition module for ActiveMQ Client implementation</description>
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.activemq</groupId>
+            <artifactId>activemq-client</artifactId>
+            <version>${project.version}</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>jakarta.jms</groupId>
+                    <artifactId>jakarta.jms-api</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>jakarta.jms</groupId>
+            <artifactId>jakarta.jms-api</artifactId>
+            <version>3.0.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.thoughtworks.xstream</groupId>
+            <artifactId>xstream</artifactId>
+            <version>${xstream-version}</version>
+            <scope>provided</scope>
+        </dependency>
+    </dependencies>
+    <build>
+        <plugins>
+            <plugin>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>unpack-source</id>
+                        <phase>initialize</phase>
+                        <goals>
+                            <goal>unpack</goal>
+                        </goals>
+                        <configuration>
+                            <artifactItems>
+                                <artifactItem>
+                                    <groupId>org.apache.activemq</groupId>
+                                    <artifactId>activemq-client</artifactId>
+                                    <version>${activemq.version}</version>
+                                    <classifier>sources</classifier>
+                                    <type>jar</type>
+                                    <outputDirectory>${project.build.directory}/copied-sources/activemq-client</outputDirectory>
+                                    <excludes>**/META-INF/**,**/zeroconf/**</excludes>
+                                    <includes>**/**</includes>
+                                </artifactItem>
+                            </artifactItems>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>com.google.code.maven-replacer-plugin</groupId>
+                <artifactId>replacer</artifactId>
+                <version>1.5.3</version>","[{'comment': 'like dependencies, plugins should have their version managed in the root pom in pluginManagement', 'commenter': 'cshannon'}]"
969,activemq-client-jakarta/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,"@@ -0,0 +1,808 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.activemq.command;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Vector;
+
+import jakarta.jms.DeliveryMode;
+import jakarta.jms.Destination;
+import jakarta.jms.JMSException;
+import jakarta.jms.MessageFormatException;
+import jakarta.jms.MessageNotWriteableException;
+import jakarta.jms.XAJMSContext;
+
+import org.apache.activemq.ActiveMQConnection;
+import org.apache.activemq.ScheduledMessage;
+import org.apache.activemq.broker.scheduler.CronParser;
+import org.apache.activemq.filter.PropertyExpression;
+import org.apache.activemq.state.CommandVisitor;
+import org.apache.activemq.util.Callback;
+import org.apache.activemq.util.JMSExceptionSupport;
+import org.apache.activemq.util.TypeConversionSupport;
+import org.fusesource.hawtbuf.UTF8Buffer;
+
+/**
+ *
+ * @openwire:marshaller code=""23""
+ */
+public class ActiveMQMessage extends Message implements org.apache.activemq.Message, ScheduledMessage {
+    public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_MESSAGE;
+    public static final String DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY = ""dlqDeliveryFailureCause"";
+    public static final String BROKER_PATH_PROPERTY = ""JMSActiveMQBrokerPath"";
+
+    private static final Map<String, PropertySetter> JMS_PROPERTY_SETERS = new HashMap<String, PropertySetter>();
+
+    protected transient Callback acknowledgeCallback;
+
+    @Override
+    public byte getDataStructureType() {
+        return DATA_STRUCTURE_TYPE;
+    }
+
+    @Override
+    public Message copy() {
+        ActiveMQMessage copy = new ActiveMQMessage();
+        copy(copy);
+        return copy;
+    }
+
+    protected void copy(ActiveMQMessage copy) {
+        super.copy(copy);
+        copy.acknowledgeCallback = acknowledgeCallback;
+    }
+
+    @Override
+    public int hashCode() {
+        MessageId id = getMessageId();
+        if (id != null) {
+            return id.hashCode();
+        } else {
+            return super.hashCode();
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || o.getClass() != getClass()) {
+            return false;
+        }
+
+        ActiveMQMessage msg = (ActiveMQMessage) o;
+        MessageId oMsg = msg.getMessageId();
+        MessageId thisMsg = this.getMessageId();
+        return thisMsg != null && oMsg != null && oMsg.equals(thisMsg);
+    }
+
+    @Override
+    public void acknowledge() throws JMSException {
+        if (acknowledgeCallback != null) {
+            try {
+                acknowledgeCallback.execute();
+            } catch (JMSException e) {
+                throw e;
+            } catch (Throwable e) {
+                throw JMSExceptionSupport.create(e);
+            }
+        }
+    }
+
+    @Override
+    public void clearBody() throws JMSException {
+        setContent(null);
+        readOnlyBody = false;
+    }
+
+    @Override
+    public String getJMSMessageID() {
+        MessageId messageId = this.getMessageId();
+        if (messageId == null) {
+            return null;
+        }
+        return messageId.toString();
+    }
+
+    /**
+     * Seems to be invalid because the parameter doesn't initialize MessageId
+     * instance variables ProducerId and ProducerSequenceId
+     *
+     * @param value
+     * @throws JMSException
+     */
+    @Override
+    public void setJMSMessageID(String value) throws JMSException {
+        if (value != null) {
+            try {
+                MessageId id = new MessageId(value);
+                this.setMessageId(id);
+            } catch (NumberFormatException e) {
+                // we must be some foreign JMS provider or strange user-supplied
+                // String
+                // so lets set the IDs to be 1
+                MessageId id = new MessageId();
+                id.setTextView(value);
+                this.setMessageId(id);
+            }
+        } else {
+            this.setMessageId(null);
+        }
+    }
+
+    /**
+     * This will create an object of MessageId. For it to be valid, the instance
+     * variable ProducerId and producerSequenceId must be initialized.
+     *
+     * @param producerId
+     * @param producerSequenceId
+     * @throws JMSException
+     */
+    public void setJMSMessageID(ProducerId producerId, long producerSequenceId) throws JMSException {
+        MessageId id = null;
+        try {
+            id = new MessageId(producerId, producerSequenceId);
+            this.setMessageId(id);
+        } catch (Throwable e) {
+            throw JMSExceptionSupport.create(""Invalid message id '"" + id + ""', reason: "" + e.getMessage(), e);
+        }
+    }
+
+    @Override
+    public long getJMSTimestamp() {
+        return this.getTimestamp();
+    }
+
+    @Override
+    public void setJMSTimestamp(long timestamp) {
+        this.setTimestamp(timestamp);
+    }
+
+    @Override
+    public String getJMSCorrelationID() {
+        return this.getCorrelationId();
+    }
+
+    @Override
+    public void setJMSCorrelationID(String correlationId) {
+        this.setCorrelationId(correlationId);
+    }
+
+    @Override
+    public byte[] getJMSCorrelationIDAsBytes() throws JMSException {
+        return encodeString(this.getCorrelationId());
+    }
+
+    @Override
+    public void setJMSCorrelationIDAsBytes(byte[] correlationId) throws JMSException {
+        this.setCorrelationId(decodeString(correlationId));
+    }
+
+    @Override
+    public String getJMSXMimeType() {
+        return ""jms/message"";
+    }
+
+    protected static String decodeString(byte[] data) throws JMSException {
+        try {
+            if (data == null) {
+                return null;
+            }
+            return new String(data, ""UTF-8"");
+        } catch (UnsupportedEncodingException e) {
+            throw new JMSException(""Invalid UTF-8 encoding: "" + e.getMessage());
+        }
+    }
+
+    protected static byte[] encodeString(String data) throws JMSException {
+        try {
+            if (data == null) {
+                return null;
+            }
+            return data.getBytes(""UTF-8"");
+        } catch (UnsupportedEncodingException e) {
+            throw new JMSException(""Invalid UTF-8 encoding: "" + e.getMessage());
+        }
+    }
+
+    @Override
+    public Destination getJMSReplyTo() {
+        return this.getReplyTo();
+    }
+
+    @Override
+    public void setJMSReplyTo(Destination destination) throws JMSException {
+        this.setReplyTo(ActiveMQDestination.transform(destination));
+    }
+
+    @Override
+    public Destination getJMSDestination() {
+        return this.getDestination();
+    }
+
+    @Override
+    public void setJMSDestination(Destination destination) throws JMSException {
+        this.setDestination(ActiveMQDestination.transform(destination));
+    }
+
+    @Override
+    public int getJMSDeliveryMode() {
+        return this.isPersistent() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT;
+    }
+
+    @Override
+    public void setJMSDeliveryMode(int mode) {
+        this.setPersistent(mode == DeliveryMode.PERSISTENT);
+    }
+
+    @Override
+    public boolean getJMSRedelivered() {
+        return this.isRedelivered();
+    }
+
+    @Override
+    public void setJMSRedelivered(boolean redelivered) {
+        this.setRedelivered(redelivered);
+    }
+
+    @Override
+    public String getJMSType() {
+        return this.getType();
+    }
+
+    @Override
+    public void setJMSType(String type) {
+        this.setType(type);
+    }
+
+    @Override
+    public long getJMSExpiration() {
+        return this.getExpiration();
+    }
+
+    @Override
+    public void setJMSExpiration(long expiration) {
+        this.setExpiration(expiration);
+    }
+
+    @Override
+    public int getJMSPriority() {
+        return this.getPriority();
+    }
+
+    @Override
+    public void setJMSPriority(int priority) {
+        this.setPriority((byte) priority);
+    }
+
+    @Override
+    public void clearProperties() {
+        super.clearProperties();
+        readOnlyProperties = false;
+    }
+
+    @Override
+    public boolean propertyExists(String name) throws JMSException {
+        try {
+            return (this.getProperties().containsKey(name) || getObjectProperty(name)!= null);
+        } catch (IOException e) {
+            throw JMSExceptionSupport.create(e);
+        }
+    }
+
+    @Override
+    @SuppressWarnings(""rawtypes"")
+    public Enumeration getPropertyNames() throws JMSException {
+        try {
+            Vector<String> result = new Vector<String>(this.getProperties().keySet());
+            if( getRedeliveryCounter()!=0 ) {
+                result.add(""JMSXDeliveryCount"");
+            }
+            if( getGroupID()!=null ) {
+                result.add(""JMSXGroupID"");
+            }
+            if( getGroupID()!=null ) {
+                result.add(""JMSXGroupSeq"");
+            }
+            if( getUserID()!=null ) {
+                result.add(""JMSXUserID"");
+            }
+            return result.elements();
+        } catch (IOException e) {
+            throw JMSExceptionSupport.create(e);
+        }
+    }
+
+    /**
+     * return all property names, including standard JMS properties and JMSX properties
+     * @return  Enumeration of all property names on this message
+     * @throws JMSException
+     */
+    @SuppressWarnings(""rawtypes"")
+    public Enumeration getAllPropertyNames() throws JMSException {
+        try {
+            Vector<String> result = new Vector<String>(this.getProperties().keySet());
+            result.addAll(JMS_PROPERTY_SETERS.keySet());
+            return result.elements();
+        } catch (IOException e) {
+            throw JMSExceptionSupport.create(e);
+        }
+    }
+
+    interface PropertySetter {
+        void set(Message message, Object value) throws MessageFormatException;
+    }
+
+    static {
+        JMS_PROPERTY_SETERS.put(""JMSXDeliveryCount"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSXDeliveryCount cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                message.setRedeliveryCounter(rc.intValue() - 1);
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSXGroupID"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                String rc = (String) TypeConversionSupport.convert(value, String.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSXGroupID cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                message.setGroupID(rc);
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSXGroupSeq"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSXGroupSeq cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                message.setGroupSequence(rc.intValue());
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSCorrelationID"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                String rc = (String) TypeConversionSupport.convert(value, String.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSCorrelationID cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                ((ActiveMQMessage) message).setJMSCorrelationID(rc);
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSDeliveryMode"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                Integer rc = null;
+                try {
+                    rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
+                } catch (NumberFormatException nfe) {
+                    if (value instanceof String) {
+                        if (((String) value).equalsIgnoreCase(""PERSISTENT"")) {
+                            rc = DeliveryMode.PERSISTENT;
+                        } else if (((String) value).equalsIgnoreCase(""NON_PERSISTENT"")) {
+                            rc = DeliveryMode.NON_PERSISTENT;
+                        } else {
+                            throw nfe;
+                        }
+                    }
+                }
+                if (rc == null) {
+                    Boolean bool = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
+                    if (bool == null) {
+                        throw new MessageFormatException(""Property JMSDeliveryMode cannot be set from a "" + value.getClass().getName() + ""."");
+                    } else {
+                        rc = bool.booleanValue() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT;
+                    }
+                }
+                ((ActiveMQMessage) message).setJMSDeliveryMode(rc);
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSExpiration"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSExpiration cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                ((ActiveMQMessage) message).setJMSExpiration(rc.longValue());
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSPriority"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSPriority cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                ((ActiveMQMessage) message).setJMSPriority(rc.intValue());
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSRedelivered"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                Boolean rc = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSRedelivered cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                ((ActiveMQMessage) message).setJMSRedelivered(rc.booleanValue());
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSReplyTo"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                ActiveMQDestination rc = (ActiveMQDestination) TypeConversionSupport.convert(value, ActiveMQDestination.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSReplyTo cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                ((ActiveMQMessage) message).setReplyTo(rc);
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSTimestamp"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSTimestamp cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                ((ActiveMQMessage) message).setJMSTimestamp(rc.longValue());
+            }
+        });
+        JMS_PROPERTY_SETERS.put(""JMSType"", new PropertySetter() {
+            @Override
+            public void set(Message message, Object value) throws MessageFormatException {
+                String rc = (String) TypeConversionSupport.convert(value, String.class);
+                if (rc == null) {
+                    throw new MessageFormatException(""Property JMSType cannot be set from a "" + value.getClass().getName() + ""."");
+                }
+                ((ActiveMQMessage) message).setJMSType(rc);
+            }
+        });
+    }
+
+    @Override
+    public void setObjectProperty(String name, Object value) throws JMSException {
+        setObjectProperty(name, value, true);
+    }
+
+    public void setObjectProperty(String name, Object value, boolean checkReadOnly) throws JMSException {
+
+        if (checkReadOnly) {
+            checkReadOnlyProperties();
+        }
+        if (name == null || name.equals("""")) {
+            throw new IllegalArgumentException(""Property name cannot be empty or null"");
+        }
+
+        if (value instanceof UTF8Buffer) {
+            value = value.toString();
+        }
+
+        checkValidObject(value);
+        value = convertScheduled(name, value);
+        PropertySetter setter = JMS_PROPERTY_SETERS.get(name);
+
+        if (setter != null && value != null) {
+            setter.set(this, value);
+        } else {
+            try {
+                this.setProperty(name, value);
+            } catch (IOException e) {
+                throw JMSExceptionSupport.create(e);
+            }
+        }
+    }
+
+    public void setProperties(Map<String, ?> properties) throws JMSException {
+        for (Map.Entry<String, ?> entry : properties.entrySet()) {
+            // Lets use the object property method as we may contain standard
+            // extension headers like JMSXGroupID
+            setObjectProperty(entry.getKey(), entry.getValue());
+        }
+    }
+
+    protected void checkValidObject(Object value) throws MessageFormatException {
+
+        boolean valid = value instanceof Boolean || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long;
+        valid = valid || value instanceof Float || value instanceof Double || value instanceof Character || value instanceof String || value == null;
+
+        if (!valid) {
+
+            ActiveMQConnection conn = getConnection();
+            // conn is null if we are in the broker rather than a JMS client
+            if (conn == null || conn.isNestedMapAndListEnabled()) {
+                if (!(value instanceof Map || value instanceof List)) {
+                    throw new MessageFormatException(""Only objectified primitive objects, String, Map and List types are allowed but was: "" + value + "" type: "" + value.getClass());
+                }
+            } else {
+                throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
+            }
+        }
+    }
+
+    protected Object convertScheduled(String name, Object value) throws MessageFormatException {
+        Object result = value;
+        if (AMQ_SCHEDULED_DELAY.equals(name)){
+            result = TypeConversionSupport.convert(value, Long.class);
+            if (result != null && (Long)result < 0) {
+                throw new MessageFormatException(name + "" must not be a negative value"");
+            }
+        }
+        else if (AMQ_SCHEDULED_PERIOD.equals(name)){
+            result = TypeConversionSupport.convert(value, Long.class);
+            if (result != null && (Long)result < 0) {
+                throw new MessageFormatException(name + "" must not be a negative value"");
+            }
+        }
+        else if (AMQ_SCHEDULED_REPEAT.equals(name)){
+            result = TypeConversionSupport.convert(value, Integer.class);
+            if (result != null && (Integer)result < 0) {
+                throw new MessageFormatException(name + "" must not be a negative value"");
+            }
+        }
+        else if (AMQ_SCHEDULED_CRON.equals(name)) {
+            CronParser.validate(value.toString());
+        }
+        return result;
+    }
+
+    @Override
+    public Object getObjectProperty(String name) throws JMSException {
+        if (name == null) {
+            throw new NullPointerException(""Property name cannot be null"");
+        }
+
+        // PropertyExpression handles converting message headers to properties.
+        PropertyExpression expression = new PropertyExpression(name);
+        return expression.evaluate(this);
+    }
+
+    @Override
+    public boolean getBooleanProperty(String name) throws JMSException {
+        Object value = getObjectProperty(name);
+        if (value == null) {
+            return false;
+        }
+        Boolean rc = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
+        if (rc == null) {
+            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a boolean"");
+        }
+        return rc.booleanValue();
+    }
+
+    @Override
+    public byte getByteProperty(String name) throws JMSException {
+        Object value = getObjectProperty(name);
+        if (value == null) {
+            throw new NumberFormatException(""property "" + name + "" was null"");
+        }
+        Byte rc = (Byte) TypeConversionSupport.convert(value, Byte.class);
+        if (rc == null) {
+            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a byte"");
+        }
+        return rc.byteValue();
+    }
+
+    @Override
+    public short getShortProperty(String name) throws JMSException {
+        Object value = getObjectProperty(name);
+        if (value == null) {
+            throw new NumberFormatException(""property "" + name + "" was null"");
+        }
+        Short rc = (Short) TypeConversionSupport.convert(value, Short.class);
+        if (rc == null) {
+            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a short"");
+        }
+        return rc.shortValue();
+    }
+
+    @Override
+    public int getIntProperty(String name) throws JMSException {
+        Object value = getObjectProperty(name);
+        if (value == null) {
+            throw new NumberFormatException(""property "" + name + "" was null"");
+        }
+        Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
+        if (rc == null) {
+            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as an integer"");
+        }
+        return rc.intValue();
+    }
+
+    @Override
+    public long getLongProperty(String name) throws JMSException {
+        Object value = getObjectProperty(name);
+        if (value == null) {
+            throw new NumberFormatException(""property "" + name + "" was null"");
+        }
+        Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
+        if (rc == null) {
+            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a long"");
+        }
+        return rc.longValue();
+    }
+
+    @Override
+    public float getFloatProperty(String name) throws JMSException {
+        Object value = getObjectProperty(name);
+        if (value == null) {
+            throw new NullPointerException(""property "" + name + "" was null"");
+        }
+        Float rc = (Float) TypeConversionSupport.convert(value, Float.class);
+        if (rc == null) {
+            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a float"");
+        }
+        return rc.floatValue();
+    }
+
+    @Override
+    public double getDoubleProperty(String name) throws JMSException {
+        Object value = getObjectProperty(name);
+        if (value == null) {
+            throw new NullPointerException(""property "" + name + "" was null"");
+        }
+        Double rc = (Double) TypeConversionSupport.convert(value, Double.class);
+        if (rc == null) {
+            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a double"");
+        }
+        return rc.doubleValue();
+    }
+
+    @Override
+    public String getStringProperty(String name) throws JMSException {
+        Object value = null;
+        if (""JMSXUserID"".equals(name)) {
+            value = getUserID();
+            if (value == null) {
+                value = getObjectProperty(name);
+            }
+        } else {
+            value = getObjectProperty(name);
+        }
+        if (value == null) {
+            return null;
+        }
+        String rc = (String) TypeConversionSupport.convert(value, String.class);
+        if (rc == null) {
+            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a String"");
+        }
+        return rc;
+    }
+
+    @Override
+    public void setBooleanProperty(String name, boolean value) throws JMSException {
+        setBooleanProperty(name, value, true);
+    }
+
+    public void setBooleanProperty(String name, boolean value, boolean checkReadOnly) throws JMSException {
+        setObjectProperty(name, Boolean.valueOf(value), checkReadOnly);
+    }
+
+    @Override
+    public void setByteProperty(String name, byte value) throws JMSException {
+        setObjectProperty(name, Byte.valueOf(value));
+    }
+
+    @Override
+    public void setShortProperty(String name, short value) throws JMSException {
+        setObjectProperty(name, Short.valueOf(value));
+    }
+
+    @Override
+    public void setIntProperty(String name, int value) throws JMSException {
+        setObjectProperty(name, Integer.valueOf(value));
+    }
+
+    @Override
+    public void setLongProperty(String name, long value) throws JMSException {
+        setObjectProperty(name, Long.valueOf(value));
+    }
+
+    @Override
+    public void setFloatProperty(String name, float value) throws JMSException {
+        setObjectProperty(name, Float.valueOf(value));
+    }
+
+    @Override
+    public void setDoubleProperty(String name, double value) throws JMSException {
+        setObjectProperty(name, Double.valueOf(value));
+    }
+
+    @Override
+    public void setStringProperty(String name, String value) throws JMSException {
+        setObjectProperty(name, value);
+    }
+
+    protected void checkReadOnlyProperties() throws MessageNotWriteableException {
+        if (readOnlyProperties) {
+            throw new MessageNotWriteableException(""Message properties are read-only"");
+        }
+    }
+
+    protected void checkReadOnlyBody() throws MessageNotWriteableException {
+        if (readOnlyBody) {
+            throw new MessageNotWriteableException(""Message body is read-only"");
+        }
+    }
+
+    public Callback getAcknowledgeCallback() {
+        return acknowledgeCallback;
+    }
+
+    public void setAcknowledgeCallback(Callback acknowledgeCallback) {
+        this.acknowledgeCallback = acknowledgeCallback;
+    }
+
+    /**
+     * Send operation event listener. Used to get the message ready to be sent.
+     */
+    public void onSend() throws JMSException {
+        setReadOnlyBody(true);
+        setReadOnlyProperties(true);
+    }
+
+    @Override
+    public Response visit(CommandVisitor visitor) throws Exception {
+        return visitor.processMessage(this);
+    }
+
+    @Override
+    public void storeContent() {
+    }
+
+    @Override
+    public void storeContentAndClear() {
+        storeContent();
+    }
+
+    @Override
+    protected boolean isContentMarshalled() {
+        //Always return true because ActiveMQMessage only has a content field
+        //which is already marshalled
+        return true;
+    }
+
+    @Override
+    public long getJMSDeliveryTime() throws JMSException {
+        throw new UnsupportedOperationException(""getJMSDeliveryTime() is unsupported in transitional client"");
+    }
+
+    @Override
+    public void setJMSDeliveryTime(long deliveryTime) throws JMSException {
+        throw new UnsupportedOperationException(""setJMSDeliveryTime(long) is unsupported in transitional client"");","[{'comment': 'This has been implemented in Main, this PR should be updated to include the latest changes from Main since this will be targeted for 5.18.0 now', 'commenter': 'cshannon'}]"
986,activemq-rar/pom.xml,"@@ -114,7 +114,7 @@
           <artifactId>jakarta-regexp</artifactId>
         </exclusion>
         <exclusion>
-          <groupId>javax.jmdns</groupId>
+          <groupId>org.jmdns</groupId>","[{'comment': 'I think the exclusion here is still using the javax.jmdns groupId.', 'commenter': 'jbonofre'}, {'comment': '@jbonofre the dependency tree looks correct to me. This is from a full build off the PR branch.\r\n\r\n```\r\n[INFO] --- maven-dependency-plugin:3.3.0:tree (default-cli) @ activemq-rar ---\r\n[INFO] org.apache.activemq:activemq-rar:rar:5.18.0-SNAPSHOT\r\n[INFO] +- org.apache.activemq:activemq-spring:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.36:compile\r\n[INFO] |  +- org.apache.activemq:activemq-broker:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] |  |  +- org.apache.activemq:activemq-client:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] |  |  +- org.apache.activemq:activemq-openwire-legacy:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] |  |  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile\r\n[INFO] |  |  \\- com.fasterxml.jackson.core:jackson-databind:jar:2.14.2:compile\r\n[INFO] |  |     +- com.fasterxml.jackson.core:jackson-annotations:jar:2.14.2:compile\r\n[INFO] |  |     \\- com.fasterxml.jackson.core:jackson-core:jar:2.14.2:compile\r\n[INFO] |  \\- org.apache.activemq:activemq-pool:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] |     \\- org.apache.activemq:activemq-jms-pool:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] +- org.apache.activemq:activemq-ra:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] |  \\- org.apache.activemq:activemq-kahadb-store:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] +- org.apache.xbean:xbean-spring:jar:4.22:compile\r\n[INFO] |  \\- commons-logging:commons-logging:jar:1.2:compile\r\n[INFO] +- org.springframework:spring-core:jar:5.3.25:compile\r\n[INFO] |  \\- org.springframework:spring-jcl:jar:5.3.25:compile\r\n[INFO] +- org.springframework:spring-context:jar:5.3.25:compile\r\n[INFO] |  +- org.springframework:spring-aop:jar:5.3.25:compile\r\n[INFO] |  +- org.springframework:spring-beans:jar:5.3.25:compile\r\n[INFO] |  \\- org.springframework:spring-expression:jar:5.3.25:compile\r\n[INFO] +- org.apache.commons:commons-pool2:jar:2.11.1:compile\r\n[INFO] +- org.apache.activemq:activemq-amqp:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] |  +- org.apache.qpid:proton-j:jar:0.33.10:compile\r\n[INFO] |  \\- org.fusesource.hawtbuf:hawtbuf:jar:1.11:compile\r\n[INFO] +- org.apache.activemq:activemq-mqtt:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] |  +- org.apache.activemq.protobuf:activemq-protobuf:jar:1.1:compile\r\n[INFO] |  +- org.fusesource.mqtt-client:mqtt-client:jar:1.16:compile\r\n[INFO] |  \\- org.fusesource.hawtdispatch:hawtdispatch-transport:jar:1.22:compile\r\n[INFO] |     \\- org.fusesource.hawtdispatch:hawtdispatch:jar:1.22:compile\r\n[INFO] +- org.apache.logging.log4j:log4j-core:jar:2.19.0:compile\r\n[INFO] |  \\- org.apache.logging.log4j:log4j-api:jar:2.19.0:compile\r\n[INFO] +- org.apache.activemq:activemq-jaas:jar:5.18.0-SNAPSHOT:compile\r\n[INFO] +- org.apache.logging.log4j:log4j-slf4j-impl:jar:2.19.0:runtime\r\n[INFO] +- org.apache.activemq:activemq-all:jar:5.18.0-SNAPSHOT:test\r\n[INFO] \\- junit:junit:jar:4.13.2:test\r\n[INFO]    \\- org.hamcrest:hamcrest-core:jar:1.3:test\r\n```', 'commenter': 'mattrpav'}, {'comment': 'Ah yes, correct as jmdns is coming from activemq-spring that uses the new coordinates.', 'commenter': 'jbonofre'}]"
988,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2901,49 +2902,73 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording","[{'comment': '```suggestion\r\n     * @deprecated this method will be renamed to not use slave wording\r\n```', 'commenter': 'cshannon'}]"
988,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2901,49 +2902,73 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording","[{'comment': '```suggestion\r\n     * @deprecated this method will be renamed to not use slave wording\r\n```', 'commenter': 'cshannon'}]"
988,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2901,49 +2902,73 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setShutdownOnSlaveFailure(boolean shutdownOnSlaveFailure) {
         this.shutdownOnSlaveFailure = shutdownOnSlaveFailure;
     }
 
+    /**
+     * Deprecated: it will be removed as it should not be used directly.","[{'comment': '```suggestion\r\n     * @deprecated it will be removed as it should not be used directly.\r\n```', 'commenter': 'cshannon'}]"
988,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2901,49 +2902,73 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setShutdownOnSlaveFailure(boolean shutdownOnSlaveFailure) {
         this.shutdownOnSlaveFailure = shutdownOnSlaveFailure;
     }
 
+    /**
+     * Deprecated: it will be removed as it should not be used directly.
+     */
+    @Deprecated(forRemoval = true)
     public boolean isWaitForSlave() {
         return waitForSlave;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording","[{'comment': '```suggestion\r\n     * @deprecated this method will be renamed to not use slave wording\r\n```', 'commenter': 'cshannon'}]"
988,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2901,49 +2902,73 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setShutdownOnSlaveFailure(boolean shutdownOnSlaveFailure) {
         this.shutdownOnSlaveFailure = shutdownOnSlaveFailure;
     }
 
+    /**
+     * Deprecated: it will be removed as it should not be used directly.
+     */
+    @Deprecated(forRemoval = true)
     public boolean isWaitForSlave() {
         return waitForSlave;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setWaitForSlave(boolean waitForSlave) {
         this.waitForSlave = waitForSlave;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording","[{'comment': '```suggestion\r\n     * @deprecated this method will be renamed to not use slave wording\r\n```', 'commenter': 'cshannon'}]"
988,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2901,49 +2902,73 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setShutdownOnSlaveFailure(boolean shutdownOnSlaveFailure) {
         this.shutdownOnSlaveFailure = shutdownOnSlaveFailure;
     }
 
+    /**
+     * Deprecated: it will be removed as it should not be used directly.
+     */
+    @Deprecated(forRemoval = true)
     public boolean isWaitForSlave() {
         return waitForSlave;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setWaitForSlave(boolean waitForSlave) {
         this.waitForSlave = waitForSlave;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public long getWaitForSlaveTimeout() {
         return this.waitForSlaveTimeout;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording","[{'comment': '```suggestion\r\n     * @deprecated this method will be renamed to not use slave wording\r\n```', 'commenter': 'cshannon'}]"
988,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2901,49 +2902,73 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setShutdownOnSlaveFailure(boolean shutdownOnSlaveFailure) {
         this.shutdownOnSlaveFailure = shutdownOnSlaveFailure;
     }
 
+    /**
+     * Deprecated: it will be removed as it should not be used directly.
+     */
+    @Deprecated(forRemoval = true)
     public boolean isWaitForSlave() {
         return waitForSlave;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setWaitForSlave(boolean waitForSlave) {
         this.waitForSlave = waitForSlave;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public long getWaitForSlaveTimeout() {
         return this.waitForSlaveTimeout;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public void setWaitForSlaveTimeout(long waitForSlaveTimeout) {
         this.waitForSlaveTimeout = waitForSlaveTimeout;
     }
 
     /**
-     * Get the passiveSlave
-     * @return the passiveSlave
+     * Deprecated: this method will be renamed to not use slave wording","[{'comment': '```suggestion\r\n     * @deprecated this method will be renamed to not use slave wording\r\n```', 'commenter': 'cshannon'}]"
988,activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,"@@ -2901,49 +2902,73 @@ public void setSslContext(SslContext sslContext) {
         this.sslContext = sslContext;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public boolean isShutdownOnSlaveFailure() {
         return shutdownOnSlaveFailure;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setShutdownOnSlaveFailure(boolean shutdownOnSlaveFailure) {
         this.shutdownOnSlaveFailure = shutdownOnSlaveFailure;
     }
 
+    /**
+     * Deprecated: it will be removed as it should not be used directly.
+     */
+    @Deprecated(forRemoval = true)
     public boolean isWaitForSlave() {
         return waitForSlave;
     }
 
     /**
+     * Deprecated: this method will be renamed to not use slave wording
+     *
      * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.BooleanEditor""
      */
+    @Deprecated(forRemoval = true)
     public void setWaitForSlave(boolean waitForSlave) {
         this.waitForSlave = waitForSlave;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public long getWaitForSlaveTimeout() {
         return this.waitForSlaveTimeout;
     }
 
+    /**
+     * Deprecated: this method will be renamed to not use slave wording
+     */
+    @Deprecated(forRemoval = true)
     public void setWaitForSlaveTimeout(long waitForSlaveTimeout) {
         this.waitForSlaveTimeout = waitForSlaveTimeout;
     }
 
     /**
-     * Get the passiveSlave
-     * @return the passiveSlave
+     * Deprecated: this method will be renamed to not use slave wording
      */
+    @Deprecated(forRemoval = true)
     public boolean isPassiveSlave() {
         return this.passiveSlave;
     }
 
     /**
-     * Set the passiveSlave
+     * Deprecated: this method will be renamed to not use slave wording","[{'comment': '```suggestion\r\n     * @deprecated this method will be renamed to not use slave wording\r\n```', 'commenter': 'cshannon'}]"
996,pom.xml,"@@ -91,14 +91,14 @@
     <org-apache-derby-version>10.15.2.0</org-apache-derby-version>
     <osgi-version>6.0.0</osgi-version>
     <qpid-proton-version>0.34.1</qpid-proton-version>
-    <qpid-jms-version>1.9.0</qpid-jms-version>
+    <qpid-jms-version>2.2.0</qpid-jms-version>","[{'comment': ""This is effectively applying a downgrade, since 2.3.0 was the effective 'jakarta equivalent' of the pre-existing 1.9.0 dep. The latest release now is 2.4.0."", 'commenter': 'gemmellr'}, {'comment': 'qpid-jms updated to v2.4.0', 'commenter': 'mattrpav'}]"
996,pom.xml,"@@ -67,16 +67,16 @@
     <httpcore-version>4.4.16</httpcore-version>
     <insight-version>1.2.0.Beta4</insight-version>
     <jackson-version>2.15.2</jackson-version>
-    <jakarta-jms-api-version>2.0.3</jakarta-jms-api-version>
+    <jakarta-jms-api-version>3.1.0</jakarta-jms-api-version>","[{'comment': 'This property seems to be a duplicate of `jakarta-jms-api-v3-version`, one of them should be removed.', 'commenter': 'cshannon'}, {'comment': 'Fixed as part of activemq-client-jakarta changes, that include adding Maven relocation info for that module.', 'commenter': 'mattrpav'}]"
1005,activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,"@@ -957,6 +957,11 @@ private void checkUsage(ConnectionContext context,ProducerBrokerExchange produce
     }
 
     private void expireMessages() {
+        if(isDispatchPaused()) {","[{'comment': ""This is not threadsafe, this is usually accessed when protected by the consumers lock and the variable isn't volatile. I don't think we want to be accessing that consumers lock from this task as who knows what other issues will come up."", 'commenter': 'cshannon'}, {'comment': ""QueueDispatchSelector is final which is fine, specifically the paused flag inside that class isn't volatile because it's usually accessed under the consumer write lock everywhere"", 'commenter': 'cshannon'}, {'comment': ""Good catch. I'll update"", 'commenter': 'mattrpav'}, {'comment': 'Fixed in 4f4b199', 'commenter': 'mattrpav'}]"
1048,assembly/src/docker/build.sh,"@@ -100,7 +100,7 @@ elif [ -n ""${FROM_LOCAL}"" ]; then
   if [ -n ""${ARCHIVE}"" ]; then
      DIST_DIR=${ARCHIVE}
   else
-     DIST_DIR=""target/apache-activemq-*.tar.gz""
+     DIST_DIR=""../../target/apache-activemq-*.tar.gz""","[{'comment': 'Any reason to change the path here ?', 'commenter': 'jbonofre'}, {'comment': 'Good question, since I was not sure from where to launch the script because I did not find any doc about it, I may have changed it incorrectly. I will revert it asap.', 'commenter': 'essobedo'}, {'comment': 'Fixed thx', 'commenter': 'essobedo'}]"
