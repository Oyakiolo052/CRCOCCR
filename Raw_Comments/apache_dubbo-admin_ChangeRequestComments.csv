Pull,Path,Diff_hunk,Comment
63,dubbo-admin/src/main/java/com/alibaba/dubboadmin/web/mvc/RouterController.java,"@@ -29,6 +29,7 @@
 import com.alibaba.dubboadmin.governance.util.WebConstants;
 import com.alibaba.dubboadmin.web.mvc.governance.ServicesController;
 
+import oracle.jrockit.jfr.events.RequestableEventEnvironment;","[{'comment': 'This is not necessary.', 'commenter': 'ralf0131'}]"
208,dubbo-admin-backend/src/main/resources/application.properties,"@@ -16,6 +16,8 @@
 #
 
 dubbo.registry.group=dubbo
+dubbo.configcenter.username=username
+dubbo.configcenter.password=password","[{'comment': 'please change the style of configcenter to config-center, thanks', 'commenter': 'nzomkxia'}, {'comment': ""ok，I'll do it"", 'commenter': 'sunbufu'}, {'comment': ""Hi, I update this properties. But when I push it and run CI, I get an error '`The Travis CI build failed`'. and details is '`Failed to retrieve POM for org.apache.maven.surefire:surefire-junit4:jar:2.21.0: Could not transfer artifact org.apache.maven.surefire:surefire-junit4:pom:2.21.0 from/to central (https://repo.maven.apache.org/maven2): Connection reset`'. I do not change any POM file. Can you help me for this ? Thank you."", 'commenter': 'sunbufu'}, {'comment': ""It's success when I run it again. Please review my PR, thank you. "", 'commenter': 'sunbufu'}]"
228,dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/common/AdminConstants.java,"@@ -0,0 +1,25 @@
+package org.apache.dubbo.admin.common;
+
+/**
+ * @author zhanghuilong
+ * @desc   Constants
+ * @since 2019/01/03
+ */
+public class AdminConstants {
+
+    public static final String PUNCTUATION_POINT = ""."";
+
+    public static final String PUNCTUATION_SEPARATOR_POINT = ""\\."";
+
+    public final static String PATH_SEPARATOR = ""/"";
+
+    public final static String INTERROGATION_POINT = ""?"";
+
+    public static final String ANY_VALUE = ""*"";
+
+    public static final String APPLICATION = ""application"";
+
+    public static final String SERVICE = ""service"";
+
+    public static final String IP = ""ip"";
+}","[{'comment': 'We already have a class: `org.apache.dubbo.admin.common.util.Constants`,  please add these variables there.', 'commenter': 'nzomkxia'}, {'comment': 'ok , thank you. Later I will add these again.\r\n', 'commenter': 'hrsstd'}]"
228,dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/config/ConfigCenter.java,"@@ -43,7 +43,7 @@
     @Value(""${dubbo.configcenter:}"")
     private String configCenter;
 
-    @Value(""${dubbo.registry.address:}"")
+    @Value(""${dubbo.configcenter:}"")
     private String registryAddress;
 
     private static String globalConfigPath = ""config/dubbo/dubbo.properties"";","[{'comment': 'both dubbo.configcenter and dubbo.registrey.address are necessary here, do not change', 'commenter': 'nzomkxia'}, {'comment': ""if don't change this , can I change the  application.properties add a config ?\r\nlike this: dubbo.registry.address=zookeeper://127.0.0.1:2181\r\n"", 'commenter': 'hrsstd'}]"
228,dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/controller/ServiceController.java,"@@ -52,33 +54,33 @@ public ServiceController(ProviderService providerService, ConsumerService consum
 
     @RequestMapping(method = RequestMethod.GET)
     public Set<ServiceDTO> searchService(@RequestParam String pattern,
-                                         @RequestParam String filter,@PathVariable String env) {
+        @RequestParam String filter,@PathVariable String env) {","[{'comment': 'this format change is unnecessary', 'commenter': 'nzomkxia'}, {'comment': 'get', 'commenter': 'hrsstd'}]"
268,dubbo-admin-backend/src/test/java/org/apache/dubbo/admin/common/util/CoderUtilTest.java,"@@ -0,0 +1,50 @@
+package org.apache.dubbo.admin.common.util;","[{'comment': 'Please add Apache License announcement at the head of new files.\r\nYou can copy it from any other sourcecode.', 'commenter': 'biyuhao'}, {'comment': 'ok', 'commenter': 'sunbufu'}]"
268,dubbo-admin-backend/src/test/java/org/apache/dubbo/admin/service/RegistryServerSyncTest.java,"@@ -0,0 +1,86 @@
+package org.apache.dubbo.admin.service;","[{'comment': 'Apache license announcement is required here.', 'commenter': 'biyuhao'}, {'comment': 'ok', 'commenter': 'sunbufu'}]"
268,dubbo-admin-backend/src/test/java/org/apache/dubbo/admin/common/util/CoderUtilTest.java,"@@ -0,0 +1,50 @@
+package org.apache.dubbo.admin.common.util;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;","[{'comment': 'remove *', 'commenter': 'lovepoem'}, {'comment': 'ok', 'commenter': 'sunbufu'}]"
311,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/service/impl/GenericServiceImpl.java,"@@ -17,39 +17,74 @@
 
 package org.apache.dubbo.admin.service.impl;
 
+import org.apache.dubbo.admin.common.util.Constants;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
+import org.apache.dubbo.config.context.ConfigManager;
 import org.apache.dubbo.registry.Registry;
 import org.apache.dubbo.rpc.service.GenericService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
-import javax.annotation.PostConstruct;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 @Component
 public class GenericServiceImpl {
-    private ApplicationConfig applicationConfig;
+
+    private static final Map<String, ReferenceConfig<GenericService>> referenceConfigMap = new ConcurrentHashMap<>();","[{'comment': 'Dubbo admin 里面把服务引用缓存起来个人觉得不太合理，因为服务的调用频率并不高，而且很多服务也就偶尔调用一次，缓存起来似乎没必要，在这里调用稍微慢一点我觉得是可以接受的', 'commenter': 'kexianjun'}, {'comment': '官方文档推荐使用缓存而不是每次都创建\r\n// 引用远程服务 \r\n// 该实例很重量，里面封装了所有与注册中心及服务提供方连接，请缓存\r\n[http://dubbo.incubator.apache.org/zh-cn/docs/user/demos/generic-reference.html](url)', 'commenter': 'qq925716471'}, {'comment': '官方文档推荐这么做应该是在调用量很大的时候避免重复的执行服务引用的过程，和这里的场景我觉得是不一样的. 试想一个场景，一般 Dubbo admin 一个注册中心部署一套，很多服务都会注册上来， 可能开发调试的时候会用一下这个功能，而且调用次数也很少，缓存下来以后久而久之，缓存的数据会越来越多，真正用到的可能就只有最新注册上来的那么几个服务', 'commenter': 'kexianjun'}, {'comment': '这个缓存我先去掉吧', 'commenter': 'qq925716471'}]"
341,dubbo-admin-ui/src/components/test/ServiceTest.vue,"@@ -230,7 +237,7 @@
     mounted () {
       this.$store.dispatch('loadServiceItems')
       let query = this.$route.query
-      this.filter = query['service']
+      this.filter = query['service'] ? query['service'] : ''","[{'comment': ""`query['service'] ? query['service'] : ''` can be replaced with a simpler way `query['service'] || ''`"", 'commenter': 'kezhenxu94'}]"
359,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/MetricsCollectController.java,"@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.admin.controller;
+
+import com.google.gson.Gson;
+import com.google.gson.reflect.TypeToken;
+import org.apache.dubbo.admin.model.dto.MetricDTO;
+import org.apache.dubbo.admin.service.ConsumerService;
+import org.apache.dubbo.admin.service.ProviderService;
+import org.apache.dubbo.admin.service.impl.MetrcisCollectServiceImpl;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+
+
+@RestController
+@RequestMapping(""/api/{env}/metrics"")","[{'comment': 'please add path variable `env` for every method', 'commenter': 'nzomkxia'}]"
383,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/AccessesController.java,"@@ -66,8 +66,10 @@ public AccessesController(RouteService routeService, ProviderService providerSer
         AccessDTO accessDTO;
         if (StringUtils.isNotBlank(application)) {
             accessDTO = routeService.findAccess(application);
-        } else {
+        } else if (StringUtils.isNotBlank(service)) {","[{'comment': 'this is not needed', 'commenter': 'nzomkxia'}, {'comment': 'ok', 'commenter': 'zhaixiaoxiang'}]"
383,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/LoadBalanceController.java,"@@ -92,8 +92,10 @@ public boolean updateLoadbalance(@PathVariable String id, @RequestBody Balancing
         BalancingDTO balancingDTO;
         if (StringUtils.isNotBlank(application)) {
             balancingDTO = overrideService.findBalance(application);
-        } else {
+        } else if (StringUtils.isNotBlank(service)) {
             balancingDTO = overrideService.findBalance(service);
+        } else {
+            throw new ParamValidationException(""Either Service or application is required."");
         }","[{'comment': 'this is not needed', 'commenter': 'nzomkxia'}, {'comment': 'ok', 'commenter': 'zhaixiaoxiang'}]"
383,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/OverridesController.java,"@@ -87,6 +87,8 @@ public boolean updateOverride(@PathVariable String id, @RequestBody DynamicConfi
             override = overrideService.findOverride(service);
         } else if(StringUtils.isNotEmpty(application)){","[{'comment': '`notBlank` is better', 'commenter': 'nzomkxia'}, {'comment': 'ok', 'commenter': 'zhaixiaoxiang'}]"
383,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/WeightController.java,"@@ -89,8 +89,10 @@ public boolean updateWeight(@PathVariable String id, @RequestBody WeightDTO weig
         WeightDTO weightDTO;
         if (StringUtils.isNotBlank(application)) {
             weightDTO = overrideService.findWeight(application);
-        } else {
+        } else if (StringUtils.isNotBlank(service)) {
             weightDTO = overrideService.findWeight(service);
+        } else {
+            throw new ParamValidationException(""Either Service or application is required."");
         }","[{'comment': 'this is not needed', 'commenter': 'nzomkxia'}, {'comment': 'ok', 'commenter': 'zhaixiaoxiang'}]"
383,dubbo-admin-ui/src/components/governance/AccessControl.vue,"@@ -537,7 +541,9 @@ export default {
       this.filter = query['application']
       this.selected = 1
     }
-    this.search()
+    if (this.filter !== null) {
+      this.search()
+    }
   },
   components: {
     Breadcrumb,","[{'comment': ""there's no need to add a new method, you can check `this.filter` in `search()`"", 'commenter': 'nzomkxia'}, {'comment': 'I will notify error msg if this.filter === null in this.search(), but here in mounted(), I just need not to call this.search(), other than notify, so I think this modification is ok', 'commenter': 'zhaixiaoxiang'}]"
617,dubbo-admin-ui/src/components/metrics/ServiceMetrics.vue,"@@ -330,7 +330,7 @@
     * */
     methods: {
       submit: function () {
-        this.searchByIp(this.filter, true)
+        this.searchByIp(this.filter, false)","[{'comment': '这个地方请保持原逻辑, 这个问题已经由这个PR解决: https://github.com/apache/dubbo-admin/pull/635', 'commenter': 'KeRan213539'}]"
661,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/MetricsCollectController.java,"@@ -34,16 +33,13 @@
 import org.apache.dubbo.metadata.definition.model.FullServiceDefinition;
 import org.apache.dubbo.metadata.report.identifier.MetadataIdentifier;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;","[{'comment': 'please install codestyle plugin in your ide\r\nclass import with wildcard is not allowed in Dubbo\r\n\r\nyou can check this in https://github.com/apache/dubbo/blob/master/CONTRIBUTING.md', 'commenter': 'AlbumenJ'}, {'comment': 'Ops.. thanks for your comment. changes have been revoked.', 'commenter': 'chrisptang'}]"
661,docker/0.2.0/Dockerfile,"@@ -20,6 +20,6 @@ RUN mvn --batch-mode clean package -Dmaven.test.skip=true
 
 FROM openjdk:8-jre
 LABEL maintainer=""dev@dubbo.apache.org""
-COPY --from=0 /source/dubbo-admin-0.2.0/dubbo-admin-distribution/target/dubbo-admin-0.2.0.jar /app.jar
+COPY --from=0 /source/dubbo-admin-0.2.0/dubbo-admin-server/target/dubbo-admin-server-0.2.0.jar /app.jar","[{'comment': '请不要修改与PR目标无关的文件', 'commenter': 'KeRan213539'}]"
661,docker/latest/Dockerfile,"@@ -13,15 +13,14 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-FROM maven:3-openjdk-8
-RUN mkdir -p /source/dubbo-admin-snapshot
-ADD . /source/dubbo-admin-snapshot
-WORKDIR /source/dubbo-admin-snapshot
-RUN mvn --batch-mode clean package -Dmaven.test.skip=true
+# FROM maven:3-openjdk-8
+# RUN mkdir -p /source/dubbo-admin-snapshot
+# ADD . /source/dubbo-admin-snapshot
+# WORKDIR /source/dubbo-admin-snapshot
+# RUN mvn --batch-mode clean package -Dmaven.test.skip=true
 
-FROM openjdk:8-jre
+FROM openjdk:8-jre-alpine
 LABEL maintainer=""dev@dubbo.apache.org""
-RUN apt-get update && apt-get install -y tini
-COPY --from=0 /source/dubbo-admin-snapshot/dubbo-admin-distribution/target/dubbo-admin-0.3.0-SNAPSHOT.jar /app.jar
-ENTRYPOINT [""tini"",""--"",""java"",""-XX:+UnlockExperimentalVMOptions"",""-XX:+UseCGroupMemoryLimitForHeap"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]
+COPY ./app/dubbo-admin-server-0.3.0-SNAPSHOT.jar /app.jar
+ENTRYPOINT [""java"",""-XX:+UnlockExperimentalVMOptions"",""-XX:+UseCGroupMemoryLimitForHeap"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]","[{'comment': '请不要修改与PR目标无关的文件', 'commenter': 'KeRan213539'}]"
661,docker/latest/Dockerfile.backup,"@@ -0,0 +1,27 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+FROM maven:3-openjdk-8
+RUN mkdir -p /source/dubbo-admin-snapshot
+ADD . /source/dubbo-admin-snapshot
+WORKDIR /source/dubbo-admin-snapshot
+RUN mvn --batch-mode clean package -Dmaven.test.skip=true
+
+FROM openjdk:8-jre
+LABEL maintainer=""dev@dubbo.apache.org""
+RUN apt-get update && apt-get install -y tini
+COPY --from=0 /source/dubbo-admin-snapshot/dubbo-admin-distribution/target/dubbo-admin-0.2.0-SNAPSHOT.jar /app.jar
+ENTRYPOINT [""tini"",""--"",""java"",""-XX:+UnlockExperimentalVMOptions"",""-XX:+UseCGroupMemoryLimitForHeap"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]
+EXPOSE 8080","[{'comment': '请不要修改与PR目标无关的文件', 'commenter': 'KeRan213539'}]"
661,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/MetricsCollectController.java,"@@ -110,7 +112,12 @@ protected void addMetricsConfigToMap(Map<String, String> configMap, String ip) {
             String metaData = providerService.getProviderMetaData(providerIdentifier);
             FullServiceDefinition providerServiceDefinition = new Gson().fromJson(metaData, FullServiceDefinition.class);
             Map<String, String> parameters = providerServiceDefinition.getParameters();
-            configMap.put(parameters.get(Constants.METRICS_PORT), parameters.get(Constants.METRICS_PROTOCOL));
+            if (parameters.containsKey(Constants.METRICS_PORT)) {
+                configMap.put(parameters.get(Constants.METRICS_PORT), parameters.get(Constants.METRICS_PROTOCOL));
+            } else {
+                //using default protocol and port, which is dubbo://20880
+                configMap.put(""20880"", ""dubbo"");
+            }","[{'comment': '这里是不是应该对前端提示缺少参数,而不是给默认值?', 'commenter': 'KeRan213539'}]"
661,dubbo-admin-server/src/main/resources/application.properties,"@@ -16,9 +16,9 @@
 #
 
 # centers in dubbo2.7
-admin.registry.address=zookeeper://127.0.0.1:2183
-admin.config-center=zookeeper://127.0.0.1:2183
-admin.metadata-report.address=zookeeper://127.0.0.1:2183
+admin.registry.address=zookeeper://127.0.0.1:2181
+admin.config-center=zookeeper://127.0.0.1:2181
+admin.metadata-report.address=zookeeper://127.0.0.1:2181","[{'comment': '请不要把本地的改动的配制放到PR里', 'commenter': 'KeRan213539'}]"
661,dubbo-admin-server/src/main/resources/logback-spring.xml,"@@ -16,30 +16,31 @@
   limitations under the License.
   -->
 <configuration>
-    <property name=""LOG_FILE"" value=""dubbo-governance.log""/>
-    <property name=""LOG_FILE_MAX_HISTORY"" value=""7""/>
+    <property name=""LOG_HOME"" value=""${user.home}/logs/dubbo-admin""/>
 
-    <include resource=""org/springframework/boot/logging/logback/defaults.xml""/>
-    <include resource=""org/springframework/boot/logging/logback/console-appender.xml""/>
-    <include resource=""org/springframework/boot/logging/logback/file-appender.xml""/>
-
-    <logger name=""org.apache"" level=""WARN""/>
-
-    <appender name=""FILE-LOG-ASYNC"" class=""ch.qos.logback.classic.AsyncAppender"">
-        <discardingThreshold>0</discardingThreshold>
-        <queueSize>2048</queueSize>
-        <appender-ref ref=""FILE""/>
+    <appender name=""STDOUT"" class=""ch.qos.logback.core.ConsoleAppender"">
+        <encoder>
+            <pattern>[%d %-5level %thread %class{0}:%line] %msg%n</pattern>
+        </encoder>
     </appender>
 
-    <appender name=""CONSOLE-LOG-ASYNC"" class=""ch.qos.logback.classic.AsyncAppender"">
-        <discardingThreshold>0</discardingThreshold>
-        <queueSize>2048</queueSize>
-        <appender-ref ref=""CONSOLE""/>
+    <appender name=""appender.main""
+              class=""ch.qos.logback.core.rolling.RollingFileAppender"">
+        <append>true</append>
+        <file>${LOG_HOME}/dubbo-admin.log</file>
+        <rollingPolicy class=""ch.qos.logback.core.rolling.TimeBasedRollingPolicy"">
+            <fileNamePattern>${LOG_HOME}/rolling/dubbo-admin-%d{yyyyMMdd}.log</fileNamePattern>
+        </rollingPolicy>
+        <encoder>
+            <pattern>[%d{yyyy-MM-dd HH:mm:ss} %-5level %thread %class{0}:%line] %msg%n</pattern>
+        </encoder>
     </appender>
 
-    <root level=""INFO"">
-        <appender-ref ref=""CONSOLE-LOG-ASYNC""/>
-        <appender-ref ref=""FILE-LOG-ASYNC""/>
+    <logger name=""org.example.examplewebapp"" level=""DEBUG""/>
+
+    <root level=""info"">
+        <appender-ref ref=""STDOUT""/>
+        <appender-ref ref=""appender.main""/>
     </root>","[{'comment': '请不要把本地的改动放到PR里', 'commenter': 'KeRan213539'}]"
661,dubbo-admin-server/src/test/java/org/apache/dubbo/admin/controller/ManagementControllerTest.java,"@@ -37,158 +38,159 @@
 import java.util.stream.Collectors;
 
 import static org.hamcrest.Matchers.hasSize;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.when;
 
 public class ManagementControllerTest extends AbstractSpringIntegrationTest {
-  private final String env = ""whatever"";
+    private final String env = ""whatever"";
+
+    @MockBean
+    private ProviderService providerService;
 
-  @MockBean
-  private ProviderService providerService;
+    @After
+    public void tearDown() throws Exception {
+        if (zkClient.checkExists().forPath(""/dubbo"") != null) {
+            zkClient.delete().deletingChildrenIfNeeded().forPath(""/dubbo"");
+        }
+    }
 
-  @After
-  public void tearDown() throws Exception {
-    if (zkClient.checkExists().forPath(""/dubbo"") != null) {
-      zkClient.delete().deletingChildrenIfNeeded().forPath(""/dubbo"");
+    @Test
+    public void shouldCreateGlobalConfig() throws Exception {
+        ConfigDTO configDTO = new ConfigDTO();
+        configDTO.setKey(Constants.GLOBAL_CONFIG);
+        configDTO.setConfig(""key1=val1\nkey2=val2"");
+        ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
+                url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
+        assertEquals(responseEntity.getBody(), true);
+
+        byte[] bytes = zkClient.getData().forPath(getPath(""""));
+        String config = new String(bytes);
+        assertEquals(configDTO.getConfig(), config);
+
+        zkClient.delete().forPath(getPath(""""));
     }
-  }
-
-  @Test
-  public void shouldCreateGlobalConfig() throws Exception {
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(Constants.GLOBAL_CONFIG);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
-        url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
-    assertEquals(responseEntity.getBody(), true);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(""""));
-    String config = new String(bytes);
-    assertEquals(configDTO.getConfig(), config);
-
-    zkClient.delete().forPath(getPath(""""));
-  }
-
-  @Test
-  public void shouldCreateApplicationConfig() throws Exception {
-    String uuid = UUID.randomUUID().toString();
-    String application = ""dubbo-admin"" + uuid;
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(application);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
-        url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
-    assertEquals(responseEntity.getBody(), true);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(application));
-    String config = new String(bytes);
-    assertEquals(configDTO.getConfig(), config);
-  }
-
-  @Test
-  public void shouldThrowWhenUpdateNonExistedConfigKey() {
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(Constants.GLOBAL_CONFIG);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Void> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.PUT,
-        new HttpEntity<>(configDTO), Void.class, env, ""non-existed""
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.NOT_FOUND);
-  }
-
-  @Test
-  public void shouldUpdateConfigSpecifiedKey() throws Exception {
-    String key = ""shouldUpdateConfigSpecifiedKey"";
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(key);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    restTemplate.postForEntity(url(""/api/{env}/manage/config""), configDTO, Boolean.class, env);
-
-    configDTO.setConfig(""key1=updatedVal1\nkey2=updatedVal2"");
-    ResponseEntity<Void> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.PUT,
-        new HttpEntity<>(configDTO), Void.class, env, key
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(key));
-    String config = new String(bytes);
-    assertEquals(""key1=updatedVal1\nkey2=updatedVal2"", config);
-  }
-
-  @Test
-  public void shouldGetAllConfig() throws Exception {
-    int num = 20;
-    List<ConfigDTO> configDTOs = new ArrayList<>(num);
-    for (int i = 0; i < num; i++) {
-      ConfigDTO configDTO = new ConfigDTO();
-      configDTO.setKey(""key"" + i);
-      configDTO.setConfig(""key1=val1\nkey2=val2"");
-      configDTOs.add(configDTO);
-
-      String path = getPath(configDTO.getKey());
-      if (zkClient.checkExists().forPath(path) == null) {
-        zkClient.create().creatingParentsIfNeeded().forPath(path);
-      }
-      zkClient.setData().forPath(path, configDTO.getConfig().getBytes());","[{'comment': '为什么要删除之前的测试?这个PR的改动需要改变原来的测试逻辑吗?', 'commenter': 'KeRan213539'}]"
661,dubbo-admin-server/src/test/java/org/apache/dubbo/admin/controller/ManagementControllerTest.java,"@@ -37,158 +38,159 @@
 import java.util.stream.Collectors;
 
 import static org.hamcrest.Matchers.hasSize;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.when;
 
 public class ManagementControllerTest extends AbstractSpringIntegrationTest {
-  private final String env = ""whatever"";
+    private final String env = ""whatever"";
+
+    @MockBean
+    private ProviderService providerService;
 
-  @MockBean
-  private ProviderService providerService;
+    @After
+    public void tearDown() throws Exception {
+        if (zkClient.checkExists().forPath(""/dubbo"") != null) {
+            zkClient.delete().deletingChildrenIfNeeded().forPath(""/dubbo"");
+        }
+    }
 
-  @After
-  public void tearDown() throws Exception {
-    if (zkClient.checkExists().forPath(""/dubbo"") != null) {
-      zkClient.delete().deletingChildrenIfNeeded().forPath(""/dubbo"");
+    @Test
+    public void shouldCreateGlobalConfig() throws Exception {
+        ConfigDTO configDTO = new ConfigDTO();
+        configDTO.setKey(Constants.GLOBAL_CONFIG);
+        configDTO.setConfig(""key1=val1\nkey2=val2"");
+        ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
+                url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
+        assertEquals(responseEntity.getBody(), true);
+
+        byte[] bytes = zkClient.getData().forPath(getPath(""""));
+        String config = new String(bytes);
+        assertEquals(configDTO.getConfig(), config);
+
+        zkClient.delete().forPath(getPath(""""));
     }
-  }
-
-  @Test
-  public void shouldCreateGlobalConfig() throws Exception {
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(Constants.GLOBAL_CONFIG);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
-        url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
-    assertEquals(responseEntity.getBody(), true);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(""""));
-    String config = new String(bytes);
-    assertEquals(configDTO.getConfig(), config);
-
-    zkClient.delete().forPath(getPath(""""));
-  }
-
-  @Test
-  public void shouldCreateApplicationConfig() throws Exception {
-    String uuid = UUID.randomUUID().toString();
-    String application = ""dubbo-admin"" + uuid;
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(application);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
-        url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
-    assertEquals(responseEntity.getBody(), true);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(application));
-    String config = new String(bytes);
-    assertEquals(configDTO.getConfig(), config);
-  }
-
-  @Test
-  public void shouldThrowWhenUpdateNonExistedConfigKey() {
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(Constants.GLOBAL_CONFIG);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Void> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.PUT,
-        new HttpEntity<>(configDTO), Void.class, env, ""non-existed""
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.NOT_FOUND);
-  }
-
-  @Test
-  public void shouldUpdateConfigSpecifiedKey() throws Exception {
-    String key = ""shouldUpdateConfigSpecifiedKey"";
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(key);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    restTemplate.postForEntity(url(""/api/{env}/manage/config""), configDTO, Boolean.class, env);
-
-    configDTO.setConfig(""key1=updatedVal1\nkey2=updatedVal2"");
-    ResponseEntity<Void> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.PUT,
-        new HttpEntity<>(configDTO), Void.class, env, key
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(key));
-    String config = new String(bytes);
-    assertEquals(""key1=updatedVal1\nkey2=updatedVal2"", config);
-  }
-
-  @Test
-  public void shouldGetAllConfig() throws Exception {
-    int num = 20;
-    List<ConfigDTO> configDTOs = new ArrayList<>(num);
-    for (int i = 0; i < num; i++) {
-      ConfigDTO configDTO = new ConfigDTO();
-      configDTO.setKey(""key"" + i);
-      configDTO.setConfig(""key1=val1\nkey2=val2"");
-      configDTOs.add(configDTO);
-
-      String path = getPath(configDTO.getKey());
-      if (zkClient.checkExists().forPath(path) == null) {
-        zkClient.create().creatingParentsIfNeeded().forPath(path);
-      }
-      zkClient.setData().forPath(path, configDTO.getConfig().getBytes());
+
+    @Test
+    public void shouldCreateApplicationConfig() throws Exception {
+        String uuid = UUID.randomUUID().toString();
+        String application = ""dubbo-admin"" + uuid;
+        ConfigDTO configDTO = new ConfigDTO();
+        configDTO.setKey(application);
+        configDTO.setConfig(""key1=val1\nkey2=val2"");
+        ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
+                url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
+        assertEquals(responseEntity.getBody(), true);
+
+        byte[] bytes = zkClient.getData().forPath(getPath(application));
+        String config = new String(bytes);
+        assertEquals(configDTO.getConfig(), config);
     }
-    when(providerService.findApplications())
-        .thenReturn(configDTOs.stream().map(ConfigDTO::getKey).collect(Collectors.toSet()));
-
-    ResponseEntity<List<ConfigDTO>> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.GET,
-        null, new ParameterizedTypeReference<List<ConfigDTO>>() {
-        }, env, ""*""
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
-    assertThat(responseEntity.getBody(), hasSize(num));
-  }
-
-  @Test
-  public void shouldDeleteConfig() throws Exception {
-    int num = 20;
-    List<ConfigDTO> configDTOs = new ArrayList<>(num);
-    for (int i = 0; i < num; i++) {
-      ConfigDTO configDTO = new ConfigDTO();
-      configDTO.setKey(""shouldDeleteConfigKey"" + i);
-      configDTO.setConfig(""key1=val1\nkey2=val2"");
-      configDTOs.add(configDTO);
-
-      String path = getPath(configDTO.getKey());
-      if (zkClient.checkExists().forPath(path) == null) {
-        zkClient.create().creatingParentsIfNeeded().forPath(path);
-      }
-      zkClient.setData().forPath(path, configDTO.getConfig().getBytes());","[{'comment': '同上', 'commenter': 'KeRan213539'}]"
661,dubbo-admin-server/src/test/java/org/apache/dubbo/admin/controller/ManagementControllerTest.java,"@@ -37,158 +38,159 @@
 import java.util.stream.Collectors;
 
 import static org.hamcrest.Matchers.hasSize;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.when;
 
 public class ManagementControllerTest extends AbstractSpringIntegrationTest {
-  private final String env = ""whatever"";
+    private final String env = ""whatever"";
+
+    @MockBean
+    private ProviderService providerService;
 
-  @MockBean
-  private ProviderService providerService;
+    @After
+    public void tearDown() throws Exception {
+        if (zkClient.checkExists().forPath(""/dubbo"") != null) {
+            zkClient.delete().deletingChildrenIfNeeded().forPath(""/dubbo"");
+        }
+    }
 
-  @After
-  public void tearDown() throws Exception {
-    if (zkClient.checkExists().forPath(""/dubbo"") != null) {
-      zkClient.delete().deletingChildrenIfNeeded().forPath(""/dubbo"");
+    @Test
+    public void shouldCreateGlobalConfig() throws Exception {
+        ConfigDTO configDTO = new ConfigDTO();
+        configDTO.setKey(Constants.GLOBAL_CONFIG);
+        configDTO.setConfig(""key1=val1\nkey2=val2"");
+        ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
+                url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
+        assertEquals(responseEntity.getBody(), true);
+
+        byte[] bytes = zkClient.getData().forPath(getPath(""""));
+        String config = new String(bytes);
+        assertEquals(configDTO.getConfig(), config);
+
+        zkClient.delete().forPath(getPath(""""));
     }
-  }
-
-  @Test
-  public void shouldCreateGlobalConfig() throws Exception {
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(Constants.GLOBAL_CONFIG);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
-        url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
-    assertEquals(responseEntity.getBody(), true);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(""""));
-    String config = new String(bytes);
-    assertEquals(configDTO.getConfig(), config);
-
-    zkClient.delete().forPath(getPath(""""));
-  }
-
-  @Test
-  public void shouldCreateApplicationConfig() throws Exception {
-    String uuid = UUID.randomUUID().toString();
-    String application = ""dubbo-admin"" + uuid;
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(application);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
-        url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
-    assertEquals(responseEntity.getBody(), true);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(application));
-    String config = new String(bytes);
-    assertEquals(configDTO.getConfig(), config);
-  }
-
-  @Test
-  public void shouldThrowWhenUpdateNonExistedConfigKey() {
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(Constants.GLOBAL_CONFIG);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    ResponseEntity<Void> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.PUT,
-        new HttpEntity<>(configDTO), Void.class, env, ""non-existed""
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.NOT_FOUND);
-  }
-
-  @Test
-  public void shouldUpdateConfigSpecifiedKey() throws Exception {
-    String key = ""shouldUpdateConfigSpecifiedKey"";
-    ConfigDTO configDTO = new ConfigDTO();
-    configDTO.setKey(key);
-    configDTO.setConfig(""key1=val1\nkey2=val2"");
-    restTemplate.postForEntity(url(""/api/{env}/manage/config""), configDTO, Boolean.class, env);
-
-    configDTO.setConfig(""key1=updatedVal1\nkey2=updatedVal2"");
-    ResponseEntity<Void> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.PUT,
-        new HttpEntity<>(configDTO), Void.class, env, key
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
-
-    byte[] bytes = zkClient.getData().forPath(getPath(key));
-    String config = new String(bytes);
-    assertEquals(""key1=updatedVal1\nkey2=updatedVal2"", config);
-  }
-
-  @Test
-  public void shouldGetAllConfig() throws Exception {
-    int num = 20;
-    List<ConfigDTO> configDTOs = new ArrayList<>(num);
-    for (int i = 0; i < num; i++) {
-      ConfigDTO configDTO = new ConfigDTO();
-      configDTO.setKey(""key"" + i);
-      configDTO.setConfig(""key1=val1\nkey2=val2"");
-      configDTOs.add(configDTO);
-
-      String path = getPath(configDTO.getKey());
-      if (zkClient.checkExists().forPath(path) == null) {
-        zkClient.create().creatingParentsIfNeeded().forPath(path);
-      }
-      zkClient.setData().forPath(path, configDTO.getConfig().getBytes());
+
+    @Test
+    public void shouldCreateApplicationConfig() throws Exception {
+        String uuid = UUID.randomUUID().toString();
+        String application = ""dubbo-admin"" + uuid;
+        ConfigDTO configDTO = new ConfigDTO();
+        configDTO.setKey(application);
+        configDTO.setConfig(""key1=val1\nkey2=val2"");
+        ResponseEntity<Boolean> responseEntity = restTemplate.postForEntity(
+                url(""/api/{env}/manage/config""), configDTO, Boolean.class, env
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.CREATED);
+        assertEquals(responseEntity.getBody(), true);
+
+        byte[] bytes = zkClient.getData().forPath(getPath(application));
+        String config = new String(bytes);
+        assertEquals(configDTO.getConfig(), config);
     }
-    when(providerService.findApplications())
-        .thenReturn(configDTOs.stream().map(ConfigDTO::getKey).collect(Collectors.toSet()));
-
-    ResponseEntity<List<ConfigDTO>> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.GET,
-        null, new ParameterizedTypeReference<List<ConfigDTO>>() {
-        }, env, ""*""
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
-    assertThat(responseEntity.getBody(), hasSize(num));
-  }
-
-  @Test
-  public void shouldDeleteConfig() throws Exception {
-    int num = 20;
-    List<ConfigDTO> configDTOs = new ArrayList<>(num);
-    for (int i = 0; i < num; i++) {
-      ConfigDTO configDTO = new ConfigDTO();
-      configDTO.setKey(""shouldDeleteConfigKey"" + i);
-      configDTO.setConfig(""key1=val1\nkey2=val2"");
-      configDTOs.add(configDTO);
-
-      String path = getPath(configDTO.getKey());
-      if (zkClient.checkExists().forPath(path) == null) {
-        zkClient.create().creatingParentsIfNeeded().forPath(path);
-      }
-      zkClient.setData().forPath(path, configDTO.getConfig().getBytes());
+
+    @Test
+    public void shouldThrowWhenUpdateNonExistedConfigKey() {
+        ConfigDTO configDTO = new ConfigDTO();
+        configDTO.setKey(Constants.GLOBAL_CONFIG);
+        configDTO.setConfig(""key1=val1\nkey2=val2"");
+        ResponseEntity<Void> responseEntity = restTemplate.exchange(
+                url(""/api/{env}/manage/config/{key}""), HttpMethod.PUT,
+                new HttpEntity<>(configDTO), Void.class, env, ""non-existed""
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.NOT_FOUND);
+    }
+
+    @Test
+    public void shouldUpdateConfigSpecifiedKey() throws Exception {
+        String key = ""shouldUpdateConfigSpecifiedKey"";
+        ConfigDTO configDTO = new ConfigDTO();
+        configDTO.setKey(key);
+        configDTO.setConfig(""key1=val1\nkey2=val2"");
+        restTemplate.postForEntity(url(""/api/{env}/manage/config""), configDTO, Boolean.class, env);
+
+        configDTO.setConfig(""key1=updatedVal1\nkey2=updatedVal2"");
+        ResponseEntity<Void> responseEntity = restTemplate.exchange(
+                url(""/api/{env}/manage/config/{key}""), HttpMethod.PUT,
+                new HttpEntity<>(configDTO), Void.class, env, key
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
+
+        byte[] bytes = zkClient.getData().forPath(getPath(key));
+        String config = new String(bytes);
+        assertEquals(""key1=updatedVal1\nkey2=updatedVal2"", config);
+    }
+
+    @Test
+    public void shouldGetAllConfig() throws Exception {
+        int num = 20;
+        List<ConfigDTO> configDTOs = new ArrayList<>(num);
+        for (int i = 0; i < num; i++) {
+            ConfigDTO configDTO = new ConfigDTO();
+            configDTO.setKey(""key"" + i);
+            configDTO.setConfig(""key1=val1\nkey2=val2"");
+            configDTOs.add(configDTO);
+
+            String path = getPath(configDTO.getKey());
+            if (zkClient.checkExists().forPath(path) == null) {
+                zkClient.create().creatingParentsIfNeeded().forPath(path);
+            }
+            zkClient.setData().forPath(path, configDTO.getConfig().getBytes());
+        }
+        when(providerService.findApplications())
+                .thenReturn(configDTOs.stream().map(ConfigDTO::getKey).collect(Collectors.toSet()));
+
+        ResponseEntity<List<ConfigDTO>> responseEntity = restTemplate.exchange(
+                url(""/api/{env}/manage/config/{key}""), HttpMethod.GET,
+                null, new ParameterizedTypeReference<List<ConfigDTO>>() {
+                }, env, ""*""
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
+        assertThat(responseEntity.getBody(), hasSize(num));
+    }
+
+    @Test
+    public void shouldDeleteConfig() throws Exception {
+        int num = 20;
+        List<ConfigDTO> configDTOs = new ArrayList<>(num);
+        for (int i = 0; i < num; i++) {
+            ConfigDTO configDTO = new ConfigDTO();
+            configDTO.setKey(""shouldDeleteConfigKey"" + i);
+            configDTO.setConfig(""key1=val1\nkey2=val2"");
+            configDTOs.add(configDTO);
+
+            String path = getPath(configDTO.getKey());
+            if (zkClient.checkExists().forPath(path) == null) {
+                zkClient.create().creatingParentsIfNeeded().forPath(path);
+            }
+            zkClient.setData().forPath(path, configDTO.getConfig().getBytes());
+        }
+        when(providerService.findApplications())
+                .thenReturn(configDTOs.stream().map(ConfigDTO::getKey).collect(Collectors.toSet()));
+
+        restTemplate.delete(url(""/api/{env}/manage/config/{key}""), env, ""shouldDeleteConfigKey1"");
+        ResponseEntity<List<ConfigDTO>> responseEntity = restTemplate.exchange(
+                url(""/api/{env}/manage/config/{key}""), HttpMethod.GET,
+                null, new ParameterizedTypeReference<List<ConfigDTO>>() {
+                }, env, ""*""
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
+        assertThat(responseEntity.getBody(), hasSize(num - 1));
+
+        restTemplate.delete(url(""/api/{env}/manage/config/{key}""), env, ""shouldDeleteConfigKey10"");
+        responseEntity = restTemplate.exchange(
+                url(""/api/{env}/manage/config/{key}""), HttpMethod.GET,
+                null, new ParameterizedTypeReference<List<ConfigDTO>>() {
+                }, env, ""*""
+        );
+        assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
+        assertThat(responseEntity.getBody(), hasSize(num - 2));
+    }
+
+    private String getPath(String key) {
+        key = StringUtils.isNotEmpty(key) ? key + Constants.PATH_SEPARATOR + Constants.DUBBO_PROPERTY : Constants.DUBBO_PROPERTY;
+        return ""/dubbo/"" + Constants.CONFIG_KEY + Constants.PATH_SEPARATOR + key;
     }
-    when(providerService.findApplications())
-        .thenReturn(configDTOs.stream().map(ConfigDTO::getKey).collect(Collectors.toSet()));
-
-    restTemplate.delete(url(""/api/{env}/manage/config/{key}""), env, ""shouldDeleteConfigKey1"");
-    ResponseEntity<List<ConfigDTO>> responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.GET,
-        null, new ParameterizedTypeReference<List<ConfigDTO>>() {
-        }, env, ""*""
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
-    assertThat(responseEntity.getBody(), hasSize(num - 1));
-
-    restTemplate.delete(url(""/api/{env}/manage/config/{key}""), env, ""shouldDeleteConfigKey10"");
-    responseEntity = restTemplate.exchange(
-        url(""/api/{env}/manage/config/{key}""), HttpMethod.GET,
-        null, new ParameterizedTypeReference<List<ConfigDTO>>() {
-        }, env, ""*""
-    );
-    assertEquals(responseEntity.getStatusCode(), HttpStatus.OK);
-    assertThat(responseEntity.getBody(), hasSize(num - 2));
-  }
-
-  private String getPath(String key) {
-    key =  StringUtils.isNotEmpty(key) ? key + Constants.PATH_SEPARATOR  + Constants.DUBBO_PROPERTY : Constants.DUBBO_PROPERTY;
-    return ""/dubbo/"" + Constants.CONFIG_KEY + Constants.PATH_SEPARATOR + key;
-  }","[{'comment': '同上', 'commenter': 'KeRan213539'}]"
661,pom.xml,"@@ -16,346 +16,346 @@
   ~  limitations under the License.
   -->
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
-	<modelVersion>4.0.0</modelVersion>
+    <modelVersion>4.0.0</modelVersion>
 
-	<groupId>org.apache.dubbo</groupId>
-	<artifactId>dubbo-admin</artifactId>
-	<version>${revision}</version>
+    <groupId>org.apache.dubbo</groupId>
+    <artifactId>dubbo-admin</artifactId>
+    <version>${revision}</version>
     <modules>
         <module>dubbo-admin-ui</module>
         <module>dubbo-admin-server</module>
         <module>dubbo-admin-distribution</module>
         <module>dubbo-admin-test</module>
     </modules>
-	<packaging>pom</packaging>
+    <packaging>pom</packaging>
 
-	<name>dubbo-admin</name>
-	<description>Dubbo admin front and back end</description>
+    <name>dubbo-admin</name>
+    <description>Dubbo admin front and back end</description>
 
-	<parent>
-		<groupId>org.apache</groupId>
-		<artifactId>apache</artifactId>
-		<version>19</version>
-	</parent>
+    <parent>
+        <groupId>org.apache</groupId>
+        <artifactId>apache</artifactId>
+        <version>19</version>
+    </parent>
 
-	<repositories>
-		<repository>
-			<id>apache.snapshots.https</id>
-			<name>Apache Development Snapshot Repository</name>
-			<url>https://repository.apache.org/content/repositories/snapshots</url>
-			<releases>
-				<enabled>false</enabled>
-			</releases>
-			<snapshots>
-				<enabled>true</enabled>
-			</snapshots>
-		</repository>
-	</repositories>
+    <repositories>
+        <repository>
+            <id>apache.snapshots.https</id>
+            <name>Apache Development Snapshot Repository</name>
+            <url>https://repository.apache.org/content/repositories/snapshots</url>
+            <releases>
+                <enabled>false</enabled>
+            </releases>
+            <snapshots>
+                <enabled>true</enabled>
+            </snapshots>
+        </repository>
+    </repositories>
 
-	<properties>
-		<revision>0.3.0-SNAPSHOT</revision>
-		<main.basedir>${project.basedir}</main.basedir>
-		<commons-lang3-version>3.7</commons-lang3-version>
-		<dubbo-version>2.7.8</dubbo-version>
-		<curator-version>2.12.0</curator-version>
-		<curator-test-version>4.1.0</curator-test-version>
-		<fastjson-version>1.2.67</fastjson-version>
-		<springfox-swagger-version>2.9.2</springfox-swagger-version>
-		<netty-version>4.1.42.Final</netty-version>
-		<jacoco-version>0.8.2</jacoco-version>
-		<jedis-version>2.9.0</jedis-version>
-		<apollo-version>1.2.0</apollo-version>
-		<consul-version>1.4.2</consul-version>
-		<consul-embedded-version>2.0.0</consul-embedded-version>
-		<nacos-version>1.0.0</nacos-version>
-		<guava-version>20.0</guava-version>
-		<snakeyaml-version>1.24</snakeyaml-version>
-		<maven-checkstyle-plugin-version>3.0.0</maven-checkstyle-plugin-version>
-		<spring-boot-version>2.1.4.RELEASE</spring-boot-version>
-		<maven_compiler_version>3.6.0</maven_compiler_version>
-		<maven-flatten-version>1.1.0</maven-flatten-version>
+    <properties>
+        <revision>0.3.0-SNAPSHOT</revision>
+        <main.basedir>${project.basedir}</main.basedir>
+        <commons-lang3-version>3.7</commons-lang3-version>
+        <dubbo-version>2.7.8</dubbo-version>
+        <curator-version>2.12.0</curator-version>
+        <curator-test-version>4.1.0</curator-test-version>
+        <fastjson-version>1.2.67</fastjson-version>
+        <springfox-swagger-version>2.9.2</springfox-swagger-version>
+        <netty-version>4.1.42.Final</netty-version>
+        <jacoco-version>0.8.2</jacoco-version>
+        <jedis-version>2.9.0</jedis-version>
+        <apollo-version>1.2.0</apollo-version>
+        <consul-version>1.4.2</consul-version>
+        <consul-embedded-version>2.0.0</consul-embedded-version>
+        <nacos-version>1.0.0</nacos-version>
+        <guava-version>20.0</guava-version>
+        <snakeyaml-version>1.24</snakeyaml-version>
+        <maven-checkstyle-plugin-version>3.0.0</maven-checkstyle-plugin-version>
+        <spring-boot-version>2.1.4.RELEASE</spring-boot-version>
+        <maven_compiler_version>3.6.0</maven_compiler_version>
+        <maven-flatten-version>1.1.0</maven-flatten-version>
 
-		<java_source_version>1.8</java_source_version>
-		<java_target_version>1.8</java_target_version>
-		<file_encoding>UTF-8</file_encoding>
-		<checkstyle.skip>true</checkstyle.skip>
-		<rat.skip>true</rat.skip>
-	</properties>
+        <java_source_version>1.8</java_source_version>
+        <java_target_version>1.8</java_target_version>
+        <file_encoding>UTF-8</file_encoding>
+        <checkstyle.skip>true</checkstyle.skip>
+        <rat.skip>true</rat.skip>
+    </properties>
 
-	<dependencyManagement>
+    <dependencyManagement>
         <dependencies>
-			<dependency>
-				<groupId>org.yaml</groupId>
-				<artifactId>snakeyaml</artifactId>
-				<version>${snakeyaml-version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.springframework.boot</groupId>
-				<artifactId>spring-boot-starter-parent</artifactId>
-				<version>${spring-boot-version}</version>
-				<scope>import</scope>
-				<type>pom</type>
-			</dependency>
-			<dependency>
-				<groupId>redis.clients</groupId>
-				<artifactId>jedis</artifactId>
-				<version>${jedis-version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.apache.commons</groupId>
-				<artifactId>commons-lang3</artifactId>
-				<version>${commons-lang3-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>org.yaml</groupId>
+                <artifactId>snakeyaml</artifactId>
+                <version>${snakeyaml-version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-starter-parent</artifactId>
+                <version>${spring-boot-version}</version>
+                <scope>import</scope>
+                <type>pom</type>
+            </dependency>
+            <dependency>
+                <groupId>redis.clients</groupId>
+                <artifactId>jedis</artifactId>
+                <version>${jedis-version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.apache.commons</groupId>
+                <artifactId>commons-lang3</artifactId>
+                <version>${commons-lang3-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>com.ctrip.framework.apollo</groupId>
-				<artifactId>apollo-openapi</artifactId>
-				<version>${apollo-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>com.ctrip.framework.apollo</groupId>
+                <artifactId>apollo-openapi</artifactId>
+                <version>${apollo-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>com.alibaba.nacos</groupId>
-				<artifactId>nacos-client</artifactId>
-				<version>${nacos-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>com.alibaba.nacos</groupId>
+                <artifactId>nacos-client</artifactId>
+                <version>${nacos-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>org.apache.dubbo</groupId>
-				<artifactId>dubbo</artifactId>
-				<version>${dubbo-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>org.apache.dubbo</groupId>
+                <artifactId>dubbo</artifactId>
+                <version>${dubbo-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>org.apache.dubbo</groupId>
-				<artifactId>dubbo-serialization-kryo</artifactId>
-				<version>${dubbo-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>org.apache.dubbo</groupId>
+                <artifactId>dubbo-serialization-kryo</artifactId>
+                <version>${dubbo-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>org.apache.curator</groupId>
-				<artifactId>curator-framework</artifactId>
-				<version>${curator-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>org.apache.curator</groupId>
+                <artifactId>curator-framework</artifactId>
+                <version>${curator-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>org.apache.curator</groupId>
-				<artifactId>curator-test</artifactId>
-				<version>${curator-test-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>org.apache.curator</groupId>
+                <artifactId>curator-test</artifactId>
+                <version>${curator-test-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>org.apache.curator</groupId>
-				<artifactId>curator-recipes</artifactId>
-				<version>${curator-version}</version>
-				<exclusions>
-					<exclusion>
-						<groupId>org.apache.zookeeper</groupId>
-						<artifactId>zookeeper</artifactId>
-					</exclusion>
-				</exclusions>
-			</dependency>
-			<dependency>
-				<groupId>com.alibaba</groupId>
-				<artifactId>fastjson</artifactId>
-				<version>${fastjson-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>org.apache.curator</groupId>
+                <artifactId>curator-recipes</artifactId>
+                <version>${curator-version}</version>
+                <exclusions>
+                    <exclusion>
+                        <groupId>org.apache.zookeeper</groupId>
+                        <artifactId>zookeeper</artifactId>
+                    </exclusion>
+                </exclusions>
+            </dependency>
+            <dependency>
+                <groupId>com.alibaba</groupId>
+                <artifactId>fastjson</artifactId>
+                <version>${fastjson-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>io.springfox</groupId>
-				<artifactId>springfox-swagger2</artifactId>
-				<version>${springfox-swagger-version}</version>
-			</dependency>
-			<dependency>
-				<groupId>io.springfox</groupId>
-				<artifactId>springfox-swagger-ui</artifactId>
-				<version>${springfox-swagger-version}</version>
-			</dependency>
-			<dependency>
-				<groupId>io.netty</groupId>
-				<artifactId>netty-all</artifactId>
-				<version>${netty-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>io.springfox</groupId>
+                <artifactId>springfox-swagger2</artifactId>
+                <version>${springfox-swagger-version}</version>
+            </dependency>
+            <dependency>
+                <groupId>io.springfox</groupId>
+                <artifactId>springfox-swagger-ui</artifactId>
+                <version>${springfox-swagger-version}</version>
+            </dependency>
+            <dependency>
+                <groupId>io.netty</groupId>
+                <artifactId>netty-all</artifactId>
+                <version>${netty-version}</version>
+            </dependency>
 
-			<dependency>
-				<groupId>com.ecwid.consul</groupId>
-				<artifactId>consul-api</artifactId>
-				<version>${consul-version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.pszymczyk.consul</groupId>
-				<artifactId>embedded-consul</artifactId>
-				<version>${consul-embedded-version}</version>
-			</dependency>
+            <dependency>
+                <groupId>com.ecwid.consul</groupId>
+                <artifactId>consul-api</artifactId>
+                <version>${consul-version}</version>
+            </dependency>
+            <dependency>
+                <groupId>com.pszymczyk.consul</groupId>
+                <artifactId>embedded-consul</artifactId>
+                <version>${consul-embedded-version}</version>
+            </dependency>
 
- 			<dependency>
-				<groupId>com.google.guava</groupId>
-				<artifactId>guava</artifactId>
-				<version>${guava-version}</version>
-			</dependency>
-		</dependencies>
-	</dependencyManagement>
+            <dependency>
+                <groupId>com.google.guava</groupId>
+                <artifactId>guava</artifactId>
+                <version>${guava-version}</version>
+            </dependency>
+        </dependencies>
+    </dependencyManagement>
 
-	<profiles>
-		<profile>
-			<id>checkstyle</id>
-			<activation>
-				<jdk>[1.8,)</jdk>
-			</activation>
-			<build>
-				<plugins>
-					<plugin>
-						<groupId>org.apache.maven.plugins</groupId>
-						<artifactId>maven-checkstyle-plugin</artifactId>
-						<version>${maven-checkstyle-plugin-version}</version>
-						<dependencies>
-							<dependency>
-								<groupId>com.puppycrawl.tools</groupId>
-								<artifactId>checkstyle</artifactId>
-								<version>8.18</version>
-							</dependency>
-						</dependencies>
-						<executions>
-							<execution>
-								<id>checkstyle-validation</id>
-								<phase>validate</phase>
-								<configuration>
-									<configLocation>codestyle/checkstyle.xml</configLocation>
-									<encoding>UTF-8</encoding>
-									<consoleOutput>true</consoleOutput>
-									<failOnViolation>true</failOnViolation>
-								</configuration>
-								<goals>
-									<goal>check</goal>
-								</goals>
-							</execution>
-						</executions>
-					</plugin>
-					<plugin>
-						<groupId>org.apache.rat</groupId>
-						<artifactId>apache-rat-plugin</artifactId>
-						<version>0.12</version>
-						<executions>
-							<execution>
-								<id>verify.rat</id>
-								<phase>verify</phase>
-								<goals>
-									<goal>check</goal>
-								</goals>
-								<configuration>
-									<excludes>
-										<exclude>**/*.versionsBackup</exclude>
-										<exclude>**/.idea/</exclude>
-										<exclude>**/*.iml</exclude>
-										<exclude>**/*.txt</exclude>
-										<exclude>**/*.sh</exclude>
-										<exclude>**/*.bat</exclude>
-										<exclude>**/*.md</exclude>
-										<exclude>.git/</exclude>
-										<exclude>**/*.git*</exclude>
-										<exclude>.gitignore</exclude>
-										<exclude>**/.settings/*</exclude>
-										<exclude>**/.classpath</exclude>
-										<exclude>**/*.properties</exclude>
-										<exclude>**/.project</exclude>
-										<exclude>**/target/**</exclude>
-										<exclude>**/*.log</exclude>
-										<exclude>CODE_OF_CONDUCT.md</exclude>
-										<exclude>.codecov.yml</exclude>
-										<exclude>.travis.yml</exclude>
-										<exclude>PULL_REQUEST_TEMPLATE.md</exclude>
-										<exclude>CONTRIBUTING.md</exclude>
-										<exclude>**/codestyle/*</exclude>
-										<exclude>**/node_modules/**</exclude>
-										<exclude>**/.babelrc</exclude>
-										<exclude>**/.editorconfig</exclude>
-										<exclude>**/package-lock.json</exclude>
-										<exclude>**/package.json</exclude>
-										<exclude>**/OpenSans.css</exclude>
-										<exclude>**/.eslintignore</exclude>
-										<exclude>**/.browserslistrc</exclude>
-										<exclude>**/resources/META-INF/**</exclude>
-										<exclude>**/src/main/resources/public/**</exclude>
-										<exclude>**/src/licenses/**</exclude>
-										<exclude>.github/**</exclude>
-										<exclude>**/assets/**</exclude>
-										<exclude>**/yarn.lock</exclude>
-										<exclude>**/node/**</exclude>
-									</excludes>
-								</configuration>
-							</execution>
-						</executions>
-					</plugin>
-				</plugins>
-			</build>
-		</profile>
-	</profiles>
+    <profiles>
+        <profile>
+            <id>checkstyle</id>
+            <activation>
+                <jdk>[1.8,)</jdk>
+            </activation>
+            <build>
+                <plugins>
+                    <plugin>
+                        <groupId>org.apache.maven.plugins</groupId>
+                        <artifactId>maven-checkstyle-plugin</artifactId>
+                        <version>${maven-checkstyle-plugin-version}</version>
+                        <dependencies>
+                            <dependency>
+                                <groupId>com.puppycrawl.tools</groupId>
+                                <artifactId>checkstyle</artifactId>
+                                <version>8.18</version>
+                            </dependency>
+                        </dependencies>
+                        <executions>
+                            <execution>
+                                <id>checkstyle-validation</id>
+                                <phase>validate</phase>
+                                <configuration>
+                                    <configLocation>codestyle/checkstyle.xml</configLocation>
+                                    <encoding>UTF-8</encoding>
+                                    <consoleOutput>true</consoleOutput>
+                                    <failOnViolation>true</failOnViolation>
+                                </configuration>
+                                <goals>
+                                    <goal>check</goal>
+                                </goals>
+                            </execution>
+                        </executions>
+                    </plugin>
+                    <plugin>
+                        <groupId>org.apache.rat</groupId>
+                        <artifactId>apache-rat-plugin</artifactId>
+                        <version>0.12</version>
+                        <executions>
+                            <execution>
+                                <id>verify.rat</id>
+                                <phase>verify</phase>
+                                <goals>
+                                    <goal>check</goal>
+                                </goals>
+                                <configuration>
+                                    <excludes>
+                                        <exclude>**/*.versionsBackup</exclude>
+                                        <exclude>**/.idea/</exclude>
+                                        <exclude>**/*.iml</exclude>
+                                        <exclude>**/*.txt</exclude>
+                                        <exclude>**/*.sh</exclude>
+                                        <exclude>**/*.bat</exclude>
+                                        <exclude>**/*.md</exclude>
+                                        <exclude>.git/</exclude>
+                                        <exclude>**/*.git*</exclude>
+                                        <exclude>.gitignore</exclude>
+                                        <exclude>**/.settings/*</exclude>
+                                        <exclude>**/.classpath</exclude>
+                                        <exclude>**/*.properties</exclude>
+                                        <exclude>**/.project</exclude>
+                                        <exclude>**/target/**</exclude>
+                                        <exclude>**/*.log</exclude>
+                                        <exclude>CODE_OF_CONDUCT.md</exclude>
+                                        <exclude>.codecov.yml</exclude>
+                                        <exclude>.travis.yml</exclude>
+                                        <exclude>PULL_REQUEST_TEMPLATE.md</exclude>
+                                        <exclude>CONTRIBUTING.md</exclude>
+                                        <exclude>**/codestyle/*</exclude>
+                                        <exclude>**/node_modules/**</exclude>
+                                        <exclude>**/.babelrc</exclude>
+                                        <exclude>**/.editorconfig</exclude>
+                                        <exclude>**/package-lock.json</exclude>
+                                        <exclude>**/package.json</exclude>
+                                        <exclude>**/OpenSans.css</exclude>
+                                        <exclude>**/.eslintignore</exclude>
+                                        <exclude>**/.browserslistrc</exclude>
+                                        <exclude>**/resources/META-INF/**</exclude>
+                                        <exclude>**/src/main/resources/public/**</exclude>
+                                        <exclude>**/src/licenses/**</exclude>
+                                        <exclude>.github/**</exclude>
+                                        <exclude>**/assets/**</exclude>
+                                        <exclude>**/yarn.lock</exclude>
+                                        <exclude>**/node/**</exclude>
+                                    </excludes>
+                                </configuration>
+                            </execution>
+                        </executions>
+                    </plugin>
+                </plugins>
+            </build>
+        </profile>
+    </profiles>
 
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>flatten-maven-plugin</artifactId>
-				<version>${maven-flatten-version}</version>
-				<configuration>
-					<updatePomFile>true</updatePomFile>
-					<flattenMode>resolveCiFriendliesOnly</flattenMode>
-					<pomElements>
-						<dependencies>expand</dependencies>
-					</pomElements>
-				</configuration>
-				<executions>
-					<execution>
-						<id>flatten</id>
-						<phase>process-resources</phase>
-						<goals>
-							<goal>flatten</goal>
-						</goals>
-					</execution>
-					<execution>
-						<id>flatten.clean</id>
-						<phase>clean</phase>
-						<goals>
-							<goal>clean</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.jacoco</groupId>
-				<artifactId>jacoco-maven-plugin</artifactId>
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>flatten-maven-plugin</artifactId>
+                <version>${maven-flatten-version}</version>
+                <configuration>
+                    <updatePomFile>true</updatePomFile>
+                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
+                    <pomElements>
+                        <dependencies>expand</dependencies>
+                    </pomElements>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>flatten</id>
+                        <phase>process-resources</phase>
+                        <goals>
+                            <goal>flatten</goal>
+                        </goals>
+                    </execution>
+                    <execution>
+                        <id>flatten.clean</id>
+                        <phase>clean</phase>
+                        <goals>
+                            <goal>clean</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.jacoco</groupId>
+                <artifactId>jacoco-maven-plugin</artifactId>
                 <version>${jacoco-version}</version>
-				<executions>
-					<execution>
-						<goals>
-							<goal>prepare-agent</goal>
-						</goals>
-					</execution>
-					<execution>
-						<id>report</id>
-						<phase>test</phase>
-						<goals>
-							<goal>report</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-compiler-plugin</artifactId>
-				<version>${maven_compiler_version}</version>
-				<configuration>
-					<source>${java_source_version}</source>
-					<target>${java_target_version}</target>
-					<encoding>${file_encoding}</encoding>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-surefire-plugin</artifactId>
-				<version>2.21.0</version>
-			</plugin>
-		</plugins>
-	</build>
+                <executions>
+                    <execution>
+                        <goals>
+                            <goal>prepare-agent</goal>
+                        </goals>
+                    </execution>
+                    <execution>
+                        <id>report</id>
+                        <phase>test</phase>
+                        <goals>
+                            <goal>report</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>${maven_compiler_version}</version>
+                <configuration>
+                    <source>${java_source_version}</source>
+                    <target>${java_target_version}</target>
+                    <encoding>${file_encoding}</encoding>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>2.21.0</version>
+            </plugin>
+        </plugins>
+    </build>
 
 
-</project>
+</project>","[{'comment': 'pom为什么改动那么多? 请不要随意格式化整个文件,仅对你的改动做格式化就行', 'commenter': 'KeRan213539'}]"
671,dubbo-admin-server/pom.xml,"@@ -172,10 +173,30 @@
             <version>${mockito-version}</version>
             <scope>test</scope>
         </dependency>
+
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>${lombok.version}</version>","[{'comment': ""pls. don't use lombok"", 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/ApiDocsController.java,"@@ -0,0 +1,204 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.admin.controller;
+
+import org.apache.dubbo.admin.controller.editors.CustomLocalDateEditor;
+import org.apache.dubbo.admin.controller.editors.CustomLocalDateTimeEditor;
+import org.apache.dubbo.admin.model.dto.docs.ApiInfoRequest;
+import org.apache.dubbo.admin.model.dto.docs.CallDubboServiceRequest;
+import org.apache.dubbo.admin.model.dto.docs.CallDubboServiceRequestInterfaceParam;
+import org.apache.dubbo.admin.utils.ApiDocsDubboGenericUtil;
+
+import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.StringUtils;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.beans.propertyeditors.StringTrimmerEditor;
+import org.springframework.web.bind.WebDataBinder;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.InitBinder;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import javax.annotation.PostConstruct;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
+
+/**
+ * dubbo doc ui server api.
+ * @author klw(213539@qq.com)","[{'comment': 'pls. remove author info.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/beans/DubboApiDocsParamInfoBean.java,"@@ -0,0 +1,44 @@
+package org.apache.dubbo.admin.controller.beans;","[{'comment': 'pls. add apache license header.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/beans/DubboApiDocsParamInfoBean.java,"@@ -0,0 +1,44 @@
+package org.apache.dubbo.admin.controller.beans;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.Setter;
+
+/**
+ * api parameter bean.
+ *
+ * @author klw(213539 @ qq.com)","[{'comment': 'again, pls. remove author info.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/editors/CustomLocalDateEditor.java,"@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.admin.controller.editors;
+
+
+import org.apache.dubbo.admin.utils.LocalDateTimeUtil;
+
+import java.beans.PropertyEditorSupport;
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
+
+/**
+ * Localdate editor for controller.
+ *
+ * @author klw(213539 @ qq.com)","[{'comment': 'pls. remove author info.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/editors/CustomLocalDateTimeEditor.java,"@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.admin.controller.editors;
+
+
+import org.apache.dubbo.admin.utils.LocalDateTimeUtil;
+
+import java.beans.PropertyEditorSupport;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+
+/**
+ * LocalDateTime editor for controller.
+ *
+ * @author klw(213539 @ qq.com)","[{'comment': 'pls. remove author info.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/model/dto/docs/ApiInfoRequest.java,"@@ -0,0 +1,41 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.admin.model.dto.docs;
+
+import io.swagger.annotations.ApiParam;
+import lombok.Getter;
+import lombok.Setter;
+
+/**
+ * Obtain the API module list and the request parameters of the API parameter information interface.
+ * @author klw(213539@qq.com)","[{'comment': 'pls. remove author info.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/model/dto/docs/CallDubboServiceRequest.java,"@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.admin.model.dto.docs;
+
+import io.swagger.annotations.ApiParam;
+import lombok.Getter;
+import lombok.Setter;
+
+
+/**
+ * Call Dubbo api to request parameters.
+ * @author klw(213539@qq.com)","[{'comment': 'remove athor info.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/model/dto/docs/CallDubboServiceRequestInterfaceParam.java,"@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.admin.model.dto.docs;
+
+import io.swagger.annotations.ApiParam;
+import lombok.Getter;
+import lombok.Setter;
+
+/**
+ * Parameters passed to duboo service api.
+ * @author klw(213539@qq.com)","[{'comment': 'remove author info.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/utils/LocalDateTimeUtil.java,"@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.admin.utils;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+
+
+/**
+ * Date time tool class of LocalDateTime.
+ *
+ * @author klw(213539 @ qq.com)","[{'comment': 'remove author info.', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/resources/application-test.properties,"@@ -16,7 +16,7 @@
 #
 
 # centers in dubbo2.7
-admin.registry.address=zookeeper://127.0.0.1:2183
-admin.config-center=zookeeper://127.0.0.1:2183
-admin.metadata.address=zookeeper://127.0.0.1:2183
+admin.registry.address=nacos://127.0.0.1:8848","[{'comment': 'pls. rollback to zookeeper', 'commenter': 'beiwei30'}]"
671,dubbo-admin-server/src/main/resources/application.properties,"@@ -16,9 +16,9 @@
 #
 
 # centers in dubbo2.7
-admin.registry.address=zookeeper://127.0.0.1:2181
-admin.config-center=zookeeper://127.0.0.1:2181
-admin.metadata-report.address=zookeeper://127.0.0.1:2181
+admin.registry.address=nacos://127.0.0.1:8848","[{'comment': ""pls. rollback to zookeeper since I believe it's irrelevant to this PR"", 'commenter': 'beiwei30'}]"
673,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/interceptor/AuthInterceptor.java,"@@ -35,12 +35,10 @@
 public class AuthInterceptor extends HandlerInterceptorAdapter {
     @Value(""${admin.check.authority:true}"")
     private boolean checkAuthority;
-
     //make session timeout configurable
-    //default to be an hour:1000 * 60 * 60
-    @Value(""${admin.check.sessionTimeoutMilli:3600000}"")
-    private long sessionTimeoutMilli;
-
+    //default is 15 minutes
+    @Value(""${admin.user.max-idle-time:15}"")
+    private int userMaxIdleTime;","[{'comment': '请保留之前的设置', 'commenter': 'KeRan213539'}, {'comment': 'done', 'commenter': 'sadeychai'}]"
673,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/UserController.java,"@@ -43,6 +43,8 @@
     private String rootUserName;
     @Value(""${admin.root.user.password:}"")
     private String rootUserPassword;
+    @Value(""${admin.user.max-idle-time:15}"")
+    private int userMaxIdleTime;","[{'comment': '请使用之前的设置(admin.check.sessionTimeoutMilli)', 'commenter': 'KeRan213539'}, {'comment': 'done', 'commenter': 'sadeychai'}]"
673,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/UserController.java,"@@ -69,7 +71,7 @@ public boolean logout() {
 
     @Scheduled(cron= ""0 5 * * * ?"")
     public void clearExpiredToken() {
-        tokenMap.entrySet().removeIf(entry -> entry.getValue() == null || System.currentTimeMillis() - entry.getValue().getLastUpdateTime() > 1000 * 60 * 15);
+        tokenMap.entrySet().removeIf(entry -> entry.getValue() == null || System.currentTimeMillis() - entry.getValue().getLastUpdateTime() > 1000 * 60 * userMaxIdleTime);","[{'comment': '请使用admin.check.sessionTimeoutMilli, 并保留原来的单位', 'commenter': 'KeRan213539'}, {'comment': 'done', 'commenter': 'sadeychai'}]"
673,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/interceptor/AuthInterceptor.java,"@@ -65,7 +63,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons
             }
 
             UserController.User user = UserController.tokenMap.get(authorization);
-            if (null != user && System.currentTimeMillis() - user.getLastUpdateTime() <= sessionTimeoutMilli) {
+            if (null != user && System.currentTimeMillis() - user.getLastUpdateTime() <= 1000 * 60 * userMaxIdleTime) {","[{'comment': '同上', 'commenter': 'KeRan213539'}, {'comment': 'done', 'commenter': 'sadeychai'}]"
673,dubbo-admin-server/src/main/resources/application.properties,"@@ -31,6 +31,9 @@ admin.registry.group=dubbo
 admin.config-center.group=dubbo
 admin.metadata-report.group=dubbo
 
+#max user inactive time, the unit is minute
+admin.user.max-idle-time=60
+","[{'comment': '请使用 admin.check.sessionTimeoutMilli', 'commenter': 'KeRan213539'}, {'comment': 'done', 'commenter': 'sadeychai'}]"
673,dubbo-admin-ui/src/components/http-common.js,"@@ -40,8 +39,8 @@ instance.interceptors.response.use((response) => {
   } else if (error.response.status === HttpStatus.UNAUTHORIZED) {
     localStorage.removeItem('token')
     localStorage.removeItem('username')
-    Vue.prototype.$notify.error(i18n.t('authFailed'))
-    router.push({ path: 'login' })
+    Vue.prototype.$notify.error('Authorization failed, please login again.')","[{'comment': '请使用国际化的方式', 'commenter': 'KeRan213539'}, {'comment': 'done', 'commenter': 'sadeychai'}]"
679,dubbo-admin-distribution/src/bin/startup.sh,"@@ -47,10 +47,27 @@ if [ -z ""$JAVA_HOME"" ]; then
         error_exit ""Please set the JAVA_HOME variable in your environment, We need java(x64)! jdk8 or later is better!""
   fi
 fi
+
 export SERVER=""dubbo-admin""
 export JAVA_HOME
 export JAVA=""$JAVA_HOME/bin/java""
 export BASE_DIR=`cd $(dirname $0)/..; pwd`
+
+if [ ! -d ""${BASE_DIR}/logs"" ]; then
+  echo ""mkdir""","[{'comment': 'pls. en-rich the logging message.', 'commenter': 'beiwei30'}]"
772,dubbo-admin-server/src/main/resources/application.properties,"@@ -15,35 +15,42 @@
 # limitations under the License.
 #
 
-# centers in dubbo2.7
+# centers in dubbo2.7, if you want to add parameters, please add them to the url
 admin.registry.address=zookeeper://127.0.0.1:2181
 admin.config-center=zookeeper://127.0.0.1:2181
 admin.metadata-report.address=zookeeper://127.0.0.1:2181
 
-#admin.registry.address=nacos://127.0.0.1:8848
-#admin.config-center=nacos://127.0.0.1:8848
-#admin.metadata-report.address=nacos://127.0.0.1:8848
+# nacos config, add parameters to url like username=nacos&password=nacos
+#admin.registry.address=nacos://127.0.0.1:8848?group=DEFAULT_GROUP&namespace=public
+#admin.config-center=nacos://127.0.0.1:8848?group=dubbo
+#admin.metadata-report.address=nacos://127.0.0.1:8848?group=dubbo
+
+#group (Deprecated it is recommended to use URL to add parameters,will be removed in the future)
+#admin.registry.group=dubbo
+#admin.config-center.group=dubbo
+#admin.metadata-report.group=dubbo
+
+#namespace used by nacos. (Deprecated it is recommended to use URL to add parameters,will be removed in the future)
+#admin.registry.namespace=public
+#admin.config-center.namespace=public
+#admin.metadata-report.namespace=public
 
 admin.root.user.name=root
 admin.root.user.password=root
-#group
-admin.registry.group=dubbo
-admin.config-center.group=dubbo
-admin.metadata-report.group=dubbo
 
 #session timeout, default is one hour
 admin.check.sessionTimeoutMilli=3600000
 
-#namespace used by nacos
-admin.registry.namespace=public
-admin.config-center.namespace=public
-admin.metadata-report.namespace=public
 
-admin.apollo.token=e16e5cd903fd0c97a116c873b448544b9d086de9
-admin.apollo.appId=test
-admin.apollo.env=dev
-admin.apollo.cluster=default
-admin.apollo.namespace=dubbo","[{'comment': 'These configurations are reserved and commented out for the time being, and add a note like this: ""not recommended, later versions will be deleted.""', 'commenter': 'KeRan213539'}]"
890,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/MetricsCollectController.java,"@@ -103,24 +103,36 @@ public List<MetricDTO> searchService(@RequestParam String ip, @RequestParam Stri
     protected void addMetricsConfigToMap(Map<String, String> configMap, String ip) {
         List<Provider> providers = providerService.findByAddress(ip);
         if (providers.size() > 0) {
-            Provider provider = providers.get(0);
-            String service = provider.getService();
-            MetadataIdentifier providerIdentifier = new MetadataIdentifier(Tool.getInterface(service), Tool.getVersion(service), Tool.getGroup(service),
-                    Constants.PROVIDER_SIDE, provider.getApplication());
-            String metaData = providerService.getProviderMetaData(providerIdentifier);
-            FullServiceDefinition providerServiceDefinition = new Gson().fromJson(metaData, FullServiceDefinition.class);
-            Map<String, String> parameters = providerServiceDefinition.getParameters();
-            configMap.put(parameters.get(Constants.METRICS_PORT), parameters.get(Constants.METRICS_PROTOCOL));
+            for (int i = 0; i < providers.size() && configMap.isEmpty(); i++) {
+                Provider provider = providers.get(i);
+                String service = provider.getService();
+                MetadataIdentifier providerIdentifier = new MetadataIdentifier(Tool.getInterface(service), Tool.getVersion(service), Tool.getGroup(service),
+                        Constants.PROVIDER_SIDE, provider.getApplication());
+                String metaData = providerService.getProviderMetaData(providerIdentifier);
+                FullServiceDefinition providerServiceDefinition = new Gson().fromJson(metaData, FullServiceDefinition.class);","[{'comment': '对于低于2.7.0的版本，metaData为null，反序列化成providerServiceDefinition为null，导致空指针异常', 'commenter': 'JosephZhang3'}]"
890,dubbo-admin-server/src/main/java/org/apache/dubbo/admin/controller/MetricsCollectController.java,"@@ -103,24 +103,36 @@ public List<MetricDTO> searchService(@RequestParam String ip, @RequestParam Stri
     protected void addMetricsConfigToMap(Map<String, String> configMap, String ip) {
         List<Provider> providers = providerService.findByAddress(ip);
         if (providers.size() > 0) {
-            Provider provider = providers.get(0);
-            String service = provider.getService();
-            MetadataIdentifier providerIdentifier = new MetadataIdentifier(Tool.getInterface(service), Tool.getVersion(service), Tool.getGroup(service),
-                    Constants.PROVIDER_SIDE, provider.getApplication());
-            String metaData = providerService.getProviderMetaData(providerIdentifier);
-            FullServiceDefinition providerServiceDefinition = new Gson().fromJson(metaData, FullServiceDefinition.class);
-            Map<String, String> parameters = providerServiceDefinition.getParameters();
-            configMap.put(parameters.get(Constants.METRICS_PORT), parameters.get(Constants.METRICS_PROTOCOL));
+            for (int i = 0; i < providers.size() && configMap.isEmpty(); i++) {
+                Provider provider = providers.get(i);
+                String service = provider.getService();
+                MetadataIdentifier providerIdentifier = new MetadataIdentifier(Tool.getInterface(service), Tool.getVersion(service), Tool.getGroup(service),
+                        Constants.PROVIDER_SIDE, provider.getApplication());
+                String metaData = providerService.getProviderMetaData(providerIdentifier);
+                FullServiceDefinition providerServiceDefinition = new Gson().fromJson(metaData, FullServiceDefinition.class);
+                Map<String, String> parameters = providerServiceDefinition.getParameters();
+                String metricsPort = parameters.get(Constants.METRICS_PORT);
+                String metricsProtocol = parameters.get(Constants.METRICS_PROTOCOL);
+                if (metricsPort != null && metricsProtocol != null) {
+                    configMap.put(metricsPort, metricsProtocol);
+                }
+            }
         } else {
             List<Consumer> consumers = consumerService.findByAddress(ip);
             if (consumers.size() > 0) {
-                Consumer consumer = consumers.get(0);
-                String service = consumer.getService();
-                MetadataIdentifier consumerIdentifier = new MetadataIdentifier(Tool.getInterface(service), Tool.getVersion(service), Tool.getGroup(service),
-                        Constants.CONSUMER_SIDE, consumer.getApplication());
-                String metaData = consumerService.getConsumerMetadata(consumerIdentifier);
-                Map<String, String> consumerParameters = new Gson().fromJson(metaData, Map.class);
-                configMap.put(consumerParameters.get(Constants.METRICS_PORT), consumerParameters.get(Constants.METRICS_PROTOCOL));
+                for (int i = 0; i < consumers.size() && configMap.isEmpty(); i++) {
+                    Consumer consumer = consumers.get(i);
+                    String service = consumer.getService();
+                    MetadataIdentifier consumerIdentifier = new MetadataIdentifier(Tool.getInterface(service), Tool.getVersion(service), Tool.getGroup(service),
+                            Constants.CONSUMER_SIDE, consumer.getApplication());
+                    String metaData = consumerService.getConsumerMetadata(consumerIdentifier);
+                    Map<String, String> consumerParameters = new Gson().fromJson(metaData, Map.class);","[{'comment': '同前一处所述', 'commenter': 'JosephZhang3'}, {'comment': 'see issue #446 ', 'commenter': 'JosephZhang3'}]"
1004,ca/pkg/config/envflag.go,"@@ -0,0 +1,78 @@
+package config
+
+import (
+	""flag""
+	""os""
+	""reflect""
+	""strconv""
+)
+
+func StringVar(p *string, name string, value string, usage string) {
+	flag.StringVar(p, name, value, usage)
+	flag.Parse()
+	if reflect.DeepEqual(p, &value) {
+		val, ex := os.LookupEnv(name)","[{'comment': 'flag should override os', 'commenter': 'AlbumenJ'}, {'comment': 'should convert to upper case for os', 'commenter': 'AlbumenJ'}]"
1004,ca/pkg/config/envflag.go,"@@ -0,0 +1,78 @@
+package config","[{'comment': 'license header', 'commenter': 'AlbumenJ'}]"
1013,pkg/admin/services/provider_service.go,"@@ -1,23 +1,25 @@
-// Licensed to the Apache Software Foundation (ASF) under one or more
-// contributor license agreements.  See the NOTICE file distributed with
-// this work for additional information regarding copyright ownership.
-// The ASF licenses this file to You under the Apache License, Version 2.0
-// (the ""License""); you may not use this file except in compliance with
-// the License.  You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an ""AS IS"" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */","[{'comment': 'revert license changes', 'commenter': 'AlbumenJ'}, {'comment': 'done', 'commenter': 'wudong5'}]"
1024,pkg/admin/prometheus/metrics.go,"@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package prometheus
+
+import (
+	""encoding/json""
+	""fmt""
+	""github.com/apache/dubbo-admin/pkg/admin/config""
+	""github.com/apache/dubbo-admin/pkg/admin/constant""
+	""log""
+	""net/http""
+	""time""
+)","[{'comment': '违背了 goimports 规范', 'commenter': 'FinalT'}]"
1028,hack/boilerplate.go.txt,"@@ -0,0 +1,15 @@
+/*
+Copyright 2021.
+
+Licensed under the Apache License, Version 2.0 (the ""License"");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an ""AS IS"" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/","[{'comment': 'This header is not ASF license header', 'commenter': 'AlbumenJ'}, {'comment': 'i have updated the license header, please review again', 'commenter': '2456868764'}]"
1031,pkg/authority/k8s/client.go,"@@ -36,11 +31,17 @@ import (
 	v1 ""k8s.io/api/core/v1""
 	metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
 	""k8s.io/apimachinery/pkg/types""
-
 	""k8s.io/client-go/kubernetes""
 	""k8s.io/client-go/rest""
 	""k8s.io/client-go/tools/clientcmd""
+	""k8s.io/client-go/tools/leaderelection""
+	""k8s.io/client-go/tools/leaderelection/resourcelock""
 	""k8s.io/client-go/util/homedir""
+	""log""
+	""path/filepath""
+	""reflect""
+	""strings""
+	""time""","[{'comment': 'Should be `gofumpt`', 'commenter': 'AlbumenJ'}, {'comment': 'done', 'commenter': 'asa3311'}]"
1032,pkg/admin/model/override.go,"@@ -0,0 +1,115 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the ""License""); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//	http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an ""AS IS"" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package model
+
+import (
+	""strings""
+
+	""github.com/apache/dubbo-admin/pkg/admin/constant""
+)
+
+type Override struct {
+	Key           string           `json:""key"" yaml:""key""`
+	Scope         string           `json:""scope"" yaml:""scope""`
+	ConfigVersion string           `json:""configVersion"" yaml:""configVersion""`
+	Enabled       bool             `json:""enabled"" yaml:""enabled""`
+	Configs       []OverrideConfig `json:""configs"" yaml:""configs""`
+}
+
+type OverrideConfig struct {
+	Side              string            `json:""side"" yaml:""side""`
+	Addresses         []string          `json:""addresses"" yaml:""addresses""`
+	ProviderAddresses []string          `json:""providerAddresses"" yaml:""providerAddresses""`
+	Parameters        map[string]string `json:""parameters"" yaml:""parameters""`
+	Applications      []string          `json:""applications"" yaml:""applications""`
+	Services          []string          `json:""services"" yaml:""services""`
+	Type              string            `json:""type"" yaml:""type""`
+	Enabled           bool              `json:""enabled"" yaml:""enabled""`
+	Match             ConditionMatch    `json:""match"" yaml:""match""`
+}
+
+type ConditionMatch struct {
+	Address     StringMatch  `json:""address"" yaml:""address""`
+	Service     StringMatch  `json:""service"" yaml:""service""`
+	Application StringMatch  `json:""application"" yaml:""application""`
+	Param       []ParamMatch `json:""param"" yaml:""param""`","[{'comment': 'Please reference the following code to define `ConditionMatch`.\r\n\r\nhttps://github.com/apache/dubbo/blob/3.2/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/model/ConditionMatch.java\r\n\r\nhttps://github.com/apache/dubbo/blob/3.2/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mesh/rule/virtualservice/match/ListStringMatch.java', 'commenter': 'chickenlj'}, {'comment': 'Done.', 'commenter': 'ev1lQuark'}]"
1037,deploy/charts/admin-stack/charts/skywalking/charts/elasticsearch-8.5.1.tgz,,"[{'comment': 'What is the purpore of add such a binary', 'commenter': 'AlbumenJ'}]"
1042,pkg/monitor/prometheus/metrics.go,"@@ -0,0 +1,87 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the ""License""); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//	http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an ""AS IS"" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package prometheus
+
+import (
+	""fmt""
+	""log""
+
+	""github.com/apache/dubbo-admin/pkg/admin/config""
+	""github.com/apache/dubbo-admin/pkg/admin/constant""
+	""github.com/apache/dubbo-admin/pkg/admin/util""
+)
+
+func FetchRadio(metricName1 string, metricName2 string, label1 []string, label2 []string) (*QueryInfo, error) {
+	var query1 string
+	var query2 string
+	var query string
+	// Example: sum(http_success{}) / sum(http_total{})
+	var labelsQ1 string
+	for i, labelsInstance := range label1 {
+		if i == 0 {
+			labelsQ1 += labelsInstance
+		} else {
+			labelsQ1 += "", "" + labelsInstance
+		}
+	}","[{'comment': 'How about extracting the following code snippet into a separate func?\r\n\r\n```go\r\n\r\nvar labelsQ1 string\r\n\tfor i, labelsInstance := range label1 {\r\n\t\tif i == 0 {\r\n\t\t\tlabelsQ1 += labelsInstance\r\n\t\t} else {\r\n\t\t\tlabelsQ1 += "", "" + labelsInstance\r\n\t\t}\r\n\t}\r\n```', 'commenter': 'chickenlj'}]"
1042,pkg/monitor/prometheus/metrics.go,"@@ -0,0 +1,87 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the ""License""); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//	http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an ""AS IS"" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package prometheus
+
+import (
+	""fmt""
+	""log""
+
+	""github.com/apache/dubbo-admin/pkg/admin/config""
+	""github.com/apache/dubbo-admin/pkg/admin/constant""
+	""github.com/apache/dubbo-admin/pkg/admin/util""
+)
+
+func FetchRadio(metricName1 string, metricName2 string, label1 []string, label2 []string) (*QueryInfo, error) {
+	var query1 string
+	var query2 string
+	var query string
+	// Example: sum(http_success{}) / sum(http_total{})
+	var labelsQ1 string
+	for i, labelsInstance := range label1 {
+		if i == 0 {
+			labelsQ1 += labelsInstance
+		} else {
+			labelsQ1 += "", "" + labelsInstance
+		}
+	}
+	query1 = fmt.Sprintf(""sum(%s{%s})"", metricName1, labelsQ1)
+	var labelsQ2 string
+	for i, labelsInstance := range label2 {
+		if i == 0 {
+			labelsQ2 += labelsInstance
+		} else {
+			labelsQ2 += "", "" + labelsInstance
+		}
+	}
+	query2 = fmt.Sprintf(""sum(%s{%s})"", metricName2, labelsQ2)
+	query = fmt.Sprintf(""%s/%s"", query1, query2)
+	prometheusUrl := fmt.Sprintf(""http://%s:%s"", config.PrometheusIp, config.PrometheusPort)
+	ustr := prometheusUrl + constant.EpQuery + query
+	log.Println(ustr)","[{'comment': 'Use Zap to log information, please refer to how the other parts of the project use zap.', 'commenter': 'chickenlj'}]"
1060,pkg/admin/services/registry_service_sync.go,"@@ -38,9 +38,9 @@ var (
 
 func init() {
 	queryParams := url.Values{
-		constant.InterfaceKey:  {constant.AnyValue},
-		constant.GroupKey:      {constant.AnyValue},
-		constant.VersionKey:    {constant.AnyValue},
+		constant.InterfaceKey:  {""org.apache.dubbo.springboot.demo.DemoService""},
+		constant.GroupKey:      {""""},
+		constant.VersionKey:    {""""},","[{'comment': 'Why change this?', 'commenter': 'AlbumenJ'}, {'comment': 'For integration testing and I forget to reset them, I will update this PR.', 'commenter': 'ev1lQuark'}, {'comment': 'done', 'commenter': 'ev1lQuark'}]"
1060,pkg/admin/model/mock_rule.go,"@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package model
+
+import (
+	""gorm.io/gorm""
+)
+
+type MockRule struct {
+	ID          uint   `json:""id""`
+	ServiceName string `json:""serviceName""`
+	MethodName  string `json:""methodName""`
+	Rule        string `json:""rule""`
+	Enable      bool   `json:""enable""`
+}
+
+func (m *MockRule) ToMockRuleEntity() *MockRuleEntity {
+	return &MockRuleEntity{
+		Model: gorm.Model{
+			ID: m.ID,
+		},
+		ServiceName: m.ServiceName,
+		MethodName:  m.MethodName,
+		Rule:        m.Rule,
+		Enable:      m.Enable,
+	}
+}
+
+type MockRuleEntity struct {
+	gorm.Model
+	ServiceName string `gorm:""type:varchar(255)""`
+	MethodName  string `gorm:""type:varchar(255)""`
+	Rule        string `gorm:""type:text""`
+	Enable      bool","[{'comment': 'Is this definition the same as the original one listed here https://cn.dubbo.apache.org/zh-cn/overview/reference/admin/mock/#mock-rule?\r\n\r\nWe need to make sure previous users can smoothly migrate to the new version using the same backend MySQL server.', 'commenter': 'chickenlj'}, {'comment': 'Make sure to use the same schema', 'commenter': 'chickenlj'}, {'comment': 'Also, we should make sure new users know how to init the schema.', 'commenter': 'chickenlj'}, {'comment': 'I think GORM AutoMigrate function can handle above possible compatibility issues. I used this function in `/pkg/admin/config/config.go:200`\r\n[GORM-AutoMigrate](https://gorm.io/zh_CN/docs/migration.html#AutoMigrate)\r\n\r\n\r\n', 'commenter': 'ev1lQuark'}]"
