Pull,Path,Diff_hunk,Comment
237,src/components/org/apache/jmeter/visualizers/backend/WindowMode.java,"@@ -0,0 +1,41 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.visualizers.backend;
+
+import org.apache.jmeter.util.JMeterUtils;
+
+/**
+ * Metrics are sent into boxes which can be {@link #FIXED a fixed-size sliding window} or {@link #TIMED time boxed}.
+ * @author Logan Mzz","[{'comment': ""We don't use the author doc tag."", 'commenter': 'FSchumacher'}]"
237,src/components/org/apache/jmeter/visualizers/backend/SamplerMetric.java,"@@ -88,8 +110,18 @@ private void addHits(SampleResult res) {
      * Reset metric except for percentile related data
      */
     public synchronized void resetForTimeInterval() {
-        // We don't clear responsesStats nor usersStats as it will slide as per my understanding of 
-        // http://commons.apache.org/proper/commons-math/userguide/stat.html
+    	switch (windowMode) {
+    		case FIXED:
+                // We don't clear responsesStats nor usersStats as it will slide as per my understanding of 
+                // http://commons.apache.org/proper/commons-math/userguide/stat.html
+    			break;
+    		case TIMED:
+    			for (DescriptiveStatistics stat : windowedStats) {
+    				stat.clear();
+    			}
+    			break;
+			default: throw new UnsupportedOperationException(windowMode.name());","[{'comment': 'Seems like a formatting error', 'commenter': 'FSchumacher'}]"
237,src/components/org/apache/jmeter/visualizers/backend/SamplerMetric.java,"@@ -88,8 +110,18 @@ private void addHits(SampleResult res) {
      * Reset metric except for percentile related data
      */
     public synchronized void resetForTimeInterval() {
-        // We don't clear responsesStats nor usersStats as it will slide as per my understanding of 
-        // http://commons.apache.org/proper/commons-math/userguide/stat.html
+    	switch (windowMode) {
+    		case FIXED:
+                // We don't clear responsesStats nor usersStats as it will slide as per my understanding of 
+                // http://commons.apache.org/proper/commons-math/userguide/stat.html
+    			break;
+    		case TIMED:
+    			for (DescriptiveStatistics stat : windowedStats) {","[{'comment': 'JMeter now uses java 8, so we could use the newer syntax :)', 'commenter': 'FSchumacher'}]"
237,src/components/org/apache/jmeter/visualizers/backend/SamplerMetric.java,"@@ -28,24 +34,39 @@
  * @since 2.13
  */
 public class SamplerMetric {
-    private static final int SLIDING_WINDOW_SIZE = JMeterUtils.getPropDefault(""backend_metrics_window"", 100); //$NON-NLS-1$
     
     // Response times for OK samples
-    // Limit to sliding window of SLIDING_WINDOW_SIZE values 
-    private DescriptiveStatistics okResponsesStats = new DescriptiveStatistics(SLIDING_WINDOW_SIZE);
+    private DescriptiveStatistics okResponsesStats = new DescriptiveStatistics();
     // Response times for KO samples
-    // Limit to sliding window of SLIDING_WINDOW_SIZE values 
-    private DescriptiveStatistics koResponsesStats = new DescriptiveStatistics(SLIDING_WINDOW_SIZE);
+    private DescriptiveStatistics koResponsesStats = new DescriptiveStatistics();
     // Response times for All samples
-    // Limit to sliding window of SLIDING_WINDOW_SIZE values 
-    private DescriptiveStatistics allResponsesStats = new DescriptiveStatistics(SLIDING_WINDOW_SIZE);
+    private DescriptiveStatistics allResponsesStats = new DescriptiveStatistics();
+    // OK, KO, ALL stats
+    private List<DescriptiveStatistics> windowedStats = Collections.emptyList();
+    // Timeboxed percentiles don't makes sense
+    private DescriptiveStatistics pctResponseStats = new DescriptiveStatistics();
+    private WindowMode windowMode;
     private int successes;
     private int failures;
     private int hits;
     /**
      * 
      */
     public SamplerMetric() {
+    	windowMode = WindowMode.get();
+
+    	List<DescriptiveStatistics> stats = new ArrayList<>();
+    	stats.add(pctResponseStats);
+    	if (windowMode == WindowMode.FIXED) {
+    		windowedStats = asList(okResponsesStats, koResponsesStats, allResponsesStats);
+    		stats.addAll(windowedStats);
+    	}
+
+    	int slidingWindowSize = JMeterUtils.getPropDefault(""backend_metrics_window"", 100);
+    	// Limit to sliding window of SLIDING_WINDOW_SIZE values
+		for (DescriptiveStatistics stat : stats) {","[{'comment': 'Formatting issue', 'commenter': 'FSchumacher'}]"
237,bin/jmeter.properties,"@@ -917,6 +917,8 @@ summariser.name=summary
 # BackendListener - configuration
 #---------------------------------------------------------------------------
 #
+# Backend metrics window mode (fixed=fixed-size window, timed=time boxed) 
+#backend_metrics_window_mode=fixed","[{'comment': 'Documentation is missing for this new feature. It should be mentioned in the properties section and the users manual.', 'commenter': 'FSchumacher'}]"
238,src/core/org/apache/jmeter/threads/ThreadGroup.java,"@@ -279,34 +282,30 @@ private void delayBy(long delay) {
     @Override
     public void start(int groupCount, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine) {
         running = true;
+        numGroup = groupCount;","[{'comment': 'Is this rename important, or just an aesthetic thing?', 'commenter': 'Llammissar'}, {'comment': 'It has better meaning\r\n(Clean code inside ;))', 'commenter': 'max3163'}]"
238,src/core/org/apache/jmeter/threads/AbstractThreadGroup.java,"@@ -251,6 +251,8 @@ public boolean getOnErrorStopTestNow() {
 
     public abstract void start(int groupCount, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine);
 
+    public abstract void addNewThread(int delay, StandardJMeterEngine engine);","[{'comment': ""Is it possible that, rather than void, this could return... say, the threadId?  Having the option to keep track of the threads you've started in this manner would be useful if, for example, you want to remove them (because removing a thread requires that threadId).  The alternative is making a comparable removeOldThread() method to complete the API, but I'm sort of up in the air on whether it would be a good idea to grab a random thread and tell it to end in current JMeter (it makes perfect sense in a hypothetical future dispatch-oriented design, though)."", 'commenter': 'Llammissar'}]"
291,src/core/org/apache/jmeter/resources/messages_fr.properties,"@@ -238,6 +238,7 @@ database_sql_query_title=Requ\u00EAte SQL JDBC par d\u00E9faut
 database_testing_title=Requ\u221A\u2122te JDBC
 database_url=URL JDBC\:
 database_url_jdbc_props=URL et driver JDBC de la base de donn\u221A\u00A9es
+date_to_shift=Date sur laquel on applique le d\u00E9callage (optionnel) (defaut \: maintenant )","[{'comment': 'laquelle, \r\nd\\u00E9faut', 'commenter': 'pmouawad'}]"
291,src/core/org/apache/jmeter/resources/messages_fr.properties,"@@ -1169,6 +1170,7 @@ throughput_control_perthread_label=Par utilisateur
 throughput_control_title=Contr\u00F4leur D\u00E9bit
 throughput_control_tplabel=D\u00E9bit \:
 time_format=Chaine de formatage sur le mod\u00E8le SimpleDateFormat (optionnel)
+time_format_shift=Chaine de formatage sur le mod\u00E8le DateTimeFormatter (optionnel) ( defaut unix timestamp en milliseconde )","[{'comment': 'Cha√Æne\r\nmillisecondes', 'commenter': 'pmouawad'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters:
+ * - format date @see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html (optional - defaults to epoch time in millisecond)
+ * - date to shift formated as first param (optional - defaults now)
+ * - amount of (seconds / minutes / hours / days / months ) to add (optional - default nothing is add )
+ * - variable name ( optional )
+ *
+ * Returns:
+ * - Returns a formated date with the specified number of (seconds / minutes / hours / days / months ) added.
+ * - value is also saved in the variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$
+
+    private static final List<String> desc = new LinkedList<>();
+    
+    static {
+        desc.add(JMeterUtils.getResString(""time_format_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""date_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""value_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""function_name_paropt"")); //$NON-NLS-1$
+    }
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String shift = """"; //$NON-NLS-1$
+    private String variable = """"; //$NON-NLS-1$
+
+    public TimeShiftingFunction() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now( ZoneId.systemDefault() );
+        DateTimeFormatter formatter = null; 
+        if (!StringUtils.isEmpty(format)) {
+            try {
+                formatter = new DateTimeFormatterBuilder().appendPattern(format)
+                        .parseDefaulting(ChronoField.NANO_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
+                        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
+                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
+                        .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
+                        .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
+                        .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue())
+                        .toFormatter(JMeterUtils.getLocale());
+            } catch (IllegalArgumentException ex) {
+                log.error(""Pattern is invalid"", ex); // $NON-NLS-1$","[{'comment': 'Mention pattern in message', 'commenter': 'pmouawad'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters:
+ * - format date @see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html (optional - defaults to epoch time in millisecond)
+ * - date to shift formated as first param (optional - defaults now)
+ * - amount of (seconds / minutes / hours / days / months ) to add (optional - default nothing is add )
+ * - variable name ( optional )
+ *
+ * Returns:
+ * - Returns a formated date with the specified number of (seconds / minutes / hours / days / months ) added.
+ * - value is also saved in the variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$
+
+    private static final List<String> desc = new LinkedList<>();
+    
+    static {
+        desc.add(JMeterUtils.getResString(""time_format_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""date_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""value_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""function_name_paropt"")); //$NON-NLS-1$
+    }
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String shift = """"; //$NON-NLS-1$
+    private String variable = """"; //$NON-NLS-1$
+
+    public TimeShiftingFunction() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now( ZoneId.systemDefault() );
+        DateTimeFormatter formatter = null; 
+        if (!StringUtils.isEmpty(format)) {
+            try {
+                formatter = new DateTimeFormatterBuilder().appendPattern(format)
+                        .parseDefaulting(ChronoField.NANO_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
+                        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
+                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
+                        .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
+                        .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
+                        .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue())
+                        .toFormatter(JMeterUtils.getLocale());
+            } catch (IllegalArgumentException ex) {
+                log.error(""Pattern is invalid"", ex); // $NON-NLS-1$
+            }
+        }
+
+        if (!dateToShift.isEmpty()) {
+            try {
+                if (formatter != null) {
+                    localDateTimeToShift = LocalDateTime.parse(dateToShift, formatter);
+                } else {
+                    localDateTimeToShift = LocalDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(dateToShift)), ZoneId.systemDefault());
+                }
+            } catch (DateTimeParseException | NumberFormatException ex) {
+                log.error(""Failed to parse date to shift"", ex); // $NON-NLS-1$","[{'comment': 'Mention dateToShift', 'commenter': 'pmouawad'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters:
+ * - format date @see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html (optional - defaults to epoch time in millisecond)
+ * - date to shift formated as first param (optional - defaults now)
+ * - amount of (seconds / minutes / hours / days / months ) to add (optional - default nothing is add )
+ * - variable name ( optional )
+ *
+ * Returns:
+ * - Returns a formated date with the specified number of (seconds / minutes / hours / days / months ) added.
+ * - value is also saved in the variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$
+
+    private static final List<String> desc = new LinkedList<>();
+    
+    static {
+        desc.add(JMeterUtils.getResString(""time_format_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""date_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""value_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""function_name_paropt"")); //$NON-NLS-1$
+    }
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String shift = """"; //$NON-NLS-1$
+    private String variable = """"; //$NON-NLS-1$
+
+    public TimeShiftingFunction() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now( ZoneId.systemDefault() );
+        DateTimeFormatter formatter = null; 
+        if (!StringUtils.isEmpty(format)) {
+            try {
+                formatter = new DateTimeFormatterBuilder().appendPattern(format)
+                        .parseDefaulting(ChronoField.NANO_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
+                        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
+                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
+                        .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
+                        .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
+                        .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue())
+                        .toFormatter(JMeterUtils.getLocale());
+            } catch (IllegalArgumentException ex) {
+                log.error(""Pattern is invalid"", ex); // $NON-NLS-1$
+            }
+        }
+
+        if (!dateToShift.isEmpty()) {
+            try {
+                if (formatter != null) {
+                    localDateTimeToShift = LocalDateTime.parse(dateToShift, formatter);
+                } else {
+                    localDateTimeToShift = LocalDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(dateToShift)), ZoneId.systemDefault());
+                }
+            } catch (DateTimeParseException | NumberFormatException ex) {
+                log.error(""Failed to parse date to shift"", ex); // $NON-NLS-1$
+            }
+        }
+
+        // Check amount value to shift
+        if (!StringUtils.isEmpty(shift)) {
+            int strLength = shift.length();
+            Character lastChar = shift.charAt(strLength - 1);
+            try {
+                long amount = Long.parseLong(shift.substring(0, strLength - 1));
+                switch (lastChar) {
+                case 's':
+                    localDateTimeToShift = localDateTimeToShift.plusSeconds(amount);
+                    break;
+                case 'm':
+                    localDateTimeToShift = localDateTimeToShift.plusMinutes(amount);
+                    break;
+                case 'H':
+                    localDateTimeToShift = localDateTimeToShift.plusHours(amount);
+                    break;
+                case 'd':
+                    localDateTimeToShift = localDateTimeToShift.plusDays(amount);
+                    break;
+                case 'M':
+                    localDateTimeToShift = localDateTimeToShift.plusMonths(amount);
+                    break;
+                }
+            } catch (NumberFormatException nfe) {
+                log.warn(""Failed to parse amount of time to add"", nfe); // $NON-NLS-1$","[{'comment': 'Mention amount', 'commenter': 'pmouawad'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters:
+ * - format date @see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html (optional - defaults to epoch time in millisecond)
+ * - date to shift formated as first param (optional - defaults now)
+ * - amount of (seconds / minutes / hours / days / months ) to add (optional - default nothing is add )
+ * - variable name ( optional )
+ *
+ * Returns:
+ * - Returns a formated date with the specified number of (seconds / minutes / hours / days / months ) added.
+ * - value is also saved in the variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$
+
+    private static final List<String> desc = new LinkedList<>();
+    
+    static {
+        desc.add(JMeterUtils.getResString(""time_format_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""date_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""value_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""function_name_paropt"")); //$NON-NLS-1$
+    }
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String shift = """"; //$NON-NLS-1$
+    private String variable = """"; //$NON-NLS-1$
+
+    public TimeShiftingFunction() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now( ZoneId.systemDefault() );
+        DateTimeFormatter formatter = null; 
+        if (!StringUtils.isEmpty(format)) {
+            try {
+                formatter = new DateTimeFormatterBuilder().appendPattern(format)
+                        .parseDefaulting(ChronoField.NANO_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
+                        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
+                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
+                        .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
+                        .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
+                        .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue())
+                        .toFormatter(JMeterUtils.getLocale());
+            } catch (IllegalArgumentException ex) {
+                log.error(""Pattern is invalid"", ex); // $NON-NLS-1$
+            }
+        }
+
+        if (!dateToShift.isEmpty()) {
+            try {
+                if (formatter != null) {
+                    localDateTimeToShift = LocalDateTime.parse(dateToShift, formatter);
+                } else {
+                    localDateTimeToShift = LocalDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(dateToShift)), ZoneId.systemDefault());
+                }
+            } catch (DateTimeParseException | NumberFormatException ex) {
+                log.error(""Failed to parse date to shift"", ex); // $NON-NLS-1$
+            }
+        }
+
+        // Check amount value to shift
+        if (!StringUtils.isEmpty(shift)) {
+            int strLength = shift.length();
+            Character lastChar = shift.charAt(strLength - 1);
+            try {
+                long amount = Long.parseLong(shift.substring(0, strLength - 1));
+                switch (lastChar) {
+                case 's':
+                    localDateTimeToShift = localDateTimeToShift.plusSeconds(amount);
+                    break;
+                case 'm':
+                    localDateTimeToShift = localDateTimeToShift.plusMinutes(amount);
+                    break;
+                case 'H':
+                    localDateTimeToShift = localDateTimeToShift.plusHours(amount);
+                    break;
+                case 'd':
+                    localDateTimeToShift = localDateTimeToShift.plusDays(amount);
+                    break;
+                case 'M':
+                    localDateTimeToShift = localDateTimeToShift.plusMonths(amount);
+                    break;
+                }
+            } catch (NumberFormatException nfe) {
+                log.warn(""Failed to parse amount of time to add"", nfe); // $NON-NLS-1$
+            }
+        }
+
+        if (formatter != null) {
+            dateString = localDateTimeToShift.format(formatter);
+        } else {
+            ZoneOffset offset = ZoneOffset.systemDefault().getRules().getOffset(localDateTimeToShift);
+            dateString = String.valueOf(localDateTimeToShift.toInstant(offset).toEpochMilli());
+        }
+
+        if (variable.length() > 0) {
+            JMeterVariables vars = getVariables();
+            if (vars != null) {// vars will be null on TestPlan","[{'comment': 'Add some debug ?', 'commenter': 'pmouawad'}]"
291,xdocs/usermanual/functions.xml,"@@ -1499,6 +1502,36 @@ becomes:
 </properties>
 </component>
 
+
+<component index=""&sect-num;.5.22"" name=""__timeShifting"">
+<description>
+    <p>The timeShifting function returns a date in various formats with the specified amount of seconds/minutes/hours/days/months added</p>
+    </description>
+<properties>
+        <property name=""Format"" required=""No"">
+        The format to be passed to DateTimeFormatter.
+        If omitted, the function use milliseconds since epoch format.
+        </property>
+        <property name=""Date to shift"" required=""No"">
+        Indicate the date with the format from first paramater to shift
+        If omitted, the date is set to now
+        </property>
+        <property name=""value to shift"" required=""No"">
+        Indicate the specified amount of seconds/minutes/hours/days/mounths to add according to this usage :
+        <ul>
+        <li><code>5s</code> for Second value</li>
+        <li><code>5m</code> for Minute value</li>
+        <li><code>5H</code> for Hour value</li>
+        <li><code>5d</code> for Day value</li>
+        <li><code>5M</code> for Month value</li>
+        </ul>
+        To shift in the pass, you just have to indicate <code>-5d</code>  to remove 5 days.","[{'comment': '""into the past""? \r\n""to subtract five days"" or ""to move five days backwards""?', 'commenter': 'FSchumacher'}, {'comment': 'Would it be useful, to specify more complex amount of times like `5d7H` or `5 days 7 minutes`?', 'commenter': 'FSchumacher'}]"
291,xdocs/usermanual/functions.xml,"@@ -1499,6 +1502,36 @@ becomes:
 </properties>
 </component>
 
+
+<component index=""&sect-num;.5.22"" name=""__timeShifting"">
+<description>
+    <p>The timeShifting function returns a date in various formats with the specified amount of seconds/minutes/hours/days/months added</p>
+    </description>
+<properties>
+        <property name=""Format"" required=""No"">
+        The format to be passed to DateTimeFormatter.
+        If omitted, the function use milliseconds since epoch format.
+        </property>
+        <property name=""Date to shift"" required=""No"">
+        Indicate the date with the format from first paramater to shift
+        If omitted, the date is set to now
+        </property>
+        <property name=""value to shift"" required=""No"">
+        Indicate the specified amount of seconds/minutes/hours/days/mounths to add according to this usage :","[{'comment': 'mounths => months\r\nseconds, minutes, ... or months\r\n\r\nAs a side note, in english microtypography there is no space in front of a colon, as is in french microtypography.', 'commenter': 'FSchumacher'}]"
291,xdocs/usermanual/functions.xml,"@@ -1499,6 +1502,36 @@ becomes:
 </properties>
 </component>
 
+
+<component index=""&sect-num;.5.22"" name=""__timeShifting"">
+<description>
+    <p>The timeShifting function returns a date in various formats with the specified amount of seconds/minutes/hours/days/months added</p>
+    </description>
+<properties>
+        <property name=""Format"" required=""No"">
+        The format to be passed to DateTimeFormatter.
+        If omitted, the function use milliseconds since epoch format.
+        </property>
+        <property name=""Date to shift"" required=""No"">
+        Indicate the date with the format from first paramater to shift","[{'comment': 'paramater => parameter\r\n""the date in the format set by the parameter \'Format\'""', 'commenter': 'FSchumacher'}]"
291,xdocs/usermanual/functions.xml,"@@ -1499,6 +1502,36 @@ becomes:
 </properties>
 </component>
 
+
+<component index=""&sect-num;.5.22"" name=""__timeShifting"">
+<description>
+    <p>The timeShifting function returns a date in various formats with the specified amount of seconds/minutes/hours/days/months added</p>
+    </description>
+<properties>
+        <property name=""Format"" required=""No"">
+        The format to be passed to DateTimeFormatter.
+        If omitted, the function use milliseconds since epoch format.","[{'comment': 'use => uses', 'commenter': 'FSchumacher'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) - date to shift formated
+ * as first param (optional - defaults now) - amount of (seconds / minutes /
+ * hours / days / months ) to add (optional - default nothing is add ) -
+ * variable name ( optional )
+ *
+ * Returns: - Returns a formated date with the specified number of (seconds /
+ * minutes / hours / days / months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$","[{'comment': '""timeShifting"" is unusual style for function name. Usually functions are called like ""__timeShift"", without continuous tense', 'commenter': 'undera'}]"
291,xdocs/usermanual/functions.xml,"@@ -1499,6 +1502,36 @@ becomes:
 </properties>
 </component>
 
+
+<component index=""&sect-num;.5.22"" name=""__timeShifting"">
+<description>
+    <p>The timeShifting function returns a date in various formats with the specified amount of seconds/minutes/hours/days/months added</p>","[{'comment': '""in various formats"" => ""in configured format"" or ""in the given format"" as the function will return one value, only.', 'commenter': 'FSchumacher'}]"
291,test/src/org/apache/jmeter/functions/TestTimeShiftingFunction.java,"@@ -0,0 +1,161 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ */
+
+package org.apache.jmeter.functions;
+
+import static org.apache.jmeter.functions.FunctionTestHelper.makeParams;
+import static org.junit.Assert.assertTrue;
+
+import java.time.Instant;
+import java.util.Collection;
+import java.util.LinkedList;
+
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.junit.JMeterTestCase;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.threads.JMeterContext;
+import org.apache.jmeter.threads.JMeterContextService;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.junit.Before;
+import org.junit.Test;
+
+public class TestTimeShiftingFunction extends JMeterTestCase {
+        private Function function;
+
+        private SampleResult result;
+
+        private Collection<CompoundVariable> params;
+
+        private JMeterVariables vars;
+
+        private JMeterContext jmctx = null;
+
+        private String value;
+        
+        @Before
+        public void setUp() {
+            jmctx = JMeterContextService.getContext();
+            vars = new JMeterVariables();
+            jmctx.setVariables(vars);
+            jmctx.setPreviousResult(result);
+            params = new LinkedList<>();
+            result = new SampleResult();
+            function = new TimeShiftingFunction();
+        }
+
+        @Test
+        public void testDatePlusOneDay() throws Exception {
+            Collection<CompoundVariable> params = makeParams(""yyyy-dd-MM"",""2017-01-01"",""1d"","""");
+            function.setParameters(params);
+            value = function.execute(result, null);
+            assertTrue(value.equalsIgnoreCase(""2017-02-01""));
+        }
+        
+        @Test
+        public void testDatePlusOneDayInVariable() throws Exception {
+            Collection<CompoundVariable> params = makeParams(""yyyy-dd-MM"",""2017-01-01"",""1d"",""VAR"");
+            function.setParameters(params);
+            function.execute(result, null);
+            assertTrue(vars.get(""VAR"").equalsIgnoreCase(""2017-02-01""));
+        }
+        
+        @Test
+        public void testDateLessOneDay() throws Exception {
+            Collection<CompoundVariable> params = makeParams(""yyyy-dd-MM"",""2017-01-01"",""-1d"","""");
+            function.setParameters(params);
+            value = function.execute(result, null);
+            assertTrue(value.equalsIgnoreCase(""2016-31-12""));
+        }
+        
+        @Test
+        public void testDatePlusOneHour() throws Exception {
+            Collection<CompoundVariable> params = makeParams(""HH:mm:ss"",""14:00:00"",""1H"","""");
+            function.setParameters(params);
+            value = function.execute(result, null);
+            assertTrue(value.equalsIgnoreCase(""15:00:00""));
+        }
+        
+        @Test
+        public void testDateLessOneMinute() throws Exception {
+            Collection<CompoundVariable> params = makeParams(""HH:mm:ss"",""14:00:00"",""-1m"","""");
+            function.setParameters(params);
+            value = function.execute(result, null);
+            assertTrue(value.equalsIgnoreCase(""13:59:00""));
+        }
+        
+        @Test
+        public void testDefault() throws Exception {
+            Collection<CompoundVariable> params = makeParams("""","""","""","""");
+            function.setParameters(params);
+            long before = Instant.now().toEpochMilli();
+            value = function.execute(result, null);
+            long after = Instant.now().toEpochMilli();
+            long now = Long.parseLong(value);
+            assertTrue(now >= before && now <= after);","[{'comment': 'If we use assertThat with CoreMatchers, we get the values, of the assertions in case of a failing test. It might be nice to use a compare method on Instant instead of converting everything to longs.', 'commenter': 'FSchumacher'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) - date to shift formated
+ * as first param (optional - defaults now) - amount of (seconds / minutes /
+ * hours / days / months ) to add (optional - default nothing is add ) -
+ * variable name ( optional )
+ *
+ * Returns: - Returns a formated date with the specified number of (seconds /
+ * minutes / hours / days / months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$
+
+    private static final List<String> desc = new LinkedList<>();
+
+    static {
+        desc.add(JMeterUtils.getResString(""time_format_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""date_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""value_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""function_name_paropt"")); //$NON-NLS-1$
+    }
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String shift = """"; //$NON-NLS-1$
+    private String variable = """"; //$NON-NLS-1$
+
+    public TimeShiftingFunction() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now(ZoneId.systemDefault());
+        DateTimeFormatter formatter = null;
+        if (!StringUtils.isEmpty(format)) {
+            try {
+                formatter = new DateTimeFormatterBuilder().appendPattern(format)
+                        .parseDefaulting(ChronoField.NANO_OF_SECOND, 0).parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0).parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
+                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0).parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
+                        .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
+                        .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue())
+                        .toFormatter(JMeterUtils.getLocale());
+            } catch (IllegalArgumentException ex) {
+                log.error(""Pattern '{}' is invalid"", format, ex); // $NON-NLS-1$","[{'comment': 'Do we really want to continue in case of an error?', 'commenter': 'FSchumacher'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) - date to shift formated
+ * as first param (optional - defaults now) - amount of (seconds / minutes /
+ * hours / days / months ) to add (optional - default nothing is add ) -
+ * variable name ( optional )
+ *
+ * Returns: - Returns a formated date with the specified number of (seconds /
+ * minutes / hours / days / months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$
+
+    private static final List<String> desc = new LinkedList<>();
+
+    static {
+        desc.add(JMeterUtils.getResString(""time_format_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""date_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""value_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""function_name_paropt"")); //$NON-NLS-1$
+    }
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String shift = """"; //$NON-NLS-1$","[{'comment': 'I would name it `amountToShift`.', 'commenter': 'FSchumacher'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) - date to shift formated
+ * as first param (optional - defaults now) - amount of (seconds / minutes /
+ * hours / days / months ) to add (optional - default nothing is add ) -
+ * variable name ( optional )
+ *
+ * Returns: - Returns a formated date with the specified number of (seconds /
+ * minutes / hours / days / months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$
+
+    private static final List<String> desc = new LinkedList<>();
+
+    static {
+        desc.add(JMeterUtils.getResString(""time_format_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""date_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""value_to_shift"")); //$NON-NLS-1$
+        desc.add(JMeterUtils.getResString(""function_name_paropt"")); //$NON-NLS-1$
+    }
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String shift = """"; //$NON-NLS-1$
+    private String variable = """"; //$NON-NLS-1$","[{'comment': 'What do you think of `variableName`?', 'commenter': 'FSchumacher'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) - date to shift formated
+ * as first param (optional - defaults now) - amount of (seconds / minutes /
+ * hours / days / months ) to add (optional - default nothing is add ) -
+ * variable name ( optional )
+ *
+ * Returns: - Returns a formated date with the specified number of (seconds /
+ * minutes / hours / days / months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShiftingFunction extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShiftingFunction.class);
+
+    private static final String KEY = ""__timeShifting""; // $NON-NLS-1$
+
+    private static final List<String> desc = new LinkedList<>();","[{'comment': 'Would it be possible to use `Arrays.asList(JMeterUtils.getResString(...), ...)`?', 'commenter': 'FSchumacher'}]"
291,src/core/org/apache/jmeter/resources/messages.properties,"@@ -1179,6 +1180,7 @@ throughput_control_perthread_label=Per User
 throughput_control_title=Throughput Controller
 throughput_control_tplabel=Throughput
 time_format=Format string for SimpleDateFormat (optional)
+time_format_shift=Format string for DateTimeFormatter (optional) ( defaut unix timestamp in millisecond )","[{'comment': 'defaut => default', 'commenter': 'FSchumacher'}]"
291,src/functions/org/apache/jmeter/functions/TimeShiftingFunction.java,"@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Collection;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) - date to shift formated
+ * as first param (optional - defaults now) - amount of (seconds / minutes /
+ * hours / days / months ) to add (optional - default nothing is add ) -
+ * variable name ( optional )
+ *
+ * Returns: - Returns a formated date with the specified number of (seconds /","[{'comment': 'formated => formatted', 'commenter': 'FSchumacher'}]"
291,build.xml,"@@ -400,6 +400,7 @@
     <include name=""${lib.dir}/${freemarker.jar}""/>
     <include name=""${lib.dir}/${groovy-all.jar}""/>
     <include name=""${lib.dir}/${hamcrest-core.jar}""/>
+  	<include name=""${lib.dir}/${hamcrest-date.jar}""/>","[{'comment': 'This line seems to be using tabs while file is using spaces for indent. Can you please convert to spaces?', 'commenter': 'vlsi'}]"
291,licenses/bin/hamcrest-date-2.0.4.txt,"@@ -0,0 +1 @@
+According to https://github.com/eXparity/hamcrest-date Hamcrest-date is under BSD License","[{'comment': "">According to https://github.com/eXparity/hamcrest-date\r\n\r\nI'm not sure https://github.com/eXparity/hamcrest-date would always represent licensing state for hamcrest-date-2.0.4\r\n\r\nShould some more specific link be used here? For instance, https://search.maven.org/#artifactdetails%7Corg.exparity%7Chamcrest-date%7C2.0.4%7Cjar or https://github.com/eXparity/hamcrest-date/blob/hamcrest-date-2.0.4/pom.xml#L18-L24 "", 'commenter': 'vlsi'}]"
291,res/maven/ApacheJMeter_parent.pom,"@@ -427,6 +428,11 @@ under the License.
         <artifactId>hamcrest-core</artifactId>
         <version>${hamcrest-core.version}</version>
       </dependency>
+      <dependency>
+	    <groupId>org.exparity</groupId>","[{'comment': 'please, avoid using tabs when file is space indented', 'commenter': 'vlsi'}]"
291,src/functions/org/apache/jmeter/functions/TimeShift.java,"@@ -0,0 +1,188 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: 
+ * - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) 
+ * - date to shift formated
+ * as first param (optional - defaults now) 
+ * - amount of (seconds, minutes,
+ * hours, days or months ) to add (optional - default nothing is add ) 
+ * - variable name ( optional )
+ *
+ * Returns: a formatted date with the specified number of (seconds,
+ * minutes, hours, days or months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShift extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShift.class);
+
+    private static final String KEY = ""__timeShift""; // $NON-NLS-1$
+
+    private static final List<String> desc = Arrays.asList(
+            JMeterUtils.getResString(""time_format_shift""),
+            JMeterUtils.getResString(""date_to_shift""),
+            JMeterUtils.getResString(""value_to_shift""),
+            JMeterUtils.getResString(""function_name_paropt""));
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String amountToShift = """"; //$NON-NLS-1$
+    private String variableName = """"; //$NON-NLS-1$
+    private Pattern pattern = Pattern.compile(""(?:((?:[+-])?\\d+)([MdHms]))"");","[{'comment': '`static final`?\r\nCould you please choose a more meaningful name rather than `pattern`?', 'commenter': 'vlsi'}, {'comment': 'Should year and week be supported as well?', 'commenter': 'vlsi'}]"
291,src/functions/org/apache/jmeter/functions/TimeShift.java,"@@ -0,0 +1,188 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: 
+ * - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) 
+ * - date to shift formated
+ * as first param (optional - defaults now) 
+ * - amount of (seconds, minutes,
+ * hours, days or months ) to add (optional - default nothing is add ) 
+ * - variable name ( optional )
+ *
+ * Returns: a formatted date with the specified number of (seconds,
+ * minutes, hours, days or months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShift extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShift.class);
+
+    private static final String KEY = ""__timeShift""; // $NON-NLS-1$
+
+    private static final List<String> desc = Arrays.asList(
+            JMeterUtils.getResString(""time_format_shift""),
+            JMeterUtils.getResString(""date_to_shift""),
+            JMeterUtils.getResString(""value_to_shift""),
+            JMeterUtils.getResString(""function_name_paropt""));
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String amountToShift = """"; //$NON-NLS-1$
+    private String variableName = """"; //$NON-NLS-1$
+    private Pattern pattern = Pattern.compile(""(?:((?:[+-])?\\d+)([MdHms]))"");
+    
+    public TimeShift() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now(ZoneId.systemDefault());
+        DateTimeFormatter formatter = null;
+        if (!StringUtils.isEmpty(format)) {
+            try {
+                formatter = new DateTimeFormatterBuilder().appendPattern(format)","[{'comment': 'I wonder how much does it cost to build this formatter thing. Is it something that should be cached?', 'commenter': 'vlsi'}]"
291,src/functions/org/apache/jmeter/functions/TimeShift.java,"@@ -0,0 +1,188 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: 
+ * - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) 
+ * - date to shift formated
+ * as first param (optional - defaults now) 
+ * - amount of (seconds, minutes,
+ * hours, days or months ) to add (optional - default nothing is add ) 
+ * - variable name ( optional )
+ *
+ * Returns: a formatted date with the specified number of (seconds,
+ * minutes, hours, days or months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShift extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShift.class);
+
+    private static final String KEY = ""__timeShift""; // $NON-NLS-1$
+
+    private static final List<String> desc = Arrays.asList(
+            JMeterUtils.getResString(""time_format_shift""),
+            JMeterUtils.getResString(""date_to_shift""),
+            JMeterUtils.getResString(""value_to_shift""),
+            JMeterUtils.getResString(""function_name_paropt""));
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String amountToShift = """"; //$NON-NLS-1$
+    private String variableName = """"; //$NON-NLS-1$
+    private Pattern pattern = Pattern.compile(""(?:((?:[+-])?\\d+)([MdHms]))"");
+    
+    public TimeShift() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now(ZoneId.systemDefault());","[{'comment': '`ZoneId.systemDefault` is not a trivial method, so it makes sense to cache the outcome at least for the duration of the method', 'commenter': 'vlsi'}]"
291,src/functions/org/apache/jmeter/functions/TimeShift.java,"@@ -0,0 +1,188 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: 
+ * - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) 
+ * - date to shift formated
+ * as first param (optional - defaults now) 
+ * - amount of (seconds, minutes,
+ * hours, days or months ) to add (optional - default nothing is add ) 
+ * - variable name ( optional )
+ *
+ * Returns: a formatted date with the specified number of (seconds,
+ * minutes, hours, days or months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShift extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShift.class);
+
+    private static final String KEY = ""__timeShift""; // $NON-NLS-1$
+
+    private static final List<String> desc = Arrays.asList(
+            JMeterUtils.getResString(""time_format_shift""),
+            JMeterUtils.getResString(""date_to_shift""),
+            JMeterUtils.getResString(""value_to_shift""),
+            JMeterUtils.getResString(""function_name_paropt""));
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String amountToShift = """"; //$NON-NLS-1$
+    private String variableName = """"; //$NON-NLS-1$
+    private Pattern pattern = Pattern.compile(""(?:((?:[+-])?\\d+)([MdHms]))"");
+    
+    public TimeShift() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now(ZoneId.systemDefault());
+        DateTimeFormatter formatter = null;
+        if (!StringUtils.isEmpty(format)) {
+            try {
+                formatter = new DateTimeFormatterBuilder().appendPattern(format)
+                        .parseDefaulting(ChronoField.NANO_OF_SECOND, 0).parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0).parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
+                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0).parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
+                        .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
+                        .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue())
+                        .toFormatter(JMeterUtils.getLocale());
+            } catch (IllegalArgumentException ex) {
+                log.error(""Pattern '{}' is invalid"", format, ex); // $NON-NLS-1$","[{'comment': 'Could you please add ""corrective action"" to the log message? E.g. ""supported formats are...""', 'commenter': 'vlsi'}]"
291,src/functions/org/apache/jmeter/functions/TimeShift.java,"@@ -0,0 +1,188 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.functions;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.jmeter.engine.util.CompoundVariable;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * timeShifting Function permit to shift a date
+ *
+ * Parameters: 
+ * - format date @see
+ * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
+ * (optional - defaults to epoch time in millisecond) 
+ * - date to shift formated
+ * as first param (optional - defaults now) 
+ * - amount of (seconds, minutes,
+ * hours, days or months ) to add (optional - default nothing is add ) 
+ * - variable name ( optional )
+ *
+ * Returns: a formatted date with the specified number of (seconds,
+ * minutes, hours, days or months ) added. - value is also saved in the
+ * variable for later re-use.
+ *
+ * @since 3.3
+ */
+public class TimeShift extends AbstractFunction {
+    private static final Logger log = LoggerFactory.getLogger(TimeShift.class);
+
+    private static final String KEY = ""__timeShift""; // $NON-NLS-1$
+
+    private static final List<String> desc = Arrays.asList(
+            JMeterUtils.getResString(""time_format_shift""),
+            JMeterUtils.getResString(""date_to_shift""),
+            JMeterUtils.getResString(""value_to_shift""),
+            JMeterUtils.getResString(""function_name_paropt""));
+
+    // Ensure that these are set, even if no paramters are provided
+    private String format = """"; //$NON-NLS-1$
+    private String dateToShift = """"; //$NON-NLS-1$
+    private String amountToShift = """"; //$NON-NLS-1$
+    private String variableName = """"; //$NON-NLS-1$
+    private Pattern pattern = Pattern.compile(""(?:((?:[+-])?\\d+)([MdHms]))"");
+    
+    public TimeShift() {
+        super();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+        String dateString;
+        LocalDateTime localDateTimeToShift = LocalDateTime.now(ZoneId.systemDefault());
+        DateTimeFormatter formatter = null;
+        if (!StringUtils.isEmpty(format)) {
+            try {
+                formatter = new DateTimeFormatterBuilder().appendPattern(format)
+                        .parseDefaulting(ChronoField.NANO_OF_SECOND, 0).parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)
+                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0).parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
+                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0).parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
+                        .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
+                        .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue())
+                        .toFormatter(JMeterUtils.getLocale());
+            } catch (IllegalArgumentException ex) {
+                log.error(""Pattern '{}' is invalid"", format, ex); // $NON-NLS-1$
+                return """";
+            }
+        }
+
+        if (!dateToShift.isEmpty()) {
+            try {
+                if (formatter != null) {
+                    localDateTimeToShift = LocalDateTime.parse(dateToShift, formatter);
+                } else {
+                    localDateTimeToShift = LocalDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(dateToShift)),
+                            ZoneId.systemDefault());
+                }
+            } catch (DateTimeParseException | NumberFormatException ex) {
+                log.error(""Failed to parse the date '{}' to shift"", dateToShift, ex); // $NON-NLS-1$
+            }
+        }
+
+        // Check amount value to shift
+        if (!StringUtils.isEmpty(amountToShift)) {
+            Matcher m = pattern.matcher(amountToShift);
+            while (m.find()) {
+                long amount = Long.parseLong(m.group(1));
+                String period = m.group(2);
+                log.debug(""Add '{}{}' period of time on '{}'"", amount, period, localDateTimeToShift);
+                switch (period) {
+                    case ""s"":
+                        localDateTimeToShift = localDateTimeToShift.plusSeconds(amount);
+                        break;
+                    case ""m"":
+                        localDateTimeToShift = localDateTimeToShift.plusMinutes(amount);
+                        break;
+                    case ""H"":
+                        localDateTimeToShift = localDateTimeToShift.plusHours(amount);
+                        break;
+                    case ""d"":
+                        localDateTimeToShift = localDateTimeToShift.plusDays(amount);
+                        break;
+                    case ""M"":
+                        localDateTimeToShift = localDateTimeToShift.plusMonths(amount);
+                        break;
+                }
+            }
+        }
+
+        if (formatter != null) {
+            dateString = localDateTimeToShift.format(formatter);
+        } else {
+            ZoneOffset offset = ZoneOffset.systemDefault().getRules().getOffset(localDateTimeToShift);
+            dateString = String.valueOf(localDateTimeToShift.toInstant(offset).toEpochMilli());
+        }
+
+        if (variableName.length() > 0) {","[{'comment': 'Other checks seem to use `StringUtils.isEmpty` rather than `length()>0`', 'commenter': 'vlsi'}]"
291,res/maven/ApacheJMeter_parent.pom,"@@ -427,6 +428,11 @@ under the License.
         <artifactId>hamcrest-core</artifactId>
         <version>${hamcrest-core.version}</version>
       </dependency>
+      <dependency>
+	    <groupId>org.exparity</groupId>
+	    <artifactId>hamcrest-date</artifactId>
+	    <version>${hamcrest-date.version}</version>","[{'comment': 'I guess this dependency should have test scope.', 'commenter': 'PascalSchumacher'}]"
298,src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java,"@@ -152,22 +197,18 @@ private boolean hasVaryHeader(URLConnection conn) {
      *            result to decide if result is cacheable
      */
     public void saveDetails(HttpResponse method, HTTPSampleResult res) {","[{'comment': ""This method contents looks like duplicate of another `saveDetails`. I'd suggest refactoring common code into separate method to avoid duplication."", 'commenter': 'undera'}, {'comment': 'This is _old_ code and a result of the different implementations of the http samplers. What refactoring do you have in mind? ', 'commenter': 'FSchumacher'}]"
298,src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java,"@@ -626,6 +627,19 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
         }
     }
 
+    private Header[] getHeaders(HeaderManager headerManager) {","[{'comment': ""I'd make this `protected` for extensibility"", 'commenter': 'undera'}, {'comment': 'I thought of extracting it into a utility class.', 'commenter': 'FSchumacher'}]"
298,src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java,"@@ -127,19 +163,28 @@ public Date getExpires() {
      * @param res result
      */
     public void saveDetails(URLConnection conn, HTTPSampleResult res){
-        if (isCacheable(res) && !hasVaryHeader(conn)){
+        if (isCacheable(res)){
             String lastModified = conn.getHeaderField(HTTPConstants.LAST_MODIFIED);
             String expires = conn.getHeaderField(HTTPConstants.EXPIRES);
             String etag = conn.getHeaderField(HTTPConstants.ETAG);
             String url = conn.getURL().toString();
             String cacheControl = conn.getHeaderField(HTTPConstants.CACHE_CONTROL);
             String date = conn.getHeaderField(HTTPConstants.DATE);
-            setCache(lastModified, cacheControl, expires, etag, url, date);
+            setCache(lastModified, cacheControl, expires, etag, url, date, getVaryHeader(conn.getHeaderField(HTTPConstants.VARY), res.getRequestHeaders()));
         }
     }
 
-    private boolean hasVaryHeader(URLConnection conn) {
-        return conn.getHeaderField(HTTPConstants.VARY) != null;
+    private Pair<String, String> getVaryHeader(String headerName, String reqHeaders) {
+        if (headerName == null) {
+            return null;
+        }
+        for (String headerLine: reqHeaders.split(""\n"")) {
+            if (headerLine.startsWith(headerName + "": "")) {","[{'comment': 'Please move string concatenation out of a loop', 'commenter': 'vlsi'}, {'comment': 'I am thinking of splitting the `headerLine`, so that I can easier compare the `headerName` ignoring the case.\r\n\r\nAnd as undera pointed out, a vary header can have multiple values (separated by comma), so this logic will have to be changed anyway.', 'commenter': 'FSchumacher'}]"
298,src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java,"@@ -180,65 +221,97 @@ private void setCache(String lastModified, String cacheControl, String expires,
         }
         Date expiresDate = null; // i.e. not using Expires
         if (useExpires) {// Check that we are processing Expires/CacheControl
-            final String MAX_AGE = ""max-age="";
-            
+            final String maxAge = ""max-age="";
+
             if(cacheControl != null && cacheControl.contains(""no-store"")) {
                 // We must not store an CacheEntry, otherwise a 
                 // conditional request may be made
                 return;
             }
             if (expires != null) {
-                try {
-                    expiresDate = org.apache.http.client.utils.DateUtils.parseDate(expires);
-                } catch (IllegalArgumentException e) {
-                    if (log.isDebugEnabled()){
-                        log.debug(""Unable to parse Expires: '""+expires+""' ""+e);
-                    }
-                    expiresDate = CacheManager.EXPIRED_DATE; // invalid dates must be treated as expired
-                }
+                expiresDate = extractExpiresDateFromExpires(expires);
             }
             // if no-cache is present, ensure that expiresDate remains null, which forces revalidation
             if(cacheControl != null && !cacheControl.contains(""no-cache"")) {
-                // the max-age directive overrides the Expires header,
-                if(cacheControl.contains(MAX_AGE)) {
-                    long maxAgeInSecs = Long.parseLong(
-                            cacheControl.substring(cacheControl.indexOf(MAX_AGE)+MAX_AGE.length())
-                                .split(""[, ]"")[0] // Bug 51932 - allow for optional trailing attributes
-                            );
-                    expiresDate=new Date(System.currentTimeMillis()+maxAgeInSecs*1000);
-
-                } else if(expires==null) { // No max-age && No expires
-                    if(!StringUtils.isEmpty(lastModified) && !StringUtils.isEmpty(date)) {
-                        try {
-                            Date responseDate = DateUtils.parseDate( date );
-                            Date lastModifiedAsDate = DateUtils.parseDate( lastModified );
-                            // see https://developer.mozilla.org/en/HTTP_Caching_FAQ
-                            // see http://www.ietf.org/rfc/rfc2616.txt#13.2.4 
-                            expiresDate=new Date(System.currentTimeMillis()
-                                    +Math.round((responseDate.getTime()-lastModifiedAsDate.getTime())*0.1));
-                        } catch(IllegalArgumentException e) {
-                            // date or lastModified may be null or in bad format
-                            if(log.isWarnEnabled()) {
-                                log.warn(""Failed computing expiration date with following info:""
-                                    +lastModified + "","" 
-                                    + cacheControl + "",""
-                                    + expires + "","" 
-                                    + etag + "",""
-                                    + url + "",""
-                                    + date);
-                            }
-                            // TODO Can't see anything in SPEC
-                            expiresDate = new Date(System.currentTimeMillis()+ONE_YEAR_MS);
-                        }
-                    } else {
-                        // TODO Can't see anything in SPEC
-                        expiresDate = new Date(System.currentTimeMillis()+ONE_YEAR_MS);
-                    }
-                }  
+                expiresDate = extractExpiresDateFromCacheControl(lastModified,
+                        cacheControl, expires, etag, url, date, maxAge);
                 // else expiresDate computed in (expires!=null) condition is used
             }
         }
-        getCache().put(url, new CacheEntry(lastModified, expiresDate, etag));
+        if (varyHeader != null) {
+            log.debug(""Set entry into cache for url {} and vary {} ({})"", url,
+                    varyHeader,
+                    varyUrl(url, varyHeader.getLeft(), varyHeader.getRight()));","[{'comment': 'Please add `isDebugEnabled` check to prevent `varyUrl` computation in debug disabled case.', 'commenter': 'vlsi'}]"
305,src/core/org/apache/jmeter/gui/LoggerPanel.java,"@@ -18,14 +18,11 @@
 
 package org.apache.jmeter.gui;
 
-import java.awt.BorderLayout;
-import java.awt.Insets;
+import java.awt.*;","[{'comment': ""Don't use wildcard import."", 'commenter': 'FSchumacher'}]"
305,src/core/org/apache/jmeter/gui/LoggerPanel.java,"@@ -90,6 +91,21 @@ private JTextArea init() { // WARNING: called from ctor so must not be overridde
             jSyntaxTextArea.setLineWrap(false);
             jSyntaxTextArea.setLanguage(""text"");
             jSyntaxTextArea.setMargin(new Insets(2, 2, 2, 2)); // space between borders and text
+            int fontSize = jSyntaxTextArea.getFont().getSize();
+            increase = new JMenuItem(String.format(JMeterUtils.getResString(""font.increase""), (fontSize + 1)));","[{'comment': 'The parenthesis around `fontSize + 1` is not needed and should be removed.\r\nThe other scaling used in JMeter uses a multiplication scheme. Perhaps this one should follow the other one.', 'commenter': 'FSchumacher'}]"
305,src/core/org/apache/jmeter/resources/messages_de.properties,"@@ -536,3 +536,5 @@ warning=Warnung\!
 web_server_domain=Server Name oder IP\:
 web_testing_retrieve_images=Hole alle Bilder und Java Applets (nur HTML Dateien)
 you_must_enter_a_valid_number=Sie m\u00FCssen ein g\u00FCltige Nummer eingeben
+font.decrease=Decrease font to %d pt","[{'comment': 'This is not a german sentence :)\r\nIf you are not sure, leave it out, or use `Verkleinere Font auf %d pt` (The next one would be `Vergr√∂√üere Font auf %d pt` - the `√∂` and `√ü` would have to be translated to \\u... sequences, still.)', 'commenter': 'FSchumacher'}]"
305,src/core/org/apache/jmeter/resources/messages_es.properties,"@@ -1003,3 +1003,5 @@ xpath_tidy_show_warnings=Mostrar advertencias
 you_must_enter_a_valid_number=Debe introducir un n\u00FAmero v\u00E1lido
 zh_cn=Chino (Simplificado)
 zh_tw=Chino (Tradicional)
+font.decrease=Decrease font to %d pt","[{'comment': 'Same here, but I have no spanish foo.', 'commenter': 'FSchumacher'}]"
305,src/core/org/apache/jmeter/resources/messages_fr.properties,"@@ -1364,3 +1364,5 @@ xpath_tidy_show_warnings=Afficher les alertes
 you_must_enter_a_valid_number=Vous devez entrer un nombre valide
 zh_cn=Chinois (simplifi\u00E9)
 zh_tw=Chinois (traditionnel)
+font.decrease=Decrease font to %d pt","[{'comment': 'And again. But this one has to be translated, it will be checked.', 'commenter': 'FSchumacher'}]"
305,src/core/org/apache/jmeter/resources/messages_ja.properties,"@@ -451,3 +451,5 @@ web_testing_title=HTTP \u30EA\u30AF\u30A8\u30B9\u30C8
 workbench_title=\u30EF\u30FC\u30AF\u30D9\u30F3\u30C1
 xml_assertion_title=XML \u30A2\u30B5\u30FC\u30B7\u30E7\u30F3
 you_must_enter_a_valid_number=\u9069\u5207\u306A\u6570\u5024\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044
+font.decrease=Decrease font to %d pt","[{'comment': 'Well, ...', 'commenter': 'FSchumacher'}]"
321,src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java,"@@ -71,6 +72,10 @@
 
     /** A panel allowing the user to set arguments for this test. */
     private ArgumentsPanel argsPanel;
+    
+    /** The current className of the Backend listenenr **/
+    private String className;","[{'comment': ""This part does not seem to be related to this PR , it's probably here to avoid losing configuration when changing class. Would it be possible to make another PR ?"", 'commenter': 'pmouawad'}, {'comment': 'Not only, for me these changes are an integral part of the PR. Without it, you can swap class without lose or merge configurations.', 'commenter': 'max3163'}, {'comment': 'ok', 'commenter': 'pmouawad'}]"
321,src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java,"@@ -105,7 +117,7 @@
     private String testTags;
     // Name of the application tested
     private String application = """";
-
+    private String TAG_USER = """";","[{'comment': 'Should be lower case or static final', 'commenter': 'pmouawad'}, {'comment': 'Fix', 'commenter': 'max3163'}]"
321,src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java,"@@ -318,6 +335,13 @@ public void setupTest(BackendListenerContext context) throws Exception {
                 }
             }
         }
+        // Check if more fields are filled ( corresponding to user tag )
+        context.getParameterNamesIterator().forEachRemaining(name->{
+            if ( !defaultArg.containsKey(name)) {
+                TAG_USER += "","" + AbstractInfluxdbMetricsSender.tagToStringValue(name.trim()) + ""="" + AbstractInfluxdbMetricsSender.tagToStringValue(context.getParameter(name).trim());","[{'comment': 'Add some logging here to debug in case of issue', 'commenter': 'pmouawad'}, {'comment': ""Thanks for this PR. It would require more documentation as I find the usage a bit edgy. AFAIU you 'll enable user to add as many rows (key=value) which will be tags for Influx event.\r\nCan't we have some meaningful prefix or something to avoid a conflict between a user tag and a real property of the InfluxdbBackendListenerClient ?"", 'commenter': 'pmouawad'}, {'comment': 'Done', 'commenter': 'max3163'}, {'comment': ""I don't think the user will add a lot of tag and it's more clear for me in this way and it's easier to parse data into influxdb line protocol. \r\nIf you want, we can add a '_' at the start of each user tag but for me it's not mandatory as real property of the InfluxdbBackendListenerClient are default setted "", 'commenter': 'max3163'}, {'comment': 'What if user names his tag the same as an existing attribute ? he can\'t . If we add a prefix ""TAG_"" then I feel it\'s more clear and avoid conflicts. \r\nAlso I think this needs more documentation. Feature without documentation is not usable. We currently lack documentation on InfluxDBBackendListenerClient.\r\nI think it\'s a feature that is very interesting and we need users to know it exists and what it does.', 'commenter': 'pmouawad'}]"
321,src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java,"@@ -92,6 +92,18 @@
     private static final int MAX_POOL_SIZE = 1;
     private static final String SEPARATOR = "";""; //$NON-NLS-1$
     private static final Object LOCK = new Object();
+    private static Map<String, String> defaultArg = new LinkedHashMap<>();","[{'comment': 'Should be UPPER CASE', 'commenter': 'pmouawad'}, {'comment': 'Fix', 'commenter': 'max3163'}]"
325,docs/usermanual/component_reference.html,"@@ -3813,7 +3813,7 @@ <h3 id=""JMS_Publisher_parms1"">
   ","[{'comment': 'HTML files are generated from XML. Could you update comonent_reference.xml instead ?', 'commenter': 'pmouawad'}]"
325,docs/usermanual/component_reference.html,"@@ -4276,10 +4289,32 @@ <h3 id=""JMS_Point-to-Point_parms1"">
     temporary queues will be used for the communication between the requestor and the server.
     This is very different from the fixed reply queue. With temporary queues the sending thread will block until the reply message has been received.
     With <span class=""code"">Request Response</span> mode, you need to have a Server that listens to messages sent to Request Queue and sends replies to 
-    queue referenced by <span class=""code"">message.getJMSReplyTo()</span>.</dd>
-    
+    queue referenced by <span class=""code"">message.getJMSReplyTo()</span>.
+</dd>
+
+<dt>
+<span class=""code"">Read</span>
+</dt>
+<dd> will read a message from an outgoing queue which has no listeners attached. This can be convenient for testing purposes.
+     This method can be used if you need to handle queues without a binding file (in case the jmeter-jms-skip-jndi library is used),
+     which only works with the JMS Point-to-Point sampler.
+     In case binding files are used, one can also use the JMS Subscriber Sampler for reading from a queue.
+</dd>
+
+<dt>
+<span class=""code"">Browse</span>
+</dt>
+<dd> will determine the current queue depth without removing messages from the queue, returning the number of messages on the queue. ","[{'comment': 'Would it be possible to provide screenshots as it makes documentation much clearer', 'commenter': 'pmouawad'}]"
325,src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,"@@ -142,48 +173,244 @@ public SampleResult sample(Entry entry) {
         res.sampleStart();
 
         try {
-            TextMessage msg = createMessage();
-            if (isOneway()) {
-                int deliveryMode = isNonPersistent() ? 
-                        DeliveryMode.NON_PERSISTENT:DeliveryMode.PERSISTENT;
-                producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                res.setResponseOK();
-                res.setResponseData(""Oneway request has no response data"", null);
+            LOGGER.debug(""Point-to-point mode: "" + getCommunicationstyle());
+            if (isBrowse()) {
+                handleBrowse(res);
+            } else if (isClearQueue()) {
+                handleClearQueue(res);
+            } else if (isOneway()) {
+                handleOneWay(res);
+            } else if (isRead()) {
+                handleRead(context, res);
             } else {
-                if (!useTemporyQueue()) {
-                    msg.setJMSReplyTo(receiveQueue);
-                }
-                Message replyMsg = executor.sendAndReceive(msg,
-                        isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT, 
-                        Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                if (replyMsg == null) {
-                    res.setResponseMessage(""No reply message received"");
-                } else {
-                    if (replyMsg instanceof TextMessage) {
-                        res.setResponseData(((TextMessage) replyMsg).getText(), null);
-                    } else {
-                        res.setResponseData(replyMsg.toString(), null);
-                    }
-                    res.setResponseHeaders(Utils.messageProperties(replyMsg));
-                    res.setResponseOK();
-                }
+                handleRequestResponse(res);
             }
         } catch (Exception e) {
             LOGGER.warn(e.getLocalizedMessage(), e);
-            if (thrown != null){
+            if (thrown != null) {
                 res.setResponseMessage(thrown.toString());
-            } else {                
+            } else {
                 res.setResponseMessage(e.getLocalizedMessage());
             }
         }
         res.sampleEnd();
         return res;
     }
 
+    private void handleBrowse(SampleResult res) throws JMSException {
+        LOGGER.debug(""isBrowseOnly"");
+        StringBuffer sb = new StringBuffer("""");","[{'comment': 'StringBuilder would be better here, and wherever StringBuffer is used', 'commenter': 'pmouawad'}]"
325,src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,"@@ -142,48 +173,244 @@ public SampleResult sample(Entry entry) {
         res.sampleStart();
 
         try {
-            TextMessage msg = createMessage();
-            if (isOneway()) {
-                int deliveryMode = isNonPersistent() ? 
-                        DeliveryMode.NON_PERSISTENT:DeliveryMode.PERSISTENT;
-                producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                res.setResponseOK();
-                res.setResponseData(""Oneway request has no response data"", null);
+            LOGGER.debug(""Point-to-point mode: "" + getCommunicationstyle());
+            if (isBrowse()) {
+                handleBrowse(res);
+            } else if (isClearQueue()) {
+                handleClearQueue(res);
+            } else if (isOneway()) {
+                handleOneWay(res);
+            } else if (isRead()) {
+                handleRead(context, res);
             } else {
-                if (!useTemporyQueue()) {
-                    msg.setJMSReplyTo(receiveQueue);
-                }
-                Message replyMsg = executor.sendAndReceive(msg,
-                        isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT, 
-                        Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                if (replyMsg == null) {
-                    res.setResponseMessage(""No reply message received"");
-                } else {
-                    if (replyMsg instanceof TextMessage) {
-                        res.setResponseData(((TextMessage) replyMsg).getText(), null);
-                    } else {
-                        res.setResponseData(replyMsg.toString(), null);
-                    }
-                    res.setResponseHeaders(Utils.messageProperties(replyMsg));
-                    res.setResponseOK();
-                }
+                handleRequestResponse(res);
             }
         } catch (Exception e) {
             LOGGER.warn(e.getLocalizedMessage(), e);
-            if (thrown != null){
+            if (thrown != null) {
                 res.setResponseMessage(thrown.toString());
-            } else {                
+            } else {
                 res.setResponseMessage(e.getLocalizedMessage());
             }
         }
         res.sampleEnd();
         return res;
     }
 
+    private void handleBrowse(SampleResult res) throws JMSException {
+        LOGGER.debug(""isBrowseOnly"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Browse message on Send Queue "" + sendQueue.getQueueName());
+        sb.append(browseQueueDetails(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleClearQueue(SampleResult res) throws JMSException {
+        LOGGER.debug(""isClearQueue"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Clear messages on Send Queue "" + sendQueue.getQueueName());
+        sb.append(clearQueue(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleOneWay(SampleResult res) throws JMSException {
+        LOGGER.debug(""isOneWay"");
+        TextMessage msg = createMessage();
+        int deliveryMode = isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;
+        producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        res.setResponseOK();
+        res.setResponseData(""Oneway request has no response data"", null);
+    }
+
+    private void handleRead(JMeterContext context, SampleResult res) {
+        LOGGER.debug(""isRead"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        Sampler sampler = context.getPreviousSampler();
+        SampleResult sr = context.getPreviousResult();
+        String jmsSelector = getJMSSelector();
+        if (jmsSelector.equals(""_PREV_SAMPLER_"")) {
+            if (sampler instanceof JMSSampler) {
+                jmsSelector = sr.getResponseMessage();
+            }
+        }
+        int sampleCounter = 0;
+        int sampleTries = 0;
+        String result = null;
+
+        StringBuilder buffer = new StringBuilder();
+        StringBuilder propBuffer = new StringBuilder();
+
+        do {
+            result = browseQueueForConsumption(sendQueue, jmsSelector, res, buffer, propBuffer);
+            if (result != null) {
+                sb.append(result);
+                sb.append('\n');
+                sampleCounter++;
+            }
+            sampleTries++;
+        } while ((result != null) && (sampleTries < getNumberOfSamplesToAggregateAsInt()));
+
+        res.setResponseMessage(sampleCounter + "" samples messages received"");
+        res.setResponseData(buffer.toString().getBytes()); // TODO - charset?
+        res.setResponseHeaders(propBuffer.toString());
+        if (sampleCounter == 0) {
+            res.setResponseCode(""404"");
+            res.setSuccessful(false);
+        } else {
+            res.setResponseCodeOK();
+            res.setSuccessful(true);
+        }
+        res.setResponseMessage(sampleCounter + "" message(s) received successfully"");
+        res.setSamplerData(getNumberOfSamplesToAggregateAsInt() + "" messages expected"");
+        res.setSampleCount(sampleCounter);
+    }
+
+    private void handleRequestResponse(SampleResult res) throws JMSException {
+        TextMessage msg = createMessage();
+        if (!useTemporyQueue()) {
+            LOGGER.debug(""NO TEMP QUEUE"");
+            msg.setJMSReplyTo(receiveQueue);
+        }
+        LOGGER.debug(""Create temp message"");
+        Message replyMsg = executor.sendAndReceive(msg,
+                isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT,
+                Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        if (replyMsg == null) {
+            res.setResponseMessage(""No reply message received"");
+        } else {
+            if (replyMsg instanceof TextMessage) {
+                res.setResponseData(((TextMessage) replyMsg).getText(), null);
+            } else {
+                res.setResponseData(replyMsg.toString(), null);
+            }
+            res.setResponseHeaders(Utils.messageProperties(replyMsg));
+            res.setResponseOK();
+        }
+    }
+
+    private String browseQueueForConsumption(Queue queue, String jmsSelector, SampleResult res, StringBuilder buffer,","[{'comment': ""Isn't name  confusing here ? AFAIU we are consuming here not browsing right ?"", 'commenter': 'pmouawad'}]"
325,src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,"@@ -142,48 +173,244 @@ public SampleResult sample(Entry entry) {
         res.sampleStart();
 
         try {
-            TextMessage msg = createMessage();
-            if (isOneway()) {
-                int deliveryMode = isNonPersistent() ? 
-                        DeliveryMode.NON_PERSISTENT:DeliveryMode.PERSISTENT;
-                producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                res.setResponseOK();
-                res.setResponseData(""Oneway request has no response data"", null);
+            LOGGER.debug(""Point-to-point mode: "" + getCommunicationstyle());
+            if (isBrowse()) {
+                handleBrowse(res);
+            } else if (isClearQueue()) {
+                handleClearQueue(res);
+            } else if (isOneway()) {
+                handleOneWay(res);
+            } else if (isRead()) {
+                handleRead(context, res);
             } else {
-                if (!useTemporyQueue()) {
-                    msg.setJMSReplyTo(receiveQueue);
-                }
-                Message replyMsg = executor.sendAndReceive(msg,
-                        isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT, 
-                        Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                if (replyMsg == null) {
-                    res.setResponseMessage(""No reply message received"");
-                } else {
-                    if (replyMsg instanceof TextMessage) {
-                        res.setResponseData(((TextMessage) replyMsg).getText(), null);
-                    } else {
-                        res.setResponseData(replyMsg.toString(), null);
-                    }
-                    res.setResponseHeaders(Utils.messageProperties(replyMsg));
-                    res.setResponseOK();
-                }
+                handleRequestResponse(res);
             }
         } catch (Exception e) {
             LOGGER.warn(e.getLocalizedMessage(), e);
-            if (thrown != null){
+            if (thrown != null) {
                 res.setResponseMessage(thrown.toString());
-            } else {                
+            } else {
                 res.setResponseMessage(e.getLocalizedMessage());
             }
         }
         res.sampleEnd();
         return res;
     }
 
+    private void handleBrowse(SampleResult res) throws JMSException {
+        LOGGER.debug(""isBrowseOnly"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Browse message on Send Queue "" + sendQueue.getQueueName());
+        sb.append(browseQueueDetails(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleClearQueue(SampleResult res) throws JMSException {
+        LOGGER.debug(""isClearQueue"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Clear messages on Send Queue "" + sendQueue.getQueueName());
+        sb.append(clearQueue(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleOneWay(SampleResult res) throws JMSException {
+        LOGGER.debug(""isOneWay"");
+        TextMessage msg = createMessage();
+        int deliveryMode = isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;
+        producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        res.setResponseOK();
+        res.setResponseData(""Oneway request has no response data"", null);
+    }
+
+    private void handleRead(JMeterContext context, SampleResult res) {
+        LOGGER.debug(""isRead"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        Sampler sampler = context.getPreviousSampler();
+        SampleResult sr = context.getPreviousResult();
+        String jmsSelector = getJMSSelector();
+        if (jmsSelector.equals(""_PREV_SAMPLER_"")) {
+            if (sampler instanceof JMSSampler) {
+                jmsSelector = sr.getResponseMessage();
+            }
+        }
+        int sampleCounter = 0;
+        int sampleTries = 0;
+        String result = null;
+
+        StringBuilder buffer = new StringBuilder();
+        StringBuilder propBuffer = new StringBuilder();
+
+        do {
+            result = browseQueueForConsumption(sendQueue, jmsSelector, res, buffer, propBuffer);
+            if (result != null) {
+                sb.append(result);
+                sb.append('\n');
+                sampleCounter++;
+            }
+            sampleTries++;
+        } while ((result != null) && (sampleTries < getNumberOfSamplesToAggregateAsInt()));
+
+        res.setResponseMessage(sampleCounter + "" samples messages received"");
+        res.setResponseData(buffer.toString().getBytes()); // TODO - charset?
+        res.setResponseHeaders(propBuffer.toString());
+        if (sampleCounter == 0) {
+            res.setResponseCode(""404"");
+            res.setSuccessful(false);
+        } else {
+            res.setResponseCodeOK();
+            res.setSuccessful(true);
+        }
+        res.setResponseMessage(sampleCounter + "" message(s) received successfully"");
+        res.setSamplerData(getNumberOfSamplesToAggregateAsInt() + "" messages expected"");
+        res.setSampleCount(sampleCounter);
+    }
+
+    private void handleRequestResponse(SampleResult res) throws JMSException {
+        TextMessage msg = createMessage();
+        if (!useTemporyQueue()) {
+            LOGGER.debug(""NO TEMP QUEUE"");
+            msg.setJMSReplyTo(receiveQueue);
+        }
+        LOGGER.debug(""Create temp message"");
+        Message replyMsg = executor.sendAndReceive(msg,
+                isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT,
+                Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        if (replyMsg == null) {
+            res.setResponseMessage(""No reply message received"");
+        } else {
+            if (replyMsg instanceof TextMessage) {
+                res.setResponseData(((TextMessage) replyMsg).getText(), null);
+            } else {
+                res.setResponseData(replyMsg.toString(), null);
+            }
+            res.setResponseHeaders(Utils.messageProperties(replyMsg));
+            res.setResponseOK();
+        }
+    }
+
+    private String browseQueueForConsumption(Queue queue, String jmsSelector, SampleResult res, StringBuilder buffer,
+            StringBuilder propBuffer) {
+        String retVal = null;
+        try {
+            QueueReceiver consumer = session.createReceiver(queue, jmsSelector);
+            Message reply = consumer.receive(Long.valueOf(getTimeout()));
+            LOGGER.debug(""Message: "" + reply);
+            consumer.close();","[{'comment': 'You should use try with resource pattern to ensure close happens ? Or use try/finally and closeQuietly depending on what you want to do', 'commenter': 'pmouawad'}]"
325,src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,"@@ -142,48 +173,244 @@ public SampleResult sample(Entry entry) {
         res.sampleStart();
 
         try {
-            TextMessage msg = createMessage();
-            if (isOneway()) {
-                int deliveryMode = isNonPersistent() ? 
-                        DeliveryMode.NON_PERSISTENT:DeliveryMode.PERSISTENT;
-                producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                res.setResponseOK();
-                res.setResponseData(""Oneway request has no response data"", null);
+            LOGGER.debug(""Point-to-point mode: "" + getCommunicationstyle());
+            if (isBrowse()) {
+                handleBrowse(res);
+            } else if (isClearQueue()) {
+                handleClearQueue(res);
+            } else if (isOneway()) {
+                handleOneWay(res);
+            } else if (isRead()) {
+                handleRead(context, res);
             } else {
-                if (!useTemporyQueue()) {
-                    msg.setJMSReplyTo(receiveQueue);
-                }
-                Message replyMsg = executor.sendAndReceive(msg,
-                        isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT, 
-                        Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                if (replyMsg == null) {
-                    res.setResponseMessage(""No reply message received"");
-                } else {
-                    if (replyMsg instanceof TextMessage) {
-                        res.setResponseData(((TextMessage) replyMsg).getText(), null);
-                    } else {
-                        res.setResponseData(replyMsg.toString(), null);
-                    }
-                    res.setResponseHeaders(Utils.messageProperties(replyMsg));
-                    res.setResponseOK();
-                }
+                handleRequestResponse(res);
             }
         } catch (Exception e) {
             LOGGER.warn(e.getLocalizedMessage(), e);
-            if (thrown != null){
+            if (thrown != null) {
                 res.setResponseMessage(thrown.toString());
-            } else {                
+            } else {
                 res.setResponseMessage(e.getLocalizedMessage());
             }
         }
         res.sampleEnd();
         return res;
     }
 
+    private void handleBrowse(SampleResult res) throws JMSException {
+        LOGGER.debug(""isBrowseOnly"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Browse message on Send Queue "" + sendQueue.getQueueName());
+        sb.append(browseQueueDetails(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleClearQueue(SampleResult res) throws JMSException {
+        LOGGER.debug(""isClearQueue"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Clear messages on Send Queue "" + sendQueue.getQueueName());
+        sb.append(clearQueue(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleOneWay(SampleResult res) throws JMSException {
+        LOGGER.debug(""isOneWay"");
+        TextMessage msg = createMessage();
+        int deliveryMode = isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;
+        producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        res.setResponseOK();
+        res.setResponseData(""Oneway request has no response data"", null);
+    }
+
+    private void handleRead(JMeterContext context, SampleResult res) {
+        LOGGER.debug(""isRead"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        Sampler sampler = context.getPreviousSampler();
+        SampleResult sr = context.getPreviousResult();
+        String jmsSelector = getJMSSelector();
+        if (jmsSelector.equals(""_PREV_SAMPLER_"")) {
+            if (sampler instanceof JMSSampler) {
+                jmsSelector = sr.getResponseMessage();
+            }
+        }
+        int sampleCounter = 0;
+        int sampleTries = 0;
+        String result = null;
+
+        StringBuilder buffer = new StringBuilder();
+        StringBuilder propBuffer = new StringBuilder();
+
+        do {
+            result = browseQueueForConsumption(sendQueue, jmsSelector, res, buffer, propBuffer);
+            if (result != null) {
+                sb.append(result);
+                sb.append('\n');
+                sampleCounter++;
+            }
+            sampleTries++;
+        } while ((result != null) && (sampleTries < getNumberOfSamplesToAggregateAsInt()));
+
+        res.setResponseMessage(sampleCounter + "" samples messages received"");
+        res.setResponseData(buffer.toString().getBytes()); // TODO - charset?
+        res.setResponseHeaders(propBuffer.toString());
+        if (sampleCounter == 0) {
+            res.setResponseCode(""404"");
+            res.setSuccessful(false);
+        } else {
+            res.setResponseCodeOK();
+            res.setSuccessful(true);
+        }
+        res.setResponseMessage(sampleCounter + "" message(s) received successfully"");
+        res.setSamplerData(getNumberOfSamplesToAggregateAsInt() + "" messages expected"");
+        res.setSampleCount(sampleCounter);
+    }
+
+    private void handleRequestResponse(SampleResult res) throws JMSException {
+        TextMessage msg = createMessage();
+        if (!useTemporyQueue()) {
+            LOGGER.debug(""NO TEMP QUEUE"");
+            msg.setJMSReplyTo(receiveQueue);
+        }
+        LOGGER.debug(""Create temp message"");
+        Message replyMsg = executor.sendAndReceive(msg,
+                isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT,
+                Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        if (replyMsg == null) {
+            res.setResponseMessage(""No reply message received"");
+        } else {
+            if (replyMsg instanceof TextMessage) {
+                res.setResponseData(((TextMessage) replyMsg).getText(), null);
+            } else {
+                res.setResponseData(replyMsg.toString(), null);
+            }
+            res.setResponseHeaders(Utils.messageProperties(replyMsg));
+            res.setResponseOK();
+        }
+    }
+
+    private String browseQueueForConsumption(Queue queue, String jmsSelector, SampleResult res, StringBuilder buffer,
+            StringBuilder propBuffer) {
+        String retVal = null;
+        try {
+            QueueReceiver consumer = session.createReceiver(queue, jmsSelector);
+            Message reply = consumer.receive(Long.valueOf(getTimeout()));
+            LOGGER.debug(""Message: "" + reply);
+            consumer.close();
+            if (reply != null) {
+                res.setResponseMessage(""1 message(s) received successfully"");
+                res.setResponseHeaders(reply.toString());
+                TextMessage msg = (TextMessage) reply;
+                retVal = msg.getText();
+                extractContent(buffer, propBuffer, msg);
+            } else {
+                res.setResponseMessage(""No message received"");
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();","[{'comment': 'This must be removed', 'commenter': 'pmouawad'}]"
325,src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,"@@ -142,48 +173,244 @@ public SampleResult sample(Entry entry) {
         res.sampleStart();
 
         try {
-            TextMessage msg = createMessage();
-            if (isOneway()) {
-                int deliveryMode = isNonPersistent() ? 
-                        DeliveryMode.NON_PERSISTENT:DeliveryMode.PERSISTENT;
-                producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                res.setResponseOK();
-                res.setResponseData(""Oneway request has no response data"", null);
+            LOGGER.debug(""Point-to-point mode: "" + getCommunicationstyle());
+            if (isBrowse()) {
+                handleBrowse(res);
+            } else if (isClearQueue()) {
+                handleClearQueue(res);
+            } else if (isOneway()) {
+                handleOneWay(res);
+            } else if (isRead()) {
+                handleRead(context, res);
             } else {
-                if (!useTemporyQueue()) {
-                    msg.setJMSReplyTo(receiveQueue);
-                }
-                Message replyMsg = executor.sendAndReceive(msg,
-                        isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT, 
-                        Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                if (replyMsg == null) {
-                    res.setResponseMessage(""No reply message received"");
-                } else {
-                    if (replyMsg instanceof TextMessage) {
-                        res.setResponseData(((TextMessage) replyMsg).getText(), null);
-                    } else {
-                        res.setResponseData(replyMsg.toString(), null);
-                    }
-                    res.setResponseHeaders(Utils.messageProperties(replyMsg));
-                    res.setResponseOK();
-                }
+                handleRequestResponse(res);
             }
         } catch (Exception e) {
             LOGGER.warn(e.getLocalizedMessage(), e);
-            if (thrown != null){
+            if (thrown != null) {
                 res.setResponseMessage(thrown.toString());
-            } else {                
+            } else {
                 res.setResponseMessage(e.getLocalizedMessage());
             }
         }
         res.sampleEnd();
         return res;
     }
 
+    private void handleBrowse(SampleResult res) throws JMSException {
+        LOGGER.debug(""isBrowseOnly"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Browse message on Send Queue "" + sendQueue.getQueueName());
+        sb.append(browseQueueDetails(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleClearQueue(SampleResult res) throws JMSException {
+        LOGGER.debug(""isClearQueue"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Clear messages on Send Queue "" + sendQueue.getQueueName());
+        sb.append(clearQueue(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleOneWay(SampleResult res) throws JMSException {
+        LOGGER.debug(""isOneWay"");
+        TextMessage msg = createMessage();
+        int deliveryMode = isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;
+        producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        res.setResponseOK();
+        res.setResponseData(""Oneway request has no response data"", null);
+    }
+
+    private void handleRead(JMeterContext context, SampleResult res) {
+        LOGGER.debug(""isRead"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        Sampler sampler = context.getPreviousSampler();
+        SampleResult sr = context.getPreviousResult();
+        String jmsSelector = getJMSSelector();
+        if (jmsSelector.equals(""_PREV_SAMPLER_"")) {
+            if (sampler instanceof JMSSampler) {
+                jmsSelector = sr.getResponseMessage();
+            }
+        }
+        int sampleCounter = 0;
+        int sampleTries = 0;
+        String result = null;
+
+        StringBuilder buffer = new StringBuilder();
+        StringBuilder propBuffer = new StringBuilder();
+
+        do {
+            result = browseQueueForConsumption(sendQueue, jmsSelector, res, buffer, propBuffer);
+            if (result != null) {
+                sb.append(result);
+                sb.append('\n');
+                sampleCounter++;
+            }
+            sampleTries++;
+        } while ((result != null) && (sampleTries < getNumberOfSamplesToAggregateAsInt()));
+
+        res.setResponseMessage(sampleCounter + "" samples messages received"");
+        res.setResponseData(buffer.toString().getBytes()); // TODO - charset?
+        res.setResponseHeaders(propBuffer.toString());
+        if (sampleCounter == 0) {
+            res.setResponseCode(""404"");
+            res.setSuccessful(false);
+        } else {
+            res.setResponseCodeOK();
+            res.setSuccessful(true);
+        }
+        res.setResponseMessage(sampleCounter + "" message(s) received successfully"");
+        res.setSamplerData(getNumberOfSamplesToAggregateAsInt() + "" messages expected"");
+        res.setSampleCount(sampleCounter);
+    }
+
+    private void handleRequestResponse(SampleResult res) throws JMSException {
+        TextMessage msg = createMessage();
+        if (!useTemporyQueue()) {
+            LOGGER.debug(""NO TEMP QUEUE"");
+            msg.setJMSReplyTo(receiveQueue);
+        }
+        LOGGER.debug(""Create temp message"");
+        Message replyMsg = executor.sendAndReceive(msg,
+                isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT,
+                Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        if (replyMsg == null) {
+            res.setResponseMessage(""No reply message received"");
+        } else {
+            if (replyMsg instanceof TextMessage) {
+                res.setResponseData(((TextMessage) replyMsg).getText(), null);
+            } else {
+                res.setResponseData(replyMsg.toString(), null);
+            }
+            res.setResponseHeaders(Utils.messageProperties(replyMsg));
+            res.setResponseOK();
+        }
+    }
+
+    private String browseQueueForConsumption(Queue queue, String jmsSelector, SampleResult res, StringBuilder buffer,
+            StringBuilder propBuffer) {
+        String retVal = null;
+        try {
+            QueueReceiver consumer = session.createReceiver(queue, jmsSelector);
+            Message reply = consumer.receive(Long.valueOf(getTimeout()));
+            LOGGER.debug(""Message: "" + reply);
+            consumer.close();
+            if (reply != null) {
+                res.setResponseMessage(""1 message(s) received successfully"");
+                res.setResponseHeaders(reply.toString());
+                TextMessage msg = (TextMessage) reply;
+                retVal = msg.getText();
+                extractContent(buffer, propBuffer, msg);
+            } else {
+                res.setResponseMessage(""No message received"");
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            LOGGER.error(ex.getMessage());","[{'comment': ""Any logging requires some contextual information otherwise it's useless."", 'commenter': 'pmouawad'}]"
325,src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,"@@ -142,48 +173,244 @@ public SampleResult sample(Entry entry) {
         res.sampleStart();
 
         try {
-            TextMessage msg = createMessage();
-            if (isOneway()) {
-                int deliveryMode = isNonPersistent() ? 
-                        DeliveryMode.NON_PERSISTENT:DeliveryMode.PERSISTENT;
-                producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                res.setResponseOK();
-                res.setResponseData(""Oneway request has no response data"", null);
+            LOGGER.debug(""Point-to-point mode: "" + getCommunicationstyle());
+            if (isBrowse()) {
+                handleBrowse(res);
+            } else if (isClearQueue()) {
+                handleClearQueue(res);
+            } else if (isOneway()) {
+                handleOneWay(res);
+            } else if (isRead()) {
+                handleRead(context, res);
             } else {
-                if (!useTemporyQueue()) {
-                    msg.setJMSReplyTo(receiveQueue);
-                }
-                Message replyMsg = executor.sendAndReceive(msg,
-                        isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT, 
-                        Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                if (replyMsg == null) {
-                    res.setResponseMessage(""No reply message received"");
-                } else {
-                    if (replyMsg instanceof TextMessage) {
-                        res.setResponseData(((TextMessage) replyMsg).getText(), null);
-                    } else {
-                        res.setResponseData(replyMsg.toString(), null);
-                    }
-                    res.setResponseHeaders(Utils.messageProperties(replyMsg));
-                    res.setResponseOK();
-                }
+                handleRequestResponse(res);
             }
         } catch (Exception e) {
             LOGGER.warn(e.getLocalizedMessage(), e);
-            if (thrown != null){
+            if (thrown != null) {
                 res.setResponseMessage(thrown.toString());
-            } else {                
+            } else {
                 res.setResponseMessage(e.getLocalizedMessage());
             }
         }
         res.sampleEnd();
         return res;
     }
 
+    private void handleBrowse(SampleResult res) throws JMSException {
+        LOGGER.debug(""isBrowseOnly"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Browse message on Send Queue "" + sendQueue.getQueueName());
+        sb.append(browseQueueDetails(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleClearQueue(SampleResult res) throws JMSException {
+        LOGGER.debug(""isClearQueue"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Clear messages on Send Queue "" + sendQueue.getQueueName());
+        sb.append(clearQueue(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleOneWay(SampleResult res) throws JMSException {
+        LOGGER.debug(""isOneWay"");
+        TextMessage msg = createMessage();
+        int deliveryMode = isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;
+        producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        res.setResponseOK();
+        res.setResponseData(""Oneway request has no response data"", null);
+    }
+
+    private void handleRead(JMeterContext context, SampleResult res) {
+        LOGGER.debug(""isRead"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        Sampler sampler = context.getPreviousSampler();
+        SampleResult sr = context.getPreviousResult();
+        String jmsSelector = getJMSSelector();
+        if (jmsSelector.equals(""_PREV_SAMPLER_"")) {
+            if (sampler instanceof JMSSampler) {
+                jmsSelector = sr.getResponseMessage();
+            }
+        }
+        int sampleCounter = 0;
+        int sampleTries = 0;
+        String result = null;
+
+        StringBuilder buffer = new StringBuilder();
+        StringBuilder propBuffer = new StringBuilder();
+
+        do {
+            result = browseQueueForConsumption(sendQueue, jmsSelector, res, buffer, propBuffer);
+            if (result != null) {
+                sb.append(result);
+                sb.append('\n');
+                sampleCounter++;
+            }
+            sampleTries++;
+        } while ((result != null) && (sampleTries < getNumberOfSamplesToAggregateAsInt()));
+
+        res.setResponseMessage(sampleCounter + "" samples messages received"");
+        res.setResponseData(buffer.toString().getBytes()); // TODO - charset?
+        res.setResponseHeaders(propBuffer.toString());
+        if (sampleCounter == 0) {
+            res.setResponseCode(""404"");
+            res.setSuccessful(false);
+        } else {
+            res.setResponseCodeOK();
+            res.setSuccessful(true);
+        }
+        res.setResponseMessage(sampleCounter + "" message(s) received successfully"");
+        res.setSamplerData(getNumberOfSamplesToAggregateAsInt() + "" messages expected"");
+        res.setSampleCount(sampleCounter);
+    }
+
+    private void handleRequestResponse(SampleResult res) throws JMSException {
+        TextMessage msg = createMessage();
+        if (!useTemporyQueue()) {
+            LOGGER.debug(""NO TEMP QUEUE"");
+            msg.setJMSReplyTo(receiveQueue);
+        }
+        LOGGER.debug(""Create temp message"");
+        Message replyMsg = executor.sendAndReceive(msg,
+                isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT,
+                Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        if (replyMsg == null) {
+            res.setResponseMessage(""No reply message received"");
+        } else {
+            if (replyMsg instanceof TextMessage) {
+                res.setResponseData(((TextMessage) replyMsg).getText(), null);
+            } else {
+                res.setResponseData(replyMsg.toString(), null);
+            }
+            res.setResponseHeaders(Utils.messageProperties(replyMsg));
+            res.setResponseOK();
+        }
+    }
+
+    private String browseQueueForConsumption(Queue queue, String jmsSelector, SampleResult res, StringBuilder buffer,
+            StringBuilder propBuffer) {
+        String retVal = null;
+        try {
+            QueueReceiver consumer = session.createReceiver(queue, jmsSelector);
+            Message reply = consumer.receive(Long.valueOf(getTimeout()));
+            LOGGER.debug(""Message: "" + reply);
+            consumer.close();
+            if (reply != null) {
+                res.setResponseMessage(""1 message(s) received successfully"");
+                res.setResponseHeaders(reply.toString());
+                TextMessage msg = (TextMessage) reply;
+                retVal = msg.getText();
+                extractContent(buffer, propBuffer, msg);
+            } else {
+                res.setResponseMessage(""No message received"");
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            LOGGER.error(ex.getMessage());
+        }
+        return retVal;
+    }
+
+    private void extractContent(StringBuilder buffer, StringBuilder propBuffer, Message msg) {
+        if (msg != null) {
+            try {
+                if (msg instanceof TextMessage) {
+                    buffer.append(((TextMessage) msg).getText());
+                } else if (msg instanceof ObjectMessage) {
+                    ObjectMessage objectMessage = (ObjectMessage) msg;
+                    if (objectMessage.getObject() != null) {
+                        buffer.append(objectMessage.getObject().getClass());
+                    } else {
+                        buffer.append(""object is null"");
+                    }
+                } else if (msg instanceof BytesMessage) {
+                    BytesMessage bytesMessage = (BytesMessage) msg;
+                    buffer.append(bytesMessage.getBodyLength() + "" bytes received in BytesMessage"");
+                } else if (msg instanceof MapMessage) {
+                    MapMessage mapm = (MapMessage) msg;
+                    @SuppressWarnings(""unchecked"") // MapNames are Strings
+                    Enumeration<String> enumb = mapm.getMapNames();
+                    while (enumb.hasMoreElements()) {
+                        String name = enumb.nextElement();
+                        Object obj = mapm.getObject(name);
+                        buffer.append(name);
+                        buffer.append("","");
+                        buffer.append(obj.getClass().getCanonicalName());
+                        buffer.append("","");
+                        buffer.append(obj);
+                        buffer.append(""\n"");
+                    }
+                }
+                Utils.messageProperties(propBuffer, msg);
+            } catch (JMSException e) {
+                LOGGER.error(e.getMessage());
+            }
+        }
+    }
+
+    private String browseQueueDetails(Queue queue, SampleResult res) {
+        try {
+            String messageBodies = new String(""\n==== Browsing Messages === \n"");
+            // get some queue details
+            QueueBrowser qBrowser = session.createBrowser(queue);
+            // browse the messages
+            Enumeration<?> e = qBrowser.getEnumeration();
+            int numMsgs = 0;
+            // count number of messages
+            String corrID = """";
+            while (e.hasMoreElements()) {
+                TextMessage message = (TextMessage) e.nextElement();
+                corrID = message.getJMSCorrelationID();
+                if (corrID == null) {
+                    corrID = message.getJMSMessageID();
+                    messageBodies = messageBodies + numMsgs + "" - MessageID: "" + corrID + "": "" + message.getText()
+                            + ""\n"";
+                } else {
+                    messageBodies = messageBodies + numMsgs + "" - CorrelationID: "" + corrID + "": "" + message.getText()
+                            + ""\n"";
+                }
+                numMsgs++;
+            }
+            res.setResponseMessage(numMsgs + "" messages available on the queue"");
+            res.setResponseHeaders(qBrowser.toString());
+            return (messageBodies + queue.getQueueName() + "" has "" + numMsgs + "" messages"");
+        } catch (Exception e) {
+            res.setResponseMessage(""Error counting message on the queue"");
+            e.printStackTrace();","[{'comment': 'Same remarks as above', 'commenter': 'pmouawad'}]"
325,src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java,"@@ -142,48 +173,244 @@ public SampleResult sample(Entry entry) {
         res.sampleStart();
 
         try {
-            TextMessage msg = createMessage();
-            if (isOneway()) {
-                int deliveryMode = isNonPersistent() ? 
-                        DeliveryMode.NON_PERSISTENT:DeliveryMode.PERSISTENT;
-                producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                res.setResponseOK();
-                res.setResponseData(""Oneway request has no response data"", null);
+            LOGGER.debug(""Point-to-point mode: "" + getCommunicationstyle());
+            if (isBrowse()) {
+                handleBrowse(res);
+            } else if (isClearQueue()) {
+                handleClearQueue(res);
+            } else if (isOneway()) {
+                handleOneWay(res);
+            } else if (isRead()) {
+                handleRead(context, res);
             } else {
-                if (!useTemporyQueue()) {
-                    msg.setJMSReplyTo(receiveQueue);
-                }
-                Message replyMsg = executor.sendAndReceive(msg,
-                        isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT, 
-                        Integer.parseInt(getPriority()), 
-                        Long.parseLong(getExpiration()));
-                res.setRequestHeaders(Utils.messageProperties(msg));
-                if (replyMsg == null) {
-                    res.setResponseMessage(""No reply message received"");
-                } else {
-                    if (replyMsg instanceof TextMessage) {
-                        res.setResponseData(((TextMessage) replyMsg).getText(), null);
-                    } else {
-                        res.setResponseData(replyMsg.toString(), null);
-                    }
-                    res.setResponseHeaders(Utils.messageProperties(replyMsg));
-                    res.setResponseOK();
-                }
+                handleRequestResponse(res);
             }
         } catch (Exception e) {
             LOGGER.warn(e.getLocalizedMessage(), e);
-            if (thrown != null){
+            if (thrown != null) {
                 res.setResponseMessage(thrown.toString());
-            } else {                
+            } else {
                 res.setResponseMessage(e.getLocalizedMessage());
             }
         }
         res.sampleEnd();
         return res;
     }
 
+    private void handleBrowse(SampleResult res) throws JMSException {
+        LOGGER.debug(""isBrowseOnly"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Browse message on Send Queue "" + sendQueue.getQueueName());
+        sb.append(browseQueueDetails(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleClearQueue(SampleResult res) throws JMSException {
+        LOGGER.debug(""isClearQueue"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        sb.append(""\n \n  Clear messages on Send Queue "" + sendQueue.getQueueName());
+        sb.append(clearQueue(sendQueue, res));
+        res.setResponseData(sb.toString().getBytes());
+    }
+
+    private void handleOneWay(SampleResult res) throws JMSException {
+        LOGGER.debug(""isOneWay"");
+        TextMessage msg = createMessage();
+        int deliveryMode = isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;
+        producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        res.setResponseOK();
+        res.setResponseData(""Oneway request has no response data"", null);
+    }
+
+    private void handleRead(JMeterContext context, SampleResult res) {
+        LOGGER.debug(""isRead"");
+        StringBuffer sb = new StringBuffer("""");
+        res.setSuccessful(true);
+        Sampler sampler = context.getPreviousSampler();
+        SampleResult sr = context.getPreviousResult();
+        String jmsSelector = getJMSSelector();
+        if (jmsSelector.equals(""_PREV_SAMPLER_"")) {
+            if (sampler instanceof JMSSampler) {
+                jmsSelector = sr.getResponseMessage();
+            }
+        }
+        int sampleCounter = 0;
+        int sampleTries = 0;
+        String result = null;
+
+        StringBuilder buffer = new StringBuilder();
+        StringBuilder propBuffer = new StringBuilder();
+
+        do {
+            result = browseQueueForConsumption(sendQueue, jmsSelector, res, buffer, propBuffer);
+            if (result != null) {
+                sb.append(result);
+                sb.append('\n');
+                sampleCounter++;
+            }
+            sampleTries++;
+        } while ((result != null) && (sampleTries < getNumberOfSamplesToAggregateAsInt()));
+
+        res.setResponseMessage(sampleCounter + "" samples messages received"");
+        res.setResponseData(buffer.toString().getBytes()); // TODO - charset?
+        res.setResponseHeaders(propBuffer.toString());
+        if (sampleCounter == 0) {
+            res.setResponseCode(""404"");
+            res.setSuccessful(false);
+        } else {
+            res.setResponseCodeOK();
+            res.setSuccessful(true);
+        }
+        res.setResponseMessage(sampleCounter + "" message(s) received successfully"");
+        res.setSamplerData(getNumberOfSamplesToAggregateAsInt() + "" messages expected"");
+        res.setSampleCount(sampleCounter);
+    }
+
+    private void handleRequestResponse(SampleResult res) throws JMSException {
+        TextMessage msg = createMessage();
+        if (!useTemporyQueue()) {
+            LOGGER.debug(""NO TEMP QUEUE"");
+            msg.setJMSReplyTo(receiveQueue);
+        }
+        LOGGER.debug(""Create temp message"");
+        Message replyMsg = executor.sendAndReceive(msg,
+                isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT,
+                Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));
+        res.setRequestHeaders(Utils.messageProperties(msg));
+        if (replyMsg == null) {
+            res.setResponseMessage(""No reply message received"");
+        } else {
+            if (replyMsg instanceof TextMessage) {
+                res.setResponseData(((TextMessage) replyMsg).getText(), null);
+            } else {
+                res.setResponseData(replyMsg.toString(), null);
+            }
+            res.setResponseHeaders(Utils.messageProperties(replyMsg));
+            res.setResponseOK();
+        }
+    }
+
+    private String browseQueueForConsumption(Queue queue, String jmsSelector, SampleResult res, StringBuilder buffer,
+            StringBuilder propBuffer) {
+        String retVal = null;
+        try {
+            QueueReceiver consumer = session.createReceiver(queue, jmsSelector);
+            Message reply = consumer.receive(Long.valueOf(getTimeout()));
+            LOGGER.debug(""Message: "" + reply);
+            consumer.close();
+            if (reply != null) {
+                res.setResponseMessage(""1 message(s) received successfully"");
+                res.setResponseHeaders(reply.toString());
+                TextMessage msg = (TextMessage) reply;
+                retVal = msg.getText();
+                extractContent(buffer, propBuffer, msg);
+            } else {
+                res.setResponseMessage(""No message received"");
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            LOGGER.error(ex.getMessage());
+        }
+        return retVal;
+    }
+
+    private void extractContent(StringBuilder buffer, StringBuilder propBuffer, Message msg) {
+        if (msg != null) {
+            try {
+                if (msg instanceof TextMessage) {
+                    buffer.append(((TextMessage) msg).getText());
+                } else if (msg instanceof ObjectMessage) {
+                    ObjectMessage objectMessage = (ObjectMessage) msg;
+                    if (objectMessage.getObject() != null) {
+                        buffer.append(objectMessage.getObject().getClass());
+                    } else {
+                        buffer.append(""object is null"");
+                    }
+                } else if (msg instanceof BytesMessage) {
+                    BytesMessage bytesMessage = (BytesMessage) msg;
+                    buffer.append(bytesMessage.getBodyLength() + "" bytes received in BytesMessage"");
+                } else if (msg instanceof MapMessage) {
+                    MapMessage mapm = (MapMessage) msg;
+                    @SuppressWarnings(""unchecked"") // MapNames are Strings
+                    Enumeration<String> enumb = mapm.getMapNames();
+                    while (enumb.hasMoreElements()) {
+                        String name = enumb.nextElement();
+                        Object obj = mapm.getObject(name);
+                        buffer.append(name);
+                        buffer.append("","");
+                        buffer.append(obj.getClass().getCanonicalName());
+                        buffer.append("","");
+                        buffer.append(obj);
+                        buffer.append(""\n"");
+                    }
+                }
+                Utils.messageProperties(propBuffer, msg);
+            } catch (JMSException e) {
+                LOGGER.error(e.getMessage());
+            }
+        }
+    }
+
+    private String browseQueueDetails(Queue queue, SampleResult res) {
+        try {
+            String messageBodies = new String(""\n==== Browsing Messages === \n"");
+            // get some queue details
+            QueueBrowser qBrowser = session.createBrowser(queue);
+            // browse the messages
+            Enumeration<?> e = qBrowser.getEnumeration();
+            int numMsgs = 0;
+            // count number of messages
+            String corrID = """";
+            while (e.hasMoreElements()) {
+                TextMessage message = (TextMessage) e.nextElement();
+                corrID = message.getJMSCorrelationID();
+                if (corrID == null) {
+                    corrID = message.getJMSMessageID();
+                    messageBodies = messageBodies + numMsgs + "" - MessageID: "" + corrID + "": "" + message.getText()
+                            + ""\n"";
+                } else {
+                    messageBodies = messageBodies + numMsgs + "" - CorrelationID: "" + corrID + "": "" + message.getText()
+                            + ""\n"";
+                }
+                numMsgs++;
+            }
+            res.setResponseMessage(numMsgs + "" messages available on the queue"");
+            res.setResponseHeaders(qBrowser.toString());
+            return (messageBodies + queue.getQueueName() + "" has "" + numMsgs + "" messages"");
+        } catch (Exception e) {
+            res.setResponseMessage(""Error counting message on the queue"");
+            e.printStackTrace();
+            LOGGER.error(e.getMessage());
+            return """";
+        }
+    }
+
+    private String clearQueue(Queue queue, SampleResult res) {
+        String retVal = null;
+        try {
+            QueueReceiver consumer = session.createReceiver(queue);
+            Message deletedMsg = null;
+            long deletedMsgCount = 0;
+            do {
+                deletedMsg = consumer.receiveNoWait();
+                if (deletedMsg != null) {
+                    deletedMsgCount++;
+                    deletedMsg.acknowledge();","[{'comment': ""Shouldn't this be parameterized ? There are 4 modes, if we ACK for AUTO_ACK that would be wrong no ?"", 'commenter': 'pmouawad'}]"
396,src/core/org/apache/jmeter/gui/MainFrame.java,"@@ -680,7 +683,15 @@ private void addQuickComponentHotkeys(JTree treevar) {
 
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
-                String propname = ""gui.quick_"" + actionEvent.getActionCommand();
+                //Bug 62336
+                AWTEvent current_event = EventQueue.getCurrentEvent();","[{'comment': 'Have you checked what `actionEvent` is here? If I read the Swing-API correctly, it should be the same object as `current_event`. If `actionEvent` is really `null` here, is it only sometimes `null` and the NPE stops the AWT thread?\r\nAs a minor note: `current_event` should be written in camel case as `currentEvent` to match the other names. ', 'commenter': 'FSchumacher'}]"
396,src/core/org/apache/jmeter/gui/MainFrame.java,"@@ -680,7 +683,15 @@ private void addQuickComponentHotkeys(JTree treevar) {
 
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
-                String propname = ""gui.quick_"" + actionEvent.getActionCommand();
+                //Bug 62336
+                AWTEvent current_event = EventQueue.getCurrentEvent();
+                String key_text = """";
+                if(current_event instanceof KeyEvent) {","[{'comment': 'I would place a space between `if` and the opening parenthesis as `if` is not a function call.', 'commenter': 'FSchumacher'}]"
396,src/core/org/apache/jmeter/gui/MainFrame.java,"@@ -680,7 +683,15 @@ private void addQuickComponentHotkeys(JTree treevar) {
 
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
-                String propname = ""gui.quick_"" + actionEvent.getActionCommand();
+                //Bug 62336
+                AWTEvent current_event = EventQueue.getCurrentEvent();
+                String key_text = """";
+                if(current_event instanceof KeyEvent) {
+                    KeyEvent key_event = (KeyEvent)current_event;
+                    key_text = KeyEvent.getKeyText( key_event.getKeyCode() );","[{'comment': 'Again a minor nit: No space needed after the opening and before the closing parenthesis as this is a function call.\r\nAnd as above variable names should be written in camel case: `keyEvent` instead of `key_event`.', 'commenter': 'FSchumacher'}]"
396,src/core/org/apache/jmeter/gui/MainFrame.java,"@@ -680,7 +683,15 @@ private void addQuickComponentHotkeys(JTree treevar) {
 
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
-                String propname = ""gui.quick_"" + actionEvent.getActionCommand();
+                //Bug 62336
+                AWTEvent current_event = EventQueue.getCurrentEvent();
+                String key_text = """";
+                if(current_event instanceof KeyEvent) {
+                    KeyEvent key_event = (KeyEvent)current_event;","[{'comment': 'Here I would put a space after the closing parenthesis as this is a cast.', 'commenter': 'FSchumacher'}]"
440,src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java,"@@ -1687,8 +1688,16 @@ private UrlEncodedFormEntity createUrlEncodedFormEntity(final String contentEnco
                 // Must decode the value now, so that when the
                 // httpclient encodes it, we end up with the same value
                 // as the user had entered.
-                parameterName = URLDecoder.decode(parameterName, urlContentEncoding);
-                parameterValue = URLDecoder.decode(parameterValue, urlContentEncoding);
+                try {
+                    URLCodec urlCodec = new URLCodec(contentEncoding);
+                    //parameterName = URLDecoder.decode(parameterName, urlContentEncoding);","[{'comment': ""Don't leave old code as comments lying around. We have version control to look up old code structures :)"", 'commenter': 'FSchumacher'}, {'comment': 'Review comments are incorporated', 'commenter': 'sanjaychaurasia'}]"
440,src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java,"@@ -1687,8 +1688,16 @@ private UrlEncodedFormEntity createUrlEncodedFormEntity(final String contentEnco
                 // Must decode the value now, so that when the
                 // httpclient encodes it, we end up with the same value
                 // as the user had entered.
-                parameterName = URLDecoder.decode(parameterName, urlContentEncoding);
-                parameterValue = URLDecoder.decode(parameterValue, urlContentEncoding);
+                try {
+                    URLCodec urlCodec = new URLCodec(contentEncoding);
+                    //parameterName = URLDecoder.decode(parameterName, urlContentEncoding);
+                    parameterName = urlCodec.decode(parameterName, urlContentEncoding);
+                    //parameterValue = URLDecoder.decode(parameterValue, urlContentEncoding);
+                    parameterValue = urlCodec.decode(parameterValue, urlContentEncoding);
+                } catch (DecoderException e) {
+                    log.error(contentEncoding + "" exception in encoding!"");","[{'comment': 'When you add new log messages, try to use string formats. In this case it would be\r\n``log.error(""{} exception in encoding!"", contentEncoding);``\r\nI wonder, whether the message should include the parameter value and/or name to give more context.', 'commenter': 'FSchumacher'}, {'comment': 'Review comments are incorporated', 'commenter': 'sanjaychaurasia'}]"
440,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -94,4 +99,138 @@ public void testEncoding() throws Exception {
             assertEquals("""", arg.getEncodedName());
             assertEquals(""\00\01\07"", arg.getEncodedValue());
         }
+        
+        @Test
+        public void testShift_JISEncoding() throws Exception {
+            HTTPArgument arg;
+            arg = new HTTPArgument(""name.?"", ""value_ here"", false, ""Shift_JIS"");
+            assertEquals(""name.?"", arg.getName());
+            assertEquals(""value_ here"", arg.getValue());
+            assertEquals(""name.%3F"", arg.getEncodedName());
+            assertEquals(""value_+here"", arg.getEncodedValue());
+            // Show that can bypass encoding:
+            arg.setAlwaysEncoded(false);
+            assertEquals(""name.?"", arg.getEncodedName());
+            assertEquals(""value_ here"", arg.getEncodedValue());
+            
+            // The sample does not use a valid encoding
+            arg = new HTTPArgument(""name.?"", ""value_ here"", true, ""Shift_JIS"");","[{'comment': 'Use a new method for the next case.\r\nI would advise you to have a look at the spock test cases. I think the tabular data format in those tests will be a great fit for these tests.', 'commenter': 'FSchumacher'}, {'comment': ""Could you please suggest me how I can run individual spock test as I can't find run as junit test for spock test in eclipse. It looks like I am missing some configuration settings."", 'commenter': 'sanjaychaurasia'}, {'comment': 'Review comments incorporated. I have made one private method having parameter encoding to test all encoding passed by public test method. Please check', 'commenter': 'sanjaychaurasia'}]"
440,src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java,"@@ -148,15 +149,19 @@ public HTTPArgument(String name, String value, boolean alreadyEncoded, String co
                 if(log.isDebugEnabled()) {
                     log.debug(""Decoding name, calling URLDecoder.decode with '""+name+""' and contentEncoding:""+EncoderCache.URL_ARGUMENT_ENCODING);
                 }
-                name = URLDecoder.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);
+                URLCodec urlCodec = new URLCodec(contentEncoding);","[{'comment': ""In this code you use a different encoding than UTF-8. Are you sure it's allowed for parameter names ? If yes, then the PR should impact getEncodedName() which uses UTF-8 by default.\r\n\r\n"", 'commenter': 'pmouawad'}]"
440,src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java,"@@ -148,15 +149,19 @@ public HTTPArgument(String name, String value, boolean alreadyEncoded, String co
                 if(log.isDebugEnabled()) {
                     log.debug(""Decoding name, calling URLDecoder.decode with '""+name+""' and contentEncoding:""+EncoderCache.URL_ARGUMENT_ENCODING);
                 }
-                name = URLDecoder.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);
+                URLCodec urlCodec = new URLCodec(contentEncoding);
+                name = urlCodec.decode(name, contentEncoding);
                 // The value is encoded in the specified encoding
                 if(log.isDebugEnabled()) {
                     log.debug(""Decoding value, calling URLDecoder.decode with '""+value+""' and contentEncoding:""+contentEncoding);
                 }
-                value = URLDecoder.decode(value, contentEncoding);
+                value = urlCodec.decode(value, contentEncoding);
             } catch (UnsupportedEncodingException e) {
                 log.error(contentEncoding + "" encoding not supported!"");
                 throw new Error(e.toString(), e);
+            } catch (DecoderException e) {
+                log.error(contentEncoding + "" exception in decoder!"");
+                throw new Error(e.toString(), e);","[{'comment': ""Don't use error, use IllegalArgumentException."", 'commenter': 'pmouawad'}]"
440,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -22,10 +22,15 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.testelement.property.CollectionProperty;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 
 public class TestHTTPArgument {
 
+        @Rule","[{'comment': 'It tried your test class without touching the existing code, it does not show existing issue.\r\nThe failures are due to changes in contract (Switch to Error instead of IllegalArgumentException)\r\n\r\n There should be a dedicated test showing broken code and once we apply the fix, test should succeed using Shift_JS encoding for example.', 'commenter': 'pmouawad'}]"
440,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -94,4 +99,73 @@ public void testEncoding() throws Exception {
             assertEquals("""", arg.getEncodedName());
             assertEquals(""\00\01\07"", arg.getEncodedValue());
         }
+        
+        @Test
+        public void testShift_JISEncoding() throws Exception {
+            testEncodings(""Shift_JIS"");
+        }
+        
+        @Test
+        public void testUS_ASCIIEncoding() throws Exception {
+            testEncodings(""US-ASCII"");
+        }
+        
+        @Test
+        public void testCP1252Encoding() throws Exception {
+            testEncodings(""CP1252"");
+        }
+        
+        @Test
+        public void testDecoderException() throws Exception {
+            //When invalid string is passed error occurs
+            exception.expect(Error.class);
+            new HTTPArgument(""s=*&^%~@==y"", ""\00\01\07"", true, ""UTF-8"");
+        }
+        
+        @Test
+        public void testUnsupportedEncodingException() throws Exception {
+            //When invalid encoding is passed error occurs
+            exception.expect(Error.class);
+            new HTTPArgument(""Ravi"", ""\00\01\07"", true, ""Sanjay"");","[{'comment': 'Make failure message explicit about invalid encoding', 'commenter': 'pmouawad'}]"
440,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -94,4 +99,73 @@ public void testEncoding() throws Exception {
             assertEquals("""", arg.getEncodedName());
             assertEquals(""\00\01\07"", arg.getEncodedValue());
         }
+        
+        @Test
+        public void testShift_JISEncoding() throws Exception {
+            testEncodings(""Shift_JIS"");
+        }
+        
+        @Test
+        public void testUS_ASCIIEncoding() throws Exception {
+            testEncodings(""US-ASCII"");
+        }
+        
+        @Test
+        public void testCP1252Encoding() throws Exception {
+            testEncodings(""CP1252"");
+        }
+        
+        @Test
+        public void testDecoderException() throws Exception {
+            //When invalid string is passed error occurs
+            exception.expect(Error.class);
+            new HTTPArgument(""s=*&^%~@==y"", ""\00\01\07"", true, ""UTF-8"");
+        }
+        
+        @Test
+        public void testUnsupportedEncodingException() throws Exception {
+            //When invalid encoding is passed error occurs
+            exception.expect(Error.class);
+            new HTTPArgument(""Ravi"", ""\00\01\07"", true, ""Sanjay"");
+        }
+
+        private void testEncodings(String encoding) {
+            HTTPArgument arg;
+            arg = new HTTPArgument(""name.?"", ""value_ here"", false, encoding);
+            assertEquals(""name.?"", arg.getName());
+            assertEquals(""value_ here"", arg.getValue());
+            assertEquals(""name.%3F"", arg.getEncodedName());
+            assertEquals(""value_+here"", arg.getEncodedValue());
+            // Show that can bypass encoding:
+            arg.setAlwaysEncoded(false);
+            assertEquals(""name.?"", arg.getEncodedName());
+            assertEquals(""value_ here"", arg.getEncodedValue());
+            
+            // The sample does not use a valid encoding","[{'comment': ""I don't understand comment"", 'commenter': 'pmouawad'}]"
440,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -94,4 +99,73 @@ public void testEncoding() throws Exception {
             assertEquals("""", arg.getEncodedName());
             assertEquals(""\00\01\07"", arg.getEncodedValue());
         }
+        
+        @Test
+        public void testShift_JISEncoding() throws Exception {
+            testEncodings(""Shift_JIS"");
+        }
+        
+        @Test
+        public void testUS_ASCIIEncoding() throws Exception {
+            testEncodings(""US-ASCII"");
+        }
+        
+        @Test
+        public void testCP1252Encoding() throws Exception {
+            testEncodings(""CP1252"");
+        }
+        
+        @Test
+        public void testDecoderException() throws Exception {
+            //When invalid string is passed error occurs
+            exception.expect(Error.class);
+            new HTTPArgument(""s=*&^%~@==y"", ""\00\01\07"", true, ""UTF-8"");
+        }
+        
+        @Test
+        public void testUnsupportedEncodingException() throws Exception {
+            //When invalid encoding is passed error occurs
+            exception.expect(Error.class);
+            new HTTPArgument(""Ravi"", ""\00\01\07"", true, ""Sanjay"");
+        }
+
+        private void testEncodings(String encoding) {
+            HTTPArgument arg;
+            arg = new HTTPArgument(""name.?"", ""value_ here"", false, encoding);
+            assertEquals(""name.?"", arg.getName());
+            assertEquals(""value_ here"", arg.getValue());
+            assertEquals(""name.%3F"", arg.getEncodedName());
+            assertEquals(""value_+here"", arg.getEncodedValue());
+            // Show that can bypass encoding:
+            arg.setAlwaysEncoded(false);
+            assertEquals(""name.?"", arg.getEncodedName());
+            assertEquals(""value_ here"", arg.getEncodedValue());
+            
+            // The sample does not use a valid encoding
+            arg = new HTTPArgument(""name.?"", ""value_ here"", true, encoding);
+
+            assertEquals(""name.?"", arg.getName());
+            assertEquals(""value_ here"", arg.getValue());
+            assertEquals(""name.%3F"", arg.getEncodedName());
+            assertEquals(""value_+here"", arg.getEncodedValue());
+            arg.setAlwaysEncoded(false); // by default, name/value are encoded on fetch 
+            assertEquals(""name.?"", arg.getEncodedName());
+            assertEquals(""value_ here"", arg.getEncodedValue());","[{'comment': 'Add clear messages in every assert on what is expected', 'commenter': 'pmouawad'}]"
443,docs/usermanual/build-ldapext-test-plan.html,"@@ -442,7 +442,10 @@ <h2 id=""add_threadbind"">8b.3.1 Adding a Thread bind Request<a class=""sectionlink
 
 <i>(Optional)</i> Check the box Use Secure LDAP Protocol if you access with LDAP over SSL (ldaps)
 </li>
+<li>","[{'comment': ""For information, you don't need to commit HTML, it's generated from xml in xdocs"", 'commenter': 'pmouawad'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocket.java,"@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package org.apache.jmeter.protocol.ldap.sampler;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.net.SocketFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509ExtendedTrustManager;
+
+public class TrustAllSocket extends SocketFactory {
+    private static final AtomicReference<TrustAllSocket> defaultFactory = new AtomicReference<>();
+
+    private static SSLSocketFactory sf;
+
+    public TrustAllSocket() {
+        //KeyStore keyStore = ... /* Get a keystore containing the self-signed certificate) */
+        TrustManager[] trustAllCerts = new TrustManager[] {new X509ExtendedTrustManager() {
+            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+                return null;
+            }
+            public void checkClientTrusted(X509Certificate[] certs, String authType) {
+            }
+            public void checkServerTrusted(X509Certificate[] certs, String authType) {
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub","[{'comment': 'Can you remove those TODO ? Thanks', 'commenter': 'pmouawad'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocket.java,"@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package org.apache.jmeter.protocol.ldap.sampler;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.net.SocketFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509ExtendedTrustManager;
+
+public class TrustAllSocket extends SocketFactory {
+    private static final AtomicReference<TrustAllSocket> defaultFactory = new AtomicReference<>();
+
+    private static SSLSocketFactory sf;
+
+    public TrustAllSocket() {
+        //KeyStore keyStore = ... /* Get a keystore containing the self-signed certificate) */
+        TrustManager[] trustAllCerts = new TrustManager[] {new X509ExtendedTrustManager() {
+            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+                return null;
+            }
+            public void checkClientTrusted(X509Certificate[] certs, String authType) {
+            }
+            public void checkServerTrusted(X509Certificate[] certs, String authType) {
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub
+            }
+            @Override
+            public void checkServerTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub
+            }
+            @Override
+            public void checkServerTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub
+            }
+        }};
+
+        SSLContext ctx = null;
+        try {
+            ctx = SSLContext.getInstance(""TLS"");
+        } catch (NoSuchAlgorithmException e1) {
+            // TODO Auto-generated catch block
+            e1.printStackTrace();","[{'comment': 'Logging is better than printStackTrace(). IMO let it throw.', 'commenter': 'pmouawad'}]"
443,src/core/org/apache/jmeter/resources/messages_es.properties,"@@ -407,6 +407,7 @@ ldap_search_baseobject=Realizar la b√∫squeda 'baseobject'
 ldap_search_onelevel=Realizar la b√∫squeda 'onelevel'
 ldap_search_subtree=Realizar la b√∫squeda 'subtree'
 ldap_secure=¬øUsar el Protocolo LDAP Seguro?
+ldap_trust_all=ÔøΩConfiar en todos los certificados?","[{'comment': 'This seems to be the cause for the 122 errors in your junit test runs. The diffs seem have a different encoding than the files in the repo.', 'commenter': 'FSchumacher'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java,"@@ -283,6 +286,7 @@ public void modifyTestElement(TestElement element) {
         element.setProperty(LDAPExtSampler.CONNTO, connto.getText());
         element.setProperty(LDAPExtSampler.PARSEFLAG,Boolean.toString(parseflag.isSelected()));
         element.setProperty(LDAPExtSampler.SECURE,Boolean.toString(secure.isSelected()));
+        element.setProperty(LDAPExtSampler.TRUSTALL,Boolean.toString(trustAll.isSelected()));","[{'comment': 'Please add a space after a comma (you could correct the space in the line above, too)', 'commenter': 'FSchumacher'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java,"@@ -85,6 +85,8 @@
     public static final String PORT = ""port""; // $NON-NLS-1$
 
     public static final String SECURE = ""secure""; // $NON-NLS-1$
+    
+    public static final String TRUSTALL = ""TrustAll"";","[{'comment': 'The other key values are all lowercase. Any special reason for CamelCase?', 'commenter': 'FSchumacher'}, {'comment': 'no, just working with command line tools that have that explicit option have put me in the habit of spelling it that way. I will update it.', 'commenter': 'wolfebrian2120'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java,"@@ -660,7 +670,7 @@ private void bindOp(SampleResult res) throws NamingException {
         }
         try {
             res.sampleStart();
-            ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), getUserDN(), getUserPw(),getConnTimeOut(),isSecure());
+            ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), getUserDN(), getUserPw(),getConnTimeOut(),isSecure(),isTrustAll());","[{'comment': 'Again spacepolice time :) plus you could add a line break to shorten the lines a bit.', 'commenter': 'FSchumacher'}, {'comment': 'yup will do.', 'commenter': 'wolfebrian2120'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java,"@@ -78,14 +78,19 @@ public LdapExtClient() {
      * @exception NamingException
      *                when creating the {@link DirContext} fails
      */
-    public static DirContext connect(String host, String port, String rootdn, String username, String password, String connTimeOut, boolean secure)
+    public static DirContext connect(String host, String port, String rootdn, String username, String password, String connTimeOut, 
+            boolean secure, boolean trustAll)
             throws NamingException {
         DirContext dirContext;
         Hashtable<String, String> env = new Hashtable<>();
         env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory""); // $NON-NLS-1$
         StringBuilder sb = new StringBuilder(80);
         if (secure) {
             sb.append(""ldaps://""); // $NON-NLS-1$
+            if (trustAll){
+                log.debug(""Secure true, trustAll true"");
+                env.put(""java.naming.ldap.factory.socket"", ""org.apache.jmeter.protocol.ldap.sampler.TrustAllSocket"");","[{'comment': 'My initial thought was to add a parameter that would have been inserted here, but maybe the switch for `trustAll` is a bit more user friendly.', 'commenter': 'FSchumacher'}, {'comment': 'Yeah I went with that because I wanted the user to be able to pick whether they wanted to use the new feature or not.', 'commenter': 'wolfebrian2120'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocket.java,"@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package org.apache.jmeter.protocol.ldap.sampler;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.net.SocketFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509ExtendedTrustManager;
+
+public class TrustAllSocket extends SocketFactory {
+    private static final AtomicReference<TrustAllSocket> defaultFactory = new AtomicReference<>();
+
+    private static SSLSocketFactory sf;
+
+    public TrustAllSocket() {
+        //KeyStore keyStore = ... /* Get a keystore containing the self-signed certificate) */
+        TrustManager[] trustAllCerts = new TrustManager[] {new X509ExtendedTrustManager() {
+            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+                return null;
+            }
+            public void checkClientTrusted(X509Certificate[] certs, String authType) {
+            }
+            public void checkServerTrusted(X509Certificate[] certs, String authType) {
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub
+            }
+            @Override
+            public void checkServerTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub
+            }
+            @Override
+            public void checkServerTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)
+                throws CertificateException {
+                // TODO Auto-generated method stub
+            }
+        }};
+
+        SSLContext ctx = null;
+        try {
+            ctx = SSLContext.getInstance(""TLS"");
+        } catch (NoSuchAlgorithmException e1) {
+            // TODO Auto-generated catch block
+            e1.printStackTrace();
+        }
+        try {
+            ctx.init(null, trustAllCerts, new java.security.SecureRandom());
+        } catch (KeyManagementException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();","[{'comment': 'Use a logger to show error messages.', 'commenter': 'FSchumacher'}, {'comment': 'nice catch. I thought i got them all', 'commenter': 'wolfebrian2120'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocket.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package org.apache.jmeter.protocol.ldap.sampler;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.net.SocketFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509ExtendedTrustManager;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class TrustAllSocket extends SocketFactory {
+    private static final AtomicReference<TrustAllSocket> defaultFactory = new AtomicReference<>();
+
+    private static final Logger log = LoggerFactory.getLogger(TrustAllSocket.class);
+
+    private static SSLSocketFactory sf;
+
+    public TrustAllSocket() throws NoSuchAlgorithmException, KeyManagementException {
+        TrustManager[] trustAllCerts = new TrustManager[] {new X509ExtendedTrustManager() {
+            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+                return null;
+            }
+            public void checkClientTrusted(X509Certificate[] certs, String authType) {
+            }
+            public void checkServerTrusted(X509Certificate[] certs, String authType) {
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)
+                throws CertificateException {
+            }
+            @Override
+            public void checkServerTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+            }
+            @Override
+            public void checkServerTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)
+                throws CertificateException {
+            }
+        }};
+
+        SSLContext ctx = null;
+        ctx = SSLContext.getInstance(""TLS"");
+        ctx.init(null, trustAllCerts, new java.security.SecureRandom());
+        sf = ctx.getSocketFactory();
+    }
+
+    public static SocketFactory getDefault() {
+        final TrustAllSocket value = defaultFactory.get();
+        if (value == null) {
+            try {
+                defaultFactory.compareAndSet(null, new TrustAllSocket());
+            } catch (KeyManagementException e) {
+                log.error(""KeyManagementException: ""+e.getLocalizedMessage());","[{'comment': 'Would passing the exception into the logger be best, and maybe a more descriptive error message?\r\n```suggestion\r\n                log.error(""KeyManagementException while trying to ... "", e);\r\n```', 'commenter': 'ham1'}, {'comment': 'honestly I don\'t think this error will ever happen as the custom trust manager doesn\'t do anything that will generate the error. Its just part of the interface. The only way the NoSuchAlgorithmException will be thrown is if the JDK does not support some version of TLS. The KeyManagementException would only be thrown in the event there is an error dealing initializing the custom SSLContext object. which is only dependent on the inputs from the custom trust manager which basically does nothing and the SecureRandom() function, which should always return some value. Both of which would be an indication of a broken JDK/JRE or a really old version.\r\nI suppose I could provide a nicer message indicating some context of what we are trying to do here in the event an error occurs and someone sends the output to us for analysis. \r\nI guess something along the lines of ""KeyManagementException when changing SSLContext for TrustAll"" or something like that. That may help someone who isn\'t programmatically inclined understand what is wrong.', 'commenter': 'wolfebrian2120'}]"
443,src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocket.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package org.apache.jmeter.protocol.ldap.sampler;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.net.SocketFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509ExtendedTrustManager;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class TrustAllSocket extends SocketFactory {
+    private static final AtomicReference<TrustAllSocket> defaultFactory = new AtomicReference<>();
+
+    private static final Logger log = LoggerFactory.getLogger(TrustAllSocket.class);
+
+    private static SSLSocketFactory sf;
+
+    public TrustAllSocket() throws NoSuchAlgorithmException, KeyManagementException {
+        TrustManager[] trustAllCerts = new TrustManager[] {new X509ExtendedTrustManager() {
+            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+                return null;
+            }
+            public void checkClientTrusted(X509Certificate[] certs, String authType) {
+            }
+            public void checkServerTrusted(X509Certificate[] certs, String authType) {
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+            }
+            @Override
+            public void checkClientTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)
+                throws CertificateException {
+            }
+            @Override
+            public void checkServerTrusted(X509Certificate[] arg0, String arg1, Socket arg2)
+                throws CertificateException {
+            }
+            @Override
+            public void checkServerTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)
+                throws CertificateException {
+            }
+        }};
+
+        SSLContext ctx = null;
+        ctx = SSLContext.getInstance(""TLS"");
+        ctx.init(null, trustAllCerts, new java.security.SecureRandom());
+        sf = ctx.getSocketFactory();
+    }
+
+    public static SocketFactory getDefault() {
+        final TrustAllSocket value = defaultFactory.get();
+        if (value == null) {
+            try {
+                defaultFactory.compareAndSet(null, new TrustAllSocket());
+            } catch (KeyManagementException e) {
+                log.error(""KeyManagementException: ""+e.getLocalizedMessage());
+            } catch (NoSuchAlgorithmException e) {
+                log.error(""NoSuchAlgorithmException: ""+e.getLocalizedMessage());
+            }
+            return defaultFactory.get();
+        }
+        return value;
+    }
+    @Override
+    public Socket createSocket() throws IOException{
+        return sf.createSocket();
+    }
+
+    @Override
+    public Socket createSocket(final String s, final int i) throws IOException {
+        return sf.createSocket(s, i);
+    }
+
+    @Override
+    public Socket createSocket(final String s, final int i, final InetAddress inetAddress, final int i1) throws IOException {","[{'comment': 'For readability could we please name the parameters the same as `SocketFactory`\r\n```suggestion\r\n    public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException\r\n```', 'commenter': 'ham1'}, {'comment': 'completed', 'commenter': 'wolfebrian2120'}]"
467,test/resources/org/apache/jmeter/protocol/http/util/shift_jis.properties,"@@ -0,0 +1,2 @@
+value=ÔøΩÔøΩÔøΩÔøΩlÔøΩÔøΩÔøΩs","[{'comment': 'Please avoid adding ""non-utf-8"" files to the repository.\r\nIt complicates support.', 'commenter': 'vlsi'}, {'comment': 'This was added in order to test the functionality of encoding via ""shiftjis"" which is added via this PR. ', 'commenter': 'sanjeevnec'}, {'comment': ""The are lots of way to test encoding. You don't have to create files for that.\r\nYou could just use `new byte[]{1,2,3,4}`"", 'commenter': 'vlsi'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -19,79 +19,199 @@
 package org.apache.jmeter.protocol.http.util;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
+
+import java.nio.charset.StandardCharsets;
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.testelement.property.CollectionProperty;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 
 public class TestHTTPArgument {
 
-        @Test
-        public void testCloning() throws Exception {
-            HTTPArgument arg = new HTTPArgument(""name.?"", ""value_ here"");
-            assertEquals(""name.?"", arg.getName());
-            assertEquals(""value_ here"", arg.getValue());
-            assertEquals(""name.%3F"", arg.getEncodedName());
-            assertEquals(""value_+here"", arg.getEncodedValue());
-            HTTPArgument clone = (HTTPArgument) arg.clone();
-            assertEquals(""name.%3F"", clone.getEncodedName());
-            assertEquals(""value_+here"", clone.getEncodedValue());
-            assertEquals(""name.?"", clone.getName());
-            assertEquals(""value_ here"", clone.getValue());
-        }
-
-        @Test
-        public void testConversion() throws Exception {
-            Arguments args = new Arguments();
-            args.addArgument(""name.?"", ""value_ here"");
-            args.addArgument(""name$of property"", ""value_.+"");
-            HTTPArgument.convertArgumentsToHTTP(args);
-            CollectionProperty argList = args.getArguments();
-            HTTPArgument httpArg = (HTTPArgument) argList.get(0).getObjectValue();
-            assertEquals(""name.%3F"", httpArg.getEncodedName());
-            assertEquals(""value_+here"", httpArg.getEncodedValue());
-            httpArg = (HTTPArgument) argList.get(1).getObjectValue();
-            assertEquals(""name%24of+property"", httpArg.getEncodedName());
-            assertEquals(""value_.%2B"", httpArg.getEncodedValue());
-        }
-        
-        @Test
-        public void testEncoding() throws Exception {
-            HTTPArgument arg;
-            arg = new HTTPArgument(""name.?"", ""value_ here"", false);
-            assertEquals(""name.?"", arg.getName());
-            assertEquals(""value_ here"", arg.getValue());
-            assertEquals(""name.%3F"", arg.getEncodedName());
-            assertEquals(""value_+here"", arg.getEncodedValue());
-            // Show that can bypass encoding:
-            arg.setAlwaysEncoded(false);
-            assertEquals(""name.?"", arg.getEncodedName());
-            assertEquals(""value_ here"", arg.getEncodedValue());
-            
-            // The sample does not use a valid encoding
-            arg = new HTTPArgument(""name.?"", ""value_ here"", true);
-            assertEquals(""name.?"", arg.getName());
-            assertEquals(""value_ here"", arg.getValue());
-            assertEquals(""name.%3F"", arg.getEncodedName());
-            assertEquals(""value_+here"", arg.getEncodedValue());
-            arg.setAlwaysEncoded(false); // by default, name/value are encoded on fetch 
-            assertEquals(""name.?"", arg.getEncodedName());
-            assertEquals(""value_ here"", arg.getEncodedValue());
-            
-            // Try a real encoded argument
-            arg = new HTTPArgument(""name.%3F"", ""value_+here"", true);
-            assertEquals(""name.?"", arg.getName());
-            assertEquals(""value_ here"", arg.getValue());
-            assertEquals(""name.%3F"", arg.getEncodedName());
-            assertEquals(""value_+here"", arg.getEncodedValue());
-            // Show that can bypass encoding:
-            arg.setAlwaysEncoded(false);
-            assertEquals(""name.?"", arg.getEncodedName());
-            assertEquals(""value_ here"", arg.getEncodedValue());
-            
-            arg = new HTTPArgument("""", ""\00\01\07"", """", false);
-            arg.setAlwaysEncoded(false);
-            assertEquals("""", arg.getEncodedName());
-            assertEquals(""\00\01\07"", arg.getEncodedValue());
-        }
+	@Rule","[{'comment': 'Please use spaces not tabs for indentation.', 'commenter': 'ham1'}, {'comment': 'Incorporated the review comments for changing the tabs to spaces', 'commenter': 'sanjeevnec'}, {'comment': 'Hi,\r\n\r\nWe had raised PR#440 which was closed due to migration of SVN>GIT.\r\nSo now we have raised a new PR#467 for  Bug#63130. \r\nAlso all the comments which were raised for PR#440 have been incorporated in this new PR#467.\r\nKindly confirm those comments in this new PR#467.\r\n\r\nAlso, in PR#440, there was 1 comment (Mentioned below) related to encoding requirement for parameter name. \r\n""In this code you use a different encoding than UTF-8. Are you sure it\'s allowed for parameter names ? If yes, then the PR should impact getEncodedName() which uses UTF-8 by default"".\r\n\r\nAs per our understanding & discussion with one of the Japanese developer, name is having a static value in the page and it has been used by the developers in the English only.  \r\n\r\nSo just want to have some input from other community members also.\r\n\r\nThank you!', 'commenter': 'sanjeevnec'}]"
467,src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java,"@@ -146,19 +147,21 @@ public HTTPArgument(String name, String value, boolean alreadyEncoded, String co
             try {
                 // We assume the name is always encoded according to spec
                 if(log.isDebugEnabled()) {
-                    log.debug(""Decoding name, calling URLDecoder.decode with '{}' and contentEncoding: '{}'"", name,
-                            EncoderCache.URL_ARGUMENT_ENCODING);
+                    log.debug(""Decoding name, calling URLDecoder.decode with '""+name+""' and contentEncoding:""+EncoderCache.URL_ARGUMENT_ENCODING);","[{'comment': 'Why do you need this change?', 'commenter': 'vlsi'}, {'comment': 'The unnecessary change has been removed.', 'commenter': 'sanjeevnec'}]"
467,src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java,"@@ -146,19 +147,21 @@ public HTTPArgument(String name, String value, boolean alreadyEncoded, String co
             try {
                 // We assume the name is always encoded according to spec
                 if(log.isDebugEnabled()) {
-                    log.debug(""Decoding name, calling URLDecoder.decode with '{}' and contentEncoding: '{}'"", name,
-                            EncoderCache.URL_ARGUMENT_ENCODING);
+                    log.debug(""Decoding name, calling URLDecoder.decode with '""+name+""' and contentEncoding:""+EncoderCache.URL_ARGUMENT_ENCODING);
                 }
-                name = URLDecoder.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);
+                URLCodec urlCodec = new URLCodec(contentEncoding);
+                name = urlCodec.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);
                 // The value is encoded in the specified encoding
                 if(log.isDebugEnabled()) {
-                    log.debug(""Decoding value, calling URLDecoder.decode with '{}' and contentEncoding: '{}'"", value,
-                            contentEncoding);
+                    log.debug(""Decoding value, calling URLDecoder.decode with '""+value+""' and contentEncoding:""+contentEncoding);","[{'comment': 'Why do you need this change?', 'commenter': 'vlsi'}, {'comment': 'The unnecessary change has been removed.', 'commenter': 'sanjeevnec'}]"
467,src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java,"@@ -146,19 +147,21 @@ public HTTPArgument(String name, String value, boolean alreadyEncoded, String co
             try {
                 // We assume the name is always encoded according to spec
                 if(log.isDebugEnabled()) {
-                    log.debug(""Decoding name, calling URLDecoder.decode with '{}' and contentEncoding: '{}'"", name,
-                            EncoderCache.URL_ARGUMENT_ENCODING);
+                    log.debug(""Decoding name, calling URLDecoder.decode with '""+name+""' and contentEncoding:""+EncoderCache.URL_ARGUMENT_ENCODING);
                 }
-                name = URLDecoder.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);
+                URLCodec urlCodec = new URLCodec(contentEncoding);
+                name = urlCodec.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);
                 // The value is encoded in the specified encoding
                 if(log.isDebugEnabled()) {
-                    log.debug(""Decoding value, calling URLDecoder.decode with '{}' and contentEncoding: '{}'"", value,
-                            contentEncoding);
+                    log.debug(""Decoding value, calling URLDecoder.decode with '""+value+""' and contentEncoding:""+contentEncoding);
                 }
-                value = URLDecoder.decode(value, contentEncoding);
+                value = urlCodec.decode(value, contentEncoding);
             } catch (UnsupportedEncodingException e) {
-                log.error(""{} encoding not supported!"", contentEncoding);
+                log.error(contentEncoding + "" encoding not supported!"");","[{'comment': 'Why this change?', 'commenter': 'vlsi'}, {'comment': 'The unnecessary change has been removed.', 'commenter': 'sanjeevnec'}]"
467,src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java,"@@ -146,19 +147,21 @@ public HTTPArgument(String name, String value, boolean alreadyEncoded, String co
             try {
                 // We assume the name is always encoded according to spec
                 if(log.isDebugEnabled()) {
-                    log.debug(""Decoding name, calling URLDecoder.decode with '{}' and contentEncoding: '{}'"", name,
-                            EncoderCache.URL_ARGUMENT_ENCODING);
+                    log.debug(""Decoding name, calling URLDecoder.decode with '""+name+""' and contentEncoding:""+EncoderCache.URL_ARGUMENT_ENCODING);
                 }
-                name = URLDecoder.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);
+                URLCodec urlCodec = new URLCodec(contentEncoding);
+                name = urlCodec.decode(name, EncoderCache.URL_ARGUMENT_ENCODING);
                 // The value is encoded in the specified encoding
                 if(log.isDebugEnabled()) {
-                    log.debug(""Decoding value, calling URLDecoder.decode with '{}' and contentEncoding: '{}'"", value,
-                            contentEncoding);
+                    log.debug(""Decoding value, calling URLDecoder.decode with '""+value+""' and contentEncoding:""+contentEncoding);
                 }
-                value = URLDecoder.decode(value, contentEncoding);
+                value = urlCodec.decode(value, contentEncoding);
             } catch (UnsupportedEncodingException e) {
-                log.error(""{} encoding not supported!"", contentEncoding);
+                log.error(contentEncoding + "" encoding not supported!"");
                 throw new Error(e.toString(), e);
+            } catch (DecoderException e) {
+                log.error(contentEncoding + "" exception in decoder!"");
+                throw new IllegalArgumentException(e.toString(), e);","[{'comment': 'This does not sound quite right. I think the exception should either be logged or raised.\r\nOtherwise it would result in duplicated messages in the logfile.', 'commenter': 'vlsi'}, {'comment': 'Review comments incorporated', 'commenter': 'AbhaySinghNec'}, {'comment': 'The exception is only logged and not raised now.', 'commenter': 'sanjeevnec'}, {'comment': 'Turns out, if we do not raise an exception it breaks one of the test cases, hence raising it now instead of logging it.', 'commenter': 'sanjeevnec'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -39,7 +47,7 @@ public void testCloning() throws Exception {
             assertEquals(""name.?"", clone.getName());
             assertEquals(""value_ here"", clone.getValue());
         }
-
+    ","[{'comment': 'Please avoid making unrelated changes', 'commenter': 'vlsi'}, {'comment': 'Review comments incorporated', 'commenter': 'AbhaySinghNec'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -67,17 +75,17 @@ public void testEncoding() throws Exception {
             arg.setAlwaysEncoded(false);
             assertEquals(""name.?"", arg.getEncodedName());
             assertEquals(""value_ here"", arg.getEncodedValue());
-            
+    ","[{'comment': 'Please avoid making unrelated changes', 'commenter': 'vlsi'}, {'comment': ""Apologies for that, will make sure doesn't happen next time."", 'commenter': 'sanjeevnec'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -88,10 +96,120 @@ public void testEncoding() throws Exception {
             arg.setAlwaysEncoded(false);
             assertEquals(""name.?"", arg.getEncodedName());
             assertEquals(""value_ here"", arg.getEncodedValue());
-            
+    
             arg = new HTTPArgument("""", ""\00\01\07"", """", false);
             arg.setAlwaysEncoded(false);
             assertEquals("""", arg.getEncodedName());
             assertEquals(""\00\01\07"", arg.getEncodedValue());
         }
+    
+        @Test
+        public void testShift_JISEncoding() throws Exception {
+            testEncodings(""Shift_JIS"");
+        }
+    
+        @Test
+        public void testUS_ASCIIEncoding() throws Exception {
+            testEncodings(""US-ASCII"");
+        }
+    
+        @Test
+        public void testCP1252Encoding() throws Exception {
+            testEncodings(""CP1252"");
+        }
+    
+        @Test
+        public void testDecoderException() throws Exception {
+            // When invalid string is passed IllegalArgumentException exception occurs
+            exception.expect(IllegalArgumentException.class);
+            exception.expectMessage(""org.apache.commons.codec.DecoderException: Invalid URL encoding: not a valid digit"");
+            new HTTPArgument(""s=*&^%~@==y"", ""\00\01\07"", true, ""UTF-8"");
+        }
+    
+        @Test
+        public void testUnsupportedEncodingException() throws Exception {
+            // When invalid encoding(UTF-9) is passed error occurs
+            exception.expect(Error.class);
+            exception.expectMessage(""java.io.UnsupportedEncodingException: UTF-9"");
+            new HTTPArgument(""name.?"", ""\00\01\07"", true, ""UTF-9"");
+        }
+    
+        @Test
+        public void testWithFix() throws Exception {
+    
+            String encodedValue = ""%8F%89%8A%FA%92l%91%E5%8D%E3%8Es"";
+    
+            byte[] data = new byte[] { -17, -66, -126, -26, -72, -119, -27, -113, -81, -25, -108, -104, -17, -67, -70, -17,
+                    -66, -126, -27, -128, -92, -17, -66, -126, -27, -90, -91, -17, -67, -91, -17, -66, -126, -27, -126, -84,
+                    -17, -67, -93, -17, -66, -126, -27, -72, -126 };
+    
+            String value = new String(data, StandardCharsets.UTF_8);
+    
+            HTTPArgument arg;
+            // Passing real encoded value of Japanese character as
+            // %8F%89%8A%FA%92l%91%E5%8D%E3%8Es and try to decode with Shift_JIS encoding
+            arg = new HTTPArgument(""name.?"", encodedValue, true, ""Shift_JIS"");
+            assertEquals(""arg.getValue() should be equal to "" + value, value, arg.getValue());
+        }
+    
+        @Test
+        public void testWithoutFix() throws Exception {
+    
+            String encodedValue = ""%8F%89%8A%FA%92l%91%E5%8D%E3%8Es"";
+    
+            byte[] data = new byte[] { -17, -66, -126, -26, -72, -119, -27, -113, -81, -25, -108, -104, -17, -67, -70, -17,
+                    -66, -126, -27, -128, -92, -17, -66, -126, -27, -90, -91, -17, -67, -91, -17, -66, -126, -27, -126, -84,
+                    -17, -67, -93, -17, -66, -126, -27, -72, -126 };
+    
+            String value = new String(data, StandardCharsets.UTF_8);
+    
+            HTTPArgument arg;
+            // Passing real encoded value of Japanese character as
+            // %8F%89%8A%FA%92l%91%E5%8D%E3%8Es and try to decode with UTF-8 encoding
+            arg = new HTTPArgument(""name.?"", encodedValue, true, ""UTF-8"");
+            assertNotEquals(""arg.getValue() should not be equal to "" + value, value, arg.getValue());
+        }
+    
+        private void testEncodings(String encoding) {
+            HTTPArgument arg;
+            arg = new HTTPArgument(""name.?"", ""value_ here"", false, encoding);
+            assertEquals(""arg.getName() should be equal to name.?"", ""name.?"", arg.getName());
+            assertEquals(""arg.getValue() should be equal to value_here"", ""value_ here"", arg.getValue());
+            assertEquals(""arg.getEncodedName() should be equal to name.%3F"", ""name.%3F"", arg.getEncodedName());
+            assertEquals(""arg.getValue() should be equal to value_+here"", ""value_+here"", arg.getEncodedValue());
+            // Show that can bypass encoding:
+            arg.setAlwaysEncoded(false);
+            assertEquals(""arg.getEncodedName() should be equal to name.?"", ""name.?"", arg.getEncodedName());
+            assertEquals(""arg.getValue() should be equal to value_here"", ""value_ here"", arg.getEncodedValue());
+    
+            // When the name and value parameter does not have valid encoded value (Encoded
+            // and Decoded values are same)
+            // In real encoded value for ""name.?"" is ""name.%3F"" and the encoded value for
+            // ""value_here"" is ""value_+here""
+            arg = new HTTPArgument(""name.?"", ""value_ here"", true, encoding);
+    
+            assertEquals(""arg.getName() should be equal to name.?"", ""name.?"", arg.getName());","[{'comment': 'It is great you add assert messages, however it makes little sense to duplicate ""expected"" value in the message.\r\n\r\nIn case of failure, the message would include ""expected"" value anyway, so phrases like `should be equal to name.?` add nothing.\r\n\r\nYou should probably use something like `assertEquals(""HTTPArgument(\\""name.?\\"", \\""value_ here\\"",...).getName()"", ""name.?"", arg.getName());`\r\n\r\nThen it would produce clear message and tell what was the input, the action, the expected output and the actual output.', 'commenter': 'vlsi'}, {'comment': 'Assert messages have been updated as per your suggestion.', 'commenter': 'sanjeevnec'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -88,10 +96,120 @@ public void testEncoding() throws Exception {
             arg.setAlwaysEncoded(false);
             assertEquals(""name.?"", arg.getEncodedName());
             assertEquals(""value_ here"", arg.getEncodedValue());
-            
+    
             arg = new HTTPArgument("""", ""\00\01\07"", """", false);
             arg.setAlwaysEncoded(false);
             assertEquals("""", arg.getEncodedName());
             assertEquals(""\00\01\07"", arg.getEncodedValue());
         }
+    
+        @Test
+        public void testShift_JISEncoding() throws Exception {
+            testEncodings(""Shift_JIS"");
+        }
+    
+        @Test
+        public void testUS_ASCIIEncoding() throws Exception {
+            testEncodings(""US-ASCII"");
+        }
+    
+        @Test
+        public void testCP1252Encoding() throws Exception {
+            testEncodings(""CP1252"");
+        }
+    
+        @Test
+        public void testDecoderException() throws Exception {
+            // When invalid string is passed IllegalArgumentException exception occurs
+            exception.expect(IllegalArgumentException.class);
+            exception.expectMessage(""org.apache.commons.codec.DecoderException: Invalid URL encoding: not a valid digit"");
+            new HTTPArgument(""s=*&^%~@==y"", ""\00\01\07"", true, ""UTF-8"");
+        }
+    
+        @Test
+        public void testUnsupportedEncodingException() throws Exception {
+            // When invalid encoding(UTF-9) is passed error occurs
+            exception.expect(Error.class);
+            exception.expectMessage(""java.io.UnsupportedEncodingException: UTF-9"");
+            new HTTPArgument(""name.?"", ""\00\01\07"", true, ""UTF-9"");
+        }
+    
+        @Test
+        public void testWithFix() throws Exception {
+    
+            String encodedValue = ""%8F%89%8A%FA%92l%91%E5%8D%E3%8Es"";
+    
+            byte[] data = new byte[] { -17, -66, -126, -26, -72, -119, -27, -113, -81, -25, -108, -104, -17, -67, -70, -17,
+                    -66, -126, -27, -128, -92, -17, -66, -126, -27, -90, -91, -17, -67, -91, -17, -66, -126, -27, -126, -84,
+                    -17, -67, -93, -17, -66, -126, -27, -72, -126 };
+    
+            String value = new String(data, StandardCharsets.UTF_8);
+    
+            HTTPArgument arg;
+            // Passing real encoded value of Japanese character as
+            // %8F%89%8A%FA%92l%91%E5%8D%E3%8Es and try to decode with Shift_JIS encoding
+            arg = new HTTPArgument(""name.?"", encodedValue, true, ""Shift_JIS"");
+            assertEquals(""arg.getValue() should be equal to "" + value, value, arg.getValue());
+        }
+    
+        @Test
+        public void testWithoutFix() throws Exception {
+    
+            String encodedValue = ""%8F%89%8A%FA%92l%91%E5%8D%E3%8Es"";
+    
+            byte[] data = new byte[] { -17, -66, -126, -26, -72, -119, -27, -113, -81, -25, -108, -104, -17, -67, -70, -17,
+                    -66, -126, -27, -128, -92, -17, -66, -126, -27, -90, -91, -17, -67, -91, -17, -66, -126, -27, -126, -84,
+                    -17, -67, -93, -17, -66, -126, -27, -72, -126 };
+    
+            String value = new String(data, StandardCharsets.UTF_8);
+    
+            HTTPArgument arg;
+            // Passing real encoded value of Japanese character as
+            // %8F%89%8A%FA%92l%91%E5%8D%E3%8Es and try to decode with UTF-8 encoding
+            arg = new HTTPArgument(""name.?"", encodedValue, true, ""UTF-8"");
+            assertNotEquals(""arg.getValue() should not be equal to "" + value, value, arg.getValue());
+        }
+    
+        private void testEncodings(String encoding) {
+            HTTPArgument arg;
+            arg = new HTTPArgument(""name.?"", ""value_ here"", false, encoding);
+            assertEquals(""arg.getName() should be equal to name.?"", ""name.?"", arg.getName());
+            assertEquals(""arg.getValue() should be equal to value_here"", ""value_ here"", arg.getValue());
+            assertEquals(""arg.getEncodedName() should be equal to name.%3F"", ""name.%3F"", arg.getEncodedName());
+            assertEquals(""arg.getValue() should be equal to value_+here"", ""value_+here"", arg.getEncodedValue());
+            // Show that can bypass encoding:
+            arg.setAlwaysEncoded(false);
+            assertEquals(""arg.getEncodedName() should be equal to name.?"", ""name.?"", arg.getEncodedName());
+            assertEquals(""arg.getValue() should be equal to value_here"", ""value_ here"", arg.getEncodedValue());
+    
+            // When the name and value parameter does not have valid encoded value (Encoded
+            // and Decoded values are same)
+            // In real encoded value for ""name.?"" is ""name.%3F"" and the encoded value for
+            // ""value_here"" is ""value_+here""
+            arg = new HTTPArgument(""name.?"", ""value_ here"", true, encoding);
+    
+            assertEquals(""arg.getName() should be equal to name.?"", ""name.?"", arg.getName());
+            assertEquals(""arg.getValue() should be equal to value_here"", ""value_ here"", arg.getValue());
+            assertEquals(""arg.getEncodedName() should be equal to name.%3F"", ""name.%3F"", arg.getEncodedName());
+            assertEquals(""arg.getValue() should be equal to value_+here"", ""value_+here"", arg.getEncodedValue());
+            arg.setAlwaysEncoded(false); // by default, name/value are encoded on fetch
+            assertEquals(""arg.getEncodedName() should be equal to name.?"", ""name.?"", arg.getEncodedName());
+            assertEquals(""arg.getValue should() be equal to value_here"", ""value_ here"", arg.getEncodedValue());
+    
+            // Try a real encoded argument
+            arg = new HTTPArgument(""name.%3F"", ""value_+here"", true, encoding);
+            assertEquals(""arg.getName() should be equal to name.?"", ""name.?"", arg.getName());
+            assertEquals(""arg.getValue() should be equal to value_here"", ""value_ here"", arg.getValue());
+            assertEquals(""arg.getEncodedName() should be equal to name.%3F"", ""name.%3F"", arg.getEncodedName());
+            assertEquals(""arg.getValue() should be equal to value_+here"", ""value_+here"", arg.getEncodedValue());
+            // Show that can bypass encoding:
+            arg.setAlwaysEncoded(false);
+            assertEquals(""arg.getEncodedName() should be equal to name.?"", ""name.?"", arg.getEncodedName());","[{'comment': ""Again. The message does not clarify the intention of the test.\r\n`should be equal to name.?` should be replaced with something like `setAlwaysEncoded=false => name.? should not be decoded` (I've no idea what setAlwaysEncoded does, and it is really hard to tell what the test is verifying)"", 'commenter': 'vlsi'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -88,10 +96,120 @@ public void testEncoding() throws Exception {
             arg.setAlwaysEncoded(false);
             assertEquals(""name.?"", arg.getEncodedName());
             assertEquals(""value_ here"", arg.getEncodedValue());
-            
+    
             arg = new HTTPArgument("""", ""\00\01\07"", """", false);
             arg.setAlwaysEncoded(false);
             assertEquals("""", arg.getEncodedName());
             assertEquals(""\00\01\07"", arg.getEncodedValue());
         }
+    
+        @Test
+        public void testShift_JISEncoding() throws Exception {
+            testEncodings(""Shift_JIS"");
+        }
+    
+        @Test
+        public void testUS_ASCIIEncoding() throws Exception {
+            testEncodings(""US-ASCII"");
+        }
+    
+        @Test
+        public void testCP1252Encoding() throws Exception {
+            testEncodings(""CP1252"");
+        }
+    
+        @Test
+        public void testDecoderException() throws Exception {
+            // When invalid string is passed IllegalArgumentException exception occurs
+            exception.expect(IllegalArgumentException.class);
+            exception.expectMessage(""org.apache.commons.codec.DecoderException: Invalid URL encoding: not a valid digit"");
+            new HTTPArgument(""s=*&^%~@==y"", ""\00\01\07"", true, ""UTF-8"");
+        }
+    
+        @Test
+        public void testUnsupportedEncodingException() throws Exception {
+            // When invalid encoding(UTF-9) is passed error occurs
+            exception.expect(Error.class);
+            exception.expectMessage(""java.io.UnsupportedEncodingException: UTF-9"");
+            new HTTPArgument(""name.?"", ""\00\01\07"", true, ""UTF-9"");
+        }
+    
+        @Test
+        public void testWithFix() throws Exception {","[{'comment': 'What does `testWithFix` mean?', 'commenter': 'vlsi'}, {'comment': 'Renamed the ""testWithFix"" into meaningful name ', 'commenter': 'AbhaySinghNec'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -45,7 +45,7 @@ public void testCloning() throws Exception {
             assertEquals(""name.%3F"", clone.getEncodedName());
             assertEquals(""value_+here"", clone.getEncodedValue());
             assertEquals(""name.?"", clone.getName());
-            assertEquals(""value_+here"", clone.getValue());
+            assertEquals(""value_ here"", clone.getValue());","[{'comment': 'Why is this change? Is it intentional?', 'commenter': 'vlsi'}, {'comment': ""This change was done in order to pass the test case testCloning. It wasn't supposed to be changed, was changed by mistake by us."", 'commenter': 'sanjeevnec'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -81,7 +81,7 @@ public void testEncoding() throws Exception {
             assertEquals(""value_ here"", arg.getValue());
             assertEquals(""name.%3F"", arg.getEncodedName());
             assertEquals(""value_+here"", arg.getEncodedValue());
-            arg.setAlwaysEncoded(false); // by default, name/value are encoded on fetch
+            arg.setAlwaysEncoded(false); // by default, name/value are encoded on fetch ","[{'comment': 'Is this change intentional?', 'commenter': 'vlsi'}, {'comment': 'This change was done in order to not include any unnecessary changes [trailing whitespace removal]. If you want I can make a different commit and remove this trailing whitespace. Please suggest.', 'commenter': 'sanjeevnec'}]"
467,test/src/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java,"@@ -135,46 +135,44 @@ public void testUnsupportedEncodingException() throws Exception {
 
         @Test
         public void testWithShift_JIS_Encoding() throws Exception {
-        	
+            ","[{'comment': 'Is this change intentional?', 'commenter': 'vlsi'}]"
469,build.gradle.kts,"@@ -0,0 +1,341 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+import com.github.spotbugs.SpotBugsPlugin
+import com.github.spotbugs.SpotBugsTask
+import org.ajoberstar.grgit.Grgit
+import org.apache.jmeter.buildtools.CrLfSpec
+import org.apache.jmeter.buildtools.LineEndings
+import org.apache.jmeter.buildtools.filter
+import org.gradle.api.tasks.testing.logging.TestExceptionFormat
+import versions.BuildToolVersions
+
+plugins {
+    java
+    jmeterbuild.ide
+    jmeterbuild.witness
+    jacoco
+    checkstyle
+    id(""org.nosphere.apache.rat"") version ""0.4.0""
+    id(""com.github.ethankhall.semantic-versioning"") version ""1.1.0""
+    id(""com.github.spotbugs"") version ""1.6.10""
+    id(""org.sonarqube"") version ""2.7.1""
+    signing
+    publishing
+    jmeterbuild.release
+}
+
+fun Project.boolProp(name: String) =
+    findProperty(name)
+        ?.takeIf { it is String } // project properties include tasks, extensions, etc, and we want to check
+        ?.toString()
+        ?.equals(""false"", ignoreCase = true)?.not()
+
+with(version as io.ehdev.version.Version) {
+    major = 5
+    minor = 2
+    patch = 0
+    val releaseProp = boolProp(""release"")
+    releaseBuild = releaseProp ?: false
+    val nightlyProp = boolProp(""nightly"")
+    // When ""nightly"" exists, use it to add abbreviation
+    // When ""nightly"" is missing, add abbreviation for non-release builds
+    if (nightlyProp ?: (releaseProp != true)) {
+        // Append 7 characters of Git commit id for snapshot version
+        val grgit: Grgit by project
+        preRelease = grgit.head().abbreviatedId
+    }
+}
+
+println(""Building JMeter $version"")
+
+apply(from = ""$rootDir/gradle/dependencyVerification.gradle.kts"")
+apply(from = ""$rootDir/gradle/release.gradle.kts"")
+
+fun reportsForHumans() = !(System.getenv()[""CI""]?.toBoolean() ?: false)
+
+val lastEditYear by extra {
+    file(""$rootDir/NOTICE"")
+        .readLines()
+        .first { it.contains(""Copyright"") }
+        .let {
+            """"""Copyright \d{4}-(\d{4})"""""".toRegex()
+                .find(it)?.groupValues?.get(1)
+                ?: throw IllegalStateException(""Unable to identify copyright year from $rootDir/NOTICE"")
+        }
+}
+
+val rat by tasks.getting(org.nosphere.apache.rat.RatTask::class) {
+    excludes.set(rootDir.resolve(""rat-excludes.txt"").readLines())
+}
+
+releaseParams {
+    previewSiteContents.add(copySpec {
+        into(""rat"")
+        from(rat)
+    })
+}
+
+val jacocoReport by tasks.registering(JacocoReport::class) {
+    group = ""Coverage reports""
+    description = ""Generates an aggregate report from all subprojects""
+}
+
+val jacocoEnabled by extra {
+    (boolProp(""coverage"") ?: false) || gradle.startParameter.taskNames.any { it.contains(""jacoco"") }
+}
+
+// Do not enable spotbugs by default. Execute it only when -Pspotbugs is present
+val enableSpotBugs by extra {
+    boolProp(""spotbugs"") ?: false
+}
+
+val skipCheckstyle by extra {
+    boolProp(""skipCheckstyle"") ?: false
+}
+
+// Allow to skip building source/binary distributions
+val skipDist by extra {
+    boolProp(""skipDist"") ?: false
+}
+
+allprojects {
+    if (project.path != "":src"") {
+        tasks.register<DependencyInsightReportTask>(""allDepInsight"") {
+            group = LifecycleBasePlugin.BUILD_GROUP
+            description =
+                ""Shows insights where the dependency is used. For instance: allDepInsight --configuration compile --dependency org.jsoup:jsoup""
+        }
+    }
+}
+
+sonarqube {
+    properties {
+        // See https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Gradle#AnalyzingwithSonarQubeScannerforGradle-Configureanalysisproperties
+        property(""sonar.sourceEncoding"", ""UTF-8"")
+        val projectName = ""JMeter""
+        property(""sonar.projectName"", projectName)
+        property(""sonar.projectKey"", ""org.apache.jmeter:$projectName"")
+        property(""sonar.projectVersion"", project.version.toString())
+        property(""sonar.host.url"", System.getenv()[""SONAR_HOST_URL""] ?: ""http://localhost:9000"")
+        property(""sonar.login"", System.getenv()[""SONAR_LOGIN""] ?: """")
+        property(""sonar.password"", System.getenv()[""SONAR_PASSWORD""] ?: """")
+        property(""sonar.links.homepage"", ""http://jmeter.apache.org"")
+        property(""sonar.links.ci"", ""https://builds.apache.org/job/JMeter-trunk/"")
+        property(""sonar.links.scm"", ""http://jmeter.apache.org/svnindex.html"")","[{'comment': 'Use https links ?', 'commenter': 'pmouawad'}, {'comment': 'updated to https urls for Sonar', 'commenter': 'vlsi'}]"
469,buildSrc/build.gradle.kts,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+","[{'comment': 'Just for maintenance and Gradle newbies, add a header comment explaining aim of the file ?', 'commenter': 'pmouawad'}, {'comment': 'I just thought ""gradle buildsrc"" Google search answers those kind of questions.\r\nDo you still think it is worth clarifying?\r\n', 'commenter': 'vlsi'}]"
469,buildSrc/subprojects/release/src/main/kotlin/org/apache/jmeter/buildtools/AutoClassifySpec.kt,"@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.buildtools
+
+class AutoClassifySpec {","[{'comment': 'Why is this class duplicated ?', 'commenter': 'pmouawad'}, {'comment': 'The class is moved to https://github.com/vlsi/vlsi-release-plugins', 'commenter': 'vlsi'}]"
469,buildSrc/subprojects/release/src/main/kotlin/org/apache/jmeter/buildtools/jgit/dsl/Git.kt,"@@ -0,0 +1,87 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package org.apache.jmeter.buildtools.jgit.dsl
+
+import org.apache.jmeter.buildtools.release.GitConfig
+import org.eclipse.jgit.api.Git
+import org.eclipse.jgit.api.TransportCommand
+import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider
+
+fun TransportCommand<*, *>.setCredentials(repo: GitConfig) =","[{'comment': 'Is it possible to comment a bit what this class does ?', 'commenter': 'pmouawad'}, {'comment': 'Moved to https://github.com/vlsi/vlsi-release-plugins', 'commenter': 'vlsi'}]"
469,src/build.gradle.kts,"@@ -0,0 +1,145 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+import versions.Libs
+
+val skipMavenPublication = setOf(
+    "":src:dist"",
+    "":src:dist-check"",
+    "":src:examples"",
+    "":src:generator"",
+    "":src:license-binary"",
+    "":src:license-source""
+)
+
+subprojects {
+    val groovyUsed = file(""src/main/groovy"").isDirectory || file(""src/test/groovy"").isDirectory
+
+    apply<JavaPlugin>()
+    if (groovyUsed) {
+        apply<GroovyPlugin>()
+    }
+    apply<MavenPublishPlugin>()
+    apply<JacocoPlugin>()
+
+    dependencies {
+        val testImplementation by configurations
+        testImplementation(Libs.junit)
+        if (groovyUsed) {
+            testImplementation(Libs.groovy_all) {
+                because(""We want to enable Groovy-based tests"")
+            }
+            testImplementation(Libs.spock_core)
+        }
+        testImplementation(Libs.cglib_nodep) {
+            because(""""""
+                org.spockframework.mock.CannotCreateMockException: Cannot create mock for
+                 class org.apache.jmeter.report.processor.AbstractSummaryConsumer${'$'}SummaryInfo.
+                 Mocking of non-interface types requires a code generation library.
+                 Please put an up-to-date version of byte-buddy or cglib-nodep on the class path."""""".trimIndent())
+        }
+        testImplementation(Libs.objenesis) {
+            because(""""""
+                org.spockframework.mock.CannotCreateMockException: Cannot create mock for
+                 class org.apache.jmeter.report.core.Sample. To solve this problem,
+                 put Objenesis 1.2 or higher on the class path (recommended),
+                 or supply constructor arguments (e.g. 'constructorArgs: [42]') that allow to construct
+                 an object of the mocked type."""""".trimIndent())
+        }
+    }
+
+    // Note: jars below do not normalize line endings.
+    // Those jars, however are not included to source/binary distributions
+    // so the normailzation is not that important
+
+    val testJar by tasks.registering(Jar::class) {
+        val sourceSets: SourceSetContainer by project
+        archiveClassifier.set(""test"")
+        from(sourceSets[""test""].output)
+    }
+
+    val sourcesJar by tasks.registering(Jar::class) {
+        val sourceSets: SourceSetContainer by project
+        from(sourceSets[""main""].allJava)
+        archiveClassifier.set(""sources"")
+    }
+
+    val javadocJar by tasks.registering(Jar::class) {
+        from(tasks.named(JavaPlugin.JAVADOC_TASK_NAME))
+        archiveClassifier.set(""javadoc"")
+    }
+
+    val testClasses by configurations.creating {
+        extendsFrom(configurations[""testRuntime""])
+    }
+
+    // Parenthesis needed to use Project#getArtifacts
+    (artifacts) {
+        testClasses(testJar)
+    }
+
+    val achiveBaseName = when (name) {
+        ""jorphan"" -> name
+        ""launcher"" -> ""ApacheJMeter""
+        else -> ""ApacheJMeter_$name""
+    }
+    setProperty(""archivesBaseName"", achiveBaseName)
+
+    // See https://stackoverflow.com/a/53661897/1261287
+    // Subprojects can't use ""publishing"" since that accessor is not available at parent project
+    // evaluation time
+    configure<PublishingExtension> {
+        if (project.path in skipMavenPublication) {
+            return@configure
+        }
+        publications {
+            create<MavenPublication>(project.name) {
+                artifactId = achiveBaseName","[{'comment': 'should it be archiveBaseName ?', 'commenter': 'pmouawad'}]"
470,src/core/org/apache/jmeter/threads/JMeterThread.java,"@@ -148,7 +150,7 @@
 
     private final ReentrantLock interruptLock = new ReentrantLock(); // ensure that interrupt cannot overlap with shutdown
 
-    public JMeterThread(HashTree test, JMeterThreadMonitor monitor, ListenerNotifier note) {
+    public JMeterThread(HashTree test, JMeterThreadMonitor monitor, ListenerNotifier note,Boolean isSameUser) {","[{'comment': 'Parameter naming is kind of hard to understand.\r\nIf you add a parameter to existing constructor/method, you might want to just add another constructor and delegate. That would prevent adding `,false)` all over the place', 'commenter': 'vlsi'}, {'comment': 'Agreed', 'commenter': 'ubikloadpack'}]"
470,src/core/org/apache/jmeter/threads/JMeterThread.java,"@@ -95,7 +95,7 @@
     private final TestCompiler compiler;
 
     private final JMeterThreadMonitor monitor;
-
+    ","[{'comment': 'Please avoid adding trailing whitespace', 'commenter': 'vlsi'}]"
470,src/core/org/apache/jmeter/threads/JMeterThread.java,"@@ -123,8 +123,10 @@
 
     private long endTime = 0;
 
-    private boolean scheduler = false;
+    private boolean isSameUserOnNextIteration = false;","[{'comment': 'Is this `final` or not?\r\nIf the variable is not final, when what sense does it make to add a constructor argument for it?', 'commenter': 'vlsi'}]"
470,src/core/org/apache/jmeter/threads/ThreadGroup.java,"@@ -621,6 +622,7 @@ public void run() {
             } catch (Exception ex) {
                 log.error(""An error occurred scheduling delay start of threads for Thread Group: {}"", getName(), ex);
             }
+            ","[{'comment': 'was this intended?', 'commenter': 'vlsi'}]"
470,src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java,"@@ -228,14 +244,15 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
 
         // LOOP COUNT
         threadPropsPanel.add(createControllerPanel());
-
+        threadPropsPanel.add(createUserOptionsPanel());  
         if (showDelayedStart) {
             delayedStart = new JCheckBox(JMeterUtils.getResString(""delayed_start"")); // $NON-NLS-1$
             threadPropsPanel.add(delayedStart);
         }
         scheduler = new JCheckBox(JMeterUtils.getResString(""scheduler"")); // $NON-NLS-1$
         scheduler.addItemListener(this);
         threadPropsPanel.add(scheduler);
+","[{'comment': 'was this intended?', 'commenter': 'vlsi'}]"
470,src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java,"@@ -428,7 +438,9 @@ public void testEnded(String host) {
     /** {@inheritDoc} */
     @Override
     public void testIterationStart(LoopIterationEvent event) {
-        if (getClearEachIteration()) {
+        JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();
+        if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration()) 
+                || getClearEachIteration()) {","[{'comment': 'Does that mean `getClearEachIteration` impacts the result no matter of `getControlledByThread`?', 'commenter': 'vlsi'}, {'comment': ""Yes, but if you look at GUI it's explicit"", 'commenter': 'pmouawad'}]"
470,src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java,"@@ -555,8 +555,8 @@ public void testEnded(String host) {
     @Override
     public void testIterationStart(LoopIterationEvent event) {
         JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();
-        if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration()) 
-                || getClearEachIteration()) {
+        if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration())
+                || (!getControlledByThread() && getClearEachIteration())) {","[{'comment': 'Would ternary help here?', 'commenter': 'vlsi'}]"
473,src/core/org/apache/jmeter/report/processor/graph/impl/ConnectTimeOverTimeGraphConsumer.java,"@@ -54,22 +53,43 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
         return keysSelector;
     }
 
-    /*
-     * (non-Javadoc)
+    /**
+     * Creates the group info for elapsed time percentile depending on jmeter
+     * properties.
      *
-     * @see org.apache.jmeter.report.csv.processor.impl.AbstractGraphConsumer#
-     * createGroupInfos()
+     * @param propertyKey
+     *            the property key
+     * @param defaultValue
+     *            the default value
+     * @param seriesName Series name
+     * @return the group info
      */
+    private GroupInfo createPercentileGroupInfo(String propertyKey, int defaultValue, String seriesName) {
+        int property = JMeterUtils.getPropDefault(propertyKey, defaultValue);
+        PercentileAggregatorFactory factory = new PercentileAggregatorFactory();
+        factory.setPercentileIndex(property);
+
+        return new GroupInfo(factory, new NameSeriesSelector(),
+                new ConnectTimeValueSelector(false), false, false);
+    }
+
+    /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.jmeter.report.csv.processor.impl.AbstractGraphConsumer#
+   * createGroupInfos()
+   */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
         if(!CONNECT_TIME_SAVED) {
             return Collections.emptyMap();
         }
+
         HashMap<String, GroupInfo> groupInfos = new HashMap<>();
-        groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
-                new MeanAggregatorFactory(), new NameSeriesSelector(),
-                // We ignore Transaction Controller results
-                new ConnectTimeValueSelector(false), false, false));
+        groupInfos.put(""aggregate_rpt_pct2"", //$NON-NLS-1$","[{'comment': 'Can you define a constant ?', 'commenter': 'pmouawad'}, {'comment': 'Something like this?\r\n```\r\nprivate static final String PERCENTILE_PROPERTY = ""aggregate_rpt_pct2"";\r\n\r\ngroupInfos.put(PERCENTILE_PROPERTY, //$NON-NLS-1$\r\n                createPercentileGroupInfo(PERCENTILE_PROPERTY, 95, //$NON-NLS-1$\r\n                        String.format(\r\n                                PERCENTILE_FORMAT, Integer.valueOf(95))));\r\n```', 'commenter': 'Geekaylee'}, {'comment': 'yes', 'commenter': 'pmouawad'}]"
473,src/core/org/apache/jmeter/report/processor/graph/impl/LatencyOverTimeGraphConsumer.java,"@@ -50,6 +52,39 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
         return keysSelector;
     }
 
+    /**
+     * Creates the group info for elapsed time percentile depending on jmeter
+     * properties.
+     *
+     * @param propertyKey
+     *            the property key
+     * @param defaultValue
+     *            the default value
+     * @param serieName Serie name
+     * @return the group info
+     */
+    private GroupInfo createPercentileGroupInfo(String propertyKey, int defaultValue, String serieName) {","[{'comment': 'This method duplicated ResponseTimePercentilesOverTimeGraphConsumer#createPercentileGroupInfo. \r\nCould you try to factor out code ?', 'commenter': 'pmouawad'}, {'comment': ""Move it to the parent class `AbstractOverTimeGraphConsumer.java`? Shouldn't be an issue"", 'commenter': 'Geekaylee'}]"
473,src/core/org/apache/jmeter/report/processor/graph/impl/LatencyOverTimeGraphConsumer.java,"@@ -59,10 +94,12 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
         HashMap<String, GroupInfo> groupInfos = new HashMap<>();
-        groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
-                new MeanAggregatorFactory(), new NameSeriesSelector(),
-                // We ignore Transaction Controller results
-                new LatencyValueSelector(false), false, false));
+        groupInfos.put(""aggregate_report_max"", //$NON-NLS-1$","[{'comment': 'Is it regular to have max and pct ?', 'commenter': 'pmouawad'}, {'comment': ""It can be useful to identify the peak on outliers. Though it may not be relevant all the time it's better to have available and not need it than vice versa"", 'commenter': 'Geekaylee'}, {'comment': 'Easy enough to strip back to just pct though\r\n', 'commenter': 'Geekaylee'}]"
476,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,"@@ -594,6 +576,39 @@ private String getStringFromResultSet(ResultSet rs) throws SQLException, Unsuppo
         return sb.toString();
     }
 
+    private int processRow(ResultSet rs, ResultSetMetaData meta, StringBuilder sb, int numColumns,
+            JMeterVariables jmvars, String[] varNames, List<Map<String, Object>> results, int j)","[{'comment': 'Better name j, currentIterationIndex for example ?', 'commenter': 'pmouawad'}, {'comment': 'done', 'commenter': 'frschwab'}]"
476,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/JDBCPostProcessorResources.properties,"@@ -34,3 +34,5 @@ resultVariable.displayName=Result variable name
 resultVariable.shortDescription=Name of the JMeter variable that stores the result set objects in a list of maps for looking up results by column name.
 queryTimeout.displayName=Query timeout
 queryTimeout.shortDescription=The timeout of statement measured in seconds
+resultSetMaxRows.displayName=Limit ResultSet","[{'comment': 'Can you also provide french translations to avoid test failures, (use deepl.com for example)', 'commenter': 'pmouawad'}, {'comment': 'Can you also provide french translations to avoid test failures, (use deepl.com for example)', 'commenter': 'pmouawad'}, {'comment': 'done', 'commenter': 'frschwab'}, {'comment': 'done', 'commenter': 'frschwab'}]"
476,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSamplerResources.properties,"@@ -34,3 +34,5 @@ resultVariable.displayName=Result variable name
 resultVariable.shortDescription=Name of the JMeter variable that stores the result set objects in a list of maps for looking up results by column name.
 queryTimeout.displayName=Query timeout (s)
 queryTimeout.shortDescription=The timeout of statement measured in seconds
+resultSetMaxRows.displayName=Limit ResultSet","[{'comment': 'Can you also provide french translations to avoid test failures, (use deepl.com for example)', 'commenter': 'pmouawad'}, {'comment': 'done', 'commenter': 'frschwab'}]"
476,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,"@@ -545,33 +546,14 @@ private String getStringFromResultSet(ResultSet rs) throws SQLException, Unsuppo
             jmvars.putObject(currentResultVariable, results);
         }
         int j = 0;","[{'comment': 'Use more meaningful names than j, k?', 'commenter': 'pmouawad'}, {'comment': 'done', 'commenter': 'frschwab'}]"
476,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,"@@ -365,7 +366,14 @@ private void putIntoVar(final JMeterVariables jmvars, final String name,
      * @return number of rows in resultSet
      * @throws SQLException
      */
-    private static int countRows(ResultSet resultSet) throws SQLException {
+    private int countRows(ResultSet resultSet) throws SQLException {","[{'comment': ""I found out that with hsqldb (which is used in JDBC_TESTS.jmx), it is impossible to reach the countRows() function at all.\r\nhsqldb's CallableStatement doesn't support output values of type ResultSet. And that is one precondition to reach this code.\r\nhsqldb does support multiple result sets though, but not as output parameters.\r\nSo what do you think, is there more than hsqldb we run this code against? Are there any tests I am not aware of that test CallableStatements with output values of type ResultSet?\r\n\r\nFor your reference, see similar discussion here:\r\nhttps://sourceforge.net/p/hsqldb/discussion/73674/thread/ec2be7ce/?limit=25"", 'commenter': 'frschwab'}, {'comment': 'how do we proceed here? that is the last open question before you can merge.\r\nthanks!', 'commenter': 'frschwab'}, {'comment': ""It seems you're right.\r\nFor now, no alternative idea except trying another in memory db that would have this feature.\r\nI understand that you cover the other modifications in JDBC_TESTS.jmx right ?"", 'commenter': 'pmouawad'}, {'comment': 'yes', 'commenter': 'frschwab'}]"
476,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java,"@@ -544,34 +552,15 @@ private String getStringFromResultSet(ResultSet rs) throws SQLException, Unsuppo
             results = new ArrayList<>();
             jmvars.putObject(currentResultVariable, results);
         }
-        int j = 0;
-        while (rs.next()) {
-            Map<String, Object> row = null;
-            j++;
-            for (int i = 1; i <= numColumns; i++) {
-                Object o = rs.getObject(i);
-                if(results != null) {
-                    if(row == null) {
-                        row = new HashMap<>(numColumns);
-                        results.add(row);
-                    }
-                    row.put(meta.getColumnLabel(i), o);
-                }
-                if (o instanceof byte[]) {
-                    o = new String((byte[]) o, ENCODING);
-                }
-                sb.append(o);
-                if (i==numColumns){
-                    sb.append('\n');
-                } else {
-                    sb.append('\t');
-                }
-                if (i <= varNames.length) { // i starts at 1
-                    String name = varNames[i - 1].trim();
-                    if (name.length()>0){ // Save the value in the variable if present
-                        jmvars.put(name+UNDERSCORE+j, o == null ? null : o.toString());
-                    }
-                }
+        int currentIterationIndex = 0;
+        int resultSetMaxRows = getIntegerResultSetMaxRows();
+        if (resultSetMaxRows < 0) {
+            while (rs.next()) {
+                currentIterationIndex = processRow(rs, meta, sb, numColumns, jmvars, varNames, results, currentIterationIndex);
+            }
+        } else {
+            while (currentIterationIndex < resultSetMaxRows && rs.next()) {
+                currentIterationIndex = processRow(rs, meta, sb, numColumns, jmvars, varNames, results, currentIterationIndex);","[{'comment': 'yes, this is the first (initial) modification that covers all use cases with hsqldb and my use case (e.g. 99%).', 'commenter': 'frschwab'}, {'comment': 'this is covered in JDBC_TESTS.jmx', 'commenter': 'frschwab'}]"
477,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java,"@@ -289,6 +292,16 @@ private BasicDataSource initPool(String maxPool) {
         }
 
         log.debug(""PoolConfiguration:{}"", this.dataSource);
+
+        if(isPreinit()) {
+            // side effect - connection pool init - that is what we want
+            try {
+                dataSource.getConnection().close();
+            } catch (SQLException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();","[{'comment': 'e.printStackTrace() must be avoided and replaced by logging or in this case make it silent ?', 'commenter': 'pmouawad'}, {'comment': 'thanks, I changed it', 'commenter': 'frschwab'}]"
477,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java,"@@ -82,6 +82,9 @@ public DataSourceElementBeanInfo() {
         Set<String> modesSet = TRANSACTION_ISOLATION_MAP.keySet();
         String[] modes = modesSet.toArray(new String[modesSet.size()]);
         p.setValue(TAGS, modes);
+        p = property(""preinit"");
+        p.setValue(NOT_UNDEFINED, Boolean.TRUE);
+        p.setValue(DEFAULT, Boolean.TRUE);","[{'comment': 'default to FALSE for backward compatibility ?', 'commenter': 'pmouawad'}, {'comment': 'thanks, I changed it', 'commenter': 'frschwab'}]"
477,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementResources.properties,"@@ -46,3 +46,5 @@ keepAlive.displayName=Test While Idle
 keepAlive.shortDescription=Whether the pool should validate connections while they are idle in Pool.  If no, Soft Min Evictable Idle Time and Validation Query are ignored.
 transactionIsolation.displayName=Transaction Isolation
 transactionIsolation.shortDescription=Transaction Isolation Level
+preinit.displayName=Preinit Pool","[{'comment': 'Provide translation in French', 'commenter': 'pmouawad'}, {'comment': 'thanks, I changed it', 'commenter': 'frschwab'}]"
477,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java,"@@ -288,6 +291,16 @@ private BasicDataSource initPool(String maxPool) {
             dataSource.setPassword(getPassword());
         }
 
+        if(isPreinit()) {
+            // side effect - connection pool init - that is what we want
+            try {
+                dataSource.getConnection().close();
+                log.debug(""Preinitializing the connection pool: {}@{}"", getDataSourceName(), System.identityHashCode(dataSource));","[{'comment': 'can you surround it with log.isDebugEnabled() ?', 'commenter': 'pmouawad'}, {'comment': 'Hi, I found a lot of examples where calls to log.debug() are not surrounded with log.isDebugEnabled(). Others are, though...  When to use which approach?', 'commenter': 'frschwab'}, {'comment': 'Technically speaking, `isDebugEnabled` should be used when ""arguments have computations"" or ""varargs are used for logging"".\r\n\r\nIn this case, `System.identityHashCode` will be computed no matter if `debug` is enabled or not, so it it makes sense to use `isDebugEnabled.\r\n\r\nEven though this ""connection pool initialization"" will be used just once, the code might evolve (or even be copy-pasted""), so I think it is worth adding `isDebugEnabled` when the first statement holds.', 'commenter': 'vlsi'}, {'comment': 'thanks, I surrounded it with a check', 'commenter': 'frschwab'}]"
477,src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java,"@@ -288,6 +291,16 @@ private BasicDataSource initPool(String maxPool) {
             dataSource.setPassword(getPassword());
         }
 
+        if(isPreinit()) {
+            // side effect - connection pool init - that is what we want
+            try {
+                dataSource.getConnection().close();
+                log.debug(""Preinitializing the connection pool: {}@{}"", getDataSourceName(), System.identityHashCode(dataSource));
+            } catch (SQLException ex) {
+                log.error(""Error preinitializing the connection pool: {}@{}"", getDataSourceName(), System.identityHashCode(dataSource), ex);","[{'comment': 'same thing with log.isErrorEnabled()', 'commenter': 'pmouawad'}, {'comment': 'See my reply to log.isDebugEnabled().', 'commenter': 'frschwab'}, {'comment': ""Errors should be rare, so I don't see a reason to use `isErrorEnabled` ever."", 'commenter': 'vlsi'}, {'comment': 'Thanks, I also surrounded it with a check - others did it, too, in the source code, I found several examples.', 'commenter': 'frschwab'}]"
485,src/core/src/main/java/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java,"@@ -62,11 +62,8 @@
 public class HtmlTemplateExporter extends AbstractDataExporter {
     private static final FileFilter HTML_REPORT_FILE_FILTER =
         file ->
-            (file.isFile() &&
-                    ""index.html"".equals(file.getName()))
-                    || (file.isDirectory() &&
-                            (""content"".equals(file.getName()) ||
-                                    file.getName().startsWith(""sbadmin2-"")));
+            (file.isFile() && ""index.html"".equals(file.getName()))","[{'comment': 'Reading this after a long time, I wonder if it would be better to extract the conditions into a small function.', 'commenter': 'FSchumacher'}]"
485,src/core/src/main/java/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java,"@@ -145,33 +140,32 @@ public final void setExtraOptions(SubConfiguration extraOptions) {
          */
         @Override
         public ResultData customizeResult(ResultData result) {
+            if (extraOptions == null) {","[{'comment': 'This is changing the behaviour. Previously it would add the `result` as `DATA_CTX_RESULT`.', 'commenter': 'FSchumacher'}, {'comment': 'Good spot, now fixed.', 'commenter': 'ham1'}]"
485,src/components/src/main/java/org/apache/jmeter/config/CSVDataSet.java,"@@ -120,31 +121,39 @@ private Object readResolve(){
      */
     @Override
     public void setProperty(JMeterProperty property) {
-        if (property instanceof StringProperty) {
-            final String propName = property.getName();
-            if (""shareMode"".equals(propName)) { // The original name of the property
-                final String propValue = property.getStringValue();
-                if (propValue.contains("" "")){ // variables are unlikely to contain spaces, so most likely a translation
-                    try {
-                        final BeanInfo beanInfo = Introspector.getBeanInfo(this.getClass());
-                        final ResourceBundle rb = (ResourceBundle) beanInfo.getBeanDescriptor().getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE);
-                        for(String resKey : CSVDataSetBeanInfo.getShareTags()) {
-                            if (propValue.equals(rb.getString(resKey))) {
-                                if (log.isDebugEnabled()) {
-                                    log.debug(""Converted {}={} to {} using Locale: {}"", propName, propValue, resKey, rb.getLocale());
-                                }
-                                ((StringProperty) property).setValue(resKey); // reset the value
-                                super.setProperty(property);
-                                return;
-                            }
-                        }
-                        // This could perhaps be a variable name
-                        log.warn(""Could not translate {}={} using Locale: {}"", propName, propValue, rb.getLocale());
-                    } catch (IntrospectionException e) {
-                        log.error(""Could not find BeanInfo; cannot translate shareMode entries"", e);
-                    }
-                }
+        if (!(property instanceof StringProperty)) {
+            super.setProperty(property);
+            return;
+        }
+        final String propName = property.getName();
+        if (!""shareMode"".equals(propName)) {
+            super.setProperty(property);
+            return;
+        }
+        final String propValue = property.getStringValue();
+        // variables are unlikely to contain spaces, so most likely a translation
+        if (!propValue.contains("" "")) {
+            super.setProperty(property);
+            return;
+        }
+        try {
+            ResourceBundle rb = (ResourceBundle) Introspector
+                    .getBeanInfo(this.getClass())
+                    .getBeanDescriptor()
+                    .getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE);
+
+            Optional<String> first = Arrays.stream(CSVDataSetBeanInfo.getShareTags())
+                    .filter(resKey -> propValue.equals(rb.getString(resKey)))","[{'comment': 'Would it be even more readable when we extract `rb.getString(resKey)` into a  `map` step before filtering?\r\nThat would be\r\n```\r\n.map(rb::getString)\r\n.filter(propValue::equals)\r\n```', 'commenter': 'FSchumacher'}, {'comment': 'I think that would then change the behaviour.\r\nIf we mapped to `rb::getString` we would then return that value rather than the `resKey`.\r\nOr have I missed something?', 'commenter': 'ham1'}, {'comment': 'You are right. I have overlooked the return value.', 'commenter': 'FSchumacher'}, {'comment': 'Do we really need Streams and Optionals here?\r\nAre you kidding? Really.\r\n\r\nWell. The most important thing is the behavior after match/non-match.\r\nPrevious code had `return`, and the updated one does not. That is a noticeable change in behavior.\r\n\r\nPS. The same thing in Kotlin could have been\r\n\r\n```kotlin\r\nval tag =\r\n    CSVDataSetBeanInfo.getShareTags()\r\n        .firstOrNull { propValue == rb.getString(it) }\r\n```\r\n', 'commenter': 'vlsi'}, {'comment': 'I agree with @vlsi, although it could be more kindly said.', 'commenter': 'pmouawad'}, {'comment': ""I think the return was only there to stop the `log.warn` from being called, regardless I've reverted the controversial parts of this change :)"", 'commenter': 'ham1'}]"
485,src/components/src/main/java/org/apache/jmeter/assertions/JSONPathAssertion.java,"@@ -141,14 +144,11 @@ private boolean arrayMatched(JSONArray value) {
             return true;
         }
 
-        for (Object subj : value.toArray()) {
-            if ((subj == null && isExpectNull()) ||
-                    isEquals(subj)) {
-                return true;
-            }
-        }
-
-        return isEquals(value);
+        boolean foundMatch = Arrays.stream(value.toArray())","[{'comment': 'Does this change incur a performance penalty during load testing phase?', 'commenter': 'vlsi'}, {'comment': 'Thanks for contributing.\r\nI agree with @vlsi  on potential performance penalty of stream, unless you have a benchmark contradicting it.\r\n', 'commenter': 'pmouawad'}, {'comment': ""I've done a very simple benchmark and indeed using `Arrays.stream` is about 40% of the original. 120m vs 42m ops/s. So I will revert.\r\n\r\nThis does raise a question on how we might include some benchmarks of perf sensitive code in our unit testing - has this been discussed before?"", 'commenter': 'ham1'}, {'comment': 'Thanks @ham1 , it has not been discussed, feel free to raise the topic on dev mailing list.\r\n', 'commenter': 'pmouawad'}]"
485,src/components/src/test/java/org/apache/jmeter/assertions/TestJSONPathAssertion.java,"@@ -66,7 +68,7 @@ public void testSetJsonValidationBool() {
     public void testIsJsonValidationBool() {
         JSONPathAssertion instance = new JSONPathAssertion();
         boolean result = instance.isJsonValidationBool();
-        assertEquals(false, result);
+        assertFalse(result);","[{'comment': 'As long as you touch those lines, I would ask to add messages that clarify why false is expected.\r\n\r\nOtherwise it makes no sense in editing the lines, however the edit might easily become invalid (e.g. copy&paste error).\r\nThose kind of edits **do** spend reviewers time, and even though small changes (and updates to test code) are important, I would refrain from mechanical things like `assertEquals(false` -> `assertFalse(`.', 'commenter': 'vlsi'}, {'comment': ""@vlsi , a contributor also spends some time which is as valuable as ours, let's not discourage contribution and be more welcoming.\r\n@ham1  has contributed a lot "", 'commenter': 'pmouawad'}, {'comment': ""This was done by IntelliJ so I was confident in it being correct. Apologies for the extra review effort for not very much gain.\r\n\r\nI would love to be able to add a message explaining why it should be false, and maybe re-write in Spock ;) but there's not much to go on in the test name or comments and I'm afraid it would take too long for me to understand the full purpose of the test to add a useful message.\r\n\r\nThis was a quick change by me i.e. a few seconds to apply the IntelliJ suggestion, and I think it aids readability by a small amount. Happy to revert if it's deemed not worth the cost."", 'commenter': 'ham1'}]"
485,src/components/src/main/java/org/apache/jmeter/assertions/ResponseAssertion.java,"@@ -340,7 +341,7 @@ private AssertionResult evaluateResponse(SampleResult response) {
                 } else {
                     found = localMatcher.matches(toCheck, pattern);
                 }
-                boolean pass = notTest ? !found : found;
+                boolean pass = notTest != found;","[{'comment': 'I find this form less readable than existing code, which is not perfect', 'commenter': 'pmouawad'}]"
495,src/jorphan/src/main/java/org/apache/commons/cli/avalon/CLOptionDescriptor.java,"@@ -177,23 +168,9 @@ public final String getName() {
         return this.name;
     }
 
-    /**
-     * Convert to String.
-     *
-     * @return the converted value to string.
-     */
     @Override
     public final String toString() {
-        final StringBuilder sb = new StringBuilder();
-        sb.append(""[OptionDescriptor "");
-        sb.append(this.name);
-        sb.append("", "");
-        sb.append(this.id);
-        sb.append("", "");
-        sb.append(this.flags);
-        sb.append("", "");
-        sb.append(this.description);
-        sb.append("" ]"");
-        return sb.toString();
+        return String.format(""[OptionDescriptor %s, %d, %d, %s ]"",","[{'comment': '@ham1 , would you please refrain from `String#format`?\r\nTechnically speaking, it uses regexps behind the scene, and string+string would look simpler in this case', 'commenter': 'vlsi'}, {'comment': 'I did try to avoid it where I thought performance mattered, but I think this is more readable and not performance critical section.\r\nI think:\r\n\r\n```\r\nString.format(""[OptionDescriptor %s, %d, %d, %s ]"", \r\n        this.name, this.id, this.flags, this.description);\r\n```\r\nis slightly more readable than:\r\n```\r\n""[OptionDescriptor "" + this.name + "", "" + this.id + "", "" + this.flags + "", + this.description + "" ]"";\r\n```\r\n\r\nHappy to do the latter if required and either way we should probably remove that space before the last `]`.', 'commenter': 'ham1'}, {'comment': 'Just in case, I don\'t think `format` helps readability.\r\nFor instance, it is easy to mess up with `%s %d %s` vs `%d %s`, and it is hard to trace the order of the arguments.\r\n\r\n`""[OptionDescriptor "" + name + "", "" + id + "", "" + flags + "", + description + ""]""`\r\n\r\nis just fine.', 'commenter': 'vlsi'}, {'comment': ""I've applied your suggestion, removing this helps!"", 'commenter': 'ham1'}, {'comment': 'my fear was ""would Checkstyle accept that?"" :)', 'commenter': 'vlsi'}]"
495,src/core/src/main/java/org/apache/jmeter/gui/action/template/Template.java,"@@ -150,47 +157,37 @@ public boolean equals(Object obj) {
     }
 
     private boolean mapsEquals(Map<String, String> map1, Map<String, String> map2) {","[{'comment': 'Is this method required at all?\r\nIts implementation is exactly the same as `Map#equals`. So could we just use `Objects.equal(map1, map2)`?', 'commenter': 'vlsi'}, {'comment': ""Good question. I only formatted it, happy to revert the changes - wouldn't want to make any changes as part of this PR unless the test coverage was really good."", 'commenter': 'ham1'}, {'comment': ""I've refactored and added more tests :)"", 'commenter': 'ham1'}]"
495,src/core/src/main/java/org/apache/jmeter/gui/action/template/Template.java,"@@ -105,92 +104,44 @@ public int hashCode() {
 
     @Override
     public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
         if (obj == null) {
             return false;
         }
         if (getClass() != obj.getClass()) {
             return false;
         }
         Template other = (Template) obj;
-        if (description == null) {
-            if (other.description != null) {
-                return false;
-            }
-        } else if (!description.equals(other.description)) {
+        if (!Objects.equals(description, other.description)) {
             return false;
         }
-        if (fileName == null) {
-            if (other.fileName != null) {
-                return false;
-            }
-        } else if (!fileName.equals(other.fileName)) {
+        if (!Objects.equals(fileName, other.fileName)) {
             return false;
         }
         if (isTestPlan != other.isTestPlan) {
             return false;
         }
-        if (name == null) {
-            if (other.name != null) {
-                return false;
-            }
-        } else if (!name.equals(other.name)) {
+        if (!Objects.equals(name, other.name)) {
             return false;
         }
-        if (!mapsEquals(parameters, other.parameters)) {
+        if (!Objects.equals(parameters, other.parameters)) {
             return false;
         }
         if (parent == null) {
-            if (other.parent != null) {
-                return false;
-            }
-        } else if (!parent.equals(other.parent)) {
-            return false;
+            return other.parent == null;
+        } else {
+            return parent.equals(other.parent);","[{'comment': 'Sorry for nit-picking, but this `if-else` looks like `return Objects.equals(parent, other.parent)`', 'commenter': 'vlsi'}, {'comment': 'then the whole thing can be collapsed to `return Object.equals(...) && Object.equals(...)  && Object.equals(...) ...`', 'commenter': 'vlsi'}, {'comment': ""I've actually just re-generated `equals` and `hashCode`, much cleaner now :)"", 'commenter': 'ham1'}]"
495,src/core/src/main/java/org/apache/jmeter/util/JMeterUtils.java,"@@ -1282,11 +1282,7 @@ public static void setupXStreamSecurityPolicy(XStream xstream) {
      * @return variable name for index following JMeter convention
      */
     public static String formatJMeterExportedVariableName(String elementName) {
-        StringBuilder builder = new StringBuilder(
-                JMETER_VARS_PREFIX.length()+elementName.length());","[{'comment': ""Technically speaking, this was slightly more efficient in Java 8 than the suggested `+`.\r\n\r\nHowever I don't know if that optimization matters."", 'commenter': 'vlsi'}, {'comment': ""I'm not sure it matters much here, and in a very simple benchmark:\r\n```\r\nBenchmark               Mode  Cnt        Score        Error  Units\r\nMyBenchmark.newMethod  thrpt    6  4659748.533 ¬± 195139.536  ops/s\r\nMyBenchmark.original   thrpt    6  4771658.266 ¬±  31374.782  ops/s\r\n```"", 'commenter': 'ham1'}]"
495,src/core/src/main/java/org/apache/jmeter/gui/action/template/Template.java,"@@ -91,106 +90,33 @@ public void setParameters(Map<String, String> parameters) {
     }
 
     @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((description == null) ? 0 : description.hashCode());
-        result = prime * result + ((fileName == null) ? 0 : fileName.hashCode());
-        result = prime * result + (isTestPlan ? 1231 : 1237);
-        result = prime * result + ((name == null) ? 0 : name.hashCode());
-        result = prime * result + ((parameters == null) ? 0 : parameters.hashCode());
-        result = prime * result + ((parent == null) ? 0 : parent.hashCode());
-        return result;
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        Template other = (Template) obj;
-        if (description == null) {
-            if (other.description != null) {
-                return false;
-            }
-        } else if (!description.equals(other.description)) {
-            return false;
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
         }
-        if (fileName == null) {
-            if (other.fileName != null) {
-                return false;
-            }
-        } else if (!fileName.equals(other.fileName)) {
+        if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        if (isTestPlan != other.isTestPlan) {
-            return false;
-        }
-        if (name == null) {
-            if (other.name != null) {
-                return false;
-            }
-        } else if (!name.equals(other.name)) {
-            return false;
-        }
-        if (!mapsEquals(parameters, other.parameters)) {
-            return false;
-        }
-        if (parent == null) {
-            if (other.parent != null) {
-                return false;
-            }
-        } else if (!parent.equals(other.parent)) {
-            return false;
-        }
-        return true;
+        Template other = (Template) o;
+        return isTestPlan == other.isTestPlan &&
+                Objects.equals(name, other.name) &&
+                Objects.equals(fileName, other.fileName) &&
+                Objects.equals(description, other.description) &&
+                Objects.equals(parent, other.parent) &&
+                Objects.equals(parameters, other.parameters);
     }
 
-    private boolean mapsEquals(Map<String, String> map1, Map<String, String> map2) {
-        if(map1 == null) {
-            return map2 == null;
-        }else if(map2 == null) {
-            return false;
-        }
-
-        if(map1.size() != map2.size()) {
-            return false;
-        }
-
-        for(Entry<String, String> entry : map1.entrySet()) {
-            String key = entry.getKey();
-            String value = entry.getValue();
-            if(map2.containsKey(key)) {
-                if(!map2.get(key).equals(value)) {
-                    return false;
-                }
-            }else {
-                return false;
-            }
-        }
-
-        return true;
+    @Override
+    public int hashCode() {
+        return Objects.hash(isTestPlan, name, fileName, description, parent, parameters);","[{'comment': ""I don't quite remember. Does this allocate memory?"", 'commenter': 'vlsi'}, {'comment': ""It does, primitives are boxed and an `Object[]` is created.\r\nI can't see these objects being hashed frequently (or at all) for this to matter."", 'commenter': 'ham1'}]"
495,src/components/src/test/java/org/apache/jmeter/gui/action/template/TestTemplateManager.java,"@@ -72,30 +82,60 @@ public void testTemplateFile() throws IOException, SAXException, ParserConfigura
         assertEquals(""/bin/templates/testTemplate.jmx"", testTemplate.getFileName());
         assertEquals(""testTemplate desc"", testTemplate.getDescription());
         assertNull(testTemplate.getParameters());
-
     }
 
-    /**
-     * Check that a wrong xml file throws a FileNotFoundException
-     */
     @Test(expected = FileNotFoundException.class)
-    public void testInvalidTemplateFile() throws Exception {
-        String xmlTemplatePath = ""missing.xml"";
-        File templateFile = new File(xmlTemplatePath);
-        TemplateManager templateManager = TemplateManager.getInstance();
-        templateManager.parseTemplateFile(templateFile);
+    public void testNonExistantXmlFileThrowsFileNotFoundException() throws Exception {
+        File xmlTemplateFile = new File(""missing.xml"");
+        TemplateManager.getInstance().parseTemplateFile(xmlTemplateFile);
     }
 
     @Test
     public void testInvalidTemplateXml() throws IOException, SAXException, ParserConfigurationException {
         try {
             String xmlTemplatePath = this.getClass().getResource(""invalidTemplates.xml"").getFile();
             File templateFile = new File(xmlTemplatePath);
-            TemplateManager templateManager = TemplateManager.getInstance();
-            templateManager.parseTemplateFile(templateFile);
+            TemplateManager.getInstance().parseTemplateFile(templateFile);
         } catch (SAXParseException ex) {
-            assertTrue(""Exception did not contains expected message, got:""+ex.getMessage(),
-                    ex.getMessage().indexOf(""Element type \""key\"" must be declared."")>=0);
+            assertTrue(""Exception did not contains expected message, got:"" + ex.getMessage(),
+                    ex.getMessage().contains(""Element type \""key\"" must be declared.""));
         }
     }
+
+    @Test
+    public void testDifferentTemplatesAreNotEqual() {
+        Template testTemplate1 = templateMap.get(""testTemplateWithParameters"");
+        Template testTemplate2 = templateMap.get(""testTemplateNotTestPlan"");
+        Template testTemplate3 = templateMap.get(""testTemplate"");
+
+        assertNotEquals(testTemplate1, testTemplate2);
+        assertNotEquals(testTemplate1, testTemplate3);
+        assertNotEquals(testTemplate2, testTemplate1);
+        assertNotEquals(testTemplate2, testTemplate3);
+        assertNotEquals(testTemplate3, testTemplate1);
+        assertNotEquals(testTemplate3, testTemplate2);
+
+        assertNotEquals(testTemplate1.hashCode(), testTemplate2.hashCode());","[{'comment': 'This is inconsistent. It would result in flaky tests in case of hashcode collision.\r\n\r\nHave you seen https://jqno.nl/equalsverifier/ ?', 'commenter': 'vlsi'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -59,6 +54,16 @@
     private static final boolean NUMBER_REQUESTS =
         JMeterUtils.getPropDefault(""proxy.number.requests"", true); // $NON-NLS-1$
 
+    /*
+     *  numbering mode : prefix or suffix
+     */
+    private static final String NUMBER_MODE = JMeterUtils.getPropDefault(""proxy.number.mode"", ""prefix""); // $NON-NLS-1$
+
+    /*
+     *  format numbering  (String.format) like %03d
+     */
+    private static final String  NUMBER_VALUE_FORMAT = JMeterUtils.getPropDefault(""proxy.number.value_format"", ""%03d""); // $NON-NLS-1$
+
     private static AtomicInteger REQUEST_NUMBER = new AtomicInteger(0);// running number","[{'comment': 'This should not be static ', 'commenter': 'pmouawad'}, {'comment': 'This has not been taken into account, can you please check ? ', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -110,7 +123,18 @@ protected static int incrementRequestNumberAndGet() {
      * @return boolean is numbering requests is required
      */
     protected static boolean isNumberRequests() {","[{'comment': 'Same here', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java,"@@ -443,6 +458,12 @@ public void actionPerformed(ActionEvent action) {
             }
         } else if (command.equals(ACTION_RESTART)) {
             model.stopProxy();
+            // what is the last number use in the label numbering of sampler, ex : 96
+            DefaultSamplerCreator defaultSamplerCreator = new DefaultSamplerCreator();","[{'comment': 'This must not be instanciated , factory must be used', 'commenter': 'pmouawad'}]"
545,src/core/src/main/resources/org/apache/jmeter/resources/messages_fr.properties,"@@ -15,15 +15,15 @@
 
 #Stored by I18NEdit, may be edited!
 about=A propos de JMeter
-action_check_message=Un test est en cours, arr√™tez le avant d''utiliser cette commande
+action_check_message=Un test est en cours, arr\u00eatez le avant d''utiliser cette commande","[{'comment': 'Check your build, since gradle migration file is in UTF-8', 'commenter': 'pmouawad'}, {'comment': 'This has not been taken into account, can you please check ? There are too much differences', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java,"@@ -42,25 +42,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import javax.swing.BorderFactory;
-import javax.swing.Box;
-import javax.swing.DefaultComboBoxModel;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JComboBox;
-import javax.swing.JLabel;
-import javax.swing.JMenu;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JPopupMenu;
-import javax.swing.JScrollBar;
-import javax.swing.JScrollPane;
-import javax.swing.JTabbedPane;
-import javax.swing.JTable;
-import javax.swing.JTextField;
-import javax.swing.SwingUtilities;
-import javax.swing.Timer;
+import javax.swing.*;","[{'comment': '* import  should be avoided', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -161,6 +171,10 @@
     private static final String SAMPLER_TYPE_HTTP_SAMPLER_HC3_1 = ""1"";
     private static final String SAMPLER_TYPE_HTTP_SAMPLER_HC4 = ""2"";
 
+    private static final int HTTP_SAMPLER_NUMBERING_MODE_PREFIX = 0;
+    private static final int HTTP_SAMPLER_NUMBERING_MODE_SUFFIX = 1;
+    private static final int HTTP_SAMPLER_NUMBERING_MODE_NO_NUMBER = 2;","[{'comment': 'Could the information encoded here, in other constants in this class and also other classes be part of an Enum?', 'commenter': 'ham1'}, {'comment': 'All modifications are done, what\'s next  ?\r\nDid this pull request will merge ?\r\nIf yes, i will modify the documentation for the ""Http(s) Test Script Recorder""', 'commenter': 'vdaburon'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -355,6 +399,54 @@ public void setHTTPSampleNamingMode(int httpNamingMode) {
         setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, httpNamingMode));
     }
 
+    public void setHttpSampleNumberingMode(int httpSampleNumberingMode) {
+        setProperty(new IntegerProperty(HTTP_SAMPLER_NUMBERING_MODE, httpSampleNumberingMode));
+        if (httpSampleNumberingMode == 0) {
+            // choose prefix numbering
+            JMeterUtils.setProperty(""proxy.number.mode"", ""prefix""); // $NON-NLS-1$
+            JMeterUtils.setProperty(""proxy.number.requests"", ""true""); // $NON-NLS-1$
+        }
+        if (httpSampleNumberingMode == 1) {
+            // choose suffix numbering
+            JMeterUtils.setProperty(""proxy.number.mode"", ""suffix""); // $NON-NLS-1$
+            JMeterUtils.setProperty(""proxy.number.requests"", ""true""); // $NON-NLS-1$
+        }
+        if (httpSampleNumberingMode == 2) {
+            // choose no numbering
+            JMeterUtils.setProperty(""proxy.number.requests"", ""false""); // $NON-NLS-1$
+        }
+    }
+
+    public void setHttpSamplerNumberingStartValue(int httpSamplerNumberingStartValue) {
+        iNumberingStartValue=  httpSamplerNumberingStartValue;
+    }
+
+    public void setHttpSamplerNumberingStartForSamplerCreator(int httpSamplerNumberingStartValue) {
+        iNumberingStartValue =  httpSamplerNumberingStartValue;
+
+        SamplerCreator samplerCreator = samplerCreatorFactory.getDefaultSamplerCreator();
+        if (samplerCreator instanceof DefaultSamplerCreator) {
+            DefaultSamplerCreator defaultSamplerCreator = (DefaultSamplerCreator) samplerCreator;
+            defaultSamplerCreator.setRequestNumber(httpSamplerNumberingStartValue);","[{'comment': 'setRequestNumber should be a method of SamplerCreator interface with a default implementation in AbstractSamplerCreator. So you would not have to have to check instanceof', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -87,10 +97,18 @@ public AbstractSamplerCreator() {
     /**
      * @return int request number
      */
-    protected static int getRequestNumber() {
+    public static int getRequestNumber() {","[{'comment': 'This should not be static', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -87,10 +97,18 @@ public AbstractSamplerCreator() {
     /**
      * @return int request number
      */
-    protected static int getRequestNumber() {
+    public static int getRequestNumber() {
         return REQUEST_NUMBER.get();
     }
 
+    /**
+     * set the RequestNumber to a specify value
+     * @param iValue
+     */
+    public static void setRequestNumber(int iValue) {","[{'comment': 'This should not be static\r\n', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java,"@@ -62,6 +62,15 @@
     private static final int SAMPLER_NAME_NAMING_MODE_PREFIX = 0;  // $NON-NLS-1$
     private static final int SAMPLER_NAME_NAMING_MODE_COMPLETE = 1;  // $NON-NLS-1$
 
+    /*
+     * Must be the same order than in org.apache.jmeter.protocol.http.proxy.gui.ProxyControlGui class in createHTTPSamplerPanel method
+     */
+    private static final int SAMPLER_NUMBERING_MODE_PREFIX = 0;  // $NON-NLS-1$","[{'comment': 'Those do not seem to be used anymore', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -355,6 +399,54 @@ public void setHTTPSampleNamingMode(int httpNamingMode) {
         setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, httpNamingMode));
     }
 
+    public void setHttpSampleNumberingMode(int httpSampleNumberingMode) {
+        setProperty(new IntegerProperty(HTTP_SAMPLER_NUMBERING_MODE, httpSampleNumberingMode));
+        if (httpSampleNumberingMode == 0) {","[{'comment': ""Shouldn't you use enum here ?"", 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java,"@@ -928,6 +988,46 @@ private JPanel createHTTPSamplerPanel() {
         prefixHTTPSampleName.addKeyListener(this);
         prefixHTTPSampleName.setName(PREFIX_HTTP_SAMPLER_NAME);
 
+        DefaultComboBoxModel<String> choiceNumbering = new DefaultComboBoxModel<>();
+        choiceNumbering.addElement(JMeterUtils.getResString(""sample_numbering_mode_prefix"")); // $NON-NLS-1$
+        choiceNumbering.addElement(JMeterUtils.getResString(""sample_numbering_mode_suffix"")); // $NON-NLS-1$
+        choiceNumbering.addElement(JMeterUtils.getResString(""sample_numbering_mode_no_number"")); // $NON-NLS-1$
+        String sNumberingMode = JMeterUtils.getPropDefault(""proxy.number.mode"", ""prefix""); // $NON-NLS-1$","[{'comment': 'This way of communicating through System property is not clean, it break object isolation and might make difficult to maintain.', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -56,9 +56,19 @@
     /*
      * Optionally number the requests
      */
-    private static final boolean NUMBER_REQUESTS =
+    private final boolean NUMBER_REQUESTS =
         JMeterUtils.getPropDefault(""proxy.number.requests"", true); // $NON-NLS-1$
 
+    /*
+     *  numbering mode : prefix or suffix
+     */
+    private final String NUMBER_MODE = JMeterUtils.getPropDefault(""proxy.number.mode"", ""prefix""); // $NON-NLS-1$","[{'comment': 'This is read once while property is changed later', 'commenter': 'pmouawad'}]"
545,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -355,6 +399,54 @@ public void setHTTPSampleNamingMode(int httpNamingMode) {
         setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, httpNamingMode));
     }
 
+    public void setHttpSampleNumberingMode(int httpSampleNumberingMode) {
+        setProperty(new IntegerProperty(HTTP_SAMPLER_NUMBERING_MODE, httpSampleNumberingMode));
+        if (httpSampleNumberingMode == 0) {
+            // choose prefix numbering
+            JMeterUtils.setProperty(""proxy.number.mode"", ""prefix""); // $NON-NLS-1$","[{'comment': 'This way of communicating through System property is not clean, it break object isolation and might make difficult to maintain.', 'commenter': 'pmouawad'}]"
551,bin/templates/functional-testing-01-test-plan.jmx,"@@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>","[{'comment': 'The file must contain a license header.', 'commenter': 'FSchumacher'}]"
551,bin/templates/templates.xml,"@@ -1,22 +1,21 @@
 <?xml version=""1.0""?>
 <!--
-  ~ Licensed to the Apache Software Foundation (ASF) under one or more","[{'comment': ""We have configured autostyle for our sources and these changes were made a few days ago in trunk. Please run `./gradlew style` before opening the PR.\r\n\r\nGenerally look out for whitespace changes, that you didn't intend. Don't commit those, it makes it harder to reason about the real changes."", 'commenter': 'FSchumacher'}]"
551,bin/templates/templates.xml,"@@ -151,7 +150,23 @@
         <h2>Useful link</h2>
             <ul>
                 <li><a href=""http://jmeter.apache.org/usermanual/build-web-test-plan.html"" >http://jmeter.apache.org/usermanual/build-web-test-plan.html</a></li>
-            </ul>
+            </ul>       
+        ]]></description>
+    </template>
+	<template isTestPlan=""true"">
+        <name>Functional Testing Test Plan [01]</name>
+        <fileName>/bin/templates/functional-testing-01-test-plan.jmx</fileName>
+        <description><![CDATA[
+        <h1>Building a Functional Testing Test Plan [01]</h1>
+		<p>You can use JMeter to automate API Testing</p>
+		<p>This template of Test Plan contains first step when starting creating JMeter script</p>
+        <h2>Useful links</h2>
+            <ul>
+                <li><a href=""http://jmeter.apache.org/usermanual/test_plan.html"" >http://jmeter.apache.org/usermanual/test_plan.html</a></li>","[{'comment': 'Even if this is probably a copy and paste thing, try to use `https://...` in URLs, when possible.', 'commenter': 'FSchumacher'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -55,9 +55,19 @@
     /*
      * Optionally number the requests
      */
-    private static final boolean NUMBER_REQUESTS =
+    private final boolean NUMBER_REQUESTS =","[{'comment': 'if those fields are not static, then they should be camel case', 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -86,30 +96,49 @@ public AbstractSamplerCreator() {
     /**
      * @return int request number
      */
-    protected static int getRequestNumber() {
+    public int getRequestNumber() {
         return REQUEST_NUMBER.get();
     }
 
+    /**
+     * set the RequestNumber to a specify value
+     * @param iValue
+     */
+    public void setRequestNumber(int iValue) {
+        REQUEST_NUMBER.set(iValue);
+    }
+
     /**
      * Increment request number
      */
-    protected static void incrementRequestNumber() {
+    protected void incrementRequestNumber() {
         incrementRequestNumberAndGet();
     }
 
     /**
      * Increment request number
      * @return int number for created sampler
      */
-    protected static int incrementRequestNumberAndGet() {
+    protected int incrementRequestNumberAndGet() {
         return REQUEST_NUMBER.incrementAndGet();
     }
 
     /**
      * @return boolean is numbering requests is required
      */
-    protected static boolean isNumberRequests() {
-        return NUMBER_REQUESTS;
+    protected boolean isNumberRequests() {
+        boolean bNumberRequest = JMeterUtils.getPropDefault(""proxy.number.requests"", true); // $NON-NLS-1$;","[{'comment': ""Why it's not a simple getter ? just return NUMBER_REQUEST (to be camelCased)"", 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -86,30 +96,49 @@ public AbstractSamplerCreator() {
     /**
      * @return int request number
      */
-    protected static int getRequestNumber() {
+    public int getRequestNumber() {
         return REQUEST_NUMBER.get();
     }
 
+    /**
+     * set the RequestNumber to a specify value
+     * @param iValue
+     */
+    public void setRequestNumber(int iValue) {
+        REQUEST_NUMBER.set(iValue);
+    }
+
     /**
      * Increment request number
      */
-    protected static void incrementRequestNumber() {
+    protected void incrementRequestNumber() {
         incrementRequestNumberAndGet();
     }
 
     /**
      * Increment request number
      * @return int number for created sampler
      */
-    protected static int incrementRequestNumberAndGet() {
+    protected int incrementRequestNumberAndGet() {
         return REQUEST_NUMBER.incrementAndGet();
     }
 
     /**
      * @return boolean is numbering requests is required
      */
-    protected static boolean isNumberRequests() {
-        return NUMBER_REQUESTS;
+    protected boolean isNumberRequests() {
+        boolean bNumberRequest = JMeterUtils.getPropDefault(""proxy.number.requests"", true); // $NON-NLS-1$;
+        return bNumberRequest;
+    }
+
+    protected String getNumberValueFormat() {
+        String sNumberValueFormat = JMeterUtils.getPropDefault(""proxy.number.value_format"", ""%03d"");","[{'comment': 'same note', 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -86,30 +96,49 @@ public AbstractSamplerCreator() {
     /**
      * @return int request number
      */
-    protected static int getRequestNumber() {
+    public int getRequestNumber() {
         return REQUEST_NUMBER.get();
     }
 
+    /**
+     * set the RequestNumber to a specify value
+     * @param iValue
+     */
+    public void setRequestNumber(int iValue) {
+        REQUEST_NUMBER.set(iValue);
+    }
+
     /**
      * Increment request number
      */
-    protected static void incrementRequestNumber() {
+    protected void incrementRequestNumber() {
         incrementRequestNumberAndGet();
     }
 
     /**
      * Increment request number
      * @return int number for created sampler
      */
-    protected static int incrementRequestNumberAndGet() {
+    protected int incrementRequestNumberAndGet() {
         return REQUEST_NUMBER.incrementAndGet();
     }
 
     /**
      * @return boolean is numbering requests is required
      */
-    protected static boolean isNumberRequests() {
-        return NUMBER_REQUESTS;
+    protected boolean isNumberRequests() {
+        boolean bNumberRequest = JMeterUtils.getPropDefault(""proxy.number.requests"", true); // $NON-NLS-1$;
+        return bNumberRequest;
+    }
+
+    protected String getNumberValueFormat() {
+        String sNumberValueFormat = JMeterUtils.getPropDefault(""proxy.number.value_format"", ""%03d"");
+       return sNumberValueFormat;
+    }
+
+    protected String getNumberMode() {
+        String sMumberMode = JMeterUtils.getPropDefault(""proxy.number.mode"", ""prefix"");","[{'comment': 'same note', 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java,"@@ -61,6 +62,8 @@
     private static final int SAMPLER_NAME_NAMING_MODE_PREFIX = 0;  // $NON-NLS-1$
     private static final int SAMPLER_NAME_NAMING_MODE_COMPLETE = 1;  // $NON-NLS-1$
 
+    private static final String  SAMPLER_NUMBERING_MODE_NAME_PREFIX = ""prefix"";  // $NON-NLS-1$","[{'comment': ""Why you didn't use the enum HttpSamplerNumberingMode ?"", 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -276,13 +310,36 @@
 
     private String keyPassword;
 
+    private int iNumberingStartValue;
+    private String sNumberingMode;
+    private String sNumberingFormat;
+
     private JMeterTreeModel nonGuiTreeModel;
 
     public ProxyControl() {
         setPort(DEFAULT_PORT);
         setExcludeList(new HashSet<>());
         setIncludeList(new HashSet<>());
         setCaptureHttpHeaders(true); // maintain original behaviour
+        
+        iNumberingStartValue = HTTP_SAMPLER_NUMBERING_START_VALUE_DEFAULT;
+        sNumberingFormat = JMeterUtils.getPropDefault(""proxy.number.value_format"", HTTP_SAMPLER_NUMBERING_INTEGER_FORMAT_DEFAULT);
+        setHttpSamplerNumberingIntegerFormat(sNumberingFormat);
+
+        sNumberingMode = JMeterUtils.getPropDefault(""proxy.number.mode"", HTTP_SAMPLER_NUMBERING_MODE_DEFAULT);
+
+        if (HttpSamplerNumberingMode.PREFIX.getStringMode().equals(sNumberingMode)) {
+            setHttpSampleNumberingMode(HttpSamplerNumberingMode.PREFIX.getIntValue());
+        }
+        if (HttpSamplerNumberingMode.SUFFIX.getStringMode().equals(sNumberingMode)) {","[{'comment': 'else if ', 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -355,6 +412,47 @@ public void setHTTPSampleNamingMode(int httpNamingMode) {
         setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, httpNamingMode));
     }
 
+    public void setHttpSampleNumberingMode(int httpSampleNumberingMode) {
+        
+        if (httpSampleNumberingMode == HttpSamplerNumberingMode.PREFIX.getIntValue()) {
+        	sNumberingMode = HttpSamplerNumberingMode.PREFIX.getStringMode(); 
+        }
+        
+        if (httpSampleNumberingMode ==  HttpSamplerNumberingMode.SUFFIX.getIntValue()) {","[{'comment': 'else if', 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -355,6 +412,47 @@ public void setHTTPSampleNamingMode(int httpNamingMode) {
         setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, httpNamingMode));
     }
 
+    public void setHttpSampleNumberingMode(int httpSampleNumberingMode) {
+        
+        if (httpSampleNumberingMode == HttpSamplerNumberingMode.PREFIX.getIntValue()) {
+        	sNumberingMode = HttpSamplerNumberingMode.PREFIX.getStringMode(); 
+        }
+        
+        if (httpSampleNumberingMode ==  HttpSamplerNumberingMode.SUFFIX.getIntValue()) {
+            // choose suffix numbering
+        	sNumberingMode =  HttpSamplerNumberingMode.SUFFIX.getStringMode();
+        }
+        
+        if (httpSampleNumberingMode == HttpSamplerNumberingMode.NO_NUMBER.getIntValue()) {
+            // choose no numbering
+        	sNumberingMode = HttpSamplerNumberingMode.NO_NUMBER.getStringMode();
+        }
+    }
+
+    public void setHttpSamplerNumberingStartValue(int httpSamplerNumberingStartValue) {
+        iNumberingStartValue=  httpSamplerNumberingStartValue;
+    }
+
+    public void setHttpSamplerNumberingStartForSamplerCreator(int httpSamplerNumberingStartValue) {
+        iNumberingStartValue =  httpSamplerNumberingStartValue;
+
+        SamplerCreator samplerCreator = samplerCreatorFactory.getDefaultSamplerCreator();
+        samplerCreator.setRequestNumber(httpSamplerNumberingStartValue);
+    }
+
+    public int getRequestNumberFromSamplerCreator() {
+        int iRequestNumber = 1;
+        SamplerCreator samplerCreator = samplerCreatorFactory.getDefaultSamplerCreator();
+ 
+        iRequestNumber = samplerCreator.getRequestNumber();
+        iNumberingStartValue = iRequestNumber;","[{'comment': 'Why this ?', 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java,"@@ -412,10 +445,25 @@ private void populateTable(PowerTableModel pModel, PropertyIterator iter) {
     public void itemStateChanged(ItemEvent e) {
         if (e.getSource() instanceof JComboBox) {
             JComboBox combo = (JComboBox) e.getSource();
-            if(HTTP_SAMPLER_NAMING_MODE.equals(combo.getName())){
+            if(HTTP_SAMPLER_NAMING_MODE.equals(combo.getName())) {
                 model.setHTTPSampleNamingMode(httpSampleNamingMode.getSelectedIndex());
+            }
+
+            if(HTTP_SAMPLER_NUMBERING_MODE.equals(combo.getName())) {
+                model.setHttpSampleNumberingMode(httpSampleNumberingMode.getSelectedIndex());
+                if (httpSampleNumberingMode.getSelectedIndex() == 0) {
+                	JMeterUtils.setProperty(""proxy.number.mode"", ""prefix"");","[{'comment': 'Why this and not using setter/getters ?', 'commenter': 'pmouawad'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java,"@@ -442,6 +483,12 @@ public void actionPerformed(ActionEvent action) {
             }
         } else if (command.equals(ACTION_RESTART)) {
             model.stopProxy();
+            // what is the last number for numbering samplers, ex : 96
+            int iRequestNumber = model.getRequestNumberFromSamplerCreator();","[{'comment': 'If the *`i`* at the beginning of `iRequestNumber` is used to indicate an integer, I would remove it and name the variable `requestNumber`. That is the way variables are named in JMeter most of the time. Most developers around JMeter will probably use an IDE, which shows the type of the variable anyway.', 'commenter': 'FSchumacher'}, {'comment': 'I use prefix  i for Integer or s for String for local variables but i could change to requestNumber', 'commenter': 'vdaburon'}]"
571,xdocs/usermanual/component_reference.xml,"@@ -6720,13 +6719,34 @@ Both Chrome and Internet Explorer use the same trust store for certificates.
         By default it also removes <code>If-Modified-Since</code> and <code>If-None-Match</code> headers.
         These are used to determine if the browser cache items are up to date;
         when recording one normally wants to download all the content.
-        To change which additional headers are removed, define the JMeter property <code>proxy.headers.remove</code>
+        To change which additional headers are removed, define the JMeter property <code>proxy.heade'rs.remove</code>","[{'comment': ""Seems to be a strange name for a property. Is `proxy.heade'rs` really correct?"", 'commenter': 'FSchumacher'}, {'comment': ""I don't change this line, i get it from a previous version before the modification, but you are rigth, the correct <code>proxy.headers.remove</code>"", 'commenter': 'vdaburon'}]"
571,xdocs/usermanual/component_reference.xml,"@@ -6720,13 +6719,34 @@ Both Chrome and Internet Explorer use the same trust store for certificates.
         By default it also removes <code>If-Modified-Since</code> and <code>If-None-Match</code> headers.
         These are used to determine if the browser cache items are up to date;
         when recording one normally wants to download all the content.
-        To change which additional headers are removed, define the JMeter property <code>proxy.headers.remove</code>
+        To change which additional headers are removed, define the JMeter property <code>proxy.heade'rs.remove</code>
         as a comma-separated list of headers.
         </property>
         <property name=""Add Assertions"" required=""Yes"">Add a blank assertion to each sampler?</property>
         <property name=""Regex Matching"" required=""Yes"">Use Regex Matching when replacing variables? If checked replacement will use word boundaries, i.e. it will only replace word matching values of variable, not part of a word. A word boundary follows Perl5 definition and is equivalent to <code>\b</code>. More information below in the paragraph about ""<code>User Defined Variable replacement</code>"".</property>
         <property name=""Prefix/Transaction name"" required=""No"">Add a prefix to sampler name during recording (Prefix mode). Or replace sampler name by user chosen name (Transaction name)</property>
-        <property name=""Create new transaction after request (ms)"">Inactivity time between two requests needed to consider them in two separate groups.</property>
+		<property name=""Numbering Sampler Choice"" required=""Yes"">Select the numbering mode for sampler name<br/>","[{'comment': 'Looks like a mismatch in spaces at the front. I think the `property` tags should match up.', 'commenter': 'FSchumacher'}]"
571,xdocs/usermanual/component_reference.xml,"@@ -6720,13 +6719,34 @@ Both Chrome and Internet Explorer use the same trust store for certificates.
         By default it also removes <code>If-Modified-Since</code> and <code>If-None-Match</code> headers.
         These are used to determine if the browser cache items are up to date;
         when recording one normally wants to download all the content.
-        To change which additional headers are removed, define the JMeter property <code>proxy.headers.remove</code>
+        To change which additional headers are removed, define the JMeter property <code>proxy.heade'rs.remove</code>
         as a comma-separated list of headers.
         </property>
         <property name=""Add Assertions"" required=""Yes"">Add a blank assertion to each sampler?</property>
         <property name=""Regex Matching"" required=""Yes"">Use Regex Matching when replacing variables? If checked replacement will use word boundaries, i.e. it will only replace word matching values of variable, not part of a word. A word boundary follows Perl5 definition and is equivalent to <code>\b</code>. More information below in the paragraph about ""<code>User Defined Variable replacement</code>"".</property>
         <property name=""Prefix/Transaction name"" required=""No"">Add a prefix to sampler name during recording (Prefix mode). Or replace sampler name by user chosen name (Transaction name)</property>
-        <property name=""Create new transaction after request (ms)"">Inactivity time between two requests needed to consider them in two separate groups.</property>
+		<property name=""Numbering Sampler Choice"" required=""Yes"">Select the numbering mode for sampler name<br/>
+		<ul>
+             <li><code>Without numbering</code> no numbering, ex : '/a.png'</li>","[{'comment': '*ex : ...* is probably a French abbreviation (it means *excercise* in English). In English you can use *e.g.*, or *for example*. Also note, that there is no space before a colon in English typography. And regarding the markup of `/a.png`, I would use a `code` block.', 'commenter': 'FSchumacher'}, {'comment': 'ok i will use e.g.', 'commenter': 'vdaburon'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java,"@@ -283,32 +285,58 @@ public boolean isErrorDetected() {
      * @param sampler {@link HTTPSamplerBase}
      * @param request {@link HttpRequestHdr}
      */
-    protected void computeSamplerName(HTTPSamplerBase sampler,
-            HttpRequestHdr request) {
-        String prefix = request.getPrefix();
+    protected void computeSamplerName(HTTPSamplerBase sampler, HttpRequestHdr request) {
+        String prefix = request.getPrefix(); // ppp
         int httpSampleNameMode = request.getHttpSampleNameMode();
         if (!HTTPConstants.CONNECT.equals(request.getMethod()) && isNumberRequests()) {
             if(StringUtils.isNotEmpty(prefix)) {
+            	// with a prefix name","[{'comment': 'Can these parts be extracted in smaller functions/methods? You could use names to tell the reader what the function is doing instead of using a comment and at the same time the code gets less (at least here :) )', 'commenter': 'FSchumacher'}, {'comment': 'I add a comment because ""prefix"" have 2 significations :\r\n - prefix name\r\n - prefix numbering \r\nThis is prefix name.', 'commenter': 'vdaburon'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java,"@@ -283,32 +285,58 @@ public boolean isErrorDetected() {
      * @param sampler {@link HTTPSamplerBase}
      * @param request {@link HttpRequestHdr}
      */
-    protected void computeSamplerName(HTTPSamplerBase sampler,
-            HttpRequestHdr request) {
-        String prefix = request.getPrefix();
+    protected void computeSamplerName(HTTPSamplerBase sampler, HttpRequestHdr request) {
+        String prefix = request.getPrefix(); // ppp","[{'comment': 'What is the meaning of *ppp* ?', 'commenter': 'FSchumacher'}, {'comment': 'ppp is ""ppp""refix name"" i use this string to test (look at the screen shot for the description of the modification and the test).\r\nI could rename ppp with pn for Prefix Name.\r\nnnn is ""nnn""ame i use this string to test the naming request.', 'commenter': 'vdaburon'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java,"@@ -86,30 +75,49 @@ public AbstractSamplerCreator() {
     /**
      * @return int request number
      */
-    protected static int getRequestNumber() {
+    public int getRequestNumber() {","[{'comment': 'Why did you change it to be non-static? (I am not sure, I like the static, but I would like to here your reasoning.', 'commenter': 'FSchumacher'}, {'comment': ""The method need to be public not protected (same package)\r\nThis method return value from a static value but i don't see why this method need to be static.\r\nOther methods are not static."", 'commenter': 'vdaburon'}, {'comment': 'I guess the static comes from the fact, that the result does not depend on the instance, but rather the class.', 'commenter': 'FSchumacher'}]"
571,bin/jmeter.properties,"@@ -604,8 +604,15 @@ upgrade_properties=/bin/upgrade.properties
 # it assumes that the user has clicked a new URL
 #proxy.pause=5000
 
-# Add numeric suffix to Sampler names (default true)
+# Add numeric to Sampler names (default true)","[{'comment': 'Some placeholder has to be used (in my opinion) instead of *suffix* or use *number* instead of *numeric*.', 'commenter': 'FSchumacher'}, {'comment': 'I remove the suffix (add to the JMeter 5.2) because is not only suffix.\r\nI don\'t change the comment ""numeric"". This comment exist for a long time. \r\nI can change to numbering.', 'commenter': 'vdaburon'}]"
571,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -355,6 +406,48 @@ public void setHTTPSampleNamingMode(int httpNamingMode) {
         setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, httpNamingMode));
     }
 
+    public void setHttpSampleNumberingMode(int httpSampleNumberingMode) {
+        
+        if (httpSampleNumberingMode == HttpSamplerNumberingMode.PREFIX.getIntValue()) {
+        	sNumberingMode = HttpSamplerNumberingMode.PREFIX.getStringMode();
+        	JMeterUtils.setProperty(""proxy.number.mode"", ""prefix"");
+        	JMeterUtils.setProperty(""proxy.number.requests"", ""true"");
+        } else if (httpSampleNumberingMode ==  HttpSamplerNumberingMode.SUFFIX.getIntValue()) {
+            // choose suffix numbering
+        	sNumberingMode =  HttpSamplerNumberingMode.SUFFIX.getStringMode();
+        	JMeterUtils.setProperty(""proxy.number.mode"", ""suffix"");
+        	JMeterUtils.setProperty(""proxy.number.requests"", ""true"");        	
+        } else if (httpSampleNumberingMode == HttpSamplerNumberingMode.NO_NUMBER.getIntValue()) {
+            // choose no numbering
+        	sNumberingMode = HttpSamplerNumberingMode.NO_NUMBER.getStringMode();
+        	JMeterUtils.setProperty(""proxy.number.requests"", ""false"");
+        }
+    }
+
+    public void setHttpSamplerNumberingStartValue(int httpSamplerNumberingStartValue) {
+        iNumberingStartValue=  httpSamplerNumberingStartValue;
+    }
+
+    public void setHttpSamplerNumberingStartForSamplerCreator(int httpSamplerNumberingStartValue) {
+        iNumberingStartValue =  httpSamplerNumberingStartValue;
+        // change the numbering start value directly to the AtomicInteger REQUEST_NUMBER in the AbstractSamplerCreator
+        SamplerCreator samplerCreator = samplerCreatorFactory.getDefaultSamplerCreator();
+        samplerCreator.setRequestNumber(httpSamplerNumberingStartValue);
+    }
+
+    public int getRequestNumberFromSamplerCreator() {
+        int iRequestNumber = 1;
+        SamplerCreator samplerCreator = samplerCreatorFactory.getDefaultSamplerCreator();","[{'comment': 'I think that this assumption may not always be correct, as the `DefaultSamplerCreator` is probably the only factory, that would really work here.\r\nOn the other hand that seems to be the same with the formatting scheme changes. Hm...', 'commenter': 'FSchumacher'}]"
596,xdocs/changes_history.xml,"@@ -1055,7 +1055,7 @@ containing a fix to this issue, we decided to remove it. If you still needed, yo
     <li><bug>62743</bug>Client auth must be enabled on distributed testing</li>
     <li><bug>62767</bug>NPE when searching under certain conditions. Contributed by Ubik Load Pack (support at ubikloadpack.com)</li>
     <li><bug>62790</bug><code>ArrayIndexOutOfBoundsException</code> when calling replace without selecting the first match</li>
-    <li><bug>62795</bug>JMeter master sometimes ends distributed test even though some of the slaves have not finished</li>
+    <li><bug>62795</bug>JMeter master sometimes ends distributed test even though some of the worker nodes have not finished</li>","[{'comment': 'Hello Felix,\r\nI see ""master"" still present here', 'commenter': 'ubikloadpack'}, {'comment': 'Good catch', 'commenter': 'FSchumacher'}]"
632,src/bshclient/src/main/java/org/apache/jmeter/util/BeanShellClient.java,"@@ -80,7 +82,7 @@ public static void main(String [] args) throws Exception{
     private static void sendLine( String line, OutputStream outPipe )
     throws IOException
     {
-        outPipe.write( line.getBytes() ); // TODO - charset?
+        outPipe.write(line.getBytes(StandardCharsets.UTF_8));","[{'comment': 'Are you sure about the potential breaks this might introduce ?', 'commenter': 'pmouawad'}, {'comment': ""I believe there's a movement to use UTF-8 by default.\r\n* https://openjdk.java.net/jeps/8187041\r\n* Kotlin uses UTF-8 by default: https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/read-text.html\r\n\r\nOf course, we can make it configurable, however, I believe, most of the times UTF-8 by default would be better (less chances to corrupt data) than use platform-default encoding."", 'commenter': 'vlsi'}]"
632,src/jorphan/src/main/java/org/apache/log/ContextMap.java,"@@ -53,7 +54,7 @@
     private final ContextMap m_parent;
 
     ///Container to hold map of elements
-    private Hashtable m_map = new Hashtable();
+    private HashMap<String, Object> m_map = new HashMap<>();","[{'comment': 'Are you sure synchronization is not required ?', 'commenter': 'pmouawad'}, {'comment': '`ContextMap` was marked as `@deprecated Will be dropped in 3.3`.\r\nDo we really need to investigate that?\r\n\r\nI might drop the class altogether if you like.', 'commenter': 'vlsi'}, {'comment': 'On the other hand, I should probably just suppress all the warnings for the class.', 'commenter': 'vlsi'}]"
632,extras/startup.bsh,"@@ -49,7 +48,7 @@ print(p + "" = "" + getprop(p));
 }
 
 loglevel(String priority, String category){
-LoggingManager.setPriority(priority, category);
+// TODO: implement?","[{'comment': 'Can we do the TODO before merging, or put the current behaviour back?', 'commenter': 'ham1'}, {'comment': 'Pull requests are welcome.\r\nI have no idea what this code means, however, I am 100% sure the previous implementation was doing absolutely nothing since `LogginManager.setPriority` was an empty method.', 'commenter': 'vlsi'}, {'comment': 'Understood. Could we just remove the TODO? Or even better state this has always been unimplemented?', 'commenter': 'ham1'}]"
632,src/components/src/main/java/org/apache/jmeter/assertions/XMLAssertion.java,"@@ -45,10 +48,12 @@
         @Override
         protected XMLReader initialValue() {
             try {
-                XMLReader reader = XMLReaderFactory.createXMLReader();
+                SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();","[{'comment': 'Do we need all the intermediary variables? e.g.\r\n```\r\nXMLReader reader =\r\n        SAXParserFactory.newInstance().newSAXParser().getXMLReader();\r\n````', 'commenter': 'ham1'}]"
674,src/core/src/main/kotlin/org/apache/jmeter/threads/precise/PreciseThreadGroup.kt,"@@ -0,0 +1,184 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to you under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.jmeter.threads.precise
+
+import org.apache.jmeter.control.Controller
+import org.apache.jmeter.engine.StandardJMeterEngine
+import org.apache.jmeter.gui.GUIMenuSortOrder
+import org.apache.jmeter.testelement.property.TestElementProperty
+import org.apache.jmeter.threads.AbstractThreadGroup
+import org.apache.jmeter.threads.JMeterContextService
+import org.apache.jmeter.threads.JMeterThread
+import org.apache.jmeter.threads.JMeterThreadMonitor
+import org.apache.jmeter.threads.ListenerNotifier
+import org.apache.jmeter.threads.TestCompilerHelper
+import org.apache.jorphan.collections.ListedHashTree
+import org.slf4j.LoggerFactory
+import java.io.Serializable
+import java.lang.Thread.sleep
+import java.util.Random
+import java.util.concurrent.ConcurrentHashMap
+import java.util.concurrent.ExecutorService
+import java.util.concurrent.Executors
+import java.util.concurrent.Future
+import java.util.concurrent.TimeUnit
+import java.util.concurrent.atomic.AtomicReference
+import kotlin.math.roundToLong
+
+@GUIMenuSortOrder(1)
+class PreciseThreadGroup : AbstractThreadGroup(),
+    Serializable, Controller, JMeterThreadMonitor, TestCompilerHelper {
+    companion object {
+        private val log = LoggerFactory.getLogger(PreciseThreadGroup::class.java)
+        const val SCHEDULE = ""PreciseThreadGroup.schedule""
+        const val RANDOM_SEED = ""PreciseThreadGroup.random_seed""
+    }
+
+    private lateinit var executorService: ExecutorService
+
+    private val threadStarterFuture = AtomicReference<Future<*>?>()
+    private val activeThreads = ConcurrentHashMap<JMeterThread, Future<*>>()
+
+    var scheduleString: String
+        get() = getPropertyAsString(SCHEDULE)
+        set(value) {
+            setProperty(SCHEDULE, value)
+        }
+
+    val randomSeed: Long get() = getPropertyAsLong(RANDOM_SEED)
+
+    var randomSeedString: String
+        get() = getPropertyAsString(RANDOM_SEED)
+        set(value) {
+            setProperty(RANDOM_SEED, value)
+        }
+
+    init {
+        setProperty(TestElementProperty(MAIN_CONTROLLER, PreciseThreadGroupController()))
+    }
+
+    private class ThreadsStarter(
+        private val testStartTime: Long,
+        private val executorService: ExecutorService,
+        private val activeThreads: MutableMap<JMeterThread, Future<*>>,
+        private val gen: ThreadScheduleProcessGenerator,
+        private val jmeterThreadFactory: (threadNumber: Int) -> JMeterThread,
+    ) : Runnable {
+        override fun run() {
+            log.info(""Thread starting init"")
+            val endTime = (testStartTime + gen.totalDuration).roundToLong()
+            try {
+                var threadNumber = 0
+                while (gen.hasNext()) {
+                    val nextDelay = testStartTime + (gen.next() * 1000).roundToLong() - System.currentTimeMillis()
+                    if (nextDelay > 0) {
+                        sleep(nextDelay)
+                    }
+                    val jmeterThread = jmeterThreadFactory(threadNumber++)
+                    jmeterThread.endTime = endTime
+                    activeThreads[jmeterThread] = executorService.submit {
+                        Thread.currentThread().name = jmeterThread.threadName
+                        jmeterThread.run()
+                    }
+                }
+            } finally {
+                // No more actions will be scheduled, let awaitTermination to see the completion
+                executorService.shutdown()
+            }
+            log.info(""Thread starting done"")
+        }
+    }
+
+    override fun start(
+        threadGroupIndex: Int,
+        notifier: ListenerNotifier,
+        threadGroupTree: ListedHashTree,
+        engine: StandardJMeterEngine
+    ) {
+        try {
+            val jMeterContext = JMeterContextService.getContext()
+            val variables = jMeterContext.variables
+            val schedule = scheduleString
+            log.info(""Starting PreciseThreadGroup#{} with schedule {}"", threadGroupIndex, schedule)
+            val parsedSchedule = ThreadSchedule(schedule)
+            val seed = randomSeed
+            val rnd = if (seed == 0L) Random() else Random(seed)
+            val gen = ThreadScheduleProcessGenerator(rnd, parsedSchedule)
+            val testStartTime = JMeterContextService.getTestStartTime()
+            executorService = Executors.newCachedThreadPool()
+            val starter = ThreadsStarter(testStartTime, executorService, activeThreads, gen) { threadNumber ->
+                val clonedTree = cloneTree(threadGroupTree)
+                makeThread(engine, this, notifier, threadGroupIndex, threadNumber, clonedTree, variables)
+            }
+            threadStarterFuture.set(executorService.submit(starter))
+        } catch (e: Throwable) {
+            log.error(""Unable to start thread group"", e)
+        }
+    }
+
+
+    override fun threadFinished(thread: JMeterThread?) {
+        activeThreads.remove(thread)
+    }
+
+    override fun addNewThread(delay: Int, engine: StandardJMeterEngine?): JMeterThread {
+        TODO(""Will not be implemented"")
+    }
+
+    override fun stopThread(threadName: String?, now: Boolean): Boolean {
+        TODO(""Will not be implemented"")","[{'comment': 'What will be the impact of this ?', 'commenter': 'pmouawad'}, {'comment': 'No impact. The method is not really used, and it should not exist in the abstract thread group in the first place', 'commenter': 'vlsi'}]"
674,src/core/src/main/kotlin/org/apache/jmeter/threads/precise/ThreadScheduleProcessGenerator.kt,"@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to you under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.jmeter.threads.precise
+
+import org.apache.jmeter.threads.precise.ThreadScheduleStep.ArrivalsStep
+import org.apache.jmeter.threads.precise.ThreadScheduleStep.RateStep
+import java.util.Random
+
+internal class ThreadScheduleProcessGenerator(","[{'comment': 'Would it be possible to add some javadoc explaining this class ? ', 'commenter': 'pmouawad'}, {'comment': ""Of course, I was not sure if the class would survive, as there's a need to implement `even_arrivals` which might re-structure the classes."", 'commenter': 'vlsi'}]"
674,src/core/src/main/resources/org/apache/jmeter/resources/messages.properties,"@@ -828,6 +828,10 @@ post_body_raw=Body Data
 post_files_upload=Files Upload
 post_thread_group_title=tearDown Thread Group
 previous=Previous
+precisethreadgroup=Precise Thread Group","[{'comment': 'Rename to ""Open Model Thread Group"" ?', 'commenter': 'pmouawad'}]"
674,xdocs/usermanual/component_reference.xml,"@@ -5186,7 +5187,15 @@ Note that the throughput value should not be changed too often during a test
 </component>
 
 <component name=""Precise Throughput Timer"" index=""&sect-num;.6.5"" width=""573"" height=""407"" screenshot=""timers/precise_throughput_timer.png"">
-<description><p>This timer introduces variable pauses, calculated to keep the total throughput (e.g. in terms of samples per minute) as close as possible to a give figure. Of course the throughput will be lower if the server is not capable of handling it, or if other timers, or if there's not enough threads, or time-consuming test elements prevent it.</p>
+<description><p>This timer introduces variable pauses, calculated to keep the total throughput (e.g. in terms of samples per minute) as close as possible to a give figure. The timer does not generate threads, so the resulting throughput will be lower if the server is not capable of handling it, or if other timers add too big delays, or if there's not enough threads, or time-consuming test elements prevent it.</p>","[{'comment': 'typo: given figure', 'commenter': 'pmouawad'}]"
674,src/core/src/main/resources/org/apache/jmeter/resources/messages_fr.properties,"@@ -792,6 +792,10 @@ obsolete_test_element=Cet √©l√©ment de test est obsol√®te
 once_only_controller_title=Contr√¥leur Ex√©cution unique
 opcode=Code d'op√©ration
 open=Ouvrir...
+openmodelthreadgroup=Open Model Thread Group
+openmodelthreadgroup_random_seed=Random Seed
+openmodelthreadgroup_schedule_string=Schedule
+openmodelthreadgroup_schedule_summary=Total duration: {0}, max rate: {1} / sec","[{'comment': '@pmouawad , it would be great if you could help with the translations', 'commenter': 'vlsi'}, {'comment': ""openmodelthreadgroup=Groupe d'unit√©s en mod√®le ouvert\r\nopenmodelthreadgroup_random_seed=Sel pour la fonction al√©atoire\r\nopenmodelthreadgroup_schedule_string=Planification\r\nopenmodelthreadgroup_schedule_summary=Dur√©e totale: {0}, d√©bit max: {1} / sec"", 'commenter': 'pmouawad'}]"
699,xdocs/usermanual/realtime-results.xml,"@@ -186,10 +186,22 @@ InfluxDB data can be easily viewed in a browser through <a href=""http://grafana.
     <figure width=""1265"" height=""581"" image=""grafana_dashboard.png"">Grafana dashboard</figure>
 </subsection>
 
-<subsection name=""&sect-num;.5 Graphite"" anchor=""graphite"">
-<p>HELP WELCOME for this section, see <a href=""../building.html"" >Contributing documentation</a></p>
+<subsection name=""&sect-num;.5 Graphite Configuration"" anchor=""graphite_configuration"">
+    <p>To make JMeter send metrics to backend add a BackendListener using the GraphiteBackendListenerClient.</p>","[{'comment': 'add comma after backend', 'commenter': 'pmouawad'}]"
699,xdocs/usermanual/realtime-results.xml,"@@ -186,10 +186,22 @@ InfluxDB data can be easily viewed in a browser through <a href=""http://grafana.
     <figure width=""1265"" height=""581"" image=""grafana_dashboard.png"">Grafana dashboard</figure>
 </subsection>
 
-<subsection name=""&sect-num;.5 Graphite"" anchor=""graphite"">
-<p>HELP WELCOME for this section, see <a href=""../building.html"" >Contributing documentation</a></p>
+<subsection name=""&sect-num;.5 Graphite Configuration"" anchor=""graphite_configuration"">
+    <p>To make JMeter send metrics to backend add a BackendListener using the GraphiteBackendListenerClient.</p>
+    <p><a href=""./component_reference.html#Backend_Listener"">GraphiteBackendListenerClient</a> section will help you confiugration.</p>","[{'comment': 'will help you do the configuration', 'commenter': 'pmouawad'}]"
699,xdocs/usermanual/realtime-results.xml,"@@ -186,10 +186,22 @@ InfluxDB data can be easily viewed in a browser through <a href=""http://grafana.
     <figure width=""1265"" height=""581"" image=""grafana_dashboard.png"">Grafana dashboard</figure>
 </subsection>
 
-<subsection name=""&sect-num;.5 Graphite"" anchor=""graphite"">
-<p>HELP WELCOME for this section, see <a href=""../building.html"" >Contributing documentation</a></p>
+<subsection name=""&sect-num;.5 Graphite Configuration"" anchor=""graphite_configuration"">
+    <p>To make JMeter send metrics to backend add a BackendListener using the GraphiteBackendListenerClient.</p>
+    <p><a href=""./component_reference.html#Backend_Listener"">GraphiteBackendListenerClient</a> section will help you confiugration.</p>
+    <figure width=""902"" height=""341"" image=""backend_listener_graphite.png"">Graphite configuration</figure>
 </subsection>
 
+<subsection name=""&sect-num;.5.1 Graphite Sender"" anchor=""graphite_sendor"">","[{'comment': 'Remove ""Can use""', 'commenter': 'pmouawad'}]"
700,src/components/src/main/java/org/apache/jmeter/assertions/JSONPathAssertion.java,"@@ -164,8 +166,12 @@ private boolean arrayMatched(JSONArray value) {
     private boolean isEquals(Object subj) {
         if (isUseRegex()) {
             String str = objectToString(subj);
-            Pattern pattern = JMeterUtils.getPatternCache().getPattern(getExpectedValue());
-            return JMeterUtils.getMatcher().matches(str, pattern);
+            if (useJavaRegex) {
+                return java.util.regex.Pattern.matches(getExpectedValue(), str);
+            } else {
+                Pattern pattern = JMeterUtils.getPatternCache().getPattern(getExpectedValue());","[{'comment': 'I think we should also have a Cache for java Patterns as compilation has a performance penalty no ? \r\nCould we have a kind of factory which would give the implementation based on useJavaRegex ? ', 'commenter': 'pmouawad'}, {'comment': 'I can add a factory to JMeterUtils like the old one. We include caffeine, so a cache should be added real easy. For starting I chose not to add it, as it is more work and I wanted to have a working state first.', 'commenter': 'FSchumacher'}, {'comment': 'Added a cache with [1d30005](https://github.com/apache/jmeter/pull/700/commits/1d3000597810a7e5c379cabad00c1369002a0c1f) Now, we should use it and measure, if it is performing well :)', 'commenter': 'FSchumacher'}, {'comment': 'I have done some simple performance tests with the ResponseAssertion.\r\n95% response time/99% response time/Transactions per second for *X* number of threads.\r\n\r\n|Threads|Oro|Java (no cache)|Java (with cache)|\r\n|-----------|-----|---------------------|-----------------------|\r\n|1     |1.0/1.0/4266.62|1.0/1.0/5763.90|1.0/1.0/5722.43|\r\n|10   |1.0/5.0/12939.44|1.0/5.0/12731.02|1.0/5.0/12939.44|\r\n|100 |6.0/58.99/9862.14|6.0/77.0/11897.78|5.0/79.0/11887.85|\r\n|1000|9.0/259.0/7867.21|3.0/56.0/9773.83|4.0/36.0/10056.35|\r\n\r\nThe test was one JSR-223 Groovy Sampler generating a long text and one ResponseAssertion asserting a contains (of the last line).', 'commenter': 'FSchumacher'}, {'comment': 'Nice !', 'commenter': 'pmouawad'}]"
700,src/core/src/main/java/org/apache/jmeter/report/dashboard/ReportGenerator.java,"@@ -458,6 +458,19 @@ private ApdexSummaryConsumer createApdexSummaryConsumer() {
         return apdexSummaryConsumer;
     }
 
+    private boolean isMatching(String sampleName, String keyName) {
+        if (sampleName == null) {
+            return false;
+        }
+        if (useJavaRegex) {
+            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(keyName);","[{'comment': 'Should this be cached ? ', 'commenter': 'pmouawad'}, {'comment': 'Done', 'commenter': 'FSchumacher'}]"
700,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,"@@ -870,26 +871,42 @@ boolean filterContentType(SampleResult result) {
      * @return boolean true if Matching expression
      */
     private boolean testPattern(String expression, String sampleContentType, boolean expectedToMatch) {
-        if(expression != null && expression.length() > 0) {
-            if(log.isDebugEnabled()) {
-                log.debug(
-                        ""Testing Expression : {} on sampleContentType: {}, expected to match: {}"",
-                        expression, sampleContentType, expectedToMatch);
-            }
+        if (expression == null || expression.isEmpty()) {
+            return true;
+        }
+        if(log.isDebugEnabled()) {
+            log.debug(
+                    ""Testing Expression : {} on sampleContentType: {}, expected to match: {}"",
+                    expression, sampleContentType, expectedToMatch);
+        }
 
-            Pattern pattern = null;
-            try {
-                pattern = JMeterUtils.getPatternCache().getPattern(expression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.SINGLELINE_MASK);
-                if(JMeterUtils.getMatcher().contains(sampleContentType, pattern) != expectedToMatch) {
-                    return false;
-                }
-            } catch (MalformedCachePatternException e) {
-                log.warn(""Skipped invalid content pattern: {}"", expression, e);
+        try {
+            boolean contains;
+            if (useJavaRegex) {
+                contains = isContainedWithJavaRegex(expression, sampleContentType);
+            } else {
+                contains = isContainedWithOroRegex(expression, sampleContentType);
+            }
+            if (contains != expectedToMatch) {
+                return false;
             }
+        } catch (PatternSyntaxException | MalformedCachePatternException e) {
+            log.warn(""Skipped invalid content pattern: {}"", expression, e);
         }
         return true;
     }
 
+    private boolean isContainedWithJavaRegex(String expression, String sampleContentType) {
+        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(expression);","[{'comment': 'Should this be cached ? ', 'commenter': 'pmouawad'}, {'comment': 'Done', 'commenter': 'FSchumacher'}]"
700,src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java,"@@ -1219,6 +1276,32 @@ private int getPositionOfBody(String stringToCheck) {
     }
 
     private String getBoundaryStringFromContentType(String requestHeaders) {
+        if (useJavaRegex) {
+            return getBoundaryStringFromContentTypeWithJavaRegex(requestHeaders);
+        }
+        return getBoundaryStringFromContentTypeWithOroRegex(requestHeaders);
+    }
+
+    private String getBoundaryStringFromContentTypeWithJavaRegex(String requestHeaders) {","[{'comment': 'Would it be better to use Optional<String> as return', 'commenter': 'pmouawad'}, {'comment': 'That API is not really new. Is wise to change it in this PR? ', 'commenter': 'FSchumacher'}, {'comment': 'Nothing blocking for me', 'commenter': 'pmouawad'}]"
700,src/core/src/main/java/org/apache/jmeter/save/CSVSaveService.java,"@@ -557,6 +549,46 @@ public static SampleSaveConfiguration getSampleSaveConfiguration(
         return saveConfig;
     }
 
+    private static String extractDelimiter(String headerLine) {
+        if (useJavaRegex) {
+            return extractDelimWithJavaRegex(headerLine);
+        }
+        return extractDelimWithOroRegex(headerLine);
+    }
+
+    private static String extractDelimWithJavaRegex(String headerLine) {
+        java.util.regex.Pattern pattern = java.util.regex.Pattern
+                // This assumes the header names are all single words with no spaces
+                // word followed by 0 or more repeats of (non-word char + word)
+                // where the non-word char (\2) is the same
+                // e.g. abc|def|ghi but not abd|def~ghi
+                .compile(""\\w+((\\W)\\w+)?(\\2\\w+)*(\\2\""\\w+\"")*"" // $NON-NLS-1$","[{'comment': 'Could you please cache it into a static final field as well?', 'commenter': 'vlsi'}, {'comment': 'Yes, I can :) this escaped my grep.', 'commenter': 'FSchumacher'}]"
700,src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java,"@@ -86,6 +90,22 @@ protected boolean hasExcPattern(String text) {
     }
 
     protected String getIpAddress(String logLine) {
+        if (useJavaRegex) {
+            return getIpAddressWithJavaRegex(logLine);
+        }
+        return getIpAddressWithOroRegex(logLine);
+    }
+
+    private String getIpAddressWithJavaRegex(String logLine) {
+        java.util.regex.Pattern incIp = JMeterUtils.compilePattern(""\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"");","[{'comment': 'It should probably be cached in a static final variable rather than via an evictable cache.', 'commenter': 'vlsi'}, {'comment': 'Done (and hopefully I found all constant expressions in the new code)', 'commenter': 'FSchumacher'}]"
701,src/core/src/main/resources/org/apache/jmeter/resources/messages_zh_CN.properties,"@@ -21,22 +21,23 @@
 #
 
 # Please add new entries in alphabetical order
-about=ÂÖ≥‰∫éApache JMeter
+about=ÂÖ≥‰∫é Apache JMeter
+about_JMeter=ÂÖ≥‰∫é JMeter
 action_check_message=ÊµãËØïÂΩìÂâçÊ≠£Âú®ËøêË°åÔºåÂÅúÊ≠¢ÊàñÂÖ≥Èó≠ÊµãËØï‰ª•ÊâßË°åÊ≠§ÂëΩ‰ª§
 action_check_title=ÊµãËØïËøêË°å‰∏≠
 active_total_threads_tooltip=ËøêË°å‰∏≠Á∫øÁ®ãÊï∞/ËøêË°åÁ∫øÁ®ãÊÄªÊï∞
 add=Ê∑ªÂä†
+add_host=Ê∑ªÂä†ÈùôÊÄÅ‰∏ªÊú∫","[{'comment': 'The file should remain sorted. Please keep the original ordering.', 'commenter': 'FSchumacher'}]"
701,src/core/src/main/resources/org/apache/jmeter/resources/messages_zh_CN.properties,"@@ -427,6 +428,8 @@ headers_stored=‰ø°ÊÅØÂ§¥Â≠òÂÇ®Âú®‰ø°ÊÅØÂ§¥ÁÆ°ÁêÜÂô®‰∏≠
 heap_dump=ÂàõÂª∫‰∏Ä‰∏™Â†ÜËΩ¨ÂÇ®
 help=Â∏ÆÂä©
 help_node=Ëøô‰∏™ËäÇÁÇπÊòØ‰ªÄ‰πàÔºü
+hide JMeter=ÈöêËóè JMeter","[{'comment': ""There is no such key in JMeter (at least I didn't find it). Same for the next key `hide Others`."", 'commenter': 'FSchumacher'}]"
701,src/core/src/main/resources/org/apache/jmeter/resources/messages_zh_CN.properties,"@@ -593,6 +597,7 @@ proxy_separators=Ê∑ªÂä†ÂàÜÈöîÁ¨¶
 proxy_target=ÁõÆÊ†áÊéßÂà∂Âô®Ôºö
 proxy_title=HTTP‰ª£ÁêÜÊúçÂä°Âô®
 pt_br=Ëë°ËêÑÁâôËØ≠ÔºàÂ∑¥Ë•øÔºâ
+quit_JMeter=ÈÄÄÂá∫ JMeter","[{'comment': ""I can't find this key in JMeter, either."", 'commenter': 'FSchumacher'}]"
701,src/core/src/main/resources/org/apache/jmeter/resources/messages_zh_CN.properties,"@@ -660,8 +665,9 @@ send_file_mime_label=MIMEÁ±ªÂûãÔºö
 send_file_param_name_label=ÂèÇÊï∞ÂêçÁß∞Ôºö
 server=ÊúçÂä°Âô®ÂêçÁß∞ÊàñIPÔºö
 servername=ÊúçÂä°Âô®ÂêçÁß∞Ôºö
+services=ÊúçÂä°","[{'comment': 'No such key available in JMeter, too.', 'commenter': 'FSchumacher'}]"
701,src/core/src/main/resources/org/apache/jmeter/resources/messages_zh_CN.properties,"@@ -21,22 +21,23 @@
 #
 
 # Please add new entries in alphabetical order
-about=ÂÖ≥‰∫éApache JMeter
+about=ÂÖ≥‰∫é Apache JMeter
+about_JMeter=ÂÖ≥‰∫é JMeter","[{'comment': ""Where did you find this key? I can't find it in the sources."", 'commenter': 'FSchumacher'}]"
5717,src/components/src/main/java/org/apache/jmeter/assertions/JSONPathAssertion.java,"@@ -137,15 +137,15 @@ private void doAssert(String jsonString) {
         }
 
         if (isExpectNull()) {
-            throw new IllegalStateException(String.format(""Value expected to be null, but found '%s'"", value));
+            throw new IllegalStateException(String.format(""Value in json path '%s' expected to be null, but found '%s'"", getJsonPath(), value));","[{'comment': 'Should `value` be `objectToString(value)` like below?', 'commenter': 'vlsi'}, {'comment': 'I accepted your changes.', 'commenter': 'lehmannk'}]"
5717,src/components/src/main/java/org/apache/jmeter/assertions/JSONPathAssertion.java,"@@ -118,8 +118,8 @@ private void doAssert(String jsonString) {
             if (value instanceof JSONArray) {
                 JSONArray arrayValue = (JSONArray) value;
                 if (arrayValue.isEmpty() && !JsonPath.isPathDefinite(getJsonPath())) {
-                    throw new IllegalStateException(""JSONPath is indefinite and the extracted Value is an empty Array."" +
-                            "" Please use an assertion value, to be sure to get a correct result. "" + getExpectedValue());
+                    throw new IllegalStateException(String.format(""JSONPath '%s' is indefinite and the extracted Value is an empty Array."" +
+                            "" Please use an assertion value, to be sure to get a correct result. '%s'"", getJsonPath(), getExpectedValue()));","[{'comment': '```suggestion\r\n                            "" Please use an assertion value, to be sure to get a correct result. Expected value was \'%s\'"", getJsonPath(), getExpectedValue()));\r\n```', 'commenter': 'vlsi'}]"
