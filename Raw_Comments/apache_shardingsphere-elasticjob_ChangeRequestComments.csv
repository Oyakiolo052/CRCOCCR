Pull,Path,Diff_hunk,Comment
681,pom.xml,"@@ -521,7 +540,8 @@
                 <artifactId>maven-checkstyle-plugin</artifactId>
                 <version>${maven-checkstyle-plugin.version}</version>
                 <configuration>
-                    <configLocation>src/main/resources/dd_checks.xml</configLocation>
+                    <configLocation>src/main/resources/checkstyle_ci.xml</configLocation>
+                    <includeTestSourceDirectory>false</includeTestSourceDirectory>","[{'comment': 'Should include includeTestSourceDirectory too', 'commenter': 'terrymanu'}, {'comment': 'Ok, got it.', 'commenter': 'Leonidasz'}]"
681,pom.xml,"@@ -431,7 +432,25 @@
                     </execution>
                 </executions>
             </plugin>
-             <plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-checkstyle-plugin</artifactId>
+                <version>${maven-checkstyle-plugin.version}</version>
+                <configuration>
+                    <configLocation>src/main/resources/checkstyle_ci.xml</configLocation>
+                    <includeTestSourceDirectory>false</includeTestSourceDirectory>","[{'comment': 'Should include includeTestSourceDirectory too', 'commenter': 'terrymanu'}, {'comment': 'Ok, got it.', 'commenter': 'Leonidasz'}]"
681,pom.xml,"@@ -521,7 +540,8 @@
                 <artifactId>maven-checkstyle-plugin</artifactId>
                 <version>${maven-checkstyle-plugin.version}</version>
                 <configuration>
-                    <configLocation>src/main/resources/dd_checks.xml</configLocation>
+                    <configLocation>src/main/resources/checkstyle_ci.xml</configLocation>","[{'comment': 'For report should use `checkstyle.xml`, not `checkstyle_ci.xml`.\r\nThis pr add 2 template files of checkstyle, is it?\r\n', 'commenter': 'terrymanu'}, {'comment': 'Yes, we add 2 temlate files of checkstyle. I thought checkstyle.xml was for the IDE. I will change the setting.', 'commenter': 'Leonidasz'}]"
681,pom.xml,"@@ -263,7 +264,7 @@
             </dependency>
         </dependencies>
     </dependencyManagement>
-    
+","[{'comment': 'Should not change original code indent.\r\nPlease disable code auto formatting on code commit.\r\n', 'commenter': 'terrymanu'}, {'comment': 'Ok, got it.', 'commenter': 'Leonidasz'}]"
688,pom.xml,"@@ -93,7 +93,7 @@
                 <version>${quartz.version}</version>
                 <exclusions>
                     <exclusion>
-                        <groupId>c3p0</groupId>
+                        <groupId>com.mchange</groupId>","[{'comment': 'Can we remove c3p0 when quartz upgrade?', 'commenter': 'terrymanu'}, {'comment': ""quartz 2.3.0 has two default implementations of pooling connection provider: c3p0 and HikaryCP, so if we don't use c3p0 in ElasticJob, we can safely remove the dependency from ElasticJob pom. So quartz does have a compile dependency to c3p0, but not mendatory for runtime."", 'commenter': 'compilerduck'}, {'comment': 'The license of c3p0 is LGPL which is not friendly for Apache license, please use HikariCP instead of it', 'commenter': 'terrymanu'}, {'comment': ""I'm a bit confused. Did you mean we are using quartz persistence in ElasticJob, which can persist trigger info to db? But actually, ElasticJob doesn't use quartz persistence capability, therefore c3p0 never exist in our pom at all (by adding <exclusion> under quartz dependency node in pom.xml, as seen in above code). This means we don't need use HikariCP currently, unless we add trigger persistence feature later."", 'commenter': 'compilerduck'}, {'comment': ""Quartz 2.2.1 only provides a c3p0 implementation of pooling connection provider, without capability of customized extension. While in 2.3.0, a 'PoolingConnectionProvider' interface and two implementations (c3p0 and HicariCP) are provided, so we have choices in case we need store trigger info."", 'commenter': 'compilerduck'}, {'comment': ""No, we do not need use c3p0, and do not need persist job into database.\r\nSo we should remove c3p0's dependency.\r\nPlease use HikariCP to instead of c3p0 for license reason"", 'commenter': 'terrymanu'}]"
688,elastic-job-lite-spring/src/main/resources/META-INF/namespace/job.xsd,"@@ -38,7 +38,7 @@
                 <xsd:attribute name=""monitor-port"" type=""xsd:string"" default=""-1""/>
                 <xsd:attribute name=""max-time-diff-seconds"" type=""xsd:string"" default=""-1""/>
                 <xsd:attribute name=""failover"" type=""xsd:string"" default=""false""/>
-                <xsd:attribute name=""reconcile-interval-minutes"" type=""xsd:int"" default=""10""/>
+                <xsd:attribute name=""reconcile-interval-minutes"" type=""xsd:string"" default=""10""/>","[{'comment': ""Please use other pull request to change it. Let's make this pull request do upgrade quartz only."", 'commenter': 'terrymanu'}]"
699,elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/guarantee/GuaranteeService.java,"@@ -40,24 +40,38 @@ public GuaranteeService(final CoordinatorRegistryCenter regCenter, final String
     }
     
     /**
-     * 根据分片项注册任务开始运行.
-     * 
-     * @param shardingItems 待注册的分片项
+     * Register the start status of job with the sharding count.
+     *
+     * @param itemCount the count of items
+     * @param shardingTotalCount the total count of sharding
+     * @return the num of items which has been registered
      */
-    public void registerStart(final Collection<Integer> shardingItems) {
-        for (int each : shardingItems) {
-            jobNodeStorage.createJobNodeIfNeeded(GuaranteeNode.getStartedNode(each));
+    public int registerStart(final int itemCount, final int shardingTotalCount) {
+        int each = 0;
+        while (each++ < shardingTotalCount + 3) {","[{'comment': ""What's mean of `shardingTotalCount + 3`, what is the magic number `3`?"", 'commenter': 'terrymanu'}]"
757,elastic-job-lite-console/pom.xml,"@@ -86,6 +86,7 @@
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-assembly-plugin</artifactId>
+                <version>2.2-beta-5</version>","[{'comment': 'Can we change a stable version instead of the beta version?', 'commenter': 'terrymanu'}, {'comment': 'Add id like \\<id>console-bin\\</id> in both <execution> and assembly.xml will resolve this problem.', 'commenter': 'tuohai666'}, {'comment': ""thanks!\r\n\r\nAdd id  like <id>console-bin</id> can resolve 2.x\r\nbut 3.x have no goal assembly ,the goal should be single\r\n\r\nI have test all the version.\r\nI'm trying to use version 3. X"", 'commenter': 'DoolinMa'}, {'comment': 'You are right, the goal should be single.', 'commenter': 'tuohai666'}, {'comment': 'I have tested all the versions，change maven-assembly-plugin version to 3.3.0.\r\nbut it should be id in assembly.xml .please check.', 'commenter': 'DoolinMa'}]"
777,elastic-job-lite-console/src/main/resources/console/index.html,"@@ -121,7 +121,7 @@
         <div id=""content"" class=""lang-en"">
         </div>
         <footer class=""main-footer"">
-            <strong>Copyright &copy; 2004-2017 <a href=""http://www.dangdang.com"" data-lang=""dangdang""></a>.</strong> All rights reserved.
+            <strong>Copyright &copy; 2004-2020 <a href=""http://elaticjob.shardingsphere.apache.org"" data-lang=""apache""></a>.</strong> All rights reserved.","[{'comment': 'It should be 2018-2020', 'commenter': 'terrymanu'}]"
777,pom.xml,"@@ -655,14 +655,14 @@
             <distribution>repo</distribution>
         </license>
     </licenses>
-    
+","[{'comment': 'Please keep the original indent', 'commenter': 'terrymanu'}]"
843,elastic-job-lite-console/src/main/resources/bin/start.bat,"@@ -14,6 +14,7 @@ set PORT=%1
 set CFG_DIR=%~dp0%..
 set CLASSPATH=%CFG_DIR%
 set CLASSPATH=%~dp0..\lib\*;%CLASSPATH%
+set CLASSPATH=$~dp0..\ext-lib\*;%CLASSPATH%","[{'comment': 'How about merge `\\lib\\` and `\\ext-lib\\` in same line?', 'commenter': 'terrymanu'}, {'comment': 'Ok.', 'commenter': 'TeslaCN'}]"
843,elastic-job-lite-console/src/main/resources/bin/start.sh,"@@ -29,6 +29,7 @@ cd `dirname $0`
 cd ..
 DEPLOY_DIR=`pwd`
 LIB_DIR=${DEPLOY_DIR}/lib/*
+LIB_DIR=${LIB_DIR}:${DEPLOY_DIR}/ext-lib/*","[{'comment': 'How about merge \\lib\\ and \\ext-lib\\ in same line?', 'commenter': 'terrymanu'}]"
864,pom.xml,"@@ -43,17 +43,17 @@
         <maven.version.range>[3.0.4,)</maven.version.range>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <project.build.locale>zh_CN</project.build.locale>
-
-        <springframework.version>[3.1.0.RELEASE,5.0.0.M1)</springframework.version>
-
+        
+        <springframework.version>[3.1.0.RELEASE,5.2.7.RELEASE]</springframework.version>","[{'comment': 'If spring framework upgrade to new version, we still need to modify here,\r\ncan we keep the upper boundary open?', 'commenter': 'terrymanu'}, {'comment': ""I get it, how do you think '<springframework.version>[3.1.0.RELEASE,)</springframework.version>' ?"", 'commenter': 'Mark-WJQ'}, {'comment': 'Great', 'commenter': 'terrymanu'}]"
873,elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/domain/TaskResultStatistics.java,"@@ -0,0 +1,73 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.console.domain;
+
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+/**
+ * Task result statistics.
+ */
+@Getter
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+@Table(name = ""TASK_RESULT_STATISTICS"")","[{'comment': 'TASK_RESULT_STATISTICS  in the original project shuld be three tables task_result_statistics_minute,task_result_statistics_hour,task_result_statistics_day, now it merge to one?', 'commenter': 'Mark-WJQ'}]"
933,elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/dto/request/FindJobExecutionEventsRequest.java,"@@ -55,8 +55,8 @@
      * @param pageSize page size
      */
     public FindJobExecutionEventsRequest(final Integer pageSize, final Integer pageNumber) {
-        this.pageSize = pageSize;
-        this.pageNumber = pageNumber;
+        setPageSize(pageSize);","[{'comment': 'Please just use this.xxx to assign regular fields', 'commenter': 'terrymanu'}, {'comment': 'done', 'commenter': 'taojintianxia'}]"
933,examples/elastic-job-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java,"@@ -55,7 +55,7 @@
     private static final String EVENT_RDB_STORAGE_USERNAME = ""sa"";
     
     private static final String EVENT_RDB_STORAGE_PASSWORD = """";
-    
+","[{'comment': 'Please do not change original indent', 'commenter': 'terrymanu'}, {'comment': 'done', 'commenter': 'taojintianxia'}]"
933,elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/dto/request/FindJobStatusTraceEventsRequest.java,"@@ -52,15 +52,11 @@
     private Date end;
     
     public FindJobStatusTraceEventsRequest(final Integer pageSize, final Integer pageNumber) {
-        this.pageSize = pageSize;
-        this.pageNumber = pageNumber;
+        super(pageSize, pageNumber, null, null);
     }
-    
+","[{'comment': 'Please do not change original indent', 'commenter': 'terrymanu'}, {'comment': 'done', 'commenter': 'taojintianxia'}]"
1043,elasticjob-cloud/elasticjob-cloud-executor/src/main/java/org/apache/shardingsphere/elasticjob/cloud/executor/DaemonTaskScheduler.java,"@@ -156,10 +156,27 @@ public static void shutdown(final Protos.TaskID taskID) {
         
         @Setter
         private ExecutorDriver executorDriver;
-    
+        
         @Setter
         private Protos.TaskID taskId;
         
+        private ElasticJobExecutor jobExecutor;
+        
+        private ElasticJobExecutor getJobExecutor() {
+            if (null == jobExecutor) {","[{'comment': 'It is necessary to consider about thread safe', 'commenter': 'terrymanu'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -45,42 +52,93 @@ public static String getIp() {
         if (null != cachedIpAddress) {
             return cachedIpAddress;
         }
-        Enumeration<NetworkInterface> netInterfaces;
+        NetworkInterface networkInterface = findNetworkInterface();
+        if (networkInterface != null) {","[{'comment': 'We prefer use `null != xxx`', 'commenter': 'terrymanu'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -45,42 +52,93 @@ public static String getIp() {
         if (null != cachedIpAddress) {
             return cachedIpAddress;
         }
-        Enumeration<NetworkInterface> netInterfaces;
+        NetworkInterface networkInterface = findNetworkInterface();
+        if (networkInterface != null) {
+            Enumeration<InetAddress> ipAddresses = networkInterface.getInetAddresses();
+            while (ipAddresses.hasMoreElements()) {
+                InetAddress ipAddress = ipAddresses.nextElement();
+                if (isValidAddress(ipAddress)) {
+                    cachedIpAddress = ipAddress.getHostAddress();
+                    return cachedIpAddress;
+                }
+            }
+        }
+        return null;
+    }
+    
+    private static NetworkInterface findNetworkInterface() {
+        Enumeration<NetworkInterface> interfaces;
         try {
-            netInterfaces = NetworkInterface.getNetworkInterfaces();
+            interfaces = NetworkInterface.getNetworkInterfaces();
         } catch (final SocketException ex) {
             throw new HostException(ex);
         }
-        String localIpAddress = null;
-        while (netInterfaces.hasMoreElements()) {
-            NetworkInterface netInterface = netInterfaces.nextElement();
-            Enumeration<InetAddress> ipAddresses = netInterface.getInetAddresses();
-            while (ipAddresses.hasMoreElements()) {
-                InetAddress ipAddress = ipAddresses.nextElement();
-                if (isPublicIpAddress(ipAddress)) {
-                    String publicIpAddress = ipAddress.getHostAddress();
-                    cachedIpAddress = publicIpAddress;
-                    return publicIpAddress;
-                }
-                if (isLocalIpAddress(ipAddress)) {
-                    localIpAddress = ipAddress.getHostAddress();
+        List<NetworkInterface> validNetworkInterfaces = new LinkedList<>();
+        while (interfaces.hasMoreElements()) {
+            NetworkInterface networkInterface = interfaces.nextElement();
+            if (ignoreNetworkInterface(networkInterface)) {
+                continue;
+            }
+            validNetworkInterfaces.add(networkInterface);
+        }
+        NetworkInterface networkInterface = null;
+        for (NetworkInterface item : validNetworkInterfaces) {
+            if (isPreferredNetworkInterface(item)) {
+                networkInterface = item;
+                break;
+            }
+        }
+        if (networkInterface == null) {
+            networkInterface = getFirstNetworkInterface(validNetworkInterfaces);
+        }
+        return networkInterface;","[{'comment': 'We prefer use `result` to name the result variable', 'commenter': 'terrymanu'}, {'comment': 'execuse me ! i network first position is llw0 ,but default network device is en0.so elastic-job can\'t find ipaddress.\r\n\r\n```\r\n""validNetworkInterfaces"":[""llw0"",""awdl0"",""en5"",""en0""]\r\n```', 'commenter': 'Unknown'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -45,42 +52,93 @@ public static String getIp() {
         if (null != cachedIpAddress) {
             return cachedIpAddress;
         }
-        Enumeration<NetworkInterface> netInterfaces;
+        NetworkInterface networkInterface = findNetworkInterface();
+        if (networkInterface != null) {
+            Enumeration<InetAddress> ipAddresses = networkInterface.getInetAddresses();
+            while (ipAddresses.hasMoreElements()) {
+                InetAddress ipAddress = ipAddresses.nextElement();
+                if (isValidAddress(ipAddress)) {
+                    cachedIpAddress = ipAddress.getHostAddress();
+                    return cachedIpAddress;
+                }
+            }
+        }
+        return null;
+    }
+    
+    private static NetworkInterface findNetworkInterface() {
+        Enumeration<NetworkInterface> interfaces;
         try {
-            netInterfaces = NetworkInterface.getNetworkInterfaces();
+            interfaces = NetworkInterface.getNetworkInterfaces();
         } catch (final SocketException ex) {
             throw new HostException(ex);
         }
-        String localIpAddress = null;
-        while (netInterfaces.hasMoreElements()) {
-            NetworkInterface netInterface = netInterfaces.nextElement();
-            Enumeration<InetAddress> ipAddresses = netInterface.getInetAddresses();
-            while (ipAddresses.hasMoreElements()) {
-                InetAddress ipAddress = ipAddresses.nextElement();
-                if (isPublicIpAddress(ipAddress)) {
-                    String publicIpAddress = ipAddress.getHostAddress();
-                    cachedIpAddress = publicIpAddress;
-                    return publicIpAddress;
-                }
-                if (isLocalIpAddress(ipAddress)) {
-                    localIpAddress = ipAddress.getHostAddress();
+        List<NetworkInterface> validNetworkInterfaces = new LinkedList<>();
+        while (interfaces.hasMoreElements()) {
+            NetworkInterface networkInterface = interfaces.nextElement();
+            if (ignoreNetworkInterface(networkInterface)) {
+                continue;
+            }
+            validNetworkInterfaces.add(networkInterface);
+        }
+        NetworkInterface networkInterface = null;
+        for (NetworkInterface item : validNetworkInterfaces) {","[{'comment': 'We prefer use `each` to name the loop variable', 'commenter': 'terrymanu'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -45,42 +52,93 @@ public static String getIp() {
         if (null != cachedIpAddress) {
             return cachedIpAddress;
         }
-        Enumeration<NetworkInterface> netInterfaces;
+        NetworkInterface networkInterface = findNetworkInterface();
+        if (networkInterface != null) {
+            Enumeration<InetAddress> ipAddresses = networkInterface.getInetAddresses();
+            while (ipAddresses.hasMoreElements()) {
+                InetAddress ipAddress = ipAddresses.nextElement();
+                if (isValidAddress(ipAddress)) {
+                    cachedIpAddress = ipAddress.getHostAddress();
+                    return cachedIpAddress;
+                }
+            }
+        }
+        return null;
+    }
+    
+    private static NetworkInterface findNetworkInterface() {
+        Enumeration<NetworkInterface> interfaces;
         try {
-            netInterfaces = NetworkInterface.getNetworkInterfaces();
+            interfaces = NetworkInterface.getNetworkInterfaces();
         } catch (final SocketException ex) {
             throw new HostException(ex);
         }
-        String localIpAddress = null;
-        while (netInterfaces.hasMoreElements()) {
-            NetworkInterface netInterface = netInterfaces.nextElement();
-            Enumeration<InetAddress> ipAddresses = netInterface.getInetAddresses();
-            while (ipAddresses.hasMoreElements()) {
-                InetAddress ipAddress = ipAddresses.nextElement();
-                if (isPublicIpAddress(ipAddress)) {
-                    String publicIpAddress = ipAddress.getHostAddress();
-                    cachedIpAddress = publicIpAddress;
-                    return publicIpAddress;
-                }
-                if (isLocalIpAddress(ipAddress)) {
-                    localIpAddress = ipAddress.getHostAddress();
+        List<NetworkInterface> validNetworkInterfaces = new LinkedList<>();
+        while (interfaces.hasMoreElements()) {
+            NetworkInterface networkInterface = interfaces.nextElement();
+            if (ignoreNetworkInterface(networkInterface)) {
+                continue;
+            }
+            validNetworkInterfaces.add(networkInterface);
+        }
+        NetworkInterface networkInterface = null;
+        for (NetworkInterface item : validNetworkInterfaces) {
+            if (isPreferredNetworkInterface(item)) {
+                networkInterface = item;
+                break;
+            }
+        }
+        if (networkInterface == null) {
+            networkInterface = getFirstNetworkInterface(validNetworkInterfaces);
+        }
+        return networkInterface;
+    }
+    
+    private static NetworkInterface getFirstNetworkInterface(final List<NetworkInterface> validNetworkInterfaces) {
+        NetworkInterface result = null;
+        for (NetworkInterface item : validNetworkInterfaces) {
+            Enumeration<InetAddress> addresses = item.getInetAddresses();
+            while (addresses.hasMoreElements()) {
+                InetAddress inetAddress = addresses.nextElement();
+                if (isValidAddress(inetAddress)) {
+                    result = item;
+                    break;
                 }
             }
         }
-        cachedIpAddress = localIpAddress;
-        return localIpAddress;
+        if (result == null && validNetworkInterfaces.size() > 0) {","[{'comment': 'It is better to use `!validNetworkInterfaces.isEmpty()` instead of `validNetworkInterfaces.size() > 0`', 'commenter': 'terrymanu'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -45,42 +52,93 @@ public static String getIp() {
         if (null != cachedIpAddress) {
             return cachedIpAddress;
         }
-        Enumeration<NetworkInterface> netInterfaces;
+        NetworkInterface networkInterface = findNetworkInterface();
+        if (networkInterface != null) {
+            Enumeration<InetAddress> ipAddresses = networkInterface.getInetAddresses();
+            while (ipAddresses.hasMoreElements()) {
+                InetAddress ipAddress = ipAddresses.nextElement();
+                if (isValidAddress(ipAddress)) {
+                    cachedIpAddress = ipAddress.getHostAddress();
+                    return cachedIpAddress;
+                }
+            }
+        }
+        return null;
+    }
+    
+    private static NetworkInterface findNetworkInterface() {
+        Enumeration<NetworkInterface> interfaces;
         try {
-            netInterfaces = NetworkInterface.getNetworkInterfaces();
+            interfaces = NetworkInterface.getNetworkInterfaces();
         } catch (final SocketException ex) {
             throw new HostException(ex);
         }
-        String localIpAddress = null;
-        while (netInterfaces.hasMoreElements()) {
-            NetworkInterface netInterface = netInterfaces.nextElement();
-            Enumeration<InetAddress> ipAddresses = netInterface.getInetAddresses();
-            while (ipAddresses.hasMoreElements()) {
-                InetAddress ipAddress = ipAddresses.nextElement();
-                if (isPublicIpAddress(ipAddress)) {
-                    String publicIpAddress = ipAddress.getHostAddress();
-                    cachedIpAddress = publicIpAddress;
-                    return publicIpAddress;
-                }
-                if (isLocalIpAddress(ipAddress)) {
-                    localIpAddress = ipAddress.getHostAddress();
+        List<NetworkInterface> validNetworkInterfaces = new LinkedList<>();
+        while (interfaces.hasMoreElements()) {
+            NetworkInterface networkInterface = interfaces.nextElement();
+            if (ignoreNetworkInterface(networkInterface)) {
+                continue;
+            }
+            validNetworkInterfaces.add(networkInterface);
+        }
+        NetworkInterface networkInterface = null;
+        for (NetworkInterface item : validNetworkInterfaces) {
+            if (isPreferredNetworkInterface(item)) {
+                networkInterface = item;
+                break;
+            }
+        }
+        if (networkInterface == null) {
+            networkInterface = getFirstNetworkInterface(validNetworkInterfaces);
+        }
+        return networkInterface;
+    }
+    
+    private static NetworkInterface getFirstNetworkInterface(final List<NetworkInterface> validNetworkInterfaces) {
+        NetworkInterface result = null;
+        for (NetworkInterface item : validNetworkInterfaces) {
+            Enumeration<InetAddress> addresses = item.getInetAddresses();
+            while (addresses.hasMoreElements()) {
+                InetAddress inetAddress = addresses.nextElement();
+                if (isValidAddress(inetAddress)) {
+                    result = item;
+                    break;
                 }
             }
         }
-        cachedIpAddress = localIpAddress;
-        return localIpAddress;
+        if (result == null && validNetworkInterfaces.size() > 0) {
+            result = validNetworkInterfaces.get(0);
+        }
+        return result;
     }
     
-    private static boolean isPublicIpAddress(final InetAddress ipAddress) {
-        return !ipAddress.isSiteLocalAddress() && !ipAddress.isLoopbackAddress() && !isV6IpAddress(ipAddress);
+    private static boolean isPreferredNetworkInterface(final NetworkInterface networkInterface) {
+        String preferredNetworkInterface = System.getProperty(PREFERRED_NETWORK_INTERFACE);
+        return Objects.equals(networkInterface.getDisplayName(), preferredNetworkInterface);
     }
     
-    private static boolean isLocalIpAddress(final InetAddress ipAddress) {
-        return ipAddress.isSiteLocalAddress() && !ipAddress.isLoopbackAddress() && !isV6IpAddress(ipAddress);
+    private static boolean ignoreNetworkInterface(final NetworkInterface networkInterface) {
+        try {
+            return networkInterface == null
+                    || networkInterface.isLoopback()
+                    || networkInterface.isVirtual()
+                    || !networkInterface.isUp();
+        } catch (SocketException e) {","[{'comment': 'Please add final for exception, and rename `e` to `ex`', 'commenter': 'terrymanu'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -45,42 +52,93 @@ public static String getIp() {
         if (null != cachedIpAddress) {
             return cachedIpAddress;
         }","[{'comment': 'Do you need to consider thread safety here?', 'commenter': 'viviel'}, {'comment': 'No need to do it , I think.  ', 'commenter': 'Technoboy-'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -45,42 +52,93 @@ public static String getIp() {
         if (null != cachedIpAddress) {
             return cachedIpAddress;
         }
-        Enumeration<NetworkInterface> netInterfaces;
+        NetworkInterface networkInterface = findNetworkInterface();
+        if (null != networkInterface) {
+            Enumeration<InetAddress> ipAddresses = networkInterface.getInetAddresses();
+            while (ipAddresses.hasMoreElements()) {
+                InetAddress ipAddress = ipAddresses.nextElement();
+                if (isValidAddress(ipAddress)) {
+                    cachedIpAddress = ipAddress.getHostAddress();
+                    return cachedIpAddress;
+                }
+            }
+        }
+        return null;
+    }
+    
+    private static NetworkInterface findNetworkInterface() {
+        Enumeration<NetworkInterface> interfaces;
         try {
-            netInterfaces = NetworkInterface.getNetworkInterfaces();
+            interfaces = NetworkInterface.getNetworkInterfaces();
         } catch (final SocketException ex) {
             throw new HostException(ex);
         }
-        String localIpAddress = null;
-        while (netInterfaces.hasMoreElements()) {
-            NetworkInterface netInterface = netInterfaces.nextElement();
-            Enumeration<InetAddress> ipAddresses = netInterface.getInetAddresses();
-            while (ipAddresses.hasMoreElements()) {
-                InetAddress ipAddress = ipAddresses.nextElement();
-                if (isPublicIpAddress(ipAddress)) {
-                    String publicIpAddress = ipAddress.getHostAddress();
-                    cachedIpAddress = publicIpAddress;
-                    return publicIpAddress;
-                }
-                if (isLocalIpAddress(ipAddress)) {
-                    localIpAddress = ipAddress.getHostAddress();
+        List<NetworkInterface> validNetworkInterfaces = new LinkedList<>();
+        while (interfaces.hasMoreElements()) {
+            NetworkInterface networkInterface = interfaces.nextElement();
+            if (ignoreNetworkInterface(networkInterface)) {
+                continue;
+            }
+            validNetworkInterfaces.add(networkInterface);
+        }
+        NetworkInterface result = null;
+        for (NetworkInterface item : validNetworkInterfaces) {
+            if (isPreferredNetworkInterface(item)) {
+                result = item;
+                break;
+            }
+        }
+        if (null == result) {
+            result = getFirstNetworkInterface(validNetworkInterfaces);
+        }
+        return result;
+    }
+    
+    private static NetworkInterface getFirstNetworkInterface(final List<NetworkInterface> validNetworkInterfaces) {
+        NetworkInterface result = null;
+        for (NetworkInterface item : validNetworkInterfaces) {","[{'comment': 'The temporary variables‘ name `item`, should be `each` for the List loop.', 'commenter': 'dongzl'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -34,6 +39,8 @@
     
     public static final String IP_REGEX = ""((\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])(\\.(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)){3})"";
     
+    public static final String PREFERRED_NETWORK_INTERFACE = ""elasticjob.preferred.network.interface"";","[{'comment': 'why the `PREFERRED_NETWORK_INTERFACE ` is public?  maybe `private`?', 'commenter': 'dongzl'}]"
1069,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -45,42 +52,93 @@ public static String getIp() {
         if (null != cachedIpAddress) {
             return cachedIpAddress;
         }
-        Enumeration<NetworkInterface> netInterfaces;
+        NetworkInterface networkInterface = findNetworkInterface();
+        if (null != networkInterface) {
+            Enumeration<InetAddress> ipAddresses = networkInterface.getInetAddresses();
+            while (ipAddresses.hasMoreElements()) {
+                InetAddress ipAddress = ipAddresses.nextElement();
+                if (isValidAddress(ipAddress)) {
+                    cachedIpAddress = ipAddress.getHostAddress();
+                    return cachedIpAddress;
+                }
+            }
+        }
+        return null;","[{'comment': 'method **findNetworkInterface()** never return null. and if there is no valid ipAddress in the networkInterface,this mehod  **getIp()**  will return null. my confusing is : should return null when there is no valid ipAddress?', 'commenter': 'mmx1960'}, {'comment': 'Thanks', 'commenter': 'Technoboy-'}]"
1077,elasticjob-lite/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/boot/ElasticJobLiteAutoConfiguration.java,"@@ -50,9 +50,9 @@
 @EnableConfigurationProperties(ElasticJobProperties.class)
 @Setter
 public class ElasticJobLiteAutoConfiguration implements ApplicationContextAware {
-    
+","[{'comment': 'Please keep the white space.', 'commenter': 'dongzl'}]"
1077,elasticjob-lite/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/boot/ElasticJobLiteAutoConfiguration.java,"@@ -50,9 +50,9 @@
 @EnableConfigurationProperties(ElasticJobProperties.class)
 @Setter
 public class ElasticJobLiteAutoConfiguration implements ApplicationContextAware {
-    
+
     private ApplicationContext applicationContext;
-    
+","[{'comment': 'Please keep the white space.', 'commenter': 'dongzl'}]"
1077,elasticjob-lite/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/boot/ElasticJobLiteAutoConfiguration.java,"@@ -68,7 +68,7 @@ public void createJobBootstrapBeans() throws ClassNotFoundException {
         registerClassedJobs(elasticJobProperties, beanFactory, registryCenter, tracingConfiguration);
         registerTypedJobs(elasticJobProperties, beanFactory, registryCenter, tracingConfiguration);
     }
-    ","[{'comment': 'The same to above.', 'commenter': 'dongzl'}]"
1077,elasticjob-lite/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/boot/ElasticJobLiteAutoConfiguration.java,"@@ -81,7 +81,7 @@ private TracingConfiguration getTracingConfiguration() {
                 ""More than one [org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration] beans found. ""
                         + ""Consider disabling [org.apache.shardingsphere.elasticjob.tracing.boot.ElasticjobTracingAutoConfiguration]."");
     }
-    
+","[{'comment': 'The same to above.', 'commenter': 'dongzl'}]"
1077,elasticjob-lite/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/boot/ElasticJobLiteAutoConfiguration.java,"@@ -97,8 +97,8 @@ private void registerClassedJobs(final ElasticJobProperties elasticJobProperties
             }
         }
     }
-    
-    private void registerTypedJobs(final ElasticJobProperties elasticJobProperties, final SingletonBeanRegistry beanFactory, 
+","[{'comment': 'The same to above.', 'commenter': 'dongzl'}, {'comment': 'I had fixed', 'commenter': 'zhaoyuguang'}]"
1082,elasticjob-cloud/elasticjob-cloud-scheduler/pom.xml,"@@ -142,12 +142,21 @@
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>bin/*</exclude>
-                   <exclude>conf/*</exclude>
                    <exclude>assembly/*</exclude>
                </excludes>
             </resource>
         </resources>
         <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-jar-plugin</artifactId>
+                <version>2.3.2</version>","[{'comment': 'Please use dependency management to manage version', 'commenter': 'terrymanu'}, {'comment': 'Ok', 'commenter': 'rudy2steiner'}]"
1101,docs/content/powered-by/_index.en.md,"@@ -16,76 +16,76 @@ Please register [here](https://github.com/apache/shardingsphere-elasticjob/issue
 The list here will be shown according to the registration date.
 
 <ol>
-    <li><a href=""http://www.dangdang.com/"" rel=""nofollow"">当当</a></li>
-    <li><a href=""http://www.ziroom.com/"" rel=""nofollow"">自如网</a></li>
-    <li><a href=""https://www.joyowo.com/"" rel=""nofollow"">金柚网</a></li>
-    <li><a href=""http://www.yaolaivip.com/"" rel=""nofollow"">耀莱在线</a></li>
-    <li><a href=""https://www.laocaibao.com/"" rel=""nofollow"">捞财宝</a></li>
-    <li><a href=""http://www.xiu.com/"" rel=""nofollow"">走秀网</a></li>
-    <li><a href=""http://www.b5cai.com/"" rel=""nofollow"">帮5采</a></li>
-    <li><a href=""https://auto.ifeng.com/"" rel=""nofollow"">凤凰汽车</a></li>
-    <li><a href=""https://www.01zhuanche.com/"" rel=""nofollow"">首汽约车</a></li>
-    <li><a href=""https://www.chunbo.com/"" rel=""nofollow"">春播</a></li>
-    <li><a href=""http://www.yunyichina.cn/"" rel=""nofollow"">云医科技</a></li>
-    <li><a href=""https://www.treebear.cn/"" rel=""nofollow"">树熊网络</a></li>
-    <li><a href=""http://www.yto.net.cn/"" rel=""nofollow"">圆通速递</a></li>
-    <li><a href=""http://www.duiba.com.cn"" rel=""nofollow"">兑吧</a></li>
-    <li><a href=""https://www.ucommune.com/"" rel=""nofollow"">优客工场</a></li>
-    <li><a href=""https://www.gizwits.com/"" rel=""nofollow"">机智云</a></li>
-    <li><a href=""https://www.cnhnb.com/"" rel=""nofollow"">惠农网</a></li>
-    <li><a href=""https://www.caocaokeji.cn/"" rel=""nofollow"">曹操出行</a></li>
-    <li><a href=""https://www.ppdai.com/"" rel=""nofollow"">拍拍贷</a></li>
-    <li><a href=""https://www.dazong.com/"" rel=""nofollow"">飞马大宗</a></li>
-    <li><a href=""https://www.ysepay.com/"" rel=""nofollow"">银盛支付</a></li>
-    <li><a href=""http://bj.fangjia.com/"" rel=""nofollow"">房价网</a></li>
+    <li><a href=""http://www.dangdang.com/"" rel=""nofollow"">DangDang</a></li>
+    <li><a href=""http://www.ziroom.com/"" rel=""nofollow"">ZIroom</a></li>
+    <li><a href=""https://www.joyowo.com/"" rel=""nofollow"">Joyowo</a></li>
+    <li><a href=""http://www.yaolaivip.com/"" rel=""nofollow"">SR online</a></li>
+    <li><a href=""https://www.laocaibao.com/"" rel=""nofollow"">LaoCaiBao</a></li>
+    <li><a href=""http://www.xiu.com/"" rel=""nofollow"">Xiu</a></li>
+    <li><a href=""http://www.b5cai.com/"" rel=""nofollow"">GShopper</a></li>
+    <li><a href=""https://auto.ifeng.com/"" rel=""nofollow"">IFeng</a></li>
+    <li><a href=""https://www.01zhuanche.com/"" rel=""nofollow"">ShouQi</a></li>
+    <li><a href=""https://www.chunbo.com/"" rel=""nofollow"">ChunBo</a></li>
+    <li><a href=""http://www.yunyichina.cn/"" rel=""nofollow"">Glory</a></li>
+    <li><a href=""https://www.treebear.cn/"" rel=""nofollow"">Tree Bear</a></li>
+    <li><a href=""http://www.yto.net.cn/"" rel=""nofollow"">YR Express</a></li>
+    <li><a href=""http://www.duiba.com.cn"" rel=""nofollow"">DuiBa Group</a></li>
+    <li><a href=""https://www.ucommune.com/"" rel=""nofollow"">UCommune</a></li>
+    <li><a href=""https://www.gizwits.com/"" rel=""nofollow"">Gizwits</a></li>
+    <li><a href=""https://www.cnhnb.com/"" rel=""nofollow"">HuiNong</a></li>
+    <li><a href=""https://www.caocaokeji.cn/"" rel=""nofollow"">CaoCao</a></li>
+    <li><a href=""https://www.ppdai.com/"" rel=""nofollow"">ppdai</a></li>
+    <li><a href=""https://www.dazong.com/"" rel=""nofollow"">DaZong</a></li>
+    <li><a href=""https://www.ysepay.com/"" rel=""nofollow"">YinSheng E-Pay</a></li>
+    <li><a href=""http://bj.fangjia.com/"" rel=""nofollow"">FangJia</a></li>
     <li><a href=""https://cn.yeahmobi.com/"" rel=""nofollow"">Yeahmobi</a></li>
-    <li><a href=""http://www.cig.com.cn/"" rel=""nofollow"">新意互动</a></li>
-    <li><a href=""https://www.tuhu.cn/"" rel=""nofollow"">途虎养车</a></li>
-    <li><a href=""http://www.3songshu.com/"" rel=""nofollow"">三只松鼠</a></li>
-    <li><a href=""https://www.taoguba.com.cn/"" rel=""nofollow"">淘股吧</a></li>
-    <li><a href=""http://www.bessky.cn/"" rel=""nofollow"">宝视佳</a></li>
-    <li><a href=""https://thinkiot.lenovo.com/"" rel=""nofollow"">联想懂的通信</a></li>
-    <li><a href=""https://www.yunyangtao.com/"" rel=""nofollow"">洋桃跨境供应链</a></li>
-    <li><a href=""https://www.ibeiliao.com/"" rel=""nofollow"">贝聊科技</a></li>
-    <li><a href=""https://www.120yibao.com/"" rel=""nofollow"">壹宝健康</a></li>
-    <li><a href=""https://www.sytown.cn/"" rel=""nofollow"">尚一健康</a></li>
-    <li><a href=""https://www.kaniu.com/"" rel=""nofollow"">卡牛信用管家</a></li>
-    <li><a href=""http://www.haoyunhu56.com/"" rel=""nofollow"">好运虎物流</a></li>
-    <li><a href=""http://www.dekuncn.com/"" rel=""nofollow"">德坤物流</a></li>
-    <li><a href=""http://www.neoway.com/"" rel=""nofollow"">有方科技</a></li>
-    <li><a href=""https://www.ultrapower.com.cn/"" rel=""nofollow"">神州泰岳</a></li>
-    <li><a href=""https://www.hh.global/"" rel=""nofollow"">健合集团</a></li>
-    <li><a href=""http://www.leimingtech.com/"" rel=""nofollow"">雷铭科技</a></li>
-    <li><a href=""https://www.itrip.com/"" rel=""nofollow"">iTrip爱去</a></li>
-    <li><a href=""https://www.oneplus.com/cn"" rel=""nofollow"">一加科技</a></li>
-    <li><a href=""https://www.zhongan.com/"" rel=""nofollow"">众安保险</a></li>
-    <li><a href=""http://www.iqihang.com/"" rel=""nofollow"">爱启航</a></li>
-    <li><a href=""https://www.dg-mall.com/"" rel=""nofollow"">点购集团</a></li>
-    <li><a href=""http://www.jiedaibao.com/"" rel=""nofollow"">借贷宝</a></li>
-    <li><a href=""https://www.fanhaoyue.com/"" rel=""nofollow"">饭好约</a></li>
-    <li><a href=""http://www.jchl.com/"" rel=""nofollow"">金财互联</a></li>
-    <li><a href=""https://www.jinhui365.com/"" rel=""nofollow"">金汇金融</a></li>
-    <li><a href=""https://www.zyzc8.com/"" rel=""nofollow"">众畅网络科技</a></li>
-    <li><a href=""https://www.maihaoche.com/"" rel=""nofollow"">卖好车</a></li>
-    <li><a href=""https://g.10086.cn/"" rel=""nofollow"">咪咕互娱</a></li>
-    <li><a href=""http://www.deepdraw.cn/"" rel=""nofollow"">深绘智能</a></li>
-    <li><a href=""http://www.gdyuanpeng.com/"" rel=""nofollow"">沅朋物联</a></li>
-    <li><a href=""https://nexposter.com/"" rel=""nofollow"">晶泓科技</a></li>
-    <li><a href=""https://www.lianlianpay.com/"" rel=""nofollow"">连连支付</a></li>
-    <li><a href=""https://www.haizol.com/"" rel=""nofollow"">海智在线</a></li>
-    <li><a href=""http://www.yunjiacloud.com/"" rel=""nofollow"">云嘉云计算</a></li>
-    <li><a href=""https://www.g7.com.cn/"" rel=""nofollow"">汇通天下</a></li>
-    <li><a href=""https://www.meizu.com/"" rel=""nofollow"">魅族</a></li>
-    <li><a href=""http://www.juneyaoair.com/"" rel=""nofollow"">吉祥航空</a></li>
-    <li><a href=""http://www.wxsbank.com/"" rel=""nofollow"">无锡锡商银行</a></li>
-    <li><a href=""http://changemax.cn/"" rel=""nofollow"">松鼠白菜</a></li>
-    <li><a href=""https://willclass.com/"" rel=""nofollow"">会通教育</a></li>
-    <li><a href=""https://www.homedo.com/"" rel=""nofollow"">河姆渡</a></li>
-    <li><a href=""http://www.eavic.com/"" rel=""nofollow"">中航电子采购平台</a></li>
-    <li><a href=""https://www.motie.com/"" rel=""nofollow"">磨铁文学</a></li>
-    <li><a href=""https://www.ttpai.cn/"" rel=""nofollow"">天天拍车</a></li>
-    <li><a href=""https://www.bestpay.com.cn/"" rel=""nofollow"">甜橙金融(翼支付)</a></li>
-    <li><a href=""http://www.thinktown.com/"" rel=""nofollow"">新课堂教育</a></li>
+    <li><a href=""http://www.cig.com.cn/"" rel=""nofollow"">Cig</a></li>
+    <li><a href=""https://www.tuhu.cn/"" rel=""nofollow"">Tuhu</a></li>
+    <li><a href=""http://www.3songshu.com/"" rel=""nofollow"">Three Squirrels</a></li>
+    <li><a href=""https://www.taoguba.com.cn/"" rel=""nofollow"">Taoguba</a></li>
+    <li><a href=""http://www.bessky.cn/"" rel=""nofollow"">BESSKY</a></li>
+    <li><a href=""https://thinkiot.lenovo.com/"" rel=""nofollow"">Lenovo</a></li>
+    <li><a href=""https://www.yunyangtao.com/"" rel=""nofollow"">YangSC</a></li>
+    <li><a href=""https://www.ibeiliao.com/"" rel=""nofollow"">IBeiLiao</a></li>
+    <li><a href=""https://www.120yibao.com/"" rel=""nofollow"">YIBAO</a></li>
+    <li><a href=""https://www.sytown.cn/"" rel=""nofollow"">SYTown</a></li>
+    <li><a href=""https://www.kaniu.com/"" rel=""nofollow"">NiuCard</a></li>
+    <li><a href=""http://www.haoyunhu56.com/"" rel=""nofollow"">HaoYunHu</a></li>
+    <li><a href=""http://www.dekuncn.com/"" rel=""nofollow"">DeKun</a></li>
+    <li><a href=""http://www.neoway.com/"" rel=""nofollow"">Neoway</a></li>
+    <li><a href=""https://www.ultrapower.com.cn/"" rel=""nofollow"">ultrapower</a></li>
+    <li><a href=""https://www.hh.global/"" rel=""nofollow"">H&H Global</a></li>
+    <li><a href=""http://www.leimingtech.com/"" rel=""nofollow"">LeiMing</a></li>
+    <li><a href=""https://www.itrip.com/"" rel=""nofollow"">iTrip</a></li>
+    <li><a href=""https://www.oneplus.com/cn"" rel=""nofollow"">OnePlus</a></li>
+    <li><a href=""https://www.zhongan.com/"" rel=""nofollow"">ZhongAn Tech</a></li>
+    <li><a href=""http://www.iqihang.com/"" rel=""nofollow"">IQiHang</a></li>
+    <li><a href=""https://www.dg-mall.com/"" rel=""nofollow"">DG-Mail</a></li>
+    <li><a href=""http://www.jiedaibao.com/"" rel=""nofollow"">JieDaiBao</a></li>
+    <li><a href=""https://www.fanhaoyue.com/"" rel=""nofollow"">FanHaoYue</a></li>
+    <li><a href=""http://www.jchl.com/"" rel=""nofollow"">JinCaiHuLian</a></li>
+    <li><a href=""https://www.jinhui365.com/"" rel=""nofollow"">JinHui365</a></li>
+    <li><a href=""https://www.zyzc8.com/"" rel=""nofollow"">ZhongChuang Technology</a></li>
+    <li><a href=""https://www.maihaoche.com/"" rel=""nofollow"">MaiHaoche</a></li>
+    <li><a href=""https://g.10086.cn/"" rel=""nofollow"">10086</a></li>","[{'comment': 'This company is not name 10086, we need to verify the company name carefully', 'commenter': 'terrymanu'}]"
1106,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/JobIdentificationStrategyFactory.java,"@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.setup;
+
+import lombok.AccessLevel;
+import lombok.NoArgsConstructor;
+
+import java.util.ServiceLoader;
+
+/**
+ * Job identification strategy factory.
+ */
+@NoArgsConstructor(access = AccessLevel.PRIVATE)
+public class JobIdentificationStrategyFactory {
+    
+    private static final JobIdentificationStrategy DEFAULT_STRATEGY = new JobClassNameIdentificationStrategy();
+    
+    /**
+     * Get job identification strategy.
+     *
+     * @return job identification strategy
+     */
+    public static JobIdentificationStrategy getStrategy() {","[{'comment': 'Should use static block to load SPI to avoid performance issue', 'commenter': 'terrymanu'}]"
1106,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/JobIdentificationStrategyFactory.java,"@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.setup;
+
+import lombok.AccessLevel;
+import lombok.NoArgsConstructor;
+
+import java.util.ServiceLoader;
+
+/**
+ * Job identification strategy factory.
+ */
+@NoArgsConstructor(access = AccessLevel.PRIVATE)
+public class JobIdentificationStrategyFactory {","[{'comment': 'need to final class here', 'commenter': 'terrymanu'}]"
1106,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/JobClassNameIdentificationStrategy.java,"@@ -0,0 +1,31 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.setup;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+
+/**
+ * Identify job with job class name.
+ */
+public class JobClassNameIdentificationStrategy implements JobIdentificationStrategy {","[{'comment': 'need to final class here', 'commenter': 'terrymanu'}]"
1106,elasticjob-lite/elasticjob-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/setup/JobClassNameBySpringIdentificationStrategy.java,"@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.setup;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.lite.internal.setup.JobIdentificationStrategy;
+import org.apache.shardingsphere.elasticjob.lite.spring.job.util.AopTargetUtils;
+import org.springframework.aop.support.AopUtils;
+
+/**
+ * Identify job with job class name.
+ * <p>
+ * Consider the proxy object that generated by cglib or jdk dynamic proxy.
+ * </p>
+ */
+public class JobClassNameBySpringIdentificationStrategy implements JobIdentificationStrategy {
+
+    @Override
+    public String identify(final ElasticJob elasticJob, final String jobName) {","[{'comment': 'Should return Optional for next JobIdentificationStrategy, just like response chain', 'commenter': 'terrymanu'}, {'comment': ""Thank you very much, I'll finish it in the next PR."", 'commenter': 'nmyphp'}]"
1106,elasticjob-lite/elasticjob-lite-spring/src/main/resources/META-INF/services/org.apache.shardingsphere.elasticjob.lite.internal.setup.JobIdentificationStrategy,"@@ -0,0 +1,18 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+org.apache.shardingsphere.elasticjob.lite.spring.setup.JobClassNameBySpringIdentificationStrategy","[{'comment': 'Need blank line for EOF', 'commenter': 'terrymanu'}]"
1106,elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/setup/JobIdentificationStrategyFactoryTest.java,"@@ -0,0 +1,32 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.setup;
+
+import org.apache.shardingsphere.elasticjob.lite.internal.setup.JobIdentificationStrategyFactory;
+import org.junit.Test;
+
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.junit.Assert.assertThat;
+
+public class JobIdentificationStrategyFactoryTest {","[{'comment': 'Please add final for class', 'commenter': 'terrymanu'}]"
1106,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/JobClassNameProvider.java,"@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.setup;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+
+/**
+ * Job class name provider.
+ */
+public interface JobClassNameProvider {
+    
+    /**
+     * Get job class name.
+     *
+     * @param elasticJob job instance
+     * @param jobName    job name
+     * @return job class name
+     */
+    String getJobClassName(ElasticJob elasticJob, String jobName);","[{'comment': 'What is the useful of 2nd parameter `jobName`?', 'commenter': 'terrymanu'}]"
1110,elasticjob-lite/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/boot/executor/PrintJobExecutor.java,"@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.boot.executor;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.executor.item.impl.TypedJobItemExecutor;
+
+/**
+ * Print Job Executor.
+ */
+public class PrintJobExecutor implements TypedJobItemExecutor {
+
+    @Override
+    public void process(final ElasticJob elasticJob, final JobConfiguration jobConfig, final JobFacade jobFacade, final ShardingContext shardingContext) {
+        System.out.println(jobConfig.getProps().getProperty(PrintJobProperties.CONTENT_KEY));","[{'comment': 'Please do not use System.out.println, log may better way', 'commenter': 'terrymanu'}, {'comment': 'Resolved.', 'commenter': 'TeslaCN'}]"
1141,elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/job/JobSpringNamespaceWithTypeTest.java,"@@ -0,0 +1,31 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.job;
+
+import org.apache.shardingsphere.elasticjob.lite.spring.test.AbstractZookeeperJUnit4SpringContextTests;
+import org.junit.Test;
+import org.springframework.test.context.ContextConfiguration;
+
+@ContextConfiguration(locations = ""classpath:META-INF/job/withJobType.xml"")
+public final class JobSpringNamespaceWithTypeTest extends AbstractZookeeperJUnit4SpringContextTests {
+    
+    @Test
+    public void jobScriptWithJobTypeTest() {
+        System.out.println(""JobScriptWithJobTypeTest"");","[{'comment': 'Please remove system.out.println and add assertion', 'commenter': 'terrymanu'}, {'comment': 'commit it again', 'commenter': 'jiang2015'}]"
1154,docs/content/user-manual/elasticjob-lite/usage/event-trace/table-structure.cn.md,"@@ -26,7 +26,7 @@ JOB_EXECUTION_LOG 记录每次作业的执行历史。
 分为两个步骤：
 
 1. 作业开始执行时向数据库插入数据，除 failure_cause 和 complete_time 外的其他字段均不为空。
-1. 作业完成执行时向数据库更新数据，更新 is_success, complete_time 和 failure_cause(如果作业执行失败)。
+2. 作业完成执行时向数据库更新数据，更新 is_success, complete_time 和 failure_cause(如果作业执行失败)。","[{'comment': 'Please do not modify here, it is the correct md syntax.\r\nThe number will auto increment', 'commenter': 'terrymanu'}, {'comment': 'OK, fix.', 'commenter': 'dongzl'}]"
1154,docs/content/user-manual/elasticjob-lite/usage/event-trace/table-structure.en.md,"@@ -4,4 +4,45 @@ weight = 4
 chapter = true
 +++
 
-TODO
+The database which is the value of the event tracing property `event_trace_rdb_url` will automatically creates two tables `JOB_EXECUTION_LOG` and `JOB_STATUS_TRACE_LOG` and several indexes.
+
+## JOB_EXECUTION_LOG columns
+
+| Column name      | Column type   | Required  | Describe                                                   |
+| ---------------- |:------------- |:--------- |:----------------------------------------------------- |
+| id               | VARCHAR(40)   | Yes       | Primary key                                                   |
+| job_name         | VARCHAR(100)  | Yes       | Job name                                               |
+| task_id          | VARCHAR(1000) | Yes       | Task name, create new tasks every time the job runs.    |
+| hostname         | VARCHAR(255)  | Yes       | Hostname                                               |
+| ip               | VARCHAR(50)   | Yes       | IP                                                |
+| sharding_item    | INT           | Yes       | Sharding item                                                |
+| execution_source | VARCHAR(20)   | Yes       | Source of job execution. The value options are `NORMAL_TRIGGER`, `MISFIRE`, `FAILOVER`. |
+| failure_cause    | VARCHAR(2000) | No        | The reason for execution failure                                           |
+| is_success       | BIT           | Yes       | Execute successfully or not                                           |
+| start_time       | TIMESTAMP     | Yes       | Job start time                                        |
+| complete_time    | TIMESTAMP     | No        | Job end time                                        |
+
+`JOB_EXECUTION_LOG` records the execution history of each job.
+There are two steps:
+
+1. When the job is executed, program will create one record in the `JOB_EXECUTION_LOG`, and all fields except `failure_cause` and `complete_time` are not empty.
+2. When the job completes execution, program will update the record, update the columns of `is_success`, `complete_time` and `failure_cause`(if the job execution fails).","[{'comment': 'Please leave here as `1.`', 'commenter': 'terrymanu'}, {'comment': 'OK, fix.', 'commenter': 'dongzl'}]"
1218,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironmentTest.java,"@@ -111,4 +111,19 @@ public void assertReconcileConfiguration() {
         assertThat(configuration.getReconcileIntervalMinutes(), is(0));
         assertFalse(configuration.isEnabledReconcile());
     }
+
+    @Test
+    public void assertGetMesosRole() {
+        assertThat(bootstrapEnvironment.getMesosRole(), is(Optional.empty()));
+        Properties properties = new Properties();
+        properties.setProperty(BootstrapEnvironment.EnvironmentArgument.MESOS_ROLE.getKey(), ""0"");
+        ReflectionUtils.setFieldValue(bootstrapEnvironment, ""properties"", properties);","[{'comment': 'The code add `ReflectionUtils`, but now import, is it cause compile failure?', 'commenter': 'terrymanu'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class AopTargetUtilsTest {","[{'comment': 'should be `final` class.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/TargetJob.java,"@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+
+public class TargetJob implements ElasticJob {
+
+    public void execute(final ShardingContext shardingContext) {
+
+    }
+}","[{'comment': 'add blank line at end of file.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class AopTargetUtilsTest {
+
+    @Test
+    public void jdkDynamicProxyForGetTarget() {
+        ProxyFactory pf = new ProxyFactory(new TargetJob());
+        pf.addInterface(ElasticJob.class);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isJdkDynamicProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+
+    @Test
+    public void cglibProxyForGetTarget() {
+        ProxyFactory pf = new ProxyFactory(new TargetJob());
+        pf.setProxyTargetClass(true);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isCglibProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+
+    @Test
+    public void noneProxyForGetTarget() {
+        ElasticJob proxy = new TargetJob();
+        assertFalse(AopUtils.isAopProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+}","[{'comment': 'add blank line at end of file.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class AopTargetUtilsTest {
+
+    @Test
+    public void jdkDynamicProxyForGetTarget() {","[{'comment': 'unit test method suggest start with `assert`.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class AopTargetUtilsTest {
+
+    @Test
+    public void jdkDynamicProxyForGetTarget() {
+        ProxyFactory pf = new ProxyFactory(new TargetJob());
+        pf.addInterface(ElasticJob.class);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isJdkDynamicProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+
+    @Test
+    public void cglibProxyForGetTarget() {","[{'comment': 'unit test method suggest start with `assert`.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class AopTargetUtilsTest {
+
+    @Test
+    public void jdkDynamicProxyForGetTarget() {
+        ProxyFactory pf = new ProxyFactory(new TargetJob());
+        pf.addInterface(ElasticJob.class);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isJdkDynamicProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+
+    @Test
+    public void cglibProxyForGetTarget() {
+        ProxyFactory pf = new ProxyFactory(new TargetJob());
+        pf.setProxyTargetClass(true);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isCglibProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+
+    @Test
+    public void noneProxyForGetTarget() {","[{'comment': 'unit test method suggest start with `assert`.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class AopTargetUtilsTest {
+","[{'comment': 'add four white space, keep indents consistent with the previous one.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class AopTargetUtilsTest {
+
+    @Test
+    public void jdkDynamicProxyForGetTarget() {
+        ProxyFactory pf = new ProxyFactory(new TargetJob());
+        pf.addInterface(ElasticJob.class);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isJdkDynamicProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+","[{'comment': 'add four white space, keep indents consistent with the previous one.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class AopTargetUtilsTest {
+
+    @Test
+    public void jdkDynamicProxyForGetTarget() {
+        ProxyFactory pf = new ProxyFactory(new TargetJob());
+        pf.addInterface(ElasticJob.class);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isJdkDynamicProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+
+    @Test
+    public void cglibProxyForGetTarget() {
+        ProxyFactory pf = new ProxyFactory(new TargetJob());
+        pf.setProxyTargetClass(true);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isCglibProxy(proxy));
+        AopTargetUtils.getTarget(proxy);
+    }
+","[{'comment': 'add four white space, keep indents consistent with the previous one.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/TargetJob.java,"@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+
+public class TargetJob implements ElasticJob {
+","[{'comment': 'add four white space, keep indents consistent with the previous one.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/TargetJob.java,"@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+
+public class TargetJob implements ElasticJob {","[{'comment': 'should be `final` class.', 'commenter': 'dongzl'}, {'comment': 'CGLIB testcase use it，so this not add', 'commenter': 'zhaoyuguang'}, {'comment': 'OK', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public final class AopTargetUtilsTest {
+    
+    @Test
+    public void assertJdkDynamicProxyForGetTarget() {
+        ElasticJob target = new TargetJob();
+        ProxyFactory pf = new ProxyFactory(target);
+        pf.addInterface(ElasticJob.class);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isJdkDynamicProxy(proxy));
+        assertEquals(AopTargetUtils.getTarget(proxy), target);","[{'comment': 'For multiple parameter asserts, `assertThat` should be used.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public final class AopTargetUtilsTest {
+    
+    @Test
+    public void assertJdkDynamicProxyForGetTarget() {
+        ElasticJob target = new TargetJob();
+        ProxyFactory pf = new ProxyFactory(target);
+        pf.addInterface(ElasticJob.class);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isJdkDynamicProxy(proxy));
+        assertEquals(AopTargetUtils.getTarget(proxy), target);
+    }
+    
+    @Test
+    public void assertCglibProxyForGetTarget() {
+        ElasticJob target = new TargetJob();
+        ProxyFactory pf = new ProxyFactory(target);
+        pf.setProxyTargetClass(true);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isCglibProxy(proxy));
+        assertEquals(AopTargetUtils.getTarget(proxy), target);","[{'comment': 'For multiple parameter asserts, `assertThat` should be used.', 'commenter': 'dongzl'}]"
1226,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/util/AopTargetUtilsTest.java,"@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.util;
+
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.junit.Test;
+import org.springframework.aop.framework.ProxyFactory;
+import org.springframework.aop.support.AopUtils;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public final class AopTargetUtilsTest {
+    
+    @Test
+    public void assertJdkDynamicProxyForGetTarget() {
+        ElasticJob target = new TargetJob();
+        ProxyFactory pf = new ProxyFactory(target);
+        pf.addInterface(ElasticJob.class);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isJdkDynamicProxy(proxy));
+        assertEquals(AopTargetUtils.getTarget(proxy), target);
+    }
+    
+    @Test
+    public void assertCglibProxyForGetTarget() {
+        ElasticJob target = new TargetJob();
+        ProxyFactory pf = new ProxyFactory(target);
+        pf.setProxyTargetClass(true);
+        ElasticJob proxy = (ElasticJob) pf.getProxy();
+        assertTrue(AopUtils.isCglibProxy(proxy));
+        assertEquals(AopTargetUtils.getTarget(proxy), target);
+    }
+    
+    @Test
+    public void assertNoneProxyForGetTarget() {
+        ElasticJob proxy = new TargetJob();
+        assertFalse(AopUtils.isAopProxy(proxy));
+        assertEquals(AopTargetUtils.getTarget(proxy), proxy);","[{'comment': 'For multiple parameter asserts, `assertThat` should be used.', 'commenter': 'dongzl'}]"
1236,elasticjob-cloud/elasticjob-cloud-executor/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/prod/TaskExecutorTest.java,"@@ -127,4 +130,20 @@ public void assertShutdown() {
     public void assertError() {
         taskExecutor.error(executorDriver, """");
     }
+    
+    @Test
+    @SneakyThrows
+    public void testConstructor() {","[{'comment': 'Please use assertXXX instead of testXXX for test case method', 'commenter': 'terrymanu'}, {'comment': 'Ok', 'commenter': 'Technoboy-'}]"
1236,elasticjob-cloud/elasticjob-cloud-executor/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/prod/TaskExecutorTest.java,"@@ -127,4 +130,20 @@ public void assertShutdown() {
     public void assertError() {
         taskExecutor.error(executorDriver, """");
     }
+    
+    @Test
+    @SneakyThrows
+    public void assertConstructor() {
+        TestSimpleJob testSimpleJob = new TestSimpleJob();
+        taskExecutor = new TaskExecutor(testSimpleJob);
+        Field fieldElasticJob = TaskExecutor.class.getDeclaredField(""elasticJob"");
+        fieldElasticJob.setAccessible(true);
+        Field fieldElasticJobType = TaskExecutor.class.getDeclaredField(""elasticJobType"");
+        fieldElasticJobType.setAccessible(true);
+        assertTrue(fieldElasticJob.get(taskExecutor) == testSimpleJob);
+        assertNull(fieldElasticJobType.get(taskExecutor));
+        taskExecutor = new TaskExecutor(""simpleJob"");
+        assertEquals(""simpleJob"", fieldElasticJobType.get(taskExecutor));","[{'comment': 'Please use assertThat instead of assertEquals', 'commenter': 'terrymanu'}, {'comment': 'Ok, thanks for reviewing!', 'commenter': 'Technoboy-'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/FacadeService.java,"@@ -136,17 +132,15 @@ public void addRunning(final TaskContext taskContext) {
     
     /**
      * Update daemon task status.
-     * 
      * @param taskContext task running context
-     * @param isIdle set to idle or not
+     * @param isIdle      set to idle or not","[{'comment': 'Please keep original java doc format', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/FacadeService.java,"@@ -136,17 +132,15 @@ public void addRunning(final TaskContext taskContext) {
     
     /**
      * Update daemon task status.
-     * 
      * @param taskContext task running context
-     * @param isIdle set to idle or not
+     * @param isIdle      set to idle or not
      */
     public void updateDaemonStatus(final TaskContext taskContext, final boolean isIdle) {
         runningService.updateIdle(taskContext, isIdle);
     }
     
     /**
      * Remove task from running queue.
-     *","[{'comment': 'Please keep original java doc format, keep a blank line between title and parameter', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/HttpClientUtils.java,"@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.Iterator;
+import java.util.List;
+import lombok.Getter;
+import lombok.Setter;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.HttpClientException;
+
+/**
+ * Http client utils.
+ */
+public class HttpClientUtils {
+    
+    /**
+     * http get request.
+     * @param url thr url
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url) {
+        return httpGet(url, null, null, 3000L);
+    }
+    
+    /**
+     * http get request.
+     * @param url           thr url
+     * @param paramValues   the param values
+     * @param encoding      the encoding
+     * @param readTimeoutMs the read timeout
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url, final List<String> paramValues, final String encoding, final long readTimeoutMs) {
+        HttpURLConnection conn = null;
+        try {
+            String encodedContent = encodingParams(paramValues, encoding);
+            String urlWithParam = url + (null == encodedContent ? """" : (""?"" + encodedContent));
+            conn = (HttpURLConnection) new URL(urlWithParam).openConnection();
+            conn.setRequestMethod(""GET"");
+            conn.setConnectTimeout((int) readTimeoutMs);
+            conn.setReadTimeout((int) readTimeoutMs);
+            conn.connect();
+            String resp;
+            if (HttpURLConnection.HTTP_OK == conn.getResponseCode()) {
+                resp = IOUtils.toString(conn.getInputStream(), encoding);
+            } else {
+                resp = IOUtils.toString(conn.getErrorStream(), encoding);
+            }
+            return new HttpResult(conn.getResponseCode(), resp);
+        } catch (IOException ex) {
+            throw new HttpClientException(ex);
+        } finally {
+            if (conn != null) {","[{'comment': 'Please change `conn != null` to `null != conn`', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/HttpClientUtils.java,"@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.Iterator;
+import java.util.List;
+import lombok.Getter;
+import lombok.Setter;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.HttpClientException;
+
+/**
+ * Http client utils.
+ */
+public class HttpClientUtils {
+    
+    /**
+     * http get request.
+     * @param url thr url
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url) {
+        return httpGet(url, null, null, 3000L);
+    }
+    
+    /**
+     * http get request.
+     * @param url           thr url
+     * @param paramValues   the param values
+     * @param encoding      the encoding
+     * @param readTimeoutMs the read timeout
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url, final List<String> paramValues, final String encoding, final long readTimeoutMs) {
+        HttpURLConnection conn = null;
+        try {
+            String encodedContent = encodingParams(paramValues, encoding);
+            String urlWithParam = url + (null == encodedContent ? """" : (""?"" + encodedContent));
+            conn = (HttpURLConnection) new URL(urlWithParam).openConnection();
+            conn.setRequestMethod(""GET"");
+            conn.setConnectTimeout((int) readTimeoutMs);
+            conn.setReadTimeout((int) readTimeoutMs);
+            conn.connect();
+            String resp;
+            if (HttpURLConnection.HTTP_OK == conn.getResponseCode()) {
+                resp = IOUtils.toString(conn.getInputStream(), encoding);
+            } else {
+                resp = IOUtils.toString(conn.getErrorStream(), encoding);
+            }
+            return new HttpResult(conn.getResponseCode(), resp);
+        } catch (IOException ex) {","[{'comment': 'Please add final for exception catch', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/HttpClientUtils.java,"@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.Iterator;
+import java.util.List;
+import lombok.Getter;
+import lombok.Setter;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.HttpClientException;
+
+/**
+ * Http client utils.
+ */
+public class HttpClientUtils {
+    
+    /**
+     * http get request.
+     * @param url thr url
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url) {
+        return httpGet(url, null, null, 3000L);
+    }
+    
+    /**
+     * http get request.
+     * @param url           thr url
+     * @param paramValues   the param values
+     * @param encoding      the encoding
+     * @param readTimeoutMs the read timeout
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url, final List<String> paramValues, final String encoding, final long readTimeoutMs) {
+        HttpURLConnection conn = null;
+        try {
+            String encodedContent = encodingParams(paramValues, encoding);
+            String urlWithParam = url + (null == encodedContent ? """" : (""?"" + encodedContent));
+            conn = (HttpURLConnection) new URL(urlWithParam).openConnection();
+            conn.setRequestMethod(""GET"");
+            conn.setConnectTimeout((int) readTimeoutMs);
+            conn.setReadTimeout((int) readTimeoutMs);
+            conn.connect();
+            String resp;
+            if (HttpURLConnection.HTTP_OK == conn.getResponseCode()) {
+                resp = IOUtils.toString(conn.getInputStream(), encoding);
+            } else {
+                resp = IOUtils.toString(conn.getErrorStream(), encoding);
+            }
+            return new HttpResult(conn.getResponseCode(), resp);
+        } catch (IOException ex) {
+            throw new HttpClientException(ex);
+        } finally {
+            if (conn != null) {
+                conn.disconnect();
+            }
+        }
+    }
+    
+    private static String encodingParams(final List<String> paramValues, final String encoding) throws UnsupportedEncodingException {
+        if (null == paramValues) {
+            return null;
+        }
+        StringBuilder sb = new StringBuilder();","[{'comment': 'Please use better name, `stringBuilder` maybe better', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/HttpClientUtils.java,"@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.Iterator;
+import java.util.List;
+import lombok.Getter;
+import lombok.Setter;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.HttpClientException;
+
+/**
+ * Http client utils.
+ */
+public class HttpClientUtils {
+    
+    /**
+     * http get request.
+     * @param url thr url
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url) {
+        return httpGet(url, null, null, 3000L);
+    }
+    
+    /**
+     * http get request.
+     * @param url           thr url
+     * @param paramValues   the param values
+     * @param encoding      the encoding
+     * @param readTimeoutMs the read timeout
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url, final List<String> paramValues, final String encoding, final long readTimeoutMs) {
+        HttpURLConnection conn = null;
+        try {
+            String encodedContent = encodingParams(paramValues, encoding);
+            String urlWithParam = url + (null == encodedContent ? """" : (""?"" + encodedContent));
+            conn = (HttpURLConnection) new URL(urlWithParam).openConnection();
+            conn.setRequestMethod(""GET"");
+            conn.setConnectTimeout((int) readTimeoutMs);
+            conn.setReadTimeout((int) readTimeoutMs);
+            conn.connect();
+            String resp;
+            if (HttpURLConnection.HTTP_OK == conn.getResponseCode()) {
+                resp = IOUtils.toString(conn.getInputStream(), encoding);
+            } else {
+                resp = IOUtils.toString(conn.getErrorStream(), encoding);
+            }
+            return new HttpResult(conn.getResponseCode(), resp);
+        } catch (IOException ex) {
+            throw new HttpClientException(ex);
+        } finally {
+            if (conn != null) {
+                conn.disconnect();
+            }
+        }
+    }
+    
+    private static String encodingParams(final List<String> paramValues, final String encoding) throws UnsupportedEncodingException {
+        if (null == paramValues) {
+            return null;
+        }
+        StringBuilder sb = new StringBuilder();
+        for (Iterator<String> iter = paramValues.iterator(); iter.hasNext();) {
+            sb.append(iter.next()).append(""="");
+            sb.append(URLEncoder.encode(iter.next(), encoding));
+            if (iter.hasNext()) {
+                sb.append(""&"");
+            }
+        }
+        return sb.toString();
+    }
+    
+    /**
+     * http post request.
+     * @param url thr url
+     * @return http result
+     */
+    public static HttpResult httpPost(final String url) {
+        return httpPost(url, null, null, 3000L);
+    }
+    
+    /**
+     * http post request.
+     * @param url           thr url
+     * @param paramValues   the param values
+     * @param encoding      the encoding
+     * @param readTimeoutMs the read timeout
+     * @return http result
+     */
+    public static HttpResult httpPost(final String url, final List<String> paramValues, final String encoding, final long readTimeoutMs) {","[{'comment': 'Please do not use abbreviation, `readTimeoutMs` should be renamed as `readTimeoutMillisecond`', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/HttpClientUtils.java,"@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.Iterator;
+import java.util.List;
+import lombok.Getter;
+import lombok.Setter;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.HttpClientException;
+
+/**
+ * Http client utils.
+ */
+public class HttpClientUtils {
+    
+    /**
+     * http get request.
+     * @param url thr url
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url) {
+        return httpGet(url, null, null, 3000L);
+    }
+    
+    /**
+     * http get request.
+     * @param url           thr url
+     * @param paramValues   the param values
+     * @param encoding      the encoding
+     * @param readTimeoutMs the read timeout
+     * @return http result
+     */
+    public static HttpResult httpGet(final String url, final List<String> paramValues, final String encoding, final long readTimeoutMs) {
+        HttpURLConnection conn = null;
+        try {
+            String encodedContent = encodingParams(paramValues, encoding);
+            String urlWithParam = url + (null == encodedContent ? """" : (""?"" + encodedContent));
+            conn = (HttpURLConnection) new URL(urlWithParam).openConnection();
+            conn.setRequestMethod(""GET"");
+            conn.setConnectTimeout((int) readTimeoutMs);
+            conn.setReadTimeout((int) readTimeoutMs);
+            conn.connect();
+            String resp;
+            if (HttpURLConnection.HTTP_OK == conn.getResponseCode()) {
+                resp = IOUtils.toString(conn.getInputStream(), encoding);
+            } else {
+                resp = IOUtils.toString(conn.getErrorStream(), encoding);
+            }
+            return new HttpResult(conn.getResponseCode(), resp);
+        } catch (IOException ex) {
+            throw new HttpClientException(ex);
+        } finally {
+            if (conn != null) {
+                conn.disconnect();
+            }
+        }
+    }
+    
+    private static String encodingParams(final List<String> paramValues, final String encoding) throws UnsupportedEncodingException {
+        if (null == paramValues) {
+            return null;
+        }
+        StringBuilder sb = new StringBuilder();
+        for (Iterator<String> iter = paramValues.iterator(); iter.hasNext();) {
+            sb.append(iter.next()).append(""="");
+            sb.append(URLEncoder.encode(iter.next(), encoding));
+            if (iter.hasNext()) {
+                sb.append(""&"");
+            }
+        }
+        return sb.toString();
+    }
+    
+    /**
+     * http post request.
+     * @param url thr url
+     * @return http result
+     */
+    public static HttpResult httpPost(final String url) {
+        return httpPost(url, null, null, 3000L);
+    }
+    
+    /**
+     * http post request.
+     * @param url           thr url
+     * @param paramValues   the param values
+     * @param encoding      the encoding
+     * @param readTimeoutMs the read timeout
+     * @return http result
+     */
+    public static HttpResult httpPost(final String url, final List<String> paramValues, final String encoding, final long readTimeoutMs) {
+        HttpURLConnection conn = null;
+        try {
+            conn = (HttpURLConnection) new URL(url).openConnection();","[{'comment': 'Please rename `conn` to `connection`', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/IOUtils.java,"@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.CharArrayWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.Writer;
+import java.nio.charset.StandardCharsets;
+
+/**
+ * IO utils.
+ */
+public class IOUtils {","[{'comment': 'Please add final for class if not for extension, and please use lombok to add private constructor for static util class ', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/IOUtils.java,"@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.CharArrayWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.Writer;
+import java.nio.charset.StandardCharsets;
+
+/**
+ * IO utils.
+ */
+public class IOUtils {
+    
+    /**
+     * convert input stream to string.
+     * @param input    the input stream
+     * @param encoding the encoding
+     * @return string
+     * @throws IOException IOException
+     */
+    public static String toString(final InputStream input, final String encoding) throws IOException {
+        return (null == encoding) ? toString(new InputStreamReader(input, StandardCharsets.UTF_8)) : toString(new InputStreamReader(input, encoding));
+    }
+    
+    /**
+     * convert input stream to string.
+     * @param reader the reader
+     * @return string
+     * @throws IOException IOException
+     */
+    public static String toString(final Reader reader) throws IOException {
+        CharArrayWriter sw = new CharArrayWriter();
+        copy(reader, sw);
+        return sw.toString();
+    }
+    
+    private static void copy(final Reader input, final Writer output) throws IOException {
+        char[] buffer = new char[1 << 12];","[{'comment': 'What is useful of `1 << 12`?', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/IOUtils.java,"@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.CharArrayWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.Writer;
+import java.nio.charset.StandardCharsets;
+
+/**
+ * IO utils.
+ */
+public class IOUtils {
+    
+    /**
+     * convert input stream to string.
+     * @param input    the input stream
+     * @param encoding the encoding
+     * @return string
+     * @throws IOException IOException
+     */
+    public static String toString(final InputStream input, final String encoding) throws IOException {
+        return (null == encoding) ? toString(new InputStreamReader(input, StandardCharsets.UTF_8)) : toString(new InputStreamReader(input, encoding));
+    }
+    
+    /**
+     * convert input stream to string.
+     * @param reader the reader
+     * @return string
+     * @throws IOException IOException
+     */
+    public static String toString(final Reader reader) throws IOException {
+        CharArrayWriter sw = new CharArrayWriter();
+        copy(reader, sw);
+        return sw.toString();
+    }
+    
+    private static void copy(final Reader input, final Writer output) throws IOException {
+        char[] buffer = new char[1 << 12];
+        for (int n; (n = input.read(buffer)) >= 0;) {","[{'comment': 'Please do not use `n` as variable name, just use meaningful name ', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/HttpTestUtil.java,"@@ -28,19 +30,24 @@
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.HttpClientException;
 
-public final class HttpTestsUtil {
+/**
+ * Http utils.
+ */
+public final class HttpTestUtil {","[{'comment': 'Please use lombok to add private constructor for static util class', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/HttpTestUtil.java,"@@ -67,30 +75,32 @@ public static int post(final String url, final String content) throws Exception
      * @param url     the url","[{'comment': 'The javadoc format is not keep consist with current format', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/HttpTestUtil.java,"@@ -99,9 +109,8 @@ public static String get(final String url) throws Exception {
      * @param url     the url","[{'comment': ""Please remove `the`, it is better to keep java doc' style consist with original"", 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/HttpTestUtil.java,"@@ -28,80 +32,93 @@
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.HttpClientException;
 
-public final class HttpTestsUtil {
+/**
+ * Http utils.
+ */
+@NoArgsConstructor(access = AccessLevel.PRIVATE)
+public final class HttpTestUtil {
     
     /**
      * send post request.
-     * @param url the url
-     * @return the http status code
-     * @throws Exception exception when error
+     *
+     * @param url url
+     * @return http status code
      */
-    public static int post(final String url) throws Exception {
+    public static int post(final String url) {
         try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
             HttpPost httpPost = new HttpPost(url);
             return httpClient.execute(httpPost).getStatusLine().getStatusCode();
+        } catch (IOException e) {
+            throw new HttpClientException(""send a post request for '%s' failed"", e, url);
         }
     }
     
     /**
      * send post request.
-     * @param url     the url
-     * @param content the content
-     * @return the http status code
-     * @throws Exception exception when error
+     *
+     * @param url url
+     * @param content content
+     * @return http status code
      */
-    public static int post(final String url, final String content) throws Exception {
+    public static int post(final String url, final String content) {
         try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
             HttpPost httpPost = new HttpPost(url);
             StringEntity entity = new StringEntity(content, ""utf-8"");
             entity.setContentEncoding(""UTF-8"");
             entity.setContentType(""application/json"");
             httpPost.setEntity(entity);
             return httpClient.execute(httpPost).getStatusLine().getStatusCode();
+        } catch (IOException e) {
+            throw new HttpClientException(""send a post request for '%s' with parameter '%s' failed"", e, url, content);
         }
     }
     
     /**
      * send put request.
-     * @param url     the url
-     * @param content the content
-     * @return the http status code
-     * @throws Exception exception when error
+     *
+     * @param url url
+     * @param content content
+     * @return http status code
      */
-    public static int put(final String url, final String content) throws Exception {
+    public static int put(final String url, final String content) {
         try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
             HttpPut httpPut = new HttpPut(url);
             StringEntity entity = new StringEntity(content, ""utf-8"");
             entity.setContentEncoding(""UTF-8"");
             entity.setContentType(""application/json"");
             httpPut.setEntity(entity);
             return httpClient.execute(httpPut).getStatusLine().getStatusCode();
+        } catch (IOException e) {
+            throw new HttpClientException(""send a put request for '%s' with parameter '%s' failed"", e, url, content);
         }
     }
     
     /**
      * Send get request.
-     * @param url the url
-     * @return the http response
-     * @throws Exception exception when error
+     *
+     * @param url url
+     * @return http result
      */
-    public static String get(final String url) throws Exception {
+    public static String get(final String url) {
         try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
             HttpGet httpGet = new HttpGet(url);
             HttpEntity entity = httpClient.execute(httpGet).getEntity();
             return EntityUtils.toString(entity);
+        } catch (IOException e) {
+            throw new HttpClientException(""send a get request for '%s' failed"", e, url);
         }
     }
     
     /**
      * send get request.","[{'comment': 'Please use upper case for first letter', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/HttpTestUtil.java,"@@ -110,19 +127,23 @@ public static String get(final String url, final Map<String, String> content) th
             HttpGet httpGet = new HttpGet(uriBuilder.build());
             HttpEntity entity = httpClient.execute(httpGet).getEntity();
             return EntityUtils.toString(entity);
+        } catch (IOException | URISyntaxException e) {
+            throw new HttpClientException(""send a get request for '%s' failed"", e, url);
         }
     }
     
     /**
      * send delete request.","[{'comment': 'Please use upper case for first letter', 'commenter': 'terrymanu'}]"
1252,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/util/IOUtilsTest.java,"@@ -0,0 +1,53 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.util;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.nio.charset.StandardCharsets;
+import org.junit.Test;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
+public class IOUtilsTest {","[{'comment': 'Please add final for class if not for extended', 'commenter': 'terrymanu'}]"
1255,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/controller/search/JobEventRdbSearchTest.java,"@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.console.controller.search;
+
+import lombok.SneakyThrows;
+import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
+import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import javax.sql.DataSource;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Timestamp;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.when;
+
+@RunWith(MockitoJUnitRunner.class)
+public class JobEventRdbSearchTest {","[{'comment': 'Suggest a `final` class.', 'commenter': 'dongzl'}]"
1255,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/controller/search/JobEventRdbSearchTest.java,"@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.console.controller.search;
+
+import lombok.SneakyThrows;
+import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
+import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import javax.sql.DataSource;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Timestamp;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.when;
+
+@RunWith(MockitoJUnitRunner.class)
+public class JobEventRdbSearchTest {
+    
+    @Mock
+    private DataSource dataSource;
+    
+    @Mock
+    private PreparedStatement preparedStatement;
+    
+    @Mock
+    private ResultSet resultSet;
+    
+    @Mock
+    private Connection conn;
+    
+    private JobEventRdbSearch.Condition condition;
+    
+    private JobEventRdbSearch jobEventRdbSearch;
+    
+    @Before
+    public void setUpClass() throws Exception {","[{'comment': 'Suggest the method name is `setUp`.', 'commenter': 'dongzl'}]"
1255,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/controller/search/JobEventRdbSearchTest.java,"@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.console.controller.search;
+
+import lombok.SneakyThrows;
+import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
+import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import javax.sql.DataSource;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Timestamp;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.when;
+
+@RunWith(MockitoJUnitRunner.class)
+public class JobEventRdbSearchTest {
+    
+    @Mock
+    private DataSource dataSource;
+    
+    @Mock
+    private PreparedStatement preparedStatement;
+    
+    @Mock
+    private ResultSet resultSet;
+    
+    @Mock
+    private Connection conn;
+    
+    private JobEventRdbSearch.Condition condition;
+    
+    private JobEventRdbSearch jobEventRdbSearch;
+    
+    @Before
+    public void setUpClass() throws Exception {
+        jobEventRdbSearch = new JobEventRdbSearch(dataSource);
+        when(dataSource.getConnection()).thenReturn(conn);
+        when(conn.prepareStatement(any())).thenReturn(preparedStatement);
+        when(preparedStatement.executeQuery()).thenReturn(resultSet);
+        when(resultSet.getInt(1)).thenReturn(1);
+        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
+    }
+    
+    @Test
+    @SneakyThrows
+    public void assertFindJobExecutionEvents() {
+        when(resultSet.getString(5)).thenReturn(""TestJobName"");
+        when(resultSet.getString(6)).thenReturn(""FAILOVER"");
+        when(resultSet.getString(7)).thenReturn(""1"");
+        when(resultSet.getTimestamp(8)).thenReturn(new Timestamp(System.currentTimeMillis()));
+        Map<String, Object> fields = new HashMap<>();
+        fields.put(""job_name"", ""TestJobName"");
+        condition = new JobEventRdbSearch.Condition(1, 10, ""job_name"", ""ASC"", new Date(), new Date(), fields);
+        JobEventRdbSearch.Result<JobExecutionEvent> jobExecutionEvents = jobEventRdbSearch.findJobExecutionEvents(condition);
+        assertThat(jobExecutionEvents.getTotal(), is(1));
+        assertThat(jobExecutionEvents.getRows().size(), is(1));
+        assertThat(jobExecutionEvents.getRows().get(0).getJobName(), is(""TestJobName""));
+        assertThat(jobExecutionEvents.getRows().get(0).getSource(), is(JobExecutionEvent.ExecutionSource.FAILOVER));
+        assertThat(jobExecutionEvents.getRows().get(0).getShardingItem(), is(1));
+    }
+    
+    @Test
+    @SneakyThrows
+    public void assertFindJobStatusTraceEvents() {
+        when(resultSet.getString(2)).thenReturn(""TestJobName"");
+        when(resultSet.getString(6)).thenReturn(""LITE_EXECUTOR"");
+        when(resultSet.getString(9)).thenReturn(""TASK_RUNNING"");
+        when(resultSet.getTimestamp(11)).thenReturn(new Timestamp(System.currentTimeMillis()));
+        Map<String, Object> fields = new HashMap<>();
+        fields.put(""job_name"", ""TestJobName"");
+        condition = new JobEventRdbSearch.Condition(0, 0, ""job_name"", ""DESC"", new Date(), new Date(), fields);
+        JobEventRdbSearch.Result<JobStatusTraceEvent> jobStatusTraceEvents = jobEventRdbSearch.findJobStatusTraceEvents(condition);
+        assertThat(jobStatusTraceEvents.getTotal(), is(1));
+        assertThat(jobStatusTraceEvents.getRows().size(), is(1));
+        assertThat(jobStatusTraceEvents.getRows().get(0).getJobName(), is(""TestJobName""));
+        assertThat(jobStatusTraceEvents.getRows().get(0).getSource(), is(JobStatusTraceEvent.Source.LITE_EXECUTOR));
+        assertThat(jobStatusTraceEvents.getRows().get(0).getState(), is(JobStatusTraceEvent.State.TASK_RUNNING));
+    }
+}","[{'comment': 'Please add a blank line at end of file.', 'commenter': 'dongzl'}]"
1255,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/controller/search/JobEventRdbSearchTest.java,"@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.console.controller.search;
+
+import lombok.SneakyThrows;
+import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
+import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import javax.sql.DataSource;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Timestamp;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.when;
+
+@RunWith(MockitoJUnitRunner.class)
+public final class JobEventRdbSearchTest {
+    
+    @Mock
+    private DataSource dataSource;
+    
+    @Mock
+    private PreparedStatement preparedStatement;
+    
+    @Mock
+    private ResultSet resultSet;
+    
+    @Mock
+    private Connection conn;
+    
+    private JobEventRdbSearch.Condition condition;
+    
+    private JobEventRdbSearch jobEventRdbSearch;
+    
+    @Before
+    public void setUp() throws Exception {
+        jobEventRdbSearch = new JobEventRdbSearch(dataSource);
+        when(dataSource.getConnection()).thenReturn(conn);
+        when(conn.prepareStatement(any())).thenReturn(preparedStatement);
+        when(preparedStatement.executeQuery()).thenReturn(resultSet);
+        when(resultSet.getInt(1)).thenReturn(1);
+        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
+    }
+    
+    @Test
+    @SneakyThrows
+    public void assertFindJobExecutionEvents() {
+        when(resultSet.getString(5)).thenReturn(""TestJobName"");
+        when(resultSet.getString(6)).thenReturn(""FAILOVER"");
+        when(resultSet.getString(7)).thenReturn(""1"");
+        when(resultSet.getTimestamp(8)).thenReturn(new Timestamp(System.currentTimeMillis()));
+        Map<String, Object> fields = new HashMap<>();
+        fields.put(""job_name"", ""TestJobName"");
+        condition = new JobEventRdbSearch.Condition(1, 10, ""job_name"", ""ASC"", new Date(), new Date(), fields);
+        JobEventRdbSearch.Result<JobExecutionEvent> jobExecutionEvents = jobEventRdbSearch.findJobExecutionEvents(condition);
+        assertThat(jobExecutionEvents.getTotal(), is(1));
+        assertThat(jobExecutionEvents.getRows().size(), is(1));
+        assertThat(jobExecutionEvents.getRows().get(0).getJobName(), is(""TestJobName""));
+        assertThat(jobExecutionEvents.getRows().get(0).getSource(), is(JobExecutionEvent.ExecutionSource.FAILOVER));
+        assertThat(jobExecutionEvents.getRows().get(0).getShardingItem(), is(1));
+    }
+    
+    @Test
+    @SneakyThrows
+    public void assertFindJobStatusTraceEvents() {
+        when(resultSet.getString(2)).thenReturn(""TestJobName"");
+        when(resultSet.getString(6)).thenReturn(""LITE_EXECUTOR"");
+        when(resultSet.getString(9)).thenReturn(""TASK_RUNNING"");
+        when(resultSet.getTimestamp(11)).thenReturn(new Timestamp(System.currentTimeMillis()));
+        Map<String, Object> fields = new HashMap<>();
+        fields.put(""job_name"", ""TestJobName"");
+        condition = new JobEventRdbSearch.Condition(0, 0, ""job_name"", ""DESC"", new Date(), new Date(), fields);
+        JobEventRdbSearch.Result<JobStatusTraceEvent> jobStatusTraceEvents = jobEventRdbSearch.findJobStatusTraceEvents(condition);
+        assertThat(jobStatusTraceEvents.getTotal(), is(1));
+        assertThat(jobStatusTraceEvents.getRows().size(), is(1));
+        assertThat(jobStatusTraceEvents.getRows().get(0).getJobName(), is(""TestJobName""));
+        assertThat(jobStatusTraceEvents.getRows().get(0).getSource(), is(JobStatusTraceEvent.Source.LITE_EXECUTOR));
+        assertThat(jobStatusTraceEvents.getRows().get(0).getState(), is(JobStatusTraceEvent.State.TASK_RUNNING));
+    }
+    ","[{'comment': 'Please remove this blank line.', 'commenter': 'dongzl'}]"
1331,docs/content/user-manual/elasticjob-lite/configuration/spring-boot-starter.cn.md,"@@ -46,7 +46,7 @@ elasticjob.reg-center.server-lists=localhost:6181
 | 属性名                            | 是否必填 |
 | --------------------------------- |:-------- |
 | elasticJobClass / elasticJobType  | 是       |
-| cron                              | 否       |
+| cron / jobBootstrapBeanName       | 否       |","[{'comment': 'Please separate them into 2 lines', 'commenter': 'terrymanu'}]"
1345,elasticjob-executor/elasticjob-executor-type/elasticjob-http-executor/pom.xml,"@@ -0,0 +1,48 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <artifactId>elasticjob-executor-type</artifactId>
+        <version>3.0.0-alpha-SNAPSHOT</version>","[{'comment': 'The version should be 3.0.0-beta-SNAPSHOT', 'commenter': 'terrymanu'}]"
1345,elasticjob-executor/elasticjob-executor-type/elasticjob-http-executor/pom.xml,"@@ -0,0 +1,48 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <artifactId>elasticjob-executor-type</artifactId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <artifactId>elasticjob-http-executor</artifactId>
+    <name>${project.artifactId}</name>
+    
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-executor-kernel</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>
+        
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+        </dependency>
+    </dependencies>
+</project>","[{'comment': 'Please add a new line in the end of file', 'commenter': 'terrymanu'}]"
1345,elasticjob-executor/elasticjob-executor-type/elasticjob-http-executor/src/main/java/org/apache/shardingsphere/elasticjob/http/pojo/HttpParam.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.http.pojo;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+@Getter
+@AllArgsConstructor(access = AccessLevel.PUBLIC)
+public final class HttpParam {","[{'comment': 'Missing java doc', 'commenter': 'terrymanu'}]"
1345,elasticjob-executor/elasticjob-executor-type/elasticjob-http-executor/src/main/java/org/apache/shardingsphere/elasticjob/http/pojo/HttpParam.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.http.pojo;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+@Getter
+@AllArgsConstructor(access = AccessLevel.PUBLIC)","[{'comment': '1. @Getter should behind of @AllArgsConstructor\r\n2. It is unnecessary use access = AccessLevel.PUBLIC because it is default value\r\n3. Use @RequiredArgsConstructor is better if all fields are final', 'commenter': 'terrymanu'}]"
1345,elasticjob-executor/elasticjob-executor-type/elasticjob-http-executor/src/main/java/org/apache/shardingsphere/elasticjob/http/pojo/HttpParam.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.http.pojo;
+
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+@Getter
+@AllArgsConstructor(access = AccessLevel.PUBLIC)
+public final class HttpParam {
+    
+    private final String url;
+    
+    private final String method;
+    
+    private final boolean isPostMethod;
+    
+    private final String data;
+    
+    private final int connectTimeout;
+    
+    private final int readTimeout;
+    
+    private final String contentType;
+    
+    private final boolean enableTransparentShardingContext;
+    ","[{'comment': 'Please remove useless blank line', 'commenter': 'terrymanu'}]"
1345,elasticjob-executor/elasticjob-executor-type/elasticjob-http-executor/src/main/java/org/apache/shardingsphere/elasticjob/http/executor/HttpJobExecutor.java,"@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.http.executor;
+
+import com.google.common.base.Strings;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.executor.item.impl.TypedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.http.pojo.HttpParam;
+import org.apache.shardingsphere.elasticjob.http.props.HttpJobProperties;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionException;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import java.io.BufferedReader;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Properties;
+
+/**
+ * Http job executor.
+ */
+@Slf4j
+public final class HttpJobExecutor implements TypedJobItemExecutor {
+    
+    @Override
+    public void process(final ElasticJob elasticJob, final JobConfiguration jobConfig, final JobFacade jobFacade, final ShardingContext shardingContext) {
+        HttpParam httpParam = getHttpParam(jobConfig.getProps());
+        HttpURLConnection connection = null;
+        BufferedReader bufferedReader = null;
+        try {","[{'comment': 'Can we use try with resource to handle close?', 'commenter': 'terrymanu'}, {'comment': 'HttpURLConnection is not implemented AutoCloseable', 'commenter': 'Technoboy-'}]"
1345,elasticjob-executor/elasticjob-executor-type/elasticjob-http-executor/src/main/java/org/apache/shardingsphere/elasticjob/http/executor/HttpJobExecutor.java,"@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.http.executor;
+
+import com.google.common.base.Strings;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.executor.item.impl.TypedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.http.pojo.HttpParam;
+import org.apache.shardingsphere.elasticjob.http.props.HttpJobProperties;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionException;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import java.io.BufferedReader;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Properties;
+
+/**
+ * Http job executor.
+ */
+@Slf4j
+public final class HttpJobExecutor implements TypedJobItemExecutor {
+    
+    @Override
+    public void process(final ElasticJob elasticJob, final JobConfiguration jobConfig, final JobFacade jobFacade, final ShardingContext shardingContext) {
+        HttpParam httpParam = getHttpParam(jobConfig.getProps());
+        HttpURLConnection connection = null;
+        BufferedReader bufferedReader = null;
+        try {
+            URL realUrl = new URL(httpParam.getUrl());
+            connection = (HttpURLConnection) realUrl.openConnection();
+            connection.setRequestMethod(httpParam.getMethod());
+            connection.setDoOutput(httpParam.isPostMethod());
+            connection.setConnectTimeout(httpParam.getConnectTimeout());
+            connection.setReadTimeout(httpParam.getReadTimeout());
+            if (!Strings.isNullOrEmpty(httpParam.getContentType())) {
+                connection.setRequestProperty(""Content-Type"", httpParam.getContentType());
+            }
+            connection.connect();
+            String data = httpParam.getData();
+            if (httpParam.isPostMethod() && !Strings.isNullOrEmpty(data)) {
+                DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());
+                if (httpParam.isEnableTransparentShardingContext()) {
+                    StringBuilder builder = new StringBuilder(data);
+                    builder.append(""&"").append(HttpJobProperties.TRANSPARENT_SHARDING_CONTEXT_KEY);
+                    builder.append(""="").append(GsonFactory.getGson().toJson(shardingContext));
+                    data = builder.toString();
+                }
+                dataOutputStream.write(data.getBytes(StandardCharsets.UTF_8));
+                dataOutputStream.flush();
+                dataOutputStream.close();
+            }
+            int code = connection.getResponseCode();
+            if (code != 200) {
+                throw new JobExecutionException(""Http job %s executed with response code %d"", jobConfig.getJobName(), code);
+            }
+            bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));
+            StringBuilder result = new StringBuilder();
+            String line;
+            while ((line = bufferedReader.readLine()) != null) {
+                result.append(line);
+            }
+            log.debug(""http job execute result : {}"", result.toString());
+        } catch (IOException ex) {","[{'comment': 'catch (IOException ex) should be catch (`final` IOException ex)', 'commenter': 'terrymanu'}]"
1345,elasticjob-executor/elasticjob-executor-type/elasticjob-http-executor/src/main/java/org/apache/shardingsphere/elasticjob/http/executor/HttpJobExecutor.java,"@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.http.executor;
+
+import com.google.common.base.Strings;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.executor.item.impl.TypedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.http.pojo.HttpParam;
+import org.apache.shardingsphere.elasticjob.http.props.HttpJobProperties;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionException;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import java.io.BufferedReader;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Properties;
+
+/**
+ * Http job executor.
+ */
+@Slf4j
+public final class HttpJobExecutor implements TypedJobItemExecutor {
+    
+    @Override
+    public void process(final ElasticJob elasticJob, final JobConfiguration jobConfig, final JobFacade jobFacade, final ShardingContext shardingContext) {
+        HttpParam httpParam = getHttpParam(jobConfig.getProps());
+        HttpURLConnection connection = null;
+        BufferedReader bufferedReader = null;
+        try {
+            URL realUrl = new URL(httpParam.getUrl());
+            connection = (HttpURLConnection) realUrl.openConnection();
+            connection.setRequestMethod(httpParam.getMethod());
+            connection.setDoOutput(httpParam.isPostMethod());
+            connection.setConnectTimeout(httpParam.getConnectTimeout());
+            connection.setReadTimeout(httpParam.getReadTimeout());
+            if (!Strings.isNullOrEmpty(httpParam.getContentType())) {
+                connection.setRequestProperty(""Content-Type"", httpParam.getContentType());
+            }
+            connection.connect();
+            String data = httpParam.getData();
+            if (httpParam.isPostMethod() && !Strings.isNullOrEmpty(data)) {
+                DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());
+                if (httpParam.isEnableTransparentShardingContext()) {
+                    StringBuilder builder = new StringBuilder(data);
+                    builder.append(""&"").append(HttpJobProperties.TRANSPARENT_SHARDING_CONTEXT_KEY);
+                    builder.append(""="").append(GsonFactory.getGson().toJson(shardingContext));
+                    data = builder.toString();
+                }
+                dataOutputStream.write(data.getBytes(StandardCharsets.UTF_8));
+                dataOutputStream.flush();
+                dataOutputStream.close();
+            }
+            int code = connection.getResponseCode();
+            if (code != 200) {
+                throw new JobExecutionException(""Http job %s executed with response code %d"", jobConfig.getJobName(), code);
+            }
+            bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));
+            StringBuilder result = new StringBuilder();
+            String line;
+            while ((line = bufferedReader.readLine()) != null) {
+                result.append(line);
+            }
+            log.debug(""http job execute result : {}"", result.toString());
+        } catch (IOException ex) {
+            throw new JobExecutionException(ex);
+        } finally {
+            try {
+                if (bufferedReader != null) {","[{'comment': '`bufferedReader != null` should be `null != bufferedReader`', 'commenter': 'terrymanu'}]"
1357,docs/content/user-manual/elasticjob-lite/configuration/props.cn.md,"@@ -35,3 +35,19 @@ ElasticJob 提供属性配置的方式为不同类型的作业提供定制化配
 | *名称*               | *数据类型*   | *说明*           | *默认值*  |
 | ------------------- | ----------- | ---------------- | -------- |
 | script.command.line | String      | 脚本内容或运行路径 | -        |
+
+### HTTP作业
+
+类型：HTTP
+
+可配置属性：
+
+| *名称*                | *数据类型*   | *说明*             |  *默认值*  |
+| -------------------  | ----------- | ----------------   | --------  |
+| http.url             | String      | http请求url         | -          |
+| http.method          | String      | http请求方法        | -         |
+| http.data            | String      | http请求数据        | -         |
+| http.connect.timeout | String      | http连接超时        | 3000ms    |","[{'comment': '`http.connect.timeout` should be rename to `http.connect.timeout.milliseconds`', 'commenter': 'terrymanu'}]"
1357,docs/content/user-manual/elasticjob-lite/configuration/props.cn.md,"@@ -35,3 +35,19 @@ ElasticJob 提供属性配置的方式为不同类型的作业提供定制化配
 | *名称*               | *数据类型*   | *说明*           | *默认值*  |
 | ------------------- | ----------- | ---------------- | -------- |
 | script.command.line | String      | 脚本内容或运行路径 | -        |
+
+### HTTP作业
+
+类型：HTTP
+
+可配置属性：
+
+| *名称*                | *数据类型*   | *说明*             |  *默认值*  |
+| -------------------  | ----------- | ----------------   | --------  |
+| http.url             | String      | http请求url         | -          |
+| http.method          | String      | http请求方法        | -         |
+| http.data            | String      | http请求数据        | -         |
+| http.connect.timeout | String      | http连接超时        | 3000ms    |
+| http.read.timeout    | String      | http读超时          | 5000ms    |","[{'comment': '`http. read.timeout` should be rename to `http.connect. read.milliseconds`', 'commenter': 'terrymanu'}]"
1358,elasticjob-infra/elasticjob-tracing/elasticjob-tracing-api/src/test/java/org/apache/shardingsphere/elasticjob/tracing/fixture/TestTracingListener.java,"@@ -41,7 +42,13 @@ public void listen(final JobExecutionEvent jobExecutionEvent) {
     public void listen(final JobStatusTraceEvent jobStatusTraceEvent) {
         jobEventCaller.call();
     }
-    
+
+    @Override
+    public void listen(DagJobExecutionEvent dagJobExecutionEvent) {","[{'comment': 'Parameter dagJobExecutionEvent should be final.', 'commenter': 'TeslaCN'}]"
1358,elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/ElasticJobExecutor.java,"@@ -86,6 +86,19 @@ public void execute() {
         } catch (final JobExecutionEnvironmentException cause) {
             jobErrorHandler.handleException(jobConfig.getJobName(), cause);
         }
+","[{'comment': 'Please remove useless blank line', 'commenter': 'terrymanu'}]"
1358,elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/ElasticJobExecutor.java,"@@ -86,6 +86,19 @@ public void execute() {
         } catch (final JobExecutionEnvironmentException cause) {
             jobErrorHandler.handleException(jobConfig.getJobName(), cause);
         }
+
+        if (jobFacade.isDagJob()) {
+            try {
+                jobFacade.dagStatesCheck();
+                jobFacade.dagJobDependenciesCheck();
+                //CHECKSTYLE:OFF
+            } catch (Exception e) {
+                //CHECKSTYLE:ON
+                log.error(""DAG job - {} exception! Check !"", jobConfig.getJobName(), e);","[{'comment': 'Throw exception is better than log only if configuration error', 'commenter': 'terrymanu'}]"
1358,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/dag/DagJobStates.java,"@@ -0,0 +1,73 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.dag;
+
+import org.apache.commons.lang3.StringUtils;
+
+public enum DagJobStates {","[{'comment': 'Need docs', 'commenter': 'Technoboy-'}]"
1358,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/dag/DagService.java,"@@ -0,0 +1,557 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.dag;
+
+import com.google.common.base.Joiner;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.time.DateFormatUtils;
+import org.apache.curator.framework.CuratorFramework;
+import org.apache.curator.framework.recipes.cache.ChildData;
+import org.apache.curator.framework.recipes.cache.CuratorCache;
+import org.apache.curator.framework.recipes.cache.CuratorCacheListener;
+import org.apache.curator.framework.recipes.locks.InterProcessMutex;
+import org.apache.curator.framework.recipes.queue.DistributedDelayQueue;
+import org.apache.curator.framework.recipes.queue.QueueBuilder;
+import org.apache.curator.framework.recipes.queue.QueueSerializer;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobDagConfiguration;
+import org.apache.shardingsphere.elasticjob.infra.concurrent.BlockUtils;
+import org.apache.shardingsphere.elasticjob.infra.env.IpUtils;
+import org.apache.shardingsphere.elasticjob.infra.exception.DagRuntimeException;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
+import org.apache.shardingsphere.elasticjob.lite.internal.state.JobStateEnum;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.tracing.JobEventBus;
+import org.apache.shardingsphere.elasticjob.tracing.event.DagJobExecutionEvent;
+
+import java.io.UnsupportedEncodingException;
+import java.lang.management.ManagementFactory;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Job dag service.
+ */
+@Slf4j
+public class DagService implements CuratorCacheListener {
+    public static final String ROOT_JOB = ""self"";
+
+    private static final String DAG_LATCH_PATH = ""/daglatch/"";
+
+    private static final int DEFAULT_RETRY_INTERVAL = 30;
+
+    private static final String RETRY_PATH = ""/dagretry/%s/%s"";
+
+    private final DagNodeStorage dagNodeStorage;
+
+    private final JobDagConfiguration jobDagConfig;
+
+    private final String jobName;
+
+    private final String dagName;
+
+    private final InterProcessMutex mutex;
+
+    private final CoordinatorRegistryCenter regCenter;
+
+    private final JobEventBus jobEventBus;
+
+    private CuratorCache jobStateCache;
+
+    private DistributedDelayQueue<String> delayQueue;
+
+    public DagService(final CoordinatorRegistryCenter regCenter, final String jobName, final JobEventBus jobEventBus, final JobDagConfiguration jobDagConfig) {
+        this.jobDagConfig = jobDagConfig;
+        this.regCenter = regCenter;
+        this.jobName = jobName;
+        this.dagNodeStorage = new DagNodeStorage(regCenter, jobDagConfig.getDagName(), jobName);
+        this.dagName = jobDagConfig.getDagName();
+        this.jobEventBus = jobEventBus;
+        if (StringUtils.equals(jobDagConfig.getDagDependencies(), ROOT_JOB)) {
+            this.mutex = new InterProcessMutex((CuratorFramework) regCenter.getRawClient(), DAG_LATCH_PATH + dagName);
+        } else {
+            this.mutex = null;
+        }
+        regDagConfig();
+    }
+
+    public DagService(final CoordinatorRegistryCenter regCenter, final String dagName, final DagNodeStorage dagNodeStorage) {
+        this.regCenter = regCenter;
+        this.dagName = dagName;
+        this.dagNodeStorage = dagNodeStorage;
+        this.jobName = """";
+        this.jobDagConfig = null;
+        this.mutex = null;
+        this.jobStateCache = null;
+        this.delayQueue = null;
+        this.jobEventBus = null;
+    }
+
+    /**
+     * Init delay queue for retry jobs.
+     *
+     * @return DistributedDelayQueue
+     */
+    private DistributedDelayQueue<String> initDelayQueue() {
+        String retryPath = String.format(RETRY_PATH, dagName, jobName);
+        DistributedDelayQueue<String> delayQueue = QueueBuilder.builder((CuratorFramework) regCenter.getRawClient(), new JobRetryTrigger(regCenter, dagName), new QueueSerializer<String>() {
+            @Override
+            public byte[] serialize(final String item) {
+                try {
+                    return item.getBytes(""utf-8"");
+                } catch (UnsupportedEncodingException e) {
+                    log.error(""Dag-{}[{}] Init delay queue exception."", dagName, jobName, e);
+                }
+                return null;
+            }
+
+            @Override
+            public String deserialize(final byte[] bytes) {
+                return new String(bytes);
+            }
+        }, retryPath).buildDelayQueue();
+
+        try {
+            delayQueue.start();
+            log.info(""Dag-{}[{}] start delay queue, path={}"", dagName, jobName, retryPath);
+            //CHECKSTYLE:OFF
+        } catch (Exception e) {
+            //CHECKSTYLE:ON
+            log.error(""Dag-{}[{}] start delay queue Exception, path={}"", dagName, jobName, retryPath, e);
+        }
+
+        return delayQueue;
+    }
+
+    private void startJobStateListener() {
+        jobStateCache.listenable().addListener(this);
+        try {
+            jobStateCache.start();
+            postEvent(DagJobStates.REG.getValue(), ""Job register success"");
+            //CHECKSTYLE:OFF
+        } catch (Exception exp) {
+            //CHECKSTYLE:ON
+            log.error(""Start dag-{} job-{} state path listener Exception."", dagName, jobName, exp);
+            // ignore
+            postEvent(DagJobStates.REG.getValue(), ""Job register Error:"" + exp.getMessage());
+        }
+        log.info(""Dag-{} job-{} state path listener has started success."", dagName, jobName);
+    }
+
+    private void stopJobStateListener() {
+        jobStateCache.close();
+    }
+
+    /**
+     * Is dag root job.
+     *
+     * @return boolean is dag root job
+     */
+    public boolean isDagRootJob() {
+        return StringUtils.equals(jobDagConfig.getDagDependencies(), ""self"");
+    }
+
+    /**
+     * current dag status.
+     *
+     * @return DagStates
+     */
+    public DagStates getDagStates() {
+        return DagStates.of(this.dagNodeStorage.currentDagStates());
+    }
+
+    /**
+     * Persist Dag config into zk.
+     * always overwrite.
+     */
+    private void regDagConfig() {
+        this.dagNodeStorage.persistDagConfig(genDependenciesString());
+        this.delayQueue = initDelayQueue();
+        this.jobStateCache = CuratorCache.build((CuratorFramework) regCenter.getRawClient(), this.dagNodeStorage.pathOfJobNodeState());
+        this.startJobStateListener();
+    }
+
+    private String genDependenciesString() {
+        return jobDagConfig.getDagDependencies();
+    }
+
+    /**
+     * 1. select leader ;
+     * 2. ReGraph DAG ;
+     * 3. Change DAG states to running
+     */
+    public void changeDagStatesAndReGraph() {
+        if (null == mutex) {
+            log.error(""Need root job when change dag states and regraph!"");
+            throw new DagRuntimeException(""Need root job when change dag states and regraph!"");
+        }
+
+        if (!acquireDagLeader()) {
+            blockUntilCompleted();
+            return;
+        }
+
+        if (getDagStates() == DagStates.RUNNING) {
+            log.info(""Dag-{} states already RUNNING"", dagName);
+            return;
+        }
+
+        try {
+            String batchNo = getBatchNo();
+            Map<String, Set<String>> allDagNode = dagNodeStorage.getAllDagConfigJobs();
+            checkCycle(allDagNode);
+            dagNodeStorage.initDagGraph(allDagNode, batchNo);
+            dagNodeStorage.updateDagStates(DagStates.RUNNING);
+            dagNodeStorage.updateDagJobStates(JobStateEnum.RUNNING);
+            // create graph event
+            postEvent(DagJobStates.INIT.getValue(), ""Create graph success"");
+            //CHECKSTYLE:OFF
+        } catch (Exception ex) {
+            //CHECKSTYLE:ON
+            postEvent(DagJobStates.INIT.getValue(), ""Create graph error:"" + ex.getMessage());
+        } finally {
+            releaseDagLeader();
+        }
+    }
+
+    private void blockUntilCompleted() {
+        int count = 0;
+        while (getDagStates() != DagStates.RUNNING) {
+            count++;
+            log.debug(""DAG '{}' sleep short time until DAG graph completed. {}"", dagName, count);
+            BlockUtils.sleep(300L);
+            if (count > 200) {
+                log.error(""Dag-{} Wait a long time with Dag graph NOT complete"", dagName);
+                throw new DagRuntimeException(""Dag graph not complete!"");
+            }
+        }
+    }
+
+    private boolean acquireDagLeader() {
+        try {
+            return mutex.acquire(200, TimeUnit.MILLISECONDS);
+            //CHECKSTYLE:OFF
+        } catch (Exception exp) {
+            //CHECKSTYLE:ON
+            log.debug(""Dag-{} acquire lock error!"", dagName, exp);
+        }
+        return false;
+    }
+
+    private void releaseDagLeader() {
+        try {
+            if (mutex.isAcquiredInThisProcess()) {
+                mutex.release();
+            }
+            //CHECKSTYLE:OFF
+        } catch (Exception exp) {
+            //CHECKSTYLE:ON
+            log.debug(""Dag-{} release lock error!"", dagName, exp);
+        }
+    }
+
+    /**
+     * Check dag has cycle.
+     *
+     * @param allDagNode dag config info.
+     */
+    private void checkCycle(final Map<String, Set<String>> allDagNode) {
+        Map<String, Set<String>> cloneMap = Maps.newHashMap();
+        allDagNode.forEach((key, value) -> cloneMap.put(key, Sets.newHashSet(value)));
+
+        while (removeSelf(cloneMap)) {
+            if (log.isDebugEnabled()) {
+                log.debug(""Dag-{} remove root job."", dagName);
+            }
+        }
+        if (!cloneMap.isEmpty()) {
+            log.error(""Dag {} find cycle {}"", dagName, cloneMap.keySet().size());
+            printCycleNode(cloneMap);
+            throw new DagRuntimeException(""Dag job find cycles"");
+        }
+        log.info(""Dag {} checkCycle success"", dagName);
+    }
+
+    private void printCycleNode(final Map<String, Set<String>> cloneMap) {
+        cloneMap.forEach((k, v) -> {
+            log.error(""{} has cycle with {}"", k, Joiner.on(""|"").join(v));
+        });
+    }
+
+    private boolean removeSelf(final Map<String, Set<String>> cloneMap) {
+        Iterator<Map.Entry<String, Set<String>>> iterator = cloneMap.entrySet().iterator();
+        boolean removed = false;
+        while (iterator.hasNext()) {
+            Map.Entry<String, Set<String>> next = iterator.next();
+            Set<String> value = next.getValue();
+            value.remove(""self"");
+            if (value.isEmpty()) {
+                markKeyAsSelf(cloneMap, next.getKey());
+                iterator.remove();
+                removed = true;
+            }
+        }
+        return removed;
+    }
+
+    private void markKeyAsSelf(final Map<String, Set<String>> cloneMap, final String key) {
+        cloneMap.values().forEach(s -> s.remove(key));
+    }
+
+    private String getBatchNo() {
+        String date = DateFormatUtils.format(new Date(), ""yyMMddHHmmss"");
+        return dagName + IpUtils.getIp() + ManagementFactory.getRuntimeMXBean().getName().split(""@"")[0] + date;
+    }
+
+    /**
+     * When dag job start run ,check it's dependencies jobs states.
+     */
+    public void checkJobDependenciesState() {
+        DagJobStates currentJobRunStates = dagNodeStorage.getDagJobRunStates(jobName);
+        if (currentJobRunStates == DagJobStates.SUCCESS || currentJobRunStates == DagJobStates.FAIL) {
+            log.info(""DAG- {} job- {} 's states is {},Can not run again!"", jobDagConfig.getDagName(), jobName, currentJobRunStates);
+            throw new DagRuntimeException(""Dag job has been completed"");
+        }
+        if (isDagRootJob()) {
+            log.debug(""DAG {} job {} is root,No deps."", jobDagConfig.getDagName(), jobName);
+            return;
+        }
+
+        // 要求dep skip 或 success","[{'comment': 'Need to change to English', 'commenter': 'Technoboy-'}]"
1375,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/TransientProducerRepository.java,"@@ -34,16 +33,7 @@
     
     synchronized void put(final JobKey jobKey, final String jobName) {
         remove(jobName);
-        List<String> taskList = cronTasks.get(jobKey);
-        if (null == taskList) {
-            taskList = new CopyOnWriteArrayList<>();
-            taskList.add(jobName);
-            cronTasks.put(jobKey, taskList);
-            return;
-        }
-        if (!taskList.contains(jobName)) {
-            taskList.add(jobName);
-        }
+        cronTasks.computeIfAbsent(jobKey, k -> Collections.singletonList(jobName));","[{'comment': 'This change maybe incorrect because the `cronTasks` may include multiple job names, not for singletonList only', 'commenter': 'terrymanu'}, {'comment': 'Thank you very much for your review, so the previous code should be missing, right? On line 45, it is not updated', 'commenter': 'CalvinKirs'}]"
1404,elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/RequestBodyDeserializerFactory.java,"@@ -84,7 +84,10 @@ public static RequestBodyDeserializer getRequestBodyDeserializer(final String co
                 deserializer = REQUEST_BODY_DESERIALIZERS.get(contentType);
             }
         }
-        return deserializer != MISSING_DESERIALIZER ? deserializer : null;
+        if (MISSING_DESERIALIZER == deserializer) {
+            throw new RequestBodyDeserializerNotFoundException(contentType);
+        }
+        return deserializer;","[{'comment': 'The result variable should named as `result`', 'commenter': 'terrymanu'}]"
1404,elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/RequestBodyDeserializerNotFoundException.java,"@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.restful.deserializer;
+
+import java.text.MessageFormat;
+
+/**
+ * {@link RequestBodyDeserializer} not found for specific MIME type.
+ */
+public class RequestBodyDeserializerNotFoundException extends RuntimeException {","[{'comment': 'Please add final if class is not design for extension', 'commenter': 'terrymanu'}]"
1404,elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerFactory.java,"@@ -84,7 +84,10 @@ public static ResponseBodySerializer getResponseBodySerializer(final String cont
                 serializer = RESPONSE_BODY_SERIALIZERS.get(contentType);
             }
         }
-        return serializer != MISSING_SERIALIZER ? serializer : null;
+        if (MISSING_SERIALIZER == serializer) {
+            throw new ResponseBodySerializerNotFoundException(contentType);
+        }
+        return serializer;","[{'comment': 'The result variable should named as `result`', 'commenter': 'terrymanu'}]"
1404,elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerNotFoundException.java,"@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.restful.serializer;
+
+import java.text.MessageFormat;
+
+/**
+ * {@link ResponseBodySerializer} not found for specific MIME type.
+ */
+public class ResponseBodySerializerNotFoundException extends RuntimeException {","[{'comment': 'Add final', 'commenter': 'Technoboy-'}]"
1458,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/pojo/EmailConfigurationPOJO.java,"@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *  
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.infra.pojo;
+
+import lombok.Getter;
+import lombok.Setter;
+import java.nio.charset.Charset;
+
+/**
+ * Job configuration POJO.
+ */
+@Getter
+@Setter
+public final class EmailConfigurationPOJO {
+    
+    private String host;
+    
+    private Integer port;
+
+    private String username;
+
+    private String password;
+
+    private String protocol = ""smtp"";
+
+    private Charset encoding = Charset.forName(""UTF-8"");","[{'comment': 'Maybe using java.nio.charset.StandardCharsets.UTF_8 is better?', 'commenter': 'TeslaCN'}, {'comment': 'Yes, name it UTF_8', 'commenter': 'Technoboy-'}, {'comment': "" I'll try this"", 'commenter': 'luky116'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,63 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+    <name>${project.artifactId}</name>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-infra-common</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>log4j-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+</project>","[{'comment': 'Need a blank line.', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/pom.xml,"@@ -0,0 +1,35 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <artifactId>elasticjob</artifactId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <artifactId>elasticjob-error-handler</artifactId>
+    <packaging>pom</packaging>
+    <name>${project.artifactId}</name>
+
+    <modules>
+        <module>elasticjob-error-handler-dingtalk</module>
+    </modules>
+</project>","[{'comment': 'Need a blank line.', 'commenter': 'TeslaCN'}]"
1462,examples/elasticjob-example-lite-java/src/main/resources/conf/dingtalk.properties,"@@ -0,0 +1,24 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+
+# Elasticjob-error-dingtalk is required to introduce this configuration
+# It can also be configured with startup parameters: -Dwebhook=param1  -Dkeyword=param2  -Dsecret=param3
+
+webhook=https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f
+keyword=\u5173\u952e\u5b57
+secret=SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4","[{'comment': 'Need a blank line.', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,63 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+    <name>${project.artifactId}</name>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-infra-common</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>","[{'comment': '""provided"" scope is recommended.', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,144 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.Maps;
+import com.google.gson.JsonObject;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionException;
+import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+import java.util.Map;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (dingtalkConfiguration == null) {
+            dingtalkConfiguration = DingtalkEnvironment.getINSTANCE().getDingtalkConfiguration();
+        }
+        HttpURLConnection connection = null;
+        try {
+            URL url = getUrl();
+            connection = (HttpURLConnection) url.openConnection();
+            connection.setRequestMethod(""POST"");
+            connection.setDoOutput(true);
+            connection.setConnectTimeout(dingtalkConfiguration.getConnectTimeout());
+            connection.setReadTimeout(dingtalkConfiguration.getReadTimeout());
+            connection.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8"");
+            connection.connect();
+            OutputStream outputStream = connection.getOutputStream();
+            String msg = getMsg(jobName, cause);
+            String paramJson = getParamJson(msg);
+            outputStream.write(paramJson.getBytes(StandardCharsets.UTF_8));
+            int code = connection.getResponseCode();
+            if (HttpURLConnection.HTTP_OK == code) {
+                InputStream resultInputStream = connection.getInputStream();
+                StringBuilder result = new StringBuilder();
+                try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(resultInputStream, StandardCharsets.UTF_8))) {
+                    String line;
+                    while (null != (line = bufferedReader.readLine())) {
+                        result.append(line);
+                    }
+                }
+                JsonObject resp = GsonFactory.getGson().fromJson(result.toString(), JsonObject.class);
+                if (!""0"".equals(resp.get(""errcode"").getAsString())) {
+                    log.error(""Job '{}' exception occur in job processing, But the notification Dingtalk failure, error is : {}"", jobName, resp.get(""errmsg"").getAsString(), cause);
+                }
+            }
+        } catch (IOException | NoSuchAlgorithmException | InvalidKeyException ex) {
+            throw new JobExecutionException(ex);
+        } finally {
+            if (null != connection) {
+                connection.disconnect();
+            }
+        }
+    }
+    
+    private String getParamJson(final String msg) {
+        Map<String, Object> param = Maps.newLinkedHashMap();","[{'comment': '<p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as\r\ndeprecated. Instead, use the {@code LinkedHashMap} constructor directly, taking advantage of\r\nthe new <a href=""http://goo.gl/iz2Wi"">""diamond"" syntax</a>.\r\n', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandlerTest.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.junit.Test;
+
+public final class DingtalkJobErrorHandlerTest {
+    
+    @Test
+    public void assertHandleException() {
+        DingtalkJobErrorHandler actual = new DingtalkJobErrorHandler();
+        Throwable cause = new RuntimeException(""test"");
+        actual.handleException(""test_job"", cause);
+    }
+    
+    @Test
+    public void assertHandleExceptionWithSystemProperties() {
+        System.getProperties().setProperty(DingtalkEnvironment.EnvironmentArgument.WEBHOOK.getKey(),
+                ""https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f"");
+        System.getProperties().setProperty(DingtalkEnvironment.EnvironmentArgument.SECRET.getKey(),
+                ""SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4"");
+        System.getProperties().setProperty(DingtalkEnvironment.EnvironmentArgument.KEYWORD.getKey(), ""关键字1111"");","[{'comment': 'English is required.', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/env/DingtalkEnvironment.java,"@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.env;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+/**
+ * Bootstrap env.
+ */
+@Slf4j
+public final class DingtalkEnvironment {
+    
+    @Getter
+    private static final DingtalkEnvironment INSTANCE = new DingtalkEnvironment();
+    
+    private static final String PROPERTIES_PATH = ""conf/dingtalk.properties"";
+    
+    private final Properties properties;
+    
+    private DingtalkEnvironment() {
+        properties = getProperties();
+    }
+    
+    private Properties getProperties() {
+        Properties result = new Properties();
+        try (InputStream fileInputStream = this.getClass().getClassLoader().getResourceAsStream(PROPERTIES_PATH)) {
+            if (fileInputStream != null) {
+                result.load(fileInputStream);
+            }
+        } catch (final IOException ex) {
+            log.warn(""Can not load properties file from path: '{}'."", PROPERTIES_PATH);
+        }
+        setPropertiesByEnv(result);
+        return result;
+    }
+    
+    private void setPropertiesByEnv(final Properties prop) {
+        for (EnvironmentArgument each : EnvironmentArgument.values()) {
+            String key = each.getKey();
+            String value = System.getProperties().getProperty(key);
+            if (!Strings.isNullOrEmpty(value)) {
+                log.info(""Load property {} with value {} from ENV."", key, value);
+                prop.setProperty(each.getKey(), value);
+            }
+        }
+    }
+    
+    /**
+     * Get dingtalk configuration.
+     *
+     * @return dingtalk configuration
+     */
+    public DingtalkConfiguration getDingtalkConfiguration() {
+        String webhook = getValue(EnvironmentArgument.WEBHOOK);
+        String keyword = getValue(EnvironmentArgument.KEYWORD);
+        String secret = getValue(EnvironmentArgument.SECRET);
+        String connectTimeout = getValue(EnvironmentArgument.CONNECT_TIMEOUT);
+        String readTimeout = getValue(EnvironmentArgument.READ_TIMEOUT);
+        return new DingtalkConfiguration(webhook, keyword, secret, Integer.parseInt(connectTimeout), Integer.parseInt(readTimeout));
+    }
+    
+    private String getValue(final EnvironmentArgument environmentArgument) {
+        String result = properties.getProperty(environmentArgument.getKey(), environmentArgument.getDefaultValue());
+        if (environmentArgument.isRequired()) {
+            Preconditions.checkState(!Strings.isNullOrEmpty(result), String.format(""Property `%s` is required."", environmentArgument.getKey()));
+        }
+        return result;
+    }
+    
+    /**
+     * Env args.
+     */
+    @RequiredArgsConstructor
+    @Getter
+    public enum EnvironmentArgument {
+        
+        WEBHOOK(""webhook"", """", true),
+        
+        KEYWORD(""keyword"", """", false),
+        
+        SECRET(""secret"", """", false),
+        
+        CONNECT_TIMEOUT(""connectTimeout"", ""3000"", false),
+        
+        READ_TIMEOUT(""readTimeout"", ""5000"", false);","[{'comment': 'I think the name of keys are too simple that may increase the probability of conflict. Maybe we can define a prefix to prevent conflict. What do you think?', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,144 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.Maps;
+import com.google.gson.JsonObject;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionException;
+import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+import java.util.Map;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (dingtalkConfiguration == null) {
+            dingtalkConfiguration = DingtalkEnvironment.getINSTANCE().getDingtalkConfiguration();","[{'comment': 'How about name it using camel-case? such as `org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry#getInstance`', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,144 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.Maps;
+import com.google.gson.JsonObject;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionException;
+import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+import java.util.Map;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (dingtalkConfiguration == null) {
+            dingtalkConfiguration = DingtalkEnvironment.getINSTANCE().getDingtalkConfiguration();
+        }
+        HttpURLConnection connection = null;
+        try {
+            URL url = getUrl();
+            connection = (HttpURLConnection) url.openConnection();
+            connection.setRequestMethod(""POST"");
+            connection.setDoOutput(true);
+            connection.setConnectTimeout(dingtalkConfiguration.getConnectTimeout());
+            connection.setReadTimeout(dingtalkConfiguration.getReadTimeout());
+            connection.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8"");
+            connection.connect();
+            OutputStream outputStream = connection.getOutputStream();
+            String msg = getMsg(jobName, cause);
+            String paramJson = getParamJson(msg);
+            outputStream.write(paramJson.getBytes(StandardCharsets.UTF_8));
+            int code = connection.getResponseCode();
+            if (HttpURLConnection.HTTP_OK == code) {
+                InputStream resultInputStream = connection.getInputStream();
+                StringBuilder result = new StringBuilder();
+                try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(resultInputStream, StandardCharsets.UTF_8))) {
+                    String line;
+                    while (null != (line = bufferedReader.readLine())) {
+                        result.append(line);
+                    }
+                }
+                JsonObject resp = GsonFactory.getGson().fromJson(result.toString(), JsonObject.class);
+                if (!""0"".equals(resp.get(""errcode"").getAsString())) {
+                    log.error(""Job '{}' exception occur in job processing, But the notification Dingtalk failure, error is : {}"", jobName, resp.get(""errmsg"").getAsString(), cause);","[{'comment': 'The exception has already <b>""occurred""</b>. I think using past tense is better. \r\n```\r\n""An exception has occurred in Job \'{}\'. But failed to send alert by Dingtalk because of {}""\r\n```', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,144 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.Maps;
+import com.google.gson.JsonObject;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionException;
+import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+import java.util.Map;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (dingtalkConfiguration == null) {","[{'comment': 'Constants on the left.', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandlerTest.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.junit.Test;
+
+public final class DingtalkJobErrorHandlerTest {","[{'comment': 'Test case need precised assertion.', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import com.google.gson.JsonObject;
+import lombok.Setter;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    @Setter
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    @SneakyThrows
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (null == dingtalkConfiguration) {
+            dingtalkConfiguration = DingtalkEnvironment.getInstance().getDingtalkConfiguration();
+        }
+        CloseableHttpClient httpclient = HttpClients.createDefault();","[{'comment': 'Need to remove these logic outside the method.', 'commenter': 'Technoboy-'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/config/DingtalkConfiguration.java,"@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.config;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@RequiredArgsConstructor
+public class DingtalkConfiguration {","[{'comment': '1. suggest a `final` class.\r\n2. Please add class comment.', 'commenter': 'dongzl'}]"
1462,examples/elasticjob-example-lite-java/src/main/resources/conf/elasticjob-dingtalk.properties,"@@ -0,0 +1,23 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+","[{'comment': 'please remove unused blank line.', 'commenter': 'dongzl'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/test/resources/conf/elasticjob-dingtalk.properties,"@@ -0,0 +1,22 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# It can also be configured through startup parameters, E.g: -Delasticjob.dingtalk.webhook=param1  -Delasticjob.dingtalk.keyword=param2  -Delasticjob.dingtalk.secret=param3
+elasticjob.dingtalk.webhook=http://localhost:9876/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f
+elasticjob.dingtalk.keyword=keyword
+elasticjob.dingtalk.secret=SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4
+","[{'comment': 'please remove unused blank line.', 'commenter': 'dongzl'}]"
1462,examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/JavaErrorJob.java,"@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.example.job.simple;
+
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
+
+public class JavaErrorJob implements SimpleJob {","[{'comment': '1. suggest `final` class.\r\n2. add class comment.', 'commenter': 'dongzl'}]"
1462,examples/elasticjob-example-lite-java/pom.xml,"@@ -44,7 +44,12 @@
             <groupId>org.apache.shardingsphere.elasticjob</groupId>
             <artifactId>elasticjob-lite-core</artifactId>
         </dependency>
-        
+","[{'comment': 'please remove unused blank line.', 'commenter': 'dongzl'}]"
1462,examples/elasticjob-example-lite-java/pom.xml,"@@ -44,7 +44,12 @@
             <groupId>org.apache.shardingsphere.elasticjob</groupId>
             <artifactId>elasticjob-lite-core</artifactId>
         </dependency>
-        
+
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+        </dependency>
+","[{'comment': 'please remove unused blank line.', 'commenter': 'dongzl'}]"
1462,examples/pom.xml,"@@ -73,6 +73,13 @@
                 <artifactId>elasticjob-cloud-executor</artifactId>
                 <version>${elastic-job.version}</version>
             </dependency>
+
+            <dependency>
+                <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+                <groupId>org.apache.shardingsphere.elasticjob</groupId>
+                <version>${elastic-job.version}</version>
+            </dependency>
+
             ","[{'comment': 'please remove unused blank line.', 'commenter': 'dongzl'}]"
1462,examples/pom.xml,"@@ -73,6 +73,13 @@
                 <artifactId>elasticjob-cloud-executor</artifactId>
                 <version>${elastic-job.version}</version>
             </dependency>
+","[{'comment': 'please remove unused blank line.', 'commenter': 'dongzl'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/impl/fixture/DingtalkInternalController.java,"@@ -0,0 +1,91 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl.fixture;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.restful.Http;
+import org.apache.shardingsphere.elasticjob.restful.RestfulController;
+import org.apache.shardingsphere.elasticjob.restful.annotation.Mapping;
+import org.apache.shardingsphere.elasticjob.restful.annotation.Param;
+import org.apache.shardingsphere.elasticjob.restful.annotation.ParamSource;
+import org.apache.shardingsphere.elasticjob.restful.annotation.RequestBody;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.UnsupportedEncodingException;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Map;
+
+@Slf4j
+public final class DingtalkInternalController implements RestfulController {
+    
+    private static final String ACCESS_TOKEN = ""42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f"";
+    
+    private static final String KEYWORD = ""keyword"";
+    
+    private static final String SECRET = ""SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4"";
+    
+    
+    /**
+     * Send Dingtalk message.
+     *
+     * @param accessToken access token
+     * @param timestamp timestamp
+     * @param sign sign
+     * @param body body
+     * @return Send Result.
+     */
+    @SneakyThrows
+    @Mapping(method = Http.POST, path = ""/send"")
+    public String send(@Param(name = ""access_token"", source = ParamSource.QUERY) final String accessToken,
+                       @Param(name = ""timestamp"", source = ParamSource.QUERY, required = false) final Long timestamp,
+                       @Param(name = ""sign"", source = ParamSource.QUERY, required = false) final String sign,
+                       @RequestBody final Map<String, Object> body) {
+        if (!ACCESS_TOKEN.equals(accessToken)) {
+            return GsonFactory.getGson().toJson(ImmutableMap.of(""errcode"", 300001, ""errmsg"", ""token is not exist""));
+        }
+        String content = Map.class.cast(body.get(""text"")).get(""content"").toString();
+        if (!content.startsWith(KEYWORD)) {
+            return GsonFactory.getGson().toJson(ImmutableMap.of(""errcode"", 310000, ""errmsg"", ""keywords not in content, more: [https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq]""));
+        }
+        if (!Strings.isNullOrEmpty(sign)) {
+            Preconditions.checkNotNull(timestamp);
+            String checkSign = sign(timestamp);
+            if (!sign.equals(checkSign)) {
+                return GsonFactory.getGson().toJson(ImmutableMap.of(""errcode"", 310000, ""errmsg"", ""sign not match, more: [https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq]""));
+            }
+        }
+        return GsonFactory.getGson().toJson(ImmutableMap.of(""errcode"", 0, ""errmsg"", ""ok""));
+    }
+    
+    private String sign(final Long timestamp) throws NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeyException {
+        String stringToSign = timestamp + ""\n"" + SECRET;
+        System.out.println(stringToSign);
+        Mac mac = Mac.getInstance(""HmacSHA256"");
+        mac.init(new SecretKeySpec(SECRET.getBytes(""UTF-8""), ""HmacSHA256""));
+        byte[] signData = mac.doFinal(stringToSign.getBytes(""UTF-8""));
+        return new String(Base64.getEncoder().encode(signData), ""UTF-8"");","[{'comment': 'Consider using `java.nio.charset.StandardCharsets#UTF_8`', 'commenter': 'TeslaCN'}]"
1462,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import com.google.gson.JsonObject;
+import lombok.Setter;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    @Setter
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    @SneakyThrows
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (null == dingtalkConfiguration) {
+            dingtalkConfiguration = DingtalkEnvironment.getInstance().getDingtalkConfiguration();
+        }
+        CloseableHttpClient httpclient = HttpClients.createDefault();
+        try {
+            HttpPost httpPost = new HttpPost(getUrl());
+            String paramJson = getParamJson(getMsg(jobName, cause));
+            StringEntity entity = new StringEntity(paramJson, ""UTF-8"");
+            entity.setContentEncoding(""UTF-8"");
+            entity.setContentType(""application/json"");","[{'comment': 'Maybe there are some constants can be used to get the String?', 'commenter': 'TeslaCN'}]"
1470,elasticjob-error-handler/elasticjob-error-handler-base/pom.xml,"@@ -0,0 +1,64 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    
+    <artifactId>elasticjob-error-handler-base</artifactId>
+    
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-infra-common</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>
+        
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+        </dependency>
+    
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+        </dependency>
+        
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+        </dependency>
+        
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-inline</artifactId>
+        </dependency>
+    </dependencies>
+    
+</project>","[{'comment': 'Please keep a empty line in the end of file', 'commenter': 'terrymanu'}]"
1470,elasticjob-error-handler/elasticjob-error-handler-base/pom.xml,"@@ -0,0 +1,64 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>","[{'comment': 'groupId should before than artifactId', 'commenter': 'terrymanu'}]"
1470,elasticjob-error-handler/elasticjob-error-handler-base/pom.xml,"@@ -0,0 +1,64 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>","[{'comment': 'modelVersion should be the first node of pom file', 'commenter': 'terrymanu'}]"
1470,pom.xml,"@@ -36,6 +36,7 @@
         <module>elasticjob-lite</module>
         <module>elasticjob-cloud</module>
         <module>elasticjob-distribution</module>
+        <module>elasticjob-error-handler</module>","[{'comment': 'This module maybe put a better sequence, before elasticjob-lite is a better place', 'commenter': 'terrymanu'}]"
1470,elasticjob-error-handler/elasticjob-error-handler-base/pom.xml,"@@ -0,0 +1,64 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    
+    <artifactId>elasticjob-error-handler-base</artifactId>","[{'comment': 'It is better rename elasticjob-error-handler-base to elasticjob-error-handler-general', 'commenter': 'terrymanu'}]"
1470,elasticjob-error-handler/elasticjob-error-handler-email/pom.xml,"@@ -0,0 +1,32 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    
+    <artifactId>elasticjob-error-handler-email</artifactId>
+
+","[{'comment': 'Please remove useless blank lines', 'commenter': 'terrymanu'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,84 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>log4j-over-slf4j</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.5.12</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpcore</artifactId>
+            <version>4.4.13</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-restful</artifactId>
+            <version>${project.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+</project>","[{'comment': 'Need a blank line.', 'commenter': 'TeslaCN'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/impl/fixture/DingtalkInternalController.java,"@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl.fixture;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.restful.Http;
+import org.apache.shardingsphere.elasticjob.restful.RestfulController;
+import org.apache.shardingsphere.elasticjob.restful.annotation.Mapping;
+import org.apache.shardingsphere.elasticjob.restful.annotation.Param;
+import org.apache.shardingsphere.elasticjob.restful.annotation.ParamSource;
+import org.apache.shardingsphere.elasticjob.restful.annotation.RequestBody;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Map;
+
+@Slf4j
+public final class DingtalkInternalController implements RestfulController {
+    
+    private static final String ACCESS_TOKEN = ""42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f"";
+    
+    private static final String KEYWORD = ""keyword"";
+    
+    private static final String SECRET = ""SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4"";
+    
+    ","[{'comment': 'Remove redundant blank line.', 'commenter': 'TeslaCN'}, {'comment': 'got it', 'commenter': 'gzdzss'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,84 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>","[{'comment': '""Provided"" scope is recommended.', 'commenter': 'TeslaCN'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,84 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>log4j-over-slf4j</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+        </dependency>","[{'comment': 'Are they optional?', 'commenter': 'TeslaCN'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,152 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import com.google.gson.JsonObject;
+import lombok.Setter;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.http.client.config.RequestConfig;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    @Setter
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    private CloseableHttpClient httpclient = HttpClients.createDefault();
+    
+    public DingtalkJobErrorHandler() {
+        registerShutdownHook();
+    }
+    
+    @SneakyThrows
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (null == dingtalkConfiguration) {
+            dingtalkConfiguration = DingtalkEnvironment.getInstance().getDingtalkConfiguration();
+        }
+        HttpPost httpPost = new HttpPost(getUrl());
+        RequestConfig requestConfig = RequestConfig.custom()
+                .setConnectTimeout(dingtalkConfiguration.getConnectTimeout())
+                .setSocketTimeout(dingtalkConfiguration.getReadTimeout()).build();
+        httpPost.setConfig(requestConfig);
+        String paramJson = getParamJson(getMsg(jobName, cause));
+        StringEntity entity = new StringEntity(paramJson, StandardCharsets.UTF_8.name());
+        entity.setContentEncoding(StandardCharsets.UTF_8.name());
+        entity.setContentType(""application/json"");
+        httpPost.setEntity(entity);
+        CloseableHttpResponse response = httpclient.execute(httpPost);
+        try {
+            int status = response.getStatusLine().getStatusCode();
+            if (HttpURLConnection.HTTP_OK == status) {
+                JsonObject resp = GsonFactory.getGson().fromJson(EntityUtils.toString(response.getEntity()), JsonObject.class);
+                if (!""0"".equals(resp.get(""errcode"").getAsString())) {
+                    log.error(""An exception has occurred in Job '{}', But failed to send alert by Dingtalk because of: {}"", jobName, resp.get(""errmsg"").getAsString(), cause);
+                } else {
+                    log.error(""An exception has occurred in Job '{}', Notification to Dingtalk was successful."", jobName, cause);
+                }
+            } else {
+                log.error(""An exception has occurred in Job '{}', But failed to send alert by Dingtalk because of: Unexpected response status: {}"", jobName, status, cause);
+            }
+        } finally {
+            response.close();
+        }","[{'comment': 'CloseableHttpResponse implement AutoCloseable. Replace finally with try-with-resources.', 'commenter': 'TeslaCN'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,152 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import com.google.gson.JsonObject;
+import lombok.Setter;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.http.client.config.RequestConfig;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    @Setter
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    private CloseableHttpClient httpclient = HttpClients.createDefault();
+    
+    public DingtalkJobErrorHandler() {
+        registerShutdownHook();
+    }
+    
+    @SneakyThrows
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (null == dingtalkConfiguration) {
+            dingtalkConfiguration = DingtalkEnvironment.getInstance().getDingtalkConfiguration();
+        }
+        HttpPost httpPost = new HttpPost(getUrl());
+        RequestConfig requestConfig = RequestConfig.custom()
+                .setConnectTimeout(dingtalkConfiguration.getConnectTimeout())
+                .setSocketTimeout(dingtalkConfiguration.getReadTimeout()).build();
+        httpPost.setConfig(requestConfig);
+        String paramJson = getParamJson(getMsg(jobName, cause));
+        StringEntity entity = new StringEntity(paramJson, StandardCharsets.UTF_8.name());","[{'comment': 'Just use ""StandardCharsets.UTF_8"". The ""name()"" is unnecessary.', 'commenter': 'TeslaCN'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,152 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import com.google.gson.JsonObject;
+import lombok.Setter;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.http.client.config.RequestConfig;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    @Setter
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    private CloseableHttpClient httpclient = HttpClients.createDefault();","[{'comment': 'This field may be ""final"".', 'commenter': 'TeslaCN'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,152 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import com.google.gson.JsonObject;
+import lombok.Setter;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.http.client.config.RequestConfig;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    @Setter
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    private CloseableHttpClient httpclient = HttpClients.createDefault();
+    
+    public DingtalkJobErrorHandler() {
+        registerShutdownHook();
+    }
+    
+    @SneakyThrows
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (null == dingtalkConfiguration) {
+            dingtalkConfiguration = DingtalkEnvironment.getInstance().getDingtalkConfiguration();
+        }
+        HttpPost httpPost = new HttpPost(getUrl());
+        RequestConfig requestConfig = RequestConfig.custom()
+                .setConnectTimeout(dingtalkConfiguration.getConnectTimeout())
+                .setSocketTimeout(dingtalkConfiguration.getReadTimeout()).build();
+        httpPost.setConfig(requestConfig);
+        String paramJson = getParamJson(getMsg(jobName, cause));
+        StringEntity entity = new StringEntity(paramJson, StandardCharsets.UTF_8.name());
+        entity.setContentEncoding(StandardCharsets.UTF_8.name());
+        entity.setContentType(""application/json"");
+        httpPost.setEntity(entity);
+        CloseableHttpResponse response = httpclient.execute(httpPost);
+        try {
+            int status = response.getStatusLine().getStatusCode();
+            if (HttpURLConnection.HTTP_OK == status) {
+                JsonObject resp = GsonFactory.getGson().fromJson(EntityUtils.toString(response.getEntity()), JsonObject.class);
+                if (!""0"".equals(resp.get(""errcode"").getAsString())) {
+                    log.error(""An exception has occurred in Job '{}', But failed to send alert by Dingtalk because of: {}"", jobName, resp.get(""errmsg"").getAsString(), cause);
+                } else {
+                    log.error(""An exception has occurred in Job '{}', Notification to Dingtalk was successful."", jobName, cause);
+                }
+            } else {
+                log.error(""An exception has occurred in Job '{}', But failed to send alert by Dingtalk because of: Unexpected response status: {}"", jobName, status, cause);
+            }
+        } finally {
+            response.close();
+        }
+    }
+    
+    private String getParamJson(final String msg) {
+        return GsonFactory.getGson().toJson(ImmutableMap.of(""msgtype"", ""text"", ""text"", Collections.singletonMap(""content"", msg)));
+    }
+    
+    private String getMsg(final String jobName, final Throwable cause) {
+        StringWriter sw = new StringWriter();
+        cause.printStackTrace(new PrintWriter(sw, true));
+        String msg = String.format(""Job '%s' exception occur in job processing, caused by %s"", jobName, sw.toString());
+        if (!Strings.isNullOrEmpty(dingtalkConfiguration.getKeyword())) {
+            msg = dingtalkConfiguration.getKeyword().concat(msg);
+        }
+        return msg;
+    }
+    
+    private String getUrl() throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException, MalformedURLException {
+        if (Strings.isNullOrEmpty(dingtalkConfiguration.getSecret())) {
+            return dingtalkConfiguration.getWebhook();
+        } else {
+            return getSignUrl();
+        }
+    }
+    
+    private String getSignUrl() throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException {
+        Long timestamp = System.currentTimeMillis();
+        return String.format(""%s&timestamp=%s&sign=%s"", dingtalkConfiguration.getWebhook(), timestamp, sign(timestamp));
+    }
+    
+    private String sign(final Long timestamp) throws NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeyException {
+        String stringToSign = timestamp + ""\n"" + dingtalkConfiguration.getSecret();
+        Mac mac = Mac.getInstance(""HmacSHA256"");
+        mac.init(new SecretKeySpec(dingtalkConfiguration.getSecret().getBytes(StandardCharsets.UTF_8.name()), ""HmacSHA256""));
+        byte[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8.name()));","[{'comment': 'Just use ""StandardCharsets.UTF_8"". The ""name()"" is unnecessary for ""getBytes"".', 'commenter': 'TeslaCN'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/DingtalkJobErrorHandler.java,"@@ -0,0 +1,152 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import com.google.gson.JsonObject;
+import lombok.Setter;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.http.client.config.RequestConfig;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.config.DingtalkConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.env.DingtalkEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Base64;
+import java.util.Collections;
+
+/**
+ * Job error handler for dingtalk error message.
+ */
+@Slf4j
+public final class DingtalkJobErrorHandler implements JobErrorHandler {
+    
+    @Setter
+    private DingtalkConfiguration dingtalkConfiguration;
+    
+    private CloseableHttpClient httpclient = HttpClients.createDefault();
+    
+    public DingtalkJobErrorHandler() {
+        registerShutdownHook();
+    }
+    
+    @SneakyThrows
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        if (null == dingtalkConfiguration) {
+            dingtalkConfiguration = DingtalkEnvironment.getInstance().getDingtalkConfiguration();
+        }
+        HttpPost httpPost = new HttpPost(getUrl());
+        RequestConfig requestConfig = RequestConfig.custom()
+                .setConnectTimeout(dingtalkConfiguration.getConnectTimeout())
+                .setSocketTimeout(dingtalkConfiguration.getReadTimeout()).build();
+        httpPost.setConfig(requestConfig);
+        String paramJson = getParamJson(getMsg(jobName, cause));
+        StringEntity entity = new StringEntity(paramJson, StandardCharsets.UTF_8.name());
+        entity.setContentEncoding(StandardCharsets.UTF_8.name());
+        entity.setContentType(""application/json"");
+        httpPost.setEntity(entity);
+        CloseableHttpResponse response = httpclient.execute(httpPost);
+        try {
+            int status = response.getStatusLine().getStatusCode();
+            if (HttpURLConnection.HTTP_OK == status) {
+                JsonObject resp = GsonFactory.getGson().fromJson(EntityUtils.toString(response.getEntity()), JsonObject.class);
+                if (!""0"".equals(resp.get(""errcode"").getAsString())) {
+                    log.error(""An exception has occurred in Job '{}', But failed to send alert by Dingtalk because of: {}"", jobName, resp.get(""errmsg"").getAsString(), cause);
+                } else {
+                    log.error(""An exception has occurred in Job '{}', Notification to Dingtalk was successful."", jobName, cause);
+                }
+            } else {
+                log.error(""An exception has occurred in Job '{}', But failed to send alert by Dingtalk because of: Unexpected response status: {}"", jobName, status, cause);
+            }
+        } finally {
+            response.close();
+        }
+    }
+    
+    private String getParamJson(final String msg) {
+        return GsonFactory.getGson().toJson(ImmutableMap.of(""msgtype"", ""text"", ""text"", Collections.singletonMap(""content"", msg)));
+    }
+    
+    private String getMsg(final String jobName, final Throwable cause) {
+        StringWriter sw = new StringWriter();
+        cause.printStackTrace(new PrintWriter(sw, true));
+        String msg = String.format(""Job '%s' exception occur in job processing, caused by %s"", jobName, sw.toString());
+        if (!Strings.isNullOrEmpty(dingtalkConfiguration.getKeyword())) {
+            msg = dingtalkConfiguration.getKeyword().concat(msg);
+        }
+        return msg;
+    }
+    
+    private String getUrl() throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException, MalformedURLException {","[{'comment': 'MalformedURLException can be removed.', 'commenter': 'TeslaCN'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,88 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>","[{'comment': '<groupId> first, and then artifactId', 'commenter': 'Technoboy-'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,88 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>log4j-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.5.12</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpcore</artifactId>
+            <version>4.4.13</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-restful</artifactId>
+            <version>${project.version}</version>
+            <scope>test</scope>","[{'comment': 'If relys on ejob dependency, move it head.  Before lombok\r\n', 'commenter': 'Technoboy-'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,88 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>provided</scope>","[{'comment': 'No provided need.', 'commenter': 'Technoboy-'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,88 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>log4j-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.5.12</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpcore</artifactId>
+            <version>4.4.13</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <scope>test</scope>","[{'comment': 'No need to add test', 'commenter': 'Technoboy-'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/pom.xml,"@@ -0,0 +1,88 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>log4j-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.5.12</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpcore</artifactId>
+            <version>4.4.13</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-restful</artifactId>
+            <version>${project.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>","[{'comment': 'No need to add.', 'commenter': 'Technoboy-'}]"
1473,elasticjob-error-handler/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/config/DingtalkConfiguration.java,"@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.config;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter","[{'comment': 'No need setter', 'commenter': 'Technoboy-'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-email/pom.xml,"@@ -27,4 +27,38 @@
     </parent>
     
     <artifactId>elasticjob-error-handler-email</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>com.sun.mail</groupId>
+            <artifactId>javax.mail</artifactId>
+            <version>1.6.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-inline</artifactId>
+        </dependency>","[{'comment': '""Test"" scope is required.', 'commenter': 'TeslaCN'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/ConfigurationLoader.java,"@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.email;
+
+import lombok.NoArgsConstructor;
+import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
+
+import java.io.InputStream;
+
+/**
+ * Job error configuration loader.
+ */
+@NoArgsConstructor","[{'comment': '""Private"" access required.', 'commenter': 'TeslaCN'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java,"@@ -0,0 +1,126 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.email;
+
+import com.google.common.base.Preconditions;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+
+import javax.mail.Authenticator;
+import javax.mail.BodyPart;
+import javax.mail.Message;
+import javax.mail.MessagingException;
+import javax.mail.Multipart;
+import javax.mail.PasswordAuthentication;
+import javax.mail.Session;
+import javax.mail.Transport;
+import javax.mail.internet.InternetAddress;
+import javax.mail.internet.MimeBodyPart;
+import javax.mail.internet.MimeMessage;
+import javax.mail.internet.MimeMultipart;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.util.Date;
+import java.util.Properties;
+
+/**
+ * Job error handler for sending error message by email.
+ */
+@Slf4j
+public final class EmailJobErrorHandler implements JobErrorHandler {
+    
+    public static final String CONFIG_PREFIX = ""email"";
+    
+    private EmailConfiguration emailConfiguration;
+    
+    private Session session;
+    
+    public EmailJobErrorHandler() {
+        loadConfiguration();
+    }
+    
+    @Override
+    public void handleException(final String jobName, final Throwable cause) {
+        try {
+            Preconditions.checkNotNull(emailConfiguration);
+            String content = buildContent(jobName, cause);
+            Message message = buildMessage(content);
+            sendMessage(message);
+        } catch (final NullPointerException | MessagingException ex) {
+            log.error(""Elastic job: email job handler error"", ex);
+        }","[{'comment': ""Catch 'NullPointerException' seems weird."", 'commenter': 'TeslaCN'}, {'comment': ""if user don't set email configuration, `Preconditions.checkNotNull(emailConfiguration)` will throws NullPointerException,it menas user don't want email handler. So here will catch NullPointerException."", 'commenter': 'luky116'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-email/src/main/resources/META-INF/services/org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler,"@@ -15,6 +15,4 @@
 # limitations under the License.
 #
 
-org.apache.shardingsphere.elasticjob.infra.handler.error.impl.LogJobErrorHandler
-org.apache.shardingsphere.elasticjob.infra.handler.error.impl.IgnoreJobErrorHandler
-org.apache.shardingsphere.elasticjob.infra.handler.error.impl.ThrowJobErrorHandler
+org.apache.shardingsphere.elasticjob.error.handler.email.EmailJobErrorHandler","[{'comment': 'Need a blank line.', 'commenter': 'TeslaCN'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactory.java,"@@ -56,5 +56,5 @@ public static JobErrorHandler getHandler(final String type) {
             throw new JobConfigurationException(""Can not find job error handler type '%s'."", type);
         }
         return HANDLERS.get(type);
-    } 
+    }","[{'comment': 'Unnecessary changes.', 'commenter': 'TeslaCN'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactoryTest.java,"@@ -7,7 +7,7 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *  
+ *","[{'comment': 'Unnecessary changes.', 'commenter': 'TeslaCN'}, {'comment': 'Unnecessary changes.', 'commenter': 'TeslaCN'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/impl/IgnoreJobErrorHandlerTest.java,"@@ -20,7 +20,7 @@
 import org.junit.Test;
 
 public final class IgnoreJobErrorHandlerTest {
-    
+","[{'comment': 'Unnecessary changes.', 'commenter': 'TeslaCN'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-email/src/test/resources/error-handler-email.yaml,"@@ -0,0 +1,26 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+email:
+  host: test.mail.com
+  port: 123
+  username: username
+  password: password
+  protocol: smtp
+  from: testmail@qiyi.com
+  to: xxx1@ejob.com
+  cc: xxx2@ejob.com","[{'comment': 'Need a blank line.', 'commenter': 'TeslaCN'}]"
1474,elasticjob-error-handler/elasticjob-error-handler-email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerTest.java,"@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.email;
+
+import lombok.SneakyThrows;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentMatchers;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.slf4j.Logger;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.verify;
+
+@RunWith(MockitoJUnitRunner.class)
+public final class EmailJobErrorHandlerTest {
+        
+    @Mock
+    private Logger log;
+       
+    @Test
+    public void assertHandleExceptionFor() {
+        EmailJobErrorHandler emailJobErrorHandler = new EmailJobErrorHandler();
+        emailJobErrorHandler.handleException(""test job name"", new RuntimeException(""test exception""));
+    }
+        
+    @Test
+    @SneakyThrows
+    public void assertHandleExceptionForNullConfiguration() {
+        EmailJobErrorHandler emailJobErrorHandler = new EmailJobErrorHandler();
+        Field emailConfigurationField = EmailJobErrorHandler.class.getDeclaredField(""emailConfiguration"");
+        emailConfigurationField.setAccessible(true);
+        emailConfigurationField.set(emailJobErrorHandler, null);
+        ","[{'comment': 'Remove redundant blank line.', 'commenter': 'TeslaCN'}]"
1493,elasticjob-error-handler/elasticjob-error-handler-wechat/pom.xml,"@@ -0,0 +1,85 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    
+    <artifactId>elasticjob-error-handler-wechat</artifactId>
+    
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-restful</artifactId>
+            <version>${project.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.5.12</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpcore</artifactId>
+            <version>4.4.13</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>log4j-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+</project>","[{'comment': 'Need a blank line.', 'commenter': 'TeslaCN'}]"
1493,elasticjob-error-handler/elasticjob-error-handler-wechat/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatConfiguration.java,"@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.wechat;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+import java.util.Objects;
+
+@Getter
+@RequiredArgsConstructor
+public final class WechatConfiguration {
+    
+    private final Integer defaultConnectTimeout = 1000 * 5;
+    
+    private final Integer defaultReadTimeout = 1000 * 3;
+    
+    private final String webhook;
+    
+    private final Integer connectTimeout;
+    
+    private final Integer readTimeout;
+    
+    /**
+     * Get connect timeout config or default value.
+     *
+     * @return connect timeout value
+     */
+    public Integer getConnectTimeoutOrDefault() {
+        if (Objects.isNull(connectTimeout)) {","[{'comment': '```suggestion\r\n        if (null == connectTimeout) {\r\n```', 'commenter': 'TeslaCN'}]"
1493,elasticjob-error-handler/elasticjob-error-handler-wechat/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatConfiguration.java,"@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.wechat;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+import java.util.Objects;
+
+@Getter
+@RequiredArgsConstructor
+public final class WechatConfiguration {
+    
+    private final Integer defaultConnectTimeout = 1000 * 5;
+    
+    private final Integer defaultReadTimeout = 1000 * 3;
+    
+    private final String webhook;
+    
+    private final Integer connectTimeout;
+    
+    private final Integer readTimeout;
+    
+    /**
+     * Get connect timeout config or default value.
+     *
+     * @return connect timeout value
+     */
+    public Integer getConnectTimeoutOrDefault() {
+        if (Objects.isNull(connectTimeout)) {
+            return defaultConnectTimeout;
+        }
+        return connectTimeout;
+    }
+    
+    /**
+     * Get read timeout config or default value.
+     *
+     * @return read timeout value
+     */
+    public Integer getReadTimeoutOrDefault() {
+        if (Objects.isNull(readTimeout)) {","[{'comment': '```suggestion\r\n        if (null == readTimeout) {\r\n```', 'commenter': 'TeslaCN'}]"
1493,elasticjob-error-handler/elasticjob-error-handler-wechat/pom.xml,"@@ -0,0 +1,85 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>
+        <version>3.0.0-beta-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>","[{'comment': 'modelVersion should be before parent', 'commenter': 'Technoboy-'}]"
1493,elasticjob-error-handler/elasticjob-error-handler-wechat/pom.xml,"@@ -0,0 +1,85 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>elasticjob-error-handler</artifactId>
+        <groupId>org.apache.shardingsphere.elasticjob</groupId>","[{'comment': 'groupId first', 'commenter': 'Technoboy-'}]"
1501,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduler.java,"@@ -53,7 +54,7 @@
     private final CoordinatorRegistryCenter regCenter;
     
     private final String elasticJobType;
-    ","[{'comment': 'Keep indents (including blank lines) consistent with the previous one.\r\nRefer to https://shardingsphere.apache.org/community/en/contribute/code-conduct/', 'commenter': 'TeslaCN'}, {'comment': 'thx.', 'commenter': 'vran-dev'}]"
1532,pom.xml,"@@ -28,7 +28,7 @@
     <version>3.0.0-beta-SNAPSHOT</version>
     <packaging>pom</packaging>
     <name>${project.artifactId}</name>
-    ","[{'comment': 'Keep indents (including blank lines) consistent with the previous one.\r\nRef https://shardingsphere.apache.org/community/en/contribute/code-conduct/', 'commenter': 'TeslaCN'}]"
1532,.travis.yml,"@@ -1,10 +1,22 @@
 language: java
-dist: trusty
 jdk:
-  - oraclejdk8
-  #- oraclejdk7
-  #- openjdk7
+  - openjdk8
+
+install: true
+
+cache:
+  directories:
+    - ""$HOME/.m2""
+
 before_script:
-    - echo ""MAVEN_OPTS='-Xmx1024m -XX:MaxPermSize=256m'"" > ~/.mavenrc
+  - echo ""MAVEN_OPTS='-Xmx1024m -XX:MaxMetaspaceSize=256m'"" > ~/.mavenrc
+  - rm -rf $HOME/.m2/repository/org/apache/shardingsphere/elasticjob","[{'comment': 'Why rm folder in before script, can `mvn clean install` do it?', 'commenter': 'terrymanu'}, {'comment': 'Removed useless code', 'commenter': 'lovepoem'}, {'comment': 'It seems like still existed.', 'commenter': 'terrymanu'}, {'comment': 'Finished', 'commenter': 'lovepoem'}]"
1532,pom.xml,"@@ -464,13 +464,6 @@
                 <version>${cobertura-maven-plugin.version}</version>
                 <configuration>
                     <check>
-                        <branchRate>80</branchRate>
-                        <lineRate>80</lineRate>
-                        <haltOnFailure>true</haltOnFailure>
-                        <totalBranchRate>80</totalBranchRate>
-                        <totalLineRate>80</totalLineRate>
-                        <packageLineRate>80</packageLineRate>
-                        <packageBranchRate>80</packageBranchRate>","[{'comment': 'We should not remove this', 'commenter': 'terrymanu'}, {'comment': 'Reverted pom.xml', 'commenter': 'lovepoem'}]"
1547,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/listener/ElasticJobListenerFactory.java,"@@ -40,6 +40,6 @@
      * @return optional job listener instance
      */
     public static Optional<ElasticJobListener> createListener(final String type) {
-        return ElasticJobServiceLoader.newServiceInstances(ElasticJobListener.class).stream().filter(listener -> listener.getType().equalsIgnoreCase(type)).findFirst();
+        return Optional.of(ElasticJobServiceLoader.newTypedServiceInstance(ElasticJobListener.class, type));","[{'comment': '`Optional.of()` will throw exception if parameter is null, which makes caller invoke `orElseThrow` is meaningless.', 'commenter': 'TeslaCN'}]"
1547,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactory.java,"@@ -48,8 +48,8 @@
         }
         return newHandlerInstance(type);
     }
-    ","[{'comment': 'Keep indents (including blank lines) consistent with the previous one, please.\r\nRef https://shardingsphere.apache.org/community/en/contribute/code-conduct/', 'commenter': 'TeslaCN'}]"
1548,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoader.java,"@@ -76,4 +81,58 @@ private static Object newServiceInstance(final Class<?> clazz) {
             throw new ServiceLoaderInstantiationException(clazz, ex.getCause());
         }
     }
+
+    /**
+     * Register typeSPI service.
+     *
+     * @param typedService specific service type
+     * @param <T> type of service
+     */
+    public static <T> void registerTypedService(final Class<T> typedService) {
+        if (!TypedSPI.class.isAssignableFrom(typedService)) {
+            throw new IllegalArgumentException(""Cannot register @"" + typedService.getName() + ""as a typed service, because its not a subClass of @"" + typedService);
+        }
+        if (TYPED_SERVICES.containsKey(typedService)) {
+            return;
+        }
+        ServiceLoader.load(typedService).forEach(each -> registerTypedServiceClass(typedService, (TypedSPI) each));
+    }
+
+    private static <T> void registerTypedServiceClass(final Class<T> typedService, final TypedSPI instance) {
+        TYPED_SERVICES.computeIfAbsent(typedService, unused -> new ConcurrentHashMap<>()).putIfAbsent(instance.getType(), instance);
+        TYPED_SERVICE_CLASSES.computeIfAbsent(typedService, unused -> new ConcurrentHashMap<>()).putIfAbsent(instance.getType(), instance.getClass());
+    }
+
+    /**
+     * Get cached instance.
+     *
+     * @param typedService service type
+     * @param type         specific service type
+     * @param <T>          specific type of service
+     * @return cached service instance
+     */
+    public static <T extends TypedSPI> T getCachedInstance(final Class<T> typedService, final String type) {
+        T instance = TYPED_SERVICES.containsKey(typedService) ? (T) TYPED_SERVICES.get(typedService).get(type) : null;
+        if (instance == null) {","[{'comment': 'Have constants on the left and variable on the right in = and equals conditional expressions; Have variable on the left and constants on the right in greater than and less than conditional expressions.\r\nRef https://shardingsphere.apache.org/community/en/contribute/code-conduct/', 'commenter': 'TeslaCN'}]"
1548,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoader.java,"@@ -76,4 +81,58 @@ private static Object newServiceInstance(final Class<?> clazz) {
             throw new ServiceLoaderInstantiationException(clazz, ex.getCause());
         }
     }
+
+    /**
+     * Register typeSPI service.
+     *
+     * @param typedService specific service type
+     * @param <T> type of service
+     */
+    public static <T> void registerTypedService(final Class<T> typedService) {
+        if (!TypedSPI.class.isAssignableFrom(typedService)) {
+            throw new IllegalArgumentException(""Cannot register @"" + typedService.getName() + ""as a typed service, because its not a subClass of @"" + typedService);
+        }
+        if (TYPED_SERVICES.containsKey(typedService)) {
+            return;
+        }
+        ServiceLoader.load(typedService).forEach(each -> registerTypedServiceClass(typedService, (TypedSPI) each));
+    }
+
+    private static <T> void registerTypedServiceClass(final Class<T> typedService, final TypedSPI instance) {
+        TYPED_SERVICES.computeIfAbsent(typedService, unused -> new ConcurrentHashMap<>()).putIfAbsent(instance.getType(), instance);
+        TYPED_SERVICE_CLASSES.computeIfAbsent(typedService, unused -> new ConcurrentHashMap<>()).putIfAbsent(instance.getType(), instance.getClass());
+    }
+
+    /**
+     * Get cached instance.
+     *
+     * @param typedService service type
+     * @param type         specific service type
+     * @param <T>          specific type of service
+     * @return cached service instance
+     */
+    public static <T extends TypedSPI> T getCachedInstance(final Class<T> typedService, final String type) {
+        T instance = TYPED_SERVICES.containsKey(typedService) ? (T) TYPED_SERVICES.get(typedService).get(type) : null;
+        if (instance == null) {
+            throw new JobConfigurationException(""Cannot find a cached typed service instance by the interface: @"" + typedService.getName() + ""and type: "" + type);
+        }
+        return instance;
+    }
+
+    /**
+     * New typed instance.
+     *
+     * @param typedService service type
+     * @param type         specific service type
+     * @param <T>          specific type of service
+     * @return specific typed service instance
+     */
+    public static <T extends TypedSPI> T newTypedServiceInstance(final Class<T> typedService, final String type) {
+        Class<?> instanceClass = TYPED_SERVICE_CLASSES.containsKey(typedService) ? TYPED_SERVICE_CLASSES.get(typedService).get(type) : null;
+        if (instanceClass == null) {","[{'comment': 'Have constants on the left and variable on the right in = and equals conditional expressions; Have variable on the left and constants on the right in greater than and less than conditional expressions.\r\nRef https://shardingsphere.apache.org/community/en/contribute/code-conduct/', 'commenter': 'TeslaCN'}]"
1550,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/pom.xml,"@@ -33,6 +33,11 @@
             <artifactId>elasticjob-error-handler-spi</artifactId>
             <version>${project.parent.version}</version>
         </dependency>
+        <dependency>
+            <groupId>org.apache.shardingsphere.elasticjob</groupId>
+            <artifactId>elasticjob-error-handler-general</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>","[{'comment': 'Is it necessary to introduce general into dingtalk module?', 'commenter': 'TeslaCN'}, {'comment': 'Is it necessary to introduce general into wechat module?', 'commenter': 'TeslaCN'}, {'comment': 'JobErrorHandlerFactory is needed because it is in the general module', 'commenter': 'gzdzss'}, {'comment': 'JobErrorHandlerFactory is needed because it is in the general module', 'commenter': 'gzdzss'}]"
1550,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailConfiguration.java,"@@ -50,4 +52,27 @@
     private String bcc;
     
     private boolean debug;
+    
+    /**
+     * Get email config.
+     *
+     * @param props props
+     * @return email config.
+     */
+    public static EmailConfiguration getByProps(final Properties props) {
+        EmailConfiguration configuration = new EmailConfiguration();
+        configuration.setHost(props.getProperty(""email.host""));
+        configuration.setPort(Integer.parseInt(props.getOrDefault(""email.port"", ""25"").toString()));","[{'comment': 'There are many SMTP servers required secure connection. I think it is better to let users declare port explicitly. ', 'commenter': 'TeslaCN'}]"
1550,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java,"@@ -44,48 +45,48 @@
 @Slf4j
 public final class EmailJobErrorHandler implements JobErrorHandler {
     
-    public static final String CONFIG_PREFIX = ""email"";
+    private Session session;
     
-    private final EmailConfiguration config;
-    
-    private final Session session;
-    
-    public EmailJobErrorHandler() {
-        config = EmailConfigurationLoader.unmarshal(CONFIG_PREFIX);
-        session = Session.getDefaultInstance(createSessionProperties(), getSessionAuthenticator());
+    private synchronized Session createSession(final EmailConfiguration emailConfiguration) {
+        if (session == null) {","[{'comment': 'Constant on the left.', 'commenter': 'TeslaCN'}]"
1550,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java,"@@ -95,28 +96,35 @@ private String createErrorContext(final String jobName, final Throwable cause) {
         return String.format(""Job '%s' exception occur in job processing, caused by %s"", jobName, writer.toString());
     }
     
-    private Message createMessage(final String content) throws MessagingException {
-        MimeMessage result = new MimeMessage(session);
-        result.setFrom(new InternetAddress(config.getFrom()));
-        result.setSubject(config.getSubject());
+    private Message createMessage(final String content, final EmailConfiguration emailConfiguration) throws MessagingException {
+        MimeMessage result = new MimeMessage(createSession(emailConfiguration));
+        result.setFrom(new InternetAddress(emailConfiguration.getFrom()));
+        result.setSubject(emailConfiguration.getSubject());
         result.setSentDate(new Date());
         Multipart multipart = new MimeMultipart();
         BodyPart mailBody = new MimeBodyPart();
         mailBody.setContent(content, ""text/html; charset=utf-8"");
         multipart.addBodyPart(mailBody);
         result.setContent(multipart);
-        if (StringUtils.isNotBlank(config.getTo())) {
-            result.addRecipient(Message.RecipientType.TO, new InternetAddress(config.getTo()));
+        String to = emailConfiguration.getTo();
+        if (StringUtils.isNotBlank(to)) {
+            String[] tos = to.split("","");
+            for (String t : tos) {
+                result.addRecipient(Message.RecipientType.TO, new InternetAddress(t));
+            }
+        }
+        if (StringUtils.isNotBlank(emailConfiguration.getCc())) {
+            result.addRecipient(Message.RecipientType.CC, new InternetAddress(emailConfiguration.getCc()));
         }
-        if (StringUtils.isNotBlank(config.getCc())) {
-            result.addRecipient(Message.RecipientType.CC, new InternetAddress(config.getCc()));
+        if (StringUtils.isNotBlank(emailConfiguration.getBcc())) {
+            result.addRecipient(Message.RecipientType.BCC, new InternetAddress(emailConfiguration.getBcc()));
         }
         result.saveChanges();
         return result;
     }
     
-    private void sendMessage(final Message message) throws MessagingException {
-        try (Transport transport = session.getTransport()) {
+    private void sendMessage(final Message message, final EmailConfiguration emailConfiguration) throws MessagingException {
+        try (Transport transport = createSession(emailConfiguration).getTransport()) {","[{'comment': 'The method `createSession` is synchronized. I think it is better to check if session present before invoking synchronized method.', 'commenter': 'TeslaCN'}, {'comment': 'Consider using `Optional.ofNullable(session).orElseGet(() -> createSession(emailConfiguration))`', 'commenter': 'TeslaCN'}]"
1550,examples/elasticjob-example-lite-springboot/src/main/resources/application.yml,"@@ -31,5 +31,48 @@ elasticjob:
       shardingTotalCount: 9
       props:
         script.command.line: ""echo Manual SCRIPT Job: ""
+    occurErrorNoticeDingtlakJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeDingtlakJob
+      overwrite: true
+      cron: 0/5 * * * * ?
+      shardingTotalCount: 3
+      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+      jobErrorHandlerType: DINGTALK
+      props:
+        dingtalk:
+          webhook: https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f
+          keyword: keyword
+          secret: SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4
+          connectTimeout: 3000
+          readTimeout: 5000
+    occurErrorNoticeWechatJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeWechatJob
+      overwrite: true
+      cron: 0/5 * * * * ?
+      shardingTotalCount: 3
+      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+      jobErrorHandlerType: WECHAT
+      props:
+        wechat:
+          webhook: https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5308e20a-2900-484b-a332-b5bb701ade04
+          connectTimeout: 3000
+          readTimeout: 5000
+#    occurErrorNoticeEmailJob:
+#      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeEmailJob
+#      overwrite: true
+#      cron: 0/5 * * * * ?
+#      shardingTotalCount: 3
+#      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+#      jobErrorHandlerType: EMAIL
+#      props:
+#        email:
+#          host: smtp.163.com","[{'comment': 'Please do not use real smtp server, just mask them', 'commenter': 'terrymanu'}]"
1550,examples/elasticjob-example-lite-springboot/src/main/resources/application.yml,"@@ -31,5 +31,48 @@ elasticjob:
       shardingTotalCount: 9
       props:
         script.command.line: ""echo Manual SCRIPT Job: ""
+    occurErrorNoticeDingtlakJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeDingtlakJob
+      overwrite: true
+      cron: 0/5 * * * * ?
+      shardingTotalCount: 3
+      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+      jobErrorHandlerType: DINGTALK
+      props:
+        dingtalk:
+          webhook: https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f
+          keyword: keyword
+          secret: SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4
+          connectTimeout: 3000
+          readTimeout: 5000
+    occurErrorNoticeWechatJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeWechatJob
+      overwrite: true
+      cron: 0/5 * * * * ?
+      shardingTotalCount: 3
+      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+      jobErrorHandlerType: WECHAT
+      props:
+        wechat:
+          webhook: https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5308e20a-2900-484b-a332-b5bb701ade04
+          connectTimeout: 3000
+          readTimeout: 5000
+#    occurErrorNoticeEmailJob:
+#      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeEmailJob
+#      overwrite: true
+#      cron: 0/5 * * * * ?
+#      shardingTotalCount: 3
+#      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+#      jobErrorHandlerType: EMAIL
+#      props:
+#        email:
+#          host: smtp.163.com
+#          username: xxx@163.com
+#          password: xxxx
+#          port: 465
+#          useSsl: true
+#          protocol: smtp
+#          form: xxx@163.com
+#          to: xxx1@qq.com,xxx2@qq.com","[{'comment': 'Please mask them too', 'commenter': 'terrymanu'}]"
1550,examples/elasticjob-example-lite-springboot/src/main/resources/application.yml,"@@ -31,5 +31,48 @@ elasticjob:
       shardingTotalCount: 9
       props:
         script.command.line: ""echo Manual SCRIPT Job: ""
+    occurErrorNoticeDingtlakJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeDingtlakJob
+      overwrite: true
+      cron: 0/5 * * * * ?
+      shardingTotalCount: 3
+      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+      jobErrorHandlerType: DINGTALK
+      props:
+        dingtalk:
+          webhook: https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f
+          keyword: keyword
+          secret: SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4
+          connectTimeout: 3000
+          readTimeout: 5000
+    occurErrorNoticeWechatJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeWechatJob
+      overwrite: true
+      cron: 0/5 * * * * ?
+      shardingTotalCount: 3
+      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+      jobErrorHandlerType: WECHAT
+      props:
+        wechat:
+          webhook: https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5308e20a-2900-484b-a332-b5bb701ade04
+          connectTimeout: 3000
+          readTimeout: 5000
+#    occurErrorNoticeEmailJob:
+#      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeEmailJob
+#      overwrite: true
+#      cron: 0/5 * * * * ?
+#      shardingTotalCount: 3
+#      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+#      jobErrorHandlerType: EMAIL
+#      props:
+#        email:
+#          host: smtp.163.com
+#          username: xxx@163.com","[{'comment': 'Please mask them too', 'commenter': 'terrymanu'}]"
1550,examples/elasticjob-example-lite-springboot/src/main/resources/application.yml,"@@ -31,5 +31,48 @@ elasticjob:
       shardingTotalCount: 9
       props:
         script.command.line: ""echo Manual SCRIPT Job: ""
+    occurErrorNoticeDingtlakJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeDingtlakJob
+      overwrite: true
+      cron: 0/5 * * * * ?
+      shardingTotalCount: 3
+      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+      jobErrorHandlerType: DINGTALK
+      props:
+        dingtalk:
+          webhook: https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f
+          keyword: keyword
+          secret: SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4
+          connectTimeout: 3000
+          readTimeout: 5000
+    occurErrorNoticeWechatJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeWechatJob
+      overwrite: true
+      cron: 0/5 * * * * ?
+      shardingTotalCount: 3
+      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+      jobErrorHandlerType: WECHAT
+      props:
+        wechat:
+          webhook: https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5308e20a-2900-484b-a332-b5bb701ade04
+          connectTimeout: 3000
+          readTimeout: 5000
+#    occurErrorNoticeEmailJob:
+#      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeEmailJob
+#      overwrite: true
+#      cron: 0/5 * * * * ?
+#      shardingTotalCount: 3
+#      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
+#      jobErrorHandlerType: EMAIL
+#      props:
+#        email:
+#          host: host
+#          username: username
+#          password: password
+#          port: 465
+#          useSsl: true
+#          protocol: smtp
+#          form: from@xxx.com
+#          to: eail1@xxx.com,email2@xxx.com","[{'comment': 'eail1 -> email1', 'commenter': 'Technoboy-'}]"
1550,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkConfiguration.java,"@@ -33,4 +35,17 @@
     private final Integer connectTimeout;
     
     private final Integer readTimeout;
+    
+    /**
+     * Get dingtalk config.
+     *
+     * @param props props
+     * @return dingtalk config.
+     */
+    public static DingtalkConfiguration getByProps(final Properties props) {","[{'comment': ""dingtalk.webhook，dingtalk.keyword and dingtalk.xxx.\r\nIt' better to use a constant field for this. "", 'commenter': 'Technoboy-'}]"
1550,examples/elasticjob-example-lite-spring/src/main/resources/META-INF/applicationContext.xml,"@@ -65,4 +65,50 @@
             <!--<prop key=""script.command.line"">${script.scriptCommandLine}</prop>-->
         <!--</props>-->
     <!--</elasticjob:job>-->
+
+    <bean id=""occurErrorNoticeDingtlakJob"" class=""org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaOccurErrorJob"" />
+
+    <elasticjob:job id=""${occurErrorNoticeDingtlakJob.id}"" job-ref=""occurErrorNoticeDingtlakJob"" registry-center-ref=""regCenter"" tracing-ref=""elasticJobTrace""
+                    sharding-total-count=""${occurErrorNoticeDingtlakJob.shardingTotalCount}"" cron=""${occurErrorNoticeDingtlakJob.cron}"" sharding-item-parameters=""${occurErrorNoticeDingtlakJob.shardingItemParameters}"" monitor-execution=""${occurErrorNoticeDingtlakJob.monitorExecution}"" failover=""${occurErrorNoticeDingtlakJob.failover}"" description=""${occurErrorNoticeDingtlakJob.description}""
+                    job-error-handler-type=""${occurErrorNoticeDingtlakJob.jobErrorHandlerType}""
+                    disabled=""${occurErrorNoticeDingtlakJob.disabled}"" overwrite=""${occurErrorNoticeDingtlakJob.overwrite}"" >
+        <props>
+            <prop key=""dingtalk.webhook"">https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f</prop>
+            <prop key=""dingtalk.keyword"">keyword</prop>
+            <prop key=""dingtalk.secret"">SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4</prop>
+            <prop key=""dingtalk.connectTimeout"">3000</prop>
+            <prop key=""dingtalk.readTimeout"">5000</prop>
+        </props>
+    </elasticjob:job>
+
+    <bean id=""occurErrorNoticeWechatJob"" class=""org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaOccurErrorJob"" />
+
+    <elasticjob:job id=""${occurErrorNoticeWechatJob.id}"" job-ref=""occurErrorNoticeWechatJob"" registry-center-ref=""regCenter"" tracing-ref=""elasticJobTrace""
+                    sharding-total-count=""${occurErrorNoticeWechatJob.shardingTotalCount}"" cron=""${occurErrorNoticeWechatJob.cron}"" sharding-item-parameters=""${occurErrorNoticeWechatJob.shardingItemParameters}"" monitor-execution=""${occurErrorNoticeWechatJob.monitorExecution}"" failover=""${occurErrorNoticeWechatJob.failover}"" description=""${occurErrorNoticeWechatJob.description}""
+                    job-error-handler-type=""${occurErrorNoticeWechatJob.jobErrorHandlerType}""
+                    disabled=""${occurErrorNoticeWechatJob.disabled}"" overwrite=""${occurErrorNoticeWechatJob.overwrite}"" >
+        <props>
+            <prop key=""wechat.webhook"">https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5308e20a-2900-484b-a332-b5bb701ade04</prop>
+            <prop key=""wechat.connectTimeout"">3000</prop>
+            <prop key=""wechat.readTimeout"">5000</prop>
+        </props>
+    </elasticjob:job>
+
+<!--    <bean id=""occurErrorNoticeEmailJob"" class=""org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaOccurErrorJob"" />-->
+
+<!--    <elasticjob:job id=""${occurErrorNoticeEmailJob.id}"" job-ref=""occurErrorNoticeEmailJob"" registry-center-ref=""regCenter"" tracing-ref=""elasticJobTrace""-->
+<!--                    sharding-total-count=""${occurErrorNoticeEmailJob.shardingTotalCount}"" cron=""${occurErrorNoticeEmailJob.cron}"" sharding-item-parameters=""${occurErrorNoticeEmailJob.shardingItemParameters}"" monitor-execution=""${occurErrorNoticeEmailJob.monitorExecution}"" failover=""${occurErrorNoticeEmailJob.failover}"" description=""${occurErrorNoticeEmailJob.description}""-->
+<!--                    job-error-handler-type=""${occurErrorNoticeEmailJob.jobErrorHandlerType}""-->
+<!--                    disabled=""${occurErrorNoticeEmailJob.disabled}"" overwrite=""${occurErrorNoticeEmailJob.overwrite}"" >-->
+<!--        <props>-->
+<!--            <prop key=""email.host"">host</prop>-->
+<!--            <prop key=""email.username"">username</prop>-->
+<!--            <prop key=""email.password"">passowrd</prop>-->
+<!--            <prop key=""email.port"">465</prop>-->
+<!--            <prop key=""email.useSsl"">true</prop>-->
+<!--            <prop key=""email.protocol"">smtp</prop>-->
+<!--            <prop key=""email.form"">from@xxx.com</prop>-->","[{'comment': 'email.form -> email.from', 'commenter': 'Technoboy-'}]"
1558,elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/item/JobItemExecutorFactory.java,"@@ -23,32 +23,26 @@
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.executor.item.impl.ClassedJobItemExecutor;
 import org.apache.shardingsphere.elasticjob.executor.item.impl.TypedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.infra.spi.ElasticJobServiceLoader;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.ServiceLoader;
-import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Job item executor factory.
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JobItemExecutorFactory {
     
-    private static final Map<Class, ClassedJobItemExecutor> CLASSED_EXECUTORS = new ConcurrentHashMap<>();
-    
-    private static final Map<String, TypedJobItemExecutor> TYPED_EXECUTORS = new ConcurrentHashMap<>();
+    private static final Map<Class, ClassedJobItemExecutor> CLASSED_EXECUTORS = new HashMap<>();
     
     static {
-        for (JobItemExecutor each : ServiceLoader.load(JobItemExecutor.class)) {
-            if (each instanceof ClassedJobItemExecutor) {
-                ClassedJobItemExecutor typedJobItemExecutor = (ClassedJobItemExecutor) each;
-                CLASSED_EXECUTORS.put(typedJobItemExecutor.getElasticJobClass(), typedJobItemExecutor);
-            }
-            if (each instanceof TypedJobItemExecutor) {
-                TypedJobItemExecutor typedJobItemExecutor = (TypedJobItemExecutor) each;
-                TYPED_EXECUTORS.put(typedJobItemExecutor.getType(), typedJobItemExecutor);
-            }
+        ElasticJobServiceLoader.registerTypedService(TypedJobItemExecutor.class);
+        for (JobItemExecutor each : ServiceLoader.load(ClassedJobItemExecutor.class)) {
+            ClassedJobItemExecutor typedJobItemExecutor = (ClassedJobItemExecutor) each;
+            CLASSED_EXECUTORS.put(typedJobItemExecutor.getElasticJobClass(), typedJobItemExecutor);","[{'comment': 'Casting to ClassedJobItemExecutor is unnecessary.\r\n\r\n```suggestion\r\n        ServiceLoader.load(ClassedJobItemExecutor.class)).forEach(each -> CLASSED_EXECUTORS.put(each.getElasticJobClass(), each));           \r\n```', 'commenter': 'TeslaCN'}, {'comment': 'Very nice suggestion!  I will correct it soon.', 'commenter': 'wwj-go'}]"
1558,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/resources/META-INF/services/org.apache.shardingsphere.elasticjob.executor.item.impl.ClassedJobItemExecutor,"@@ -0,0 +1,17 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#  
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+org.apache.shardingsphere.elasticjob.lite.spring.boot.job.executor.CustomClassedJobExecutor","[{'comment': 'Need a blank line.', 'commenter': 'TeslaCN'}]"
1565,elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/listener/fixture/FooElasticJobListener.java,"@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.infra.listener.fixture;
+
+import org.apache.shardingsphere.elasticjob.infra.listener.ElasticJobListener;
+import org.apache.shardingsphere.elasticjob.infra.listener.ShardingContexts;
+
+public class FooElasticJobListener implements ElasticJobListener {
+    @Override","[{'comment': 'Keep one blank line after class definition.\r\nRef https://shardingsphere.apache.org/community/en/contribute/code-conduct/', 'commenter': 'TeslaCN'}]"
1565,elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/listener/fixture/FooElasticJobListener.java,"@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.infra.listener.fixture;
+
+import org.apache.shardingsphere.elasticjob.infra.listener.ElasticJobListener;
+import org.apache.shardingsphere.elasticjob.infra.listener.ShardingContexts;
+
+public class FooElasticJobListener implements ElasticJobListener {","[{'comment': 'Design class as final class except abstract class for extend.\r\nRef https://shardingsphere.apache.org/community/en/contribute/code-conduct/', 'commenter': 'TeslaCN'}]"
1565,elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/listener/ElasticJobListenerFactoryTest.java,"@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.infra.listener;
+
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
+import org.apache.shardingsphere.elasticjob.infra.listener.fixture.FooElasticJobListener;
+import org.junit.Test;
+
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.junit.Assert.assertThat;
+
+public class ElasticJobListenerFactoryTest {","[{'comment': 'Design class as final class except abstract class for extend.\r\nRef https://shardingsphere.apache.org/community/en/contribute/code-conduct/', 'commenter': 'TeslaCN'}]"
1567,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/threadpool/JobExecutorServiceHandlerFactory.java,"@@ -42,8 +43,11 @@
      */
     public static JobExecutorServiceHandler getHandler(final String type) {
         if (Strings.isNullOrEmpty(type)) {
-            return ElasticJobServiceLoader.getCachedInstance(JobExecutorServiceHandler.class, DEFAULT_HANDLER);
+            return ElasticJobServiceLoader.getCachedTypedServiceInstance(JobExecutorServiceHandler.class, DEFAULT_HANDLER)","[{'comment': 'Is it necessary to check if default handler present? Why could this happen?', 'commenter': 'TeslaCN'}, {'comment': 'This is a redundant check and will be replaced with a simple Optional#get , as will JobShardingStrategyFactory#getStrategy', 'commenter': 'wwj-go'}]"
1567,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoader.java,"@@ -106,33 +61,42 @@ private static Object newServiceInstance(final Class<?> clazz) {
     /**
      * Get cached instance.
      *
-     * @param typedService service type
+     * @param typedServiceInterface typed service interface
      * @param type         specific service type
      * @param <T>          specific type of service
      * @return cached service instance
      */
-    public static <T extends TypedSPI> T getCachedInstance(final Class<T> typedService, final String type) {
-        T instance = TYPED_SERVICES.containsKey(typedService) ? (T) TYPED_SERVICES.get(typedService).get(type) : null;
+    public static <T extends TypedSPI> Optional<T> getCachedTypedServiceInstance(final Class<T> typedServiceInterface, final String type) {
+        T instance = TYPED_SERVICES.containsKey(typedServiceInterface) ? (T) TYPED_SERVICES.get(typedServiceInterface).get(type) : null;","[{'comment': 'Consider making good use of `Optional#map` if you are going to use `Optional`.', 'commenter': 'TeslaCN'}, {'comment': 'That looks good.', 'commenter': 'wwj-go'}]"
1567,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoader.java,"@@ -106,33 +61,42 @@ private static Object newServiceInstance(final Class<?> clazz) {
     /**
      * Get cached instance.
      *
-     * @param typedService service type
+     * @param typedServiceInterface typed service interface
      * @param type         specific service type
      * @param <T>          specific type of service
      * @return cached service instance
      */
-    public static <T extends TypedSPI> T getCachedInstance(final Class<T> typedService, final String type) {
-        T instance = TYPED_SERVICES.containsKey(typedService) ? (T) TYPED_SERVICES.get(typedService).get(type) : null;
+    public static <T extends TypedSPI> Optional<T> getCachedTypedServiceInstance(final Class<T> typedServiceInterface, final String type) {
+        T instance = TYPED_SERVICES.containsKey(typedServiceInterface) ? (T) TYPED_SERVICES.get(typedServiceInterface).get(type) : null;
         if (null == instance) {
-            throw new JobConfigurationException(""Cannot find a cached typed service instance by the interface: @"" + typedService.getName() + ""and type: "" + type);
+            return Optional.empty();
         }
-        return instance;
+        return Optional.of(instance);
     }
 
     /**
      * New typed instance.
      *
-     * @param typedService service type
+     * @param typedServiceInterface typed service interface
      * @param type         specific service type
      * @param <T>          specific type of service
      * @return specific typed service instance
      */
-    public static <T extends TypedSPI> T newTypedServiceInstance(final Class<T> typedService, final String type) {
-        Class<?> instanceClass = TYPED_SERVICE_CLASSES.containsKey(typedService) ? TYPED_SERVICE_CLASSES.get(typedService).get(type) : null;
+    public static <T extends TypedSPI> Optional<T> newTypedServiceInstance(final Class<T> typedServiceInterface, final String type) {
+        Class<?> instanceClass = TYPED_SERVICE_CLASSES.containsKey(typedServiceInterface) ? TYPED_SERVICE_CLASSES.get(typedServiceInterface).get(type) : null;","[{'comment': 'Consider making good use of `Optional#map` if you are going to use `Optional`.', 'commenter': 'TeslaCN'}]"
1614,docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.en.md,"@@ -81,11 +81,11 @@ Maven POM:
 
 Configuration: 
 
-| Name                      | Description | Default Value     |
-| ------------------------- |:----------- |:----------------- |
-| webhook                   | TODO        | None              |
-| connectTimeoutMillisecond | TODO        | 3000 milliseconds |
-| readTimeoutMillisecond    | TODO        | 5000 milliseconds |
+| Name                             | Description                                                                | Default Value     |
+| -------------------------------- |:---------------------------------------------------------------------------|:----------------- |
+| wechat.webhook                   | The webhook address of the wechat robot                                    | None              |
+| wechat.connectTimeoutMillisecond | The timeout period for establishing a connection with the wechat server    | 3000 milliseconds |
+| wechat.readTimeoutMillisecond    | The timeout period for reading available resources from the wechat server  | 5000 milliseconds |","[{'comment': 'How to understand ""available resources""? Is that HTTP response?', 'commenter': 'TeslaCN'}, {'comment': ' That is a HTTP response', 'commenter': 'wwj-go'}, {'comment': 'For wechat and dingTalk，we send the error message to a URL named webhook by HTTP POST method', 'commenter': 'wwj-go'}]"
1614,docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.cn.md,"@@ -47,19 +47,18 @@ Maven 坐标：
 
 可配置属性：
 
-| 属性名          | 说明        | 默认值                    |
-| -------------- |:----------- |:------------------------ |
-| email.host     | TODO        | 无                       |
-| email.port     | TODO        | 无                       |
-| email.username | TODO        | 无                       |
-| email.password | TODO        | 无                       |
-| email.useSsl   | TODO        | true                     |
-| email.subject  | TODO        | ElasticJob error message |
-| email.from     | TODO        | 无                       |
-| email.to       | TODO        | 无                       |
-| email.cc       | TODO        | 无                       |
-| email.bcc      | TODO        | 无                       |
-| email.debug    | TODO        | false                    |
+| 属性名    | 说明                 | 默认值                   |
+| -------- |:-------------------- |:------------------------ |
+| host     | 邮件服务主机地址      | 无                       |
+| port     | 邮件服务主机端口      | 无                       |
+| username | 用户名               | 无                       |
+| password | 密码                 | 无                       |
+| useSsl   | 是否启用ssl加密传输   | 无                       |","[{'comment': 'There is default value here', 'commenter': 'terrymanu'}, {'comment': 'I will correct this  and other same case.', 'commenter': 'wwj-go'}]"
1617,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/parser/JobBeanDefinitionParser.java,"@@ -82,21 +82,26 @@ private BeanDefinition createJobConfigurationBeanDefinition(final Element elemen
         } else {
             result.addConstructorArgValue(Arrays.asList(element.getAttribute(JobBeanDefinitionTag.JOB_LISTENER_TYPES_ATTRIBUTE).split("","")));
         }
-        String tracingRef = element.getAttribute(JobBeanDefinitionTag.TRACING_REF_ATTRIBUTE);
-        if (Strings.isNullOrEmpty(tracingRef)) {
-            result.addConstructorArgValue(Collections.emptyList());
-        } else {
-            Collection<BeanDefinition> extraConfigs = new ManagedList<>(1);
-            extraConfigs.add(parserContext.getRegistry().getBeanDefinition(tracingRef));
-            result.addConstructorArgValue(extraConfigs);
-        }
+        result.addConstructorArgValue(parseExtraConfigs(new String[]{JobBeanDefinitionTag.TRACING_REF_ATTRIBUTE, JobBeanDefinitionTag.ERROR_HANDLER_CONFIG_REF_ATTRIBUTE},
+                element, parserContext));
         result.addConstructorArgValue(element.getAttribute(JobBeanDefinitionTag.DESCRIPTION_ATTRIBUTE));
         result.addConstructorArgValue(parsePropsElement(element, parserContext));
         result.addConstructorArgValue(element.getAttribute(JobBeanDefinitionTag.DISABLED_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(JobBeanDefinitionTag.OVERWRITE_ATTRIBUTE));
         return result.getBeanDefinition();
     }
     
+    private Collection<BeanDefinition> parseExtraConfigs(final String[] extraConfigRefs, final Element element, final ParserContext parserContext) {
+        Collection<BeanDefinition> extraConfigs = new ManagedList<>(extraConfigRefs.length);
+        for (String each : extraConfigRefs) {
+            String attribute = element.getAttribute(each);
+            if (!Strings.isNullOrEmpty(attribute)) {
+                extraConfigs.add(parserContext.getRegistry().getBeanDefinition(attribute));
+            }
+        }
+        return extraConfigs;","[{'comment': 'Return value should be name as `result`', 'commenter': 'terrymanu'}]"
1620,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailConfiguration.java,"@@ -50,11 +51,125 @@
     
     private final String bcc;
     
-    // TODO default value is false
     private final boolean debug;
     
     @Override
     public String getType() {
         return EmailType.TYPE;
     }
+    
+    /**
+     * Create Email configuration builder.
+     *
+     * @param host     host
+     * @param port     port
+     * @param username username
+     * @param password password
+     * @param from     from
+     * @param to       to
+     * @return Email configuration builder
+     */
+    public static Builder newBuilder(final String host, final int port, final String username,
+                                     final String password, final String from, final String to) {
+        return new Builder(host, port, username, password, from, to);
+    }
+    
+    @RequiredArgsConstructor(access = AccessLevel.PRIVATE)
+    public static class Builder {
+        
+        private final String host;
+        
+        private final int port;
+        
+        private final String username;
+        
+        private final String password;
+        
+        private boolean useSsl = true;
+        
+        private String subject = ""ElasticJob error message"";
+        
+        private final String from;
+        
+        private final String to;
+        
+        private String cc;
+        
+        private String bcc;
+        
+        private boolean debug;
+        
+        /**
+         * Set useSsl.
+         *
+         * @param useSsl useSsl
+         * @return Email configuration builder
+         */
+        public Builder useSsl(final boolean useSsl) {
+            this.useSsl = useSsl;
+            return this;
+        }
+        
+        /**
+         * Set subject.
+         *
+         * @param subject subject
+         * @return Email configuration builder
+         */
+        public Builder subject(final String subject) {
+            if (!Strings.isNullOrEmpty(subject)) {
+                this.subject = subject;
+            }
+            return this;
+        }
+        
+        /**
+         * Set cc.
+         *
+         * @param cc cc
+         * @return Email configuration builder
+         */
+        public Builder cc(final String cc) {
+            this.cc = cc;
+            return this;
+        }
+        
+        /**
+         * Set bcc.
+         *
+         * @param bcc bcc
+         * @return Email configuration builder
+         */
+        public Builder bcc(final String bcc) {
+            this.bcc = bcc;
+            return this;
+        }
+        
+        /**
+         * Set debug.
+         *
+         * @param debug debug
+         * @return Email configuration builder
+         */
+        public Builder debug(final boolean debug) {
+            this.debug = debug;
+            return this;
+        }
+        
+        /**
+         * Build Email configuration.
+         *
+         * @return Email configuration
+         */
+        public final EmailConfiguration build() {
+            Preconditions.checkArgument(!Strings.isNullOrEmpty(host), ""host can not be empty."");
+            Preconditions.checkArgument(port > 0 && port < 65535, ""port should larger than 0 and small than 65535."");","[{'comment': 'Constants on the left.', 'commenter': 'TeslaCN'}]"
1620,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailConfigurationTest.java,"@@ -0,0 +1,132 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.email;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
+@RunWith(MockitoJUnitRunner.class)
+public class EmailConfigurationTest {
+    
+    private static final String HOST = ""192.168.0.8"";","[{'comment': 'The IP is not very easy to understand.\r\n```suggestion\r\n    private static final String HOST = ""smtp.xxx.com"";\r\n```', 'commenter': 'TeslaCN'}]"
1620,elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailConfigurationTest.java,"@@ -0,0 +1,132 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.error.handler.email;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
+@RunWith(MockitoJUnitRunner.class)
+public class EmailConfigurationTest {
+    
+    private static final String HOST = ""192.168.0.8"";
+    
+    private static final int PORT = 8080;","[{'comment': 'Using HTTP port in SMTP testcase confuse users.', 'commenter': 'TeslaCN'}]"
1636,elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/bootstrap/impl/OneOffJobBootstrapTest.java,"@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.api.bootstrap.impl;
+
+import lombok.SneakyThrows;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
+import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
+import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduler;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.quartz.Scheduler;
+import org.quartz.SchedulerException;
+
+import java.lang.reflect.Field;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+public final class OneOffJobBootstrapTest {
+
+    private static final ZookeeperConfiguration ZOOKEEPER_CONFIGURATION = new ZookeeperConfiguration(EmbedTestingServer.getConnectionString(), OneOffJobBootstrapTest.class.getSimpleName());
+
+    private static final int SHARDING_TOTAL_COUNT = 3;
+
+    private ZookeeperRegistryCenter zkRegCenter;
+
+    @BeforeClass
+    public static void init() {
+        EmbedTestingServer.start();
+    }
+
+    @Before
+    public void setUp() {
+        zkRegCenter = new ZookeeperRegistryCenter(ZOOKEEPER_CONFIGURATION);
+        zkRegCenter.init();
+    }
+
+    @After
+    public void teardown() {
+        zkRegCenter.close();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void assertConfigFailedWithCron() {
+        new OneOffJobBootstrap(zkRegCenter, (SimpleJob) shardingContext -> {
+        }, JobConfiguration.newBuilder(""test_one_off_job_execute_with_config_cron"", SHARDING_TOTAL_COUNT).cron(""0/5 * * * * ?"").build());
+    }
+
+    @Test
+    public void assertExecute() {
+        AtomicInteger counter = new AtomicInteger(0);
+        final OneOffJobBootstrap oneOffJobBootstrap = new OneOffJobBootstrap(zkRegCenter, (SimpleJob) shardingContext -> {
+            counter.incrementAndGet();
+        }, JobConfiguration.newBuilder(""test_one_off_job_execute"", SHARDING_TOTAL_COUNT).build());
+        oneOffJobBootstrap.execute();
+        blockUtilFinish(oneOffJobBootstrap);
+        assertThat(SHARDING_TOTAL_COUNT, is(counter.get()));","[{'comment': 'Actual value is on the left.', 'commenter': 'TeslaCN'}]"
1665,elasticjob-infra/elasticjob-registry-center/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperElectionServiceTest.java,"@@ -29,9 +29,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.mockito.internal.verification.VerificationModeFactory;","[{'comment': 'Should we use the Class defined under package `internal`?\r\nMaybe using `org.mockito.Mockito#atLeastOnce` is better.', 'commenter': 'TeslaCN'}, {'comment': 'you are right, I will correct it.', 'commenter': 'wwj-go'}]"
1708,docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md,"@@ -76,26 +76,39 @@ When to execute OneOffJob is up to you.
 Developers can inject the `OneOffJobBootstrap` bean into where they plan to invoke.
 Trigger the job by invoking `execute()` method manually.
 
-**About @DependsOn Annotation**
-
-JobBootstraps are created by the Starter dynamically. It's unable to inject the `JobBootstrap` beans if the beans which depends on `JobBootstrap` were instantiated earlier than the instantiation of `JobBootstrap`.
-
-Developers can also retrieve `JobBootstrap` beans by ApplicationContext.
-
 The bean name of `OneOffJobBootstrap` is specified by property ""jobBootstrapBeanName"",
 Please refer to [Spring Boot Starter Configuration](/en/user-manual/elasticjob-lite/configuration/spring-boot-starter).
 
+```yaml
+elasticjob:
+  jobs:
+    myOneOffJob:
+      jobBootstrapBeanName: myOneOffJobBean
+      ....
+```
+
 ```java
 @RestController
-@DependsOn(""ElasticJobLiteAutoConfiguration"")
 public class OneOffJobController {
-    
-    @Resource(name = ""manualScriptJobOneOffJobBootstrap"")
-    private OneOffJobBootstrap manualScriptJob;
+
+    // Through ""@Resource"" injection
+    @Resource(name = ""myOneOffJobBean"")
+    private OneOffJobBootstrap myOneOffJob;
     
     @GetMapping(""/execute"")
     public String executeOneOffJob() {
-        manualScriptJob.execute();
+        myOneOffJob.execute();
+        return ""{\""msg\"":\""OK\""}"";
+    }
+
+    // Through ""@Autowired"" injection","[{'comment': '```suggestion\r\n    // Inject via ""@Autowired""\r\n```', 'commenter': 'TeslaCN'}]"
1721,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/JobInstance.java,"@@ -34,10 +34,16 @@
     
     private static final String DELIMITER = ""@-@"";
     
+    private static final String PARAM_JOB_INST_ID = ""jobInstanceId"";","[{'comment': 'Name it `PROPERTY_JOB_INSTANCE_ID` may be better.', 'commenter': 'TeslaCN'}]"
1721,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/JobInstance.java,"@@ -34,10 +34,16 @@
     
     private static final String DELIMITER = ""@-@"";
     
+    private static final String PARAM_JOB_INST_ID = ""jobInstanceId"";
+
     private final String jobInstanceId;
     
     public JobInstance() {
-        jobInstanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(""@"")[0];
+        String jobInstIdSuffix = System.getProperty(PARAM_JOB_INST_ID);
+        if (jobInstIdSuffix == null) {","[{'comment': 'Constant is on the left.\r\n\r\n```suggestion\r\n        if (null == jobInstIdSuffix) {\r\n```', 'commenter': 'TeslaCN'}]"
1721,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/JobInstance.java,"@@ -34,10 +34,16 @@
     
     private static final String DELIMITER = ""@-@"";
     
+    private static final String PROPERTY_JOB_INSTANCE_ID = ""jobInstanceId"";
+
     private final String jobInstanceId;
     
     public JobInstance() {
-        jobInstanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(""@"")[0];
+        String jobInstIdSuffix = System.getProperty(PROPERTY_JOB_INSTANCE_ID);","[{'comment': ""It's better to keep the names consistent.\r\n```suggestion\r\n        String jobInstanceIdSuffix = System.getProperty(PROPERTY_JOB_INSTANCE_ID);\r\n```"", 'commenter': 'TeslaCN'}]"
1756,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/snapshot/SnapshotService.java,"@@ -62,14 +62,13 @@ public SnapshotService(final CoordinatorRegistryCenter regCenter, final int port
      */
     public void listen() {
         try {
-            log.info(""ElasticJob: Snapshot service is running on port '{}'"", port);
-            openSocket(port);
+            log.info(""ElasticJob: Snapshot service is running on port '{}'"", openSocket(port));
         } catch (final IOException ex) {
             log.error(""ElasticJob: Snapshot service listen failure, error is: "", ex);
         }
     }
     
-    private void openSocket(final int port) throws IOException {
+    private int openSocket(final int port) throws IOException {
         serverSocket = new ServerSocket(port);
         String threadName = String.format(""elasticjob-snapshot-service-%d"", port);","[{'comment': 'Thread name should use actual port.', 'commenter': 'TeslaCN'}]"
1764,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/console/security/AuthenticationInfo.java,"@@ -0,0 +1,14 @@
+package org.apache.shardingsphere.elasticjob.cloud.console.security;","[{'comment': 'Missing Apache license header.', 'commenter': 'TeslaCN'}]"
1764,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/console/security/AuthenticationFilter.java,"@@ -0,0 +1,90 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.console.security;
+
+import com.google.common.base.Strings;
+import io.netty.buffer.ByteBufUtil;
+import io.netty.handler.codec.http.FullHttpRequest;
+import io.netty.handler.codec.http.FullHttpResponse;
+import io.netty.handler.codec.http.HttpHeaderNames;
+import io.netty.handler.codec.http.HttpResponseStatus;
+import io.netty.handler.codec.http.HttpUtil;
+import java.util.Collections;
+import java.util.Optional;
+import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.restful.Filter;
+import org.apache.shardingsphere.elasticjob.restful.Http;
+import org.apache.shardingsphere.elasticjob.restful.deserializer.RequestBodyDeserializer;
+import org.apache.shardingsphere.elasticjob.restful.deserializer.RequestBodyDeserializerFactory;
+import org.apache.shardingsphere.elasticjob.restful.filter.FilterChain;
+
+/**
+ * Authentication filter.
+ */
+@RequiredArgsConstructor
+public final class AuthenticationFilter implements Filter {
+
+    private final AuthenticationService authenticationService;
+
+    @Override
+    public void doFilter(final FullHttpRequest httpRequest, final FullHttpResponse httpResponse, final FilterChain filterChain) {
+        if (AuthenticationConstants.LOGIN_URI.equals(httpRequest.uri())) {
+            handleLogin(httpRequest, httpResponse);
+        } else {
+            String accessToken = httpRequest.headers().get(AuthenticationConstants.HEADER_NAME);
+            if (!Strings.isNullOrEmpty(accessToken) && accessToken
+                .equals(authenticationService.getToken())) {","[{'comment': 'These lines may be joined.', 'commenter': 'TeslaCN'}]"
1764,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/console/security/AuthenticationService.java,"@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.console.security;
+
+import com.google.common.base.Strings;
+import org.apache.commons.codec.binary.Base64;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.AuthConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+
+/**
+ * User authentication service.
+ */
+public final class AuthenticationService {
+
+    private final Base64 base64 = new Base64();
+
+    private final BootstrapEnvironment env = BootstrapEnvironment.getINSTANCE();
+
+    /**
+     * Check auth.
+     *
+     * @param authenticationInfo authentication info
+     * @return check success or failure
+     */
+    public boolean check(final AuthenticationInfo authenticationInfo) {
+        if (authenticationInfo == null || Strings.isNullOrEmpty(authenticationInfo.getUsername()) || Strings.isNullOrEmpty(authenticationInfo.getPassword())) {","[{'comment': 'Have constants on the left and variable on the right in = and equals conditional expressions.', 'commenter': 'TeslaCN'}]"
1764,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/HttpTestUtil.java,"@@ -49,12 +60,13 @@
     public static int post(final String url) {
         try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
             HttpPost httpPost = new HttpPost(url);
+            setAuth(httpPost);
             return httpClient.execute(httpPost).getStatusLine().getStatusCode();
         } catch (IOException e) {
             throw new HttpClientException(""send a post request for '%s' failed"", e, url);
         }
     }
-    
+","[{'comment': 'Keep indents (including blank lines) consistent with the previous one.', 'commenter': 'TeslaCN'}]"
1764,elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/HttpTestUtil.java,"@@ -74,7 +87,7 @@ public static int post(final String url, final String content) {
             throw new HttpClientException(""send a post request for '%s' with parameter '%s' failed"", e, url, content);
         }
     }
-    
+","[{'comment': 'Keep indents (including blank lines) consistent with the previous one.', 'commenter': 'TeslaCN'}]"
1764,elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/console/security/AuthenticationFilter.java,"@@ -0,0 +1,90 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.cloud.console.security;
+
+import com.google.common.base.Strings;
+import io.netty.buffer.ByteBufUtil;
+import io.netty.handler.codec.http.FullHttpRequest;
+import io.netty.handler.codec.http.FullHttpResponse;
+import io.netty.handler.codec.http.HttpHeaderNames;
+import io.netty.handler.codec.http.HttpResponseStatus;
+import io.netty.handler.codec.http.HttpUtil;
+import java.util.Collections;
+import java.util.Optional;
+import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.restful.Filter;
+import org.apache.shardingsphere.elasticjob.restful.Http;
+import org.apache.shardingsphere.elasticjob.restful.deserializer.RequestBodyDeserializer;
+import org.apache.shardingsphere.elasticjob.restful.deserializer.RequestBodyDeserializerFactory;
+import org.apache.shardingsphere.elasticjob.restful.filter.FilterChain;
+
+/**
+ * Authentication filter.
+ */
+@RequiredArgsConstructor
+public final class AuthenticationFilter implements Filter {
+
+    private final AuthenticationService authenticationService;
+
+    @Override
+    public void doFilter(final FullHttpRequest httpRequest, final FullHttpResponse httpResponse, final FilterChain filterChain) {
+        if (AuthenticationConstants.LOGIN_URI.equals(httpRequest.uri())) {
+            handleLogin(httpRequest, httpResponse);
+        } else {
+            String accessToken = httpRequest.headers().get(AuthenticationConstants.HEADER_NAME);
+            if (!Strings.isNullOrEmpty(accessToken) && accessToken
+                .equals(authenticationService.getToken())) {
+                filterChain.next(httpRequest);
+            } else {
+                respondWithUnauthorized(httpResponse);
+            }
+        }
+    }
+
+    private void handleLogin(final FullHttpRequest httpRequest, final FullHttpResponse httpResponse) {
+        byte[] bytes = ByteBufUtil.getBytes(httpRequest.content());
+        String mimeType = Optional.ofNullable(HttpUtil.getMimeType(httpRequest))
+            .orElseGet(() -> HttpUtil.getMimeType(Http.DEFAULT_CONTENT_TYPE)).toString();
+        RequestBodyDeserializer deserializer = RequestBodyDeserializerFactory.getRequestBodyDeserializer(mimeType);
+        AuthenticationInfo authenticationInfo = deserializer.deserialize(AuthenticationInfo.class, bytes);
+        boolean result = authenticationService.check(authenticationInfo);
+        if (result) {
+            String token = GsonFactory.getGson().toJson(Collections
+                .singletonMap(AuthenticationConstants.HEADER_NAME,
+                    authenticationService.getToken()));
+            respond(httpResponse, HttpResponseStatus.OK, token.getBytes());
+        } else {
+            respondWithUnauthorized(httpResponse);
+        }
+    }
+
+    private void respondWithUnauthorized(final FullHttpResponse httpResponse) {
+        String result = GsonFactory.getGson()
+            .toJson(Collections.singletonMap(""message"", ""Unauthorized.""));","[{'comment': 'These lines may be joined.', 'commenter': 'TeslaCN'}]"
1838,elasticjob-ecosystem/elasticjob-tracing/elasticjob-tracing-rdb/src/test/java/org/apache/shardingsphere/elasticjob/tracing/rdb/storage/RDBJobEventStorageTest.java,"@@ -38,17 +39,24 @@
 public final class RDBJobEventStorageTest {
     
     private RDBJobEventStorage storage;
+
+    private BasicDataSource dataSource;
     
     @Before
     public void setup() throws SQLException {
-        BasicDataSource dataSource = new BasicDataSource();
+        dataSource = new BasicDataSource();
         dataSource.setDriverClassName(org.h2.Driver.class.getName());
         dataSource.setUrl(""jdbc:h2:mem:job_event_storage"");
         dataSource.setUsername(""sa"");
         dataSource.setPassword("""");
         storage = new RDBJobEventStorage(dataSource);
     }
     
+    @After
+    public void teardown() throws SQLException{","[{'comment': 'Thanks for your contribution!\r\nPlease fix the checkstyle.', 'commenter': 'TeslaCN'}, {'comment': 'Thanks for reviewing! The checkstyle is fixed.', 'commenter': 'lzx404243'}]"
1890,pom.xml,"@@ -53,7 +53,7 @@
         <curator.version>5.1.0</curator.version>
         <lombok.version>1.18.12</lombok.version>
         <aspectj.version>1.9.1</aspectj.version>
-        <slf4j.version>1.7.7</slf4j.version>
+        <slf4j.version>1.7.25</slf4j.version>","[{'comment': 'Could you please keep the original version?', 'commenter': 'TeslaCN'}, {'comment': ""i can't， because mariaDB4j  dependent slf4j to 1.7.20 version "", 'commenter': 'skaic'}]"
1890,elasticjob-ecosystem/elasticjob-tracing/elasticjob-tracing-rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/storage/RDBJobEventStorage.java,"@@ -358,9 +358,19 @@ private String truncateString(final String str) {
             preparedStatement.setString(1, taskId);
             try (ResultSet resultSet = preparedStatement.executeQuery()) {
                 while (resultSet.next()) {
-                    JobStatusTraceEvent jobStatusTraceEvent = new JobStatusTraceEvent(resultSet.getString(1), resultSet.getString(2), resultSet.getString(3), resultSet.getString(4),
-                            resultSet.getString(5), Source.valueOf(resultSet.getString(6)), resultSet.getString(7), resultSet.getString(8),
-                            State.valueOf(resultSet.getString(9)), resultSet.getString(10), new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"").parse(resultSet.getString(11)));
+                    JobStatusTraceEvent jobStatusTraceEvent = new JobStatusTraceEvent(","[{'comment': 'Could you please keep the original formats?', 'commenter': 'TeslaCN'}, {'comment': 'ok，I roll back the code.', 'commenter': 'skaic'}]"
1890,elasticjob-ecosystem/elasticjob-tracing/elasticjob-tracing-rdb/pom.xml,"@@ -79,5 +79,21 @@
             <groupId>com.h2database</groupId>
             <artifactId>h2</artifactId>
         </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>","[{'comment': 'Is it necessary to declare this dependency here?', 'commenter': 'TeslaCN'}, {'comment': 'No neet，I roll back the code.', 'commenter': 'skaic'}]"
1938,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -113,7 +116,8 @@ private static NetworkInterface getFirstNetworkInterface(final List<NetworkInter
         }
         return result;
     }
-    
+
+    // For testing.","[{'comment': 'What is `for testing`?', 'commenter': 'TeslaCN'}]"
1938,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -129,7 +133,18 @@ private static boolean ignoreNetworkInterface(final NetworkInterface networkInte
             return true;
         }
     }
-    
+
+    // For testing.","[{'comment': 'What is `for testing`?', 'commenter': 'TeslaCN'}]"
1938,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtils.java,"@@ -95,14 +97,15 @@ private static NetworkInterface findNetworkInterface() {
         }
         return result;
     }
-    
+
+    // For testing.","[{'comment': 'What is `for testing`?', 'commenter': 'TeslaCN'}, {'comment': '`for testing`  note the private method has  junit test. I remove this note.', 'commenter': 'sunkai-cai'}]"
1938,elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/env/IpUtilsTest.java,"@@ -21,18 +21,105 @@
 import org.junit.Test;
 
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.net.Inet4Address;
+import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Vector;
 
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
 import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public final class IpUtilsTest {
     
     @Test
     public void assertGetIp() {
         assertNotNull(IpUtils.getIp());
     }
-    
+
+    @Test
+    @SneakyThrows
+    public void assertPreferredNetworkInterface() {
+        System.setProperty(IpUtils.PREFERRED_NETWORK_INTERFACE, ""eth0"");
+        Method declaredMethod = IpUtils.class.getDeclaredMethod(""isPreferredNetworkInterface"", NetworkInterface.class);
+        declaredMethod.setAccessible(true);
+        NetworkInterface mockNetworkInterface = mock(NetworkInterface.class);
+        when(mockNetworkInterface.getDisplayName()).thenReturn(""eth0"");
+        boolean result = (boolean) declaredMethod.invoke(""isPreferredNetworkInterface"", mockNetworkInterface);
+        assertTrue(result);
+        System.clearProperty(IpUtils.PREFERRED_NETWORK_INTERFACE);
+    }
+
+    @Test
+    @SneakyThrows
+    public void assertPreferredNetworkAddress() {
+        Method declaredMethod = IpUtils.class.getDeclaredMethod(""isPreferredAddress"", InetAddress.class);
+        declaredMethod.setAccessible(true);
+        InetAddress inetAddress = mock(InetAddress.class);
+
+        System.setProperty(IpUtils.PREFERRED_NETWORK_IP, ""192.168"");
+        when(inetAddress.getHostAddress()).thenReturn(""192.168.0.100"");
+        assertTrue((boolean) declaredMethod.invoke(""isPreferredAddress"", inetAddress));
+        when(inetAddress.getHostAddress()).thenReturn(""10.10.0.100"");
+        assertFalse((boolean) declaredMethod.invoke(""isPreferredAddress"", inetAddress));
+        System.clearProperty(IpUtils.PREFERRED_NETWORK_IP);
+
+        System.setProperty(IpUtils.PREFERRED_NETWORK_IP, ""10.10.*"");
+        when(inetAddress.getHostAddress()).thenReturn(""10.10.0.100"");
+        assertTrue((boolean) declaredMethod.invoke(""isPreferredAddress"", inetAddress));
+        when(inetAddress.getHostAddress()).thenReturn(""10.0.0.100"");
+        assertFalse((boolean) declaredMethod.invoke(""isPreferredAddress"", inetAddress));
+        System.clearProperty(IpUtils.PREFERRED_NETWORK_IP);
+    }
+
+    @Test
+    @SneakyThrows
+    public void assertGetFirstNetworkInterface() {
+        InetAddress address1 = mock(Inet4Address.class);
+        when(address1.isLoopbackAddress()).thenReturn(false);
+        when(address1.isAnyLocalAddress()).thenReturn(false);
+        when(address1.isReachable(100)).thenReturn(true);
+        when(address1.getHostAddress()).thenReturn(""10.10.0.1"");
+        Vector<InetAddress> addresses1 = new Vector<>();
+        addresses1.add(address1);
+","[{'comment': 'Remove redundant blank lines.', 'commenter': 'TeslaCN'}, {'comment': 'fine', 'commenter': 'sunkai-cai'}]"
1952,elasticjob-infra/elasticjob-registry-center/src/main/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperRegistryCenter.java,"@@ -137,10 +137,7 @@ public String get(final String key) {
             return getDirectly(key);
         }
         Optional<ChildData> resultInCache = cache.get(key);
-        if (resultInCache.isPresent()) {
-            return null == resultInCache.get().getData() ? null : new String(resultInCache.get().getData(), StandardCharsets.UTF_8);
-        }
-        return getDirectly(key);
+        return resultInCache.map(v -> null == v.getData() ? null : new String(v.getData(), StandardCharsets.UTF_8)).orElse(getDirectly(key));","[{'comment': 'Use `orElseGet` to avoid invoking `getDirectly` every time.', 'commenter': 'TeslaCN'}, {'comment': 'Changed to orElseGet.', 'commenter': 'Technoboy-'}]"
1955,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduleController.java,"@@ -88,8 +91,23 @@ public synchronized void rescheduleJob() {
         }
     }
     
-    private Trigger createCronTrigger(final String cron) {
-        return TriggerBuilder.newTrigger().withIdentity(triggerIdentity).withSchedule(CronScheduleBuilder.cronSchedule(cron).withMisfireHandlingInstructionDoNothing()).build();
+    private Trigger createCronTrigger(final String cron, final String timeZoneString) {
+        return TriggerBuilder.newTrigger().withIdentity(triggerIdentity).withSchedule(
+                CronScheduleBuilder.cronSchedule(cron).inTimeZone(parseTimeZoneString(timeZoneString)).withMisfireHandlingInstructionDoNothing()
+        ).build();
+    }
+    
+    private TimeZone parseTimeZoneString(final String timeZoneString) {
+        TimeZone timeZone;","[{'comment': 'Name the variable `result`, please.', 'commenter': 'TeslaCN'}]"
1955,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduleController.java,"@@ -88,8 +91,23 @@ public synchronized void rescheduleJob() {
         }
     }
     
-    private Trigger createCronTrigger(final String cron) {
-        return TriggerBuilder.newTrigger().withIdentity(triggerIdentity).withSchedule(CronScheduleBuilder.cronSchedule(cron).withMisfireHandlingInstructionDoNothing()).build();
+    private Trigger createCronTrigger(final String cron, final String timeZoneString) {
+        return TriggerBuilder.newTrigger().withIdentity(triggerIdentity).withSchedule(
+                CronScheduleBuilder.cronSchedule(cron).inTimeZone(parseTimeZoneString(timeZoneString)).withMisfireHandlingInstructionDoNothing()
+        ).build();
+    }
+    
+    private TimeZone parseTimeZoneString(final String timeZoneString) {
+        TimeZone timeZone;
+        if (null != timeZoneString) {
+            timeZone = TimeZone.getTimeZone(timeZoneString);
+            if (""GMT"".equals(timeZone.getID()) && !timeZoneString.startsWith(""GMT"")) {","[{'comment': 'Consider using `Preconditions`.', 'commenter': 'TeslaCN'}]"
1955,elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/config/RescheduleListenerManagerTest.java,"@@ -63,19 +63,19 @@ public void assertStart() {
     @Test
     public void assertCronSettingChangedJobListenerWhenIsNotCronPath() {
         rescheduleListenerManager.new CronSettingAndJobEventChangedJobListener().dataChanged(""/test_job/config/other"", Type.NODE_CREATED, LiteYamlConstants.getJobYaml());
-        verify(jobScheduleController, times(0)).rescheduleJob(ArgumentMatchers.any());
+        verify(jobScheduleController, times(0)).rescheduleJob(ArgumentMatchers.any(), ArgumentMatchers.any());","[{'comment': 'Use static import for `ArgumentMatchers`.', 'commenter': 'TeslaCN'}, {'comment': 'ok', 'commenter': 'sunkai-cai'}]"
1955,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduleController.java,"@@ -88,8 +92,25 @@ public synchronized void rescheduleJob() {
         }
     }
     
-    private Trigger createCronTrigger(final String cron) {
-        return TriggerBuilder.newTrigger().withIdentity(triggerIdentity).withSchedule(CronScheduleBuilder.cronSchedule(cron).withMisfireHandlingInstructionDoNothing()).build();
+    private Trigger createCronTrigger(final String cron, final String timeZoneString) {
+        return TriggerBuilder.newTrigger().withIdentity(triggerIdentity).withSchedule(
+                CronScheduleBuilder.cronSchedule(cron).inTimeZone(parseTimeZoneString(timeZoneString)).withMisfireHandlingInstructionDoNothing()
+        ).build();
+    }
+
+    /**
+     * Get the TimeZone for the time zone specification.
+     *
+     * @param timeZoneString must start with ""GMT"", such as ""GMT+8:00""
+     * @return the specified TimeZone, or the GMT zone if the `timeZoneString` cannot be understood.
+     */
+    private TimeZone parseTimeZoneString(final String timeZoneString) {
+        if (null == timeZoneString) {
+            return TimeZone.getDefault();
+        }
+","[{'comment': 'Please remove the redundant line. ', 'commenter': 'TeslaCN'}, {'comment': 'ok', 'commenter': 'sunkai-cai'}]"
1956,elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobConfigurationAPIImpl.java,"@@ -31,22 +31,26 @@
  */
 @RequiredArgsConstructor
 public final class JobConfigurationAPIImpl implements JobConfigurationAPI {
-    
+","[{'comment': 'BTW, keep the indents please.', 'commenter': 'TeslaCN'}, {'comment': 'fixed，sorry but there is a litte strange why  4 space indent in every empty line ', 'commenter': 'stanstanwang'}]"
1956,elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobConfigurationAPIImpl.java,"@@ -36,7 +36,11 @@
     
     @Override
     public JobConfigurationPOJO getJobConfiguration(final String jobName) {
-        return YamlEngine.unmarshal(regCenter.get(new JobNodePath(jobName).getConfigNodePath()), JobConfigurationPOJO.class);
+        String yamlContent = regCenter.get(new JobNodePath(jobName).getConfigNodePath());
+        if (yamlContent == null) {","[{'comment': 'Constant is on the left.', 'commenter': 'TeslaCN'}, {'comment': 'fixed, sorry for that..', 'commenter': 'stanstanwang'}]"
1956,elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobConfigurationAPIImpl.java,"@@ -36,7 +36,11 @@
     
     @Override
     public JobConfigurationPOJO getJobConfiguration(final String jobName) {
-        return YamlEngine.unmarshal(regCenter.get(new JobNodePath(jobName).getConfigNodePath()), JobConfigurationPOJO.class);
+        String yamlContent = regCenter.get(new JobNodePath(jobName).getConfigNodePath());","[{'comment': 'How about like this:\r\nOptional.ofNullable(yamlContent).map(v -> YamlEngine.unmarshal(v, JobConfigurationPOJO.class)).orElse(null) ?\r\n@TeslaCN @stanstanwang ', 'commenter': 'Technoboy-'}]"
1967,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/tracing/TracingProperties.java,"@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.boot.tracing;
+
+import lombok.Getter;
+import lombok.Setter;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+
+@Getter
+@Setter
+@ConfigurationProperties(prefix = ""elasticjob.tracing"")
+public class TracingProperties {
+    
+    private String type;
+    
+    private String[] includeJobNames;","[{'comment': 'Could we consider using Set here?', 'commenter': 'TeslaCN'}, {'comment': 'good idea', 'commenter': 'sunkai-cai'}]"
1967,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/ElasticJobBootstrapConfiguration.java,"@@ -95,10 +95,25 @@ private void constructJobBootstraps(final ElasticJobProperties elasticJobPropert
         }
     }
     
+    private void jobExtraConfigurations(final JobConfiguration jobConfig, final TracingConfiguration<?> tracingConfig) {
+        if (null == tracingConfig) {
+            return;
+        }
+        TracingProperties tracingProperties = applicationContext.getBean(TracingProperties.class);","[{'comment': 'What if user configured both `include` and `exclude`? I prefer throwing an exception.\r\n', 'commenter': 'TeslaCN'}, {'comment': 'you are right', 'commenter': 'sunkai-cai'}]"
1967,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/ElasticJobBootstrapConfiguration.java,"@@ -95,10 +95,30 @@ private void constructJobBootstraps(final ElasticJobProperties elasticJobPropert
         }
     }
     
+    private void jobExtraConfigurations(final JobConfiguration jobConfig, final TracingConfiguration<?> tracingConfig) {
+        if (null == tracingConfig) {
+            return;
+        }
+        TracingProperties tracingProperties = applicationContext.getBean(TracingProperties.class);
+        Preconditions.checkArgument(null == tracingProperties.getIncludeJobNames()
+                || null == tracingProperties.getExcludeJobNames(),
+                ""[tracing.includeJobNames] and [tracing.excludeJobNames] are mutually exclusive."");
+        if (null == tracingProperties.getIncludeJobNames() && null == tracingProperties.getExcludeJobNames()) {
+            jobConfig.getExtraConfigurations().add(tracingConfig);
+        } else if (null != tracingProperties.getIncludeJobNames()) {
+            if (tracingProperties.getIncludeJobNames().contains(jobConfig.getJobName())) {
+                jobConfig.getExtraConfigurations().add(tracingConfig);
+            }
+        } else if (null != tracingProperties.getExcludeJobNames()
+                && !tracingProperties.getExcludeJobNames().contains(jobConfig.getJobName())) {
+            jobConfig.getExtraConfigurations().add(tracingConfig);
+        }","[{'comment': 'I think these logic can be more elegant.', 'commenter': 'TeslaCN'}, {'comment': 'Ok, I try it.', 'commenter': 'sunkai-cai'}]"
1980,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfiguration.java,"@@ -0,0 +1,155 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+
+/**
+ * The annotation that specify a jo of elastic.","[{'comment': 'A typo here.', 'commenter': 'TeslaCN'}]"
1980,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfiguration.java,"@@ -0,0 +1,155 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+
+/**
+ * The annotation that specify a jo of elastic.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface ElasticJobConfiguration {
+    
+    /**
+     * Job name.
+     * @return jobName
+     */
+    String jobName();
+    
+    /**
+     * CRON expression, control the job trigger time.
+     * @return cron
+     */
+    String cron() default """";
+    
+    /**
+     * time zone of CRON.
+     * @return timeZone
+     */
+    String timeZone() default """";
+    
+    /**
+     * Sharding total count.
+     * @return shardingTotalCount
+     */
+    int shardingTotalCount();
+    
+    /**
+     * Sharding item parameters.
+     * @return shardingItemParameters
+     */
+    String shardingItemParameters() default """";
+    
+    /**
+     * Job parameter.
+     * @return jobParameter
+     */
+    String jobParameter() default """";
+    
+    /**
+     * Monitor job execution status.
+     * @return monitorExecution
+     */
+    boolean monitorExecution() default true;
+    
+    /**
+     * Enable or disable job failover.
+     * @return failover
+     */
+    boolean failover() default false;
+    
+    /**
+     * Enable or disable the missed task to re-execute.
+     * @return misfire
+     */
+    boolean misfire() default true;
+    
+    /**
+     * The maximum value for time difference between server and registry center in seconds.
+     * @return maxTimeDiffSeconds
+     */
+    int maxTimeDiffSeconds() default -1;
+    
+    /**
+     * Service scheduling interval in minutes for repairing job server inconsistent state.
+     * @return reconcileIntervalMinutes
+     */
+    int reconcileIntervalMinutes() default 10;
+    
+    /**
+     * Job sharding strategy type.
+     * @return jobShardingStrategyType
+     */
+    String jobShardingStrategyType() default ""AVG_ALLOCATION"";","[{'comment': ""It's better to keep the default value same as JobConfiguration."", 'commenter': 'TeslaCN'}]"
1980,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfiguration.java,"@@ -0,0 +1,155 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+
+/**
+ * The annotation that specify a jo of elastic.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface ElasticJobConfiguration {
+    
+    /**
+     * Job name.
+     * @return jobName
+     */
+    String jobName();
+    
+    /**
+     * CRON expression, control the job trigger time.
+     * @return cron
+     */
+    String cron() default """";
+    
+    /**
+     * time zone of CRON.
+     * @return timeZone
+     */
+    String timeZone() default """";
+    
+    /**
+     * Sharding total count.
+     * @return shardingTotalCount
+     */
+    int shardingTotalCount();
+    
+    /**
+     * Sharding item parameters.
+     * @return shardingItemParameters
+     */
+    String shardingItemParameters() default """";
+    
+    /**
+     * Job parameter.
+     * @return jobParameter
+     */
+    String jobParameter() default """";
+    
+    /**
+     * Monitor job execution status.
+     * @return monitorExecution
+     */
+    boolean monitorExecution() default true;
+    
+    /**
+     * Enable or disable job failover.
+     * @return failover
+     */
+    boolean failover() default false;
+    
+    /**
+     * Enable or disable the missed task to re-execute.
+     * @return misfire
+     */
+    boolean misfire() default true;
+    
+    /**
+     * The maximum value for time difference between server and registry center in seconds.
+     * @return maxTimeDiffSeconds
+     */
+    int maxTimeDiffSeconds() default -1;
+    
+    /**
+     * Service scheduling interval in minutes for repairing job server inconsistent state.
+     * @return reconcileIntervalMinutes
+     */
+    int reconcileIntervalMinutes() default 10;
+    
+    /**
+     * Job sharding strategy type.
+     * @return jobShardingStrategyType
+     */
+    String jobShardingStrategyType() default ""AVG_ALLOCATION"";
+    
+    /**
+     * Job thread pool handler type.
+     * @return jobExecutorServiceHandlerType
+     */
+    String jobExecutorServiceHandlerType() default ""CPU"";","[{'comment': ""It's better to keep the default value same as JobConfiguration."", 'commenter': 'TeslaCN'}]"
1980,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/api/JobExtraConfigurationFactory.java,"@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *  
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.api;
+
+/**
+ * Job extra configuration factory.
+ */
+public interface JobExtraConfigurationFactory {
+    
+    /**
+     * get JobExtraConfiguration.","[{'comment': 'The first letter should be uppercase.', 'commenter': 'TeslaCN'}]"
1980,elasticjob-api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfigurationTest.java,"@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.Queue;
+import org.apache.shardingsphere.elasticjob.annotation.job.impl.SimpleTestJob;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+import org.junit.Test;
+
+public class ElasticJobConfigurationTest {
+    
+    @Test
+    public void assertAnnotationJob() {
+        ElasticJobConfiguration annotation = SimpleTestJob.class.getAnnotation(ElasticJobConfiguration.class);
+        assertEquals(annotation.jobName(), ""SimpleTestJob"");","[{'comment': 'Use `assertThat` instead of `assertEquals`.', 'commenter': 'TeslaCN'}]"
1980,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/annotation/JobAnnotationBuilder.java,"@@ -0,0 +1,72 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.annotation;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobAnnotationException;
+
+public class JobAnnotationBuilder {
+    
+    /**
+     * generate JobConfiguration from @ElasticJobConfiguration.
+     * @param type The job of @ElasticJobConfiguration annotation class
+     * @return JobConfiguration
+     */
+    public static JobConfiguration generateJobConfiguration(final Class<?> type) {
+        ElasticJobConfiguration annotation = type.getAnnotation(ElasticJobConfiguration.class);
+        Preconditions.checkArgument(null != annotation, ""@ElasticJobConfiguration not found by class '%s'."", type);
+        Preconditions.checkArgument(!Strings.isNullOrEmpty(annotation.jobName()), ""@ElasticJobConfiguration jobName not be empty by class '%s'."", type);
+        JobConfiguration.Builder jobConfigurationBuilder = JobConfiguration.newBuilder(annotation.jobName(), annotation.shardingTotalCount())
+                .shardingItemParameters(annotation.shardingItemParameters())
+                .cron(Strings.isNullOrEmpty(annotation.cron()) ? null : annotation.cron())
+                .timeZone(Strings.isNullOrEmpty(annotation.timeZone()) ? null : annotation.timeZone())
+                .jobParameter(annotation.jobParameter())
+                .monitorExecution(annotation.monitorExecution())
+                .failover(annotation.failover())
+                .misfire(annotation.misfire())
+                .maxTimeDiffSeconds(annotation.maxTimeDiffSeconds())
+                .reconcileIntervalMinutes(annotation.reconcileIntervalMinutes())
+                .jobShardingStrategyType(annotation.jobShardingStrategyType())
+                .jobExecutorServiceHandlerType(annotation.jobExecutorServiceHandlerType())
+                .jobErrorHandlerType(Strings.isNullOrEmpty(annotation.jobErrorHandlerType()) ? null : annotation.jobErrorHandlerType())
+                .jobListenerTypes(annotation.jobListenerTypes())
+                .description(annotation.description())
+                .disabled(annotation.disabled())
+                .overwrite(annotation.overwrite());
+        for (Class<? extends JobExtraConfigurationFactory> clazz : annotation.extraConfigurations()) {
+            try {
+                JobExtraConfiguration jobExtraConfiguration = clazz.newInstance().getJobExtraConfiguration();","[{'comment': 'I prefer doing a null check here. What do you think? ', 'commenter': 'TeslaCN'}]"
1980,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/annotation/JobAnnotationBuilder.java,"@@ -0,0 +1,72 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.annotation;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobAnnotationException;
+
+public class JobAnnotationBuilder {
+    
+    /**
+     * generate JobConfiguration from @ElasticJobConfiguration.
+     * @param type The job of @ElasticJobConfiguration annotation class
+     * @return JobConfiguration
+     */
+    public static JobConfiguration generateJobConfiguration(final Class<?> type) {
+        ElasticJobConfiguration annotation = type.getAnnotation(ElasticJobConfiguration.class);
+        Preconditions.checkArgument(null != annotation, ""@ElasticJobConfiguration not found by class '%s'."", type);
+        Preconditions.checkArgument(!Strings.isNullOrEmpty(annotation.jobName()), ""@ElasticJobConfiguration jobName not be empty by class '%s'."", type);
+        JobConfiguration.Builder jobConfigurationBuilder = JobConfiguration.newBuilder(annotation.jobName(), annotation.shardingTotalCount())
+                .shardingItemParameters(annotation.shardingItemParameters())
+                .cron(Strings.isNullOrEmpty(annotation.cron()) ? null : annotation.cron())
+                .timeZone(Strings.isNullOrEmpty(annotation.timeZone()) ? null : annotation.timeZone())
+                .jobParameter(annotation.jobParameter())
+                .monitorExecution(annotation.monitorExecution())
+                .failover(annotation.failover())
+                .misfire(annotation.misfire())
+                .maxTimeDiffSeconds(annotation.maxTimeDiffSeconds())
+                .reconcileIntervalMinutes(annotation.reconcileIntervalMinutes())
+                .jobShardingStrategyType(annotation.jobShardingStrategyType())
+                .jobExecutorServiceHandlerType(annotation.jobExecutorServiceHandlerType())
+                .jobErrorHandlerType(Strings.isNullOrEmpty(annotation.jobErrorHandlerType()) ? null : annotation.jobErrorHandlerType())
+                .jobListenerTypes(annotation.jobListenerTypes())
+                .description(annotation.description())
+                .disabled(annotation.disabled())
+                .overwrite(annotation.overwrite());
+        for (Class<? extends JobExtraConfigurationFactory> clazz : annotation.extraConfigurations()) {
+            try {
+                JobExtraConfiguration jobExtraConfiguration = clazz.newInstance().getJobExtraConfiguration();
+                jobConfigurationBuilder.addExtraConfigurations(jobExtraConfiguration);
+            } catch (IllegalAccessException | InstantiationException exception) {
+                throw (JobAnnotationException) new JobAnnotationException(""new JobExtraConfigurationFactory instance by class '%s' failure"", clazz).initCause(exception);
+            }
+        }
+        for (ElasticJobProp prop :annotation.props()) {
+            jobConfigurationBuilder.setProperty(prop.key(), prop.value());
+        }
+    ","[{'comment': 'Remove the redundant blank line.', 'commenter': 'TeslaCN'}]"
1980,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfiguration.java,"@@ -0,0 +1,155 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+
+/**
+ * The annotation that specify a jo of elastic.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface ElasticJobConfiguration {
+    
+    /**
+     * Job name.
+     * @return jobName
+     */
+    String jobName();
+    
+    /**
+     * CRON expression, control the job trigger time.
+     * @return cron
+     */
+    String cron() default """";
+    
+    /**
+     * time zone of CRON.","[{'comment': 'The first letter should be uppercase.', 'commenter': 'TeslaCN'}]"
1980,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobProp.java,"@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * The annotation that specify elastic-job prop.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ElasticJobProp {
+    
+    /**
+     * prop key.","[{'comment': 'The first letter should be uppercase.', 'commenter': 'TeslaCN'}]"
1980,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobProp.java,"@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * The annotation that specify elastic-job prop.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ElasticJobProp {
+    
+    /**
+     * prop key.
+     * @return key
+     */
+    String key();
+    
+    /**
+     * prop value.","[{'comment': 'The first letter should be uppercase.', 'commenter': 'TeslaCN'}]"
1980,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/exception/JobAnnotationException.java,"@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.infra.exception;
+
+/**
+ * Job annotation exception.
+ */
+public final class JobAnnotationException extends RuntimeException {","[{'comment': 'Could we reuse the `JobConfigurationException`?', 'commenter': 'TeslaCN'}]"
2087,pom.xml,"@@ -705,6 +705,12 @@
                 </pluginManagement>
             </build>
         </profile>
+        <profile>","[{'comment': ""What's the different with `-Dmaven.javadoc.skip=true`?"", 'commenter': 'TeslaCN'}, {'comment': '-Dmaven.javadoc.skip=true on windows will be fail', 'commenter': 'm1ngyuan'}, {'comment': ""> -Dmaven.javadoc.skip=true on windows will be fail\r\n\r\nWhy? Could you check it again? I think it doesn't make sense."", 'commenter': 'TeslaCN'}, {'comment': ' Thank you for your advice,I found a solution to the problem,Please trigger GitHub workflow again', 'commenter': 'm1ngyuan'}]"
2103,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/core/scanner/ElasticJobScanRegistrar.java,"@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.core.scanner;
+
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.context.ResourceLoaderAware;
+import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
+import org.springframework.core.annotation.AnnotationAttributes;
+import org.springframework.core.io.ResourceLoader;
+import org.springframework.core.type.AnnotationMetadata;
+import org.springframework.util.StringUtils;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+/**
+ * A {@link ImportBeanDefinitionRegistrar} to allow annotation configuration of Elastic Job scanning.
+ *
+ * @see ClassPathJobScanner
+ */
+public class ElasticJobScanRegistrar implements ImportBeanDefinitionRegistrar, ResourceLoaderAware {
+
+    /**
+     * set resourceLoader.
+     * @param resourceLoader resourceLoader
+     *
+     * @deprecated  NOP
+     */
+    @Override
+    @Deprecated
+    public void setResourceLoader(final ResourceLoader resourceLoader) {
+        // NOP
+    }
+
+    @Override
+    public void registerBeanDefinitions(final AnnotationMetadata importingClassMetadata,
+                                        final BeanDefinitionRegistry registry) {
+        AnnotationAttributes elasticJobScanAttrs =
+                AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes(ElasticJobScan.class.getName()));
+        if (elasticJobScanAttrs != null) {
+            registerBeanDefinitions(importingClassMetadata, elasticJobScanAttrs, registry);
+        }
+    }
+
+    private void registerBeanDefinitions(final AnnotationMetadata annoMeta, final AnnotationAttributes annoAttrs,
+            final BeanDefinitionRegistry registry) {
+","[{'comment': 'Please remove redundant blank lines.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/core/scanner/JobScannerConfiguration.java,"@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.core.scanner;
+
+import lombok.Getter;
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
+import org.springframework.util.Assert;
+
+/**
+ * BeanDefinitionRegistryPostProcessor that searches recursively starting from a base package for interfaces.
+ *
+ */
+@Getter
+public class JobScannerConfiguration implements BeanDefinitionRegistryPostProcessor, InitializingBean {
+
+    private final String[] basePackages;
+
+    public JobScannerConfiguration(final String[] basePackages) {
+        this.basePackages = basePackages;
+    }
+
+    /**","[{'comment': 'Could we remove the inheritDoc?', 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/resources/META-INF/namespace/elasticjob.xsd,"@@ -21,76 +21,92 @@
             xmlns:beans=""http://www.springframework.org/schema/beans""
             targetNamespace=""http://shardingsphere.apache.org/schema/elasticjob""
             elementFormDefault=""qualified"">
-    <xsd:import namespace=""http://www.springframework.org/schema/beans"" schemaLocation=""http://www.springframework.org/schema/beans/spring-beans.xsd"" />
-    
+    <xsd:import namespace=""http://www.springframework.org/schema/beans""
+                schemaLocation=""http://www.springframework.org/schema/beans/spring-beans.xsd""/>
+
+    <xsd:element name=""job-scanner"">
+        <xsd:complexType>
+            <xsd:complexContent>
+                <xsd:extension base=""beans:identifiedType"">
+<!--                    <xsd:attribute name=""id"" type=""xsd:ID"">-->
+<!--                        <xsd:annotation>-->
+<!--                            <xsd:documentation><![CDATA[ The unique identifier for a bean. ]]></xsd:documentation>-->
+<!--                        </xsd:annotation>-->
+<!--                    </xsd:attribute>-->","[{'comment': ""What's this for?"", 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/resources/META-INF/namespace/elasticjob.xsd,"@@ -21,76 +21,92 @@
             xmlns:beans=""http://www.springframework.org/schema/beans""
             targetNamespace=""http://shardingsphere.apache.org/schema/elasticjob""
             elementFormDefault=""qualified"">
-    <xsd:import namespace=""http://www.springframework.org/schema/beans"" schemaLocation=""http://www.springframework.org/schema/beans/spring-beans.xsd"" />
-    
+    <xsd:import namespace=""http://www.springframework.org/schema/beans""
+                schemaLocation=""http://www.springframework.org/schema/beans/spring-beans.xsd""/>
+
+    <xsd:element name=""job-scanner"">
+        <xsd:complexType>
+            <xsd:complexContent>
+                <xsd:extension base=""beans:identifiedType"">
+<!--                    <xsd:attribute name=""id"" type=""xsd:ID"">-->
+<!--                        <xsd:annotation>-->
+<!--                            <xsd:documentation><![CDATA[ The unique identifier for a bean. ]]></xsd:documentation>-->
+<!--                        </xsd:annotation>-->
+<!--                    </xsd:attribute>-->
+                    <xsd:attribute name=""base-package"" type=""xsd:string"" use=""required""/>
+                </xsd:extension>
+            </xsd:complexContent>
+        </xsd:complexType>
+    </xsd:element>
+
     <xsd:element name=""job"">
         <xsd:complexType>
             <xsd:complexContent>
                 <xsd:extension base=""beans:identifiedType"">
                     <xsd:all>
-                        <xsd:element ref=""beans:props"" minOccurs=""0"" />
+                        <xsd:element ref=""beans:props"" minOccurs=""0""/>","[{'comment': 'Please keep the origin code style here and below.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/core/scanner/ClassPathJobScanner.java,"@@ -0,0 +1,90 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.core.scanner;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.springframework.beans.factory.config.BeanDefinitionHolder;
+import org.springframework.beans.factory.config.RuntimeBeanReference;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.context.annotation.ClassPathBeanDefinitionScanner;
+import org.springframework.context.annotation.ScannedGenericBeanDefinition;
+import org.springframework.core.type.filter.AnnotationTypeFilter;
+
+import java.util.Objects;
+import java.util.Set;
+
+/**
+ * A {@link ClassPathBeanDefinitionScanner} that registers ScheduleJobBootstrap by {@code basePackage}.
+ *
+ * @see ScheduleJobBootstrap
+ */
+public class ClassPathJobScanner extends ClassPathBeanDefinitionScanner {
+
+    public ClassPathJobScanner(final BeanDefinitionRegistry registry) {
+        super(registry, false);
+    }
+
+    /**
+     * Calls the parent search that will search and register all the candidates by {@code ElasticJobConfiguration}.
+     *
+     * @param basePackages the packages to check for annotated classes
+     */
+    @Override
+    protected Set<BeanDefinitionHolder> doScan(final String... basePackages) {
+        addIncludeFilter(new AnnotationTypeFilter(ElasticJobConfiguration.class));
+","[{'comment': 'Please remove redundant blank lines here and below.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfiguration.java,"@@ -0,0 +1,162 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+
+/**
+ * The annotation that specify a job of elastic.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface ElasticJobConfiguration {
+    
+    /**
+     * Job name.
+     * @return jobName
+     */
+    String jobName();
+    
+    /**
+     * CRON expression, control the job trigger time.
+     * @return cron
+     */
+    String cron() default """";
+    
+    /**
+     * Time zone of CRON.
+     * @return timeZone
+     */
+    String timeZone() default """";
+","[{'comment': 'Please remove the duplicate blank line.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfiguration.java,"@@ -0,0 +1,162 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+
+/**
+ * The annotation that specify a job of elastic.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface ElasticJobConfiguration {
+    
+    /**
+     * Job name.
+     * @return jobName
+     */
+    String jobName();
+    
+    /**
+     * CRON expression, control the job trigger time.
+     * @return cron
+     */
+    String cron() default """";
+    
+    /**
+     * Time zone of CRON.
+     * @return timeZone
+     */
+    String timeZone() default """";
+
+
+    /**
+     * registry center name.
+     * @return registryCenter
+     */
+    String registryCenter() default """";
+
+    /**
+     * Sharding total count.
+     * @return shardingTotalCount
+     */
+    int shardingTotalCount();
+    
+    /**
+     * Sharding item parameters.
+     * @return shardingItemParameters
+     */
+    String shardingItemParameters() default """";
+    
+    /**
+     * Job parameter.
+     * @return jobParameter
+     */
+    String jobParameter() default """";
+    
+    /**
+     * Monitor job execution status.
+     * @return monitorExecution
+     */
+    boolean monitorExecution() default true;
+    
+    /**
+     * Enable or disable job failover.
+     * @return failover
+     */
+    boolean failover() default false;
+    
+    /**
+     * Enable or disable the missed task to re-execute.
+     * @return misfire
+     */
+    boolean misfire() default true;
+    
+    /**
+     * The maximum value for time difference between server and registry center in seconds.
+     * @return maxTimeDiffSeconds
+     */
+    int maxTimeDiffSeconds() default -1;
+    
+    /**
+     * Service scheduling interval in minutes for repairing job server inconsistent state.
+     * @return reconcileIntervalMinutes
+     */
+    int reconcileIntervalMinutes() default 10;
+    
+    /**
+     * Job sharding strategy type.
+     * @return jobShardingStrategyType
+     */
+    String jobShardingStrategyType() default """";
+    
+    /**
+     * Job thread pool handler type.
+     * @return jobExecutorServiceHandlerType
+     */
+    String jobExecutorServiceHandlerType() default """";
+    
+    /**
+     * Job thread pool handler type.
+     * @return jobErrorHandlerType
+     */
+    String jobErrorHandlerType() default """";
+    
+    /**
+     * Job listener types.
+     * @return jobListenerTypes
+     */
+    String[] jobListenerTypes() default {};
+    
+    /**
+     * extra configurations.
+     * @return extraConfigurations
+     */
+    Class<? extends JobExtraConfigurationFactory>[] extraConfigurations() default {};
+    
+    /**
+     * Job description.
+     * @return description
+     */
+    String description() default """";
+    
+    /**
+     * Job properties.
+     * @return props
+     */
+    ElasticJobProp[] props() default {};
+    
+    /**
+     * Enable or disable start the job.
+     * @return disabled
+     */
+    boolean disabled() default false;
+    
+    /**
+     * Enable or disable local configuration override registry center configuration.
+     * @return overwrite
+     */
+    boolean overwrite() default false;
+    ","[{'comment': 'Please remove the duplicate blank line.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/annotation/JobAnnotationBuilder.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.annotation;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
+import java.util.Optional;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
+
+public class JobAnnotationBuilder {
+    
+    /**
+     * generate JobConfiguration from @ElasticJobConfiguration.
+     * @param type The job of @ElasticJobConfiguration annotation class
+     * @return JobConfiguration
+     */
+    public static JobConfiguration generateJobConfiguration(final Class<?> type) {
+        ElasticJobConfiguration annotation = type.getAnnotation(ElasticJobConfiguration.class);
+        Preconditions.checkArgument(null != annotation, ""@ElasticJobConfiguration not found by class '%s'."", type);
+        Preconditions.checkArgument(!Strings.isNullOrEmpty(annotation.jobName()), ""@ElasticJobConfiguration jobName not be empty by class '%s'."", type);","[{'comment': 'Maybe `could not be empty`?', 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/annotation/JobAnnotationBuilder.java,"@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.internal.annotation;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
+import java.util.Optional;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
+
+public class JobAnnotationBuilder {","[{'comment': 'Please add final modifier and javadoc.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/AnnotationUnShardingJob.java,"@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.fixture.job;
+
+import lombok.Getter;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
+
+@Getter
+@ElasticJobConfiguration(
+    jobName = ""AnnotationUnShardingJob"",
+    description = ""desc"",
+    shardingTotalCount = 1
+)
+public class AnnotationUnShardingJob implements SimpleJob {","[{'comment': 'Please add final modifier.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/AnnotationSimpleJob.java,"@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.fixture.job;
+
+import lombok.Getter;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
+
+@Getter
+@ElasticJobConfiguration(
+    jobName = ""AnnotationSimpleJob"",
+    description = ""desc"",
+    shardingTotalCount = 3,
+    shardingItemParameters = ""0=a,1=b,2=c"",
+    cron = ""*/10 * * * * ?"",
+    props = {
+        @ElasticJobProp(key = ""print.title"", value = ""test title""),
+        @ElasticJobProp(key = ""print.content"", value = ""test content"")
+    }
+)
+public class AnnotationSimpleJob implements SimpleJob {","[{'comment': 'Please add final modifier.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfigurationTest.java,"@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertThat;
+
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.Queue;
+import org.apache.shardingsphere.elasticjob.annotation.job.impl.SimpleTestJob;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+import org.junit.Test;
+
+public class ElasticJobConfigurationTest {","[{'comment': 'Please add final modifier.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/SimpleTracingConfigurationFactory.java,"@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation;
+
+import java.util.Optional;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfiguration;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfigurationFactory;
+
+public class SimpleTracingConfigurationFactory implements JobExtraConfigurationFactory {","[{'comment': 'Please add final modifier.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/job/impl/SimpleTestJob.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation.job.impl;
+
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
+import org.apache.shardingsphere.elasticjob.annotation.SimpleTracingConfigurationFactory;
+import org.apache.shardingsphere.elasticjob.annotation.job.CustomJob;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+
+@ElasticJobConfiguration(
+    cron = ""0/5 * * * * ?"",
+    jobName = ""SimpleTestJob"",
+    shardingTotalCount = 3,
+    shardingItemParameters = ""0=Beijing,1=Shanghai,2=Guangzhou"",
+    jobListenerTypes = {""NOOP"", ""LOG""},
+    extraConfigurations = {SimpleTracingConfigurationFactory.class},
+    props = {
+        @ElasticJobProp(key = ""print.title"", value = ""test title""),
+        @ElasticJobProp(key = ""print.content"", value = ""test content"")
+    }
+)
+public class SimpleTestJob implements CustomJob {","[{'comment': 'Please add final modifier.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/job/impl/SimpleTestJob.java,"@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.annotation.job.impl;
+
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
+import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
+import org.apache.shardingsphere.elasticjob.annotation.SimpleTracingConfigurationFactory;
+import org.apache.shardingsphere.elasticjob.annotation.job.CustomJob;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+
+@ElasticJobConfiguration(
+    cron = ""0/5 * * * * ?"",
+    jobName = ""SimpleTestJob"",
+    shardingTotalCount = 3,
+    shardingItemParameters = ""0=Beijing,1=Shanghai,2=Guangzhou"",
+    jobListenerTypes = {""NOOP"", ""LOG""},
+    extraConfigurations = {SimpleTracingConfigurationFactory.class},
+    props = {
+        @ElasticJobProp(key = ""print.title"", value = ""test title""),
+        @ElasticJobProp(key = ""print.content"", value = ""test content"")
+    }
+)
+public class SimpleTestJob implements CustomJob {
+    
+    @Override
+    public void execute(final ShardingContext shardingContext) {
+    }
+    ","[{'comment': 'Please remove the redundant blank line.', 'commenter': 'TeslaCN'}]"
2103,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/resources/META-INF/namespace/elasticjob.xsd,"@@ -21,76 +21,87 @@
             xmlns:beans=""http://www.springframework.org/schema/beans""
             targetNamespace=""http://shardingsphere.apache.org/schema/elasticjob""
             elementFormDefault=""qualified"">
-    <xsd:import namespace=""http://www.springframework.org/schema/beans"" schemaLocation=""http://www.springframework.org/schema/beans/spring-beans.xsd"" />
-    
+    <xsd:import namespace=""http://www.springframework.org/schema/beans""
+                schemaLocation=""http://www.springframework.org/schema/beans/spring-beans.xsd""/>
+
+    <xsd:element name=""job-scanner"">
+        <xsd:complexType>
+            <xsd:complexContent>
+                <xsd:extension base=""beans:identifiedType"">
+                    <xsd:attribute name=""base-package"" type=""xsd:string"" use=""required""/>
+                </xsd:extension>
+            </xsd:complexContent>
+        </xsd:complexType>
+    </xsd:element>
+
     <xsd:element name=""job"">
         <xsd:complexType>
             <xsd:complexContent>
                 <xsd:extension base=""beans:identifiedType"">
                     <xsd:all>
                         <xsd:element ref=""beans:props"" minOccurs=""0"" />
                     </xsd:all>
-                    <xsd:attribute name=""job-ref"" type=""xsd:string"" />
-                    <xsd:attribute name=""job-type"" type=""xsd:string"" />
-                    <xsd:attribute name=""registry-center-ref"" type=""xsd:string"" use=""required"" />
-                    <xsd:attribute name=""sharding-total-count"" type=""xsd:string"" use=""required"" />
-                    <xsd:attribute name=""cron"" type=""xsd:string"" />
-                    <xsd:attribute name=""time-zone"" type=""xsd:string"" />
-                    <xsd:attribute name=""sharding-item-parameters"" type=""xsd:string"" />
-                    <xsd:attribute name=""job-parameter"" type=""xsd:string"" />
-                    <xsd:attribute name=""monitor-execution"" type=""xsd:string"" default=""true"" />
-                    <xsd:attribute name=""max-time-diff-seconds"" type=""xsd:string"" default=""-1"" />
-                    <xsd:attribute name=""failover"" type=""xsd:string"" default=""false"" />
-                    <xsd:attribute name=""reconcile-interval-minutes"" type=""xsd:string"" default=""10"" />
-                    <xsd:attribute name=""misfire"" type=""xsd:string"" default=""true"" />
-                    <xsd:attribute name=""job-sharding-strategy-type"" type=""xsd:string"" />
-                    <xsd:attribute name=""job-executor-service-handler-type"" type=""xsd:string"" />
-                    <xsd:attribute name=""job-error-handler-type"" type=""xsd:string"" />
-                    <xsd:attribute name=""job-listener-types"" type=""xsd:string"" />
-                    <xsd:attribute name=""tracing-ref"" type=""xsd:string"" />
-                    <xsd:attribute name=""description"" type=""xsd:string"" />
-                    <xsd:attribute name=""disabled"" type=""xsd:string"" default=""false"" />
-                    <xsd:attribute name=""overwrite"" type=""xsd:string"" default=""false"" />
-                    <xsd:attribute name=""label"" type=""xsd:string"" />
-                    <xsd:attribute name=""static-sharding"" type=""xsd:string"" default=""false"" />
+                    <xsd:attribute name=""job-ref"" type=""xsd:string""/>
+                    <xsd:attribute name=""job-type"" type=""xsd:string""/>
+                    <xsd:attribute name=""registry-center-ref"" type=""xsd:string"" use=""required""/>
+                    <xsd:attribute name=""sharding-total-count"" type=""xsd:string"" use=""required""/>
+                    <xsd:attribute name=""cron"" type=""xsd:string""/>
+                    <xsd:attribute name=""time-zone"" type=""xsd:string""/>
+                    <xsd:attribute name=""sharding-item-parameters"" type=""xsd:string""/>
+                    <xsd:attribute name=""job-parameter"" type=""xsd:string""/>
+                    <xsd:attribute name=""monitor-execution"" type=""xsd:string"" default=""true""/>
+                    <xsd:attribute name=""max-time-diff-seconds"" type=""xsd:string"" default=""-1""/>
+                    <xsd:attribute name=""failover"" type=""xsd:string"" default=""false""/>
+                    <xsd:attribute name=""reconcile-interval-minutes"" type=""xsd:string"" default=""10""/>
+                    <xsd:attribute name=""misfire"" type=""xsd:string"" default=""true""/>
+                    <xsd:attribute name=""job-sharding-strategy-type"" type=""xsd:string""/>
+                    <xsd:attribute name=""job-executor-service-handler-type"" type=""xsd:string""/>
+                    <xsd:attribute name=""job-error-handler-type"" type=""xsd:string""/>
+                    <xsd:attribute name=""job-listener-types"" type=""xsd:string""/>
+                    <xsd:attribute name=""tracing-ref"" type=""xsd:string""/>
+                    <xsd:attribute name=""description"" type=""xsd:string""/>
+                    <xsd:attribute name=""disabled"" type=""xsd:string"" default=""false""/>
+                    <xsd:attribute name=""overwrite"" type=""xsd:string"" default=""false""/>
+                    <xsd:attribute name=""label"" type=""xsd:string""/>
+                    <xsd:attribute name=""static-sharding"" type=""xsd:string"" default=""false""/>
                 </xsd:extension>
             </xsd:complexContent>
         </xsd:complexType>
     </xsd:element>
-    
+
     <xsd:element name=""zookeeper"">
         <xsd:complexType>
             <xsd:complexContent>
                 <xsd:extension base=""beans:identifiedType"">
-                    <xsd:attribute name=""server-lists"" type=""xsd:string"" use=""required"" />
-                    <xsd:attribute name=""namespace"" type=""xsd:string"" use=""required"" />
-                    <xsd:attribute name=""base-sleep-time-milliseconds"" type=""xsd:string"" />
-                    <xsd:attribute name=""max-sleep-time-milliseconds"" type=""xsd:string"" />
-                    <xsd:attribute name=""max-retries"" type=""xsd:string"" />
-                    <xsd:attribute name=""session-timeout-milliseconds"" type=""xsd:string"" />
-                    <xsd:attribute name=""connection-timeout-milliseconds"" type=""xsd:string"" />
-                    <xsd:attribute name=""digest"" type=""xsd:string"" />
+                    <xsd:attribute name=""server-lists"" type=""xsd:string"" use=""required""/>
+                    <xsd:attribute name=""namespace"" type=""xsd:string"" use=""required""/>
+                    <xsd:attribute name=""base-sleep-time-milliseconds"" type=""xsd:string""/>
+                    <xsd:attribute name=""max-sleep-time-milliseconds"" type=""xsd:string""/>
+                    <xsd:attribute name=""max-retries"" type=""xsd:string""/>
+                    <xsd:attribute name=""session-timeout-milliseconds"" type=""xsd:string""/>
+                    <xsd:attribute name=""connection-timeout-milliseconds"" type=""xsd:string""/>
+                    <xsd:attribute name=""digest"" type=""xsd:string""/>
                 </xsd:extension>
             </xsd:complexContent>
         </xsd:complexType>
     </xsd:element>
-    
+
     <xsd:element name=""rdb-tracing"">
         <xsd:complexType>
             <xsd:complexContent>
                 <xsd:extension base=""beans:identifiedType"">
-                    <xsd:attribute name=""data-source-ref"" type=""xsd:string"" use=""required"" />
+                    <xsd:attribute name=""data-source-ref"" type=""xsd:string"" use=""required""/>
                 </xsd:extension>
             </xsd:complexContent>
         </xsd:complexType>
     </xsd:element>
-    
+
     <xsd:element name=""snapshot"">
         <xsd:complexType>
             <xsd:complexContent>
                 <xsd:extension base=""beans:identifiedType"">
-                    <xsd:attribute name=""registry-center-ref"" type=""xsd:string"" use=""required"" />
-                    <xsd:attribute name=""dump-port"" type=""xsd:string"" use=""required"" />","[{'comment': 'Please revert these format changes.', 'commenter': 'TeslaCN'}, {'comment': 'done', 'commenter': 'sunkai-cai'}]"
2103,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/core/scanner/JobScannerConfiguration.java,"@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.core.scanner;
+
+import lombok.Getter;
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
+import org.springframework.util.Assert;
+
+/**
+ * BeanDefinitionRegistryPostProcessor that searches recursively starting from a base package for interfaces.
+ *
+ */
+@Getter
+public class JobScannerConfiguration implements BeanDefinitionRegistryPostProcessor, InitializingBean {
+
+    private final String[] basePackages;
+
+    public JobScannerConfiguration(final String[] basePackages) {","[{'comment': 'This could be simplified by `@RequiredArgsConstructor`.', 'commenter': 'TeslaCN'}, {'comment': 'done', 'commenter': 'sunkai-cai'}]"
2103,elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/core/scanner/ElasticJobScanRegistrar.java,"@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.elasticjob.lite.spring.core.scanner;
+
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.context.ResourceLoaderAware;
+import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
+import org.springframework.core.annotation.AnnotationAttributes;
+import org.springframework.core.io.ResourceLoader;
+import org.springframework.core.type.AnnotationMetadata;
+import org.springframework.util.StringUtils;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+/**
+ * A {@link ImportBeanDefinitionRegistrar} to allow annotation configuration of Elastic Job scanning.
+ *
+ * @see ClassPathJobScanner
+ */
+public class ElasticJobScanRegistrar implements ImportBeanDefinitionRegistrar, ResourceLoaderAware {
+
+    /**
+     * set resourceLoader.
+     * @param resourceLoader resourceLoader
+     *
+     * @deprecated  NOP
+     */
+    @Override
+    @Deprecated
+    public void setResourceLoader(final ResourceLoader resourceLoader) {
+        // NOP
+    }","[{'comment': 'Why this mark as `@Deprecated`?', 'commenter': 'TeslaCN'}, {'comment': 'right，we don‘t need implements ResourceLoaderAware. I remove it. ', 'commenter': 'sunkai-cai'}]"
2124,elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/BaseIntegrateTest.java,"@@ -92,7 +90,7 @@ public void setUp() {
     @After
     public void tearDown() {
         jobBootstrap.shutdown();
-        ReflectionUtils.setFieldValue(JobRegistry.getInstance(), ""instance"", null);
+        // ReflectionUtils.setFieldValue(JobRegistry.getInstance(), ""instance"", null);","[{'comment': '@xlcn Hi, why adjustment here?\r\n', 'commenter': 'zhaojinchao95'}]"
2124,elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/enable/EnabledJobIntegrateTest.java,"@@ -54,7 +54,7 @@ public final void assertEnabledRegCenterInfo() {
         assertThat(getREGISTRY_CENTER().get(""/"" + getJobName() + ""/servers/"" + JobRegistry.getInstance().getJobInstance(getJobName()).getServerIp()), is(ServerStatus.ENABLED.name()));
         assertThat(getREGISTRY_CENTER().get(""/"" + getJobName() + ""/leader/election/instance""), is(JobRegistry.getInstance().getJobInstance(getJobName()).getJobInstanceId()));
         assertTrue(getREGISTRY_CENTER().isExisted(""/"" + getJobName() + ""/instances/"" + JobRegistry.getInstance().getJobInstance(getJobName()).getJobInstanceId()));
-        getREGISTRY_CENTER().remove(""/"" + getJobName() + ""/leader/election"");
-        assertTrue(getLeaderService().isLeaderUntilBlock());
+        // getREGISTRY_CENTER().remove(""/"" + getJobName() + ""/leader/election"");
+        // assertTrue(getLeaderService().isLeaderUntilBlock());","[{'comment': '@xlcn Hi, why adjustment here?', 'commenter': 'zhaojinchao95'}]"
2124,elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/DetailedFooJob.java,"@@ -21,17 +21,19 @@
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
 
 import java.util.Collection;
-import java.util.concurrent.CopyOnWriteArraySet;
+import java.util.Collections;
+import java.util.HashSet;
 
 public final class DetailedFooJob implements FooJob {
     
-    private final Collection<Integer> completedJobItems = new CopyOnWriteArraySet<>();
+    private final Collection<Integer> completedJobItems = Collections.synchronizedSet(new HashSet<>());
     
     @Getter
     private volatile boolean completed;
     
     @Override
     public void foo(final ShardingContext shardingContext) {
+        System.out.println(Thread.currentThread().getName() + "" foo execute "" + shardingContext);","[{'comment': 'Please remove this line.', 'commenter': 'zhaojinchao95'}]"
2151,elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/impl/RoundRobinByNameJobShardingStrategy.java,"@@ -38,7 +38,13 @@ public Map<JobInstance, List<Integer>> sharding(final List<JobInstance> jobInsta
     
     private List<JobInstance> rotateServerList(final List<JobInstance> shardingUnits, final String jobName) {
         int shardingUnitsSize = shardingUnits.size();
-        int offset = Math.abs(jobName.hashCode()) % shardingUnitsSize;
+        int jobHashCode = jobName.hashCode();
+        int offset = 0;
+        if (jobHashCode != Integer.MIN_VALUE) {
+            offset = Math.abs(jobHashCode) % shardingUnitsSize;
+        } else {
+            offset = Integer.MIN_VALUE % shardingUnitsSize;
+        }","[{'comment': 'Hi @zume0127 \r\nCould you complete the tests `org.apache.shardingsphere.elasticjob.infra.handler.sharding.impl.RotateServerByNameJobShardingStrategyTest` for your logic?', 'commenter': 'TeslaCN'}]"
2168,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeService.java,"@@ -17,11 +17,16 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.guarantee;
 
+import org.apache.curator.framework.CuratorFramework;
+import org.apache.curator.framework.recipes.locks.InterProcessMutex;","[{'comment': 'We have decoupled registry center since 3.0.2. Using curator here directly may not acceptable.', 'commenter': 'TeslaCN'}]"
2168,elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeServiceTest.java,"@@ -143,4 +152,32 @@ public void assertClearAllCompletedInfo() {
         guaranteeService.clearAllCompletedInfo();
         verify(jobNodeStorage).removeJobNodeIfExisted(""guarantee/completed"");
     }
+","[{'comment': 'Does it work without `@Test` annotation?', 'commenter': 'TeslaCN'}, {'comment': '> Does it work without `@Test` annotation?\r\n\r\ndone', 'commenter': 'xlcn'}]"
2168,elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeService.java,"@@ -105,21 +109,90 @@ public boolean isRegisterCompleteSuccess(final Collection<Integer> shardingItems
         }
         return true;
     }
-    
+
     /**
      * Judge whether job's sharding items are all completed.
      *
      * @return job's sharding items are all completed or not
      */
     public boolean isAllCompleted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.COMPLETED_ROOT)
-                && configService.load(false).getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
+                && configService.load(false).getShardingTotalCount()
+                <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
     }
-    
+","[{'comment': 'Could you revert the unrelated changes in this file?', 'commenter': 'TeslaCN'}, {'comment': 'Whitespace can not revert, no diff, git can not push, could be problem of line break format, my format is LF. Do I need to handle it in other ways?', 'commenter': 'xlcn'}, {'comment': 'Got it. Let me handle it later.', 'commenter': 'TeslaCN'}]"
